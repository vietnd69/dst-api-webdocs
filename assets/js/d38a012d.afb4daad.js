"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[34658],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>r});var i=s(96540);const l={},t=i.createContext(l);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),i.createElement(t.Provider,{value:n},e.children)}},34299:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>o,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"game-scripts/core-systems/game-configuration/settings/tuning","title":"Tuning","description":"Central game balance and configuration system controlling gameplay parameters across Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/game-configuration/settings/tuning.md","sourceDirName":"game-scripts/core-systems/game-configuration/settings","slug":"/game-scripts/core-systems/game-configuration/settings/tuning","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/tuning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"tuning","title":"Tuning","description":"Central game balance and configuration system controlling gameplay parameters across Don\'t Starve Together","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Global Variable Overrides (PAX Server)","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/globalvariableoverrides-pax-server"},"next":{"title":"Tuning Override","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/tuning-override"}}');var l=s(74848),t=s(28453);const d={id:"tuning",title:"Tuning",description:"Central game balance and configuration system controlling gameplay parameters across Don't Starve Together",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},r="Tuning",a={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Global Tables",id:"global-tables",level:2},{value:"TUNING",id:"tuning-1",level:3},{value:"TUNING_MODIFIERS",id:"tuning_modifiers",level:3},{value:"ORIGINAL_TUNING",id:"original_tuning",level:3},{value:"Core Functions",id:"core-functions",level:2},{value:"Tune(overrides)",id:"tune-function",level:3},{value:"AddTuningModifier(tuning_var, fn, tuning_value)",id:"add-tuning-modifier",level:3},{value:"Time Constants",id:"time-constants",level:2},{value:"Core Time Values",id:"core-time-values",level:3},{value:"Character Statistics",id:"character-statistics",level:2},{value:"Base Character Values",id:"base-character-values",level:3},{value:"Character-Specific Values",id:"character-specific-values",level:3},{value:"Combat System",id:"combat-system",level:2},{value:"Base Damage Values",id:"base-damage-values",level:3},{value:"Weapon Damage",id:"weapon-damage",level:3},{value:"Weapon Durability",id:"weapon-durability",level:3},{value:"Item Stack Sizes",id:"item-stack-sizes",level:2},{value:"Food and Healing Values",id:"food-and-healing-values",level:2},{value:"Hunger (Calories) Values",id:"hunger-calories-values",level:3},{value:"Health Values",id:"health-values",level:3},{value:"Sanity Values",id:"sanity-values",level:3},{value:"Multiplayer Balance Modifiers",id:"multiplayer-balance-modifiers",level:2},{value:"Ocean and Fishing System",id:"ocean-and-fishing-system",level:2},{value:"Ocean Fishing Constants",id:"ocean-fishing-constants",level:3},{value:"Tackle and Lure Systems",id:"tackle-and-lure-systems",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Using Tuning Values in Components",id:"using-tuning-values-in-components",level:3},{value:"Modifying Tuning Values",id:"modifying-tuning-values",level:3},{value:"Creating Custom Tuning Categories",id:"creating-custom-tuning-categories",level:3},{value:"Integration Notes",id:"integration-notes",level:2},{value:"Relationship to Other Systems",id:"relationship-to-other-systems",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Mod Compatibility",id:"mod-compatibility",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Source Reference",id:"source-reference",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"tuning",children:"Tuning"})}),"\n",(0,l.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Build Version"}),(0,l.jsx)(n.th,{children:"Change Date"}),(0,l.jsx)(n.th,{children:"Change Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"676042"}),(0,l.jsx)(n.td,{children:"2025-06-21"}),(0,l.jsx)(n.td,{children:"stable"}),(0,l.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Tuning"})," system provides the central game balance and configuration mechanism for Don't Starve Together. It consists of a global ",(0,l.jsx)(n.code,{children:"TUNING"})," table containing hundreds of numeric values that control almost every aspect of gameplay, including damage values, tool durability, character stats, time settings, and world generation parameters. The system enables consistent game balance and facilitates easy adjustments without modifying core game logic."]}),"\n",(0,l.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Access tuning values for gameplay mechanics\nlocal player_health = TUNING.WILSON_HEALTH  -- 150\nlocal spear_damage = TUNING.SPEAR_DAMAGE    -- 34\nlocal day_length = TUNING.TOTAL_DAY_TIME    -- 480 seconds\n\n-- Use tuning values in component setup\ninst.components.health:SetMaxHealth(TUNING.WILSON_HEALTH)\ninst.components.weapon:SetDamage(TUNING.SPEAR_DAMAGE)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"global-tables",children:"Global Tables"}),"\n",(0,l.jsx)(n.h3,{id:"tuning-1",children:"TUNING"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," The main global table containing all game balance values. Populated by the ",(0,l.jsx)(n.code,{children:"Tune()"})," function during game initialization."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"TUNING = {\n    -- Time constants\n    SEG_TIME = 30,\n    TOTAL_DAY_TIME = 480,\n    \n    -- Character stats\n    WILSON_HEALTH = 150,\n    WILSON_HUNGER = 150,\n    WILSON_SANITY = 200,\n    \n    -- Tool durability and damage\n    SPEAR_DAMAGE = 34,\n    SPEAR_USES = 150,\n    \n    -- And hundreds more values...\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"tuning_modifiers",children:"TUNING_MODIFIERS"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Table storing modifier functions for tuning values that can be dynamically calculated. Used by the ",(0,l.jsx)(n.code,{children:"AddTuningModifier()"})," function."]}),"\n",(0,l.jsx)(n.h3,{id:"original_tuning",children:"ORIGINAL_TUNING"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Backup table storing original tuning values before modifications are applied. Used for restoration purposes."]}),"\n",(0,l.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,l.jsx)(n.h3,{id:"tune-function",children:"Tune(overrides)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Main function that populates the TUNING table with all game balance values. Called during game initialization with optional override parameters."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"overrides"})," (table, optional): Table of override values to modify default tuning"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Called internally during game startup\nTune() -- Uses default values\n\n-- Called with overrides\nTune({\n    wilson_health = 200,  -- Override Wilson's health\n    day_time = 300       -- Override day length\n})\n"})}),"\n",(0,l.jsx)(n.h3,{id:"add-tuning-modifier",children:"AddTuningModifier(tuning_var, fn, tuning_value)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Safely modifies tuning values using a transformation function. Stores the original value and applies the modifier function when the value is accessed."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"tuning_var"}),' (string): Name of the TUNING variable to modify (e.g., "WILSON_HEALTH")']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"fn"})," (function): Function that transforms the value"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"tuning_value"})," (number): Default value if the tuning variable doesn't exist"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Increase Wilson\'s health by 20%\nAddTuningModifier("WILSON_HEALTH", function(health) \n    return health * 1.2 \nend, 150)\n\n-- Add difficulty scaling to damage\nAddTuningModifier("SPEAR_DAMAGE", function(damage)\n    return damage * GetDifficultyMultiplier()\nend, 34)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"time-constants",children:"Time Constants"}),"\n",(0,l.jsx)(n.p,{children:"Time values form the foundation of many game mechanics:"}),"\n",(0,l.jsx)(n.h3,{id:"core-time-values",children:"Core Time Values"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Constant"}),(0,l.jsx)(n.th,{children:"Value"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"SEG_TIME"})}),(0,l.jsx)(n.td,{children:"30"}),(0,l.jsx)(n.td,{children:"Duration of one day segment in seconds"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"TOTAL_DAY_TIME"})}),(0,l.jsx)(n.td,{children:"480"}),(0,l.jsx)(n.td,{children:"Total day length (16 segments)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"DAY_SEGS_DEFAULT"})}),(0,l.jsx)(n.td,{children:"10"}),(0,l.jsx)(n.td,{children:"Number of daytime segments"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"DUSK_SEGS_DEFAULT"})}),(0,l.jsx)(n.td,{children:"4"}),(0,l.jsx)(n.td,{children:"Number of dusk segments"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"NIGHT_SEGS_DEFAULT"})}),(0,l.jsx)(n.td,{children:"2"}),(0,l.jsx)(n.td,{children:"Number of night segments"})]})]})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Calculate time periods\nlocal day_duration = TUNING.SEG_TIME * TUNING.DAY_SEGS_DEFAULT    -- 300 seconds\nlocal dusk_duration = TUNING.SEG_TIME * TUNING.DUSK_SEGS_DEFAULT  -- 120 seconds\nlocal night_duration = TUNING.SEG_TIME * TUNING.NIGHT_SEGS_DEFAULT -- 60 seconds\n"})}),"\n",(0,l.jsx)(n.h2,{id:"character-statistics",children:"Character Statistics"}),"\n",(0,l.jsx)(n.h3,{id:"base-character-values",children:"Base Character Values"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Constant"}),(0,l.jsx)(n.th,{children:"Value"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"WILSON_HEALTH"})}),(0,l.jsx)(n.td,{children:"150"}),(0,l.jsx)(n.td,{children:"Base character health"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"WILSON_HUNGER"})}),(0,l.jsx)(n.td,{children:"150"}),(0,l.jsx)(n.td,{children:"Base hunger capacity"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"WILSON_SANITY"})}),(0,l.jsx)(n.td,{children:"200"}),(0,l.jsx)(n.td,{children:"Base sanity maximum"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"WILSON_HUNGER_RATE"})}),(0,l.jsx)(n.td,{children:"0.15625"}),(0,l.jsx)(n.td,{children:"Hunger drain per second (75/480)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"WILSON_ATTACK_PERIOD"})}),(0,l.jsx)(n.td,{children:"0.4"}),(0,l.jsx)(n.td,{children:"Time between attacks"})]})]})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Set up character components\nfunction SetupCharacterStats(inst)\n    inst.components.health:SetMaxHealth(TUNING.WILSON_HEALTH)\n    inst.components.hunger:SetMax(TUNING.WILSON_HUNGER)\n    inst.components.sanity:SetMax(TUNING.WILSON_SANITY)\n    inst.components.hunger:SetRate(TUNING.WILSON_HUNGER_RATE)\nend\n"})}),"\n",(0,l.jsx)(n.h3,{id:"character-specific-values",children:"Character-Specific Values"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"WX-78 Statistics:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"TUNING.WX78_HEALTH = 125    -- Starting health (lower than Wilson)\nTUNING.WX78_HUNGER = 125    -- Starting hunger\nTUNING.WX78_SANITY = 150    -- Starting sanity\nTUNING.WX78_MIN_HEALTH = 150  -- Minimum upgraded health\nTUNING.WX78_MAX_HEALTH = 400  -- Maximum upgraded health\n"})}),"\n",(0,l.jsx)(n.h2,{id:"combat-system",children:"Combat System"}),"\n",(0,l.jsx)(n.h3,{id:"base-damage-values",children:"Base Damage Values"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Constant"}),(0,l.jsx)(n.th,{children:"Value"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"BASE_SURVIVOR_ATTACK"})}),(0,l.jsx)(n.td,{children:"34"}),(0,l.jsx)(n.td,{children:"Base player unarmed damage"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"UNARMED_DAMAGE"})}),(0,l.jsx)(n.td,{children:"10"}),(0,l.jsx)(n.td,{children:"Damage when completely unarmed"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"DEFAULT_ATTACK_RANGE"})}),(0,l.jsx)(n.td,{children:"2"}),(0,l.jsx)(n.td,{children:"Standard melee attack range"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"DEFAULT_HIT_RECOVERY"})}),(0,l.jsx)(n.td,{children:"0.75"}),(0,l.jsx)(n.td,{children:"Recovery time after being hit"})]})]})]}),"\n",(0,l.jsx)(n.h3,{id:"weapon-damage",children:"Weapon Damage"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Melee Weapons:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"TUNING.SPEAR_DAMAGE = 34              -- 1x base damage\nTUNING.NIGHTSWORD_DAMAGE = 68         -- 2x base damage\nTUNING.HAMBAT_DAMAGE = 59.5           -- 1.75x base damage\nTUNING.BATBAT_DAMAGE = 42.5           -- 1.25x base damage\nTUNING.SPIKE_DAMAGE = 51              -- 1.5x base damage\nTUNING.RUINS_BAT_DAMAGE = 59.5        -- 1.75x base damage\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Tool Damage:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"TUNING.AXE_DAMAGE = 27.2              -- 0.8x base damage\nTUNING.PICKAXE_DAMAGE = 27.2          -- 0.8x base damage\nTUNING.HAMMER_DAMAGE = 17             -- 0.5x base damage\nTUNING.TORCH_DAMAGE = 17              -- 0.5x base damage\n"})}),"\n",(0,l.jsx)(n.h3,{id:"weapon-durability",children:"Weapon Durability"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Melee Weapons:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"TUNING.SPEAR_USES = 150\nTUNING.NIGHTSWORD_USES = 100\nTUNING.HAMBAT_USES = 100\nTUNING.BATBAT_USES = 75\nTUNING.RUINS_BAT_USES = 200\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Tools:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"TUNING.AXE_USES = 100\nTUNING.PICKAXE_USES = 33\nTUNING.HAMMER_USES = 75\nTUNING.SHOVEL_USES = 25\nTUNING.PITCHFORK_USES = 25\n"})}),"\n",(0,l.jsx)(n.h2,{id:"item-stack-sizes",children:"Item Stack Sizes"}),"\n",(0,l.jsx)(n.p,{children:"Different item categories have different maximum stack sizes:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Constant"}),(0,l.jsx)(n.th,{children:"Value"}),(0,l.jsx)(n.th,{children:"Category"}),(0,l.jsx)(n.th,{children:"Examples"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"STACK_SIZE_LARGEITEM"})}),(0,l.jsx)(n.td,{children:"10"}),(0,l.jsx)(n.td,{children:"Large items"}),(0,l.jsx)(n.td,{children:"Logs, rocks, gold"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"STACK_SIZE_MEDITEM"})}),(0,l.jsx)(n.td,{children:"20"}),(0,l.jsx)(n.td,{children:"Medium items"}),(0,l.jsx)(n.td,{children:"Grass, twigs, flint"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"STACK_SIZE_SMALLITEM"})}),(0,l.jsx)(n.td,{children:"40"}),(0,l.jsx)(n.td,{children:"Small items"}),(0,l.jsx)(n.td,{children:"Berries, seeds, petals"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"STACK_SIZE_TINYITEM"})}),(0,l.jsx)(n.td,{children:"60"}),(0,l.jsx)(n.td,{children:"Tiny items"}),(0,l.jsx)(n.td,{children:"Butterfly wings, flower petals"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"STACK_SIZE_PELLET"})}),(0,l.jsx)(n.td,{children:"120"}),(0,l.jsx)(n.td,{children:"Pellet items"}),(0,l.jsx)(n.td,{children:"Gunpowder pellets"})]})]})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Set appropriate stack size for an item\nfunction SetItemStackSize(inst, category)\n    local stack_size = TUNING["STACK_SIZE_" .. string.upper(category)]\n    inst.components.stackable:SetStackSize(stack_size)\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"food-and-healing-values",children:"Food and Healing Values"}),"\n",(0,l.jsx)(n.h3,{id:"hunger-calories-values",children:"Hunger (Calories) Values"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Constant"}),(0,l.jsx)(n.th,{children:"Value"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CALORIES_TINY"})}),(0,l.jsx)(n.td,{children:"9.375"}),(0,l.jsx)(n.td,{children:"Tiny food value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CALORIES_SMALL"})}),(0,l.jsx)(n.td,{children:"12.5"}),(0,l.jsx)(n.td,{children:"Small food value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CALORIES_MEDSMALL"})}),(0,l.jsx)(n.td,{children:"18.75"}),(0,l.jsx)(n.td,{children:"Medium-small food value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CALORIES_MED"})}),(0,l.jsx)(n.td,{children:"25"}),(0,l.jsx)(n.td,{children:"Medium food value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CALORIES_LARGE"})}),(0,l.jsx)(n.td,{children:"37.5"}),(0,l.jsx)(n.td,{children:"Large food value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CALORIES_HUGE"})}),(0,l.jsx)(n.td,{children:"75"}),(0,l.jsx)(n.td,{children:"Huge food value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CALORIES_SUPERHUGE"})}),(0,l.jsx)(n.td,{children:"150"}),(0,l.jsx)(n.td,{children:"Super huge food value"})]})]})]}),"\n",(0,l.jsx)(n.h3,{id:"health-values",children:"Health Values"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Constant"}),(0,l.jsx)(n.th,{children:"Value"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"HEALING_TINY"})}),(0,l.jsx)(n.td,{children:"1"}),(0,l.jsx)(n.td,{children:"Tiny healing amount"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"HEALING_SMALL"})}),(0,l.jsx)(n.td,{children:"3"}),(0,l.jsx)(n.td,{children:"Small healing amount"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"HEALING_MEDSMALL"})}),(0,l.jsx)(n.td,{children:"8"}),(0,l.jsx)(n.td,{children:"Medium-small healing"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"HEALING_MED"})}),(0,l.jsx)(n.td,{children:"20"}),(0,l.jsx)(n.td,{children:"Medium healing amount"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"HEALING_MEDLARGE"})}),(0,l.jsx)(n.td,{children:"30"}),(0,l.jsx)(n.td,{children:"Medium-large healing"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"HEALING_LARGE"})}),(0,l.jsx)(n.td,{children:"40"}),(0,l.jsx)(n.td,{children:"Large healing amount"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"HEALING_HUGE"})}),(0,l.jsx)(n.td,{children:"60"}),(0,l.jsx)(n.td,{children:"Huge healing amount"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"HEALING_SUPERHUGE"})}),(0,l.jsx)(n.td,{children:"100"}),(0,l.jsx)(n.td,{children:"Super huge healing"})]})]})]}),"\n",(0,l.jsx)(n.h3,{id:"sanity-values",children:"Sanity Values"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Constant"}),(0,l.jsx)(n.th,{children:"Value"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"SANITY_SUPERTINY"})}),(0,l.jsx)(n.td,{children:"1"}),(0,l.jsx)(n.td,{children:"Super tiny sanity change"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"SANITY_TINY"})}),(0,l.jsx)(n.td,{children:"5"}),(0,l.jsx)(n.td,{children:"Tiny sanity change"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"SANITY_SMALL"})}),(0,l.jsx)(n.td,{children:"10"}),(0,l.jsx)(n.td,{children:"Small sanity change"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"SANITY_MED"})}),(0,l.jsx)(n.td,{children:"15"}),(0,l.jsx)(n.td,{children:"Medium sanity change"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"SANITY_MEDLARGE"})}),(0,l.jsx)(n.td,{children:"20"}),(0,l.jsx)(n.td,{children:"Medium-large sanity change"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"SANITY_LARGE"})}),(0,l.jsx)(n.td,{children:"33"}),(0,l.jsx)(n.td,{children:"Large sanity change"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"SANITY_HUGE"})}),(0,l.jsx)(n.td,{children:"50"}),(0,l.jsx)(n.td,{children:"Huge sanity change"})]})]})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Set food component values\nfunction SetFoodValues(inst, hunger_size, health_size, sanity_size)\n    local hunger_val = TUNING["CALORIES_" .. string.upper(hunger_size)]\n    local health_val = TUNING["HEALING_" .. string.upper(health_size)]\n    local sanity_val = TUNING["SANITY_" .. string.upper(sanity_size)]\n    \n    inst.components.edible.hungervalue = hunger_val\n    inst.components.edible.healthvalue = health_val\n    inst.components.edible.sanityvalue = sanity_val\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"multiplayer-balance-modifiers",children:"Multiplayer Balance Modifiers"}),"\n",(0,l.jsx)(n.p,{children:"The tuning system includes special modifiers for multiplayer balance:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Constant"}),(0,l.jsx)(n.th,{children:"Value"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"MULTIPLAYER_ATTACK_MODIFIER"})}),(0,l.jsx)(n.td,{children:"1"}),(0,l.jsx)(n.td,{children:"Player damage modifier in multiplayer"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"MULTIPLAYER_GOLDENTOOL_MODIFIER"})}),(0,l.jsx)(n.td,{children:"1"}),(0,l.jsx)(n.td,{children:"Golden tool efficiency modifier"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"MULTIPLAYER_ARMOR_DURABILITY_MODIFIER"})}),(0,l.jsx)(n.td,{children:"0.7"}),(0,l.jsx)(n.td,{children:"Armor durability modifier (reduced)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"MULTIPLAYER_ARMOR_ABSORPTION_MODIFIER"})}),(0,l.jsx)(n.td,{children:"1"}),(0,l.jsx)(n.td,{children:"Armor absorption modifier"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"MULTIPLAYER_WILDLIFE_RESPAWN_MODIFIER"})}),(0,l.jsx)(n.td,{children:"1"}),(0,l.jsx)(n.td,{children:"Wildlife respawn rate modifier"})]})]})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Apply multiplayer balance in damage calculations\nfunction CalculatePlayerDamage(base_damage)\n    return base_damage * TUNING.MULTIPLAYER_ATTACK_MODIFIER\nend\n\n-- Apply multiplayer balance to armor durability\nfunction SetArmorDurability(inst, base_uses)\n    local multiplayer_uses = base_uses * TUNING.MULTIPLAYER_ARMOR_DURABILITY_MODIFIER\n    inst.components.armor:SetMaxUses(multiplayer_uses)\nend\n"})}),"\n",(0,l.jsx)(n.h2,{id:"ocean-and-fishing-system",children:"Ocean and Fishing System"}),"\n",(0,l.jsx)(n.p,{children:"The tuning system includes extensive values for ocean fishing mechanics:"}),"\n",(0,l.jsx)(n.h3,{id:"ocean-fishing-constants",children:"Ocean Fishing Constants"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"TUNING.OCEAN_FISHING = {\n    MAX_CAST_DIST = 16,              -- Maximum fishing cast distance\n    REEL_STRENGTH_MIN = 2,           -- Minimum reel strength\n    REEL_STRENGTH_MAX = 3,           -- Maximum reel strength\n    LINE_TENSION_HIGH = 0.80,        -- High tension threshold\n    LINE_TENSION_GOOD = 0.10,        -- Good tension threshold\n    FISHING_CATCH_DIST = 2.5,        -- Distance to catch fish\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"tackle-and-lure-systems",children:"Tackle and Lure Systems"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Bobber Accuracy Modifiers:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"TUNING.OCEANFISHING_TACKLE = {\n    BASE = {\n        dist_max = 5,\n        dist_min_accuracy = 0.70,\n        dist_max_accuracy = 1.30,\n        max_angle_offset = 40\n    },\n    BOBBER_TWIG = {\n        dist_max = 2,\n        dist_min_accuracy = 0.10,\n        max_angle_offset = -10\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,l.jsx)(n.h3,{id:"using-tuning-values-in-components",children:"Using Tuning Values in Components"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Weapon component setup\nfunction SetupWeapon(inst, weapon_type)\n    local damage_key = string.upper(weapon_type) .. "_DAMAGE"\n    local uses_key = string.upper(weapon_type) .. "_USES"\n    \n    inst.components.weapon:SetDamage(TUNING[damage_key] or TUNING.BASE_SURVIVOR_ATTACK)\n    inst.components.finiteuses:SetMaxUses(TUNING[uses_key] or 100)\nend\n\n-- Character stat scaling\nfunction ScaleCharacterStats(inst, scale_factor)\n    local base_health = TUNING.WILSON_HEALTH\n    local base_hunger = TUNING.WILSON_HUNGER\n    local base_sanity = TUNING.WILSON_SANITY\n    \n    inst.components.health:SetMaxHealth(base_health * scale_factor)\n    inst.components.hunger:SetMax(base_hunger * scale_factor)\n    inst.components.sanity:SetMax(base_sanity * scale_factor)\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"modifying-tuning-values",children:"Modifying Tuning Values"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Simple value modification\nTUNING.WILSON_HEALTH = 200  -- Direct assignment\n\n-- Safe modification with AddTuningModifier\nAddTuningModifier("SPEAR_DAMAGE", function(damage)\n    return damage * 1.5  -- 50% damage increase\nend, TUNING.SPEAR_DAMAGE)\n\n-- Conditional modification\nif GetGameMode() == "easy" then\n    TUNING.WILSON_HEALTH = TUNING.WILSON_HEALTH * 1.5\n    TUNING.WILSON_HUNGER_RATE = TUNING.WILSON_HUNGER_RATE * 0.75\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"creating-custom-tuning-categories",children:"Creating Custom Tuning Categories"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Add custom tuning values for mods\nTUNING.CUSTOM_WEAPON_DAMAGE = TUNING.BASE_SURVIVOR_ATTACK * 1.3\nTUNING.CUSTOM_TOOL_USES = 200\nTUNING.CUSTOM_FOOD_VALUE = TUNING.CALORIES_LARGE * 1.2\n\n-- Function to batch-set custom values\nfunction AddCustomTuning(custom_values)\n    for key, value in pairs(custom_values) do\n        TUNING["CUSTOM_" .. string.upper(key)] = value\n    end\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"integration-notes",children:"Integration Notes"}),"\n",(0,l.jsx)(n.h3,{id:"relationship-to-other-systems",children:"Relationship to Other Systems"}),"\n",(0,l.jsx)(n.p,{children:"The tuning system integrates with virtually all game systems:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Component System"}),": Components use tuning values for initialization"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Recipe System"}),": Crafting costs and requirements reference tuning values"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"World Generation"}),": Spawn rates and world parameters use tuning constants"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Character System"}),": Character-specific abilities and stats are tuned"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Combat System"}),": All damage and defense calculations use tuning values"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Tuning values are resolved at startup, not runtime"}),"\n",(0,l.jsxs)(n.li,{children:["Direct table access (",(0,l.jsx)(n.code,{children:"TUNING.VALUE"}),") is very fast (O(1) lookup)"]}),"\n",(0,l.jsx)(n.li,{children:"Modifier functions add slight overhead but provide flexibility"}),"\n",(0,l.jsx)(n.li,{children:"Consider caching frequently accessed tuning calculations"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"mod-compatibility",children:"Mod Compatibility"}),"\n",(0,l.jsx)(n.p,{children:"The tuning system is designed for mod compatibility:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Mods can safely override any tuning value"}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"AddTuningModifier()"})," provides safer modification for complex logic"]}),"\n",(0,l.jsxs)(n.li,{children:["Original values are preserved in ",(0,l.jsx)(n.code,{children:"ORIGINAL_TUNING"})," table"]}),"\n",(0,l.jsx)(n.li,{children:"Multiple mods can modify the same values if done carefully"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/tuning-override",children:"Tuning Override"}),": System for disabling specific game mechanics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/constants",children:"Constants"}),": Non-tunable game constants and enumerations"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./recipes.md",children:"Recipe System"}),": Crafting system that uses tuning values"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"../components/index.md",children:"Component System"}),": Components that implement tuning values"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"source-reference",children:"Source Reference"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"File Location:"})," ",(0,l.jsx)(n.code,{children:"scripts/tuning.lua"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Global Access:"})," Available globally as ",(0,l.jsx)(n.code,{children:"TUNING"})," table"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Key Functions:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Tune(overrides)"}),": Main initialization function"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"AddTuningModifier(tuning_var, fn, tuning_value)"}),": Safe modification utility"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Dependencies:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"techtree.lua"}),": Technology tree definitions"]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}}}]);