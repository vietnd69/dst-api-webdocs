"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9972],{272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/examples/profiling-debugging","title":"Profiling and Debugging Performance Issues","description":"This guide covers techniques for identifying, analyzing, and resolving performance issues in Don\'t Starve Together mods.","source":"@site/docs/api-vanilla/examples/profiling-debugging.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/profiling-debugging","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/profiling-debugging","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"id":"profiling-debugging","title":"Profiling and Debugging Performance Issues","sidebar_position":13,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Optimizing Network Traffic","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/network-optimization"},"next":{"title":"Case Study - Geometric Placement","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-geometric"}}');var o=t(4848),s=t(8453);const l={id:"profiling-debugging",title:"Profiling and Debugging Performance Issues",sidebar_position:13,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="Profiling and Debugging Performance Issues",a={},c=[{value:"Understanding Performance Profiling",id:"understanding-performance-profiling",level:2},{value:"Built-in Profiling Tools",id:"built-in-profiling-tools",level:2},{value:"1. Frame Time Logging",id:"1-frame-time-logging",level:3},{value:"2. Function Execution Time",id:"2-function-execution-time",level:3},{value:"3. Memory Usage Tracking",id:"3-memory-usage-tracking",level:3},{value:"Advanced Profiling Techniques",id:"advanced-profiling-techniques",level:2},{value:"1. Custom Profiler Implementation",id:"1-custom-profiler-implementation",level:3},{value:"2. Call Frequency Analysis",id:"2-call-frequency-analysis",level:3},{value:"3. Entity Count Monitoring",id:"3-entity-count-monitoring",level:3},{value:"Debugging Performance Issues",id:"debugging-performance-issues",level:2},{value:"1. Isolating Problem Areas",id:"1-isolating-problem-areas",level:3},{value:"2. Performance Logging Levels",id:"2-performance-logging-levels",level:3},{value:"3. Visual Performance Indicators",id:"3-visual-performance-indicators",level:3},{value:"Common Performance Issues and Solutions",id:"common-performance-issues-and-solutions",level:2},{value:"1. Update Function Overload",id:"1-update-function-overload",level:3},{value:"2. Memory Leaks",id:"2-memory-leaks",level:3},{value:"3. Network Traffic Spikes",id:"3-network-traffic-spikes",level:3},{value:"Advanced Debugging Techniques",id:"advanced-debugging-techniques",level:2},{value:"1. Conditional Breakpoints",id:"1-conditional-breakpoints",level:3},{value:"2. Logging to File",id:"2-logging-to-file",level:3},{value:"3. Remote Debugging",id:"3-remote-debugging",level:3},{value:"Performance Optimization Workflow",id:"performance-optimization-workflow",level:2},{value:"Example Workflow",id:"example-workflow",level:3},{value:"Console Commands for Debugging",id:"console-commands-for-debugging",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"See also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"profiling-and-debugging-performance-issues",children:"Profiling and Debugging Performance Issues"})}),"\n",(0,o.jsx)(n.p,{children:"This guide covers techniques for identifying, analyzing, and resolving performance issues in Don't Starve Together mods."}),"\n",(0,o.jsx)(n.h2,{id:"understanding-performance-profiling",children:"Understanding Performance Profiling"}),"\n",(0,o.jsx)(n.p,{children:"Performance profiling is the process of measuring various aspects of your mod's execution to identify bottlenecks and inefficiencies. Effective profiling helps you:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Identify which parts of your code consume the most resources"}),"\n",(0,o.jsx)(n.li,{children:"Measure the impact of your optimizations"}),"\n",(0,o.jsx)(n.li,{children:"Discover unexpected performance issues"}),"\n",(0,o.jsx)(n.li,{children:"Make data-driven optimization decisions"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"built-in-profiling-tools",children:"Built-in Profiling Tools"}),"\n",(0,o.jsx)(n.h3,{id:"1-frame-time-logging",children:"1. Frame Time Logging"}),"\n",(0,o.jsx)(n.p,{children:"Monitoring frame times is one of the simplest ways to detect performance issues:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Add this to your modmain.lua to log frame times\nlocal last_time = GetTime()\nlocal frame_count = 0\n\nlocal function LogFrameTimes()\n    frame_count = frame_count + 1\n    \n    -- Log every second\n    if frame_count >= 30 then\n        local current_time = GetTime()\n        local elapsed = current_time - last_time\n        local fps = frame_count / elapsed\n        local avg_frame_time = 1000 * elapsed / frame_count\n        \n        print(string.format("FPS: %.1f, Avg frame time: %.2fms", fps, avg_frame_time))\n        \n        last_time = current_time\n        frame_count = 0\n    end\nend\n\n-- Hook into the game\'s update loop\nAddGamePostInit(function()\n    TheWorld:DoPeriodicTask(0, LogFrameTimes)\nend)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-function-execution-time",children:"2. Function Execution Time"}),"\n",(0,o.jsx)(n.p,{children:"Measure how long specific functions take to execute:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Simple function timer\nfunction TimeFunction(fn, ...)\n    local start_time = os.clock()\n    local result = fn(...)\n    local end_time = os.clock()\n    \n    print(string.format("Function took %.6f seconds", end_time - start_time))\n    return result\nend\n\n-- Usage example\nlocal result = TimeFunction(MyExpensiveFunction, arg1, arg2)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-memory-usage-tracking",children:"3. Memory Usage Tracking"}),"\n",(0,o.jsx)(n.p,{children:"Monitor memory consumption to detect leaks and excessive allocations:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Track memory usage\nfunction GetMemoryUsage()\n    collectgarbage("collect")\n    return collectgarbage("count")\nend\n\n-- Monitor memory changes\nlocal initial_memory = GetMemoryUsage()\nprint("Initial memory usage: " .. initial_memory .. " KB")\n\n-- Check memory after operations\nlocal function CheckMemoryDelta(label)\n    local current_memory = GetMemoryUsage()\n    local delta = current_memory - initial_memory\n    print(label .. " memory change: " .. delta .. " KB (Total: " .. current_memory .. " KB)")\nend\n\n-- Usage example\nMyFunction()\nCheckMemoryDelta("After MyFunction")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-profiling-techniques",children:"Advanced Profiling Techniques"}),"\n",(0,o.jsx)(n.h3,{id:"1-custom-profiler-implementation",children:"1. Custom Profiler Implementation"}),"\n",(0,o.jsx)(n.p,{children:"Create a more comprehensive profiling system:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local Profiler = {\n    active_timers = {},\n    results = {},\n    enabled = true\n}\n\nfunction Profiler:Start(label)\n    if not self.enabled then return end\n    \n    self.active_timers[label] = os.clock()\nend\n\nfunction Profiler:Stop(label)\n    if not self.enabled or not self.active_timers[label] then return end\n    \n    local elapsed = os.clock() - self.active_timers[label]\n    self.active_timers[label] = nil\n    \n    self.results[label] = self.results[label] or {count = 0, total_time = 0, min_time = math.huge, max_time = 0}\n    local data = self.results[label]\n    \n    data.count = data.count + 1\n    data.total_time = data.total_time + elapsed\n    data.min_time = math.min(data.min_time, elapsed)\n    data.max_time = math.max(data.max_time, elapsed)\nend\n\nfunction Profiler:GetResults()\n    local sorted_results = {}\n    \n    for label, data in pairs(self.results) do\n        data.avg_time = data.total_time / data.count\n        table.insert(sorted_results, {label = label, data = data})\n    end\n    \n    table.sort(sorted_results, function(a, b)\n        return a.data.total_time > b.data.total_time\n    end)\n    \n    return sorted_results\nend\n\nfunction Profiler:PrintResults()\n    print("======== PROFILING RESULTS ========")\n    print(string.format("%-30s %10s %10s %10s %10s %10s", \n        "Label", "Calls", "Total(s)", "Avg(ms)", "Min(ms)", "Max(ms)"))\n    \n    local results = self:GetResults()\n    for _, item in ipairs(results) do\n        local label = item.label\n        local data = item.data\n        \n        print(string.format("%-30s %10d %10.3f %10.3f %10.3f %10.3f",\n            label, data.count, data.total_time,\n            data.avg_time * 1000, data.min_time * 1000, data.max_time * 1000))\n    end\n    \n    print("===================================")\nend\n\nfunction Profiler:Reset()\n    self.results = {}\n    self.active_timers = {}\nend\n\n-- Usage example\nfunction SomeFunction()\n    Profiler:Start("SomeFunction")\n    \n    -- Function body\n    Profiler:Start("SomeFunction.SubTask")\n    -- Subtask code\n    Profiler:Stop("SomeFunction.SubTask")\n    \n    Profiler:Stop("SomeFunction")\nend\n\n-- Print results after some time\nTheWorld:DoTaskInTime(60, function()\n    Profiler:PrintResults()\n    Profiler:Reset()\nend)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-call-frequency-analysis",children:"2. Call Frequency Analysis"}),"\n",(0,o.jsx)(n.p,{children:"Track how often functions are called:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local CallCounter = {\n    counts = {},\n    enabled = true\n}\n\nfunction CallCounter:Count(label)\n    if not self.enabled then return end\n    \n    self.counts[label] = (self.counts[label] or 0) + 1\nend\n\nfunction CallCounter:PrintResults()\n    print("======== CALL FREQUENCY RESULTS ========")\n    \n    local sorted_results = {}\n    for label, count in pairs(self.counts) do\n        table.insert(sorted_results, {label = label, count = count})\n    end\n    \n    table.sort(sorted_results, function(a, b)\n        return a.count > b.count\n    end)\n    \n    for _, item in ipairs(sorted_results) do\n        print(string.format("%-30s %10d", item.label, item.count))\n    end\n    \n    print("=======================================")\nend\n\nfunction CallCounter:Reset()\n    self.counts = {}\nend\n\n-- Usage example\nlocal original_fn = SomeFrequentlyCalledFunction\nSomeFrequentlyCalledFunction = function(...)\n    CallCounter:Count("SomeFrequentlyCalledFunction")\n    return original_fn(...)\nend\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-entity-count-monitoring",children:"3. Entity Count Monitoring"}),"\n",(0,o.jsx)(n.p,{children:"Track entity counts to detect entity bloat:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MonitorEntityCounts()\n    local counts = {}\n    local total = 0\n    \n    -- Count entities by prefab\n    for k, v in pairs(Ents) do\n        if v.prefab then\n            counts[v.prefab] = (counts[v.prefab] or 0) + 1\n            total = total + 1\n        end\n    end\n    \n    -- Sort and print results\n    local sorted = {}\n    for prefab, count in pairs(counts) do\n        table.insert(sorted, {prefab = prefab, count = count})\n    end\n    \n    table.sort(sorted, function(a, b) return a.count > b.count end)\n    \n    print("======== ENTITY COUNT ========")\n    print("Total entities: " .. total)\n    print("Top 20 prefabs:")\n    \n    for i = 1, math.min(20, #sorted) do\n        local item = sorted[i]\n        print(string.format("%-20s %5d", item.prefab, item.count))\n    end\n    \n    print("=============================")\nend\n\n-- Run periodically\nTheWorld:DoPeriodicTask(30, MonitorEntityCounts)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"debugging-performance-issues",children:"Debugging Performance Issues"}),"\n",(0,o.jsx)(n.h3,{id:"1-isolating-problem-areas",children:"1. Isolating Problem Areas"}),"\n",(0,o.jsx)(n.p,{children:"When you encounter performance issues, use a systematic approach to isolate them:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Temporarily disable systems to isolate issues\nlocal debug_flags = {\n    enable_system_a = true,\n    enable_system_b = true,\n    enable_system_c = true\n}\n\n-- In your update functions\nfunction UpdateSystemA()\n    if not debug_flags.enable_system_a then return end\n    -- System A code\nend\n\n-- Console command to toggle systems\nfunction c_toggle_system(system_name)\n    if debug_flags["enable_" .. system_name] ~= nil then\n        debug_flags["enable_" .. system_name] = not debug_flags["enable_" .. system_name]\n        print("System " .. system_name .. " is now " .. \n              (debug_flags["enable_" .. system_name] and "ENABLED" or "DISABLED"))\n    else\n        print("Unknown system: " .. system_name)\n    end\nend\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-performance-logging-levels",children:"2. Performance Logging Levels"}),"\n",(0,o.jsx)(n.p,{children:"Implement different levels of performance logging:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local PerformanceLogger = {\n    level = 1, -- 0=off, 1=critical, 2=warnings, 3=info, 4=verbose\n    log_file = "mod_performance.log"\n}\n\nfunction PerformanceLogger:Log(level, message)\n    if self.level >= level then\n        print("[PERF] " .. message)\n        \n        -- Optionally write to file\n        if self.log_file then\n            TheSim:GetPersistentString(self.log_file, function(success, current_log)\n                if success then\n                    local timestamp = os.date("%Y-%m-%d %H:%M:%S")\n                    local new_log = current_log .. timestamp .. " [PERF] " .. message .. "\\n"\n                    TheSim:SetPersistentString(self.log_file, new_log, false)\n                end\n            end)\n        end\n    end\nend\n\n-- Usage\nPerformanceLogger:Log(1, "Critical performance issue: Frame time spike detected")\nPerformanceLogger:Log(3, "Info: Entity count within normal range")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-visual-performance-indicators",children:"3. Visual Performance Indicators"}),"\n",(0,o.jsx)(n.p,{children:"Add visual indicators for performance metrics:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Add a simple FPS counter to the HUD\nlocal function AddFPSCounter()\n    local fps_root = CreateEntity()\n    fps_root.entity:AddTransform()\n    \n    local text = fps_root.entity:AddLabel()\n    text:SetFont(NUMBERFONT)\n    text:SetFontSize(20)\n    text:SetColour(1, 1, 1, 1)\n    text:SetText("FPS: --")\n    text:SetWorldOffset(0, 0, 0)\n    text:SetUIOffset(0, 0, 0)\n    \n    fps_root:AddTag("FX")\n    fps_root:AddTag("NOCLICK")\n    fps_root.persists = false\n    \n    fps_root:DoPeriodicTask(0.5, function()\n        local fps = TheSim:GetFPS()\n        local color = fps > 30 and {0, 1, 0, 1} or (fps > 15 and {1, 1, 0, 1} or {1, 0, 0, 1})\n        \n        text:SetText(string.format("FPS: %d", fps))\n        text:SetColour(unpack(color))\n    end)\n    \n    return fps_root\nend\n\n-- Add to game\nAddGamePostInit(function()\n    if not TheWorld.ismastersim then\n        AddFPSCounter()\n    end\nend)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"common-performance-issues-and-solutions",children:"Common Performance Issues and Solutions"}),"\n",(0,o.jsx)(n.h3,{id:"1-update-function-overload",children:"1. Update Function Overload"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Too many entities updating every frame"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Detection"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function DetectUpdateOverload()\n    local start_time = os.clock()\n    \n    -- Run update code\n    for _, entity in pairs(my_entities) do\n        entity:OnUpdate()\n    end\n    \n    local elapsed = os.clock() - start_time\n    if elapsed > 0.016 then -- 16ms = 1 frame at 60fps\n        print("WARNING: Update taking too long: " .. elapsed .. "s with " .. \n              #my_entities .. " entities")\n    end\nend\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Stagger updates across multiple frames\nfunction StaggeredUpdate()\n    local entities_per_frame = 10\n    local current_index = 1\n    \n    TheWorld:DoPeriodicTask(0, function()\n        local count = 0\n        while count < entities_per_frame and current_index <= #my_entities do\n            my_entities[current_index]:OnUpdate()\n            current_index = current_index + 1\n            count = count + 1\n        end\n        \n        if current_index > #my_entities then\n            current_index = 1\n        end\n    end)\nend\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-memory-leaks",children:"2. Memory Leaks"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Memory usage continuously increases"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Detection"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function DetectMemoryLeaks()\n    local baseline = nil\n    local check_count = 0\n    \n    TheWorld:DoPeriodicTask(60, function()\n        collectgarbage("collect")\n        local current = collectgarbage("count")\n        \n        if not baseline then\n            baseline = current\n        else\n            local delta = current - baseline\n            check_count = check_count + 1\n            \n            print(string.format("Memory after %d minutes: %.1f KB (%.1f KB increase)",\n                check_count, current, delta))\n            \n            if delta > 5000 and check_count > 5 then\n                print("WARNING: Possible memory leak detected!")\n                -- Log potential leak sources\n                LogPotentialLeaks()\n            end\n        end\n    end)\nend\n\nfunction LogPotentialLeaks()\n    -- Log table sizes of common leak sources\n    print("Entity count: " .. table.count(Ents))\n    print("My tracked entities: " .. #my_entities)\n    print("Event callbacks: " .. CountEventCallbacks())\n    print("Task count: " .. CountScheduledTasks())\nend\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Implement proper cleanup\nfunction CleanupEntity(entity)\n    -- Cancel all tasks\n    if entity.tasks then\n        for _, task in pairs(entity.tasks) do\n            if task:IsValid() then\n                task:Cancel()\n            end\n        end\n        entity.tasks = {}\n    end\n    \n    -- Remove event listeners\n    if entity.event_listeners then\n        for target, events in pairs(entity.event_listeners) do\n            for event, fn in pairs(events) do\n                if target and target:IsValid() then\n                    target:RemoveEventCallback(event, fn)\n                end\n            end\n        end\n        entity.event_listeners = {}\n    end\n    \n    -- Clear references\n    entity.references = nil\nend\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-network-traffic-spikes",children:"3. Network Traffic Spikes"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Excessive network traffic causing lag spikes"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Detection"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MonitorNetworkTraffic()\n    local baseline_in = 0\n    local baseline_out = 0\n    local last_check = GetTime()\n    \n    TheWorld:DoPeriodicTask(1, function()\n        local current_time = GetTime()\n        local elapsed = current_time - last_check\n        \n        local bandwidth_in = TheSim:GetBandwidthIn()\n        local bandwidth_out = TheSim:GetBandwidthOut()\n        \n        local delta_in = bandwidth_in - baseline_in\n        local delta_out = bandwidth_out - baseline_out\n        \n        if delta_in > 100 or delta_out > 100 then\n            print(string.format("Network spike detected! In: %.1f KB/s, Out: %.1f KB/s",\n                delta_in / elapsed, delta_out / elapsed))\n        end\n        \n        baseline_in = bandwidth_in\n        baseline_out = bandwidth_out\n        last_check = current_time\n    end)\nend\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Implement network throttling\nlocal NetworkThrottler = {\n    last_send_time = {},\n    min_interval = 0.1 -- Minimum time between sends\n}\n\nfunction NetworkThrottler:CanSend(message_type)\n    local current_time = GetTime()\n    local last_time = self.last_send_time[message_type] or 0\n    \n    if current_time - last_time < self.min_interval then\n        return false\n    end\n    \n    self.last_send_time[message_type] = current_time\n    return true\nend\n\n-- Usage\nif NetworkThrottler:CanSend("position_update") then\n    SendPositionUpdate(entity)\nend\n'})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-debugging-techniques",children:"Advanced Debugging Techniques"}),"\n",(0,o.jsx)(n.h3,{id:"1-conditional-breakpoints",children:"1. Conditional Breakpoints"}),"\n",(0,o.jsx)(n.p,{children:"Use conditional code execution to debug specific scenarios:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Debug specific conditions\nfunction ConditionalDebug(entity)\n    -- Only debug when specific conditions are met\n    if entity.components.health:GetPercent() < 0.1 and entity:HasTag("player") then\n        print("DEBUG: Low health player detected")\n        DumpEntityState(entity)\n    end\nend\n\nfunction DumpEntityState(entity)\n    print("======== ENTITY STATE ========")\n    print("Prefab: " .. entity.prefab)\n    print("Position: " .. tostring(entity:GetPosition()))\n    \n    for k, v in pairs(entity.components) do\n        print("Component: " .. k)\n    end\n    \n    print("============================")\nend\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-logging-to-file",children:"2. Logging to File"}),"\n",(0,o.jsx)(n.p,{children:"Save debug information to a file for later analysis:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function LogToFile(message, filename)\n    filename = filename or "mod_debug.log"\n    \n    TheSim:GetPersistentString(filename, function(success, current_log)\n        local log_content = success and current_log or ""\n        local timestamp = os.date("%Y-%m-%d %H:%M:%S")\n        local new_log = log_content .. timestamp .. ": " .. message .. "\\n"\n        \n        TheSim:SetPersistentString(filename, new_log, false)\n    end)\nend\n\n-- Usage\nLogToFile("Performance issue detected: " .. error_details)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-remote-debugging",children:"3. Remote Debugging"}),"\n",(0,o.jsx)(n.p,{children:"Send debug information to a remote server for monitoring:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- This is a simplified example - in practice you\'d need a server to receive the data\nfunction SendRemoteDebugData(data)\n    -- Convert data to string\n    local json_data = json.encode(data)\n    \n    -- Use TheSim:QueryServer to send data to a remote endpoint\n    TheSim:QueryServer(\n        "https://your-debug-server.com/log",\n        function(result, isSuccessful, resultCode)\n            if isSuccessful then\n                print("Debug data sent successfully")\n            else\n                print("Failed to send debug data: " .. resultCode)\n            end\n        end,\n        "POST",\n        json_data\n    )\nend\n\n-- Usage\nSendRemoteDebugData({\n    type = "performance_issue",\n    fps = TheSim:GetFPS(),\n    memory = collectgarbage("count"),\n    entity_count = table.count(Ents),\n    timestamp = os.time()\n})\n'})}),"\n",(0,o.jsx)(n.h2,{id:"performance-optimization-workflow",children:"Performance Optimization Workflow"}),"\n",(0,o.jsx)(n.p,{children:"Follow this systematic workflow to address performance issues:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Measure"}),": Establish baseline performance metrics"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Profile"}),": Identify the most resource-intensive operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Analyze"}),": Determine why these operations are expensive"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Optimize"}),": Implement targeted improvements"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Validate"}),": Measure again to confirm improvements"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Iterate"}),": Repeat the process for the next bottleneck"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Step 1: Measure baseline performance\nlocal baseline_fps = TheSim:GetFPS()\nlocal baseline_memory = collectgarbage("count")\nprint("Baseline FPS: " .. baseline_fps)\nprint("Baseline Memory: " .. baseline_memory .. " KB")\n\n-- Step 2: Profile systems to find bottlenecks\nlocal systems_to_profile = {\n    "EntityUpdates",\n    "PathFinding",\n    "AI",\n    "Physics",\n    "Rendering"\n}\n\nfor _, system in ipairs(systems_to_profile) do\n    Profiler:Reset()\n    \n    -- Run the system with profiling\n    RunSystemWithProfiling(system)\n    \n    -- Check results\n    local results = Profiler:GetResults()\n    print("Profiling results for " .. system .. ":")\n    Profiler:PrintResults()\nend\n\n-- Step 3: Analyze the most expensive operations\n-- (This would be manual analysis based on profiling results)\n\n-- Step 4: Implement optimizations for the identified bottleneck\nOptimizeSystem("PathFinding")\n\n-- Step 5: Validate improvements\nlocal new_fps = TheSim:GetFPS()\nlocal new_memory = collectgarbage("count")\nprint("New FPS: " .. new_fps .. " (Change: " .. (new_fps - baseline_fps) .. ")")\nprint("New Memory: " .. new_memory .. " KB (Change: " .. (new_memory - baseline_memory) .. " KB)")\n\n-- Step 6: Iterate to the next bottleneck\n'})}),"\n",(0,o.jsx)(n.h2,{id:"console-commands-for-debugging",children:"Console Commands for Debugging"}),"\n",(0,o.jsx)(n.p,{children:"Add helpful console commands to aid in debugging:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Register console commands for debugging\nfunction AddDebugConsoleCommands()\n    -- Print performance statistics\n    GLOBAL.c_perfstats = function()\n        print("FPS: " .. TheSim:GetFPS())\n        print("Memory: " .. collectgarbage("count") .. " KB")\n        print("Entity Count: " .. table.count(Ents))\n        print("Network In: " .. TheSim:GetBandwidthIn() .. " KB")\n        print("Network Out: " .. TheSim:GetBandwidthOut() .. " KB")\n    end\n    \n    -- Toggle profiling\n    GLOBAL.c_toggleprofiling = function()\n        Profiler.enabled = not Profiler.enabled\n        print("Profiling is now " .. (Profiler.enabled and "ENABLED" or "DISABLED"))\n        \n        if not Profiler.enabled then\n            Profiler:PrintResults()\n            Profiler:Reset()\n        end\n    end\n    \n    -- Dump entity information\n    GLOBAL.c_dumpentity = function(radius)\n        radius = radius or 5\n        local x, y, z = ConsoleWorldPosition():Get()\n        local entities = TheSim:FindEntities(x, y, z, radius)\n        \n        print("Found " .. #entities .. " entities within " .. radius .. " units:")\n        for i, entity in ipairs(entities) do\n            print(i .. ". " .. (entity.prefab or "unknown") .. \n                  " (" .. entity.GUID .. ")")\n        end\n    end\n    \n    -- Memory leak check\n    GLOBAL.c_checkleaks = function()\n        collectgarbage("collect")\n        local before = collectgarbage("count")\n        \n        -- Force a full garbage collection cycle\n        for i = 1, 5 do\n            collectgarbage("collect")\n        end\n        \n        local after = collectgarbage("count")\n        print("Memory before: " .. before .. " KB")\n        print("Memory after: " .. after .. " KB")\n        print("Difference: " .. (before - after) .. " KB")\n        \n        if before - after > 1000 then\n            print("Significant memory recovered - possible leak sources exist")\n        end\n    end\nend\n\nAddGamePostInit(AddDebugConsoleCommands)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"Effective profiling and debugging are essential skills for creating high-performance mods. By systematically measuring, analyzing, and optimizing your code, you can ensure your mods run smoothly even in complex scenarios."}),"\n",(0,o.jsx)(n.p,{children:"Remember these key principles:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Always measure before and after optimizing"}),"\n",(0,o.jsx)(n.li,{children:"Focus on the biggest bottlenecks first"}),"\n",(0,o.jsx)(n.li,{children:"Use appropriate tools for different types of performance issues"}),"\n",(0,o.jsx)(n.li,{children:"Implement proper cleanup to prevent memory leaks"}),"\n",(0,o.jsx)(n.li,{children:"Test on various hardware configurations"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/optimization",children:"Performance Optimization"})," - General performance optimization techniques"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/resource-usage",children:"Reducing Resource Usage"})," - Strategies for minimizing resource consumption"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/network-optimization",children:"Network Optimization"})," - Techniques for optimizing multiplayer performance"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/entity-system",children:"Entity System"})," - Understanding the entity framework"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/event-system",children:"Event System"})," - Working with the event system efficiently"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var i=t(6540);const o={},s=i.createContext(o);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);