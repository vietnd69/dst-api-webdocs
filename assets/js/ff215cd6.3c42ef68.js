"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1818],{2636:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/node-types/global","title":"Global Node Type","description":"Last Update: 2023-09-15","source":"@site/docs/api-vanilla/node-types/global.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/global","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/global","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"global","title":"Global Node Type","sidebar_position":10,"last_updated":"2023-09-15T00:00:00.000Z","version":624447}}');var i=l(4848),s=l(8453);const o={id:"global",title:"Global Node Type",sidebar_position:10,last_updated:new Date("2023-09-15T00:00:00.000Z"),version:624447},t="Global Node Type",r={},d=[{value:"Global Node properties and methods",id:"global-node-properties-and-methods",level:2},{value:"Global Tables",id:"global-tables",level:2},{value:"_G: <code>Table</code> <code>[readonly]</code>",id:"_g-table-readonly",level:3},{value:"GLOBAL: <code>Table</code> <code>[readonly]</code>",id:"global-table-readonly",level:3},{value:"STRINGS: <code>Table</code> <code>[readonly]</code>",id:"strings-table-readonly",level:3},{value:"TUNING: <code>Table</code> <code>[readonly]</code>",id:"tuning-table-readonly",level:3},{value:"ACTIONS: <code>Table</code> <code>[readonly]</code>",id:"actions-table-readonly",level:3},{value:"Global Objects",id:"global-objects",level:2},{value:"TheWorld: <code>WorldEntity</code> <code>[readonly]</code>",id:"theworld-worldentity-readonly",level:3},{value:"TheSim: <code>Simulation</code> <code>[readonly]</code>",id:"thesim-simulation-readonly",level:3},{value:"ThePlayer: <code>Entity</code> <code>[readonly]</code>",id:"theplayer-entity-readonly",level:3},{value:"TheNet: <code>Network</code> <code>[readonly]</code>",id:"thenet-network-readonly",level:3},{value:"TheInput: <code>Input</code> <code>[readonly]</code>",id:"theinput-input-readonly",level:3},{value:"Core Functions",id:"core-functions",level:2},{value:"SpawnPrefab(prefab: <code>string</code>): <code>Entity</code>",id:"spawnprefabprefab-string-entity",level:3},{value:"GetTime(): <code>number</code>",id:"gettime-number",level:3},{value:"GetTick(): <code>number</code>",id:"gettick-number",level:3},{value:"DebugSpawn(prefab: <code>string</code>): <code>Entity</code>",id:"debugspawnprefab-string-entity",level:3},{value:"Integration with Node Types",id:"integration-with-node-types",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"In Regular Game Code",id:"in-regular-game-code",level:3},{value:"In Mod Development",id:"in-mod-development",level:3},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-09-15"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"global-node-type",children:"Global Node Type"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"API Version: 624447"})}),"\n",(0,i.jsx)(n.p,{children:"The Global Node is a special node type in the Don't Starve Together API that provides access to globally available functions, variables, and systems. It is the entry point for accessing the Lua environment and game's core functionality."}),"\n",(0,i.jsx)(n.h2,{id:"global-node-properties-and-methods",children:"Global Node properties and methods"}),"\n",(0,i.jsx)(n.p,{children:"The Global Node provides access to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Global Tables"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_G"})," - The root Lua environment table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GLOBAL"})," - Used in mods to access the game's global namespace"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"STRINGS"})," - All game text strings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING"})," - Game balance and configuration values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTIONS"})," - Available player and entity actions"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Global Objects"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TheWorld"})," - Access to the game world and its systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TheSim"})," - Low-level simulation functions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ThePlayer"})," - Reference to the local player entity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TheNet"})," - Networking and multiplayer functions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TheInput"})," - User input handling"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Core Functions"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SpawnPrefab()"})," - Creates game entities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GetTime()"})," - Gets the current game time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GetTick()"})," - Gets the current simulation tick"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DebugSpawn()"})," - Spawns entities in developer mode"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"global-tables",children:"Global Tables"}),"\n",(0,i.jsxs)(n.h3,{id:"_g-table-readonly",children:["_G: ",(0,i.jsx)(n.code,{children:"Table"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"The root Lua environment table containing all globally defined values. This is the standard Lua global environment."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Access a global function directly\nlocal result = math.random(1, 10)\n\n-- Check if a global exists\nif type(SomeGlobalFunction) ~= "nil" then\n    SomeGlobalFunction()\nend\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"global-table-readonly",children:["GLOBAL: ",(0,i.jsx)(n.code,{children:"Table"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"In mod development, GLOBAL is used to access the game's internal functions, classes, and variables. It provides a way for mods to interact with the game's global namespace."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua:\nlocal SpawnPrefab = GLOBAL.SpawnPrefab\nlocal TUNING = GLOBAL.TUNING\n\n-- Adding custom functions to the global namespace\nGLOBAL.MyModFunction = function()\n    print("This is from my mod!")\nend\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"strings-table-readonly",children:["STRINGS: ",(0,i.jsx)(n.code,{children:"Table"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"Contains all game text strings, organized by category and language. Mods can add or modify these strings."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Access specific game strings\nlocal carrot_name = STRINGS.NAMES.CARROT\nlocal wilson_examine = STRINGS.CHARACTERS.WILSON.DESCRIBE.CARROT\n\n-- Modify strings\nSTRINGS.NAMES.CARROT = "Super Carrot"\nSTRINGS.CHARACTERS.WILSON.DESCRIBE.CARROT = "That\'s a fancy looking carrot!"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"tuning-table-readonly",children:["TUNING: ",(0,i.jsx)(n.code,{children:"Table"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"Contains game balance and configuration values that define entity statistics, timers, and gameplay mechanics."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Access tuning values\nlocal wilson_health = TUNING.WILSON_HEALTH\nlocal hunger_rate = TUNING.WILSON_HUNGER_RATE\n\n-- Modify tuning values (in mods)\nGLOBAL.TUNING.WILSON_HEALTH = 200\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"actions-table-readonly",children:["ACTIONS: ",(0,i.jsx)(n.code,{children:"Table"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"Contains all available actions that players and entities can perform in the game."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Access action definitions\nlocal chop_action = ACTIONS.CHOP\nlocal eat_action = ACTIONS.EAT\n\n-- Use with buffered actions\nlocal act = BufferedAction(player, target, ACTIONS.CHOP)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"global-objects",children:"Global Objects"}),"\n",(0,i.jsxs)(n.h3,{id:"theworld-worldentity-readonly",children:["TheWorld: ",(0,i.jsx)(n.code,{children:"WorldEntity"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"The main world entity that contains all game state, components, and systems."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Check world state\nlocal is_cave = TheWorld:HasTag("cave")\nlocal current_season = TheWorld.state.season\n\n-- Access world components\nlocal animals = TheWorld.components.birdspawner:GetCurrentBirds()\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"thesim-simulation-readonly",children:["TheSim: ",(0,i.jsx)(n.code,{children:"Simulation"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"Provides low-level simulation functions for file I/O, performance measurement, and system operations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- File operations\nlocal file_exists = TheSim:GetPersistentString("mymod_data")\n\n-- Performance measurement\nlocal start_time = TheSim:GetTick()\n\n-- System functions\nTheSim:SetErosionTexture("images/erosion.tex")\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"theplayer-entity-readonly",children:["ThePlayer: ",(0,i.jsx)(n.code,{children:"Entity"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"Reference to the local player's entity (client-side only)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get player position\nlocal x, y, z = ThePlayer.Transform:GetWorldPosition()\n\n-- Check player stats\nlocal health = ThePlayer.components.health.currenthealth\nlocal hunger = ThePlayer.components.hunger.current\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"thenet-network-readonly",children:["TheNet: ",(0,i.jsx)(n.code,{children:"Network"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"Provides networking and multiplayer functions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check network state\nlocal is_server = TheNet:GetIsServer()\nlocal is_dedicated = TheNet:GetIsDedicated()\n\n-- Get player information\nlocal user_id = TheNet:GetUserID()\nlocal players = TheNet:GetClientTable()\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"theinput-input-readonly",children:["TheInput: ",(0,i.jsx)(n.code,{children:"Input"})," ",(0,i.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,i.jsx)(n.p,{children:"Manages user input and controls."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check input state\nlocal mouse_pos = TheInput:GetScreenPosition()\nlocal key_pressed = TheInput:IsKeyDown(KEY_SPACE)\n\n-- Bind a control action\nTheInput:AddKeyUpHandler(KEY_F, MyCustomFunction)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,i.jsxs)(n.h3,{id:"spawnprefabprefab-string-entity",children:["SpawnPrefab(prefab: ",(0,i.jsx)(n.code,{children:"string"}),"): ",(0,i.jsx)(n.code,{children:"Entity"})]}),"\n",(0,i.jsx)(n.p,{children:"Creates and returns a new entity instance from a prefab name."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Spawn a basic entity\nlocal carrot = SpawnPrefab("carrot")\n\n-- Spawn with position\nlocal x, y, z = ThePlayer.Transform:GetWorldPosition()\nlocal fire = SpawnPrefab("campfire")\nfire.Transform:SetPosition(x + 2, y, z)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"gettime-number",children:["GetTime(): ",(0,i.jsx)(n.code,{children:"number"})]}),"\n",(0,i.jsx)(n.p,{children:"Returns the current game time in seconds."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get the current game time\nlocal current_time = GetTime()\n\n-- Use for timing events\nlocal start_time = GetTime()\n-- ... do something\nlocal elapsed = GetTime() - start_time\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"gettick-number",children:["GetTick(): ",(0,i.jsx)(n.code,{children:"number"})]}),"\n",(0,i.jsx)(n.p,{children:"Returns the current simulation tick (a higher precision time value)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get current tick for precise timing\nlocal current_tick = GetTick()\n\n-- Measure performance\nlocal start_tick = GetTick()\n-- ... do something\nlocal elapsed_ticks = GetTick() - start_tick\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"debugspawnprefab-string-entity",children:["DebugSpawn(prefab: ",(0,i.jsx)(n.code,{children:"string"}),"): ",(0,i.jsx)(n.code,{children:"Entity"})]}),"\n",(0,i.jsx)(n.p,{children:"Spawns an entity in developer mode, with additional debugging information."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Debug spawn an entity\nlocal debug_entity = DebugSpawn("bearger")\n\n-- Only works in developer mode\nif CHEATS_ENABLED then\n    DebugSpawn("dragonfly")\nend\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-node-types",children:"Integration with Node Types"}),"\n",(0,i.jsx)(n.p,{children:"The Global Node provides access to all other node types in the game:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create an entity using the global system\nlocal entity = SpawnPrefab("pigman")\n\n-- Access entity components\nlocal health = entity.components.health\n\n-- Access the global world state\nlocal is_night = TheWorld.state.isnight\n\n-- Create a behavior tree node\nlocal sequence = SequenceNode(\n    {\n        ActionNode(function() return entity.components.locomotor:GoToPoint(point) end),\n        ActionNode(function() return entity:PushEvent("arrived") end)\n    }\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local References"}),": Store frequently accessed globals in local variables for better performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use GLOBAL in Mods"}),": When writing mods, access game functions through the GLOBAL table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Availability"}),": Always check if a global object exists before using it"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Version Compatibility"}),": Global functions and objects may change between game updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Namespace Pollution"}),": Don't create too many global variables"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"in-regular-game-code",children:"In Regular Game Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Standard globals access\nlocal player = ThePlayer\nlocal world = TheWorld\n\n-- Using global functions\nlocal entity = SpawnPrefab("spider")\nlocal time = GetTime()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"in-mod-development",children:"In Mod Development"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Importing globals\nlocal TUNING = GLOBAL.TUNING\nlocal TheWorld = GLOBAL.TheWorld\n\n-- Adding to globals\nGLOBAL.MY_MOD_CONFIG = {\n    version = "1.0",\n    features = {\n        enabled = true,\n        power = 10\n    }\n}\n\n-- Modifying existing globals\nlocal old_SpawnPrefab = GLOBAL.SpawnPrefab\nGLOBAL.SpawnPrefab = function(prefab, ...)\n    print("Spawning: " .. prefab)\n    return old_SpawnPrefab(prefab, ...)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/global-objects/global",children:"GLOBAL Table"})," - More detailed information about the GLOBAL table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/global-objects/theworld",children:"TheWorld"})," - Main world entity and state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/global-objects/thesim",children:"TheSim"})," - Simulation functions and system operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/entity-system",children:"Entity System"})," - How entities work in the game"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/tuning",children:"TUNING System"})," - Game balance and configuration values"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>o,x:()=>t});var a=l(6540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);