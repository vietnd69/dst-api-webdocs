"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2464],{1207:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/examples/stategraph-mod","title":"State Graph Integration","description":"This tutorial walks through working with state graphs in Don\'t Starve Together. We\'ll create a custom weapon with unique attack animations and states.","source":"@site/docs/api-vanilla/examples/stategraph-mod.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/stategraph-mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/stategraph-mod","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"stategraph-mod","title":"State Graph Integration","sidebar_position":6,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Custom Stategraphs and Animations","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-stategraphs-and-animations"},"next":{"title":"World Generation","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/worldgen-mod"}}');var i=t(4848),s=t(8453);const o={id:"stategraph-mod",title:"State Graph Integration",sidebar_position:6,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Working with State Graphs",r={},d=[{value:"Project Overview",id:"project-overview",level:2},{value:"Step 1: Set Up the Mod Structure",id:"step-1-set-up-the-mod-structure",level:2},{value:"Step 2: Create the modinfo.lua File",id:"step-2-create-the-modinfolua-file",level:2},{value:"Step 3: Create the State Graph",id:"step-3-create-the-state-graph",level:2},{value:"Step 4: Create the Dual Blade Prefab",id:"step-4-create-the-dual-blade-prefab",level:2},{value:"Step 5: Create the modmain.lua File",id:"step-5-create-the-modmainlua-file",level:2},{value:"Step 6: Create the Animations",id:"step-6-create-the-animations",level:2},{value:"Step 7: Testing Your State Graph",id:"step-7-testing-your-state-graph",level:2},{value:"Understanding State Graphs",id:"understanding-state-graphs",level:2},{value:"State Components",id:"state-components",level:3},{value:"Common State Tags",id:"common-state-tags",level:3},{value:"Animation Integration",id:"animation-integration",level:3},{value:"Timeline Events",id:"timeline-events",level:3},{value:"Event Handlers",id:"event-handlers",level:3},{value:"Customization Options",id:"customization-options",level:2},{value:"Add Combo Attacks",id:"add-combo-attacks",level:3},{value:"Add Status Effects to Attacks",id:"add-status-effects-to-attacks",level:3},{value:"Add Charged Attacks",id:"add-charged-attacks",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Problem: State not transitioning correctly",id:"problem-state-not-transitioning-correctly",level:3},{value:"Problem: Animations not playing",id:"problem-animations-not-playing",level:3},{value:"Problem: Actions not triggering states",id:"problem-actions-not-triggering-states",level:3},{value:"Problem: Visual effects not appearing",id:"problem-visual-effects-not-appearing",level:3},{value:"Problem: Collision detection issues",id:"problem-collision-detection-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"working-with-state-graphs",children:"Working with State Graphs"})}),"\n",(0,i.jsx)(e.p,{children:"This tutorial walks through working with state graphs in Don't Starve Together. We'll create a custom weapon with unique attack animations and states."}),"\n",(0,i.jsx)(e.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,i.jsx)(e.p,{children:'We\'ll create a mod that adds a "Dual Blade" weapon with:'}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Custom state graph for unique attack animations"}),"\n",(0,i.jsx)(e.li,{children:"Multiple attack states with different effects"}),"\n",(0,i.jsx)(e.li,{children:"Custom sound effects for each attack state"}),"\n",(0,i.jsx)(e.li,{children:"Visual effects during attacks"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"step-1-set-up-the-mod-structure",children:"Step 1: Set Up the Mod Structure"}),"\n",(0,i.jsx)(e.p,{children:"Create these folders and files:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"dualblade_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 prefabs/\n\u2502   \u2502   \u2514\u2500\u2500 dualblade.lua\n\u2502   \u2514\u2500\u2500 stategraphs/\n\u2502       \u2514\u2500\u2500 SGdualblade.lua\n\u251c\u2500\u2500 anim/\n\u2502   \u251c\u2500\u2500 dualblade.zip\n\u2502   \u2514\u2500\u2500 swap_dualblade.zip\n\u2514\u2500\u2500 images/\n    \u2514\u2500\u2500 inventoryimages/\n        \u251c\u2500\u2500 dualblade.tex\n        \u2514\u2500\u2500 dualblade.xml\n"})}),"\n",(0,i.jsx)(e.h2,{id:"step-2-create-the-modinfolua-file",children:"Step 2: Create the modinfo.lua File"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'name = "Dual Blade Weapon"\ndescription = "Adds a dual blade weapon with custom attack animations"\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\n\n-- Not compatible with Don\'t Starve\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\n-- This mod is required on clients\nall_clients_require_mod = true\n\n-- This mod is not a client-only mod\nclient_only_mod = false\n\n-- Icon displayed in the server list\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Tags that describe your mod\nserver_filter_tags = {\n    "weapon",\n    "item"\n}\n\n-- Configuration options\nconfiguration_options = {\n    {\n        name = "attack_damage",\n        label = "Attack Damage",\n        options = {\n            {description = "Low (30)", data = 30},\n            {description = "Medium (45)", data = 45},\n            {description = "High (60)", data = 60}\n        },\n        default = 45\n    },\n    {\n        name = "enable_special_attacks",\n        label = "Special Attacks",\n        options = {\n            {description = "Enabled", data = true},\n            {description = "Disabled", data = false}\n        },\n        default = true\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-3-create-the-state-graph",children:"Step 3: Create the State Graph"}),"\n",(0,i.jsxs)(e.p,{children:["Create ",(0,i.jsx)(e.code,{children:"scripts/stategraphs/SGdualblade.lua"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\n-- Define the state graph for the dual blade\nlocal states = {\n    -- Idle state\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n    },\n    \n    -- Standard attack state\n    State{\n        name = "attack",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:Stop()\n            inst.AnimState:PlayAnimation("atk")\n            \n            -- Set the attack timing\n            inst.sg:SetTimeout(inst.AnimState:GetCurrentAnimationLength())\n            \n            -- Play attack sound\n            inst.SoundEmitter:PlaySound("dontstarve/wilson/attack_weapon")\n        end,\n        \n        timeline = {\n            -- Attack damage happens at frame 10\n            TimeEvent(10*FRAMES, function(inst)\n                inst:PerformBufferedAction()\n                inst.sg:RemoveStateTag("busy")\n            end),\n        },\n        \n        ontimeout = function(inst)\n            inst.sg:GoToState("idle")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    -- Special spin attack state\n    State{\n        name = "spin_attack",\n        tags = {"attack", "busy", "spinning"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:Stop()\n            inst.AnimState:PlayAnimation("spin_pre")\n            inst.AnimState:PushAnimation("spin_loop", false)\n            inst.AnimState:PushAnimation("spin_pst", false)\n            \n            -- Play special attack sound\n            inst.SoundEmitter:PlaySound("dontstarve/wilson/attack_nightsword")\n        end,\n        \n        timeline = {\n            -- Spin attack has multiple damage points\n            TimeEvent(10*FRAMES, function(inst)\n                inst:DoSpinDamage(1) -- First hit\n                \n                -- Spawn effect\n                local fx = SpawnPrefab("cane_victorian_fx")\n                if fx then\n                    fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n                end\n            end),\n            \n            TimeEvent(15*FRAMES, function(inst)\n                inst:DoSpinDamage(2) -- Second hit\n            end),\n            \n            TimeEvent(20*FRAMES, function(inst)\n                inst:DoSpinDamage(3) -- Third hit\n                inst.sg:RemoveStateTag("busy")\n            end),\n        },\n        \n        events = {\n            EventHandler("animqueueover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    -- Dash attack state\n    State{\n        name = "dash_attack",\n        tags = {"attack", "busy", "dashing"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:Stop()\n            inst.AnimState:PlayAnimation("dash_pre")\n            inst.AnimState:PushAnimation("dash_loop", true)\n            \n            -- Play dash sound\n            inst.SoundEmitter:PlaySound("dontstarve/wilson/attack_nightsword")\n            \n            -- Start dash movement\n            inst.Physics:SetMotorVelOverride(12, 0, 0)\n            inst.components.locomotor:EnableGroundSpeedMultiplier(false)\n            \n            -- Set timeout for dash duration\n            inst.sg:SetTimeout(0.6)\n        end,\n        \n        onupdate = function(inst)\n            -- Apply dash damage to anything in path\n            inst:DoDashDamage()\n        end,\n        \n        ontimeout = function(inst)\n            -- End the dash\n            inst.Physics:ClearMotorVelOverride()\n            inst.components.locomotor:EnableGroundSpeedMultiplier(true)\n            inst.AnimState:PlayAnimation("dash_pst")\n            \n            -- Spawn end effect\n            local fx = SpawnPrefab("groundpoundring_fx")\n            if fx then\n                fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n                fx.Transform:SetScale(0.5, 0.5, 0.5)\n            end\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                if inst.AnimState:IsCurrentAnimation("dash_pst") then\n                    inst.sg:GoToState("idle")\n                end\n            end),\n        },\n        \n        onexit = function(inst)\n            -- Clean up if state is interrupted\n            inst.Physics:ClearMotorVelOverride()\n            inst.components.locomotor:EnableGroundSpeedMultiplier(true)\n        end,\n    },\n}\n\n-- Return the state graph\nreturn StateGraph("dualblade", states, events, "idle", actionhandlers)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-4-create-the-dual-blade-prefab",children:"Step 4: Create the Dual Blade Prefab"}),"\n",(0,i.jsxs)(e.p,{children:["Create ",(0,i.jsx)(e.code,{children:"scripts/prefabs/dualblade.lua"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/dualblade.zip"),\n    Asset("ANIM", "anim/swap_dualblade.zip"),\n    \n    Asset("IMAGE", "images/inventoryimages/dualblade.tex"),\n    Asset("ATLAS", "images/inventoryimages/dualblade.xml"),\n}\n\n-- Function to do spin attack damage\nlocal function DoSpinDamage(inst, hitnum)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    local radius = 2 -- Attack radius\n    \n    -- Find entities in range\n    local ents = TheSim:FindEntities(x, y, z, radius, {"_combat"}, {"player", "companion", "INLIMBO"})\n    \n    -- Apply damage to each entity\n    for _, ent in ipairs(ents) do\n        if ent.components.combat and ent ~= inst then\n            local damage = inst.components.weapon.damage * 0.5 -- Spin attacks do 50% damage\n            ent.components.combat:GetAttacked(inst, damage)\n            \n            -- Spawn hit effect\n            local fx = SpawnPrefab("sparks")\n            if fx then\n                fx.Transform:SetPosition(ent.Transform:GetWorldPosition())\n            end\n        end\n    end\nend\n\n-- Function to do dash attack damage\nlocal function DoDashDamage(inst)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    local radius = 1.5 -- Dash hit radius\n    local angle = inst.Transform:GetRotation() * DEGREES\n    \n    -- Calculate forward position based on facing angle\n    local offset_x = math.cos(angle) * 1.5\n    local offset_z = -math.sin(angle) * 1.5\n    \n    -- Find entities in front of player\n    local ents = TheSim:FindEntities(x + offset_x, y, z + offset_z, radius, {"_combat"}, {"player", "companion", "INLIMBO"})\n    \n    -- Apply damage to each entity\n    for _, ent in ipairs(ents) do\n        if ent.components.combat and ent ~= inst and not inst.dash_hit_targets[ent] then\n            local damage = inst.components.weapon.damage * 0.8 -- Dash attacks do 80% damage\n            ent.components.combat:GetAttacked(inst, damage)\n            \n            -- Mark as hit to prevent multiple hits\n            inst.dash_hit_targets[ent] = true\n            \n            -- Spawn hit effect\n            local fx = SpawnPrefab("sparks")\n            if fx then\n                fx.Transform:SetPosition(ent.Transform:GetWorldPosition())\n            end\n        end\n    end\nend\n\n-- Function called when the weapon is equipped\nlocal function onequip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_object", "swap_dualblade", "swap_dualblade")\n    owner.AnimState:Show("ARM_carry")\n    owner.AnimState:Hide("ARM_normal")\n    \n    -- Add the spin and dash attack functions to the owner\n    owner.DoSpinDamage = DoSpinDamage\n    owner.DoDashDamage = DoDashDamage\n    \n    -- Initialize dash hit tracking\n    owner.dash_hit_targets = {}\n    \n    -- Add special attack state handlers if enabled\n    if inst.enable_special_attacks then\n        -- Add the state graph to the player\n        if owner.sg and owner.sg.sg.states.spin_attack == nil then\n            -- Add spin attack state\n            owner.sg.sg.states.spin_attack = require("stategraphs/SGdualblade").states.spin_attack\n            \n            -- Add dash attack state\n            owner.sg.sg.states.dash_attack = require("stategraphs/SGdualblade").states.dash_attack\n        end\n    end\nend\n\n-- Function called when the weapon is unequipped\nlocal function onunequip(inst, owner)\n    owner.AnimState:Hide("ARM_carry")\n    owner.AnimState:Show("ARM_normal")\n    \n    -- Remove the special attack functions\n    owner.DoSpinDamage = nil\n    owner.DoDashDamage = nil\n    owner.dash_hit_targets = nil\n    \n    -- We don\'t remove the states as they might be in use by other weapons\nend\n\n-- Main function to create the dual blade\nlocal function fn()\n    -- Create the entity\n    local inst = CreateEntity()\n\n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n\n    -- Set up physics\n    MakeInventoryPhysics(inst)\n\n    -- Set up animation\n    inst.AnimState:SetBank("dualblade")\n    inst.AnimState:SetBuild("dualblade")\n    inst.AnimState:PlayAnimation("idle")\n\n    -- Add tags\n    inst:AddTag("sharp")\n    inst:AddTag("weapon")\n    inst:AddTag("dualblade")\n\n    -- Make the entity pristine for networking\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Get configuration options\n    inst.attack_damage = GetModConfigData("attack_damage")\n    inst.enable_special_attacks = GetModConfigData("enable_special_attacks")\n\n    -- Add components\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "dualblade"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/dualblade.xml"\n\n    -- Make it work as a weapon\n    inst:AddComponent("weapon")\n    inst.components.weapon:SetDamage(inst.attack_damage)\n    \n    -- Add durability\n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(200)\n    inst.components.finiteuses:SetUses(200)\n    inst.components.finiteuses:SetOnFinished(inst.Remove)\n    \n    -- Make it inspectable\n    inst:AddComponent("inspectable")\n\n    -- Make it equippable\n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(onequip)\n    inst.components.equippable:SetOnUnequip(onunequip)\n\n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("dualblade", fn, assets)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-5-create-the-modmainlua-file",children:"Step 5: Create the modmain.lua File"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Import globals into the environment\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add asset files\nAssets = {\n    -- Animations\n    Asset("ANIM", "anim/dualblade.zip"),\n    Asset("ANIM", "anim/swap_dualblade.zip"),\n    \n    -- Inventory images\n    Asset("IMAGE", "images/inventoryimages/dualblade.tex"),\n    Asset("ATLAS", "images/inventoryimages/dualblade.xml"),\n}\n\n-- Register prefabs\nPrefabFiles = {\n    "dualblade",\n}\n\n-- Add custom strings\nSTRINGS.NAMES.DUALBLADE = "Dual Blade"\nSTRINGS.RECIPE_DESC.DUALBLADE = "A swift weapon with special attacks."\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.DUALBLADE = "Two blades are better than one."\n\n-- Add crafting recipe for the dual blade\nAddRecipe("dualblade", \n    {Ingredient("goldnugget", 4), Ingredient("flint", 2), Ingredient("twigs", 2)}, \n    GLOBAL.RECIPETABS.WAR,  -- Add to War tab\n    GLOBAL.TECH.SCIENCE_TWO,  -- Requires Alchemy Engine\n    nil, nil, nil, nil, nil,  \n    "images/inventoryimages/dualblade.xml")\n\n-- Add custom actions for special attacks\nlocal SPIN_ATTACK = Action({priority=10})\nSPIN_ATTACK.id = "SPIN_ATTACK"\nSPIN_ATTACK.str = "Spin Attack"\nSPIN_ATTACK.fn = function(act)\n    if act.doer and act.doer.sg and act.doer.sg.GoToState then\n        -- Check if the player has a dual blade equipped\n        local equipped = act.doer.components.inventory:GetEquippedItem(GLOBAL.EQUIPSLOTS.HANDS)\n        if equipped and equipped:HasTag("dualblade") then\n            act.doer.sg:GoToState("spin_attack")\n            return true\n        end\n    end\n    return false\nend\n\nlocal DASH_ATTACK = Action({priority=10})\nDASH_ATTACK.id = "DASH_ATTACK"\nDASH_ATTACK.str = "Dash Attack"\nDASH_ATTACK.fn = function(act)\n    if act.doer and act.doer.sg and act.doer.sg.GoToState then\n        -- Check if the player has a dual blade equipped\n        local equipped = act.doer.components.inventory:GetEquippedItem(GLOBAL.EQUIPSLOTS.HANDS)\n        if equipped and equipped:HasTag("dualblade") then\n            -- Clear dash hit targets\n            act.doer.dash_hit_targets = {}\n            act.doer.sg:GoToState("dash_attack")\n            return true\n        end\n    end\n    return false\nend\n\n-- Register the actions\nAddAction(SPIN_ATTACK)\nAddAction(DASH_ATTACK)\n\n-- Add key bindings for special attacks\nlocal KEY_R = 114 -- R key for spin attack\nlocal KEY_F = 102 -- F key for dash attack\n\n-- Add key handlers\nTheInput:AddKeyDownHandler(KEY_R, function()\n    if ThePlayer and ThePlayer:HasTag("player") then\n        local equipped = ThePlayer.components.inventory:GetEquippedItem(GLOBAL.EQUIPSLOTS.HANDS)\n        if equipped and equipped:HasTag("dualblade") then\n            SendRPCToServer(RPC.DoAction, ACTIONS.SPIN_ATTACK.code)\n        end\n    end\nend)\n\nTheInput:AddKeyDownHandler(KEY_F, function()\n    if ThePlayer and ThePlayer:HasTag("player") then\n        local equipped = ThePlayer.components.inventory:GetEquippedItem(GLOBAL.EQUIPSLOTS.HANDS)\n        if equipped and equipped:HasTag("dualblade") then\n            SendRPCToServer(RPC.DoAction, ACTIONS.DASH_ATTACK.code)\n        end\n    end\nend)\n\n-- Add the actions to the player action component\nAddComponentAction("SCENE", "playeractionpicker", function(inst, doer, actions, right)\n    if doer:HasTag("player") and right and doer.components.inventory then\n        local equipped = doer.components.inventory:GetEquippedItem(GLOBAL.EQUIPSLOTS.HANDS)\n        if equipped and equipped:HasTag("dualblade") then\n            table.insert(actions, ACTIONS.SPIN_ATTACK)\n            table.insert(actions, ACTIONS.DASH_ATTACK)\n        end\n    end\nend)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-6-create-the-animations",children:"Step 6: Create the Animations"}),"\n",(0,i.jsx)(e.p,{children:"For a complete mod, you'll need to create these animation files:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Weapon Animation"}),": ",(0,i.jsx)(e.code,{children:"anim/dualblade.zip"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"This contains the weapon's animations when not equipped"}),"\n",(0,i.jsx)(e.li,{children:"Include idle, attack, and special attack animations"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Equipped Animation"}),": ",(0,i.jsx)(e.code,{children:"anim/swap_dualblade.zip"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"This contains the animations for when the weapon is equipped"}),"\n",(0,i.jsx)(e.li,{children:'Should include the "swap_dualblade" symbol'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Inventory Image"}),": ",(0,i.jsx)(e.code,{children:"images/inventoryimages/dualblade.tex"})," and ",(0,i.jsx)(e.code,{children:"dualblade.xml"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"64x64 pixel image for the inventory"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"step-7-testing-your-state-graph",children:"Step 7: Testing Your State Graph"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Launch Don't Starve Together"}),"\n",(0,i.jsx)(e.li,{children:"Enable your mod in the Mods menu"}),"\n",(0,i.jsx)(e.li,{children:"Start a new game"}),"\n",(0,i.jsx)(e.li,{children:"Craft the Dual Blade (requires gold nuggets, flint, and twigs)"}),"\n",(0,i.jsxs)(e.li,{children:["Test the state graph by:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Attacking normally with the weapon"}),"\n",(0,i.jsx)(e.li,{children:"Using the R key to perform a spin attack"}),"\n",(0,i.jsx)(e.li,{children:"Using the F key to perform a dash attack"}),"\n",(0,i.jsx)(e.li,{children:"Observing the different animations and effects"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"understanding-state-graphs",children:"Understanding State Graphs"}),"\n",(0,i.jsx)(e.p,{children:"State graphs in Don't Starve Together control entity behavior through a series of states and transitions:"}),"\n",(0,i.jsx)(e.h3,{id:"state-components",children:"State Components"}),"\n",(0,i.jsx)(e.p,{children:"Each state typically includes:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Name"}),": Unique identifier for the state"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Tags"}),': Metadata used to query state properties (e.g., "busy", "attack")']}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"onenter"}),": Function called when entering the state"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"onexit"}),": Function called when exiting the state"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"onupdate"}),": Function called each frame while in the state"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"timeline"}),": Sequence of timed events during the state"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"events"}),": Event handlers that can trigger state transitions"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"common-state-tags",children:"Common State Tags"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"idle"}),": Entity is not performing any action"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"busy"}),": Entity cannot perform other actions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"attack"}),": Entity is attacking"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"moving"}),": Entity is moving"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"canrotate"}),": Entity can change facing direction"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"animation-integration",children:"Animation Integration"}),"\n",(0,i.jsx)(e.p,{children:"States are tightly coupled with animations:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"PlayAnimation(name, [loop])"}),": Play a specific animation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"PushAnimation(name, [loop])"}),": Queue an animation to play after the current one"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"GetCurrentAnimationLength()"}),": Get the duration of the current animation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"IsCurrentAnimation(name)"}),": Check if a specific animation is playing"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"timeline-events",children:"Timeline Events"}),"\n",(0,i.jsx)(e.p,{children:"Timeline events execute at specific frames during an animation:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"timeline = {\n    TimeEvent(10*FRAMES, function(inst)\n        -- Do something at frame 10\n    end),\n    TimeEvent(20*FRAMES, function(inst)\n        -- Do something at frame 20\n    end),\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"event-handlers",children:"Event Handlers"}),"\n",(0,i.jsx)(e.p,{children:"Event handlers respond to events like animation completion:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'events = {\n    EventHandler("animover", function(inst)\n        -- Do something when the animation ends\n    end),\n    EventHandler("attacked", function(inst)\n        -- Do something when attacked\n    end),\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,i.jsx)(e.p,{children:"Here are some ways to enhance your state graph:"}),"\n",(0,i.jsx)(e.h3,{id:"add-combo-attacks",children:"Add Combo Attacks"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- In your state graph, add a combo system\nState{\n    name = "attack1",\n    tags = {"attack", "busy"},\n    \n    onenter = function(inst)\n        inst.AnimState:PlayAnimation("atk1")\n        inst.sg.statemem.combo = true\n    end,\n    \n    timeline = {\n        TimeEvent(10*FRAMES, function(inst)\n            inst:PerformBufferedAction()\n        end),\n    },\n    \n    events = {\n        EventHandler("animover", function(inst)\n            if inst.sg.statemem.combo and \n               inst:IsActionValid(ACTIONS.ATTACK) then\n                inst.sg:GoToState("attack2")\n            else\n                inst.sg:GoToState("idle")\n            end\n        end),\n    },\n},\n\nState{\n    name = "attack2",\n    tags = {"attack", "busy"},\n    \n    onenter = function(inst)\n        inst.AnimState:PlayAnimation("atk2")\n        inst.sg.statemem.combo = true\n    end,\n    \n    timeline = {\n        TimeEvent(10*FRAMES, function(inst)\n            inst:PerformBufferedAction()\n        end),\n    },\n    \n    events = {\n        EventHandler("animover", function(inst)\n            if inst.sg.statemem.combo and \n               inst:IsActionValid(ACTIONS.ATTACK) then\n                inst.sg:GoToState("attack3")\n            else\n                inst.sg:GoToState("idle")\n            end\n        end),\n    },\n},\n\nState{\n    name = "attack3",\n    tags = {"attack", "busy"},\n    \n    onenter = function(inst)\n        inst.AnimState:PlayAnimation("atk3")\n    end,\n    \n    timeline = {\n        TimeEvent(10*FRAMES, function(inst)\n            inst:PerformBufferedAction()\n        end),\n    },\n    \n    events = {\n        EventHandler("animover", function(inst)\n            inst.sg:GoToState("idle")\n        end),\n    },\n},\n'})}),"\n",(0,i.jsx)(e.h3,{id:"add-status-effects-to-attacks",children:"Add Status Effects to Attacks"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- In your attack timeline, add status effects\nTimeEvent(10*FRAMES, function(inst)\n    inst:PerformBufferedAction()\n    \n    -- Apply status effect to target\n    local target = inst.components.combat.target\n    if target and target.components.health and not target.components.health:IsDead() then\n        if target.components.freezable then\n            target.components.freezable:AddColdness(1)\n        end\n        \n        if target.components.locomotor then\n            target.components.locomotor:SetExternalSpeedMultiplier(inst, "dualblade_slow", 0.7)\n            \n            -- Remove slow after 3 seconds\n            target:DoTaskInTime(3, function()\n                if target.components.locomotor then\n                    target.components.locomotor:RemoveExternalSpeedMultiplier(inst, "dualblade_slow")\n                end\n            end)\n        end\n    end\nend),\n'})}),"\n",(0,i.jsx)(e.h3,{id:"add-charged-attacks",children:"Add Charged Attacks"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Add a charged attack state\nState{\n    name = "charge_attack",\n    tags = {"attack", "busy", "charging"},\n    \n    onenter = function(inst)\n        inst.components.locomotor:Stop()\n        inst.AnimState:PlayAnimation("charge")\n        \n        -- Start charge timer\n        inst.sg.statemem.charge_time = 0\n        inst.sg.statemem.max_charge = 3 -- Max 3 seconds charge\n    end,\n    \n    onupdate = function(inst, dt)\n        -- Increase charge time\n        inst.sg.statemem.charge_time = inst.sg.statemem.charge_time + dt\n        \n        -- Visual feedback based on charge level\n        local charge_level = math.min(inst.sg.statemem.charge_time / inst.sg.statemem.max_charge, 1)\n        \n        -- Spawn particles based on charge level\n        if math.random() < charge_level * 0.3 then\n            local fx = SpawnPrefab("sparks")\n            if fx then\n                local x, y, z = inst.Transform:GetWorldPosition()\n                local angle = math.random() * 2 * PI\n                local range = 0.5 + math.random() * 0.5\n                fx.Transform:SetPosition(x + math.cos(angle) * range, y, z + math.sin(angle) * range)\n            end\n        end\n    end,\n    \n    events = {\n        -- Release charge when button is released\n        EventHandler("unequip", function(inst)\n            inst.sg:GoToState("idle")\n        end),\n        \n        EventHandler("charge_released", function(inst)\n            -- Calculate damage multiplier based on charge time\n            local charge_level = math.min(inst.sg.statemem.charge_time / inst.sg.statemem.max_charge, 1)\n            inst.sg.statemem.charge_level = charge_level\n            \n            -- Go to release state\n            inst.sg:GoToState("charge_release", {charge_level = charge_level})\n        end),\n    },\n},\n\nState{\n    name = "charge_release",\n    tags = {"attack", "busy"},\n    \n    onenter = function(inst, data)\n        inst.components.locomotor:Stop()\n        inst.AnimState:PlayAnimation("charge_release")\n        \n        -- Get charge level from previous state\n        local charge_level = data and data.charge_level or 0.5\n        \n        -- Play sound with volume based on charge\n        inst.SoundEmitter:PlaySound("dontstarve/wilson/attack_nightsword", nil, charge_level)\n        \n        -- Do damage based on charge level\n        local damage_mult = 1 + charge_level * 2 -- 1x to 3x damage\n        local base_damage = inst.components.combat:GetWeaponDamage()\n        \n        -- Find targets in front of player\n        local x, y, z = inst.Transform:GetWorldPosition()\n        local angle = inst.Transform:GetRotation() * DEGREES\n        local reach = 3 + charge_level * 2 -- Longer reach with higher charge\n        \n        -- Calculate forward position\n        local offset_x = math.cos(angle) * reach\n        local offset_z = -math.sin(angle) * reach\n        \n        -- Spawn charge effect\n        local fx = SpawnPrefab("cane_victorian_fx")\n        if fx then\n            fx.Transform:SetPosition(x + offset_x * 0.5, y, z + offset_z * 0.5)\n            fx.Transform:SetScale(charge_level, charge_level, charge_level)\n        end\n        \n        -- Find and damage entities\n        local targets = TheSim:FindEntities(x + offset_x, y, z + offset_z, 2 + charge_level, {"_combat"}, {"player", "companion", "INLIMBO"})\n        for _, target in ipairs(targets) do\n            if target.components.combat then\n                target.components.combat:GetAttacked(inst, base_damage * damage_mult)\n            end\n        end\n    end,\n    \n    events = {\n        EventHandler("animover", function(inst)\n            inst.sg:GoToState("idle")\n        end),\n    },\n},\n'})}),"\n",(0,i.jsx)(e.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,i.jsx)(e.h3,{id:"problem-state-not-transitioning-correctly",children:"Problem: State not transitioning correctly"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),": Check your event handlers and ensure animations are playing properly"]}),"\n",(0,i.jsx)(e.h3,{id:"problem-animations-not-playing",children:"Problem: Animations not playing"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),": Verify animation names match exactly what's in your animation files"]}),"\n",(0,i.jsx)(e.h3,{id:"problem-actions-not-triggering-states",children:"Problem: Actions not triggering states"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),": Make sure action handlers are properly connected to your state graph"]}),"\n",(0,i.jsx)(e.h3,{id:"problem-visual-effects-not-appearing",children:"Problem: Visual effects not appearing"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),": Check that prefabs for effects exist and positions are calculated correctly"]}),"\n",(0,i.jsx)(e.h3,{id:"problem-collision-detection-issues",children:"Problem: Collision detection issues"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Solution"}),": Use debug visualization to see attack ranges and adjust as needed:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Add this to your attack function for debugging\nif CHEATS_ENABLED then\n    local x, y, z = inst.Transform:GetWorldPosition()\n    local radius = 2 -- Attack radius\n    \n    -- Draw debug circle\n    for i = 1, 16 do\n        local angle = i * (2 * PI / 16)\n        local fx = SpawnPrefab("minimap_firefly_marker")\n        if fx then\n            fx.Transform:SetPosition(\n                x + radius * math.cos(angle),\n                y,\n                z + radius * math.sin(angle)\n            )\n            fx:DoTaskInTime(1, fx.Remove)\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(e.p,{children:"Now that you've created a custom state graph, you can:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Add More States"}),": Create additional attack patterns and special moves"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Improve Visual Effects"}),": Add particle effects and screen shakes"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Add Sound Effects"}),": Create custom sounds for each state"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Create Unique Animations"}),": Design completely custom animations for your weapon"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["For more advanced state graph usage, check out the ",(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api/stategraphs",children:"State Graph System"})," documentation to learn about the full capabilities of the system."]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>l});var a=t(6540);const i={},s=a.createContext(i);function o(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);