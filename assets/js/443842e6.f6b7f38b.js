"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2765],{8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>c});var i=t(6540);const s={},o=i.createContext(s);function a(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(o.Provider,{value:e},n.children)}},9249:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"api-vanilla/node-types/action-nodes","title":"Action Nodes","description":"Last Update: 2023-08-01","source":"@site/docs/api-vanilla/node-types/action-nodes.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/action-nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/action-nodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"action-nodes","title":"Action Nodes","sidebar_position":2,"last_updated":"2023-08-01T00:00:00.000Z","version":624447},"sidebar":"docs","previous":{"title":"Node Types Overview","permalink":"/dst-api-webdocs/docs/api/node-types"},"next":{"title":"Condition Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes"}}');var s=t(4848),o=t(8453);const a={id:"action-nodes",title:"Action Nodes",sidebar_position:2,last_updated:new Date("2023-08-01T00:00:00.000Z"),version:624447},c="Action Nodes",d={},r=[{value:"Action Node properties and methods",id:"action-node-properties-and-methods",level:2},{value:"Properties",id:"properties",level:2},{value:"inst: Entity <code>[readonly]</code>",id:"inst-entity-readonly",level:3},{value:"status: &#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39; <code>[readonly]</code>",id:"status-ready--running--success--failure-readonly",level:3},{value:"action_fn: <code>Function</code> <code>[readonly]</code>",id:"action_fn-function-readonly",level:3},{value:"Methods",id:"methods",level:2},{value:"Visit(): &#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39;",id:"visit-ready--running--success--failure",level:3},{value:"OnStop(): <code>void</code>",id:"onstop-void",level:3},{value:"Built-in Action Nodes",id:"built-in-action-nodes",level:2},{value:"Movement Actions",id:"movement-actions",level:3},{value:"GoToEntity(inst: Entity, target_fn: <code>Function</code>, max_distance: <code>number</code>): <code>ActionNode</code>",id:"gotoentityinst-entity-target_fn-function-max_distance-number-actionnode",level:4},{value:"GoToPoint(inst: Entity, point_fn: <code>Function</code>): <code>ActionNode</code>",id:"gotopointinst-entity-point_fn-function-actionnode",level:4},{value:"Wander(inst: Entity, center_point: <code>Function</code>, max_distance: <code>number</code>, min_time: <code>number</code>, max_time: <code>number</code>): <code>ActionNode</code>",id:"wanderinst-entity-center_point-function-max_distance-number-min_time-number-max_time-number-actionnode",level:4},{value:"Follow(inst: Entity, target_fn: <code>Function</code>, min_dist: <code>number</code>, target_dist: <code>number</code>, max_dist: <code>number</code>): <code>ActionNode</code>",id:"followinst-entity-target_fn-function-min_dist-number-target_dist-number-max_dist-number-actionnode",level:4},{value:"RunAway(inst: Entity, threat_fn: <code>Function</code>, threat_distance: <code>number</code>, safe_distance: <code>number</code>): <code>ActionNode</code>",id:"runawayinst-entity-threat_fn-function-threat_distance-number-safe_distance-number-actionnode",level:4},{value:"Combat Actions",id:"combat-actions",level:3},{value:"ChaseAndAttack(inst: Entity, max_chase_time: <code>number</code>, give_up_distance: <code>number</code>): <code>ActionNode</code>",id:"chaseandattackinst-entity-max_chase_time-number-give_up_distance-number-actionnode",level:4},{value:"AttackTarget(inst: Entity, target_fn: <code>Function</code>): <code>ActionNode</code>",id:"attacktargetinst-entity-target_fn-function-actionnode",level:4},{value:"FindTarget(inst: Entity, distance: <code>number</code>, canattack_fn: <code>Function</code>, tags: <code>Array&lt;string&gt;</code>): <code>ActionNode</code>",id:"findtargetinst-entity-distance-number-canattack_fn-function-tags-arraystring-actionnode",level:4},{value:"Creating Custom Action Nodes",id:"creating-custom-action-nodes",level:2},{value:"1. Derive from BehaviorNode",id:"1-derive-from-behaviornode",level:3},{value:"2. Implement Visit function",id:"2-implement-visit-function",level:3},{value:"3. Implement OnStop function (optional)",id:"3-implement-onstop-function-optional",level:3},{value:"Example: Patrol Action",id:"example-patrol-action",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"See also",id:"see-also",level:2}];function l(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Last Update: 2023-08-01"})}),"\n",(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"action-nodes",children:"Action Nodes"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"API Version: 624447"})}),"\n",(0,s.jsx)(e.p,{children:"Action Nodes are fundamental building blocks in Don't Starve Together's behavior tree system. They define specific actions that entities can perform, forming the \"leaves\" of behavior trees that drive AI decision-making."}),"\n",(0,s.jsx)(e.h2,{id:"action-node-properties-and-methods",children:"Action Node properties and methods"}),"\n",(0,s.jsx)(e.p,{children:"Action Nodes provide the following key properties and methods:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Properties"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"inst"})," - Reference to the entity this node controls"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"status"})," - Current execution status of the node"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"action_fn"})," - Function that performs the actual action"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Methods"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Visit()"})," - Evaluates the node and executes its action"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"OnStop()"})," - Cleans up resources when execution stops"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(e.h3,{id:"inst-entity-readonly",children:["inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"})," ",(0,s.jsx)(e.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(e.p,{children:"A reference to the entity that this action node is controlling."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Access the action node's entity\nlocal health = action_node.inst.components.health\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h3,{id:"status-ready--running--success--failure-readonly",children:["status: 'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE' ",(0,s.jsx)(e.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(e.p,{children:"The current execution status of the node. Action nodes progress through states as they execute:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"READY"}),": Node is ready to be executed"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"RUNNING"}),": Node is currently executing"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"SUCCESS"}),": Node has completed successfully"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"FAILURE"}),": Node has failed to complete"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Check the current status\nif action_node.status == SUCCESS then\n    print("Action completed successfully")\nend\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h3,{id:"action_fn-function-readonly",children:["action_fn: ",(0,s.jsx)(e.code,{children:"Function"})," ",(0,s.jsx)(e.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(e.p,{children:"The function that performs the actual action. It should return true for success and false for failure."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Define an action function\nlocal attack_action = function(inst)\n    return inst.components.combat:DoAttack()\nend\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(e.h3,{id:"visit-ready--running--success--failure",children:"Visit(): 'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE'"}),"\n",(0,s.jsx)(e.p,{children:"Evaluates the node, executes its action, and returns the current status. This is the main method that drives the behavior tree execution."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Custom action node implementation\nfunction MyAction:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n    end\n\n    if self.status == RUNNING then\n        if self.action_fn(self.inst) then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h3,{id:"onstop-void",children:["OnStop(): ",(0,s.jsx)(e.code,{children:"void"})]}),"\n",(0,s.jsx)(e.p,{children:"Called when the node stops execution. Use this to clean up any resources or states."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"function MyAction:OnStop()\n    -- Clean up any active states\n    self.inst.components.locomotor:Stop()\nend\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"built-in-action-nodes",children:"Built-in Action Nodes"}),"\n",(0,s.jsx)(e.p,{children:"Don't Starve Together includes several pre-defined action nodes for common behaviors:"}),"\n",(0,s.jsx)(e.h3,{id:"movement-actions",children:"Movement Actions"}),"\n",(0,s.jsxs)(e.h4,{id:"gotoentityinst-entity-target_fn-function-max_distance-number-actionnode",children:["GoToEntity(inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"}),", target_fn: ",(0,s.jsx)(e.code,{children:"Function"}),", max_distance: ",(0,s.jsx)(e.code,{children:"number"}),"): ",(0,s.jsx)(e.code,{children:"ActionNode"})]}),"\n",(0,s.jsx)(e.p,{children:"Creates a node that moves the entity toward a target entity."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"inst"}),": Entity to move"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"target_fn"}),": Function that returns the target entity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"max_distance"}),": Maximum distance to move"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Go to nearest player\nlocal go_to_player = GoToEntity(inst, function() \n    return FindClosestPlayer(inst) \nend, 2)\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h4,{id:"gotopointinst-entity-point_fn-function-actionnode",children:["GoToPoint(inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"}),", point_fn: ",(0,s.jsx)(e.code,{children:"Function"}),"): ",(0,s.jsx)(e.code,{children:"ActionNode"})]}),"\n",(0,s.jsx)(e.p,{children:"Creates a node that moves the entity to a specific point."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"inst"}),": Entity to move"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"point_fn"}),": Function that returns a Vector3 position"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Go to a specific point\nlocal go_home = GoToPoint(inst, function() \n    return inst.components.homeposition:GetPosition() \nend)\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h4,{id:"wanderinst-entity-center_point-function-max_distance-number-min_time-number-max_time-number-actionnode",children:["Wander(inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"}),", center_point: ",(0,s.jsx)(e.code,{children:"Function"}),", max_distance: ",(0,s.jsx)(e.code,{children:"number"}),", min_time: ",(0,s.jsx)(e.code,{children:"number"}),", max_time: ",(0,s.jsx)(e.code,{children:"number"}),"): ",(0,s.jsx)(e.code,{children:"ActionNode"})]}),"\n",(0,s.jsx)(e.p,{children:"Creates a node that makes the entity wander around randomly."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"inst"}),": Entity to move"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"center_point"}),": Function that returns the center point to wander around"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"max_distance"}),": Maximum distance to wander from center"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"min_time"}),": Minimum time to wander before picking a new point"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"max_time"}),": Maximum time to wander before picking a new point"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Wander around home position\nlocal wander = Wander(inst, function() \n    return inst.components.knownlocations:GetLocation("home") \nend, 20, 2, 6)\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h4,{id:"followinst-entity-target_fn-function-min_dist-number-target_dist-number-max_dist-number-actionnode",children:["Follow(inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"}),", target_fn: ",(0,s.jsx)(e.code,{children:"Function"}),", min_dist: ",(0,s.jsx)(e.code,{children:"number"}),", target_dist: ",(0,s.jsx)(e.code,{children:"number"}),", max_dist: ",(0,s.jsx)(e.code,{children:"number"}),"): ",(0,s.jsx)(e.code,{children:"ActionNode"})]}),"\n",(0,s.jsx)(e.p,{children:"Creates a node that makes the entity follow another entity at a distance."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"inst"}),": Entity to move"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"target_fn"}),": Function that returns the entity to follow"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"min_dist"}),": Minimum distance to maintain"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"target_dist"}),": Preferred distance to maintain"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"max_dist"}),": Maximum distance before giving up"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Follow the player at a distance\nlocal follow_player = Follow(inst, function() \n    return FindClosestPlayer(inst) \nend, 2, 4, 10)\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h4,{id:"runawayinst-entity-threat_fn-function-threat_distance-number-safe_distance-number-actionnode",children:["RunAway(inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"}),", threat_fn: ",(0,s.jsx)(e.code,{children:"Function"}),", threat_distance: ",(0,s.jsx)(e.code,{children:"number"}),", safe_distance: ",(0,s.jsx)(e.code,{children:"number"}),"): ",(0,s.jsx)(e.code,{children:"ActionNode"})]}),"\n",(0,s.jsx)(e.p,{children:"Creates a node that makes the entity run away from threats."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"inst"}),": Entity to move"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"threat_fn"}),": Function that returns the threat to run away from"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"threat_distance"}),": Distance to detect threats"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"safe_distance"}),": Distance considered safe"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Run away from players\nlocal run_away = RunAway(inst, "player", 5, 10)\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"combat-actions",children:"Combat Actions"}),"\n",(0,s.jsxs)(e.h4,{id:"chaseandattackinst-entity-max_chase_time-number-give_up_distance-number-actionnode",children:["ChaseAndAttack(inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"}),", max_chase_time: ",(0,s.jsx)(e.code,{children:"number"}),", give_up_distance: ",(0,s.jsx)(e.code,{children:"number"}),"): ",(0,s.jsx)(e.code,{children:"ActionNode"})]}),"\n",(0,s.jsx)(e.p,{children:"Creates a node that chases and attacks a target."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"inst"}),": Entity that will chase and attack"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"max_chase_time"}),": Maximum time to chase before giving up"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"give_up_distance"}),": Distance at which to give up chase"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Chase and attack targets\nlocal chase = ChaseAndAttack(inst, 10, 20)\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h4,{id:"attacktargetinst-entity-target_fn-function-actionnode",children:["AttackTarget(inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"}),", target_fn: ",(0,s.jsx)(e.code,{children:"Function"}),"): ",(0,s.jsx)(e.code,{children:"ActionNode"})]}),"\n",(0,s.jsx)(e.p,{children:"Creates a node that attacks a specific target."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"inst"}),": Entity that will attack"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"target_fn"}),": Function that returns the target to attack"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Attack the player\nlocal attack_player = AttackTarget(inst, function() \n    return FindClosestPlayer(inst)\nend)\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h4,{id:"findtargetinst-entity-distance-number-canattack_fn-function-tags-arraystring-actionnode",children:["FindTarget(inst: ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"}),", distance: ",(0,s.jsx)(e.code,{children:"number"}),", canattack_fn: ",(0,s.jsx)(e.code,{children:"Function"}),", tags: ",(0,s.jsx)(e.code,{children:"Array<string>"}),"): ",(0,s.jsx)(e.code,{children:"ActionNode"})]}),"\n",(0,s.jsx)(e.p,{children:"Creates a node that finds and sets a target to attack."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"inst"}),": Entity that will search"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"distance"}),": Search radius"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"canattack_fn"}),": Function that checks if entity can be attacked"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"tags"}),": Tags to search for"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Find attackable targets\nlocal find_target = FindTarget(inst, 20, \n    function(target) return not target:HasTag("wall") end,\n    {"character", "monster"}\n)\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"creating-custom-action-nodes",children:"Creating Custom Action Nodes"}),"\n",(0,s.jsx)(e.p,{children:"To create a custom action node:"}),"\n",(0,s.jsx)(e.h3,{id:"1-derive-from-behaviornode",children:"1. Derive from BehaviorNode"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'local CustomAction = Class(BehaviorNode, function(self, inst, ...)\n    BehaviorNode._ctor(self, "CustomAction")\n    self.inst = inst\n    -- Store other parameters\nend)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-implement-visit-function",children:"2. Implement Visit function"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"function CustomAction:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n    end\n    \n    if self.status == RUNNING then\n        -- Implement action logic here\n        -- Set status to SUCCESS or FAILURE based on result\n    end\n    \n    return self.status\nend\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-implement-onstop-function-optional",children:"3. Implement OnStop function (optional)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"function CustomAction:OnStop()\n    -- Clean up any resources or states\nend\n"})}),"\n",(0,s.jsx)(e.h2,{id:"example-patrol-action",children:"Example: Patrol Action"}),"\n",(0,s.jsx)(e.p,{children:"Here's a complete example of a custom action node that makes an entity patrol between points:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'local Patrol = Class(BehaviorNode, function(self, inst, patrol_points, pause_time)\n    BehaviorNode._ctor(self, "Patrol")\n    self.inst = inst\n    self.patrol_points = patrol_points\n    self.pause_time = pause_time or 2\n    self.current_point = 1\n    self.waiting = false\n    self.wait_time = 0\nend)\n\nfunction Patrol:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n    end\n    \n    if self.status == RUNNING then\n        if self.waiting then\n            self.wait_time = self.wait_time - GetTickTime()\n            if self.wait_time <= 0 then\n                self.waiting = false\n                self.current_point = (self.current_point % #self.patrol_points) + 1\n            end\n            return self.status\n        end\n        \n        if self.inst.components.locomotor ~= nil then\n            local target = self.patrol_points[self.current_point]\n            local pos = self.inst:GetPosition()\n            \n            if distsq(pos.x, pos.z, target.x, target.z) < 1 then\n                self.waiting = true\n                self.wait_time = self.pause_time\n                self.inst.components.locomotor:Stop()\n            else\n                self.inst.components.locomotor:GoToPoint(target)\n            end\n            return self.status\n        else\n            return FAILURE\n        end\n    end\n    \n    return self.status\nend\n\nfunction Patrol:OnStop()\n    if self.inst.components.locomotor ~= nil then\n        self.inst.components.locomotor:Stop()\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Keep action logic simple for better performance"}),"\n",(0,s.jsx)(e.li,{children:"Avoid expensive calculations in frequently called actions"}),"\n",(0,s.jsx)(e.li,{children:"Use timeouts to prevent infinite action attempts"}),"\n",(0,s.jsx)(e.li,{children:"Consider using throttled updates for non-critical actions"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/brain",children:"Brain"})," - For brain implementation using behavior trees"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes",children:"Priority Nodes"})," - For selecting between different actions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes",children:"Condition Nodes"})," - For conditional action execution"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes",children:"Sequence Nodes"})," - For executing actions in sequence"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes",children:"Decorator Nodes"})," - For modifying action behavior"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}}}]);