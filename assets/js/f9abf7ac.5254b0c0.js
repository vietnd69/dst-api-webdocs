"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1032],{6356:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/components/other-components","title":"Other Components","description":"This page provides a brief overview of additional important components available in Don\'t Starve Together. Each component is described with its primary purpose and key properties.","source":"@site/docs/api-vanilla/components/other-components.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/other-components","permalink":"/dst-api-webdocs/docs/api-vanilla/components/other-components","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"id":"other-components","title":"Other Components","sidebar_position":30},"sidebar":"docs","previous":{"title":"Trader","permalink":"/dst-api-webdocs/docs/api-vanilla/components/trader"},"next":{"title":"Prefabs","permalink":"/dst-api-webdocs/docs/category/prefabs"}}');var s=t(4848),o=t(8453);const r={id:"other-components",title:"Other Components",sidebar_position:30},l="Other Components",a={},c=[{value:"Movement and Physics Components",id:"movement-and-physics-components",level:2},{value:"Flotation",id:"flotation",level:3},{value:"Walkableplatform",id:"walkableplatform",level:3},{value:"Physics",id:"physics",level:3},{value:"Interaction Components",id:"interaction-components",level:2},{value:"Activatable",id:"activatable",level:3},{value:"Useable",id:"useable",level:3},{value:"Button",id:"button",level:3},{value:"Environmental Components",id:"environmental-components",level:2},{value:"Heater",id:"heater",level:3},{value:"Weather",id:"weather",level:3},{value:"Moisture",id:"moisture",level:3},{value:"Resource Components",id:"resource-components",level:2},{value:"Harvestable",id:"harvestable",level:3},{value:"Preserver",id:"preserver",level:3},{value:"Rechargeable",id:"rechargeable",level:3},{value:"Character Components",id:"character-components",level:2},{value:"Talker",id:"talker",level:3},{value:"Follower",id:"follower",level:3},{value:"Birdattractor",id:"birdattractor",level:3},{value:"Crafting Components",id:"crafting-components",level:2},{value:"Prototyper",id:"prototyper",level:3},{value:"Deployable",id:"deployable",level:3},{value:"Constructionsite",id:"constructionsite",level:3},{value:"Other Important Components",id:"other-important-components",level:2},{value:"Light",id:"light",level:3},{value:"Timer",id:"timer",level:3},{value:"Tiletracker",id:"tiletracker",level:3},{value:"Drownable",id:"drownable",level:3},{value:"Grogginess",id:"grogginess",level:3},{value:"Resurrector",id:"resurrector",level:3},{value:"Wisecracker",id:"wisecracker",level:3},{value:"Teleporter",id:"teleporter",level:3},{value:"Murderable",id:"murderable",level:3},{value:"Shard_player",id:"shard_player",level:3},{value:"Tradable",id:"tradable",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"other-components",children:"Other Components"})}),"\n",(0,s.jsx)(e.p,{children:"This page provides a brief overview of additional important components available in Don't Starve Together. Each component is described with its primary purpose and key properties."}),"\n",(0,s.jsx)(e.h2,{id:"movement-and-physics-components",children:"Movement and Physics Components"}),"\n",(0,s.jsx)(e.h3,{id:"flotation",children:"Flotation"}),"\n",(0,s.jsx)(e.p,{children:"Allows entities to float on water."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"floodlevel"}),": Height threshold at which the entity starts floating"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"float_speed"}),": Speed at which the entity floats upward"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Adding flotation to an entity\nlocal function MakeFloatable(inst)\n    if inst.components.flotation == nil then\n        inst:AddComponent("flotation")\n    end\n    inst.components.flotation.floodlevel = 2\n    inst.components.flotation.float_speed = 4\nend\n\n-- Using the flotation component\nif inst.components.flotation ~= nil then\n    inst.components.flotation:SetFloatOnLiquid(true)\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"walkableplatform",children:"Walkableplatform"}),"\n",(0,s.jsx)(e.p,{children:"Makes entities act as walkable surfaces, like boats."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"platform_radius"}),": Radius of the walkable area"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"player_collision_prefab"}),": Prefab used for player collision"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Adding walkable platform to a boat\nlocal function AddWalkablePlatform(inst)\n    inst:AddComponent("walkableplatform")\n    inst.components.walkableplatform.platform_radius = 4.5\n    inst.components.walkableplatform.player_collision_prefab = "boat_player_collision"\nend\n\n-- Getting entities on platform\nlocal function GetEntitiesOnBoat(boat)\n    if boat.components.walkableplatform ~= nil then\n        local entities = boat.components.walkableplatform:GetEntitiesOnPlatform()\n        -- Do something with entities\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"physics",children:"Physics"}),"\n",(0,s.jsx)(e.p,{children:"Controls physical properties and collision."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"mass"}),": Entity mass"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"friction"}),": Surface friction coefficient"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"collisiongroup"}),": Which collision group this entity belongs to"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"ignorewalls"}),": Whether entity ignores wall collisions"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up physics on an entity\nlocal function SetupPhysics(inst)\n    inst:AddComponent("physics")\n    inst.components.physics:SetMass(10)\n    inst.components.physics:SetFriction(0.1)\n    inst.components.physics:SetCollisionGroup(COLLISION.CHARACTERS)\n    inst.components.physics:SetCollisionMask(COLLISION.WORLD)\n    inst.components.physics:SetActive(true)\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"interaction-components",children:"Interaction Components"}),"\n",(0,s.jsx)(e.h3,{id:"activatable",children:"Activatable"}),"\n",(0,s.jsx)(e.p,{children:"Allows entities to be activated (like switches or levers)."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"inactive"}),": Whether the entity is currently inactive"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onactivate"}),": Function called when activated"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"standingactivation"}),": Whether it activates when stood upon"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up an activatable lever\nlocal function MakeLever(inst)\n    inst:AddComponent("activatable")\n    \n    inst.components.activatable.OnActivate = function(inst, doer)\n        if inst.components.activatable.inactive then\n            inst.components.activatable.inactive = false\n            -- Do something when activated\n            return true\n        end\n    end\n    \n    inst.components.activatable.standingactivation = false\n    inst.components.activatable.inactive = true\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"useable",children:"Useable"}),"\n",(0,s.jsx)(e.p,{children:'Makes entities useable through the "use" action.'}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onuse"}),": Function called when entity is used"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"usedurabilityloss"}),": Durability loss per use"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"inuse"}),": Whether entity is currently being used"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Make an item useable\nlocal function MakeUseable(inst)\n    inst:AddComponent("useable")\n    inst.components.useable:SetOnUseFn(function(inst, doer)\n        -- Do something when used\n        return true\n    end)\n    inst.components.useable:SetUseTime(1)\n    inst.components.useable.usedurabilityloss = 1\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"button",children:"Button"}),"\n",(0,s.jsx)(e.p,{children:"Makes entities act as clickable buttons."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onclick"}),": Function called when button is clicked"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"enabled"}),": Whether button is currently enabled"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"text"}),": Text displayed on the button"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Creating a button\nlocal function MakeButton(inst)\n    inst:AddComponent("button")\n    inst.components.button:SetOnClick(function()\n        -- Action when clicked\n        print("Button was clicked!")\n    end)\n    inst.components.button:SetText("Press Me")\n    inst.components.button:SetEnabled(true)\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"environmental-components",children:"Environmental Components"}),"\n",(0,s.jsx)(e.h3,{id:"heater",children:"Heater"}),"\n",(0,s.jsx)(e.p,{children:"Allows entities to emit heat or cold."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"heat"}),": Heat value emitted"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"insulation"}),": Cold insulation provided"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"equippedheat"}),": Heat when equipped"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"range"}),": Range of heating effect"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Creating a heat source\nlocal function MakeHeater(inst)\n    inst:AddComponent("heater")\n    inst.components.heater:SetHeat(15)\n    inst.components.heater:SetRange(10)\n    inst.components.heater.equippedheat = 10\n    inst.components.heater.insulation = 40\nend\n\n-- Checking if player is warm\nlocal function IsPlayerWarm(player, heater)\n    if heater.components.heater ~= nil then\n        local heat = heater.components.heater:GetHeat()\n        local range = heater.components.heater:GetRange()\n        local distance = player:GetDistanceSqToInst(heater)\n        return distance <= range * range and heat > 0\n    end\n    return false\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"weather",children:"Weather"}),"\n",(0,s.jsx)(e.p,{children:"Controls weather conditions and effects."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"moisture"}),": Current moisture level"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"precipitationrate"}),": Rate of precipitation"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"lightning"}),": Whether lightning is enabled"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"seasonmanager"}),": Controls season-specific weather"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Manipulating weather\nlocal function ControlWeather(world)\n    if world.components.weather ~= nil then\n        -- Start rain\n        world.components.weather:StartPrecipitation()\n        \n        -- Set precipitation rate\n        world.components.weather.precipitationrate = 0.1\n        \n        -- Enable/disable lightning\n        world.components.weather:EnableLightning(true)\n        \n        -- Get current moisture\n        local moisture = world.components.weather.moisture\n    end\nend\n"})}),"\n",(0,s.jsx)(e.h3,{id:"moisture",children:"Moisture"}),"\n",(0,s.jsx)(e.p,{children:"Handles wetness for entities."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"moisture"}),": Current moisture level"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"maxmoisture"}),": Maximum possible moisture"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"dryrate"}),": Rate at which entity dries"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"inherentdryrate"}),": Base drying rate"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up moisture on an entity\nlocal function SetupMoisture(inst)\n    inst:AddComponent("moisture")\n    inst.components.moisture.maxmoisture = 100\n    inst.components.moisture.dryrate = 0.1\n    \n    -- Make entity wet\n    inst.components.moisture:DoDelta(50)\n    \n    -- Check if entity is wet\n    if inst.components.moisture:GetMoisture() > 35 then\n        print("Entity is wet!")\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"resource-components",children:"Resource Components"}),"\n",(0,s.jsx)(e.h3,{id:"harvestable",children:"Harvestable"}),"\n",(0,s.jsx)(e.p,{children:"Allows entities to be harvested for resources."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"product"}),": Item produced when harvested"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"productregen"}),": Time to regenerate product"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"maxproduce"}),": Maximum number of items produced"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onharvest"}),": Function called when harvested"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Making a berry bush harvestable\nlocal function MakeHarvestable(inst)\n    inst:AddComponent("harvestable")\n    inst.components.harvestable:SetUp("berries", 3)\n    inst.components.harvestable.productregen = TUNING.BERRY_REGROW_TIME\n    inst.components.harvestable.maxproduce = 3\n    \n    inst.components.harvestable.onharvestfn = function(inst, picker)\n        -- What happens when harvested\n        inst.AnimState:PlayAnimation("picked")\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"preserver",children:"Preserver"}),"\n",(0,s.jsx)(e.p,{children:"Slows down spoilage of perishable items."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"preservefn"}),": Function to calculate preservation multiplier"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"preserveperishable"}),": Whether it preserves perishable items"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Creating an icebox preserver\nlocal function MakeIcebox(inst)\n    inst:AddComponent("preserver")\n    inst.components.preserver:SetPerishRateMultiplier(function(inst, item)\n        -- Ice Box preserves food 4x longer\n        if item.components.perishable ~= nil then\n            return TUNING.ICEBOX_PERISH_RATE_MULTIPLIER\n        end\n        return 1\n    end)\nend\n\n-- Using a preserver\nlocal function StoreItemInPreserver(item, container)\n    if container.components.preserver ~= nil and item.components.perishable ~= nil then\n        -- Item will perish slower in this container\n        container.components.container:GiveItem(item)\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"rechargeable",children:"Rechargeable"}),"\n",(0,s.jsx)(e.p,{children:"Allows entities to recharge over time."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"charge"}),": Current charge level"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"maxcharge"}),": Maximum charge capacity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"chargetime"}),": Time to fully recharge"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onchargedfn"}),": Function called when fully charged"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up a rechargeable item\nlocal function MakeRechargeable(inst)\n    inst:AddComponent("rechargeable")\n    inst.components.rechargeable:SetMaxCharge(100)\n    inst.components.rechargeable:SetRate(1) -- 1 point per second\n    inst.components.rechargeable:SetChargeTime(100) -- 100 seconds to full charge\n    \n    inst.components.rechargeable:SetOnChargedFn(function(inst)\n        -- Do something when fully charged\n        print("Item fully charged!")\n    end)\nend\n\n-- Using charge\nif inst.components.rechargeable ~= nil then\n    local current_charge = inst.components.rechargeable:GetCharge()\n    if current_charge >= 50 then\n        inst.components.rechargeable:Discharge(50)\n        -- Use 50 charge points\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"character-components",children:"Character Components"}),"\n",(0,s.jsx)(e.h3,{id:"talker",children:"Talker"}),"\n",(0,s.jsx)(e.p,{children:"Enables entities to display speech bubbles."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"font"}),": Font used for speech text"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"fontsize"}),": Size of the text"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"offset"}),": Position offset for speech bubble"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"colour"}),": Text color"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up a talker\nlocal function MakeTalker(inst)\n    inst:AddComponent("talker")\n    inst.components.talker.fontsize = 35\n    inst.components.talker.font = TALKINGFONT\n    inst.components.talker.offset = Vector3(0, -400, 0)\n    inst.components.talker.colour = Vector3(1, 1, 1)\nend\n\n-- Making an entity speak\nlocal function SaySomething(inst, text)\n    if inst.components.talker ~= nil then\n        inst.components.talker:Say(text)\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"follower",children:"Follower"}),"\n",(0,s.jsx)(e.p,{children:"Allows entities to follow other entities."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"leader"}),": Entity being followed"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"followdistance"}),": Target distance to maintain"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"followvehicle"}),": Whether to follow vehicles"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up a follower\nlocal function MakeFollower(inst)\n    inst:AddComponent("follower")\n    inst.components.follower.followdistance = 3\n    inst.components.follower.followvehicle = true\nend\n\n-- Making an entity follow the player\nlocal function StartFollowing(inst, player)\n    if inst.components.follower ~= nil then\n        inst.components.follower:SetLeader(player)\n    end\nend\n\n-- Stop following\nlocal function StopFollowing(inst)\n    if inst.components.follower ~= nil then\n        inst.components.follower:StopFollowing()\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"birdattractor",children:"Birdattractor"}),"\n",(0,s.jsx)(e.p,{children:"Attracts birds to the entity."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"radius"}),": Attraction radius"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"maxbirds"}),": Maximum birds attracted"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"spawntime"}),": Time between spawning birds"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Creating a bird attractor\nlocal function MakeBirdAttractor(inst)\n    inst:AddComponent("birdattractor")\n    inst.components.birdattractor.radius = 20\n    inst.components.birdattractor.maxbirds = 4\n    inst.components.birdattractor.spawntime = {min=10, max=20}\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"crafting-components",children:"Crafting Components"}),"\n",(0,s.jsx)(e.h3,{id:"prototyper",children:"Prototyper"}),"\n",(0,s.jsx)(e.p,{children:"Allows crafting of higher-tier recipes when nearby."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"trees"}),": Tech tree levels provided"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onturnon"}),": Function called when turned on"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onturnoff"}),": Function called when turned off"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up a science machine\nlocal function MakeScienceMachine(inst)\n    inst:AddComponent("prototyper")\n    inst.components.prototyper.trees = {SCIENCE = 1}\n    \n    inst.components.prototyper.onturnon = function(inst)\n        inst.AnimState:PlayAnimation("idle_on")\n    end\n    \n    inst.components.prototyper.onturnoff = function(inst)\n        inst.AnimState:PlayAnimation("idle_off")\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"deployable",children:"Deployable"}),"\n",(0,s.jsx)(e.p,{children:"Allows items to be deployed as structures or placed objects."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"ondeploy"}),": Function called when deployed"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"deploymode"}),": How the item is deployed"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"deploytarget"}),": Valid deployment target tags"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Making an item deployable\nlocal function MakeDeployable(inst)\n    inst:AddComponent("deployable")\n    inst.components.deployable.ondeploy = function(inst, pt, deployer)\n        -- Create the deployed object\n        local fire = SpawnPrefab("campfire")\n        fire.Transform:SetPosition(pt.x, pt.y, pt.z)\n        \n        -- Remove the item\n        inst:Remove()\n    end\n    inst.components.deployable:SetDeployMode(DEPLOYMODE.PLANT)\n    inst.components.deployable:SetDeploySpacing(DEPLOYSPACING.DEFAULT)\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"constructionsite",children:"Constructionsite"}),"\n",(0,s.jsx)(e.p,{children:"Represents a structure being built."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"constructionprefab"}),": Prefab to create when construction is complete"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"progress"}),": Current construction progress"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"materials"}),": Materials required to complete"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up a construction site\nlocal function MakeConstructionSite(inst)\n    inst:AddComponent("constructionsite")\n    inst.components.constructionsite:SetConstructionPrefab("tent")\n    \n    -- Define required materials\n    inst.components.constructionsite:AddMaterial("cutgrass", 6)\n    inst.components.constructionsite:AddMaterial("twigs", 4)\n    \n    -- Construction complete callback\n    inst.components.constructionsite:SetOnConstructedFn(function(inst, builder)\n        -- Do something when construction is complete\n    end)\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"other-important-components",children:"Other Important Components"}),"\n",(0,s.jsx)(e.h3,{id:"light",children:"Light"}),"\n",(0,s.jsx)(e.p,{children:"Emits light."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"radius"}),": Light radius"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"intensity"}),": Light intensity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"falloff"}),": Light falloff rate"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"colour"}),": Light color"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Adding light to an entity\nlocal function MakeLight(inst)\n    inst:AddComponent("light")\n    inst.components.light:SetRadius(5)\n    inst.components.light:SetIntensity(0.8)\n    inst.components.light:SetFalloff(0.7)\n    inst.components.light:SetColour(235/255, 165/255, 12/255)\n    inst.components.light:Enable(true)\nend\n\n-- Changing light properties\nlocal function PulsateLight(inst)\n    if inst.components.light ~= nil then\n        local radius = inst.components.light:GetRadius()\n        inst.components.light:SetRadius(radius * 0.9)\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"timer",children:"Timer"}),"\n",(0,s.jsx)(e.p,{children:"Manages timed events."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"timers"}),": List of active timers"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"timerfn"}),": Functions called when timers expire"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Using timers\nlocal function SetupTimer(inst)\n    inst:AddComponent("timer")\n    \n    -- Start a timer\n    inst.components.timer:StartTimer("recharge", 60)\n    \n    -- Check if timer is active\n    if inst.components.timer:TimerExists("recharge") then\n        local time_left = inst.components.timer:GetTimeLeft("recharge")\n        print("Time left: " .. time_left)\n    end\n    \n    -- Set a callback for when timer ends\n    inst:ListenForEvent("timerdone", function(inst, data)\n        if data.name == "recharge" then\n            -- Timer is done, do something\n            print("Recharge timer completed!")\n        end\n    end)\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"tiletracker",children:"Tiletracker"}),"\n",(0,s.jsx)(e.p,{children:"Tracks tiles that the entity is on or near."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"ontileschanged"}),": Function called when tiles change"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"trackedtiles"}),": List of currently tracked tiles"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up tile tracking\nlocal function SetupTileTracker(inst)\n    inst:AddComponent("tiletracker")\n    \n    inst.components.tiletracker:SetOnTileChangedFn(function(inst, new_tile)\n        -- Do something when tile changes\n        print("Entity moved to a new tile type: " .. tostring(new_tile))\n    end)\n    \n    -- Start tracking tiles\n    inst.components.tiletracker:Start()\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"drownable",children:"Drownable"}),"\n",(0,s.jsx)(e.p,{children:"Makes entities able to drown in water."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"drowntime"}),": Time until drowning occurs"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"sinktimer"}),": Current sink timer"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"splashresistance"}),": Resistance to splashing"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Making an entity drownable\nlocal function MakeDrownable(inst)\n    inst:AddComponent("drownable")\n    inst.components.drownable.drowntime = 6\n    inst.components.drownable.splashresistance = 0\n    \n    -- Set callbacks\n    inst.components.drownable:SetOnDrownFn(function(inst)\n        -- What happens when entity drowns\n    end)\n    \n    inst.components.drownable:SetOnStartDrownFn(function(inst)\n        -- What happens when entity starts to drown\n    end)\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"grogginess",children:"Grogginess"}),"\n",(0,s.jsx)(e.p,{children:"Controls stun and grogginess effects."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"groggyness"}),": Current grogginess level"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"knockouttime"}),": Time to remain knocked out"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"recoverrate"}),": Rate of recovery from grogginess"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up grogginess\nlocal function SetupGrogginess(inst)\n    inst:AddComponent("grogginess")\n    inst.components.grogginess.knockouttime = 4\n    inst.components.grogginess.recoverrate = 1\n    \n    -- Make entity groggy\n    inst.components.grogginess:AddGrogginess(5)\n    \n    -- Check if knocked out\n    if inst.components.grogginess:IsKnockedOut() then\n        print("Entity is knocked out!")\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"resurrector",children:"Resurrector"}),"\n",(0,s.jsx)(e.p,{children:"Allows resurrection of dead players."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onresurrect"}),": Function called on resurrection"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"penalty"}),": Health penalty applied after resurrection"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up a resurrection item\nlocal function MakeResurrector(inst)\n    inst:AddComponent("resurrector")\n    \n    inst.components.resurrector.onresurrectfn = function(inst, user)\n        -- What happens when player is resurrected\n        inst:Remove()\n    end\n    \n    inst.components.resurrector.penalty = 0.25 -- 25% health penalty\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"wisecracker",children:"Wisecracker"}),"\n",(0,s.jsx)(e.p,{children:"Enables entity to make comments about surroundings."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"sayings"}),": Table of possible comments"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"timesincewisequip"}),": Time since last comment"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up wisecracker\nlocal function SetupWisecracker(inst)\n    inst:AddComponent("wisecracker")\n    inst.components.wisecracker.sayings = {\n        "What a lovely day!",\n        "I\'m hungry...",\n        "Something is watching me..."\n    }\nend\n\n-- Making a comment\nlocal function MakeComment(inst, event)\n    if inst.components.wisecracker ~= nil then\n        inst.components.wisecracker:Crack(event)\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"teleporter",children:"Teleporter"}),"\n",(0,s.jsx)(e.p,{children:"Allows teleportation to other locations."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"targetpos"}),": Destination position"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"ontelefn"}),": Function called when teleporting"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"offsettarget"}),": Offset for teleport location"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up a teleporter\nlocal function MakeTeleporter(inst)\n    inst:AddComponent("teleporter")\n    \n    -- Set target position\n    inst.components.teleporter.targetpos = Vector3(0, 0, 0)\n    \n    -- Set teleport function\n    inst.components.teleporter.ontelefn = function(inst, obj)\n        -- Do something when teleporting\n        print(obj.name .. " is being teleported!")\n    end\n    \n    -- Set offset\n    inst.components.teleporter.offsettarget = Vector3(2, 0, 0)\nend\n\n-- Teleporting an entity\nlocal function TeleportEntity(teleporter, entity)\n    if teleporter.components.teleporter ~= nil then\n        teleporter.components.teleporter:Activate(entity)\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"murderable",children:"Murderable"}),"\n",(0,s.jsx)(e.p,{children:"Allows entity to be murdered by players."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onmurder"}),": Function called when murdered"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"murdersound"}),": Sound played when murdered"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Setting up a murderable entity\nlocal function MakeMurderable(inst)\n    inst:AddComponent("murderable")\n    \n    inst.components.murderable.onmurderfn = function(inst, murderer)\n        -- What happens when murdered\n        SpawnPrefab("smallmeat").Transform:SetPosition(inst.Transform:GetWorldPosition())\n        inst:Remove()\n    end\n    \n    inst.components.murderable.murdersound = "dontstarve/rabbit/scream"\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"shard_player",children:"Shard_player"}),"\n",(0,s.jsx)(e.p,{children:"Handles player transitions between shards (server instances)."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"shard"}),": Current shard ID"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"migrationdata"}),": Data for migration between shards"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Using shard player component\nlocal function HandleShardMigration(player)\n    if player.components.shard_player ~= nil then\n        -- Prepare for migration\n        player.components.shard_player:SetMigrationData({\n            health = player.components.health.currenthealth,\n            hunger = player.components.hunger.current,\n            sanity = player.components.sanity.current\n        })\n        \n        -- Migrate to another shard\n        player.components.shard_player:DoMigration(TheWorld.meta.shardid + 1)\n    end\nend\n"})}),"\n",(0,s.jsx)(e.h3,{id:"tradable",children:"Tradable"}),"\n",(0,s.jsx)(e.p,{children:"Makes an item tradable to NPCs."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"goldvalue"}),": Value in gold nuggets"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"rocktribute"}),": Whether usable as rock tribute"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"tradeable"}),": Whether currently tradable"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Making an item tradable\nlocal function MakeTradable(inst)\n    inst:AddComponent("tradable")\n    inst.components.tradable.goldvalue = 5\n    inst.components.tradable.rocktribute = true\n    \n    -- Set trade function\n    inst.components.tradable:SetOnTradeFn(function(inst, trader, goldvalue)\n        -- What happens when traded\n        print("Item traded for " .. tostring(goldvalue) .. " gold!")\n    end)\nend\n'})})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var i=t(6540);const s={},o=i.createContext(s);function r(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);