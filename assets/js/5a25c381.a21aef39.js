"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9937],{3552:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/examples/full-character-example","title":"Full Character Example","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/examples/full-character-example.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/full-character-example","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/full-character-example","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"full-character-example","title":"Full Character Example","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Character Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/character-mod"},"next":{"title":"Recipe Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/recipe-mod"}}');var a=t(4848),r=t(8453);const o={id:"full-character-example",title:"Full Character Example",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z")},s="Full Character Example",c={},l=[{value:"Project Structure",id:"project-structure",level:2},{value:"Step 1: Create modinfo.lua",id:"step-1-create-modinfolua",level:2},{value:"Step 2: Create modmain.lua",id:"step-2-create-modmainlua",level:2},{value:"Step 3: Create Character Prefab",id:"step-3-create-character-prefab",level:2},{value:"Step 4: Create No-Character Variant",id:"step-4-create-no-character-variant",level:2},{value:"Step 5: Create Custom Component",id:"step-5-create-custom-component",level:2},{value:"Step 6: Create Character Speech",id:"step-6-create-character-speech",level:2},{value:"Step 7: Create Junior Axe Prefab",id:"step-7-create-junior-axe-prefab",level:2},{value:"Step 8: Art Assets",id:"step-8-art-assets",level:2},{value:"Step 9: Testing Your Character",id:"step-9-testing-your-character",level:2},{value:"Common Issues and Troubleshooting",id:"common-issues-and-troubleshooting",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"full-character-example",children:"Full Character Example"})}),"\n",(0,a.jsx)(n.p,{children:"This guide provides a complete example of creating a custom character for Don't Starve Together. We'll create a character named \"Woodie Jr.\" who has unique abilities related to trees and woodcutting."}),"\n",(0,a.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsx)(n.p,{children:"A complete character mod typically has the following structure:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"modmain.lua\nmodinfo.lua\nscripts/\n  prefabs/\n    woodiejr.lua\n    woodiejr_none.lua\n  components/\n    woodcutter.lua\nanim/\n  woodiejr.zip\n  woodiejr_avatar.xml\n  woodiejr_avatar.tex\nimages/\n  avatars/\n    avatar_woodiejr.tex\n    avatar_woodiejr.xml\n  bigportraits/\n    woodiejr.tex\n    woodiejr.xml\n  map_icons/\n    woodiejr.tex\n    woodiejr.xml\n  selectscreen_portraits/\n    woodiejr.tex\n    woodiejr.xml\n  selectscreen_portraits/\n    woodiejr_silho.tex\n    woodiejr_silho.xml\nbigportraits/\n  woodiejr.xml\n  woodiejr.tex\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-1-create-modinfolua",children:"Step 1: Create modinfo.lua"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"modinfo.lua"})," file contains metadata about your mod:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'name = "Woodie Jr."\ndescription = "A young lumberjack with tree-related abilities."\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\ndont_starve_compatible = false\nreign_of_giants_compatible = false\nshipwrecked_compatible = false\n\n-- Character mods need to be client and server compatible\nclient_only_mod = false\nall_clients_require_mod = true\n\n-- Icon for the mod\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Character selection screen\nserver_filter_tags = {"character", "woodiejr"}\n\n-- Configuration options\nconfiguration_options = {\n    {\n        name = "WOODCUTTING_BONUS",\n        label = "Woodcutting Bonus",\n        options = {\n            {description = "25%", data = 0.25},\n            {description = "50%", data = 0.5, default = true},\n            {description = "75%", data = 0.75},\n        },\n        default = 0.5,\n    },\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-2-create-modmainlua",children:"Step 2: Create modmain.lua"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"modmain.lua"})," file is the entry point of your mod:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Assets to preload\nAssets = {\n    -- Character-specific assets\n    Asset("IMAGE", "images/saveslot_portraits/woodiejr.tex"),\n    Asset("ATLAS", "images/saveslot_portraits/woodiejr.xml"),\n\n    Asset("IMAGE", "images/selectscreen_portraits/woodiejr.tex"),\n    Asset("ATLAS", "images/selectscreen_portraits/woodiejr.xml"),\n    Asset("IMAGE", "images/selectscreen_portraits/woodiejr_silho.tex"),\n    Asset("ATLAS", "images/selectscreen_portraits/woodiejr_silho.xml"),\n\n    Asset("IMAGE", "bigportraits/woodiejr.tex"),\n    Asset("ATLAS", "bigportraits/woodiejr.xml"),\n\n    Asset("IMAGE", "images/map_icons/woodiejr.tex"),\n    Asset("ATLAS", "images/map_icons/woodiejr.xml"),\n\n    Asset("IMAGE", "images/avatars/avatar_woodiejr.tex"),\n    Asset("ATLAS", "images/avatars/avatar_woodiejr.xml"),\n\n    -- Character-specific animation files\n    Asset("ANIM", "anim/woodiejr.zip"),\n}\n\n-- Add character to mod character list\nAddModCharacter("woodiejr", "MALE")\n\n-- Configuration\nlocal WOODCUTTING_BONUS = GetModConfigData("WOODCUTTING_BONUS")\n\n-- Add custom strings\nSTRINGS.NAMES.WOODIEJR = "Woodie Jr."\nSTRINGS.CHARACTER_TITLES.woodiejr = "The Young Lumberjack"\nSTRINGS.CHARACTER_DESCRIPTIONS.woodiejr = "\u2022 Has a special affinity for trees\\n\u2022 Cuts trees faster\\n\u2022 Takes less damage from falling trees\\n\u2022 Gets hungry faster when not near trees"\nSTRINGS.CHARACTER_QUOTES.woodiejr = "\\"I\'m gonna be the best lumberjack ever!\\""\nSTRINGS.CHARACTER_SURVIVABILITY.woodiejr = "Slim"\n\n-- Character-specific speech\nSTRINGS.CHARACTERS.WOODIEJR = require "speech_woodiejr"\n\n-- Add custom recipes\nlocal RECIPETABS = GLOBAL.RECIPETABS\nlocal TECH = GLOBAL.TECH\nlocal Recipe = GLOBAL.Recipe\nlocal Ingredient = GLOBAL.Ingredient\n\n-- Add a special axe recipe for Woodie Jr.\nRecipe("junior_axe", \n    {Ingredient("twigs", 1), Ingredient("flint", 1)}, \n    RECIPETABS.TOOLS, \n    TECH.NONE, \n    nil, nil, nil, nil, "woodiejr")\n\n-- Add character-specific tuning\nTUNING.WOODIEJR_HUNGER_RATE = TUNING.WILSON_HUNGER_RATE * 1.25\nTUNING.WOODIEJR_WOODCUTTING_BONUS = WOODCUTTING_BONUS\n\n-- Add character-specific component postinit\nAddComponentPostInit("woodcutter", function(self, inst)\n    if inst:HasTag("woodiejr") then\n        self.efficiency = self.efficiency * (1 + TUNING.WOODIEJR_WOODCUTTING_BONUS)\n    end\nend)\n\n-- Add character-specific prefab postinit\nAddPrefabPostInit("treeguard", function(inst)\n    inst:AddComponent("friendlevels")\n    \n    local function OnAttacked(inst, data)\n        if data.attacker and data.attacker:HasTag("woodiejr") then\n            -- Woodie Jr. has a chance to pacify treeguards\n            if math.random() < 0.5 then\n                inst.components.combat:SetTarget(nil)\n                inst:PushEvent("makefriend", {player = data.attacker})\n            end\n        end\n    end\n    \n    inst:ListenForEvent("attacked", OnAttacked)\nend)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-3-create-character-prefab",children:"Step 3: Create Character Prefab"}),"\n",(0,a.jsxs)(n.p,{children:["Create the file ",(0,a.jsx)(n.code,{children:"scripts/prefabs/woodiejr.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local MakePlayerCharacter = require "prefabs/player_common"\n\nlocal assets = {\n    Asset("SCRIPT", "scripts/prefabs/player_common.lua"),\n}\n\n-- Custom starting inventory\nlocal start_inv = {\n    "junior_axe",\n    "pinecone",\n}\n\n-- When the character is revived from ghost\nlocal function onbecamehuman(inst)\n    -- Set speed when reviving from ghost (optional)\n    inst.components.locomotor:SetExternalSpeedMultiplier(inst, "woodiejr_speed_mod", 1)\n}\n\nlocal function onbecameghost(inst)\n    -- Remove speed modifier when becoming a ghost\n    inst.components.locomotor:RemoveExternalSpeedMultiplier(inst, "woodiejr_speed_mod")\n}\n\n-- When loading or spawning the character\nlocal function onload(inst)\n    inst:ListenForEvent("ms_respawnedfromghost", onbecamehuman)\n    inst:ListenForEvent("ms_becameghost", onbecameghost)\n\n    if inst:HasTag("playerghost") then\n        onbecameghost(inst)\n    else\n        onbecamehuman(inst)\n    end\nend\n\n-- This function customizes the character\'s stats\nlocal function CustomizationFn(inst)\n    -- choose which sounds this character will play\n    inst.soundsname = "woodie"\n    \n    -- Minimap icon\n    inst.MiniMapEntity:SetIcon("woodiejr.tex")\n    \n    -- Add character-specific tags\n    inst:AddTag("woodiejr")\n    inst:AddTag("treefriend")\n    \n    -- Stats    \n    inst.components.health:SetMaxHealth(150)\n    inst.components.hunger:SetMax(150)\n    inst.components.sanity:SetMax(200)\n    \n    -- Hunger rate changes based on proximity to trees\n    inst:DoPeriodicTask(1, function()\n        local x, y, z = inst.Transform:GetWorldPosition()\n        local ents = TheSim:FindEntities(x, y, z, 10, {"tree"})\n        \n        if #ents >= 3 then\n            -- Near trees, normal hunger rate\n            inst.components.hunger.hungerrate = TUNING.WILSON_HUNGER_RATE\n        else\n            -- Away from trees, higher hunger rate\n            inst.components.hunger.hungerrate = TUNING.WOODIEJR_HUNGER_RATE\n        end\n    end)\n    \n    -- Tree damage resistance\n    inst:ListenForEvent("attacked", function(inst, data)\n        if data.attacker and data.attacker:HasTag("tree") then\n            -- Take 50% less damage from trees\n            data.damage = data.damage * 0.5\n        end\n    end)\n    \n    -- Better at chopping\n    inst:ListenForEvent("equip", function(inst, data)\n        if data.item and data.item.components.tool and data.item.components.tool:CanDoAction(ACTIONS.CHOP) then\n            -- Apply woodcutting speed bonus\n            inst.components.worker:SetEfficiencyMultiplier(ACTIONS.CHOP, 1 + TUNING.WOODIEJR_WOODCUTTING_BONUS)\n        end\n    end)\n    \n    inst:ListenForEvent("unequip", function(inst, data)\n        if data.item and data.item.components.tool and data.item.components.tool:CanDoAction(ACTIONS.CHOP) then\n            -- Remove woodcutting speed bonus\n            inst.components.worker:SetEfficiencyMultiplier(ACTIONS.CHOP, 1)\n        end\n    end)\n    \n    -- Add a custom component if needed\n    if not inst.components.woodcutter then\n        inst:AddComponent("woodcutter")\n    end\nend\n\n-- This initializes for the server only\nlocal master_postinit = function(inst)\n    -- Set starting inventory\n    inst.starting_inventory = start_inv\n    \n    -- Choose character\'s stats\n    inst.CustomizationFn = CustomizationFn\n    \n    -- Set up character\n    if inst.components.eater then\n        -- Make character vegetarian\n        inst.components.eater:SetDiet({FOODTYPE.VEGGIE}, {FOODTYPE.MEAT})\n    end\n    \n    -- Uncomment to add character-specific crafting recipes\n    -- inst:AddComponent("builder")\n    -- inst.components.builder.bonus_tech_level = { SCIENCE = 1 }\n    \n    -- Register event listeners\n    inst:ListenForEvent("onhitother", function(inst, data)\n        if data.target and data.target:HasTag("tree") and not data.target:HasTag("stump") then\n            -- Chance to get extra logs when chopping\n            if math.random() < TUNING.WOODIEJR_WOODCUTTING_BONUS then\n                local log = SpawnPrefab("log")\n                if log then\n                    log.Transform:SetPosition(data.target.Transform:GetWorldPosition())\n                    log.components.inventoryitem:OnDropped()\n                end\n            end\n        end\n    end)\n}\n\n-- This initializes for the client only\nlocal client_postinit = function(inst)\n    -- Set up character portraits\n    inst:ListenForEvent("setowner", function()\n        -- Choose character\'s skin\n        inst:SetPrefabNameOverride("woodiejr")\n        \n        -- Set up character\'s animations\n        local skin_name = inst:GetSkinName()\n        if skin_name == nil then\n            -- Default skin\n            inst.components.playeravatardata:SetData("woodiejr")\n        else\n            -- Custom skin if available\n            inst.components.playeravatardata:SetData(skin_name)\n        end\n    end)\nend\n\n-- Create the character\nreturn MakePlayerCharacter("woodiejr", prefabs, assets, common_postinit, master_postinit, client_postinit)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-4-create-no-character-variant",children:"Step 4: Create No-Character Variant"}),"\n",(0,a.jsxs)(n.p,{children:["Create the file ",(0,a.jsx)(n.code,{children:"scripts/prefabs/woodiejr_none.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    \n    --[[Non-networked entity]]\n    inst.entity:SetCanSleep(false)\n    inst.persists = false\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    return inst\nend\n\nreturn Prefab("woodiejr_none", fn)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-5-create-custom-component",children:"Step 5: Create Custom Component"}),"\n",(0,a.jsxs)(n.p,{children:["Create the file ",(0,a.jsx)(n.code,{children:"scripts/components/woodcutter.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local Woodcutter = Class(function(self, inst)\n    self.inst = inst\n    self.efficiency = 1.0\n    self.tree_friend_level = 0\n    self.trees_chopped = 0\nend)\n\nfunction Woodcutter:OnChopTree(tree)\n    self.trees_chopped = self.trees_chopped + 1\n    \n    -- Every 10 trees chopped increases tree friend level\n    if self.trees_chopped >= 10 then\n        self.trees_chopped = 0\n        self.tree_friend_level = self.tree_friend_level + 1\n        \n        -- Announce milestone\n        if self.inst.components.talker then\n            self.inst.components.talker:Say("I\'ve become a better friend to the trees!")\n        end\n        \n        -- Increase woodcutting efficiency\n        self.efficiency = 1.0 + (self.tree_friend_level * 0.05)\n    end\n    \n    -- Chance to get tree seeds\n    if math.random() < 0.3 + (self.tree_friend_level * 0.05) then\n        local seed\n        if tree:HasTag("evergreen") then\n            seed = SpawnPrefab("pinecone")\n        elseif tree:HasTag("deciduoustree") then\n            seed = SpawnPrefab("acorn")\n        elseif tree:HasTag("mushtree") then\n            seed = SpawnPrefab("spore_medium")\n        end\n        \n        if seed then\n            self.inst.components.inventory:GiveItem(seed)\n            if self.inst.components.talker then\n                self.inst.components.talker:Say("A gift from the forest!")\n            end\n        end\n    end\nend\n\nfunction Woodcutter:GetEfficiency()\n    return self.efficiency\nend\n\nfunction Woodcutter:GetTreeFriendLevel()\n    return self.tree_friend_level\nend\n\nfunction Woodcutter:OnSave()\n    return {\n        tree_friend_level = self.tree_friend_level,\n        trees_chopped = self.trees_chopped\n    }\nend\n\nfunction Woodcutter:OnLoad(data)\n    if data then\n        self.tree_friend_level = data.tree_friend_level or 0\n        self.trees_chopped = data.trees_chopped or 0\n        self.efficiency = 1.0 + (self.tree_friend_level * 0.05)\n    end\nend\n\nreturn Woodcutter\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-6-create-character-speech",children:"Step 6: Create Character Speech"}),"\n",(0,a.jsxs)(n.p,{children:["Create the file ",(0,a.jsx)(n.code,{children:"scripts/speech_woodiejr.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'return {\n    -- Generic speech\n    ACTIONFAIL = {\n        REPAIR = {\n            WRONGPIECE = "That doesn\'t look right.",\n        },\n        BUILD = {\n            MOUNTED = "I can\'t build while riding.",\n            HASPET = "I\'ve already got a friend.",\n        },\n    },\n    \n    -- Character-specific speech\n    DESCRIBE = {\n        EVERGREEN = {\n            GENERIC = "Hello, tree friend!",\n            BURNING = "No! The tree is burning!",\n            BURNT = "Poor tree...",\n            CHOPPED = "Sorry, tree friend. I needed the wood.",\n        },\n        EVERGREEN_SPARSE = {\n            GENERIC = "This tree looks sad.",\n            BURNING = "No! The tree is burning!",\n            BURNT = "Poor tree...",\n            CHOPPED = "Sorry, tree friend. I needed the wood.",\n        },\n        DECIDUOUSTREE = {\n            GENERIC = "What a lovely tree!",\n            BURNING = "No! The tree is burning!",\n            BURNT = "Poor tree...",\n            CHOPPED = "Sorry, tree friend. I needed the wood.",\n        },\n        AXE = "My trusty tree-cutting friend!",\n        LUCY = "Dad\'s axe talks too much.",\n        LOG = "I got some wood!",\n        TREEGUARD = "The trees are mad at me!",\n        PINECONE = "I should plant this!",\n        PINECONE_SAPLING = "Grow big and strong!",\n    },\n    \n    -- Announce when character performs actions\n    ANNOUNCE_CHOPPING_TREE = {\n        "Chop chop!",\n        "Sorry, tree!",\n        "I need this wood!",\n    },\n    ANNOUNCE_PLANTING = {\n        "Grow big and strong!",\n        "I\'ll visit you when you\'re all grown up!",\n        "One day you\'ll be a mighty tree!",\n    },\n    ANNOUNCE_HUNGRY = "My tummy is rumbling!",\n    ANNOUNCE_COLD = "Brrr! I need a campfire!",\n    ANNOUNCE_HOT = "Phew! It\'s hot!",\n    \n    -- Reactions to finding items\n    ANNOUNCE_FOUND_WOOD = "Wood! My favorite!",\n    ANNOUNCE_FOUND_PINECONE = "A baby tree!",\n    \n    -- Character-specific reactions\n    ANNOUNCE_NEAR_TREES = "The trees are my friends!",\n    ANNOUNCE_AWAY_FROM_TREES = "I miss the trees...",\n    \n    -- Battlecry\n    BATTLECRY = {\n        GENERIC = "I\'ll protect the forest!",\n        PIG = "Sorry piggy!",\n        PREY = "I don\'t want to hurt you!",\n        SPIDER = "Get away from my trees!",\n        TREEGUARD = "Can\'t we be friends?",\n    },\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-7-create-junior-axe-prefab",children:"Step 7: Create Junior Axe Prefab"}),"\n",(0,a.jsxs)(n.p,{children:["Create the file ",(0,a.jsx)(n.code,{children:"scripts/prefabs/junior_axe.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local assets =\n{\n    Asset("ANIM", "anim/junior_axe.zip"),\n    Asset("ANIM", "anim/swap_junior_axe.zip"),\n}\n\nlocal function onequip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_object", "swap_junior_axe", "swap_axe")\n    owner.AnimState:Show("ARM_carry")\n    owner.AnimState:Hide("ARM_normal")\n    \n    -- Special bonus for Woodie Jr.\n    if owner:HasTag("woodiejr") then\n        inst.components.tool:SetEffectiveness(ACTIONS.CHOP, 1.5)\n    end\nend\n\nlocal function onunequip(inst, owner)\n    owner.AnimState:Hide("ARM_carry")\n    owner.AnimState:Show("ARM_normal")\n    \n    -- Reset effectiveness\n    inst.components.tool:SetEffectiveness(ACTIONS.CHOP, 1.0)\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    MakeInventoryPhysics(inst)\n\n    inst.AnimState:SetBank("junior_axe")\n    inst.AnimState:SetBuild("junior_axe")\n    inst.AnimState:PlayAnimation("idle")\n\n    inst:AddTag("sharp")\n    inst:AddTag("tool")\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    inst.entity:SetPristine()\n\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem:SetSinks(true)\n\n    inst:AddComponent("tool")\n    inst.components.tool:SetAction(ACTIONS.CHOP, 1)\n\n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(150)\n    inst.components.finiteuses:SetUses(150)\n    inst.components.finiteuses:SetOnFinished(inst.Remove)\n    inst.components.finiteuses:SetConsumption(ACTIONS.CHOP, 1)\n\n    inst:AddComponent("weapon")\n    inst.components.weapon:SetDamage(20)\n\n    inst:AddComponent("inspectable")\n\n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(onequip)\n    inst.components.equippable:SetOnUnequip(onunequip)\n\n    MakeHauntableLaunch(inst)\n\n    return inst\nend\n\nreturn Prefab("junior_axe", fn, assets)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-8-art-assets",children:"Step 8: Art Assets"}),"\n",(0,a.jsx)(n.p,{children:"For a complete character, you'll need to create various art assets:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Character animations in ",(0,a.jsx)(n.code,{children:"anim/woodiejr.zip"})]}),"\n",(0,a.jsx)(n.li,{children:"Avatar images for the HUD"}),"\n",(0,a.jsx)(n.li,{children:"Portrait images for character selection"}),"\n",(0,a.jsx)(n.li,{children:"Map icon"}),"\n",(0,a.jsx)(n.li,{children:"Silhouette for character selection"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"These require using Spriter or similar animation tools and image editing software like Photoshop or GIMP."}),"\n",(0,a.jsx)(n.h2,{id:"step-9-testing-your-character",children:"Step 9: Testing Your Character"}),"\n",(0,a.jsx)(n.p,{children:"To test your character:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Place your mod folder in the Don't Starve Together mods directory"}),"\n",(0,a.jsx)(n.li,{children:"Enable the mod in the game's mod menu"}),"\n",(0,a.jsx)(n.li,{children:"Start a new game and select your character"}),"\n",(0,a.jsx)(n.li,{children:"Test all the character's special abilities and traits"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"common-issues-and-troubleshooting",children:"Common Issues and Troubleshooting"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Character doesn't appear in selection screen"}),": Check that all required assets are properly loaded in modmain.lua"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Animations not working"}),": Verify that your animation files are correctly formatted and referenced"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Custom abilities not working"}),": Check for errors in the console and verify component interactions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Speech not appearing"}),": Make sure speech_woodiejr.lua is properly formatted and required in modmain.lua"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"This example demonstrates a complete character mod with:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Custom stats and abilities"}),"\n",(0,a.jsx)(n.li,{children:"Special interactions with the environment"}),"\n",(0,a.jsx)(n.li,{children:"A unique starting item"}),"\n",(0,a.jsx)(n.li,{children:"Custom speech patterns"}),"\n",(0,a.jsx)(n.li,{children:"A specialized component for tracking character progression"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You can expand on this foundation by adding more unique abilities, custom animations, or additional items specific to your character."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);