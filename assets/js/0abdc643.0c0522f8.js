"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4516],{8261:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/world/worldgen","title":"World Generation API","description":"Tools and systems for procedurally generating game worlds in Don\'t Starve Together.","source":"@site/docs/api-vanilla/world/worldgen.md","sourceDirName":"api-vanilla/world","slug":"/api-vanilla/world/worldgen","permalink":"/dst-api-webdocs/docs/api-vanilla/world/worldgen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"worldgen","title":"World Generation API","sidebar_position":6},"sidebar":"docs","previous":{"title":"Network and World Synchronization","permalink":"/dst-api-webdocs/docs/api-vanilla/world/network"},"next":{"title":"World Settings API","permalink":"/dst-api-webdocs/docs/api-vanilla/world/worldsettings"}}');var o=r(4848),t=r(8453);const i={id:"worldgen",title:"World Generation API",sidebar_position:6},a="World Generation API",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Generation Process",id:"generation-process",level:2},{value:"Key Components",id:"key-components",level:2},{value:"Level Configuration",id:"level-configuration",level:3},{value:"Tasks",id:"tasks",level:3},{value:"Rooms",id:"rooms",level:3},{value:"World Customization",id:"world-customization",level:2},{value:"Special Feature Placement",id:"special-feature-placement",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"world-generation-api",children:"World Generation API"})}),"\n",(0,o.jsx)(n.p,{children:"Tools and systems for procedurally generating game worlds in Don't Starve Together."}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"The World Generation API controls how game worlds are created, including terrain, biomes, and feature placement. It provides the foundation for procedurally generated worlds with various customization options."}),"\n",(0,o.jsx)(n.h2,{id:"generation-process",children:"Generation Process"}),"\n",(0,o.jsx)(n.p,{children:"The world generation process follows these main steps:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Level Selection"}),": Choose a level preset defining overall world characteristics"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Graph Construction"}),": Create a connected graph of tasks and rooms"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Node Population"}),": Fill nodes with terrain types and features"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Terrain Generation"}),": Convert abstract nodes to actual terrain tiles"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Feature Placement"}),": Add structures, resources, and other map features"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,o.jsx)(n.h3,{id:"level-configuration",children:"Level Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Levels define the high-level parameters for world generation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local level = {\n    id = "SURVIVAL_DEFAULT",\n    name = "Default",\n    desc = "The standard Don\'t Starve Together experience.",\n    location = "forest",\n    version = 4,\n    overrides = {\n        season_start = "autumn",\n        wormhole_prefab = "wormhole" \n    },\n    tasks = { "Make a pick", "Resource-rich", "The other side" },\n    optional_tasks = { "Forest hunters", "Befriend the pigs" },\n    numoptionaltasks = 2\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"tasks",children:"Tasks"}),"\n",(0,o.jsx)(n.p,{children:"Tasks represent connected clusters of rooms that form distinct areas:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddTask("Make a pick", {\n    locks = {{LOCKS.NONE, LOCKS.ROCKS}},\n    keys_given = {KEYS.PICKAXE},\n    room_choices = {\n        ["Plain"] = { ["Forest"] = 1, ["Clearing"] = 1 }\n    },\n    room_bg = GROUND.GRASS,\n    background_room = "BGGrass",\n    colour = {r=0, g=1, b=0, a=1}\n})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"rooms",children:"Rooms"}),"\n",(0,o.jsx)(n.p,{children:"Rooms define the contents of specific areas:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddRoom("Forest", {\n    colour = {r=0.1, g=0.8, b=0.1, a=0.3},\n    value = GROUND.FOREST,\n    tags = {"ExitPiece", "Chester_Eyebone"},\n    contents = {\n        distributepercent = 0.3,\n        distributeprefabs = {\n            evergreen = 6,\n            grass = 0.3,\n            sapling = 0.5,\n            flint = 0.05,\n            fireflies = 0.01\n        }\n    }\n})\n'})}),"\n",(0,o.jsx)(n.h2,{id:"world-customization",children:"World Customization"}),"\n",(0,o.jsx)(n.p,{children:"The game allows customization of world generation through several parameters:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Customize world size\nworldgendata.overrides.worldsize = "large"\n\n-- Customize resource distribution\nworldgendata.overrides.boons = "more"\nworldgendata.overrides.trees = "lots"\n\n-- Customize terrain features\nworldgendata.overrides.branching = "most"\nworldgendata.overrides.loop = "never"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"special-feature-placement",children:"Special Feature Placement"}),"\n",(0,o.jsx)(n.p,{children:"Special features like set pieces have dedicated placement systems:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Add a guaranteed set piece\nlevel.ordered_story_setpieces = {\n    "PigKingLayout",\n    "MaxwellThrone"\n}\n\n-- Add potential random set pieces\nlevel.random_set_pieces = {\n    "Chessy_1",\n    "Chessy_2",\n    "Chessy_3",\n    "Chessy_4",\n    "Chessy_5",\n    "Chessy_6"\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Network System"}),": Handles connections between different areas"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lock and Key System"}),": Controls progression through the world"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Room System"}),": Defines individual areas' contents"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Map System"}),": Translates the generation plan into actual terrain"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);