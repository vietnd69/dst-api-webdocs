"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8477],{5525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api-vanilla/core/creating-screens","title":"Creating Screens","description":"In Don\'t Starve Together, screens are full-page UI elements that take over the entire game window. Screens are used for menus, popups, and other full-screen interfaces. This document covers how to create and manage screens in your mods.","source":"@site/docs/api-vanilla/core/creating-screens.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/creating-screens","permalink":"/dst-api-webdocs/docs/api-vanilla/core/creating-screens","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"creating-screens","title":"Creating Screens","sidebar_position":10},"sidebar":"docs","previous":{"title":"Common Widgets","permalink":"/dst-api-webdocs/docs/api-vanilla/core/widgets"},"next":{"title":"UI Events","permalink":"/dst-api-webdocs/docs/api-vanilla/core/ui-events"}}');var o=t(4848),l=t(8453);const r={id:"creating-screens",title:"Creating Screens",sidebar_position:10},i="Creating Screens",c={},a=[{value:"Screen Basics",id:"screen-basics",level:2},{value:"Screen Management",id:"screen-management",level:2},{value:"Screen Lifecycle",id:"screen-lifecycle",level:2},{value:"Input Handling",id:"input-handling",level:2},{value:"Common Screen Types",id:"common-screen-types",level:2},{value:"Popup Screen",id:"popup-screen",level:3},{value:"Menu Screen",id:"menu-screen",level:3},{value:"Form Screen",id:"form-screen",level:3},{value:"Advanced Screen Techniques",id:"advanced-screen-techniques",level:2},{value:"Screen Transitions",id:"screen-transitions",level:3},{value:"Screen with Tabs",id:"screen-with-tabs",level:3},{value:"Scrollable Content Screen",id:"scrollable-content-screen",level:3},{value:"Best Practices for Screen Development",id:"best-practices-for-screen-development",level:2},{value:"Example: Complete Custom Screen",id:"example-complete-custom-screen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"creating-screens",children:"Creating Screens"})}),"\n",(0,o.jsx)(n.p,{children:"In Don't Starve Together, screens are full-page UI elements that take over the entire game window. Screens are used for menus, popups, and other full-screen interfaces. This document covers how to create and manage screens in your mods."}),"\n",(0,o.jsx)(n.h2,{id:"screen-basics",children:"Screen Basics"}),"\n",(0,o.jsxs)(n.p,{children:["Screens are the top-level UI elements in DST. They inherit from the ",(0,o.jsx)(n.code,{children:"Widget"})," class but have special properties for handling input and managing the UI stack."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local Screen = require "widgets/screen"\nlocal Widget = require "widgets/widget"\nlocal Text = require "widgets/text"\n\n-- Create a simple screen\nMyScreen = Class(Screen, function(self)\n    Screen._ctor(self, "MyScreen")\n    \n    -- Create a root widget for all content\n    self.root = self:AddChild(Widget("root"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add content to the root\n    self.title = self.root:AddChild(Text(TITLEFONT, 50, "My Screen"))\n    \n    -- Set default focus\n    self.default_focus = self.title\nend)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"screen-management",children:"Screen Management"}),"\n",(0,o.jsxs)(n.p,{children:["Screens are managed by the ",(0,o.jsx)(n.code,{children:"TheFrontEnd"})," object, which maintains a stack of screens:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Push a new screen onto the stack\nTheFrontEnd:PushScreen(MyScreen())\n\n-- Pop the top screen\nTheFrontEnd:PopScreen()\n\n-- Replace all screens with a new one\nTheFrontEnd:SetScreen(MyScreen())\n\n-- Get the currently active screen\nlocal current_screen = TheFrontEnd:GetActiveScreen()\n"})}),"\n",(0,o.jsx)(n.h2,{id:"screen-lifecycle",children:"Screen Lifecycle"}),"\n",(0,o.jsx)(n.p,{children:"Screens have several lifecycle methods that you can override:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function MyScreen:OnBecomeActive()\n    Screen.OnBecomeActive(self)\n    -- Called when this screen becomes the active screen\n    -- Good place to initialize dynamic content\nend\n\nfunction MyScreen:OnBecomeInactive()\n    Screen.OnBecomeInactive(self)\n    -- Called when this screen is no longer the active screen\n    -- Good place to save state or clean up\nend\n\nfunction MyScreen:OnDestroy()\n    -- Called when the screen is being destroyed\n    -- Clean up any resources here\n    self._base.OnDestroy(self)\nend\n\nfunction MyScreen:OnUpdate(dt)\n    -- Called every frame when the screen is active\n    -- dt is the time since the last frame in seconds\nend\n"})}),"\n",(0,o.jsx)(n.h2,{id:"input-handling",children:"Input Handling"}),"\n",(0,o.jsx)(n.p,{children:"Screens can handle input events from the keyboard, mouse, and controller:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MyScreen:OnControl(control, down)\n    if Screen.OnControl(self, control, down) then return true end\n    \n    if not down and control == CONTROL_CANCEL then\n        TheFrontEnd:PopScreen()\n        return true\n    end\n    \n    return false\nend\n\nfunction MyScreen:OnRawKey(key, down)\n    if Screen.OnRawKey(self, key, down) then return true end\n    \n    if key == KEY_ESCAPE and not down then\n        TheFrontEnd:PopScreen()\n        return true\n    end\n    \n    return false\nend\n\nfunction MyScreen:OnMouseButton(button, down, x, y)\n    if Screen.OnMouseButton(self, button, down, x, y) then return true end\n    \n    if button == MOUSEBUTTON_LEFT and down then\n        print("Clicked at", x, y)\n        return true\n    end\n    \n    return false\nend\n'})}),"\n",(0,o.jsx)(n.h2,{id:"common-screen-types",children:"Common Screen Types"}),"\n",(0,o.jsx)(n.h3,{id:"popup-screen",children:"Popup Screen"}),"\n",(0,o.jsx)(n.p,{children:"A popup screen is a modal dialog that appears on top of the current screen:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local PopupDialogScreen = require "screens/popupdialog"\n\n-- Create a simple popup\nlocal popup = PopupDialogScreen(\n    "Confirm Action",                   -- Title\n    "Are you sure you want to proceed?", -- Body text\n    {\n        {\n            text = "Yes",\n            cb = function() \n                print("User confirmed")\n                TheFrontEnd:PopScreen() \n            end\n        },\n        {\n            text = "No",\n            cb = function() \n                print("User cancelled")\n                TheFrontEnd:PopScreen() \n            end\n        }\n    }\n)\n\n-- Show the popup\nTheFrontEnd:PushScreen(popup)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"menu-screen",children:"Menu Screen"}),"\n",(0,o.jsx)(n.p,{children:"A menu screen displays a list of options:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local MenuScreen = Class(Screen, function(self, title, options)\n    Screen._ctor(self, "MenuScreen")\n    \n    self.root = self:AddChild(Widget("root"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add background\n    self.bg = self.root:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n    self.bg:SetSize(500, 400)\n    \n    -- Add title\n    self.title = self.root:AddChild(Text(TITLEFONT, 40, title))\n    self.title:SetPosition(0, 150)\n    \n    -- Create menu\n    local Menu = require "widgets/menu"\n    self.menu = self.root:AddChild(Menu(nil, 0, true))\n    self.menu:SetPosition(0, 0)\n    \n    -- Add menu items\n    for _, option in ipairs(options) do\n        self.menu:AddItem(option.text, option.cb)\n    end\n    \n    -- Set default focus\n    self.default_focus = self.menu\nend)\n\n-- Usage example\nlocal options = {\n    {\n        text = "Start Game",\n        cb = function() print("Starting game") end\n    },\n    {\n        text = "Options",\n        cb = function() print("Opening options") end\n    },\n    {\n        text = "Quit",\n        cb = function() print("Quitting") end\n    }\n}\n\nlocal menu_screen = MenuScreen("Main Menu", options)\nTheFrontEnd:PushScreen(menu_screen)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"form-screen",children:"Form Screen"}),"\n",(0,o.jsx)(n.p,{children:"A screen with form elements for user input:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local FormScreen = Class(Screen, function(self, title, on_submit)\n    Screen._ctor(self, "FormScreen")\n    \n    self.root = self:AddChild(Widget("root"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add background\n    self.bg = self.root:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n    self.bg:SetSize(500, 400)\n    \n    -- Add title\n    self.title = self.root:AddChild(Text(TITLEFONT, 40, title))\n    self.title:SetPosition(0, 150)\n    \n    -- Create form elements\n    local TextEdit = require "widgets/textedit"\n    self.name_label = self.root:AddChild(Text(NEWFONT, 25, "Name:"))\n    self.name_label:SetPosition(-100, 50)\n    \n    self.name_edit = self.root:AddChild(TextEdit(NEWFONT, 25, "", {1,1,1,1}))\n    self.name_edit:SetPosition(50, 50)\n    self.name_edit:SetRegionSize(200, 40)\n    \n    local Spinner = require "widgets/spinner"\n    self.age_label = self.root:AddChild(Text(NEWFONT, 25, "Age:"))\n    self.age_label:SetPosition(-100, 0)\n    \n    local ages = {}\n    for i = 1, 100 do\n        table.insert(ages, tostring(i))\n    end\n    \n    self.age_spinner = self.root:AddChild(Spinner(ages, 100, 40, {font=NEWFONT, size=25}))\n    self.age_spinner:SetPosition(50, 0)\n    \n    -- Add submit button\n    local ImageButton = require "widgets/imagebutton"\n    self.submit_button = self.root:AddChild(ImageButton("images/ui.xml", "button.tex", "button_focus.tex"))\n    self.submit_button:SetPosition(0, -100)\n    self.submit_button:SetText("Submit")\n    self.submit_button:SetOnClick(function()\n        local data = {\n            name = self.name_edit:GetString(),\n            age = self.age_spinner:GetSelected()\n        }\n        on_submit(data)\n        TheFrontEnd:PopScreen()\n    end)\n    \n    -- Set default focus\n    self.default_focus = self.name_edit\nend)\n\n-- Usage example\nlocal form_screen = FormScreen("User Information", function(data)\n    print("Name:", data.name)\n    print("Age:", data.age)\nend)\nTheFrontEnd:PushScreen(form_screen)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-screen-techniques",children:"Advanced Screen Techniques"}),"\n",(0,o.jsx)(n.h3,{id:"screen-transitions",children:"Screen Transitions"}),"\n",(0,o.jsx)(n.p,{children:"You can create smooth transitions between screens:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function MyScreen:TransitionIn()\n    self.root:SetScale(0.1)\n    self.root:MoveTo(Vector3(0, 0, 0), Vector3(0, 0, 0), 0.3, function()\n        -- Transition complete\n    end)\n    self.root:ScaleTo(0.1, 1, 0.3)\nend\n\nfunction MyScreen:TransitionOut(cb)\n    self.root:ScaleTo(1, 0.1, 0.3)\n    self.root:MoveTo(Vector3(0, 0, 0), Vector3(0, -500, 0), 0.3, function()\n        if cb then cb() end\n    end)\nend\n"})}),"\n",(0,o.jsx)(n.h3,{id:"screen-with-tabs",children:"Screen with Tabs"}),"\n",(0,o.jsx)(n.p,{children:"Create a screen with multiple tabs:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local TabScreen = Class(Screen, function(self, title, tabs)\n    Screen._ctor(self, "TabScreen")\n    \n    self.root = self:AddChild(Widget("root"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add background\n    self.bg = self.root:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n    self.bg:SetSize(600, 400)\n    \n    -- Add title\n    self.title = self.root:AddChild(Text(TITLEFONT, 40, title))\n    self.title:SetPosition(0, 150)\n    \n    -- Create tab buttons\n    local TabGroup = require "widgets/tabgroup"\n    self.tab_group = self.root:AddChild(TabGroup())\n    self.tab_group:SetPosition(0, 100)\n    \n    -- Create content area\n    self.content = self.root:AddChild(Widget("content"))\n    self.content:SetPosition(0, -50)\n    \n    -- Add tabs\n    self.tabs = {}\n    for i, tab in ipairs(tabs) do\n        local tab_widget = self.content:AddChild(Widget("tab_" .. i))\n        tab.build_fn(tab_widget)\n        tab_widget:Hide()\n        \n        self.tabs[i] = tab_widget\n        self.tab_group:AddTab(tab.title, function()\n            self:ShowTab(i)\n        end)\n    end\n    \n    -- Show first tab by default\n    self:ShowTab(1)\n    \n    -- Add close button\n    local ImageButton = require "widgets/imagebutton"\n    self.close_button = self.root:AddChild(ImageButton("images/ui.xml", "button.tex", "button_focus.tex"))\n    self.close_button:SetPosition(0, -150)\n    self.close_button:SetText("Close")\n    self.close_button:SetOnClick(function()\n        TheFrontEnd:PopScreen()\n    end)\n    \n    -- Set default focus\n    self.default_focus = self.tab_group\nend)\n\nfunction TabScreen:ShowTab(index)\n    for i, tab in ipairs(self.tabs) do\n        if i == index then\n            tab:Show()\n        else\n            tab:Hide()\n        end\n    end\nend\n\n-- Usage example\nlocal tabs = {\n    {\n        title = "General",\n        build_fn = function(parent)\n            local text = parent:AddChild(Text(NEWFONT, 25, "General settings go here"))\n            text:SetPosition(0, 0)\n        end\n    },\n    {\n        title = "Audio",\n        build_fn = function(parent)\n            local text = parent:AddChild(Text(NEWFONT, 25, "Audio settings go here"))\n            text:SetPosition(0, 0)\n        end\n    },\n    {\n        title = "Graphics",\n        build_fn = function(parent)\n            local text = parent:AddChild(Text(NEWFONT, 25, "Graphics settings go here"))\n            text:SetPosition(0, 0)\n        end\n    }\n}\n\nlocal tab_screen = TabScreen("Settings", tabs)\nTheFrontEnd:PushScreen(tab_screen)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"scrollable-content-screen",children:"Scrollable Content Screen"}),"\n",(0,o.jsx)(n.p,{children:"Create a screen with scrollable content:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local ScrollableScreen = Class(Screen, function(self, title, content_items)\n    Screen._ctor(self, "ScrollableScreen")\n    \n    self.root = self:AddChild(Widget("root"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add background\n    self.bg = self.root:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n    self.bg:SetSize(600, 400)\n    \n    -- Add title\n    self.title = self.root:AddChild(Text(TITLEFONT, 40, title))\n    self.title:SetPosition(0, 150)\n    \n    -- Create scrollable list\n    local ScrollableList = require "widgets/scrollablelist"\n    \n    local function BuildItem(item, index)\n        local widget = Widget("list-item")\n        local text = widget:AddChild(Text(NEWFONT, 20, item.text))\n        \n        widget.OnGainFocus = function()\n            text:SetColour(1, 1, 0, 1)  -- Yellow on focus\n        end\n        \n        widget.OnLoseFocus = function()\n            text:SetColour(1, 1, 1, 1)  -- White when not focused\n        end\n        \n        widget.OnSelect = function()\n            if item.cb then\n                item.cb()\n            end\n        end\n        \n        return widget\n    end\n    \n    self.scroll_list = self.root:AddChild(ScrollableList(\n        content_items,  -- Items array\n        400,            -- Item width\n        40,             -- Item height\n        8,              -- Number of visible items\n        1,              -- Items per row\n        false           -- Not horizontal\n    ))\n    self.scroll_list:SetPosition(0, 0)\n    self.scroll_list:SetUpdateFn(BuildItem)\n    \n    -- Add close button\n    local ImageButton = require "widgets/imagebutton"\n    self.close_button = self.root:AddChild(ImageButton("images/ui.xml", "button.tex", "button_focus.tex"))\n    self.close_button:SetPosition(0, -150)\n    self.close_button:SetText("Close")\n    self.close_button:SetOnClick(function()\n        TheFrontEnd:PopScreen()\n    end)\n    \n    -- Set default focus\n    self.default_focus = self.scroll_list\nend)\n\n-- Usage example\nlocal items = {}\nfor i = 1, 20 do\n    table.insert(items, {\n        text = "Item " .. i,\n        cb = function() print("Selected item", i) end\n    })\nend\n\nlocal scroll_screen = ScrollableScreen("Scrollable Content", items)\nTheFrontEnd:PushScreen(scroll_screen)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices-for-screen-development",children:"Best Practices for Screen Development"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Root Widget"}),": Always create a root widget for your screen content to manage layout properly"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Default Focus"}),": Set ",(0,o.jsx)(n.code,{children:"self.default_focus"})," to ensure controller navigation works correctly"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cleanup"}),": Override ",(0,o.jsx)(n.code,{children:"OnDestroy"})," to clean up any resources when the screen is closed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Input Handling"}),": Always call the parent method first in input handlers and return true if handled"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Transitions"}),": Add smooth transitions for a polished user experience"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error Handling"}),": Wrap callbacks in pcall to prevent crashes from user input"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Accessibility"}),": Ensure all interactive elements can be navigated with a controller"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consistency"}),": Follow DST's UI style for a consistent user experience"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance"}),": Minimize the number of widgets and avoid creating them frequently"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Testing"}),": Test your screens on different resolutions and with both mouse and controller input"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example-complete-custom-screen",children:"Example: Complete Custom Screen"}),"\n",(0,o.jsx)(n.p,{children:"Here's a complete example of a custom screen for a mod settings menu:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local Screen = require "widgets/screen"\nlocal Widget = require "widgets/widget"\nlocal Text = require "widgets/text"\nlocal Image = require "widgets/image"\nlocal ImageButton = require "widgets/imagebutton"\nlocal Spinner = require "widgets/spinner"\nlocal TextEdit = require "widgets/textedit"\nlocal TEMPLATES = require "widgets/templates"\n\n-- Create a settings screen for a mod\nModSettingsScreen = Class(Screen, function(self, mod_name, settings, on_save)\n    Screen._ctor(self, "ModSettingsScreen")\n    \n    self.mod_name = mod_name\n    self.settings = settings\n    self.on_save = on_save\n    \n    -- Create root widget\n    self.root = self:AddChild(Widget("root"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add dark background\n    self.black = self.root:AddChild(TEMPLATES.BackgroundTint(0.7))\n    \n    -- Create panel\n    self.panel = self.root:AddChild(TEMPLATES.RectangleWindow(500, 450))\n    \n    -- Add title\n    self.title = self.panel:AddChild(Text(TITLEFONT, 40, mod_name .. " Settings"))\n    self.title:SetPosition(0, 180)\n    \n    -- Create settings container\n    self.settings_root = self.panel:AddChild(Widget("settings_root"))\n    self.settings_root:SetPosition(0, 50)\n    \n    -- Create settings controls based on settings types\n    local y_offset = 100\n    self.controls = {}\n    \n    for id, setting in pairs(settings) do\n        local label = self.settings_root:AddChild(Text(NEWFONT, 25, setting.label))\n        label:SetPosition(-150, y_offset)\n        label:SetHAlign(ANCHOR_RIGHT)\n        \n        if setting.type == "spinner" then\n            local spinner = self.settings_root:AddChild(Spinner(\n                setting.options,\n                200,\n                40,\n                {font=NEWFONT, size=25},\n                function(selected)\n                    self.settings[id].value = selected\n                end\n            ))\n            spinner:SetPosition(50, y_offset)\n            spinner:SetSelected(setting.value)\n            self.controls[id] = spinner\n            \n        elseif setting.type == "checkbox" then\n            local checkbox = self.settings_root:AddChild(TEMPLATES.Checkbox(\n                "",\n                setting.value,\n                function(checked)\n                    self.settings[id].value = checked\n                end\n            ))\n            checkbox:SetPosition(0, y_offset)\n            self.controls[id] = checkbox\n            \n        elseif setting.type == "text" then\n            local text_edit = self.settings_root:AddChild(TextEdit(\n                NEWFONT,\n                25,\n                setting.value,\n                {1,1,1,1}\n            ))\n            text_edit:SetPosition(50, y_offset)\n            text_edit:SetRegionSize(200, 40)\n            text_edit:SetOnTextInputted(function(text)\n                self.settings[id].value = text\n            end)\n            self.controls[id] = text_edit\n        end\n        \n        y_offset = y_offset - 50\n    end\n    \n    -- Add save button\n    self.save_button = self.panel:AddChild(TEMPLATES.StandardButton(\n        function()\n            self:Save()\n        end,\n        "Save"\n    ))\n    self.save_button:SetPosition(-80, -150)\n    \n    -- Add cancel button\n    self.cancel_button = self.panel:AddChild(TEMPLATES.StandardButton(\n        function()\n            TheFrontEnd:PopScreen()\n        end,\n        "Cancel"\n    ))\n    self.cancel_button:SetPosition(80, -150)\n    \n    -- Set default focus\n    self.default_focus = self.settings_root\nend)\n\nfunction ModSettingsScreen:Save()\n    local result = {}\n    \n    -- Extract values from settings\n    for id, setting in pairs(self.settings) do\n        result[id] = setting.value\n    end\n    \n    -- Call save callback\n    if self.on_save then\n        self.on_save(result)\n    end\n    \n    TheFrontEnd:PopScreen()\nend\n\nfunction ModSettingsScreen:OnControl(control, down)\n    if Screen.OnControl(self, control, down) then return true end\n    \n    if not down and control == CONTROL_CANCEL then\n        TheFrontEnd:PopScreen()\n        return true\n    end\n    \n    return false\nend\n\n-- Usage example\nlocal settings = {\n    difficulty = {\n        label = "Difficulty",\n        type = "spinner",\n        options = {"Easy", "Normal", "Hard"},\n        value = "Normal"\n    },\n    spawn_monsters = {\n        label = "Spawn Monsters",\n        type = "checkbox",\n        value = true\n    },\n    player_name = {\n        label = "Player Name",\n        type = "text",\n        value = "Player"\n    }\n}\n\nlocal settings_screen = ModSettingsScreen("My Mod", settings, function(result)\n    print("Settings saved:")\n    for k, v in pairs(result) do\n        print(k, "=", v)\n    end\nend)\n\nTheFrontEnd:PushScreen(settings_screen)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(6540);const o={},l=s.createContext(o);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);