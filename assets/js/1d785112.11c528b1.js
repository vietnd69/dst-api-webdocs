"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8262],{4605:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/updates/migration-guides","title":"Migration Guides","description":"Last Update: 2023-08-01","source":"@site/docs/api-vanilla/updates/migration-guides.md","sourceDirName":"api-vanilla/updates","slug":"/api-vanilla/updates/migration-guides","permalink":"/dst-api-webdocs/docs/api-vanilla/updates/migration-guides","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"migration-guides","title":"Migration Guides","sidebar_position":10,"last_updated":"2023-08-01T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Backwards Compatibility","permalink":"/dst-api-webdocs/docs/api-vanilla/updates/backwards-compatibility"},"next":{"title":"Debugging and Testing","permalink":"/dst-api-webdocs/docs/category/debugging-and-testing"}}');var a=t(4848),l=t(8453);const r={id:"migration-guides",title:"Migration Guides",sidebar_position:10,last_updated:new Date("2023-08-01T00:00:00.000Z")},s="Migration Guides",o={},d=[{value:"Migrating to Return of Them Update (2019)",id:"migrating-to-return-of-them-update-2019",level:2},{value:"Key Changes",id:"key-changes",level:3},{value:"Migration Steps",id:"migration-steps",level:3},{value:"1. Update Player Movement Handling",id:"1-update-player-movement-handling",level:4},{value:"2. Update Placement Logic",id:"2-update-placement-logic",level:4},{value:"3. Update Map Functions",id:"3-update-map-functions",level:4},{value:"4. Add Water Compatibility to Items",id:"4-add-water-compatibility-to-items",level:4},{value:"Migrating to A New Reign Update (2017)",id:"migrating-to-a-new-reign-update-2017",level:2},{value:"Key Changes",id:"key-changes-1",level:3},{value:"Migration Steps",id:"migration-steps-1",level:3},{value:"1. Update Clock References",id:"1-update-clock-references",level:4},{value:"2. Update Network Variables",id:"2-update-network-variables",level:4},{value:"3. Update Event Handling",id:"3-update-event-handling",level:4},{value:"4. Update Player References",id:"4-update-player-references",level:4},{value:"Migrating to Multiplayer Update (2016)",id:"migrating-to-multiplayer-update-2016",level:2},{value:"Key Changes",id:"key-changes-2",level:3},{value:"Migration Steps",id:"migration-steps-2",level:3},{value:"1. Update Component Access",id:"1-update-component-access",level:4},{value:"2. Add Server/Client Checks",id:"2-add-serverclient-checks",level:4},{value:"3. Update Network Synchronization",id:"3-update-network-synchronization",level:4},{value:"4. Update Action Handling",id:"4-update-action-handling",level:4},{value:"Migrating to Hamlet Update (Late 2018)",id:"migrating-to-hamlet-update-late-2018",level:2},{value:"Key Changes",id:"key-changes-3",level:3},{value:"Migration Steps",id:"migration-steps-3",level:3},{value:"1. Update Building Placement",id:"1-update-building-placement",level:4},{value:"2. Add Interior Compatibility",id:"2-add-interior-compatibility",level:4},{value:"3. Add Trading Compatibility",id:"3-add-trading-compatibility",level:4},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Last Update: 2023-08-01"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"migration-guides",children:"Migration Guides"})}),"\n",(0,a.jsx)(n.p,{children:"These guides help mod developers update their mods to work with major changes in the Don't Starve Together API. Each section covers a significant API update and provides step-by-step instructions for migrating your code."}),"\n",(0,a.jsxs)(n.p,{children:["For a complete chronological list of all API changes and their exact versions, please refer to the ",(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/updates/api-changelog",children:"API Changelog"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"migrating-to-return-of-them-update-2019",children:"Migrating to Return of Them Update (2019)"}),"\n",(0,a.jsx)(n.p,{children:'The "Return of Them" update introduced significant changes to the game, including the boat system, ocean content, and various API changes.'}),"\n",(0,a.jsx)(n.h3,{id:"key-changes",children:"Key Changes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Ocean and Boat Systems"}),": New water-based mechanics"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"New Components"}),": ",(0,a.jsx)(n.code,{children:"walkableplatform"}),", ",(0,a.jsx)(n.code,{children:"flotation"}),", ",(0,a.jsx)(n.code,{children:"waterproofer"}),", etc."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Updated Physics"}),": Changes to collision and movement"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Shards System"}),": Enhanced multi-server functionality"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"migration-steps",children:"Migration Steps"}),"\n",(0,a.jsx)(n.h4,{id:"1-update-player-movement-handling",children:"1. Update Player Movement Handling"}),"\n",(0,a.jsx)(n.p,{children:"The player movement system was updated to handle boats and water:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Old code\nlocal function OnPlayerMove(inst)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    -- Direct ground-based logic\nend\n\n-- New code\nlocal function OnPlayerMove(inst)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    \n    -- Check if on a boat\n    local platform = inst:GetCurrentPlatform()\n    if platform ~= nil then\n        -- Handle boat-based movement\n    else\n        -- Handle ground-based movement\n    end\nend\n"})}),"\n",(0,a.jsx)(n.h4,{id:"2-update-placement-logic",children:"2. Update Placement Logic"}),"\n",(0,a.jsx)(n.p,{children:"Placement logic needs to account for water and boats:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Old code\nlocal function CanPlaceHere(inst, pt)\n    return TheWorld.Map:IsPassableAtPoint(pt.x, pt.y, pt.z)\nend\n\n-- New code\nlocal function CanPlaceHere(inst, pt)\n    -- Check ground placement\n    if not TheWorld.Map:IsPassableAtPoint(pt.x, pt.y, pt.z) then\n        return false\n    end\n    \n    -- Check water placement\n    local on_water = TheWorld.Map:IsOceanAtPoint(pt.x, pt.y, pt.z)\n    if on_water and not inst.components.deployable.allowwater then\n        return false\n    end\n    \n    -- Check boat placement\n    local platform = TheWorld.Map:GetPlatformAtPoint(pt.x, pt.z)\n    if platform ~= nil and not inst.components.deployable.allowboat then\n        return false\n    end\n    \n    return true\nend\n"})}),"\n",(0,a.jsx)(n.h4,{id:"3-update-map-functions",children:"3. Update Map Functions"}),"\n",(0,a.jsx)(n.p,{children:"Map functions were updated to handle water:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Old code\nlocal is_valid = TheWorld.Map:IsPassableAtPoint(x, y, z)\n\n-- New code\nlocal is_land = TheWorld.Map:IsPassableAtPoint(x, y, z) and not TheWorld.Map:IsOceanAtPoint(x, y, z)\nlocal is_water = TheWorld.Map:IsOceanAtPoint(x, y, z)\nlocal is_valid = is_land or (is_water and can_be_on_water)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"4-add-water-compatibility-to-items",children:"4. Add Water Compatibility to Items"}),"\n",(0,a.jsx)(n.p,{children:"Items need to handle water interactions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Add to your item prefabs\nlocal function MakeWaterCompatible(inst)\n    if inst.components.inventoryitem ~= nil then\n        inst.components.inventoryitem:SetSinks(false) -- Prevent sinking\n    end\n    \n    -- Add floater component for items that float\n    if TUNING.FLOATING_ITEMS_ENABLED and inst.components.floater == nil then\n        inst:AddComponent("floater")\n    end\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"migrating-to-a-new-reign-update-2017",children:"Migrating to A New Reign Update (2017)"}),"\n",(0,a.jsx)(n.p,{children:'The "A New Reign" update introduced several API changes, particularly around networking and world state.'}),"\n",(0,a.jsx)(n.h3,{id:"key-changes-1",children:"Key Changes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"State System"}),": Replaced the clock system with a state system"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Network Optimizations"}),": Changes to network variable handling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"New Event System"}),": Updated event handling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Character Specific Features"}),": New character-specific APIs"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"migration-steps-1",children:"Migration Steps"}),"\n",(0,a.jsx)(n.h4,{id:"1-update-clock-references",children:"1. Update Clock References"}),"\n",(0,a.jsx)(n.p,{children:"The clock system was replaced with the state system:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Old code\nlocal is_day = GetClock():IsDay()\nlocal current_time = GetClock():GetTotalTime()\nlocal phase = GetClock():GetPhase()\n\n-- New code\nlocal is_day = TheWorld.state.isday\nlocal current_time = TheWorld.state.time\nlocal phase = TheWorld.state.phase\n"})}),"\n",(0,a.jsx)(n.h4,{id:"2-update-network-variables",children:"2. Update Network Variables"}),"\n",(0,a.jsx)(n.p,{children:"Network variables changed to use getter/setter methods:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Old code\nlocal net_var = net_string(inst.GUID, "myvar", "myvar_dirty")\nnet_var.value = "hello"\nlocal value = net_var.value\n\n-- New code\nlocal net_var = net_string(inst.GUID, "myvar", "myvar_dirty")\nnet_var:Set("hello")\nlocal value = net_var:Get()\n'})}),"\n",(0,a.jsx)(n.h4,{id:"3-update-event-handling",children:"3. Update Event Handling"}),"\n",(0,a.jsx)(n.p,{children:"Some events were renamed or changed:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Old code\ninst:ListenForEvent("daycomplete", OnDayComplete)\ninst:ListenForEvent("nighttime", OnNightTime)\n\n-- New code\ninst:ListenForEvent("cycleschanged", OnDayComplete)\ninst:ListenForEvent("phasechanged", function(world, data)\n    if data.newphase == "night" then\n        OnNightTime(world, data)\n    end\nend)\n'})}),"\n",(0,a.jsx)(n.h4,{id:"4-update-player-references",children:"4. Update Player References"}),"\n",(0,a.jsx)(n.p,{children:"Player references were updated for multiplayer support:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Old code\nlocal player = GetPlayer()\n\n-- New code\nlocal player = ThePlayer -- Client-side only\n-- or\nfor i, v in ipairs(AllPlayers) do\n    -- Do something with each player\nend\n"})}),"\n",(0,a.jsx)(n.h2,{id:"migrating-to-multiplayer-update-2016",children:"Migrating to Multiplayer Update (2016)"}),"\n",(0,a.jsx)(n.p,{children:"The multiplayer update was one of the most significant changes to the API, transforming the game from single-player to multiplayer."}),"\n",(0,a.jsx)(n.h3,{id:"key-changes-2",children:"Key Changes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Client/Server Architecture"}),": Split between server and client code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Replica Components"}),": Introduction of client-side replicas"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Network Variables"}),": New network synchronization system"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Global References"}),": Changes to global object references"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"migration-steps-2",children:"Migration Steps"}),"\n",(0,a.jsx)(n.h4,{id:"1-update-component-access",children:"1. Update Component Access"}),"\n",(0,a.jsx)(n.p,{children:"Components are now split between server and client:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Old code (works only on server now)\nlocal health = inst.components.health\nhealth:SetMaxHealth(100)\n\n-- New code (works on both client and server)\nlocal function GetHealth(inst)\n    if TheWorld.ismastersim then\n        -- Server-side\n        return inst.components.health ~= nil and inst.components.health.currenthealth or 0\n    else\n        -- Client-side\n        return inst.replica.health ~= nil and inst.replica.health:GetCurrent() or 0\n    end\nend\n"})}),"\n",(0,a.jsx)(n.h4,{id:"2-add-serverclient-checks",children:"2. Add Server/Client Checks"}),"\n",(0,a.jsx)(n.p,{children:"Code needs to check if it's running on server or client:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if code is running on server\nif TheWorld.ismastersim then\n    -- Server-only code\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(100)\nelse\n    -- Client-only code\n    -- Use replica components\nend\n'})}),"\n",(0,a.jsx)(n.h4,{id:"3-update-network-synchronization",children:"3. Update Network Synchronization"}),"\n",(0,a.jsx)(n.p,{children:"Add network synchronization for multiplayer:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function MakePrefab()\n    local inst = CreateEntity()\n    \n    -- Basic setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    \n    -- Add network component for multiplayer\n    inst.entity:AddNetwork()\n    \n    -- Set properties that need to be synced\n    inst:AddTag("myentity")\n    \n    -- Finalize network setup\n    inst.entity:SetPristine()\n    \n    -- Server-side components\n    if TheWorld.ismastersim then\n        inst:AddComponent("health")\n        -- Other server components\n    end\n    \n    return inst\nend\n'})}),"\n",(0,a.jsx)(n.h4,{id:"4-update-action-handling",children:"4. Update Action Handling"}),"\n",(0,a.jsx)(n.p,{children:"Actions now need to work in a networked environment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Define action handler on server\nlocal MyAction = Action({priority=1})\nMyAction.id = "MYACTION"\nMyAction.str = "My Action"\nMyAction.fn = function(act)\n    if act.target and act.target.components.mycomponent then\n        act.target.components.mycomponent:DoSomething()\n        return true\n    end\n    return false\nend\n\n-- Register action for client prediction\nAddAction(MyAction)\n\n-- Add action component to entity\nif TheWorld.ismastersim then\n    inst:AddComponent("myactionable")\n    inst.components.myactionable:SetActionFn(MyAction)\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"migrating-to-hamlet-update-late-2018",children:"Migrating to Hamlet Update (Late 2018)"}),"\n",(0,a.jsx)(n.p,{children:"The Hamlet update added new systems and components, particularly for interiors and city structures."}),"\n",(0,a.jsx)(n.h3,{id:"key-changes-3",children:"Key Changes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Interior System"}),": New system for building interiors"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"City Planning"}),": New grid-based building system"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Economy System"}),": Trading and currency systems"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"New Components"}),": ",(0,a.jsx)(n.code,{children:"tradable"}),", ",(0,a.jsx)(n.code,{children:"shopkeeper"}),", etc."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"migration-steps-3",children:"Migration Steps"}),"\n",(0,a.jsx)(n.h4,{id:"1-update-building-placement",children:"1. Update Building Placement"}),"\n",(0,a.jsx)(n.p,{children:"Building placement logic needed updates for city grid systems:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Old code\nlocal function CanPlaceHere(inst, pt)\n    return TheWorld.Map:IsPassableAtPoint(pt.x, pt.y, pt.z)\nend\n\n-- New code\nlocal function CanPlaceHere(inst, pt)\n    -- Basic passability check\n    if not TheWorld.Map:IsPassableAtPoint(pt.x, pt.y, pt.z) then\n        return false\n    end\n    \n    -- Check if on a valid city tile\n    if TheWorld.components.cityplanner ~= nil then\n        local tile_type = TheWorld.components.cityplanner:GetTileTypeAtPoint(pt.x, pt.z)\n        if tile_type ~= CITY_TILES.RESIDENTIAL and inst.building_type == "house" then\n            return false\n        end\n    end\n    \n    return true\nend\n'})}),"\n",(0,a.jsx)(n.h4,{id:"2-add-interior-compatibility",children:"2. Add Interior Compatibility"}),"\n",(0,a.jsx)(n.p,{children:"For mods that interact with buildings, interior support was needed:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if player is in an interior\nlocal function IsInInterior(inst)\n    return TheWorld:HasTag("interior")\nend\n\n-- Get the current interior ID\nlocal function GetCurrentInteriorID()\n    if TheWorld.components.interiormanager ~= nil then\n        return TheWorld.components.interiormanager:GetCurrentInteriorID()\n    end\n    return nil\nend\n\n-- Handle interior transitions\nlocal function OnEnterInterior(inst, data)\n    -- Handle interior entry\n    local interior_id = data.interior_id\n    -- Adjust behavior for interior\nend\n'})}),"\n",(0,a.jsx)(n.h4,{id:"3-add-trading-compatibility",children:"3. Add Trading Compatibility"}),"\n",(0,a.jsx)(n.p,{children:"For items that could be traded:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function MakeTradable(inst)\n    if inst.components.tradable == nil then\n        inst:AddComponent("tradable")\n    end\n    \n    inst.components.tradable.goldvalue = 5 -- Value in gold coins\n    inst.components.tradable:SetOnTradeFn(function(inst, trader)\n        -- Do something when traded\n    end)\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"When migrating to a new API version:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Read Release Notes"}),": Check official release notes for API changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test Incrementally"}),": Update and test one system at a time"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use Compatibility Layers"}),": Create abstraction layers for major changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Check Community Resources"}),": The modding community often shares migration tips"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Remember that some changes may require significant restructuring of your mod. In these cases, it might be easier to create a new version rather than trying to maintain backwards compatibility."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const a={},l=i.createContext(a);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);