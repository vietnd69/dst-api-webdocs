"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9238],{1833:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api-vanilla/components/locomotor","title":"Locomotor","description":"The Locomotor component manages entity movement, including walking, running, and navigation between points. It handles movement speed, pathfinding, and movement state.","source":"@site/docs/api-vanilla/components/locomotor.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/locomotor","permalink":"/dst-api-webdocs/docs/api-vanilla/components/locomotor","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"id":"locomotor","title":"Locomotor","sidebar_position":13,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Inspectable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/inspectable"},"next":{"title":"LootDropper","permalink":"/dst-api-webdocs/docs/api-vanilla/components/lootdropper"}}');var i=t(4848),r=t(8453);const a={id:"locomotor",title:"Locomotor",sidebar_position:13,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},l="Locomotor Component",s={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Movement Control",id:"movement-control",level:3},{value:"SetWalkSpeed and SetRunSpeed",id:"setwalkspeed-and-setrunspeed",level:4},{value:"SetExternalSpeedMultiplier",id:"setexternalspeedmultiplier",level:4},{value:"StartWalking, StartRunning, and Stop",id:"startwalking-startrunning-and-stop",level:4},{value:"Movement Modifiers",id:"movement-modifiers",level:3},{value:"SetSlowMultiplier and SetFastMultiplier",id:"setslowmultiplier-and-setfastmultiplier",level:4},{value:"SetFasterOnRoad and SetTriggersCreep",id:"setfasteronroad-and-settriggerscreep",level:4},{value:"Pathfinding",id:"pathfinding",level:3},{value:"GoToPoint",id:"gotopoint",level:4},{value:"GoToEntity",id:"gotoentity",level:4},{value:"Follow",id:"follow",level:4},{value:"PushAwayFrom",id:"pushawayfrom",level:4},{value:"Movement States",id:"movement-states",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Combat Integration",id:"combat-integration",level:3},{value:"Health Integration",id:"health-integration",level:3},{value:"Sanity Integration",id:"sanity-integration",level:3},{value:"See also",id:"see-also",level:2},{value:"Example: Creating a Comprehensive Movement Entity",id:"example-creating-a-comprehensive-movement-entity",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"locomotor-component",children:"Locomotor Component"})}),"\n",(0,i.jsx)(e.p,{children:"The Locomotor component manages entity movement, including walking, running, and navigation between points. It handles movement speed, pathfinding, and movement state."}),"\n",(0,i.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Add a locomotor component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("locomotor")\n\n-- Configure the locomotor component\nlocal locomotor = entity.components.locomotor\nlocomotor:SetSlowMultiplier(0.6)\nlocomotor:SetTriggersCreep(true)\nlocomotor:SetFasterOnRoad(true)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Property"}),(0,i.jsx)(e.th,{children:"Type"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"walkspeed"})}),(0,i.jsx)(e.td,{children:"Number"}),(0,i.jsx)(e.td,{children:"Base walking speed"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"runspeed"})}),(0,i.jsx)(e.td,{children:"Number"}),(0,i.jsx)(e.td,{children:"Base running speed"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"fasteronroad"})}),(0,i.jsx)(e.td,{children:"Boolean"}),(0,i.jsx)(e.td,{children:"Whether entity moves faster on roads"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"slowmultiplier"})}),(0,i.jsx)(e.td,{children:"Number"}),(0,i.jsx)(e.td,{children:"Speed multiplier when slowed (e.g., by terrain)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"fastmultiplier"})}),(0,i.jsx)(e.td,{children:"Number"}),(0,i.jsx)(e.td,{children:"Speed multiplier when moving quickly"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"groundspeedmultiplier"})}),(0,i.jsx)(e.td,{children:"Number"}),(0,i.jsx)(e.td,{children:"Speed multiplier based on ground type"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"triggerscreep"})}),(0,i.jsx)(e.td,{children:"Boolean"}),(0,i.jsx)(e.td,{children:"Whether movement triggers creep effect"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"isrunning"})}),(0,i.jsx)(e.td,{children:"Boolean"}),(0,i.jsx)(e.td,{children:"Whether entity is currently running"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"wantstomoveforward"})}),(0,i.jsx)(e.td,{children:"Boolean"}),(0,i.jsx)(e.td,{children:"Whether entity wants to move forward"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"external_speed_multiplier"})}),(0,i.jsx)(e.td,{children:"Number"}),(0,i.jsx)(e.td,{children:"Additional speed multiplier from external sources"})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(e.h3,{id:"movement-control",children:"Movement Control"}),"\n",(0,i.jsx)(e.h4,{id:"setwalkspeed-and-setrunspeed",children:"SetWalkSpeed and SetRunSpeed"}),"\n",(0,i.jsx)(e.p,{children:"Set the base walk and run speeds for the entity."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Set base speeds\nlocomotor:SetWalkSpeed(4)\nlocomotor:SetRunSpeed(6)\n\n-- Example of setting up speed for different character types\nfunction ConfigureCharacterSpeed(inst, characterType)\n    local locomotor = inst.components.locomotor\n    \n    if characterType == "nimble" then\n        locomotor:SetWalkSpeed(5) -- Faster walker\n        locomotor:SetRunSpeed(8)  -- Faster runner\n    elseif characterType == "heavy" then\n        locomotor:SetWalkSpeed(3) -- Slower walker\n        locomotor:SetRunSpeed(4.5) -- Slower runner\n    else -- standard\n        locomotor:SetWalkSpeed(4)\n        locomotor:SetRunSpeed(6)\n    end\n    \n    -- Maybe apply character-specific animations\n    if characterType == "nimble" then\n        -- Faster animation playback for faster characters\n        inst.AnimState:SetDeltaTimeMultiplier(1.2)\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h4,{id:"setexternalspeedmultiplier",children:"SetExternalSpeedMultiplier"}),"\n",(0,i.jsx)(e.p,{children:"Applies a named speed multiplier that stacks with other speed effects."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Set external speed multiplier\nlocomotor:SetExternalSpeedMultiplier("buff_id", 1.3) -- 30% speed boost\n\n-- Remove external speed multiplier\nlocomotor:RemoveExternalSpeedMultiplier("buff_id")\n\n-- Example of a speed buff system\nfunction ApplySpeedBuff(target, buffAmount, duration)\n    if target.components.locomotor ~= nil then\n        -- Apply the speed buff\n        target.components.locomotor:SetExternalSpeedMultiplier("speed_potion", buffAmount)\n        \n        -- Visual effect to show the speed buff\n        local fx = SpawnPrefab("statue_transition_2")\n        fx.entity:SetParent(target.entity)\n        fx.Transform:SetPosition(0, 0, 0)\n        \n        -- Remove the buff after duration\n        target:DoTaskInTime(duration, function(inst)\n            if inst.components.locomotor ~= nil then\n                inst.components.locomotor:RemoveExternalSpeedMultiplier("speed_potion")\n                \n                -- Visual effect for buff ending\n                local endFx = SpawnPrefab("statue_transition")\n                endFx.entity:SetParent(inst.entity)\n                endFx.Transform:SetPosition(0, 0, 0)\n            end\n        end)\n        \n        return true\n    end\n    \n    return false\nend\n'})}),"\n",(0,i.jsx)(e.h4,{id:"startwalking-startrunning-and-stop",children:"StartWalking, StartRunning, and Stop"}),"\n",(0,i.jsx)(e.p,{children:"Control the movement state of the entity."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Start/stop movement\nlocomotor:StartWalking()\nlocomotor:StartRunning()\nlocomotor:Stop()\n\n-- Example of player control integration\nfunction SetupPlayerControls(inst)\n    -- When sprint key is pressed\n    inst:ListenForEvent("sprintkey", function(inst)\n        if inst.components.locomotor ~= nil then\n            if not inst.components.locomotor.isrunning then\n                inst.components.locomotor:StartRunning()\n            end\n        end\n    end)\n    \n    -- When sprint key is released\n    inst:ListenForEvent("sprintkeyup", function(inst)\n        if inst.components.locomotor ~= nil and inst.components.locomotor.isrunning then\n            inst.components.locomotor:StartWalking()\n        end\n    end)\n    \n    -- When stop key is pressed\n    inst:ListenForEvent("stopkey", function(inst)\n        if inst.components.locomotor ~= nil then\n            inst.components.locomotor:Stop()\n        end\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"movement-modifiers",children:"Movement Modifiers"}),"\n",(0,i.jsx)(e.h4,{id:"setslowmultiplier-and-setfastmultiplier",children:"SetSlowMultiplier and SetFastMultiplier"}),"\n",(0,i.jsx)(e.p,{children:"Configure how speed is affected by modifiers."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Set modifiers for different movement types\nlocomotor:SetSlowMultiplier(0.5) -- Move at 50% speed when slowed\nlocomotor:SetFastMultiplier(1.5) -- Move at 150% speed when boosted\n\n-- Example of terrain-based movement effects\nfunction ConfigureTerrainMovement(inst)\n    local locomotor = inst.components.locomotor\n    \n    -- Set up base movement modifiers\n    locomotor:SetSlowMultiplier(0.6)\n    locomotor:SetFastMultiplier(1.4)\n    \n    -- Update ground speed modifier based on current terrain\n    inst:DoPeriodicTask(0.5, function(inst)\n        local x, y, z = inst.Transform:GetWorldPosition()\n        local tile = TheWorld.Map:GetTileAtPoint(x, 0, z)\n        \n        if tile == GROUND.ROAD then\n            -- Roads are fast\n            locomotor.groundspeedmultiplier = 1.3\n        elseif tile == GROUND.MUD or tile == GROUND.MARSH then\n            -- Mud and marsh are very slow\n            locomotor.groundspeedmultiplier = 0.5\n        elseif tile == GROUND.ROCKY or tile == GROUND.DIRT then\n            -- Rocky and dirt are normal speed\n            locomotor.groundspeedmultiplier = 1.0\n        elseif tile == GROUND.GRASS then\n            -- Grass is slightly faster\n            locomotor.groundspeedmultiplier = 1.1\n        else\n            -- Default ground speed\n            locomotor.groundspeedmultiplier = 1.0\n        end\n    end)\nend\n"})}),"\n",(0,i.jsx)(e.h4,{id:"setfasteronroad-and-settriggerscreep",children:"SetFasterOnRoad and SetTriggersCreep"}),"\n",(0,i.jsx)(e.p,{children:"Configure road and creep interactions."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Set whether entity moves faster on roads\nlocomotor:SetFasterOnRoad(true)\n\n-- Set whether entity is affected by creep\nlocomotor:SetTriggersCreep(true)\n\n-- Example of creature-specific movement configuration\nfunction SetupCreatureMovement(inst, creatureType)\n    local locomotor = inst.components.locomotor\n    \n    if creatureType == "spider" then\n        -- Spiders create creep but aren\'t affected by it\n        locomotor:SetTriggersCreep(false)\n        locomotor:SetFasterOnRoad(false)\n        \n        -- Spiders are faster on webbing\n        inst:ListenForEvent("ontilechanged", function(inst, data)\n            if data.tile == GROUND.WEBBING then\n                locomotor.groundspeedmultiplier = 1.5\n            else\n                locomotor.groundspeedmultiplier = 1.0\n            end\n        end)\n    elseif creatureType == "deer" then\n        -- Deer are much faster on roads\n        locomotor:SetTriggersCreep(true)\n        locomotor:SetFasterOnRoad(true)\n        locomotor.fastmultiplier = 1.8\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"pathfinding",children:"Pathfinding"}),"\n",(0,i.jsx)(e.h4,{id:"gotopoint",children:"GoToPoint"}),"\n",(0,i.jsx)(e.p,{children:"Makes the entity move toward a specific point."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Go to a point\nlocomotor:GoToPoint(Vector3(x, y, z))\n\n-- Example of a patrol system\nfunction SetupPatrolPattern(inst, patrolPoints)\n    local currentPatrolIndex = 1\n    \n    inst:DoPeriodicTask(5, function()\n        if inst.components.locomotor ~= nil then\n            local targetPoint = patrolPoints[currentPatrolIndex]\n            \n            -- Move to the next patrol point\n            inst.components.locomotor:GoToPoint(targetPoint)\n            \n            -- Update patrol index for next time\n            currentPatrolIndex = currentPatrolIndex % #patrolPoints + 1\n            \n            -- Optional custom arrival behavior\n            inst:DoTaskInTime(4, function(inst)\n                -- If close enough to destination, consider it arrived\n                local ix, iy, iz = inst.Transform:GetWorldPosition()\n                local tx, ty, tz = targetPoint:Get()\n                if math.sqrt((ix - tx)^2 + (iz - tz)^2) < 3 then\n                    -- Do something on arrival, like play an animation\n                    inst.AnimState:PlayAnimation("idle_alert")\n                end\n            end)\n        end\n    end)\nend\n\n-- Example of a random wandering behavior\nfunction SetupRandomWander(inst, centerPoint, radius)\n    inst:DoPeriodicTask(math.random(5, 10), function()\n        if inst.components.locomotor ~= nil then\n            local cx, cy, cz = centerPoint:Get()\n            local angle = math.random() * 2 * math.pi\n            local dist = math.random() * radius\n            \n            local targetPoint = Vector3(cx + math.cos(angle) * dist, 0, cz + math.sin(angle) * dist)\n            inst.components.locomotor:GoToPoint(targetPoint)\n        end\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h4,{id:"gotoentity",children:"GoToEntity"}),"\n",(0,i.jsx)(e.p,{children:"Makes the entity move toward another entity."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Go to an entity\nlocomotor:GoToEntity(target_entity)\n\n-- Example of an aggressive creature targeting player\nfunction SetupAggressiveBehavior(inst)\n    -- Periodically check for targets\n    inst:DoPeriodicTask(2, function()\n        if inst.components.locomotor ~= nil and not inst.components.combat:HasTarget() then\n            -- Look for closest player\n            local x, y, z = inst.Transform:GetWorldPosition()\n            local player = FindClosestPlayerInRange(x, y, z, 15)\n            \n            if player ~= nil then\n                -- Target player with both locomotor and combat\n                inst.components.locomotor:GoToEntity(player)\n                inst.components.combat:SetTarget(player)\n                \n                -- Play aggro animation/sound\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/monster/growl")\n                inst.AnimState:PlayAnimation("taunt")\n                inst.AnimState:PushAnimation("run_loop")\n            end\n        end\n    end)\n    \n    -- Stop when target is gone\n    inst:ListenForEvent("droppedtarget", function(inst)\n        inst.components.locomotor:Stop()\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h4,{id:"follow",children:"Follow"}),"\n",(0,i.jsx)(e.p,{children:"Makes the entity follow another entity while maintaining a certain distance."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Follow an entity at a certain distance\nlocomotor:Follow(target_entity, min_dist, target_dist, max_dist)\n\n-- Example of a companion pet following the player\nfunction SetupCompanionBehavior(inst, owner)\n    if inst.components.locomotor ~= nil then\n        -- Start following owner\n        inst.components.locomotor:Follow(owner, 2, 3, 6)\n        \n        -- Adjust speeds based on owner\'s movement\n        inst:ListenForEvent("locomote", function(owner)\n            if owner.components.locomotor:WantsToRun() then\n                inst.components.locomotor:SetRunSpeed(owner.components.locomotor.runspeed * 1.2)\n                inst.components.locomotor:StartRunning()\n            else\n                inst.components.locomotor:SetWalkSpeed(owner.components.locomotor.walkspeed * 1.1)\n                inst.components.locomotor:StartWalking()\n            end\n        end, owner)\n        \n        -- Stop following when owner teleports or goes too far\n        inst:DoPeriodicTask(1, function(inst)\n            local ix, iy, iz = inst.Transform:GetWorldPosition()\n            local ox, oy, oz = owner.Transform:GetWorldPosition()\n            local dist = math.sqrt((ix - ox)^2 + (iz - oz)^2)\n            \n            if dist > 20 then\n                -- Teleport companion if they get too far from owner\n                inst.Physics:Teleport(ox + math.random(-2,2), 0, oz + math.random(-2,2))\n                inst.components.locomotor:Stop()\n                inst.components.locomotor:Follow(owner, 2, 3, 6)\n            elseif dist > 10 then\n                -- Run to catch up if getting far\n                inst.components.locomotor:StartRunning()\n            end\n        end)\n    end\nend\n\n-- Example of a herding behavior with multiple followers\nfunction SetupHerdFollowing(herdLeader, herdMembers)\n    -- Each herd member follows the leader\n    for i, member in ipairs(herdMembers) do\n        if member ~= herdLeader and member.components.locomotor ~= nil then\n            -- Stagger follow distances to avoid crowding\n            local minDist = 2 + i * 0.5\n            local targetDist = 3 + i * 0.5\n            local maxDist = 5 + i * 0.5\n            \n            member.components.locomotor:Follow(herdLeader, minDist, targetDist, maxDist)\n            \n            -- Match speed with the leader\n            member:ListenForEvent("startrunning", function(leader)\n                member.components.locomotor:StartRunning()\n            end, herdLeader)\n            \n            member:ListenForEvent("startwalking", function(leader)\n                member.components.locomotor:StartWalking()\n            end, herdLeader)\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h4,{id:"pushawayfrom",children:"PushAwayFrom"}),"\n",(0,i.jsx)(e.p,{children:"Pushes the entity away from a point or entity."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Push entity away from a point\nlocomotor:PushAwayFrom(Vector3(x, y, z), dist)\n\n-- Example of knockback effect in combat\nfunction ApplyKnockback(target, attacker, power)\n    if target.components.locomotor ~= nil then\n        local tx, ty, tz = target.Transform:GetWorldPosition()\n        local ax, ay, az = attacker.Transform:GetWorldPosition()\n        \n        -- Calculate direction vector from attacker to target\n        local dx, dz = tx - ax, tz - az\n        local norm = math.sqrt(dx * dx + dz * dz)\n        \n        -- Normalize and scale by power\n        if norm > 0 then\n            dx, dz = dx / norm * power, dz / norm * power\n        else\n            dx, dz = 0, power -- Default to push north if vectors are the same\n        end\n        \n        -- Apply knockback\n        target.components.locomotor:Stop()\n        target.components.locomotor:PushAwayFrom(Vector3(ax, ay, az), power)\n        \n        -- Stun briefly after knockback\n        target:DoTaskInTime(0.2, function(inst)\n            if inst.components.locomotor ~= nil then\n                inst.components.locomotor:Stop()\n            end\n        end)\n    end\nend\n\n-- Example of explosion knockback affecting multiple entities\nfunction ExplosionKnockback(center, radius, power)\n    local x, y, z = center:Get()\n    \n    -- Find all entities in radius\n    local ents = TheSim:FindEntities(x, y, z, radius, nil, {"INLIMBO"})\n    \n    for i, v in ipairs(ents) do\n        if v.components.locomotor ~= nil then\n            -- Calculate distance from explosion\n            local vx, vy, vz = v.Transform:GetWorldPosition()\n            local dist = math.sqrt((vx - x)^2 + (vz - z)^2)\n            \n            if dist > 0 then\n                -- Scale power based on distance (closer = stronger knockback)\n                local scaledPower = power * (1 - dist/radius)\n                if scaledPower > 0 then\n                    -- Apply knockback\n                    v.components.locomotor:PushAwayFrom(center, scaledPower)\n                    \n                    -- Maybe apply damage too\n                    if v.components.health ~= nil then\n                        v.components.health:DoDelta(-scaledPower * 5)\n                    end\n                end\n            end\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"movement-states",children:"Movement States"}),"\n",(0,i.jsx)(e.p,{children:"The locomotor handles different movement states:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Idle"}),": Not moving"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Walking"}),": Moving at walk speed"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Running"}),": Moving at run speed"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Following"}),": Following another entity"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Avoiding"}),": Avoiding obstacles or threats"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(e.h3,{id:"combat-integration",children:"Combat Integration"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Example of locomotor integration with combat for chase behavior\nfunction SetupCombatMovement(inst)\n    -- When acquiring a new target\n    inst:ListenForEvent("newcombattarget", function(inst, data)\n        if data.target ~= nil and inst.components.locomotor ~= nil then\n            -- Start chasing the target\n            inst.components.locomotor:StartRunning()\n            inst.components.locomotor:GoToEntity(data.target)\n            \n            -- Follow target at attack range\n            local attackRange = inst.components.combat.attackrange or 3\n            inst.components.locomotor:Follow(data.target, attackRange*0.5, attackRange*0.75, attackRange)\n        end\n    end)\n    \n    -- When losing a target\n    inst:ListenForEvent("droppedtarget", function(inst)\n        if inst.components.locomotor ~= nil then\n            inst.components.locomotor:Stop()\n            -- Maybe wander after losing target\n            inst:DoTaskInTime(2, function()\n                if inst.components.locomotor ~= nil then\n                    inst.components.locomotor:StartWalking()\n                    \n                    local x, y, z = inst.Transform:GetWorldPosition()\n                    local wanderPoint = Vector3(x + math.random(-5, 5), 0, z + math.random(-5, 5))\n                    inst.components.locomotor:GoToPoint(wanderPoint)\n                end\n            end)\n        end\n    end)\n    \n    -- Periodic combat update\n    inst:DoPeriodicTask(0.5, function()\n        local target = inst.components.combat.target\n        if target ~= nil and inst.components.locomotor ~= nil then\n            -- Get distance to target\n            local ix, iy, iz = inst.Transform:GetWorldPosition()\n            local tx, ty, tz = target.Transform:GetWorldPosition()\n            local dist = math.sqrt((ix - tx)^2 + (iz - tz)^2)\n            \n            -- If within attack range, stop and attack\n            if dist <= inst.components.combat.attackrange then\n                inst.components.locomotor:Stop()\n                inst.components.combat:DoAttack()\n            else\n                -- Otherwise continue chase\n                inst.components.locomotor:GoToEntity(target)\n            end\n        end\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"health-integration",children:"Health Integration"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Example of locomotor integration with health for flee behavior\nfunction SetupFleeWhenInjured(inst)\n    -- Track health state\n    local oldHealth = 1.0\n    \n    inst:ListenForEvent("healthdelta", function(inst, data)\n        if inst.components.locomotor ~= nil then\n            local healthPercent = inst.components.health:GetPercent()\n            \n            -- Flee when health drops significantly\n            if healthPercent < oldHealth and (oldHealth - healthPercent) > 0.2 then\n                -- Find direction away from threat\n                local threatSource = data.cause or data.afflicter\n                if threatSource ~= nil then\n                    -- Run away from threat\n                    inst.components.locomotor:StartRunning()\n                    inst.components.locomotor:PushAwayFrom(threatSource:GetPosition(), 15)\n                    \n                    -- Stop running after a bit\n                    inst:DoTaskInTime(3, function(inst)\n                        if inst.components.locomotor ~= nil then\n                            inst.components.locomotor:StartWalking()\n                        end\n                    end)\n                end\n            end\n            \n            -- Update old health for next comparison\n            oldHealth = healthPercent\n            \n            -- Move slower when badly injured\n            if healthPercent < 0.3 then\n                inst.components.locomotor:SetExternalSpeedMultiplier("injured", 0.7)\n            else\n                inst.components.locomotor:RemoveExternalSpeedMultiplier("injured")\n            end\n        end\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"sanity-integration",children:"Sanity Integration"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Example of locomotor affected by sanity\nfunction SetupSanityMovement(inst)\n    inst:DoPeriodicTask(1, function()\n        if inst.components.locomotor ~= nil and inst.components.sanity ~= nil then\n            local sanityPercent = inst.components.sanity:GetPercent()\n            \n            -- Movement becomes erratic at low sanity\n            if sanityPercent < 0.3 then\n                -- Random chance to twitch/change direction\n                if math.random() < 0.3 then\n                    -- Stop briefly\n                    inst.components.locomotor:Stop()\n                    \n                    -- Then go in a random direction\n                    inst:DoTaskInTime(0.3, function()\n                        if inst.components.locomotor ~= nil then\n                            local x, y, z = inst.Transform:GetWorldPosition()\n                            local angle = math.random() * 2 * math.pi\n                            local point = Vector3(x + math.cos(angle) * 3, 0, z + math.sin(angle) * 3)\n                            inst.components.locomotor:StartWalking()\n                            inst.components.locomotor:GoToPoint(point)\n                        end\n                    end)\n                end\n                \n                -- Vision warping effect (simulated by irregular speed)\n                local warpFactor = 0.7 + math.sin(GetTime() * 5) * 0.3\n                inst.components.locomotor:SetExternalSpeedMultiplier("sanity", warpFactor)\n            else\n                -- Normal movement at higher sanity\n                inst.components.locomotor:RemoveExternalSpeedMultiplier("sanity")\n            end\n        end\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/combat",children:"Combat Component"})," - For movement during combat"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/other-components",children:"Physics Component"})," - For physical collision during movement"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/stategraph-system",children:"State Graph System"})," - For animation states during movement"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/equippable",children:"Equippable Component"})," - For items that affect movement speed"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/temperature",children:"Temperature Component"})," - For temperature effects on movement"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"example-creating-a-comprehensive-movement-entity",children:"Example: Creating a Comprehensive Movement Entity"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local function MakeAdvancedMovingEntity()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddPhysics()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddSoundEmitter()\n    \n    -- Setup physics\n    inst.Physics:SetMass(10)\n    inst.Physics:SetFriction(0.1)\n    inst.Physics:SetDamping(5)\n    inst.Physics:SetCollisionGroup(COLLISION.CHARACTERS)\n    inst.Physics:SetCollisionMask(COLLISION.WORLD + COLLISION.OBSTACLES + COLLISION.CHARACTERS)\n    inst.Physics:SetCylinder(0.5, 1)\n    \n    -- Add locomotor for movement\n    inst:AddComponent("locomotor")\n    local locomotor = inst.components.locomotor\n    locomotor:SetSlowMultiplier(0.6)\n    locomotor:SetTriggersCreep(true)\n    locomotor:SetFasterOnRoad(true)\n    locomotor:SetWalkSpeed(4)\n    locomotor:SetRunSpeed(7)\n    \n    -- Add state graph for animations\n    inst:SetStateGraph("SGcreature")\n    \n    -- Add custom patrol behavior\n    local patrolPoints = {\n        Vector3(10, 0, 10),\n        Vector3(-10, 0, 10),\n        Vector3(-10, 0, -10),\n        Vector3(10, 0, -10)\n    }\n    \n    local currentPatrolIndex = 1\n    local isPatrolling = true\n    \n    -- Function to go to next patrol point\n    local function GoToNextPatrolPoint()\n        if isPatrolling and inst.components.locomotor ~= nil then\n            local targetPoint = patrolPoints[currentPatrolIndex]\n            inst.components.locomotor:GoToPoint(targetPoint)\n            \n            -- Update patrol index for next time\n            currentPatrolIndex = currentPatrolIndex % #patrolPoints + 1\n        end\n    end\n    \n    -- Start patrolling and periodically check if reached destination\n    inst:DoTaskInTime(1, GoToNextPatrolPoint)\n    \n    inst:DoPeriodicTask(1, function()\n        if isPatrolling and inst.components.locomotor ~= nil then\n            local x, y, z = inst.Transform:GetWorldPosition()\n            local targetPoint = patrolPoints[currentPatrolIndex - 1 > 0 and currentPatrolIndex - 1 or #patrolPoints]\n            local tx, ty, tz = targetPoint:Get()\n            \n            if math.sqrt((x - tx)^2 + (z - tz)^2) < 2 then\n                -- Reached destination, wait a bit then go to next point\n                inst.components.locomotor:Stop()\n                inst:DoTaskInTime(2, GoToNextPatrolPoint)\n            end\n        end\n    end)\n    \n    -- Add detection of players for aggressive behavior\n    inst:DoPeriodicTask(2, function()\n        if inst.components.locomotor ~= nil then\n            local x, y, z = inst.Transform:GetWorldPosition()\n            local player = FindClosestPlayerInRange(x, y, z, 10)\n            \n            if player ~= nil then\n                -- Stop patrolling and chase player\n                isPatrolling = false\n                inst.components.locomotor:StartRunning()\n                inst.components.locomotor:GoToEntity(player)\n                \n                -- Resume patrol after losing interest\n                inst:DoTaskInTime(10, function()\n                    if inst.components.locomotor ~= nil then\n                        isPatrolling = true\n                        GoToNextPatrolPoint()\n                    end\n                end)\n            end\n        end\n    end)\n    \n    return inst\nend \n'})})]})}function m(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>l});var o=t(6540);const i={},r=o.createContext(i);function a(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);