"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9905],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var i=s(96540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},58469:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"game-scripts/core-systems/development-tools/debugging/debugprint","title":"Debug Print","description":"Enhanced print functions with source line tracking and logger management for debugging purposes","source":"@site/docs/game-scripts/core-systems/development-tools/debugging/debugprint.md","sourceDirName":"game-scripts/core-systems/development-tools/debugging","slug":"/game-scripts/core-systems/development-tools/debugging/debugprint","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugprint","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"debugprint","title":"Debug Print","description":"Enhanced print functions with source line tracking and logger management for debugging purposes","sidebar_position":6,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Debug Menu","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugmenu"},"next":{"title":"Debug Sounds","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugsounds"}}');var r=s(74848),l=s(28453);const t={id:"debugprint",title:"Debug Print",description:"Enhanced print functions with source line tracking and logger management for debugging purposes",sidebar_position:6,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},o="Debug Print",d={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Global Variables",id:"global-variables",level:2},{value:"PRINT_SOURCE",id:"print_source",level:3},{value:"Functions",id:"functions",level:2},{value:"AddPrintLogger(fn)",id:"addprintlogger",level:3},{value:"print(...)",id:"print-enhanced",level:3},{value:"nolineprint(...)",id:"nolineprint",level:3},{value:"GetConsoleOutputList()",id:"getconsoleoutputlist",level:3},{value:"Internal Functions",id:"internal-functions",level:2},{value:"escape_lua_pattern(s)",id:"escape-lua-pattern",level:3},{value:"packstring(...)",id:"packstring",level:3},{value:"Configuration",id:"configuration",level:2},{value:"MAX_CONSOLE_LINES",id:"max_console_lines",level:3},{value:"Logger Management",id:"logger-management",level:2},{value:"Platform Considerations",id:"platform-considerations",level:2},{value:"Source Line Format",id:"source-line-format",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"debug-print",children:"Debug Print"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"debugprint"})," module enhances the standard print functionality with source line tracking, multiple logger support, and console output management. It provides enhanced debugging capabilities by showing file names and line numbers for print statements."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Enable source line printing\nPRINT_SOURCE = true\n\n-- Add a custom logger\nAddPrintLogger(function(str) \n    log_file:write(str .. "\\n") \nend)\n\n-- Use enhanced print (will show line numbers)\nprint("Debug message")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"global-variables",children:"Global Variables"}),"\n",(0,r.jsx)(n.h3,{id:"print_source",children:"PRINT_SOURCE"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nControls whether print statements include source file and line number information."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'PRINT_SOURCE = true\nprint("Hello") -- Output: "main.lua(25,1) Hello"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"addprintlogger",children:"AddPrintLogger(fn)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nAdds a custom logger function that will receive all print output."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (function): Logger function that accepts a string parameter"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add file logger\nAddPrintLogger(function(str)\n    local file = io.open("debug.log", "a")\n    file:write(os.date() .. ": " .. str .. "\\n")\n    file:close()\nend)\n\n-- Add network logger\nAddPrintLogger(function(str)\n    SendDebugMessage(str)\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"print-enhanced",children:"print(...)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})," (overridden)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nEnhanced version of the standard print function that supports source line tracking and multiple loggers."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"..."})," (any): Variable arguments to print"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"PRINT_SOURCE"})," is true, prepends source file and line number"]}),"\n",(0,r.jsx)(n.li,{children:"Passes output to all registered print loggers"}),"\n",(0,r.jsx)(n.li,{children:"Converts all arguments to strings separated by tabs"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'PRINT_SOURCE = true\nprint("Value:", 42, "Status:", true)\n-- Output: "script.lua(15,1) Value:\t42\tStatus:\ttrue"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nolineprint",children:"nolineprint(...)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nPrint function that bypasses source line tracking, useful for interactive console output."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"..."})," (any): Variable arguments to print"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Interactive console command\nfunction ExecuteCommand(cmd)\n    local result = loadstring(cmd)()\n    nolineprint("Result:", result) -- No line number shown\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"getconsoleoutputlist",children:"GetConsoleOutputList()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nReturns the list of recent console output lines for display in debug interfaces."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Array of recent output lines (limited to MAX_CONSOLE_LINES)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Display recent console output\nlocal lines = GetConsoleOutputList()\nfor i, line in ipairs(lines) do\n    DisplayConsoleLine(line)\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"internal-functions",children:"Internal Functions"}),"\n",(0,r.jsx)(n.h3,{id:"escape-lua-pattern",children:"escape_lua_pattern(s)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nEscapes special Lua pattern matching characters in a string."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"s"})," (string): String to escape"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Escaped string safe for pattern matching"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local pattern = escape_lua_pattern("file.lua")\n-- Returns "file%.lua"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"packstring",children:"packstring(...)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInternal function that converts multiple arguments to a tab-separated string."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"..."})," (any): Variable arguments to pack"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Tab-separated string of all arguments"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"max_console_lines",children:"MAX_CONSOLE_LINES"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Value:"})," ",(0,r.jsx)(n.code,{children:"20"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nMaximum number of console output lines to keep in memory for debug display."]}),"\n",(0,r.jsx)(n.h2,{id:"logger-management",children:"Logger Management"}),"\n",(0,r.jsx)(n.p,{children:"The module maintains an internal list of print loggers that receive all print output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Internal logger list\nlocal print_loggers = {}\n\n-- Console logger (automatically added on non-console platforms)\nlocal consolelog = function(...)\n    local str = packstring(...)\n    str = string.gsub(str, dir, "") -- Remove working directory from paths\n    \n    for idx, line in ipairs(string.split(str, "\\r\\n")) do\n        table.insert(debugstr, line)\n    end\n    \n    while #debugstr > MAX_CONSOLE_LINES do\n        table.remove(debugstr, 1)\n    end\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"platform-considerations",children:"Platform Considerations"}),"\n",(0,r.jsx)(n.p,{children:"The module automatically adds a console logger when running on non-console platforms:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"if IsNotConsole() then\n    AddPrintLogger(consolelog)\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"source-line-format",children:"Source Line Format"}),"\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"PRINT_SOURCE"})," is enabled, output follows this format:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"filename(line,column) message\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"scripts/main.lua(42,1) Player spawned at position (100, 0, 200)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Setup debug printing\nPRINT_SOURCE = true\n\n-- Add file logger\nlocal log_file = io.open("game_debug.log", "w")\nAddPrintLogger(function(str)\n    log_file:write(str .. "\\n")\n    log_file:flush()\nend)\n\n-- Add timestamp logger\nAddPrintLogger(function(str)\n    local timestamp = os.date("%H:%M:%S")\n    print("[" .. timestamp .. "] " .. str)\nend)\n\n-- Use enhanced printing\nprint("Game started")\nprint("Player health:", player.health)\n\n-- Use no-line printing for user interaction\nfunction HandleUserInput(input)\n    local result = ProcessCommand(input)\n    nolineprint("Command result:", result)\nend\n\n-- Display recent console output\nfunction ShowDebugConsole()\n    local lines = GetConsoleOutputList()\n    for i, line in ipairs(lines) do\n        DrawConsoleLine(i, line)\n    end\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugtools",children:"Debug Tools"}),": Additional debugging utilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugcommands",children:"Debug Commands"}),": Command-line debugging interface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./consolecommands.md",children:"Console Commands"}),": Console command system"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);