"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4284],{8389:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-vanilla/updates/mod-updating-guide","title":"Updating Mods for API Changes","description":"Last Update: 2023-08-01","source":"@site/docs/api-vanilla/updates/mod-updating-guide.md","sourceDirName":"api-vanilla/updates","slug":"/api-vanilla/updates/mod-updating-guide","permalink":"/dst-api-webdocs/docs/api-vanilla/updates/mod-updating-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"mod-updating-guide","title":"Updating Mods for API Changes","sidebar_position":7,"last_updated":"2023-08-01T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Mod Release IDs","permalink":"/dst-api-webdocs/docs/api-vanilla/updates/mod-release-ids"},"next":{"title":"Deprecated Features and Alternatives","permalink":"/dst-api-webdocs/docs/api-vanilla/updates/deprecated-features"}}');var a=i(4848),s=i(8453);const o={id:"mod-updating-guide",title:"Updating Mods for API Changes",sidebar_position:7,last_updated:new Date("2023-08-01T00:00:00.000Z")},r="Updating Mods for API Changes",l={},d=[{value:"Understanding API Changes",id:"understanding-api-changes",level:2},{value:"Monitoring for Changes",id:"monitoring-for-changes",level:2},{value:"Defensive Coding Practices",id:"defensive-coding-practices",level:2},{value:"Check for Feature Existence",id:"check-for-feature-existence",level:3},{value:"Version Detection",id:"version-detection",level:3},{value:"Feature Detection",id:"feature-detection",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"Handling Common API Changes",id:"handling-common-api-changes",level:2},{value:"Component Changes",id:"component-changes",level:3},{value:"Function Signature Changes",id:"function-signature-changes",level:3},{value:"Network Synchronization Changes",id:"network-synchronization-changes",level:3},{value:"Testing Your Updated Mod",id:"testing-your-updated-mod",level:2},{value:"Communicating Changes to Users",id:"communicating-changes-to-users",level:2},{value:"Backward Compatibility Techniques",id:"backward-compatibility-techniques",level:2},{value:"Wrapper Functions",id:"wrapper-functions",level:3},{value:"Feature Toggles",id:"feature-toggles",level:3},{value:"Compatibility Layers",id:"compatibility-layers",level:3},{value:"Example: Updating a Mod for Major API Changes",id:"example-updating-a-mod-for-major-api-changes",level:2},{value:"Original Mod (Pre-Update)",id:"original-mod-pre-update",level:3},{value:"Updated Mod (Post-Update)",id:"updated-mod-post-update",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Last Update: 2023-08-01"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"updating-mods-for-api-changes",children:"Updating Mods for API Changes"})}),"\n",(0,a.jsx)(n.p,{children:"This guide provides strategies and best practices for updating your mods when the Don't Starve Together API changes. Keeping your mods compatible with the latest game version ensures they continue to function correctly and provide a good experience for users."}),"\n",(0,a.jsx)(n.h2,{id:"understanding-api-changes",children:"Understanding API Changes"}),"\n",(0,a.jsx)(n.p,{children:"API changes in Don't Starve Together generally fall into these categories:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Additions"}),": New components, functions, or properties that expand functionality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Modifications"}),": Changes to existing components or functions that may alter behavior"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deprecations"}),": Features that still work but are planned for removal"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Removals"}),": Features that have been completely removed"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For a detailed history of all API changes, refer to the ",(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/updates/api-changelog",children:"API Changelog"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"monitoring-for-changes",children:"Monitoring for Changes"}),"\n",(0,a.jsx)(n.p,{children:"Stay informed about API changes through these channels:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Official Klei Forums"}),": Check the ",(0,a.jsx)(n.a,{href:"https://forums.kleientertainment.com/game-updates/dst/",children:"Game Updates"}),' section, especially the "Notes for Modders" area']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"API Changelog"}),": Review our comprehensive ",(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/updates/api-changelog",children:"API Changelog"})," which documents all significant API changes between versions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Steam Beta Branch"}),": Opt into beta branches to test your mods before updates go live"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Community Discord"}),": Join modding communities where changes are often discussed"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["When a new game update is released, your first step should always be to check the ",(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/updates/api-changelog",children:"API Changelog"})," to identify any changes that might affect your mod."]}),"\n",(0,a.jsx)(n.h2,{id:"defensive-coding-practices",children:"Defensive Coding Practices"}),"\n",(0,a.jsx)(n.h3,{id:"check-for-feature-existence",children:"Check for Feature Existence"}),"\n",(0,a.jsx)(n.p,{children:"Always verify that functions and components exist before using them:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Check if a function exists\nif TheWorld.net.components.weather ~= nil and TheWorld.net.components.weather.GetMoisture ~= nil then\n    local moisture = TheWorld.net.components.weather:GetMoisture()\nelse\n    -- Fallback behavior\nend\n\n-- Check if a component exists\nif inst.components.new_component ~= nil then\n    inst.components.new_component:DoSomething()\nelse\n    -- Alternative approach\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"version-detection",children:"Version Detection"}),"\n",(0,a.jsx)(n.p,{children:"Adapt behavior based on the game version:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function GetGameVersion()\n    if TheSim and TheSim.GetGameVersion then\n        return TheSim:GetGameVersion()\n    end\n    return "0.0.0" -- Default for very old versions\nend\n\nlocal version = GetGameVersion()\nif version >= "500000" then -- Version format may vary\n    -- Use newer API\nelse\n    -- Use older API\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"feature-detection",children:"Feature Detection"}),"\n",(0,a.jsx)(n.p,{children:"When possible, check for specific features rather than version numbers:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Better than version checking in many cases\nif TheWorld.ismastershard ~= nil then\n    -- This is a newer version with shard support\nelse\n    -- This is an older version\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,a.jsx)(n.p,{children:"Design your mod to work (perhaps with reduced functionality) even when preferred APIs are unavailable:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local function TryUseNewFeature()\n    if SomeNewFunction ~= nil then\n        return SomeNewFunction()\n    else\n        -- Fallback implementation that works on older versions\n        return LegacyImplementation()\n    end\nend\n"})}),"\n",(0,a.jsx)(n.h2,{id:"handling-common-api-changes",children:"Handling Common API Changes"}),"\n",(0,a.jsx)(n.h3,{id:"component-changes",children:"Component Changes"}),"\n",(0,a.jsx)(n.p,{children:"When components change:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Handle renamed component\nlocal health_component = inst.components.health or inst.components.old_health_name\n\n-- Handle moved functionality\nlocal function GetHealth(inst)\n    if inst.components.health ~= nil then\n        return inst.components.health.currenthealth\n    elseif inst.replica.health ~= nil then\n        return inst.replica.health:GetCurrent()\n    end\n    return 0\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"function-signature-changes",children:"Function Signature Changes"}),"\n",(0,a.jsx)(n.p,{children:"When function parameters change:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Handle added parameters\nlocal function SafeCall(inst, fn_name, ...)\n    local fn = inst[fn_name]\n    if fn ~= nil then\n        -- Try new signature first\n        local success, result = pcall(function() return fn(inst, ...) end)\n        if success then\n            return result\n        end\n        \n        -- Try old signature as fallback\n        return fn(inst)\n    end\n    return nil\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"network-synchronization-changes",children:"Network Synchronization Changes"}),"\n",(0,a.jsx)(n.p,{children:"When networking changes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Handle changes in network variable synchronization\nlocal function SetupNetworking(inst)\n    if TheWorld.ismastersim then\n        -- Server-side\n        if inst.components.health ~= nil then\n            -- New API\n            if inst.components.health.SetNetworkID ~= nil then\n                inst.components.health:SetNetworkID("health_" .. tostring(inst.GUID))\n            end\n            -- Old API fallback otherwise\n        end\n    end\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"testing-your-updated-mod",children:"Testing Your Updated Mod"}),"\n",(0,a.jsx)(n.p,{children:"After updating your mod for API changes:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test in Single Player"}),": Verify basic functionality works"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test in Multiplayer"}),": Check for synchronization issues"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test with Other Mods"}),": Ensure compatibility with popular mods"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test Edge Cases"}),": Try unusual scenarios that might trigger bugs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test Performance"}),": Check that your mod doesn't cause lag or crashes"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"communicating-changes-to-users",children:"Communicating Changes to Users"}),"\n",(0,a.jsx)(n.p,{children:"When updating your mod for API changes:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Update the Mod Description"}),": Note compatibility with game versions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Maintain a Changelog"}),": Document what changed and why"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Respond to Issues"}),": Address user-reported problems promptly"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consider Version Branches"}),": Maintain separate versions for major game updates if needed"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"backward-compatibility-techniques",children:"Backward Compatibility Techniques"}),"\n",(0,a.jsx)(n.h3,{id:"wrapper-functions",children:"Wrapper Functions"}),"\n",(0,a.jsx)(n.p,{children:"Create wrapper functions that work across versions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local function GetWorldTemperature()\n    if TheWorld.state ~= nil and TheWorld.state.temperature ~= nil then\n        -- New API\n        return TheWorld.state.temperature\n    elseif TheWorld.components.temperature ~= nil then\n        -- Old API\n        return TheWorld.components.temperature:GetCurrent()\n    else\n        -- Fallback\n        return 20 -- Default temperature\n    end\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"feature-toggles",children:"Feature Toggles"}),"\n",(0,a.jsx)(n.p,{children:"Use configuration options to enable/disable features based on compatibility:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local CONFIG = {\n    use_new_network_api = true,\n    use_legacy_combat = false,\n}\n\n-- Later in code\nif CONFIG.use_new_network_api and TheNet.GetClientTable ~= nil then\n    clients = TheNet:GetClientTable()\nelse\n    -- Legacy method to get clients\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"compatibility-layers",children:"Compatibility Layers"}),"\n",(0,a.jsx)(n.p,{children:"Create abstraction layers that normalize API differences:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local PlayerManager = {}\n\nfunction PlayerManager.GetPlayerByUserId(userid)\n    -- New method\n    if TheNet.GetClientTableForUser ~= nil then\n        local client = TheNet:GetClientTableForUser(userid)\n        if client ~= nil then\n            return client.player\n        end\n    end\n    \n    -- Old method\n    for i, v in ipairs(AllPlayers) do\n        if v.userid == userid then\n            return v\n        end\n    end\n    \n    return nil\nend\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-updating-a-mod-for-major-api-changes",children:"Example: Updating a Mod for Major API Changes"}),"\n",(0,a.jsx)(n.p,{children:"Here's an example of updating a simple mod that was built for an older version:"}),"\n",(0,a.jsx)(n.h3,{id:"original-mod-pre-update",children:"Original Mod (Pre-Update)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Old mod code\nlocal function OnInit()\n    -- Old API usage\n    local player = GetPlayer()\n    if player ~= nil then\n        player.old_component:DoSomething()\n    end\nend\n\nAddPrefabPostInit("world", function(inst)\n    inst:DoTaskInTime(0, OnInit)\nend)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"updated-mod-post-update",children:"Updated Mod (Post-Update)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- New mod code with compatibility\nlocal function OnInit()\n    -- Check for ThePlayer (new) or GetPlayer() (old)\n    local player = ThePlayer or (GetPlayer ~= nil and GetPlayer())\n    \n    if player ~= nil then\n        -- Try new component first, fall back to old\n        local component = player.new_component or player.old_component\n        if component ~= nil then\n            -- Check if the method exists\n            if component.DoSomething ~= nil then\n                component:DoSomething()\n            elseif component.DoSomethingNew ~= nil then\n                -- Method was renamed\n                component:DoSomethingNew()\n            end\n        end\n    end\nend\n\n-- Works in both single and multi-player\nAddPrefabPostInit("world", function(inst)\n    inst:DoTaskInTime(0, OnInit)\nend)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"Updating mods for API changes requires vigilance, testing, and good coding practices. By following the strategies in this guide, you can maintain compatibility with new game versions while still supporting older versions when possible."}),"\n",(0,a.jsx)(n.p,{children:"Remember that the Don't Starve Together modding community is collaborative - if you're struggling with API changes, don't hesitate to ask for help on the forums or Discord channels."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);