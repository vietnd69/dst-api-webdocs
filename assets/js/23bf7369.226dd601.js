"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4215],{5214:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"api-vanilla/data-types/colour","title":"Colour","description":"Colour is a data type representing colors in the game, typically using RGBA format with values from 0 to 1.","source":"@site/docs/api-vanilla/data-types/colour.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/colour","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/colour","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"colour","title":"Colour","sidebar_position":3},"sidebar":"docs","previous":{"title":"Vector","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/vector"},"next":{"title":"Network Variables","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/netvar"}}');var t=o(4848),r=o(8453);const i={id:"colour",title:"Colour",sidebar_position:3},a="Colour",s={},c=[{value:"Overview",id:"overview",level:2},{value:"Properties",id:"properties",level:2},{value:"Creating Colors",id:"creating-colors",level:2},{value:"Common Usage Examples",id:"common-usage-examples",level:2},{value:"Entity Tinting",id:"entity-tinting",level:3},{value:"UI Elements",id:"ui-elements",level:3},{value:"Lighting Effects",id:"lighting-effects",level:3},{value:"Color Operations",id:"color-operations",level:2},{value:"Common Predefined Colors",id:"common-predefined-colors",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"colour",children:"Colour"})}),"\n",(0,t.jsx)(n.p,{children:"Colour is a data type representing colors in the game, typically using RGBA format with values from 0 to 1."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"In Don't Starve Together, Colour objects are used to define:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Entity tinting"}),"\n",(0,t.jsx)(n.li,{children:"UI element colors"}),"\n",(0,t.jsx)(n.li,{children:"Lighting effects"}),"\n",(0,t.jsx)(n.li,{children:"Particle effects"}),"\n",(0,t.jsx)(n.li,{children:"Text colors"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The game uses a normalized color format where each component (Red, Green, Blue, Alpha) ranges from 0.0 to 1.0, rather than the traditional 0-255 range."}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.p,{children:"Colour objects have the following properties:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"r"}),": Red component (0.0 to 1.0)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"g"}),": Green component (0.0 to 1.0)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"b"}),": Blue component (0.0 to 1.0)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"a"}),": Alpha (transparency) component (0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully opaque)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"creating-colors",children:"Creating Colors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Create a new Color with RGBA values\nlocal red = Colour(1, 0, 0, 1)       -- Bright red\nlocal green = Colour(0, 1, 0, 1)     -- Bright green\nlocal blue = Colour(0, 0, 1, 1)      -- Bright blue\nlocal white = Colour(1, 1, 1, 1)     -- White\nlocal black = Colour(0, 0, 0, 1)     -- Black\nlocal transparent = Colour(1, 1, 1, 0) -- Fully transparent white\n\n-- Create a color with partial transparency\nlocal halfTransparentRed = Colour(1, 0, 0, 0.5)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-usage-examples",children:"Common Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"entity-tinting",children:"Entity Tinting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Set an entity's color (e.g., to indicate status effects)\ninst.AnimState:SetMultColour(colour.r, colour.g, colour.b, colour.a)\n\n-- Reset color to default (white)\ninst.AnimState:SetMultColour(1, 1, 1, 1)\n\n-- Tint an entity partially\ninst.AnimState:SetMultColour(0.8, 0.8, 1, 1) -- Slight blue tint\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ui-elements",children:"UI Elements"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Set widget text color\nwidget.text:SetColour(colour.r, colour.g, colour.b, colour.a)\n\n-- Create a colored UI image\nwidget.bg:SetTint(colour.r, colour.g, colour.b, colour.a)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"lighting-effects",children:"Lighting Effects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Create a colored light source\nlocal light = SpawnPrefab("lightsource")\nlight.Light:SetColour(colour.r, colour.g, colour.b)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"color-operations",children:"Color Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Blending colors (example implementation)\nlocal function BlendColors(color1, color2, weight)\n    weight = math.clamp(weight, 0, 1)\n    return Colour(\n        color1.r * (1 - weight) + color2.r * weight,\n        color1.g * (1 - weight) + color2.g * weight,\n        color1.b * (1 - weight) + color2.b * weight,\n        color1.a * (1 - weight) + color2.a * weight\n    )\nend\n\n-- Adjust brightness\nlocal function AdjustBrightness(color, factor)\n    return Colour(\n        math.min(color.r * factor, 1),\n        math.min(color.g * factor, 1),\n        math.min(color.b * factor, 1),\n        color.a\n    )\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-predefined-colors",children:"Common Predefined Colors"}),"\n",(0,t.jsx)(n.p,{children:"The game has several predefined color constants that are commonly used:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"DEFAULTCOLOUR = Colour(1, 1, 1, 1)       -- Default white\nNOLINECOLOUR = Colour(0, 0, 0, 0)        -- Transparent\nSCRAPBOOKCOLOUR = Colour(.75, .75, .75, 1) -- Light gray used in scrapbook\nWEBCOLOUR = Colour(.9, .9, .9, 1)        -- Off-white used in web elements\n"})}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always keep color component values within the 0-1 range, as exceeding these bounds can cause unexpected behavior"}),"\n",(0,t.jsx)(n.li,{children:"The alpha component is often ignored by certain rendering systems like lighting, which only use RGB"}),"\n",(0,t.jsx)(n.li,{children:"Colors in DST are typically stored as instances of the Colour class, not as tables"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var l=o(6540);const t={},r=l.createContext(t);function i(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);