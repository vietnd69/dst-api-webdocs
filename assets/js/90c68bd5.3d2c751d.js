"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7368],{7926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/core/event-system","title":"Event System","description":"Don\'t Starve Together uses an event system to manage and react to game state changes. This system allows entities to register listeners and respond to events from other entities.","source":"@site/docs/api-vanilla/core/event-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/event-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/event-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"event-system","title":"Event System","sidebar_position":3},"sidebar":"docs","previous":{"title":"EntityScript","permalink":"/dst-api-webdocs/docs/api-vanilla/core/entityscript"},"next":{"title":"State Graph System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/stategraph-system"}}');var i=t(4848),a=t(8453);const r={id:"event-system",title:"Event System",sidebar_position:3},o="Event System",l={},d=[{value:"Registering and Firing Events",id:"registering-and-firing-events",level:2},{value:"Key Methods",id:"key-methods",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"Unregistering Events",id:"unregistering-events",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Listening to events from the entity itself",id:"listening-to-events-from-the-entity-itself",level:3},{value:"Listening to events from another entity",id:"listening-to-events-from-another-entity",level:3},{value:"Firing events with data",id:"firing-events-with-data",level:3},{value:"Common Events",id:"common-events",level:2},{value:"Combat Events",id:"combat-events",level:3},{value:"Character Events",id:"character-events",level:3},{value:"World Events",id:"world-events",level:3},{value:"Entity Lifecycle Events",id:"entity-lifecycle-events",level:3},{value:"Network Events",id:"network-events",level:2},{value:"Creating Custom Events in Mods",id:"creating-custom-events-in-mods",level:2},{value:"Best Practices for Event System",id:"best-practices-for-event-system",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"event-system",children:"Event System"})}),"\n",(0,i.jsx)(n.p,{children:"Don't Starve Together uses an event system to manage and react to game state changes. This system allows entities to register listeners and respond to events from other entities."}),"\n",(0,i.jsx)(n.p,{children:"The event system is a fundamental part of the game's architecture, enabling communication between different components and entities. It follows a publisher-subscriber pattern, where entities can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Publish (fire) events"})," when something happens"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Subscribe (listen) to events"})," to react when they occur"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unsubscribe (remove listeners)"})," when no longer needed"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This approach creates a loosely coupled system where components don't need direct knowledge of each other to interact, making the codebase more modular and easier to extend."}),"\n",(0,i.jsx)(n.h2,{id:"registering-and-firing-events",children:"Registering and Firing Events"}),"\n",(0,i.jsx)(n.p,{children:"The event system has two primary operations: registering event listeners and firing events. These operations form the foundation of event-based communication in the game."}),"\n",(0,i.jsx)(n.h3,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Register event listener\ninst:ListenForEvent(event_name, fn, source)\n\n-- Fire event\ninst:PushEvent(event_name, data)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Where:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"event_name"}),': Name of the event (string) - identifies what happened (e.g., "death", "attacked")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"}),": Callback function called when the event occurs - contains the code that should run in response"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"source"}),": (Optional) Source entity firing the event - if not specified, listens from all sources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data"}),": (Optional) Data sent with the event, usually a table - provides additional context about the event"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsxs)(n.p,{children:["When you call ",(0,i.jsx)(n.code,{children:"ListenForEvent()"}),', you\'re essentially saying: "When this specific event happens, run this function." The event system maintains internal tables of registered listeners and notifies them when relevant events occur.']}),"\n",(0,i.jsxs)(n.p,{children:["When you call ",(0,i.jsx)(n.code,{children:"PushEvent()"}),", the system checks for all listeners registered for that event and calls their callback functions, passing any provided data."]}),"\n",(0,i.jsx)(n.h2,{id:"unregistering-events",children:"Unregistering Events"}),"\n",(0,i.jsx)(n.p,{children:"To prevent memory leaks and ensure proper cleanup, it's important to remove event listeners when they're no longer needed, especially for temporary entities."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Unregister event listener\ninst:RemoveEventCallback(event_name, fn, source)\n\n-- Unregister all event listeners\ninst:RemoveAllEventCallbacks()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When removing a listener, you need to provide the same parameters that were used when registering it: the event name, function reference, and source (if specified). Alternatively, ",(0,i.jsx)(n.code,{children:"RemoveAllEventCallbacks()"})," removes all listeners from an entity at once, which is useful during cleanup operations."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.p,{children:"The following examples demonstrate common patterns for using the event system in Don't Starve Together."}),"\n",(0,i.jsx)(n.h3,{id:"listening-to-events-from-the-entity-itself",children:"Listening to events from the entity itself"}),"\n",(0,i.jsx)(n.p,{children:"One of the most common uses of events is to have an entity react to its own state changes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Entity listens to "attacked" event from itself\ninst:ListenForEvent("attacked", function(inst, data)\n    print("Attacked by: " .. tostring(data.attacker))\n    print("Damage: " .. tostring(data.damage))\n    \n    -- Example: Play a unique sound when attacked\n    if inst.SoundEmitter then\n        inst.SoundEmitter:PlaySound("dontstarve/creatures/monster_hurt")\n    end\n    \n    -- Example: Notify nearby allies\n    local x, y, z = inst.Transform:GetWorldPosition()\n    local allies = TheSim:FindEntities(x, y, z, 20, {"ally"})\n    for _, ally in ipairs(allies) do\n        ally:PushEvent("allythreatened", {threatener = data.attacker})\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this example, when the entity is attacked:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"It prints information about the attack"}),"\n",(0,i.jsx)(n.li,{children:"Plays a sound effect"}),"\n",(0,i.jsx)(n.li,{children:"Notifies nearby allies about the threat"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"listening-to-events-from-another-entity",children:"Listening to events from another entity"}),"\n",(0,i.jsx)(n.p,{children:"You can also listen to events fired by other entities, which is useful for creating interactions between entities:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Entity listens to "death" event from target\ninst:ListenForEvent("death", function(target)\n    print(target.prefab .. " has died!")\n    \n    -- Example: Celebrate when target dies\n    if inst.components.talker then\n        inst.components.talker:Say("I\'ve defeated " .. target:GetDisplayName() .. "!")\n    end\n    \n    -- Example: Grant experience reward\n    if inst.components.combat then\n        inst.components.combat.externaldamagetakenmultipliers:SetModifier("victory", 0.9, "victory_buff")\n        -- Remove the buff after 10 seconds\n        inst:DoTaskInTime(10, function() \n            inst.components.combat.externaldamagetakenmultipliers:RemoveModifier("victory") \n        end)\n    end\nend, target)\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this example:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The entity listens for when a specific target entity dies"}),"\n",(0,i.jsx)(n.li,{children:'Makes the entity "say" something when the target dies'}),"\n",(0,i.jsx)(n.li,{children:"Grants a temporary combat buff to the entity"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"firing-events-with-data",children:"Firing events with data"}),"\n",(0,i.jsx)(n.p,{children:"You can fire custom events with additional data to communicate between different parts of your code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Fire "customaction" event with data\ninst:PushEvent("customaction", { \n    target = target_entity, \n    value = 10,\n    location = Vector3(inst.Transform:GetWorldPosition()),\n    success = true\n})\n'})}),"\n",(0,i.jsx)(n.p,{children:"This pattern is particularly useful when:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You need to communicate between different components on the same entity"}),"\n",(0,i.jsx)(n.li,{children:"You want to broadcast information to multiple listeners"}),"\n",(0,i.jsx)(n.li,{children:"You want to decouple the action trigger from the action handler"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-events",children:"Common Events"}),"\n",(0,i.jsx)(n.p,{children:"Don't Starve Together has numerous built-in events that you can listen for in your mods. Below are some of the most frequently used events organized by category. Understanding these events allows you to respond to various game situations effectively."}),"\n",(0,i.jsx)(n.h3,{id:"combat-events",children:"Combat Events"}),"\n",(0,i.jsx)(n.p,{children:"Combat events are triggered during fights and interactions between entities that can deal or receive damage."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- When entity is attacked\n-- data: { attacker, damage, damageresolved, original_damage, weapon, stimuli, spdamage, redirected, noimpactsound }\ninst:ListenForEvent("attacked", function(inst, data)\n    -- The \'data\' table contains detailed information about the attack\n    local attacker = data.attacker -- Entity that performed the attack\n    local damage = data.damage -- Final damage after all modifiers\n    local original_damage = data.original_damage -- Damage before modifiers\n    \n    -- Example: Apply a counter-effect when attacked by spiders\n    if attacker and attacker:HasTag("spider") then\n        attacker:PushEvent("attacked", {attacker = inst, damage = damage * 0.5})\n    end\nend)\n\n-- When entity dies\ninst:ListenForEvent("death", function(inst)\n    -- This is often used for:\n    -- - Playing death animations or sounds\n    -- - Dropping special loot\n    -- - Triggering world events\n    \n    -- Example: Spawn flies when a monster dies\n    for i = 1, 3 do\n        local fly = SpawnPrefab("fly")\n        local x, y, z = inst.Transform:GetWorldPosition()\n        fly.Transform:SetPosition(x + math.random(-2, 2), y, z + math.random(-2, 2))\n    end\nend)\n\n-- When entity damages another entity\ninst:ListenForEvent("onhitother", function(inst, data)\n    -- data contains: target, damage, stimuli, etc.\n    local target = data.target\n    local damage = data.damage\n    \n    -- Example: Apply a burning effect on hit\n    if inst.components.burnable and inst.components.burnable:IsBurning() and\n       target.components.burnable and not target.components.burnable:IsBurning() then\n        target.components.burnable:Ignite()\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"character-events",children:"Character Events"}),"\n",(0,i.jsx)(n.p,{children:"Character events relate to player characters and their stats, providing ways to respond to changes in hunger, health, sanity, and equipment."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- When character\'s hunger changes\ninst:ListenForEvent("hungerdelta", function(inst, data)\n    -- data.newpercent - new hunger percentage\n    -- data.oldpercent - previous hunger percentage\n    -- data.delta - amount changed\n    \n    -- Example: Make the character move slower when very hungry\n    if data.newpercent < 0.2 and inst.components.locomotor then\n        inst.components.locomotor:SetExternalSpeedMultiplier("hunger_penalty", 0.7)\n    elseif data.newpercent >= 0.2 and inst.components.locomotor then\n        inst.components.locomotor:RemoveExternalSpeedMultiplier("hunger_penalty")\n    end\nend)\n\n-- When character\'s health changes\ninst:ListenForEvent("healthdelta", function(inst, data)\n    -- Similar structure to hungerdelta\n    -- Example: Create a visual effect when health is very low\n    if data.newpercent < 0.1 then\n        local fx = SpawnPrefab("hitsparks")\n        fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n    end\nend)\n\n-- When character\'s sanity changes\ninst:ListenForEvent("sanitydelta", function(inst, data)\n    -- Similar structure to hungerdelta\nend)\n\n-- When character equips item\ninst:ListenForEvent("equip", function(inst, data)\n    -- data.item - the equipped item\n    -- data.eslot - equipment slot\n    \n    -- Example: Apply special effect for a specific item\n    if data.item.prefab == "nightsword" then\n        inst.components.sanity.night_drain_mult = 1.5\n    end\nend)\n\n-- When character unequips item\ninst:ListenForEvent("unequip", function(inst, data)\n    -- data.item - the unequipped item\n    -- data.eslot - equipment slot\n    \n    -- Example: Remove special effect when unequipping\n    if data.item.prefab == "nightsword" then\n        inst.components.sanity.night_drain_mult = 1.0\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"world-events",children:"World Events"}),"\n",(0,i.jsxs)(n.p,{children:["World events are fired by ",(0,i.jsx)(n.code,{children:"TheWorld"})," entity and represent global changes like seasons, time of day, or weather conditions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- When season changes\nTheWorld:ListenForEvent("seasonchange", function(world, data)\n    -- data.season - new season ("winter", "summer", etc.)\n    -- data.prev - previous season\n    \n    -- Example: Prepare all players for winter\n    if data.season == "winter" then\n        for _, player in ipairs(AllPlayers) do\n            if player.components.talker then\n                player.components.talker:Say("Winter is coming!")\n            end\n        end\n    end\nend)\n\n-- When day/night phase changes\nTheWorld:ListenForEvent("phasechanged", function(world, data)\n    -- data.newphase - new phase ("day", "dusk", "night")\n    -- data.oldphase - previous phase\n    \n    -- Example: Make creatures more active at night\n    if data.newphase == "night" then\n        local creatures = TheSim:FindEntities(0, 0, 0, 10000, {"monster"})\n        for _, creature in ipairs(creatures) do\n            creature:PushEvent("nighttime")\n        end\n    end\nend)\n\n-- When rain starts/stops\nTheWorld:ListenForEvent("rainstart", function(world)\n    -- Example: Make fire burn less efficiently\n    local fires = TheSim:FindEntities(0, 0, 0, 10000, {"fire"})\n    for _, fire in ipairs(fires) do\n        if fire.components.burnable then\n            fire.components.burnable:SetBurnTime(fire.components.burnable.burntime * 0.8)\n        end\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"entity-lifecycle-events",children:"Entity Lifecycle Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- When animation ends\ninst:ListenForEvent("animover", function(inst)\n    -- Often used to chain animations or return to idle state\n    inst.AnimState:PlayAnimation("idle")\nend)\n\n-- When entity is burnt\ninst:ListenForEvent("burnt", function(inst)\n    -- Handle what happens when entity is burned\n    inst.AnimState:PlayAnimation("burnt")\n    inst:RemoveComponent("burnable")\nend)\n\n-- When entity is destroyed\ninst:ListenForEvent("onremove", function(inst)\n    -- Clean up any external references or effects\n    if inst.task then\n        inst.task:Cancel()\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"network-events",children:"Network Events"}),"\n",(0,i.jsx)(n.p,{children:"In multiplayer environments, events are also used to synchronize between server and clients:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Event when network value changes\ninst.mynetval = net_bool(inst.GUID, "mynetval", "mynetvaldirty")\ninst.mynetval:set(true) -- Will send "mynetvaldirty" event to clients\n\n-- Listen for changes (client-side)\ninst:ListenForEvent("mynetvaldirty", function()\n    local current_value = inst.mynetval:value()\n    -- Handle value change\n    if current_value then\n        inst.AnimState:PlayAnimation("active")\n    else\n        inst.AnimState:PlayAnimation("inactive")\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-custom-events-in-mods",children:"Creating Custom Events in Mods"}),"\n",(0,i.jsx)(n.p,{children:"You can create and use custom events in your mod:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nlocal MY_EVENTS = {\n    "mycustomevent1",\n    "mycustomevent2",\n}\n\n-- In prefab or component\ninst:PushEvent("mycustomevent1", { custom_data = 123 })\n\n-- Listen for custom event\ninst:ListenForEvent("mycustomevent1", function(inst, data)\n    print("Custom event data: " .. tostring(data.custom_data))\n    \n    -- React to the custom event\n    inst.AnimState:PlayAnimation("special_animation")\n    inst.SoundEmitter:PlaySound("dontstarve/custom/sound")\nend)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For a practical example of using events to trigger functionality, see the ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-wormhole",children:"Wormhole Marks case study"}),". This mod uses the ",(0,i.jsx)(n.code,{children:"starttravelsound"})," event to detect when players use wormholes and trigger the marking system that pairs connected wormholes with matching symbols."]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-event-system",children:"Best Practices for Event System"}),"\n",(0,i.jsx)(n.p,{children:"When working with the event system:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clean up listeners"}),": Always remove event listeners when they're no longer needed to prevent memory leaks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use descriptive event names"}),": Choose clear, specific names for custom events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structure event data"}),": Organize event data in a consistent way to make handling easier"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid excessive events"}),": Don't overuse events for things that could be direct function calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consider performance"}),": Events with many listeners can impact performance if triggered frequently"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);