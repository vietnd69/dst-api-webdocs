"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6357],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(6540);const o={},l=s.createContext(o);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(l.Provider,{value:n},e.children)}},8835:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api-vanilla/core/ui-events","title":"UI Events","description":"Don\'t Starve Together\'s UI system provides a comprehensive event handling system that allows widgets to respond to user input. This document covers how to handle various input events in your UI elements.","source":"@site/docs/api-vanilla/core/ui-events.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/ui-events","permalink":"/dst-api-webdocs/docs/api-vanilla/core/ui-events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"id":"ui-events","title":"UI Events","sidebar_position":11},"sidebar":"docs","previous":{"title":"Creating Screens","permalink":"/dst-api-webdocs/docs/api-vanilla/core/creating-screens"},"next":{"title":"Entity Framework","permalink":"/dst-api-webdocs/docs/category/entity-framework"}}');var o=t(4848),l=t(8453);const r={id:"ui-events",title:"UI Events",sidebar_position:11},i="UI Events",d={},a=[{value:"Event Propagation",id:"event-propagation",level:2},{value:"Focus System",id:"focus-system",level:2},{value:"Common Input Events",id:"common-input-events",level:2},{value:"Mouse Events",id:"mouse-events",level:3},{value:"Keyboard Events",id:"keyboard-events",level:3},{value:"Text Input",id:"text-input",level:3},{value:"Controller Events",id:"controller-events",level:3},{value:"Focus Callbacks",id:"focus-callbacks",level:2},{value:"Custom Event Handlers",id:"custom-event-handlers",level:2},{value:"Global Input Handlers",id:"global-input-handlers",level:2},{value:"Event Priorities",id:"event-priorities",level:2},{value:"Common Event Patterns",id:"common-event-patterns",level:2},{value:"Click Handler",id:"click-handler",level:3},{value:"Drag and Drop",id:"drag-and-drop",level:3},{value:"Hover Effects",id:"hover-effects",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"ui-events",children:"UI Events"})}),"\n",(0,o.jsx)(n.p,{children:"Don't Starve Together's UI system provides a comprehensive event handling system that allows widgets to respond to user input. This document covers how to handle various input events in your UI elements."}),"\n",(0,o.jsx)(n.h2,{id:"event-propagation",children:"Event Propagation"}),"\n",(0,o.jsx)(n.p,{children:"Events in DST's UI system follow a hierarchical propagation model:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Events start at the root widget (typically a screen)"}),"\n",(0,o.jsx)(n.li,{children:"They are passed down to child widgets that have focus"}),"\n",(0,o.jsxs)(n.li,{children:["If a widget handles the event, it returns ",(0,o.jsx)(n.code,{children:"true"})," to stop propagation"]}),"\n",(0,o.jsx)(n.li,{children:"If no widget handles the event, it bubbles back up to parent widgets"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MyWidget:OnControl(control, down)\n    if MyWidget._base.OnControl(self, control, down) then \n        return true  -- Child already handled this event\n    end\n    \n    if control == CONTROL_ACCEPT and not down then\n        -- Handle the event\n        print("Widget activated!")\n        return true  -- Stop propagation\n    end\n    \n    return false  -- Let parent widgets handle it\nend\n'})}),"\n",(0,o.jsx)(n.h2,{id:"focus-system",children:"Focus System"}),"\n",(0,o.jsx)(n.p,{children:"The focus system determines which widget receives input events:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Only one widget can have focus at a time"}),"\n",(0,o.jsx)(n.li,{children:"Focus flows down the widget hierarchy"}),"\n",(0,o.jsx)(n.li,{children:"Parent widgets know which of their children has focus"}),"\n",(0,o.jsx)(n.li,{children:"Focus can be moved between widgets with navigation controls"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Set focus to this widget\nwidget:SetFocus()\n\n-- Clear focus from this widget\nwidget:ClearFocus()\n\n-- Check if widget has focus\nif widget.focus then\n    -- Widget has focus\nend\n\n-- Set focus direction for controller/keyboard navigation\nwidget:SetFocusChangeDir(MOVE_UP, other_widget)\nwidget:SetFocusChangeDir(MOVE_DOWN, another_widget)\nwidget:SetFocusChangeDir(MOVE_LEFT, left_widget)\nwidget:SetFocusChangeDir(MOVE_RIGHT, right_widget)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"common-input-events",children:"Common Input Events"}),"\n",(0,o.jsx)(n.h3,{id:"mouse-events",children:"Mouse Events"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MyWidget:OnMouseButton(button, down, x, y)\n    if MyWidget._base.OnMouseButton(self, button, down, x, y) then \n        return true \n    end\n    \n    if button == MOUSEBUTTON_LEFT and down then\n        print("Left mouse button pressed at", x, y)\n        return true\n    elseif button == MOUSEBUTTON_RIGHT and down then\n        print("Right mouse button pressed at", x, y)\n        return true\n    end\n    \n    return false\nend\n'})}),"\n",(0,o.jsx)(n.p,{children:"Mouse button constants:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MOUSEBUTTON_LEFT"})," - Left mouse button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MOUSEBUTTON_RIGHT"})," - Right mouse button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MOUSEBUTTON_MIDDLE"})," - Middle mouse button (scroll wheel)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MOUSEBUTTON_SCROLLUP"})," - Scroll wheel up"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MOUSEBUTTON_SCROLLDOWN"})," - Scroll wheel down"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"keyboard-events",children:"Keyboard Events"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MyWidget:OnRawKey(key, down)\n    if MyWidget._base.OnRawKey(self, key, down) then \n        return true \n    end\n    \n    if key == KEY_SPACE and down then\n        print("Space key pressed")\n        return true\n    elseif key == KEY_ESCAPE and not down then\n        print("Escape key released")\n        return true\n    end\n    \n    return false\nend\n'})}),"\n",(0,o.jsx)(n.p,{children:"Common key constants:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_A"})," through ",(0,o.jsx)(n.code,{children:"KEY_Z"})," - Letter keys"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_0"})," through ",(0,o.jsx)(n.code,{children:"KEY_9"})," - Number keys"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_F1"})," through ",(0,o.jsx)(n.code,{children:"KEY_F12"})," - Function keys"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_SPACE"})," - Space bar"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_ENTER"})," - Enter key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_ESCAPE"})," - Escape key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_BACKSPACE"})," - Backspace key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_TAB"})," - Tab key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_SHIFT"})," - Shift key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_CTRL"})," - Control key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_ALT"})," - Alt key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"KEY_UP"}),", ",(0,o.jsx)(n.code,{children:"KEY_DOWN"}),", ",(0,o.jsx)(n.code,{children:"KEY_LEFT"}),", ",(0,o.jsx)(n.code,{children:"KEY_RIGHT"})," - Arrow keys"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"text-input",children:"Text Input"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MyWidget:OnTextInput(text)\n    if MyWidget._base.OnTextInput(self, text) then \n        return true \n    end\n    \n    print("Text input:", text)\n    return true\nend\n'})}),"\n",(0,o.jsx)(n.h3,{id:"controller-events",children:"Controller Events"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MyWidget:OnControl(control, down)\n    if MyWidget._base.OnControl(self, control, down) then \n        return true \n    end\n    \n    if control == CONTROL_ACCEPT and not down then\n        print("Accept button pressed (A/Cross)")\n        return true\n    elseif control == CONTROL_CANCEL and not down then\n        print("Cancel button pressed (B/Circle)")\n        return true\n    end\n    \n    return false\nend\n'})}),"\n",(0,o.jsx)(n.p,{children:"Common control constants:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONTROL_ACCEPT"})," - A button (Xbox) / Cross button (PlayStation)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONTROL_CANCEL"})," - B button (Xbox) / Circle button (PlayStation)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONTROL_MENU_MISC_1"})," - X button (Xbox) / Square button (PlayStation)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONTROL_MENU_MISC_2"})," - Y button (Xbox) / Triangle button (PlayStation)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONTROL_MOVE_UP"}),", ",(0,o.jsx)(n.code,{children:"CONTROL_MOVE_DOWN"}),", ",(0,o.jsx)(n.code,{children:"CONTROL_MOVE_LEFT"}),", ",(0,o.jsx)(n.code,{children:"CONTROL_MOVE_RIGHT"})," - D-pad or left stick"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONTROL_PAUSE"})," - Start button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONTROL_MAP"})," - Select/Back button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONTROL_SCROLLBACK"}),", ",(0,o.jsx)(n.code,{children:"CONTROL_SCROLLFWD"})," - Shoulder buttons"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"focus-callbacks",children:"Focus Callbacks"}),"\n",(0,o.jsx)(n.p,{children:"Widgets can implement callbacks for focus events:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function MyWidget:OnGainFocus()\n    MyWidget._base.OnGainFocus(self)\n    self:SetScale(1.1)  -- Grow when focused\n    self.text:SetColour(1, 1, 0, 1)  -- Yellow text when focused\nend\n\nfunction MyWidget:OnLoseFocus()\n    MyWidget._base.OnLoseFocus(self)\n    self:SetScale(1.0)  -- Normal size when not focused\n    self.text:SetColour(1, 1, 1, 1)  -- White text when not focused\nend\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can also set callback functions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'widget:SetOnGainFocus(function()\n    print("Widget gained focus")\nend)\n\nwidget:SetOnLoseFocus(function()\n    print("Widget lost focus")\nend)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"custom-event-handlers",children:"Custom Event Handlers"}),"\n",(0,o.jsx)(n.p,{children:"You can create custom event handlers for specific widgets:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Create a button that responds to hover\nlocal MyHoverButton = Class(ImageButton, function(self, atlas, normal, focus)\n    ImageButton._ctor(self, atlas, normal, focus)\n    \n    self.hover = false\n    self.last_hover_time = 0\nend)\n\nfunction MyHoverButton:OnUpdate(dt)\n    local pos = TheInput:GetScreenPosition()\n    local wx, wy = self:GetWorldPosition():Get()\n    local w, h = self.image:GetSize()\n    \n    local hover = math.abs(pos.x - wx) < w/2 and math.abs(pos.y - wy) < h/2\n    \n    if hover ~= self.hover then\n        self.hover = hover\n        if hover then\n            self:OnHoverStart()\n        else\n            self:OnHoverEnd()\n        end\n    end\n    \n    if self.hover then\n        self.last_hover_time = self.last_hover_time + dt\n        self:OnHover(self.last_hover_time)\n    else\n        self.last_hover_time = 0\n    end\nend\n\nfunction MyHoverButton:OnHoverStart()\n    self.image:SetScale(1.1)\nend\n\nfunction MyHoverButton:OnHoverEnd()\n    self.image:SetScale(1.0)\nend\n\nfunction MyHoverButton:OnHover(time)\n    -- Do something while hovering\n    if time > 2.0 and not self.tooltip_shown then\n        self.tooltip_shown = true\n        print("Show tooltip after 2 seconds of hover")\n    end\nend\n'})}),"\n",(0,o.jsx)(n.h2,{id:"global-input-handlers",children:"Global Input Handlers"}),"\n",(0,o.jsx)(n.p,{children:"For handling input at a global level (not tied to a specific widget):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Add a global handler for keyboard input\nlocal keyboard_handler = TheInput:AddKeyHandler(function(key, down)\n    if key == KEY_F1 and down then\n        print("F1 pressed - show help")\n        return true\n    end\n    return false\nend)\n\n-- Add a global handler for mouse movement\nlocal mouse_move_handler = TheInput:AddMouseMoveHandler(function(x, y)\n    -- Track mouse position\n    print("Mouse moved to", x, y)\nend)\n\n-- Add a global handler for all input types\nlocal general_handler = TheInput:AddGeneralHandler(function(key, down)\n    if key == KEY_ESCAPE and not down then\n        print("Escape key released globally")\n        return true\n    end\n    return false\nend)\n\n-- Remove handlers when no longer needed\nTheInput:RemoveHandler(keyboard_handler)\nTheInput:RemoveHandler(mouse_move_handler)\nTheInput:RemoveHandler(general_handler)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"event-priorities",children:"Event Priorities"}),"\n",(0,o.jsx)(n.p,{children:"Events are processed in a specific order:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Focused widget and its children"}),"\n",(0,o.jsx)(n.li,{children:"Global input handlers"}),"\n",(0,o.jsx)(n.li,{children:"Game default controls"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This means that UI elements with focus will always get first chance to handle input."}),"\n",(0,o.jsx)(n.h2,{id:"common-event-patterns",children:"Common Event Patterns"}),"\n",(0,o.jsx)(n.h3,{id:"click-handler",children:"Click Handler"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Simple click handler for a widget\nfunction MyWidget:SetOnClick(fn)\n    self.onclick = fn\n    self:SetClickable(true)\nend\n\nfunction MyWidget:OnControl(control, down)\n    if MyWidget._base.OnControl(self, control, down) then return true end\n    \n    if self.enabled and control == CONTROL_ACCEPT then\n        if down then\n            self.down = true\n            return true\n        elseif self.down then\n            self.down = false\n            if self.onclick then\n                self.onclick()\n            end\n            return true\n        end\n    end\n    \n    return false\nend\n"})}),"\n",(0,o.jsx)(n.h3,{id:"drag-and-drop",children:"Drag and Drop"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Make a widget draggable\nfunction MakeDraggable(widget)\n    widget.dragging = false\n    widget.drag_offset = Vector3(0, 0, 0)\n    \n    widget:SetClickable(true)\n    \n    function widget:OnMouseButton(button, down, x, y)\n        if button == MOUSEBUTTON_LEFT then\n            if down then\n                -- Start dragging\n                local wx, wy = self:GetWorldPosition():Get()\n                self.drag_offset = Vector3(wx - x, wy - y, 0)\n                self.dragging = true\n                self:StartUpdating()\n                return true\n            else\n                -- Stop dragging\n                self.dragging = false\n                self:StopUpdating()\n                return true\n            end\n        end\n        return false\n    end\n    \n    function widget:OnUpdate(dt)\n        if self.dragging then\n            local pos = TheInput:GetScreenPosition()\n            local new_pos = pos + self.drag_offset\n            self:SetPosition(new_pos)\n        end\n    end\n    \n    return widget\nend\n\n-- Usage\nlocal my_draggable = MakeDraggable(Image("images/ui.xml", "panel.tex"))\n'})}),"\n",(0,o.jsx)(n.h3,{id:"hover-effects",children:"Hover Effects"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Add hover effects to a widget\nfunction AddHoverEffects(widget, scale_factor, tint_colour)\n    scale_factor = scale_factor or 1.1\n    tint_colour = tint_colour or {1, 0.8, 0.2, 1}\n    \n    local orig_scale = widget:GetScale()\n    local orig_colour = {1, 1, 1, 1}\n    if widget.image then\n        orig_colour = widget.image:GetTint()\n    end\n    \n    widget.hover = false\n    \n    function widget:OnMouseButton(button, down, x, y)\n        if widget._base.OnMouseButton then\n            if widget._base.OnMouseButton(self, button, down, x, y) then \n                return true \n            end\n        end\n        \n        return false\n    end\n    \n    function widget:OnUpdate(dt)\n        local pos = TheInput:GetScreenPosition()\n        local wx, wy = self:GetWorldPosition():Get()\n        local w, h = 100, 100\n        if self.image then\n            w, h = self.image:GetSize()\n        end\n        \n        local new_hover = math.abs(pos.x - wx) < w/2 and math.abs(pos.y - wy) < h/2\n        \n        if new_hover ~= self.hover then\n            self.hover = new_hover\n            if new_hover then\n                self:ScaleTo(orig_scale, orig_scale * scale_factor, 0.1)\n                if self.image then\n                    self.image:SetTint(tint_colour[1], tint_colour[2], tint_colour[3], tint_colour[4])\n                end\n            else\n                self:ScaleTo(self:GetScale(), orig_scale, 0.1)\n                if self.image then\n                    self.image:SetTint(orig_colour[1], orig_colour[2], orig_colour[3], orig_colour[4])\n                end\n            end\n        end\n    end\n    \n    widget:StartUpdating()\n    \n    return widget\nend\n\n-- Usage\nlocal hover_button = AddHoverEffects(ImageButton("images/ui.xml", "button.tex", "button_focus.tex"))\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Always Call Base Methods"}),": Call the parent class's event handlers first and check their return value"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Return True When Handled"}),": Return ",(0,o.jsx)(n.code,{children:"true"})," from event handlers when you've handled the event to prevent further propagation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consistent Focus Handling"}),": Implement both ",(0,o.jsx)(n.code,{children:"OnGainFocus"})," and ",(0,o.jsx)(n.code,{children:"OnLoseFocus"})," for widgets that change appearance when focused"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Clean Up Handlers"}),": Remove global input handlers when they're no longer needed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Avoid Polling"}),": Use event handlers instead of checking input state every frame when possible"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Support Multiple Input Methods"}),": Make sure your UI works with both mouse/keyboard and controller"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Visual Feedback"}),": Provide clear visual feedback for hover, focus, and click states"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance"}),": Avoid creating new functions or tables in event handlers that run frequently"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error Handling"}),": Wrap callbacks in pcall to prevent crashes from user input"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Accessibility"}),": Ensure all interactive elements can be navigated with a controller"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);