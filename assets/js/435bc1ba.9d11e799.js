"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9054],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},8912:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/prefabs/creatures","title":"Creature Prefabs","description":"Creature prefabs define the non-player entities that populate the world of Don\'t Starve Together, including animals, monsters, bosses, and other living beings.","source":"@site/docs/api-vanilla/prefabs/creatures.md","sourceDirName":"api-vanilla/prefabs","slug":"/api-vanilla/prefabs/creatures","permalink":"/dst-api-webdocs/docs/api-vanilla/prefabs/creatures","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"creatures","title":"Creature Prefabs","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Character Prefabs","permalink":"/dst-api-webdocs/docs/api-vanilla/prefabs/characters"},"next":{"title":"Item Prefabs","permalink":"/dst-api-webdocs/docs/api-vanilla/prefabs/items"}}');var s=t(4848),i=t(8453);const r={id:"creatures",title:"Creature Prefabs",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="Creature Prefabs",l={},d=[{value:"Creature Creation",id:"creature-creation",level:2},{value:"Core Creature Components",id:"core-creature-components",level:2},{value:"AI Behavior",id:"ai-behavior",level:2},{value:"State Graphs",id:"state-graphs",level:2},{value:"Creature Categories",id:"creature-categories",level:2},{value:"Animals",id:"animals",level:3},{value:"Monsters",id:"monsters",level:3},{value:"Bosses",id:"bosses",level:3},{value:"Example: Beefalo Prefab",id:"example-beefalo-prefab",level:2},{value:"Specialized Creature Behaviors",id:"specialized-creature-behaviors",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"creature-prefabs",children:"Creature Prefabs"})}),"\n",(0,s.jsx)(n.p,{children:"Creature prefabs define the non-player entities that populate the world of Don't Starve Together, including animals, monsters, bosses, and other living beings."}),"\n",(0,s.jsx)(n.h2,{id:"creature-creation",children:"Creature Creation"}),"\n",(0,s.jsx)(n.p,{children:"Creatures in Don't Starve Together are entities that typically have components like health, locomotion, combat, and AI brains. Here's a typical structure for a creature prefab:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/beefalo_basic.zip"),\n    Asset("ANIM", "anim/beefalo_actions.zip"),\n    Asset("SOUND", "sound/beefalo.fsb"),\n}\n\nlocal prefabs = {\n    "meat",\n    "poop",\n    "beefalowool",\n    "horn",\n}\n\n-- Define the creature\'s brain (AI logic)\nlocal brain = require("brains/beefalobrain")\n\n-- Define loot table (what drops when killed)\nSetSharedLootTable("beefalo", {\n    {"meat",            1.00},\n    {"meat",            1.00},\n    {"meat",            1.00},\n    {"beefalowool",     1.00},\n    {"horn",            0.33},\n})\n\n-- Define creature sounds\nlocal sounds = {\n    walk = "dontstarve/beefalo/walk",\n    grunt = "dontstarve/beefalo/grunt",\n    yell = "dontstarve/beefalo/yell",\n    swish = "dontstarve/beefalo/tail_swish",\n    curious = "dontstarve/beefalo/curious",\n    angry = "dontstarve/beefalo/angry",\n    sleep = "dontstarve/beefalo/sleep",\n}\n\n-- Main creation function\nlocal function fn()\n    local inst = CreateEntity()\n\n    -- Add required engine components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n\n    -- Configure physics\n    MakeCharacterPhysics(inst, 100, .5)\n\n    -- Configure animations\n    inst.AnimState:SetBank("beefalo")\n    inst.AnimState:SetBuild("beefalo_build")\n    inst.AnimState:PlayAnimation("idle_loop", true)\n\n    -- Add tags for identification and optimization\n    inst:AddTag("animal")\n    inst:AddTag("beefalo")\n    inst:AddTag("largecreature")\n\n    -- Network setup\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add game components\n    inst:AddComponent("health")\n    inst:AddComponent("combat")\n    inst:AddComponent("lootdropper")\n    inst:AddComponent("locomotor")\n    inst:AddComponent("eater")\n    inst:AddComponent("sleeper")\n    inst:AddComponent("herdmember")\n    \n    -- Configure components\n    inst.components.health:SetMaxHealth(500)\n    inst.components.combat:SetDefaultDamage(40)\n    inst.components.locomotor.walkspeed = 2\n    inst.components.lootdropper:SetChanceLootTable("beefalo")\n    \n    -- Set up AI brain\n    inst:SetBrain(brain)\n    \n    -- Set up state graph (animation/behavior states)\n    inst:SetStateGraph("SGBeefalo")\n    \n    return inst\nend\n\nreturn Prefab("beefalo", fn, assets, prefabs)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"core-creature-components",children:"Core Creature Components"}),"\n",(0,s.jsx)(n.p,{children:"Most creatures have the following essential components:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Component"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"health"})}),(0,s.jsx)(n.td,{children:"Manages creature's health and death"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"combat"})}),(0,s.jsx)(n.td,{children:"Handles attacking and being attacked"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"lootdropper"})}),(0,s.jsx)(n.td,{children:"Controls what items drop when killed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"locomotor"})}),(0,s.jsx)(n.td,{children:"Manages movement and pathfinding"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"eater"})}),(0,s.jsx)(n.td,{children:"Allows creature to consume food"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sleeper"})}),(0,s.jsx)(n.td,{children:"Controls sleep behavior and cycles"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"ai-behavior",children:"AI Behavior"}),"\n",(0,s.jsx)(n.p,{children:"Creatures use brain scripts and state graphs to define their behavior:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Set up the brain (AI logic)\ninst:SetBrain(brain)\n\n-- Set up the state graph (states and transitions)\ninst:SetStateGraph("SGBeefalo")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The brain file (e.g., ",(0,s.jsx)(n.code,{children:"beefalobrain.lua"}),") contains the decision-making logic using behavior trees:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local BeefaloBrain = Class(Brain, function(self, inst)\n    Brain._ctor(self, inst)\nend)\n\nfunction BeefaloBrain:OnStart()\n    local root = PriorityNode({\n        WhileNode(function() return self.inst.components.combat.target ~= nil end, "AttackTarget",\n            ChaseAndAttack(self.inst, MAX_CHASE_TIME, MAX_CHASE_DIST)),\n        WhileNode(function() return self.inst.components.hauntable ~= nil and self.inst.components.hauntable.panic end, "PanicHaunted",\n            Panic(self.inst)),\n        IfNode(function() return self.inst.components.herdmember and self.inst.components.herdmember:GetHerd() ~= nil end, "HasHerd",\n            Follow(self.inst, function() return self.inst.components.herdmember ~= nil and self.inst.components.herdmember:GetHerd() end, MIN_FOLLOW_DIST, MAX_FOLLOW_DIST, MED_FOLLOW_DIST)),\n        Wander(self.inst, function() return self.inst.components.knownlocations:GetLocation("herd") end, MAX_WANDER_DIST, {minwalktime=MAX_WANDER_TIME})\n    }, .25)\n    \n    self.bt = BT(self.inst, root)\nend\n\nreturn BeefaloBrain\n'})}),"\n",(0,s.jsx)(n.h2,{id:"state-graphs",children:"State Graphs"}),"\n",(0,s.jsx)(n.p,{children:"State graphs define the states and transitions for animations and behavior:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Example state from SGBeefalo.lua\nlocal states = {\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.Physics:Stop()\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n    },\n    \n    State{\n        name = "walk",\n        tags = {"moving", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:WalkForward()\n            inst.AnimState:PlayAnimation("walk", true)\n        end,\n    },\n    \n    State{\n        name = "attack",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.combat:StartAttack()\n            inst.Physics:Stop()\n            inst.AnimState:PlayAnimation("atk")\n        end,\n        \n        timeline = {\n            TimeEvent(15*FRAMES, function(inst) inst.components.combat:DoAttack() end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst) inst.sg:GoToState("idle") end),\n        },\n    },\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creature-categories",children:"Creature Categories"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together features several categories of creatures:"}),"\n",(0,s.jsx)(n.h3,{id:"animals",children:"Animals"}),"\n",(0,s.jsx)(n.p,{children:"Neutral or passive creatures that often provide resources:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Beefalo"}),"\n",(0,s.jsx)(n.li,{children:"Rabbits"}),"\n",(0,s.jsx)(n.li,{children:"Birds"}),"\n",(0,s.jsx)(n.li,{children:"Koalefants"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"monsters",children:"Monsters"}),"\n",(0,s.jsx)(n.p,{children:"Hostile creatures that attack the player:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Spiders"}),"\n",(0,s.jsx)(n.li,{children:"Hounds"}),"\n",(0,s.jsx)(n.li,{children:"Tentacles"}),"\n",(0,s.jsx)(n.li,{children:"Shadow Creatures"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bosses",children:"Bosses"}),"\n",(0,s.jsx)(n.p,{children:"Powerful creatures with special mechanics:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Deerclops"}),"\n",(0,s.jsx)(n.li,{children:"Bearger"}),"\n",(0,s.jsx)(n.li,{children:"Dragonfly"}),"\n",(0,s.jsx)(n.li,{children:"Ancient Guardian"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-beefalo-prefab",children:"Example: Beefalo Prefab"}),"\n",(0,s.jsx)(n.p,{children:"Beefalo are large, passive animals that can be domesticated:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Configure base health and combat\ninst.components.health:SetMaxHealth(500)\ninst.components.combat:SetDefaultDamage(40)\ninst.components.combat:SetRetargetFunction(3, RetargetFn)\n\n-- Set up beefalo-specific components\ninst:AddComponent("domesticatable")\ninst.components.domesticatable:SetDomesticationTrigger(OnDomesticationTrigger)\ninst.components.domesticatable:SetMinObedience(TUNING.BEEFALO_MIN_OBEDIENCE)\n\n-- Make rideable when domesticated\ninst:AddComponent("rideable")\ninst.components.rideable:SetRequiredObedience(TUNING.BEEFALO_OBEDIENCE_WOBY)\ninst.components.rideable:SetSaddleable(true)\n\n-- Set up mating and reproduction\ninst:AddComponent("herdmember")\ninst:AddComponent("mateable")\ninst.components.mateable:SetMateSearchRange(TUNING.BEEFALO_MATING_RANGE)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"specialized-creature-behaviors",children:"Specialized Creature Behaviors"}),"\n",(0,s.jsx)(n.p,{children:"Many creatures have unique behaviors implemented through custom components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Spider webspitting\ninst:AddComponent("webber")\ninst.components.webber:SetWebSpitInterval(3, 5)\n\n-- Tentacle ambush behavior\ninst:AddComponent("lureplant")\ninst.components.lureplant:SetLureInactiveTime(5)\n\n-- Hound pack behavior\ninst:AddComponent("periodicspawner")\ninst.components.periodicspawner:SetPrefab("hound")\ninst.components.periodicspawner:SetRandomTimes(TUNING.HOUNDMOUND_RELEASE_TIME, 5)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);