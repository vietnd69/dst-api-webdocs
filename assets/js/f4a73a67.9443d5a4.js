"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3532],{8211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api-vanilla/data-types/netvar","title":"Network Variables","description":"Network Variables (net_*) are special data types used to synchronize data between server and client in the multiplayer system.","source":"@site/docs/api-vanilla/data-types/netvar.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/netvar","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/netvar","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"netvar","title":"Network Variables","sidebar_position":4},"sidebar":"docs","previous":{"title":"Colour","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/colour"},"next":{"title":"Lua Table","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/luatable"}}');var s=t(4848),r=t(8453);const l={id:"netvar",title:"Network Variables",sidebar_position:4},a="Network Variables",d={},o=[{value:"Overview",id:"overview",level:2},{value:"NetVar Types",id:"netvar-types",level:2},{value:"Creating and Using NetVars",id:"creating-and-using-netvars",level:2},{value:"NetVar Methods",id:"netvar-methods",level:2},{value:"Event Handling",id:"event-handling",level:2},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Component Synchronization",id:"component-synchronization",level:3},{value:"One-time Events",id:"one-time-events",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Notes",id:"notes",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"network-variables",children:"Network Variables"})}),"\n",(0,s.jsx)(n.p,{children:"Network Variables (net_*) are special data types used to synchronize data between server and client in the multiplayer system."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Network Variables (NetVars) are an essential component of the Don't Starve Together multiplayer architecture. They provide a mechanism for automatically synchronizing state between the server and connected clients, ensuring that all players see a consistent game world."}),"\n",(0,s.jsx)(n.p,{children:"Key characteristics of NetVars include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They are unidirectional, flowing from server to clients"}),"\n",(0,s.jsx)(n.li,{children:"They trigger events when values change, allowing for reactive updates"}),"\n",(0,s.jsx)(n.li,{children:"They are bound to specific entities through their GUIDs"}),"\n",(0,s.jsx)(n.li,{children:"They support various data types with different performance characteristics and size limitations"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"netvar-types",children:"NetVar Types"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together provides several NetVar types for different data needs:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Range/Size"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_bool"})}),(0,s.jsx)(n.td,{children:"Boolean value"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"true"})," or ",(0,s.jsx)(n.code,{children:"false"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_byte"})}),(0,s.jsx)(n.td,{children:"8-bit unsigned integer"}),(0,s.jsx)(n.td,{children:"0 to 255"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_tinybyte"})}),(0,s.jsx)(n.td,{children:"3-bit unsigned integer"}),(0,s.jsx)(n.td,{children:"0 to 7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_smallbyte"})}),(0,s.jsx)(n.td,{children:"6-bit unsigned integer"}),(0,s.jsx)(n.td,{children:"0 to 63"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_shortint"})}),(0,s.jsx)(n.td,{children:"16-bit signed integer"}),(0,s.jsx)(n.td,{children:"-32,767 to 32,767"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_ushortint"})}),(0,s.jsx)(n.td,{children:"16-bit unsigned integer"}),(0,s.jsx)(n.td,{children:"0 to 65,535"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_int"})}),(0,s.jsx)(n.td,{children:"32-bit signed integer"}),(0,s.jsx)(n.td,{children:"-2,147,483,647 to 2,147,483,647"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_uint"})}),(0,s.jsx)(n.td,{children:"32-bit unsigned integer"}),(0,s.jsx)(n.td,{children:"0 to 4,294,967,295"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_float"})}),(0,s.jsx)(n.td,{children:"32-bit floating point"}),(0,s.jsx)(n.td,{children:"Standard float range"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_string"})}),(0,s.jsx)(n.td,{children:"Variable-length string"}),(0,s.jsx)(n.td,{children:"Limited by network protocol"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_hash"})}),(0,s.jsx)(n.td,{children:"32-bit hash value"}),(0,s.jsx)(n.td,{children:"Usually derived from strings"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_entity"})}),(0,s.jsx)(n.td,{children:"Entity reference"}),(0,s.jsx)(n.td,{children:"Valid entity GUIDs"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_bytearray"})}),(0,s.jsx)(n.td,{children:"Array of bytes"}),(0,s.jsx)(n.td,{children:"Maximum 31 bytes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_smallbytearray"})}),(0,s.jsx)(n.td,{children:"Array of smallbytes"}),(0,s.jsx)(n.td,{children:"Maximum 31 entries"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_event"})}),(0,s.jsx)(n.td,{children:"Convenience wrapper over net_bool"}),(0,s.jsx)(n.td,{children:"Used for one-shot triggers"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"creating-and-using-netvars",children:"Creating and Using NetVars"}),"\n",(0,s.jsx)(n.p,{children:"NetVars must be created on both the server and client sides to function properly. They are typically declared in component or classified files."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic NetVar declaration syntax\nlocal my_variable = net_type(entity_guid, "unique_name", "dirty_event_name")\n\n-- Examples for different types\nlocal is_active = net_bool(inst.GUID, "component_name.is_active", "is_active_dirty")\nlocal health_value = net_byte(inst.GUID, "component_name.health", "health_dirty")\nlocal position_x = net_float(inst.GUID, "component_name.position_x", "position_dirty")\nlocal entity_name = net_string(inst.GUID, "component_name.name", "name_dirty")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"netvar-methods",children:"NetVar Methods"}),"\n",(0,s.jsx)(n.p,{children:"All NetVar types share a common interface:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Set the value (server-side, will sync to clients)\nmy_variable:set(new_value)\n\n-- Get the current value (both server and client)\nlocal value = my_variable:value()\n\n-- Set the value locally without syncing\nmy_variable:set_local(new_value)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"net_event"})," specifically:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Trigger the event without providing a value\nmy_event:push()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"event-handling",children:"Event Handling"}),"\n",(0,s.jsx)(n.p,{children:'NetVars can trigger "dirty" events when their values change, allowing components to react to network updates:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Listen for the "dirty" event\ninst:ListenForEvent("health_dirty", OnHealthDirty)\n\n-- Handler function\nfunction OnHealthDirty(inst)\n    -- React to the updated value\n    local new_health = health_value:value()\n    -- Update visual representation, play sounds, etc.\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"component-synchronization",children:"Component Synchronization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In a component initialization\nfunction MyComponent:Init(inst)\n    if TheWorld.ismastersim then\n        -- Server-side initialization\n        self.value = 100\n        self.net_value = net_int(inst.GUID, "mycomponent.value", "value_dirty")\n        self.net_value:set(self.value)\n    else\n        -- Client-side initialization\n        self.net_value = net_int(inst.GUID, "mycomponent.value", "value_dirty")\n        inst:ListenForEvent("value_dirty", function()\n            -- Update client-side representation\n            local new_value = self.net_value:value()\n            -- Do something with the new value\n        end)\n    end\nend\n\n-- Server-side setter that synchronizes to clients\nfunction MyComponent:SetValue(val)\n    if TheWorld.ismastersim then\n        self.value = val\n        self.net_value:set(val)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"one-time-events",children:"One-time Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Using net_event for one-time notifications\nlocal explode_event = net_event(inst.GUID, "bomb.explode", "explode_event")\n\n-- Server triggers the event\nexplode_event:push()\n\n-- Client listens for the event\ninst:ListenForEvent("explode_event", function()\n    -- Play explosion effects locally\n    SpawnPrefab("explosion_fx").Transform:SetPosition(inst.Transform:GetWorldPosition())\n    TheFocalPoint.SoundEmitter:PlaySound("dontstarve/common/blackpowder_explo")\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use the appropriate type"}),": Choose the smallest NetVar type that fits your needs to minimize bandwidth."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Limit update frequency"}),": NetVars have overhead, so avoid updating them every frame."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Batch updates"}),": When changing multiple related values, consider using arrays or a single update."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use local setters for prediction"}),": Use ",(0,s.jsx)(n.code,{children:":set_local()"})," for client-side prediction between server updates."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Only set from server"}),": While clients can call ",(0,s.jsx)(n.code,{children:":set()"}),", it only changes their local value and doesn't sync."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use unique names"}),": Each NetVar on an entity must have a unique name to avoid conflicts."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"NetVars are one-way only (server to client). For client-to-server communication, use Remote Procedure Calls (RPCs)."}),"\n",(0,s.jsxs)(n.li,{children:["NetVars must be attached to entities that have had ",(0,s.jsx)(n.code,{children:":AddNetwork()"})," called on them."]}),"\n",(0,s.jsx)(n.li,{children:"Avoid binding NetVars to entities that don't exist on the client, as this will cause crashes."}),"\n",(0,s.jsx)(n.li,{children:"NetVars should be declared in both the server and client initialization paths."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);