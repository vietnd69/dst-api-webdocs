"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6550],{4896:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/examples/project-boss","title":"Custom Boss Project","description":"This tutorial guides you through creating a complete mod that adds a custom boss to Don\'t Starve Together. We\'ll create the \\"Ancient Guardian,\\" a powerful entity with unique behaviors, attacks, and drops.","source":"@site/docs/api-vanilla/examples/project-boss.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/project-boss","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/project-boss","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":16,"frontMatter":{"id":"project-boss","title":"Custom Boss Project","sidebar_position":16,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"New Biome Project","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/project-biome"},"next":{"title":"Snippets","permalink":"/dst-api-webdocs/docs/category/snippets"}}');var i=t(4848),s=t(8453);const o={id:"project-boss",title:"Custom Boss Project",sidebar_position:16,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="Custom Boss Project",l={},d=[{value:"Project Overview",id:"project-overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Step 1: Setting Up the Mod",id:"step-1-setting-up-the-mod",level:2},{value:"modinfo.lua",id:"modinfolua",level:3},{value:"modmain.lua",id:"modmainlua",level:3},{value:"Step 3: Creating the State Graph",id:"step-3-creating-the-state-graph",level:2},{value:"scripts/stategraphs/SGancient_guardian.lua",id:"scriptsstategraphssgancient_guardianlua",level:3},{value:"Step 4: Creating the AI Brain",id:"step-4-creating-the-ai-brain",level:2},{value:"scripts/brains/ancient_guardian_brain.lua",id:"scriptsbrainsancient_guardian_brainlua",level:3},{value:"Step 5: Creating the Loot Items",id:"step-5-creating-the-loot-items",level:2},{value:"scripts/prefabs/ancient_guardian_horn.lua",id:"scriptsprefabsancient_guardian_hornlua",level:3},{value:"scripts/prefabs/ancient_essence.lua",id:"scriptsprefabsancient_essencelua",level:3},{value:"Step 6: Testing and Debugging",id:"step-6-testing-and-debugging",level:2},{value:"Common Issues and Solutions:",id:"common-issues-and-solutions",level:3},{value:"Debugging Tips:",id:"debugging-tips",level:3},{value:"Step 7: Extending the Mod",id:"step-7-extending-the-mod",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"custom-boss-project",children:"Custom Boss Project"})}),"\n",(0,i.jsx)(e.p,{children:"This tutorial guides you through creating a complete mod that adds a custom boss to Don't Starve Together. We'll create the \"Ancient Guardian,\" a powerful entity with unique behaviors, attacks, and drops."}),"\n",(0,i.jsx)(e.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,i.jsx)(e.p,{children:"By the end of this tutorial, you'll have created:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"A fully functional boss entity with custom AI"}),"\n",(0,i.jsx)(e.li,{children:"Special attack patterns and abilities"}),"\n",(0,i.jsx)(e.li,{children:"Custom animations and sound effects"}),"\n",(0,i.jsx)(e.li,{children:"Unique loot drops"}),"\n",(0,i.jsx)(e.li,{children:"Boss-specific game mechanics"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Intermediate understanding of Lua programming"}),"\n",(0,i.jsx)(e.li,{children:"Familiarity with Don't Starve Together modding"}),"\n",(0,i.jsx)(e.li,{children:"Basic knowledge of state graphs and AI"}),"\n",(0,i.jsx)(e.li,{children:"Understanding of prefabs and components"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"AncientGuardianMod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 prefabs/\n\u2502   \u2502   \u251c\u2500\u2500 ancient_guardian.lua\n\u2502   \u2502   \u251c\u2500\u2500 ancient_guardian_horn.lua\n\u2502   \u2502   \u2514\u2500\u2500 ancient_essence.lua\n\u2502   \u251c\u2500\u2500 stategraphs/\n\u2502   \u2502   \u2514\u2500\u2500 SGancient_guardian.lua\n\u2502   \u2514\u2500\u2500 brains/\n\u2502       \u2514\u2500\u2500 ancient_guardian_brain.lua\n\u2514\u2500\u2500 anim/\n    \u2514\u2500\u2500 ancient_guardian.zip\n"})}),"\n",(0,i.jsx)(e.h2,{id:"step-1-setting-up-the-mod",children:"Step 1: Setting Up the Mod"}),"\n",(0,i.jsx)(e.p,{children:"First, let's create the basic mod structure and files:"}),"\n",(0,i.jsx)(e.h3,{id:"modinfolua",children:"modinfo.lua"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'name = "Ancient Guardian Boss"\ndescription = "Adds a powerful Ancient Guardian boss with unique abilities and drops."\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\n-- Tags to help users find the mod\nall_clients_require_mod = true\nclient_only_mod = false\n\n-- Icon and priority\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Mod configuration options\nconfiguration_options = {\n    {\n        name = "BOSS_HEALTH",\n        label = "Boss Health",\n        options = {\n            {description = "Easy (1000)", data = 1000},\n            {description = "Normal (2000)", data = 2000},\n            {description = "Hard (3000)", data = 3000},\n            {description = "Nightmare (5000)", data = 5000}\n        },\n        default = 2000\n    },\n    {\n        name = "BOSS_DAMAGE",\n        label = "Boss Damage",\n        options = {\n            {description = "Low", data = 0.75},\n            {description = "Normal", data = 1.0},\n            {description = "High", data = 1.5},\n            {description = "Extreme", data = 2.0}\n        },\n        default = 1.0\n    },\n    {\n        name = "SPAWN_MODE",\n        label = "Spawn Mode",\n        options = {\n            {description = "Ritual Only", data = "ritual"},\n            {description = "Natural Spawn", data = "natural"},\n            {description = "Both", data = "both"}\n        },\n        default = "both"\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"modmainlua",children:"modmain.lua"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Assets to preload\nAssets = {\n    Asset("ATLAS", "images/inventoryimages/ancient_guardian_horn.xml"),\n    Asset("IMAGE", "images/inventoryimages/ancient_guardian_horn.tex"),\n    Asset("ATLAS", "images/inventoryimages/ancient_essence.xml"),\n    Asset("IMAGE", "images/inventoryimages/ancient_essence.tex"),\n    Asset("SOUND", "sound/ancient_guardian.fsb"),\n}\n\n-- Prefabs to register\nPrefabFiles = {\n    "ancient_guardian",\n    "ancient_guardian_horn",\n    "ancient_essence",\n}\n\n-- Import configuration\nlocal BOSS_HEALTH = GetModConfigData("BOSS_HEALTH")\nlocal BOSS_DAMAGE = GetModConfigData("BOSS_DAMAGE")\nlocal SPAWN_MODE = GetModConfigData("SPAWN_MODE")\n\n-- Make configuration available to prefabs\nTUNING.ANCIENT_GUARDIAN = {\n    HEALTH = BOSS_HEALTH,\n    DAMAGE_MULT = BOSS_DAMAGE,\n    SPAWN_MODE = SPAWN_MODE,\n}\n\n-- Add recipes for summoning items\nlocal ancient_ritual = Recipe("ancient_ritual_item", \n    {Ingredient("goldnugget", 10), Ingredient("nightmarefuel", 5), Ingredient("purplegem", 1)}, \n    RECIPETABS.MAGIC, \n    TECH.MAGIC_THREE)\nancient_ritual.atlas = "images/inventoryimages/ancient_ritual_item.xml"\n\n-- Add a global function for spawning the boss\nGLOBAL.SpawnAncientGuardian = function(pt)\n    if pt == nil then\n        -- If no position is provided, try to spawn near the player\n        local player = GLOBAL.ConsoleCommandPlayer()\n        if player then\n            pt = player:GetPosition()\n            -- Offset the position slightly\n            pt = pt + GLOBAL.Vector3(15, 0, 0)\n        else\n            return false\n        end\n    end\n    \n    -- Spawn the boss\n    local guardian = GLOBAL.SpawnPrefab("ancient_guardian")\n    if guardian then\n        guardian.Transform:SetPosition(pt.x, pt.y, pt.z)\n        \n        -- Spawn effects\n        GLOBAL.SpawnPrefab("statue_transition").Transform:SetPosition(pt.x, pt.y, pt.z)\n        GLOBAL.SpawnPrefab("statue_transition_2").Transform:SetPosition(pt.x, pt.y, pt.z)\n        \n        return guardian\n    end\n    \n    return false\nend\n\n-- Add boss to the world\nAddPrefabPostInit("world", function(inst)\n    if SPAWN_MODE == "natural" or SPAWN_MODE == "both" then\n        -- Add the boss to the world generation\n        if inst.ismastersim then\n            inst:DoTaskInTime(5, function()\n                -- Spawn the boss in a suitable location after world generation\n                local function TrySpawnBoss()\n                    local valid_spawns = {}\n                    \n                    -- Find suitable spawn locations\n                    for i, node in ipairs(GLOBAL.TheWorld.topology.nodes) do\n                        if node.tags and \n                           (table.contains(node.tags, "Rocky") or \n                            table.contains(node.tags, "Cave")) then\n                            table.insert(valid_spawns, node)\n                        end\n                    end\n                    \n                    if #valid_spawns > 0 then\n                        -- Choose a random valid location\n                        local spawn_node = valid_spawns[math.random(#valid_spawns)]\n                        local pos = GLOBAL.Vector3(spawn_node.x, 0, spawn_node.y)\n                        \n                        -- Spawn the boss\n                        GLOBAL.SpawnAncientGuardian(pos)\n                        return true\n                    end\n                    \n                    return false\n                end\n                \n                -- Try to spawn the boss\n                TrySpawnBoss()\n            end)\n        end\n    end\nend)\n\n## Step 2: Creating the Boss Prefab\n\nNow let\'s create the main boss prefab:\n\n### scripts/prefabs/ancient_guardian.lua\n\n```lua\nlocal assets = {\n    Asset("ANIM", "anim/ancient_guardian.zip"),\n    Asset("SOUND", "sound/ancient_guardian.fsb"),\n}\n\nlocal prefabs = {\n    "ancient_guardian_horn",\n    "ancient_essence",\n    "nightmarefuel",\n    "thulecite",\n    "thulecite_pieces",\n    "purplegem",\n}\n\n-- Import the brain and stategraph\nlocal brain = require "brains/ancient_guardian_brain"\n\n-- Special attack definitions\nlocal SLAM_DAMAGE = 100\nlocal CHARGE_DAMAGE = 75\nlocal SWIPE_DAMAGE = 50\n\n-- Sound effects\nlocal sounds = {\n    idle = "ancientguardian/idle",\n    hurt = "ancientguardian/hurt",\n    death = "ancientguardian/death",\n    attack = "ancientguardian/attack",\n    charge_pre = "ancientguardian/charge_pre",\n    charge = "ancientguardian/charge",\n    slam = "ancientguardian/slam",\n}\n\n-- Function to handle when the boss takes damage\nlocal function OnHit(inst, attacker, damage)\n    if inst.components.health:GetPercent() <= 0.5 and not inst.enraged then\n        -- Enter enraged state at 50% health\n        inst.enraged = true\n        inst.AnimState:SetMultColour(0.9, 0.3, 0.3, 1)\n        inst.components.combat:SetDefaultDamage(inst.base_damage * 1.5)\n        inst.components.locomotor:SetExternalSpeedMultiplier(inst, "enraged", 1.3)\n        \n        -- Play enrage animation and sound\n        inst.AnimState:PlayAnimation("taunt")\n        inst.SoundEmitter:PlaySound(sounds.attack, "enrage")\n        \n        -- Spawn nightmare fuel around the boss\n        local pos = inst:GetPosition()\n        for i = 1, 5 do\n            local offset = Vector3(math.random(-3, 3), 0, math.random(-3, 3))\n            local nightmare = SpawnPrefab("nightmarefuel")\n            nightmare.Transform:SetPosition((pos + offset):Get())\n        end\n        \n        -- After taunt, return to idle\n        inst.AnimState:PushAnimation("idle", true)\n    end\nend\n\n-- Function to handle when the boss dies\nlocal function OnDeath(inst)\n    -- Play death animation and sound\n    inst.AnimState:PlayAnimation("death")\n    inst.SoundEmitter:PlaySound(sounds.death)\n    \n    -- Spawn loot\n    local pos = inst:GetPosition()\n    \n    -- Always drop the horn and essence\n    local horn = SpawnPrefab("ancient_guardian_horn")\n    horn.Transform:SetPosition(pos:Get())\n    \n    local essence = SpawnPrefab("ancient_essence")\n    essence.Transform:SetPosition(pos:Get())\n    \n    -- Spawn additional loot\n    for i = 1, math.random(3, 6) do\n        local loot = SpawnPrefab(\n            weighted_random_choice({\n                nightmarefuel = 0.4,\n                thulecite_pieces = 0.3,\n                thulecite = 0.2,\n                purplegem = 0.1,\n            })\n        )\n        \n        if loot then\n            local offset = Vector3(math.random(-2, 2), 0, math.random(-2, 2))\n            loot.Transform:SetPosition((pos + offset):Get())\n        end\n    end\n    \n    -- Spawn death effect\n    SpawnPrefab("statue_transition_2").Transform:SetPosition(pos:Get())\nend\n\n-- Function to handle slam attack\nlocal function DoSlamAttack(inst)\n    -- Play slam animation and sound\n    inst.AnimState:PlayAnimation("atk")\n    inst.SoundEmitter:PlaySound(sounds.slam)\n    \n    -- Wait for the animation to reach the impact frame\n    inst:DoTaskInTime(0.5, function()\n        -- Apply damage in an area\n        local pos = inst:GetPosition()\n        local ents = TheSim:FindEntities(pos.x, pos.y, pos.z, 5, {"player", "character"}, {"playerghost", "INLIMBO"})\n        \n        for _, ent in ipairs(ents) do\n            if ent and ent.components.health and not ent.components.health:IsDead() then\n                -- Apply damage and knockback\n                ent.components.health:DoDelta(-SLAM_DAMAGE * TUNING.ANCIENT_GUARDIAN.DAMAGE_MULT)\n                \n                -- Knockback effect\n                if ent.Physics then\n                    local angle = (ent:GetPosition() - pos):GetNormalized()\n                    ent.Physics:SetVel(angle.x * 15, 6, angle.z * 15)\n                end\n                \n                -- Screen shake for affected players\n                if ent.components.playercontroller then\n                    ent.components.playercontroller:ShakeCamera(inst, "FULL", 0.7, 0.02, 1.5, 40)\n                end\n            end\n        end\n        \n        -- Visual effect\n        SpawnPrefab("groundpoundring_fx").Transform:SetPosition(pos:Get())\n    end)\n    \n    -- Return to idle after attack\n    inst.AnimState:PushAnimation("idle", true)\nend\n\n-- Function to handle charge attack\nlocal function StartChargeAttack(inst)\n    -- Set up the charge\n    inst.AnimState:PlayAnimation("charge_pre")\n    inst.SoundEmitter:PlaySound(sounds.charge_pre)\n    \n    -- Start the charge after the pre-animation\n    inst:DoTaskInTime(0.6, function()\n        inst.AnimState:PlayAnimation("charge", true)\n        inst.SoundEmitter:PlaySound(sounds.charge, "charging")\n        inst.components.locomotor:SetExternalSpeedMultiplier(inst, "charging", 2.5)\n        \n        inst.charging = true\n        inst.charge_time = 3 -- Charge for 3 seconds\n        \n        -- Set up collision damage\n        inst.collision_task = inst:DoPeriodicTask(0.1, function()\n            if inst.charging then\n                local pos = inst:GetPosition()\n                local ents = TheSim:FindEntities(pos.x, pos.y, pos.z, 3, {"player", "character"}, {"playerghost", "INLIMBO"})\n                \n                for _, ent in ipairs(ents) do\n                    if ent and ent.components.health and not ent.components.health:IsDead() then\n                        -- Apply damage and knockback\n                        ent.components.health:DoDelta(-CHARGE_DAMAGE * TUNING.ANCIENT_GUARDIAN.DAMAGE_MULT)\n                        \n                        -- Knockback effect\n                        if ent.Physics then\n                            local angle = (ent:GetPosition() - pos):GetNormalized()\n                            ent.Physics:SetVel(angle.x * 20, 5, angle.z * 20)\n                        end\n                    end\n                end\n            end\n        end)\n        \n        -- End the charge after the duration\n        inst:DoTaskInTime(inst.charge_time, function()\n            if inst.charging then\n                inst.charging = false\n                inst.components.locomotor:RemoveExternalSpeedMultiplier(inst, "charging")\n                \n                if inst.collision_task then\n                    inst.collision_task:Cancel()\n                    inst.collision_task = nil\n                end\n                \n                inst.SoundEmitter:KillSound("charging")\n                inst.AnimState:PlayAnimation("charge_pst")\n                inst.AnimState:PushAnimation("idle", true)\n            end\n        end)\n    end)\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n\n    -- Set up physics\n    MakeCharacterPhysics(inst, 500, 1.5)\n    inst.Physics:SetCylinder(2, 3)\n\n    -- Set up animation\n    inst.AnimState:SetBank("ancient_guardian")\n    inst.AnimState:SetBuild("ancient_guardian")\n    inst.AnimState:PlayAnimation("idle", true)\n    \n    -- Set up shadow\n    inst.DynamicShadow:SetSize(6, 3.5)\n    \n    -- Add tags\n    inst:AddTag("epic")\n    inst:AddTag("monster")\n    inst:AddTag("hostile")\n    inst:AddTag("ancient_guardian")\n    inst:AddTag("largecreature")\n    inst:AddTag("boss")\n\n    -- Network variables\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(TUNING.ANCIENT_GUARDIAN.HEALTH)\n    inst.components.health.nofadeout = true\n    \n    inst:AddComponent("combat")\n    inst.base_damage = 50 * TUNING.ANCIENT_GUARDIAN.DAMAGE_MULT\n    inst.components.combat:SetDefaultDamage(inst.base_damage)\n    inst.components.combat:SetAttackPeriod(3)\n    inst.components.combat:SetRange(3, 5)\n    inst.components.combat:SetRetargetFunction(3, function(inst)\n        return FindEntity(\n            inst,\n            30,\n            function(guy) \n                return inst.components.combat:CanTarget(guy)\n            end,\n            nil,\n            nil,\n            {"playerghost", "INLIMBO"}\n        )\n    end)\n    \n    inst:AddComponent("lootdropper")\n    \n    inst:AddComponent("inspectable")\n    inst.components.inspectable:SetDescription("An ancient stone guardian brought to life with dark energy.")\n    \n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 3\n    inst.components.locomotor.runspeed = 5\n    \n    -- Set up special attacks\n    inst.DoSlamAttack = DoSlamAttack\n    inst.StartChargeAttack = StartChargeAttack\n    \n    -- Set up state graph and brain\n    inst:SetStateGraph("SGancient_guardian")\n    inst:SetBrain(brain)\n    \n    -- Set up event listeners\n    inst:ListenForEvent("attacked", OnHit)\n    inst:ListenForEvent("death", OnDeath)\n    \n    -- Initial setup\n    inst.enraged = false\n    inst.charging = false\n    \n    return inst\nend\n\nreturn Prefab("ancient_guardian", fn, assets, prefabs)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-3-creating-the-state-graph",children:"Step 3: Creating the State Graph"}),"\n",(0,i.jsx)(e.p,{children:"Now let's create the state graph that will control the boss's behaviors and animations:"}),"\n",(0,i.jsx)(e.h3,{id:"scriptsstategraphssgancient_guardianlua",children:"scripts/stategraphs/SGancient_guardian.lua"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\nlocal events = {\n    EventHandler("attacked", function(inst)\n        if not (inst.sg:HasStateTag("busy") or inst.sg:HasStateTag("attack") or inst.sg:HasStateTag("charging")) then\n            inst.sg:GoToState("hit")\n        end\n    end),\n    EventHandler("death", function(inst)\n        inst.sg:GoToState("death")\n    end),\n    EventHandler("doattack", function(inst, data)\n        if not (inst.sg:HasStateTag("busy") or inst.sg:HasStateTag("attack")) then\n            -- Choose between different attack types\n            local attack_type = math.random(1, 10)\n            \n            if attack_type <= 5 then\n                -- Regular attack (50% chance)\n                inst.sg:GoToState("attack")\n            elseif attack_type <= 8 then\n                -- Slam attack (30% chance)\n                inst.sg:GoToState("slam")\n            else\n                -- Charge attack (20% chance)\n                inst.sg:GoToState("charge_pre")\n            end\n        end\n    end),\n}\n\nlocal states = {\n    State {\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle", true)\n            inst.Physics:Stop()\n        end,\n    },\n    \n    State {\n        name = "taunt",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("taunt")\n            inst.Physics:Stop()\n            inst.SoundEmitter:PlaySound("ancientguardian/attack")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    State {\n        name = "hit",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("hit")\n            inst.Physics:Stop()\n            inst.SoundEmitter:PlaySound("ancientguardian/hurt")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    State {\n        name = "death",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("death")\n            inst.Physics:Stop()\n            inst.components.locomotor:StopMoving()\n            RemovePhysicsColliders(inst)\n            inst.SoundEmitter:PlaySound("ancientguardian/death")\n        end,\n    },\n    \n    State {\n        name = "attack",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("atk")\n            inst.Physics:Stop()\n            inst.components.locomotor:StopMoving()\n            inst.SoundEmitter:PlaySound("ancientguardian/attack")\n        end,\n        \n        timeline = {\n            TimeEvent(20*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    State {\n        name = "slam",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.DoSlamAttack(inst)\n            inst.Physics:Stop()\n            inst.components.locomotor:StopMoving()\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    State {\n        name = "charge_pre",\n        tags = {"attack", "busy", "charging"},\n        \n        onenter = function(inst)\n            inst.StartChargeAttack(inst)\n            inst.Physics:Stop()\n            inst.components.locomotor:StopMoving()\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("charge")\n            end),\n        },\n    },\n    \n    State {\n        name = "charge",\n        tags = {"attack", "busy", "charging", "moving"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:RunForward()\n        end,\n        \n        onupdate = function(inst)\n            -- Keep running forward during charge\n            inst.components.locomotor:RunForward()\n            \n            -- Check for obstacles\n            local pos = inst:GetPosition()\n            local ahead = pos + (inst.Transform:GetRotation():ToVector3() * 2)\n            \n            -- If we hit a solid obstacle, end the charge\n            if TheWorld.Map:IsVisualGroundAtPoint(ahead.x, ahead.y, ahead.z) == false then\n                inst.sg:GoToState("charge_pst")\n            end\n        end,\n        \n        onexit = function(inst)\n            -- In case we exit the state without properly ending the charge\n            if inst.charging then\n                inst.charging = false\n                inst.components.locomotor:RemoveExternalSpeedMultiplier(inst, "charging")\n                \n                if inst.collision_task then\n                    inst.collision_task:Cancel()\n                    inst.collision_task = nil\n                end\n                \n                inst.SoundEmitter:KillSound("charging")\n            end\n        end,\n    },\n    \n    State {\n        name = "charge_pst",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("charge_pst")\n            inst.Physics:Stop()\n            inst.components.locomotor:StopMoving()\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\n-- Add walking and running states from CommonStates\nCommonStates.AddWalkStates(states, {\n    walktimeline = {\n        TimeEvent(0, function(inst) inst.SoundEmitter:PlaySound("ancientguardian/walk") end),\n        TimeEvent(12*FRAMES, function(inst) inst.SoundEmitter:PlaySound("ancientguardian/walk") end),\n    },\n})\n\nCommonStates.AddRunStates(states, {\n    runtimeline = {\n        TimeEvent(0, function(inst) inst.SoundEmitter:PlaySound("ancientguardian/walk") end),\n        TimeEvent(10*FRAMES, function(inst) inst.SoundEmitter:PlaySound("ancientguardian/walk") end),\n    },\n})\n\nreturn StateGraph("ancient_guardian", states, events, "idle")\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-4-creating-the-ai-brain",children:"Step 4: Creating the AI Brain"}),"\n",(0,i.jsx)(e.p,{children:"Now let's create the brain that will control the boss's decision making:"}),"\n",(0,i.jsx)(e.h3,{id:"scriptsbrainsancient_guardian_brainlua",children:"scripts/brains/ancient_guardian_brain.lua"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'require "behaviours/wander"\nrequire "behaviours/chaseandattack"\nrequire "behaviours/standstill"\nrequire "behaviours/runaway"\nrequire "behaviours/doaction"\nrequire "behaviours/attackwall"\n\nlocal AncientGuardianBrain = Class(Brain, function(self, inst)\n    Brain._ctor(self, inst)\nend)\n\n-- Parameters for behaviors\nlocal MAX_CHASE_TIME = 10\nlocal MAX_CHASE_DIST = 40\nlocal WANDER_DIST = 20\nlocal SEE_PLAYER_DIST = 30\nlocal AGGRO_DIST = 15\n\n-- Function to find nearby players\nlocal function GetPlayerTarget(inst)\n    local nearest_player = nil\n    local nearest_dist = SEE_PLAYER_DIST * SEE_PLAYER_DIST\n    \n    for i, v in ipairs(AllPlayers) do\n        if v and v:IsValid() and not v:HasTag("playerghost") then\n            local dist = inst:GetDistanceSqToInst(v)\n            if dist < nearest_dist then\n                nearest_dist = dist\n                nearest_player = v\n            end\n        end\n    end\n    \n    -- If player is close enough to aggro, return them as target\n    if nearest_player and inst:GetDistanceSqToInst(nearest_player) < AGGRO_DIST * AGGRO_DIST then\n        return nearest_player\n    end\n    \n    return nil\nend\n\n-- Function to check if the boss should use a special attack\nlocal function ShouldSpecialAttack(inst)\n    -- Only use special attacks if enraged or at random times\n    if inst.enraged or math.random() < 0.2 then\n        if inst.components.combat.target ~= nil then\n            -- Make sure target is valid\n            if inst.components.combat.target:IsValid() and not inst.components.combat.target:HasTag("playerghost") then\n                -- Check if target is in range\n                local dist = inst:GetDistanceSqToInst(inst.components.combat.target)\n                if dist < 100 then -- 10 units squared\n                    return true\n                end\n            end\n        end\n    end\n    \n    return false\nend\n\nfunction AncientGuardianBrain:OnStart()\n    local root = PriorityNode({\n        -- If we have a wall in the way, attack it\n        AttackWall(self.inst),\n        \n        -- If we should do a special attack, do it\n        WhileNode(function() return ShouldSpecialAttack(self.inst) end, "Special Attack",\n            ActionNode(function() \n                -- The actual attack type is chosen in the stategraph\n                self.inst:PushEvent("doattack") \n                return SUCCESS \n            end)),\n        \n        -- Chase and attack any player that gets too close\n        ChaseAndAttack(self.inst, MAX_CHASE_TIME, MAX_CHASE_DIST),\n        \n        -- Look for players to target\n        WhileNode(function() return self.inst.components.combat.target == nil end, "Find Target",\n            ActionNode(function()\n                local target = GetPlayerTarget(self.inst)\n                if target ~= nil then\n                    self.inst.components.combat:SetTarget(target)\n                end\n                return SUCCESS\n            end)),\n        \n        -- If nothing else to do, wander around\n        Wander(self.inst, function() \n            -- Try to stay near the original spawn point if we have one\n            if self.inst.spawn_point ~= nil then\n                return self.inst.spawn_point\n            end\n            return self.inst:GetPosition()\n        end, WANDER_DIST),\n    }, .25)\n    \n    self.bt = BT(self.inst, root)\nend\n\nfunction AncientGuardianBrain:OnUpdate()\n    -- Special behavior when enraged\n    if self.inst.enraged then\n        -- If we have a target, occasionally taunt\n        if self.inst.components.combat.target ~= nil and math.random() < 0.01 then\n            self.inst:PushEvent("taunt")\n        end\n    end\nend\n\nreturn AncientGuardianBrain\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-5-creating-the-loot-items",children:"Step 5: Creating the Loot Items"}),"\n",(0,i.jsx)(e.p,{children:"Now let's create the special items that the boss will drop when defeated:"}),"\n",(0,i.jsx)(e.h3,{id:"scriptsprefabsancient_guardian_hornlua",children:"scripts/prefabs/ancient_guardian_horn.lua"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/ancient_guardian_horn.zip"),\n    Asset("ATLAS", "images/inventoryimages/ancient_guardian_horn.xml"),\n    Asset("IMAGE", "images/inventoryimages/ancient_guardian_horn.tex"),\n}\n\nlocal function OnEquip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_object", "ancient_guardian_horn", "swap_ancient_guardian_horn")\n    owner.AnimState:Show("ARM_carry")\n    owner.AnimState:Hide("ARM_normal")\n    \n    -- Grant bonuses when equipped\n    if owner.components.combat ~= nil then\n        owner.components.combat.externaldamagemultipliers:SetModifier(inst, 1.25)\n    end\n    \n    if owner.components.locomotor ~= nil then\n        owner.components.locomotor:SetExternalSpeedMultiplier(inst, "ancient_horn", 1.1)\n    end\nend\n\nlocal function OnUnequip(inst, owner)\n    owner.AnimState:Hide("ARM_carry")\n    owner.AnimState:Show("ARM_normal")\n    \n    -- Remove bonuses when unequipped\n    if owner.components.combat ~= nil then\n        owner.components.combat.externaldamagemultipliers:RemoveModifier(inst)\n    end\n    \n    if owner.components.locomotor ~= nil then\n        owner.components.locomotor:RemoveExternalSpeedMultiplier(inst, "ancient_horn")\n    end\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    MakeInventoryPhysics(inst)\n\n    inst.AnimState:SetBank("ancient_guardian_horn")\n    inst.AnimState:SetBuild("ancient_guardian_horn")\n    inst.AnimState:PlayAnimation("idle")\n\n    -- Make it a weapon\n    inst:AddTag("sharp")\n    inst:AddTag("weapon")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("weapon")\n    inst.components.weapon:SetDamage(60)\n    inst.components.weapon:SetRange(1.2)\n    \n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(200)\n    inst.components.finiteuses:SetUses(200)\n    inst.components.finiteuses:SetOnFinished(function(inst) inst:Remove() end)\n    \n    inst:AddComponent("inspectable")\n    inst.components.inspectable:SetDescription("A massive horn from the Ancient Guardian. It\'s imbued with power.")\n    \n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/ancient_guardian_horn.xml"\n    \n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(OnEquip)\n    inst.components.equippable:SetOnUnequip(OnUnequip)\n    \n    -- Special ability: Ground slam\n    inst:AddComponent("aoetargeting")\n    inst.components.aoetargeting.reticule.reticuleprefab = "reticuleaoe"\n    inst.components.aoetargeting.reticule.pingprefab = "reticuleaoeping"\n    inst.components.aoetargeting.reticule.targetfn = function() return inst:GetPosition() end\n    inst.components.aoetargeting.reticule.validcolour = { 1, .75, 0, 1 }\n    inst.components.aoetargeting.reticule.invalidcolour = { .5, 0, 0, 1 }\n    inst.components.aoetargeting.reticule.ease = true\n    inst.components.aoetargeting.reticule.mouseenabled = true\n    \n    -- Add special attack function\n    inst.GroundSlam = function(inst, pos)\n        -- Create visual effect\n        SpawnPrefab("groundpoundring_fx").Transform:SetPosition(pos:Get())\n        \n        -- Play sound effect\n        inst.SoundEmitter:PlaySound("ancientguardian/slam")\n        \n        -- Apply damage to nearby entities\n        local ents = TheSim:FindEntities(pos.x, pos.y, pos.z, 5, nil, {"player", "playerghost", "INLIMBO"})\n        \n        for _, ent in ipairs(ents) do\n            if ent and ent.components.health and not ent.components.health:IsDead() then\n                -- Apply damage\n                ent.components.health:DoDelta(-30)\n                \n                -- Knockback effect\n                if ent.Physics then\n                    local angle = (ent:GetPosition() - pos):GetNormalized()\n                    ent.Physics:SetVel(angle.x * 10, 5, angle.z * 10)\n                end\n            end\n        end\n        \n        -- Use durability\n        inst.components.finiteuses:Use(5)\n    end\n    \n    -- Add special attack action\n    inst:AddComponent("spellcaster")\n    inst.components.spellcaster:SetSpellFn(function(inst, pos)\n        inst.GroundSlam(inst, pos)\n        return true\n    end)\n    inst.components.spellcaster.canuseonpoint = true\n    inst.components.spellcaster.canusefrominventory = false\n    \n    MakeHauntableLaunch(inst)\n\n    return inst\nend\n\nreturn Prefab("ancient_guardian_horn", fn, assets)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"scriptsprefabsancient_essencelua",children:"scripts/prefabs/ancient_essence.lua"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/ancient_essence.zip"),\n    Asset("ATLAS", "images/inventoryimages/ancient_essence.xml"),\n    Asset("IMAGE", "images/inventoryimages/ancient_essence.tex"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    inst.entity:AddLight()\n\n    MakeInventoryPhysics(inst)\n\n    inst.AnimState:SetBank("ancient_essence")\n    inst.AnimState:SetBuild("ancient_essence")\n    inst.AnimState:PlayAnimation("idle", true)\n    \n    -- Add light\n    inst.Light:SetFalloff(0.7)\n    inst.Light:SetIntensity(0.5)\n    inst.Light:SetRadius(1)\n    inst.Light:SetColour(0.5, 0.8, 1)\n    inst.Light:Enable(true)\n    \n    -- Add tags\n    inst:AddTag("ancient")\n    inst:AddTag("molebait")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("inspectable")\n    inst.components.inspectable:SetDescription("A mysterious essence from the Ancient Guardian. It pulses with energy.")\n    \n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/ancient_essence.xml"\n    \n    inst:AddComponent("stackable")\n    inst.components.stackable.maxsize = 20\n    \n    -- Add fuel component for magic items\n    inst:AddComponent("fuel")\n    inst.components.fuel.fueltype = FUELTYPE.NIGHTMARE\n    inst.components.fuel.fuelvalue = TUNING.LARGE_FUEL\n    \n    -- Add tradable component\n    inst:AddComponent("tradable")\n    inst.components.tradable.goldvalue = 10\n    \n    -- Special effect: Sanity aura when carried\n    inst:AddComponent("equippable")\n    inst.components.equippable.equipslot = EQUIPSLOTS.BODY\n    \n    inst:AddComponent("sanityaura")\n    inst.components.sanityaura.aura = TUNING.SANITYAURA_TINY\n    \n    MakeHauntableLaunch(inst)\n\n    return inst\nend\n\nreturn Prefab("ancient_essence", fn, assets)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"step-6-testing-and-debugging",children:"Step 6: Testing and Debugging"}),"\n",(0,i.jsx)(e.p,{children:"To test your mod:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Place your mod folder in the Don't Starve Together mods directory"}),"\n",(0,i.jsx)(e.li,{children:"Enable the mod in the game's mod menu"}),"\n",(0,i.jsxs)(e.li,{children:["Start a new game and use the console command ",(0,i.jsx)(e.code,{children:'c_spawn("ancient_guardian")'})," to spawn the boss"]}),"\n",(0,i.jsx)(e.li,{children:"Test the boss's behaviors, attacks, and drops"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Animation Errors"}),": Ensure all animation files are properly created and referenced"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"AI Not Working"}),": Check for errors in the brain file and make sure behavior functions are properly defined"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Special Attacks Not Working"}),": Verify that the stategraph is correctly handling the attack events"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Loot Not Dropping"}),": Check that the OnDeath function is properly spawning the loot items"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Performance Issues"}),": If the boss causes lag, consider optimizing the special effects or collision checks"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"debugging-tips",children:"Debugging Tips:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"print()"})," statements to track the execution flow of your code"]}),"\n",(0,i.jsx)(e.li,{children:"Check the log file for error messages"}),"\n",(0,i.jsxs)(e.li,{children:["Use the console command ",(0,i.jsx)(e.code,{children:"c_select()"})," to inspect entity properties"]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"c_godmode()"})," to test boss behaviors without dying"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"step-7-extending-the-mod",children:"Step 7: Extending the Mod"}),"\n",(0,i.jsx)(e.p,{children:"Here are some ideas for extending this mod:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Add a ritual altar that players can build to summon the boss"}),"\n",(0,i.jsx)(e.li,{children:"Create additional boss phases with new attack patterns"}),"\n",(0,i.jsx)(e.li,{children:"Add special environmental effects when the boss is enraged"}),"\n",(0,i.jsx)(e.li,{children:"Create a quest system related to the boss"}),"\n",(0,i.jsx)(e.li,{children:"Add more unique loot items with special abilities"}),"\n",(0,i.jsx)(e.li,{children:"Create minions that the boss can summon during the fight"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(e.p,{children:"Congratulations! You've created a complete mod that adds a custom boss to Don't Starve Together. This project demonstrates many important modding concepts:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Creating complex entities with custom AI"}),"\n",(0,i.jsx)(e.li,{children:"Implementing special attacks and abilities"}),"\n",(0,i.jsx)(e.li,{children:"Using state graphs for entity behavior"}),"\n",(0,i.jsx)(e.li,{children:"Creating custom items with unique effects"}),"\n",(0,i.jsx)(e.li,{children:"Integrating with the game's existing systems"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"This boss mod provides a challenging new encounter for players and rewards them with powerful unique items. You can expand on this foundation to create even more complex boss encounters or integrate this boss into a larger mod with additional content."}),"\n",(0,i.jsx)(e.p,{children:"Remember to thoroughly test your mod before publishing it to ensure a smooth experience for players. Consider gathering feedback from players to refine and improve your boss's mechanics and balance."}),"\n",(0,i.jsx)(e.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://dontstarve.fandom.com/wiki/Modding_Guides",children:"Don't Starve Together Modding Wiki"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://forums.kleientertainment.com/forums/forum/79-dont-starve-together-beta-modding/",children:"Klei Entertainment Forums"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://dontstarveapi.com/",children:"Don't Starve Together Lua API Documentation"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://dontstarve.fandom.com/wiki/State_Graph",children:"State Graph Documentation"})}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var a=t(6540);const i={},s=a.createContext(i);function o(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);