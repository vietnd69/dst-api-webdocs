"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9396],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},47042:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"game-scripts/core-systems/networking-communication/networking/networking-overview","title":"Networking Overview","description":"Overview of core networking systems for server management, client communication, and cluster coordination","source":"@site/docs/game-scripts/core-systems/networking-communication/networking/index.md","sourceDirName":"game-scripts/core-systems/networking-communication/networking","slug":"/game-scripts/core-systems/networking-communication/networking/","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"id":"networking-overview","title":"Networking Overview","description":"Overview of core networking systems for server management, client communication, and cluster coordination","sidebar_position":0,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable","category_type":"networking-system","system_scope":"network communication infrastructure and cluster management"},"sidebar":"docs","previous":{"title":"Server Preferences","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/multiplayer/serverpreferences"},"next":{"title":"Networking Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/"}}');var r=s(74848),t=s(28453);const a={id:"networking-overview",title:"Networking Overview",description:"Overview of core networking systems for server management, client communication, and cluster coordination",sidebar_position:0,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable",category_type:"networking-system",system_scope:"network communication infrastructure and cluster management"},o="Networking Overview",l={},c=[{value:"Build Information",id:"build-information",level:2},{value:"System Purpose",id:"system-purpose",level:2},{value:"Key Responsibilities",id:"key-responsibilities",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Network Communication Flow",id:"network-communication-flow",level:3},{value:"Data Synchronization Layers",id:"data-synchronization-layers",level:3},{value:"Recent Changes",id:"recent-changes",level:2},{value:"Common Integration Patterns",id:"common-integration-patterns",level:2},{value:"Client-Server Communication",id:"client-server-communication",level:3},{value:"Cross-Shard Coordination",id:"cross-shard-coordination",level:3},{value:"Server Configuration",id:"server-configuration",level:3},{value:"Core Modules",id:"core-modules",level:2},{value:"System Interactions",id:"system-interactions",level:2},{value:"Client Request Processing",id:"client-request-processing",level:3},{value:"Cross-Shard Synchronization",id:"cross-shard-synchronization",level:3},{value:"Data Persistence Flow",id:"data-persistence-flow",level:3},{value:"Network Variable Efficiency",id:"network-variable-efficiency",level:2},{value:"Type Selection Guidelines",id:"type-selection-guidelines",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Security and Validation",id:"security-and-validation",level:2},{value:"RPC Protection",id:"rpc-protection",level:3},{value:"Data Integrity",id:"data-integrity",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Network Design",id:"network-design",level:3},{value:"Cluster Management",id:"cluster-management",level:3},{value:"Troubleshooting Guidelines",id:"troubleshooting-guidelines",level:2},{value:"Common Network Issues",id:"common-network-issues",level:3},{value:"Debugging Tools",id:"debugging-tools",level:3},{value:"Related Systems",id:"related-systems",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"networking-overview",children:"Networking Overview"})}),"\n",(0,r.jsx)(n.h2,{id:"build-information",children:"Build Information"}),"\n",(0,r.jsxs)(n.p,{children:["Current documentation based on build version: ",(0,r.jsx)(n.strong,{children:"676042"}),"\nLast updated: ",(0,r.jsx)(n.strong,{children:"2025-06-21"})]}),"\n",(0,r.jsx)(n.h2,{id:"system-purpose",children:"System Purpose"}),"\n",(0,r.jsx)(n.p,{children:"The Networking category provides the foundational network communication infrastructure for Don't Starve Together. These systems enable server-client communication, inter-shard coordination, data synchronization, and cluster management essential for multiplayer gameplay across distributed game worlds."}),"\n",(0,r.jsx)(n.h2,{id:"key-responsibilities",children:"Key Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Server Management"}),": Host configuration, client connections, and session handling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RPC Communication"}),": Remote procedure calls between clients and server"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Synchronization"}),": Network variables for real-time state sharing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cluster Coordination"}),": Inter-shard communication and portal connectivity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Persistence Management"}),": Save data and world generation configuration storage"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,r.jsx)(n.h3,{id:"network-communication-flow",children:"Network Communication Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[Client] \u2190\u2192 [Server/Master Shard] \u2190\u2192 [Secondary Shards]\n    \u2193               \u2193                       \u2193\n[User Input] \u2192 [RPC Validation] \u2192 [State Sync]\n    \u2193               \u2193                       \u2193\n[UI Updates] \u2190 [NetVars Update] \u2190 [World Events]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"data-synchronization-layers",children:"Data Synchronization Layers"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Application Layer"}),": User commands, inventory actions, movement"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RPC Layer"}),": Validated remote procedure calls and responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"NetVars Layer"}),": Automatic state synchronization between instances"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cluster Layer"}),": Inter-shard communication and data sharing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Persistence Layer"}),": Save data management and world configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"recent-changes",children:"Recent Changes"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build"}),(0,r.jsx)(n.th,{children:"Date"}),(0,r.jsx)(n.th,{children:"Component"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/",children:"Networking"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Server management and client connection system"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/networkclientrpc",children:"Network Client RPC"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Remote procedure call validation and processing"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/netvars",children:"Network Variables"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Network variable types and synchronization utilities"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardindex",children:"Shard Index"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Cluster shard data persistence and configuration"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardnetworking",children:"Shard Networking"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Inter-shard communication and portal connectivity"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"common-integration-patterns",children:"Common Integration Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"client-server-communication",children:"Client-Server Communication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Send action from client to server\nSendRPCToServer(RPC.LeftClick, action_code, x, z, target)\n\n-- Synchronize health value across all clients\nlocal health_netvar = net_float(inst.GUID, "health", "healthdirty")\nhealth_netvar:set(current_health)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cross-shard-coordination",children:"Cross-Shard Coordination"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Check if other worlds are available\nif Shard_IsWorldAvailable("Caves") then\n    -- Enable portal connections\n    portal.components.worldmigrator:SetEnabled(true)\nend\n\n-- Sync boss defeats across shards\nShard_SyncBossDefeated("dragonfly", "Caves")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Configure dedicated server\nlocal server_data = GetDefaultServerData()\nserver_data.name = "My DST Server"\nserver_data.max_players = 6\n\n-- Save shard configuration\nlocal shard_index = ShardIndex()\nshard_index:SetServerShardData(world_options, server_data)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"core-modules",children:"Core Modules"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Module"}),(0,r.jsx)(n.th,{children:"Status"}),(0,r.jsx)(n.th,{children:"Purpose"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/",children:"Networking"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Core server management, client connections, and multiplayer features"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/networkclientrpc",children:"Network Client RPC"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Remote procedure call system for client-server communication"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/netvars",children:"Network Variables"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Network variable types and utilities for synchronized client-server communication"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardnetworking",children:"Shard Networking"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Inter-shard communication and synchronization system for cluster management"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardindex",children:"Shard Index"})}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Cluster shard management system for server data persistence and configuration"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"system-interactions",children:"System Interactions"}),"\n",(0,r.jsx)(n.h3,{id:"client-request-processing",children:"Client Request Processing"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Capture"}),": Client captures user input (mouse clicks, keyboard)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RPC Generation"}),": Client generates appropriate RPC with validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Server Processing"}),": Server validates and processes RPC request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State Update"}),": Server updates game state and triggers NetVar changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client Sync"}),": NetVars automatically sync updated state to all clients"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cross-shard-synchronization",children:"Cross-Shard Synchronization"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Detection"}),": Shard detects important game events (boss defeats, portal use)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RPC Transmission"}),": Shard sends event data to master shard via SHARD_RPC"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Master Processing"}),": Master shard validates and broadcasts to relevant shards"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State Application"}),": Each shard applies synchronized state changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Confirmation"}),": Acknowledgment ensures consistency across cluster"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-persistence-flow",children:"Data Persistence Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Setup"}),": ShardIndex manages world generation and server settings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session Management"}),": Active session data tracked with unique identifiers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Periodic Saves"}),": World state serialized and stored persistently"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Migration Support"}),": Save data enables seamless shard switching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recovery System"}),": Rollback capabilities for save corruption handling"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"network-variable-efficiency",children:"Network Variable Efficiency"}),"\n",(0,r.jsx)(n.h3,{id:"type-selection-guidelines",children:"Type Selection Guidelines"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"net_bool"}),": Single-bit flags and boolean states"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"net_byte/net_shortint"}),": Small counters and enumerated values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"net_float"}),": Health percentages and continuous values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"net_string"}),": Player names and dynamic text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"net_entity"}),": Object references and relationships"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use smallest appropriate netvar type to minimize bandwidth"}),"\n",(0,r.jsx)(n.li,{children:"Avoid frequent updates to expensive array netvars"}),"\n",(0,r.jsxs)(n.li,{children:["Leverage ",(0,r.jsx)(n.code,{children:"set_local()"})," for client-side predictions"]}),"\n",(0,r.jsx)(n.li,{children:"Group related state changes to reduce network traffic"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-and-validation",children:"Security and Validation"}),"\n",(0,r.jsx)(n.h3,{id:"rpc-protection",children:"RPC Protection"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parameter type validation using check* functions"}),"\n",(0,r.jsx)(n.li,{children:"Position validation prevents teleportation exploits"}),"\n",(0,r.jsx)(n.li,{children:"Rate limiting blocks RPC flooding attacks"}),"\n",(0,r.jsx)(n.li,{children:"Server authority maintains game state integrity"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-integrity",children:"Data Integrity"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Session identifiers prevent save data corruption"}),"\n",(0,r.jsx)(n.li,{children:"Version management handles save format upgrades"}),"\n",(0,r.jsx)(n.li,{children:"Checksum validation ensures data consistency"}),"\n",(0,r.jsx)(n.li,{children:"Rollback systems recover from corruption events"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"network-design",children:"Network Design"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimize Bandwidth"}),": Choose optimal netvar types and avoid unnecessary updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate Everything"}),": Use provided validation functions for all RPC parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle Failures"}),": Implement proper error handling for network operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintain Authority"}),": Server always has final authority over game state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plan for Scale"}),": Design systems to handle maximum player capacity"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cluster-management",children:"Cluster Management"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Graceful Degradation"}),": Handle shard disconnections without breaking gameplay"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent State"}),": Ensure critical data synchronized across all shards"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Monitoring"}),": Track network performance and connection quality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recovery Procedures"}),": Implement automatic recovery from network failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Management"}),": Monitor and limit resource usage across cluster"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting-guidelines",children:"Troubleshooting Guidelines"}),"\n",(0,r.jsx)(n.h3,{id:"common-network-issues",children:"Common Network Issues"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RPC Validation Failures"}),": Check parameter types and value ranges"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"NetVar Synchronization"}),": Ensure identical declarations on server and clients"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shard Communication"}),": Verify portal bindings and world availability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Save Corruption"}),": Use rollback system and verify session identifiers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Degradation"}),": Monitor bandwidth usage and optimize netvar updates"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"debugging-tools",children:"Debugging Tools"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RPC logging for validation failure analysis"}),"\n",(0,r.jsx)(n.li,{children:"NetVar dirty event tracking for sync issues"}),"\n",(0,r.jsx)(n.li,{children:"Shard connection monitoring for cluster health"}),"\n",(0,r.jsx)(n.li,{children:"Save data integrity verification utilities"}),"\n",(0,r.jsx)(n.li,{children:"Network performance profiling capabilities"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../chat-commands/",children:"Chat Commands"}),": Player communication and admin command systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../multiplayer/",children:"Multiplayer"}),": Multiplayer-specific UI and content delivery systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../fundamentals/",children:"Components"}),": Game object components with network integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../world-systems/",children:"World Systems"}),": World generation and entity management with cluster support"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);