"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[61931],{8263:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"game-scripts/core-systems/world-systems/entities/worldentities","title":"World Entities","description":"World entity injection system for ensuring required entities exist across all worlds and shards","source":"@site/docs/game-scripts/core-systems/world-systems/entities/worldentities.md","sourceDirName":"game-scripts/core-systems/world-systems/entities","slug":"/game-scripts/core-systems/world-systems/entities/worldentities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/worldentities","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"worldentities","title":"World Entities","description":"World entity injection system for ensuring required entities exist across all worlds and shards","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Prefab Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabutil"},"next":{"title":"World Generation Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/"}}');var s=i(74848),r=i(28453);const a={id:"worldentities",title:"World Entities",description:"World entity injection system for ensuring required entities exist across all worlds and shards",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="World Entities",o={},l=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"AddWorldEntities(savedata)",id:"add-world-entities",level:3},{value:"Entity Management",id:"entity-management",level:2},{value:"Pocket Dimension Containers",id:"pocket-dimension-containers",level:3},{value:"Entity Injection Process",id:"entity-injection-process",level:3},{value:"Data Structure",id:"data-structure",level:2},{value:"Save Data Format",id:"save-data-format",level:3},{value:"Entity Position Data",id:"entity-position-data",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"World Loading Pipeline",id:"world-loading-pipeline",level:3},{value:"Shard Synchronization",id:"shard-synchronization",level:3},{value:"Design Considerations",id:"design-considerations",level:2},{value:"Entity Uniqueness",id:"entity-uniqueness",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Extension Guidelines",id:"extension-guidelines",level:2},{value:"Adding New Required Entities",id:"adding-new-required-entities",level:3},{value:"Custom Position Logic",id:"custom-position-logic",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"world-entities",children:"World Entities"})}),"\n",(0,s.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Build Version"}),(0,s.jsx)(n.th,{children:"Change Date"}),(0,s.jsx)(n.th,{children:"Change Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"worldentities"})," module provides a system for injecting unique entities that must exist for all worlds and shards in Don't Starve Together. It ensures critical game entities are present during world initialization, particularly pocket dimension containers that are required for proper game functionality."]}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- The worldentities system is typically used during world loading\nlocal worldentities = require("worldentities")\n\n-- Inject required entities into world save data\nworldentities.AddWorldEntities(savedata)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h3,{id:"add-world-entities",children:"AddWorldEntities(savedata)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nInjects unique entities that must exist for all worlds and shards into the save data before entity instantiation. This function ensures that critical entities like pocket dimension containers are present in every world."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"savedata"})," (table): The world save data structure containing entity information"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"None (modifies savedata in place)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Called during world initialization\nlocal function InitializeWorldEntities(world_savedata)\n    worldentities.AddWorldEntities(world_savedata)\n    -- world_savedata.ents now contains required entities\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implementation Details:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function AddWorldEntities(savedata)\n    local enttable = savedata.ents\n    \n    -- Inject pocket dimension containers\n    local POCKETDIMENSIONCONTAINER_DEFS = require("prefabs/pocketdimensioncontainer_defs").POCKETDIMENSIONCONTAINER_DEFS\n    for _, v in ipairs(POCKETDIMENSIONCONTAINER_DEFS) do\n        local prefab = v.prefab\n        local ents = enttable[prefab]\n        if GetTableSize(ents) == 0 then\n            -- Add entity with default position\n            enttable[prefab] = {{x=0, z=0}}\n        end\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"entity-management",children:"Entity Management"}),"\n",(0,s.jsx)(n.h3,{id:"pocket-dimension-containers",children:"Pocket Dimension Containers"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," The primary function currently handles pocket dimension containers, ensuring one instance of each container type exists per world."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Container Types:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Each pocket dimension container type defined in ",(0,s.jsx)(n.code,{children:"pocketdimensioncontainer_defs"})," is guaranteed to exist"]}),"\n",(0,s.jsx)(n.li,{children:"Containers are positioned at origin (0,0) if not already present"}),"\n",(0,s.jsx)(n.li,{children:"System prevents duplicate creation by checking existing entity count"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"entity-injection-process",children:"Entity Injection Process"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation Check"}),": Verifies if required entities already exist in the world"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity Creation"}),": Creates missing entities with default positioning data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Save Integration"}),": Injects entity data directly into the save structure"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"data-structure",children:"Data Structure"}),"\n",(0,s.jsx)(n.h3,{id:"save-data-format",children:"Save Data Format"}),"\n",(0,s.jsx)(n.p,{children:"The function operates on save data with the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"savedata = {\n    ents = {\n        [prefab_name] = {\n            {x = position_x, z = position_z},\n            -- Additional entity instances...\n        },\n        -- Other prefab types...\n    },\n    -- Other save data fields...\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"entity-position-data",children:"Entity Position Data"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Default Position:"})," ",(0,s.jsx)(n.code,{children:"{x = 0, z = 0}"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Entities injected by this system receive default positioning at world origin. The actual positioning may be handled by other systems during entity instantiation."]}),"\n",(0,s.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,s.jsx)(n.h3,{id:"world-loading-pipeline",children:"World Loading Pipeline"}),"\n",(0,s.jsx)(n.p,{children:"The world entities system integrates with the world loading process:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Example integration during world initialization\nlocal function LoadWorldData(world_save)\n    -- Load base world data\n    local savedata = LoadBaseSaveData(world_save)\n    \n    -- Inject required entities\n    worldentities.AddWorldEntities(savedata)\n    \n    -- Continue with entity instantiation\n    InstantiateWorldEntities(savedata.ents)\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"shard-synchronization",children:"Shard Synchronization"}),"\n",(0,s.jsx)(n.p,{children:"Ensures consistency across different world shards by guaranteeing required entities exist in all shards."}),"\n",(0,s.jsx)(n.h2,{id:"design-considerations",children:"Design Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"entity-uniqueness",children:"Entity Uniqueness"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"One Per World"}),": System ensures exactly one instance of each required entity type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Existence Check"}),": Uses ",(0,s.jsx)(n.code,{children:"GetTableSize(ents) == 0"})," to determine if entity already exists"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No Duplicate Prevention"}),": Documentation notes that duplicate checking must be implemented separately"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimal Injection"}),": Only adds entities that don't already exist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient Lookup"}),": Uses direct table access for entity existence checking"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default Positioning"}),": Uses simple coordinate structure to minimize data overhead"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"extension-guidelines",children:"Extension Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"adding-new-required-entities",children:"Adding New Required Entities"}),"\n",(0,s.jsx)(n.p,{children:"To extend the system for additional entity types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Example extension for new required entity types\nlocal function AddWorldEntities(savedata)\n    local enttable = savedata.ents\n    \n    -- Existing pocket dimension container logic...\n    \n    -- Add new required entity type\n    local REQUIRED_ENTITIES = {"world_tree", "spawn_portal"}\n    for _, prefab_name in ipairs(REQUIRED_ENTITIES) do\n        local ents = enttable[prefab_name]\n        if GetTableSize(ents) == 0 then\n            enttable[prefab_name] = {{x=0, z=0}}\n        end\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-position-logic",children:"Custom Position Logic"}),"\n",(0,s.jsx)(n.p,{children:"For entities requiring specific positioning:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Example with custom positioning\nif GetTableSize(ents) == 0 then\n    local position = CalculateOptimalPosition(prefab)\n    enttable[prefab] = {{x=position.x, z=position.z}}\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../prefabs/pocketdimensioncontainer_defs.md",children:"Pocket Dimension Container Definitions"}),": Defines container types injected by this system"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./saveindex.md",children:"Save Index"}),": Manages save data structure and loading"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./shardnetworking.md",children:"Shard Networking"}),": Handles cross-shard entity synchronization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabutil",children:"Prefab Util"}),": Provides utilities for entity and prefab management"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var t=i(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);