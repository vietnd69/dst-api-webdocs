"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[99633],{28453:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>t});var s=n(96540);const r={},o=s.createContext(r);function d(e){const i=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(o.Provider,{value:i},e.children)}},42136:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"game-scripts/core-systems/mod-support/core/modcompatability","title":"Mod Compatibility","description":"System for handling mod compatibility and version upgrades","source":"@site/docs/game-scripts/core-systems/mod-support/core/modcompatability.md","sourceDirName":"game-scripts/core-systems/mod-support/core","slug":"/game-scripts/core-systems/mod-support/core/modcompatability","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/core/modcompatability","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"modcompatability","title":"Mod Compatibility","description":"System for handling mod compatibility and version upgrades","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Mod Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/core/modutil"},"next":{"title":"DLC Support Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/dlc/"}}');var r=n(74848),o=n(28453);const d={id:"modcompatability",title:"Mod Compatibility",description:"System for handling mod compatibility and version upgrades",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Mod Compatibility",l={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"UpgradeModLevelFromV1toV2(mod, level)",id:"upgrade-mod-level-from-v1-to-v2",level:3},{value:"Upgrade Process",id:"upgrade-process",level:2},{value:"Override Format Conversion",id:"override-format-conversion",level:3},{value:"Location Validation",id:"location-validation",level:3},{value:"Deprecated Features",id:"deprecated-features",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Data Structure Changes",id:"data-structure-changes",level:2},{value:"Version Checking",id:"version-checking",level:3},{value:"Deep Copy Protection",id:"deep-copy-protection",level:3},{value:"Integration",id:"integration",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"mod-compatibility",children:"Mod Compatibility"})}),"\n",(0,r.jsx)(i.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Build Version"}),(0,r.jsx)(i.th,{children:"Change Date"}),(0,r.jsx)(i.th,{children:"Change Type"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsx)(i.tbody,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:"676042"}),(0,r.jsx)(i.td,{children:"2025-06-21"}),(0,r.jsx)(i.td,{children:"stable"}),(0,r.jsx)(i.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"modcompatability"})," module provides functions for handling mod compatibility and upgrading mod data structures from older formats to newer versions. It primarily focuses on upgrading mod level data from version 1 to version 2 format."]}),"\n",(0,r.jsx)(i.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-lua",children:'local modcompatability = require("modcompatability")\n\n-- Upgrade mod level data from v1 to v2\nlocal upgraded_level = modcompatability.UpgradeModLevelFromV1toV2(mod, level_data)\n'})}),"\n",(0,r.jsx)(i.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(i.h3,{id:"upgrade-mod-level-from-v1-to-v2",children:"UpgradeModLevelFromV1toV2(mod, level)"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Status:"})," ",(0,r.jsx)(i.code,{children:"stable"})]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Description:"}),"\nUpgrades mod level data from version 1 format to version 2 format. This function handles the conversion of legacy mod level configurations to the modern format, ensuring compatibility with older mods."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"mod"})," (string): The mod name being upgraded"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"level"})," (table): The level data table to upgrade"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"(table): The upgraded level data in version 2 format"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Example:"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-lua",children:'local old_level = {\n    id = "mymodlevel",\n    overrides = {\n        {"setting1", "value1"},\n        {"setting2", "value2"}\n    },\n    set_pieces = { ... },  -- This will trigger an error\n    -- location is missing, will trigger an error\n}\n\nlocal upgraded = modcompatability.UpgradeModLevelFromV1toV2("mymod", old_level)\n-- upgraded.overrides will be converted to:\n-- {\n--     setting1 = "value1",\n--     setting2 = "value2"\n-- }\n'})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Current implementation since build 676042"}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"upgrade-process",children:"Upgrade Process"}),"\n",(0,r.jsx)(i.h3,{id:"override-format-conversion",children:"Override Format Conversion"}),"\n",(0,r.jsx)(i.p,{children:"The function converts the old array-based override format to the new key-value format:"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Old Format (v1):"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-lua",children:'level.overrides = {\n    {"worldsettingspresets", "SURVIVAL_TOGETHER"},\n    {"difficulty", "easy"}\n}\n'})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"New Format (v2):"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-lua",children:'level.overrides = {\n    worldsettingspresets = "SURVIVAL_TOGETHER",\n    difficulty = "easy"\n}\n'})}),"\n",(0,r.jsx)(i.h3,{id:"location-validation",children:"Location Validation"}),"\n",(0,r.jsx)(i.p,{children:"Version 2 requires levels to specify a location. If missing, the function will:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Log an error message indicating the missing location"}),"\n",(0,r.jsx)(i.li,{children:'Default the location to "forest"'}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"deprecated-features",children:"Deprecated Features"}),"\n",(0,r.jsx)(i.p,{children:"The function checks for and handles deprecated features:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"set_pieces"}),": No longer supported at level scope, should be moved to Task Set"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"required_prefabs"}),": Currently commented out but was previously converted from array to count-based format"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(i.p,{children:["The function uses ",(0,r.jsx)(i.code,{children:"moderror()"})," to log compatibility issues:"]}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Override Format Errors"}),": When old array format is detected"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Set Pieces Error"}),": When deprecated set_pieces table is found"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Missing Location Error"}),": When required location field is missing"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"data-structure-changes",children:"Data Structure Changes"}),"\n",(0,r.jsx)(i.h3,{id:"version-checking",children:"Version Checking"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Checks ",(0,r.jsx)(i.code,{children:"level.version"})," field"]}),"\n",(0,r.jsx)(i.li,{children:"Returns unchanged if version >= 2"}),"\n",(0,r.jsx)(i.li,{children:"Processes upgrade if version < 2 or version is nil"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"deep-copy-protection",children:"Deep Copy Protection"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Uses ",(0,r.jsx)(i.code,{children:"deepcopy()"})," to avoid modifying original data"]}),"\n",(0,r.jsx)(i.li,{children:"Ensures safe transformation without side effects"}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"integration",children:"Integration"}),"\n",(0,r.jsx)(i.p,{children:"This module is typically used by:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Mod Loading System"}),": During mod initialization"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Level Generation"}),": When processing mod-defined levels"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Save System"}),": When loading older save files with mod data"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/core/modindex",children:"Mod Index"}),": Manages mod information and loading"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/core/modutil",children:"Mod Utilities"}),": Provides mod development utilities"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/core/mods",children:"Mods"}),": Core mod loading and management system"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);