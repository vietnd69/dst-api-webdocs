"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4039],{2144:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-vanilla/node-types/condition-nodes","title":"Condition Nodes","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/node-types/condition-nodes.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/condition-nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"condition-nodes","title":"Condition Nodes","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Action Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/action-nodes"},"next":{"title":"Decorator Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes"}}');var o=i(4848),s=i(8453);const d={id:"condition-nodes",title:"Condition Nodes",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},r="Condition Nodes",a={},l=[{value:"Condition Node properties and methods",id:"condition-node-properties-and-methods",level:2},{value:"Properties",id:"properties",level:2},{value:"inst: Entity <span>[readonly]</span>",id:"inst-entity-readonly",level:3},{value:"status: &#39;READY&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39; <span>[readonly]</span>",id:"status-ready--success--failure-readonly",level:3},{value:"fn: Function <span>[readonly]</span>",id:"fn-function-readonly",level:3},{value:"Methods",id:"methods",level:2},{value:"Visit(): &#39;READY&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39;",id:"visit-ready--success--failure",level:3},{value:"Built-in Condition Nodes",id:"built-in-condition-nodes",level:2},{value:"IfNode(condition_fn: Function, success_node: BehaviorNode): ConditionNode",id:"ifnodecondition_fn-function-success_node-behaviornode-conditionnode",level:3},{value:"IfThenElseNode(condition_fn: Function, success_node: BehaviorNode, failure_node: BehaviorNode): ConditionNode",id:"ifthenelsenodecondition_fn-function-success_node-behaviornode-failure_node-behaviornode-conditionnode",level:3},{value:"AndNode(...conditions: Function[]): ConditionNode",id:"andnodeconditions-function-conditionnode",level:3},{value:"OrNode(...conditions: Function[]): ConditionNode",id:"ornodeconditions-function-conditionnode",level:3},{value:"NotNode(condition: Function): ConditionNode",id:"notnodecondition-function-conditionnode",level:3},{value:"Common Condition Patterns",id:"common-condition-patterns",level:2},{value:"Entity State Conditions",id:"entity-state-conditions",level:3},{value:"World State Conditions",id:"world-state-conditions",level:3},{value:"Spatial Conditions",id:"spatial-conditions",level:3},{value:"Creating Custom Condition Nodes",id:"creating-custom-condition-nodes",level:2},{value:"1. Derive from BehaviorNode",id:"1-derive-from-behaviornode",level:3},{value:"2. Implement Visit function",id:"2-implement-visit-function",level:3},{value:"Example: Time-Based Condition Node",id:"example-time-based-condition-node",level:2},{value:"Example: Safety Condition",id:"example-safety-condition",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"See also",id:"see-also",level:2}];function c(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:(0,o.jsx)(e.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"condition-nodes",children:"Condition Nodes"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.em,{children:"API Version: 619045"})}),"\n",(0,o.jsx)(e.p,{children:"Condition Nodes are specialized nodes in Don't Starve Together's behavior tree system that evaluate conditions and determine whether other nodes should execute. They act as decision points in AI behavior trees, enabling entities to make choices based on their state and environment."}),"\n",(0,o.jsx)(e.h2,{id:"condition-node-properties-and-methods",children:"Condition Node properties and methods"}),"\n",(0,o.jsx)(e.p,{children:"Condition Nodes provide the following key properties and methods:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Properties"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"inst"})," - Reference to the entity this node controls"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"status"})," - Current evaluation status of the node"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"fn"})," - Function that evaluates the condition"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Methods"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"Visit()"})," - Evaluates the condition and returns the result status"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(e.h3,{id:"inst-entity-readonly",children:["inst: ",(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"})," ",(0,o.jsx)("span",{style:{color:"#888"},children:"[readonly]"})]}),"\n",(0,o.jsx)(e.p,{children:"A reference to the entity that this condition node is controlling."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Access the condition node's entity\nlocal health = condition_node.inst.components.health\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"status-ready--success--failure-readonly",children:["status: 'READY' | 'SUCCESS' | 'FAILURE' ",(0,o.jsx)("span",{style:{color:"#888"},children:"[readonly]"})]}),"\n",(0,o.jsx)(e.p,{children:"The current evaluation status of the node:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"READY"}),": Node is ready to be evaluated"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"SUCCESS"}),": Condition evaluated to true"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"FAILURE"}),": Condition evaluated to false"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Check the current status\nif condition_node.status == SUCCESS then\n    print("Condition is true")\nend\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"fn-function-readonly",children:["fn: Function ",(0,o.jsx)("span",{style:{color:"#888"},children:"[readonly]"})]}),"\n",(0,o.jsx)(e.p,{children:"The function that evaluates the condition. It should return true for success and false for failure."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Define a condition function\nlocal health_low = function(inst)\n    return inst.components.health:GetPercent() < 0.3\nend\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(e.h3,{id:"visit-ready--success--failure",children:"Visit(): 'READY' | 'SUCCESS' | 'FAILURE'"}),"\n",(0,o.jsx)(e.p,{children:"Evaluates the condition and returns the current status."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Custom condition node implementation\nfunction MyCondition:Visit()\n    if self.status == READY then\n        if self.fn(self.inst) then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"built-in-condition-nodes",children:"Built-in Condition Nodes"}),"\n",(0,o.jsx)(e.p,{children:"Don't Starve Together includes several pre-defined condition nodes:"}),"\n",(0,o.jsxs)(e.h3,{id:"ifnodecondition_fn-function-success_node-behaviornode-conditionnode",children:["IfNode(condition_fn: Function, success_node: ",(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/behavior-node",children:"BehaviorNode"}),"): ConditionNode"]}),"\n",(0,o.jsx)(e.p,{children:"Evaluates a condition and executes a child node if the condition is true."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"condition_fn"}),": Function that evaluates to true or false"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"success_node"}),": Node to execute if condition is true"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Run away if health is low\nlocal if_low_health = IfNode(function(inst) \n    return inst.components.health:GetPercent() < 0.25 \nend,\n    RunAway(inst, "character", 6, 8)\n)\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"ifthenelsenodecondition_fn-function-success_node-behaviornode-failure_node-behaviornode-conditionnode",children:["IfThenElseNode(condition_fn: Function, success_node: ",(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/behavior-node",children:"BehaviorNode"}),", failure_node: ",(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/behavior-node",children:"BehaviorNode"}),"): ConditionNode"]}),"\n",(0,o.jsx)(e.p,{children:"Executes one node if the condition is true and another if it's false."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"condition_fn"}),": Function that evaluates to true or false"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"success_node"}),": Node to execute if condition is true"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"failure_node"}),": Node to execute if condition is false"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Run away if health is low, otherwise attack\nlocal conditional_behavior = IfThenElseNode(function(inst) \n    return inst.components.health:GetPercent() < 0.3 \nend,\n    RunAway(inst, "character", 6, 8),\n    ChaseAndAttack(inst, 10)\n)\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{id:"andnodeconditions-function-conditionnode",children:"AndNode(...conditions: Function[]): ConditionNode"}),"\n",(0,o.jsx)(e.p,{children:"Succeeds only if all child conditions succeed."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"conditions"}),": Multiple condition functions that all must return true"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Check multiple conditions\nlocal all_conditions = AndNode(\n    function(inst) return inst.components.health:GetPercent() > 0.5 end,\n    function(inst) return inst.components.hunger:GetPercent() > 0.25 end,\n    function(inst) return TheWorld.state.isday end\n)\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{id:"ornodeconditions-function-conditionnode",children:"OrNode(...conditions: Function[]): ConditionNode"}),"\n",(0,o.jsx)(e.p,{children:"Succeeds if any child condition succeeds."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"conditions"}),": Multiple condition functions where at least one must return true"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Check if any condition is true\nlocal any_condition = OrNode(\n    function(inst) return inst.components.health:GetPercent() < 0.25 end,\n    function(inst) return inst.components.combat:HasTarget() end,\n    function(inst) return TheWorld.state.isnight end\n)\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{id:"notnodecondition-function-conditionnode",children:"NotNode(condition: Function): ConditionNode"}),"\n",(0,o.jsx)(e.p,{children:"Inverts the result of its child condition."}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"condition"}),": Function whose result will be inverted"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Invert a condition\nlocal not_daytime = NotNode(function(inst) \n    return TheWorld.state.isday \nend)\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"common-condition-patterns",children:"Common Condition Patterns"}),"\n",(0,o.jsx)(e.p,{children:"Here are some commonly used conditions in Don't Starve Together AI:"}),"\n",(0,o.jsx)(e.h3,{id:"entity-state-conditions",children:"Entity State Conditions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Health checks\nfunction(inst) return inst.components.health:GetPercent() < 0.3 end\n\n-- Hunger checks\nfunction(inst) return inst.components.hunger:GetPercent() < 0.25 end\n\n-- Sanity checks\nfunction(inst) return inst.components.sanity:GetPercent() < 0.5 end\n\n-- Combat target checks\nfunction(inst) return inst.components.combat:HasTarget() end\n\n-- Inventory checks\nfunction(inst) return inst.components.inventory:Has("log", 1) end\n\n-- Tag checks\nfunction(inst) return inst:HasTag("player") end\n'})}),"\n",(0,o.jsx)(e.h3,{id:"world-state-conditions",children:"World State Conditions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Time of day checks\nfunction(inst) return TheWorld.state.isday end\nfunction(inst) return TheWorld.state.isdusk end\nfunction(inst) return TheWorld.state.isnight end\n\n-- Season checks\nfunction(inst) return TheWorld.state.issummer end\nfunction(inst) return TheWorld.state.iswinter end\nfunction(inst) return TheWorld.state.isspring end\nfunction(inst) return TheWorld.state.isautumn end\n\n-- Weather checks\nfunction(inst) return TheWorld.state.israining end\nfunction(inst) return TheWorld.state.issnowing end\n"})}),"\n",(0,o.jsx)(e.h3,{id:"spatial-conditions",children:"Spatial Conditions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Distance to target\nfunction(inst) \n    local target = FindClosestPlayerInRange(inst.Transform:GetWorldPosition(), 20)\n    return target ~= nil and inst:GetDistanceSqToInst(target) < 100\nend\n\n-- Check if on specific terrain\nfunction(inst)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    local tile = TheWorld.Map:GetTileAtPoint(x, y, z)\n    return tile == GROUND.GRASS or tile == GROUND.SAVANNA\nend\n"})}),"\n",(0,o.jsx)(e.h2,{id:"creating-custom-condition-nodes",children:"Creating Custom Condition Nodes"}),"\n",(0,o.jsx)(e.p,{children:"To create a custom condition node:"}),"\n",(0,o.jsx)(e.h3,{id:"1-derive-from-behaviornode",children:"1. Derive from BehaviorNode"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'local CustomCondition = Class(BehaviorNode, function(self, inst, ...)\n    BehaviorNode._ctor(self, "CustomCondition")\n    self.inst = inst\n    -- Store other parameters\nend)\n'})}),"\n",(0,o.jsx)(e.h3,{id:"2-implement-visit-function",children:"2. Implement Visit function"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"function CustomCondition:Visit()\n    if self.status == READY then\n        -- Evaluate condition and set status\n        if SomeCondition() then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n"})}),"\n",(0,o.jsx)(e.h2,{id:"example-time-based-condition-node",children:"Example: Time-Based Condition Node"}),"\n",(0,o.jsx)(e.p,{children:"A condition node that succeeds at certain times of day:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'local TimeCondition = Class(BehaviorNode, function(self, inst, daytime, dusktime, nighttime)\n    BehaviorNode._ctor(self, "TimeCondition")\n    self.inst = inst\n    self.daytime = daytime or false\n    self.dusktime = dusktime or false\n    self.nighttime = nighttime or false\nend)\n\nfunction TimeCondition:Visit()\n    if self.status == READY then\n        if (TheWorld.state.isday and self.daytime) or\n           (TheWorld.state.isdusk and self.dusktime) or\n           (TheWorld.state.isnight and self.nighttime) then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n\n-- Usage in a behavior tree\nlocal behavior = PriorityNode(\n{\n    IfNode(TimeCondition(inst, false, false, true),  -- Only true at night\n        DoAction(inst, function()\n            -- Do night-specific behavior\n            return true\n        end)\n    ),\n    IfNode(TimeCondition(inst, true, false, false),  -- Only true during day\n        DoAction(inst, function()\n            -- Do day-specific behavior\n            return true\n        end)\n    ),\n}, 0.5)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"example-safety-condition",children:"Example: Safety Condition"}),"\n",(0,o.jsx)(e.p,{children:"A condition that evaluates if an entity is in danger:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'local SafetyCondition = Class(BehaviorNode, function(self, inst, danger_dist)\n    BehaviorNode._ctor(self, "SafetyCondition")\n    self.inst = inst\n    self.danger_dist = danger_dist or 10\nend)\n\nfunction SafetyCondition:Visit()\n    if self.status == READY then\n        -- Check for threats\n        local x, y, z = self.inst.Transform:GetWorldPosition()\n        local threats = {}\n        \n        -- Check for monsters\n        local ents = TheSim:FindEntities(x, y, z, self.danger_dist, {"monster"})\n        for _, ent in ipairs(ents) do\n            if ent ~= self.inst and ent:IsValid() and\n               ent.components.combat and ent.components.combat:TargetIs(self.inst) then\n                table.insert(threats, ent)\n            end\n        end\n        \n        -- Check for fires\n        local fires = TheSim:FindEntities(x, y, z, self.danger_dist, {"fire"})\n        for _, fire in ipairs(fires) do\n            if fire:IsValid() then\n                table.insert(threats, fire)\n            end\n        end\n        \n        -- Set result based on threats\n        if #threats > 0 then\n            self.status = FAILURE  -- Not safe\n        else\n            self.status = SUCCESS  -- Safe\n        end\n    end\n    \n    return self.status\nend\n'})}),"\n",(0,o.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Keep condition functions simple and efficient"}),"\n",(0,o.jsx)(e.li,{children:"Cache expensive calculations when possible"}),"\n",(0,o.jsx)(e.li,{children:"Use simpler conditions for frequently evaluated nodes"}),"\n",(0,o.jsx)(e.li,{children:"Consider using timeouts for conditions that don't need to be checked every frame"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/brain",children:"Brain"})," - For brain implementation using behavior trees"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/action-nodes",children:"Action Nodes"})," - For nodes that perform actions based on conditions"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes",children:"Priority Nodes"})," - For selecting between different actions"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes",children:"Sequence Nodes"})," - For executing actions in sequence"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes",children:"Decorator Nodes"})," - For modifying node behavior"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>d,x:()=>r});var t=i(6540);const o={},s=t.createContext(o);function d(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:d(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);