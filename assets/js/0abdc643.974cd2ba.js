"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4516],{8261:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api-vanilla/world/worldgen","title":"World Generation API","description":"Tools and systems for procedurally generating game worlds in Don\'t Starve Together.","source":"@site/docs/api-vanilla/world/worldgen.md","sourceDirName":"api-vanilla/world","slug":"/api-vanilla/world/worldgen","permalink":"/dst-api-webdocs/docs/api-vanilla/world/worldgen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"worldgen","title":"World Generation API","sidebar_position":6},"sidebar":"docs","previous":{"title":"Network and World Synchronization","permalink":"/dst-api-webdocs/docs/api-vanilla/world/network"},"next":{"title":"World Settings API","permalink":"/dst-api-webdocs/docs/api-vanilla/world/worldsettings"}}');var i=r(4848),o=r(8453);const t={id:"worldgen",title:"World Generation API",sidebar_position:6},d="World Generation API",l={},a=[{value:"Overview",id:"overview",level:2},{value:"Generation Process",id:"generation-process",level:2},{value:"Detailed Generation Pipeline",id:"detailed-generation-pipeline",level:3},{value:"Key Components",id:"key-components",level:2},{value:"Level Configuration",id:"level-configuration",level:3},{value:"Tasks",id:"tasks",level:3},{value:"Rooms",id:"rooms",level:3},{value:"Lock and Key System",id:"lock-and-key-system",level:2},{value:"Locks",id:"locks",level:3},{value:"Keys",id:"keys",level:3},{value:"Using Locks and Keys",id:"using-locks-and-keys",level:3},{value:"World Customization",id:"world-customization",level:2},{value:"Override Options",id:"override-options",level:3},{value:"World Generation Properties",id:"world-generation-properties",level:3},{value:"Structures",id:"structures",level:4},{value:"Resources",id:"resources",level:4},{value:"Special Features",id:"special-features",level:4},{value:"Terrain Features",id:"terrain-features",level:4},{value:"Creating Custom World Settings",id:"creating-custom-world-settings",level:3},{value:"Special Feature Placement",id:"special-feature-placement",level:2},{value:"Creating Custom Rooms",id:"creating-custom-rooms",level:2},{value:"Room Content Types",id:"room-content-types",level:3},{value:"Custom Terrain Creation",id:"custom-terrain-creation",level:2},{value:"Advanced Room Creation",id:"advanced-room-creation",level:3},{value:"Terrain Patterns and Mixing",id:"terrain-patterns-and-mixing",level:3},{value:"Custom Room Connections",id:"custom-room-connections",level:3},{value:"Static Layouts",id:"static-layouts",level:2},{value:"Debugging World Generation",id:"debugging-world-generation",level:2},{value:"Visualization Tools",id:"visualization-tools",level:3},{value:"Logging World Generation",id:"logging-world-generation",level:3},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"world-generation-api",children:"World Generation API"})}),"\n",(0,i.jsx)(n.p,{children:"Tools and systems for procedurally generating game worlds in Don't Starve Together."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The World Generation API controls how game worlds are created, including terrain, biomes, and feature placement. It provides the foundation for procedurally generated worlds with various customization options."}),"\n",(0,i.jsx)(n.h2,{id:"generation-process",children:"Generation Process"}),"\n",(0,i.jsx)(n.p,{children:"The world generation process follows these main steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Level Selection"}),": Choose a level preset defining overall world characteristics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Graph Construction"}),": Create a connected graph of tasks and rooms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node Population"}),": Fill nodes with terrain types and features"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Terrain Generation"}),": Convert abstract nodes to actual terrain tiles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feature Placement"}),": Add structures, resources, and other map features"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"detailed-generation-pipeline",children:"Detailed Generation Pipeline"}),"\n",(0,i.jsx)(n.p,{children:"The actual generation process consists of the following phases:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Initialization"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Load level preset and configuration"}),"\n",(0,i.jsx)(n.li,{children:"Initialize random number generator"}),"\n",(0,i.jsx)(n.li,{children:"Set up world size and boundaries"}),"\n",(0,i.jsx)(n.li,{children:"Configure season and starting conditions"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Map Layout"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Generate task graph based on level definition"}),"\n",(0,i.jsx)(n.li,{children:"Connect tasks using lock and key system"}),"\n",(0,i.jsx)(n.li,{children:"Ensure proper progression path"}),"\n",(0,i.jsx)(n.li,{children:"Create branching paths and optional areas"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Room Placement"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Assign room types to graph nodes"}),"\n",(0,i.jsx)(n.li,{children:"Calculate room sizes and borders"}),"\n",(0,i.jsx)(n.li,{children:"Connect rooms with appropriate transitions"}),"\n",(0,i.jsx)(n.li,{children:"Place background and special rooms"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Terrain Generation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Convert room types to terrain tiles"}),"\n",(0,i.jsx)(n.li,{children:"Generate terrain height and variation"}),"\n",(0,i.jsx)(n.li,{children:"Create water bodies and land masses"}),"\n",(0,i.jsx)(n.li,{children:"Apply noise and natural variation"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prefab Distribution"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Place required structures (Maxwell's Door, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Distribute resources based on biome rules"}),"\n",(0,i.jsx)(n.li,{children:"Add creatures and spawners"}),"\n",(0,i.jsx)(n.li,{children:"Place vegetation and natural features"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Set Piece Placement"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add pre-designed layouts"}),"\n",(0,i.jsx)(n.li,{children:"Place special structures"}),"\n",(0,i.jsx)(n.li,{children:"Add story-related elements"}),"\n",(0,i.jsx)(n.li,{children:"Include random set pieces"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Finalization"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Validate map connectivity"}),"\n",(0,i.jsx)(n.li,{children:"Ensure resource availability"}),"\n",(0,i.jsx)(n.li,{children:"Add player spawn points"}),"\n",(0,i.jsx)(n.li,{children:"Apply final polish and cleanup"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,i.jsx)(n.h3,{id:"level-configuration",children:"Level Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Levels define the high-level parameters for world generation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local level = {\n    id = "SURVIVAL_DEFAULT",\n    name = "Default",\n    desc = "The standard Don\'t Starve Together experience.",\n    location = "forest",\n    version = 4,\n    overrides = {\n        season_start = "autumn",\n        wormhole_prefab = "wormhole" \n    },\n    tasks = { "Make a pick", "Resource-rich", "The other side" },\n    optional_tasks = { "Forest hunters", "Befriend the pigs" },\n    numoptionaltasks = 2\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"tasks",children:"Tasks"}),"\n",(0,i.jsx)(n.p,{children:"Tasks represent connected clusters of rooms that form distinct areas:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'AddTask("Make a pick", {\n    locks = {{LOCKS.NONE, LOCKS.ROCKS}},\n    keys_given = {KEYS.PICKAXE},\n    room_choices = {\n        ["Plain"] = { ["Forest"] = 1, ["Clearing"] = 1 }\n    },\n    room_bg = GROUND.GRASS,\n    background_room = "BGGrass",\n    colour = {r=0, g=1, b=0, a=1}\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"rooms",children:"Rooms"}),"\n",(0,i.jsx)(n.p,{children:"Rooms define the contents of specific areas:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'AddRoom("Forest", {\n    colour = {r=0.1, g=0.8, b=0.1, a=0.3},\n    value = GROUND.FOREST,\n    tags = {"ExitPiece", "Chester_Eyebone"},\n    contents = {\n        distributepercent = 0.3,\n        distributeprefabs = {\n            evergreen = 6,\n            grass = 0.3,\n            sapling = 0.5,\n            flint = 0.05,\n            fireflies = 0.01\n        }\n    }\n})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"lock-and-key-system",children:"Lock and Key System"}),"\n",(0,i.jsx)(n.p,{children:'The "Lock and Key" system controls progression through the world and helps structure the layout. It creates a natural game flow by requiring players to gather resources or complete tasks before accessing new areas.'}),"\n",(0,i.jsx)(n.h3,{id:"locks",children:"Locks"}),"\n",(0,i.jsx)(n.p,{children:"Locks represent barriers that must be overcome to progress. They don't necessarily manifest as physical barriers, but represent resource or equipment requirements:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"LOCKS = {\n    NONE = 0,           -- No requirement\n    ROCKS = 1,          -- Requires pickaxe (rock resource)\n    TREES = 2,          -- Requires axe (wood resource)\n    SPIDERS = 3,        -- Requires combat capability\n    TIER1 = 4,          -- Requires basic resources\n    TIER2 = 5,          -- Requires advanced resources\n    MEAT = 6,           -- Requires hunting capability\n    GRASS = 7,          -- Requires basic resources\n    TWIGS = 8,          -- Requires basic resources\n    NIGHTTIME = 9,      -- Requires light sources\n    HAMMER = 10,        -- Requires hammer tool\n    MINERHAT = 11,      -- Requires miner hat\n    MONSTERS = 12,      -- Requires combat capability\n    -- and more\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"keys",children:"Keys"}),"\n",(0,i.jsx)(n.p,{children:"Keys represent the tools, resources, or capabilities that allow players to overcome locks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"KEYS = {\n    NONE = 0,           -- No key\n    PICKAXE = 1,        -- Basic pickaxe\n    AXE = 2,            -- Basic axe\n    MEAT = 3,           -- Meat resource\n    WOOD = 4,           -- Wood resource\n    GRASS = 5,          -- Grass resource\n    TIER1 = 6,          -- Basic resources\n    TIER2 = 7,          -- Advanced resources\n    LIGHT = 8,          -- Light sources\n    -- and more\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-locks-and-keys",children:"Using Locks and Keys"}),"\n",(0,i.jsx)(n.p,{children:"When defining tasks, you specify which locks they have and which keys they provide:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'AddTask("Starting Area", {\n    locks = {LOCKS.NONE},  -- No requirements to enter\n    keys_given = {KEYS.AXE, KEYS.PICKAXE},  -- Provides basic tools\n    room_choices = {\n        ["Base"] = {\n            ["ForestStart"] = 1,\n            ["Clearing"] = 1\n        }\n    },\n    room_bg = GROUND.GRASS,\n    background_room = "BGGrass",\n    colour = {r=0, g=1, b=0, a=1}\n})\n\nAddTask("Rocky Territory", {\n    locks = {LOCKS.ROCKS},  -- Requires pickaxe\n    keys_given = {KEYS.TIER1},  -- Provides tier 1 resources\n    room_choices = {\n        ["Rocky"] = {\n            ["Rocky"] = 2,\n            ["RockyBadlands"] = 1\n        }\n    },\n    room_bg = GROUND.DIRT,\n    background_room = "BGRocky",\n    colour = {r=0.6, g=0.6, b=0.0, a=1}\n})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"world-customization",children:"World Customization"}),"\n",(0,i.jsx)(n.p,{children:"The game allows customization of world generation through several parameters:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Customize world size\nworldgendata.overrides.worldsize = "large"\n\n-- Customize resource distribution\nworldgendata.overrides.boons = "more"\nworldgendata.overrides.trees = "lots"\n\n-- Customize terrain features\nworldgendata.overrides.branching = "most"\nworldgendata.overrides.loop = "never"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"override-options",children:"Override Options"}),"\n",(0,i.jsx)(n.p,{children:"World generation can be customized through override parameters:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Options"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"worldsize"})}),(0,i.jsx)(n.td,{children:'"small", "medium", "large", "huge"'}),(0,i.jsx)(n.td,{children:"Controls overall map size"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"branching"})}),(0,i.jsx)(n.td,{children:'"never", "least", "default", "most"'}),(0,i.jsx)(n.td,{children:"Controls how many branches tasks have"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"loop"})}),(0,i.jsx)(n.td,{children:'"never", "default", "always"'}),(0,i.jsx)(n.td,{children:"Whether tasks form loops"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"resources"})}),(0,i.jsx)(n.td,{children:'"few", "default", "many", "max"'}),(0,i.jsx)(n.td,{children:"Overall resource abundance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"season_start"})}),(0,i.jsx)(n.td,{children:'"autumn", "winter", "spring", "summer"'}),(0,i.jsx)(n.td,{children:"Starting season"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"touchstone"})}),(0,i.jsx)(n.td,{children:'"none", "default", "many"'}),(0,i.jsx)(n.td,{children:"Number of revival stones"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boons"})}),(0,i.jsx)(n.td,{children:'"none", "few", "default", "many"'}),(0,i.jsx)(n.td,{children:"Skeleton/supply drops frequency"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"prefabswaps_start"})}),(0,i.jsx)(n.td,{children:'"default", "classic", "highly random"'}),(0,i.jsx)(n.td,{children:"How predictable prefab placement is"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"beefalo"})}),(0,i.jsx)(n.td,{children:'"none", "rare", "default", "often", "always"'}),(0,i.jsx)(n.td,{children:"Beefalo abundance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pigs"})}),(0,i.jsx)(n.td,{children:'"none", "rare", "default", "often", "always"'}),(0,i.jsx)(n.td,{children:"Pig house abundance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"spiders"})}),(0,i.jsx)(n.td,{children:'"none", "rare", "default", "often", "always"'}),(0,i.jsx)(n.td,{children:"Spider den abundance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rabbits"})}),(0,i.jsx)(n.td,{children:'"none", "rare", "default", "often", "always"'}),(0,i.jsx)(n.td,{children:"Rabbit hole abundance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"trees"})}),(0,i.jsx)(n.td,{children:'"none", "rare", "default", "often", "always"'}),(0,i.jsx)(n.td,{children:"Tree abundance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rocks"})}),(0,i.jsx)(n.td,{children:'"none", "rare", "default", "often", "always"'}),(0,i.jsx)(n.td,{children:"Rock abundance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"carrots"})}),(0,i.jsx)(n.td,{children:'"none", "rare", "default", "often", "always"'}),(0,i.jsx)(n.td,{children:"Carrot abundance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"grass"})}),(0,i.jsx)(n.td,{children:'"none", "rare", "default", "often", "always"'}),(0,i.jsx)(n.td,{children:"Grass abundance"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"world-generation-properties",children:"World Generation Properties"}),"\n",(0,i.jsx)(n.p,{children:"The following are common prefabs and properties used in world generation:"}),"\n",(0,i.jsx)(n.h4,{id:"structures",children:"Structures"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prefab"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Default Distribution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pighouse"})}),(0,i.jsx)(n.td,{children:"Pig houses"}),(0,i.jsx)(n.td,{children:"0.12 per room in Forest biomes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"mermhouse"})}),(0,i.jsx)(n.td,{children:"Merm houses"}),(0,i.jsx)(n.td,{children:"0.1 per room in Marsh biomes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"spiderden"})}),(0,i.jsx)(n.td,{children:"Spider dens"}),(0,i.jsx)(n.td,{children:"0.15 per room in Forest/Rocky biomes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rabbithouse"})}),(0,i.jsx)(n.td,{children:"Rabbit hutches"}),(0,i.jsx)(n.td,{children:"0.08 per room in Deciduous biomes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"beehive"})}),(0,i.jsx)(n.td,{children:"Bee hives"}),(0,i.jsx)(n.td,{children:"0.05 per room in Forest/Meadow biomes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"wasphive"})}),(0,i.jsx)(n.td,{children:"Killer bee hives"}),(0,i.jsx)(n.td,{children:"0.03 per room in Meadow biomes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tallbirdnest"})}),(0,i.jsx)(n.td,{children:"Tallbird nests"}),(0,i.jsx)(n.td,{children:"0.08 per room in Rocky biomes"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prefab"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Default Distribution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"evergreen"})}),(0,i.jsx)(n.td,{children:"Pine trees"}),(0,i.jsx)(n.td,{children:"6.0 per Forest room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deciduoustree"})}),(0,i.jsx)(n.td,{children:"Birchnut trees"}),(0,i.jsx)(n.td,{children:"4.0 per Deciduous room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rock1"})}),(0,i.jsx)(n.td,{children:"Boulder"}),(0,i.jsx)(n.td,{children:"0.05 per Rocky room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rock2"})}),(0,i.jsx)(n.td,{children:"Gold vein"}),(0,i.jsx)(n.td,{children:"0.02 per Rocky room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"flint"})}),(0,i.jsx)(n.td,{children:"Flint"}),(0,i.jsx)(n.td,{children:"0.05 per room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"grass"})}),(0,i.jsx)(n.td,{children:"Grass tufts"}),(0,i.jsx)(n.td,{children:"0.3 per Grassland room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sapling"})}),(0,i.jsx)(n.td,{children:"Saplings"}),(0,i.jsx)(n.td,{children:"0.5 per Forest room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"reeds"})}),(0,i.jsx)(n.td,{children:"Reeds"}),(0,i.jsx)(n.td,{children:"0.3 per Marsh room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"flower"})}),(0,i.jsx)(n.td,{children:"Flowers"}),(0,i.jsx)(n.td,{children:"0.2 per Meadow room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"carrot_planted"})}),(0,i.jsx)(n.td,{children:"Carrots"}),(0,i.jsx)(n.td,{children:"0.1 per Grassland room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"berrybush"})}),(0,i.jsx)(n.td,{children:"Berry bushes"}),(0,i.jsx)(n.td,{children:"0.2 per Forest room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"berrybush2"})}),(0,i.jsx)(n.td,{children:"Juicy berry bushes"}),(0,i.jsx)(n.td,{children:"0.1 per Forest room"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"special-features",children:"Special Features"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Prefab"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Default Distribution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"wormhole"})}),(0,i.jsx)(n.td,{children:"Wormholes"}),(0,i.jsx)(n.td,{children:"2-4 pairs per world"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"cave_entrance"})}),(0,i.jsx)(n.td,{children:"Cave entrances"}),(0,i.jsx)(n.td,{children:"4-8 per world"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pond"})}),(0,i.jsx)(n.td,{children:"Ponds"}),(0,i.jsx)(n.td,{children:"0.1 per Grassland room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pond_mos"})}),(0,i.jsx)(n.td,{children:"Mosquito ponds"}),(0,i.jsx)(n.td,{children:"0.15 per Marsh room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"fireflies"})}),(0,i.jsx)(n.td,{children:"Firefly lights"}),(0,i.jsx)(n.td,{children:"0.1 per Forest room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"skeleton"})}),(0,i.jsx)(n.td,{children:"Skeleton set pieces"}),(0,i.jsx)(n.td,{children:"Based on 'boons' setting"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"beefaloherd"})}),(0,i.jsx)(n.td,{children:"Beefalo herds"}),(0,i.jsx)(n.td,{children:"Based on 'beefalo' setting"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"terrain-features",children:"Terrain Features"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Default Weight"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.ROAD"})}),(0,i.jsx)(n.td,{children:"Roads"}),(0,i.jsx)(n.td,{children:"Generated between tasks"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.FOREST"})}),(0,i.jsx)(n.td,{children:"Forest terrain"}),(0,i.jsx)(n.td,{children:"1.0 in Forest rooms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.GRASS"})}),(0,i.jsx)(n.td,{children:"Grassland terrain"}),(0,i.jsx)(n.td,{children:"1.0 in Grassland rooms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.MARSH"})}),(0,i.jsx)(n.td,{children:"Marsh terrain"}),(0,i.jsx)(n.td,{children:"1.0 in Marsh rooms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.ROCKY"})}),(0,i.jsx)(n.td,{children:"Rocky terrain"}),(0,i.jsx)(n.td,{children:"1.0 in Rocky rooms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.SAVANNA"})}),(0,i.jsx)(n.td,{children:"Savanna terrain"}),(0,i.jsx)(n.td,{children:"1.0 in Savanna rooms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.DIRT"})}),(0,i.jsx)(n.td,{children:"Dirt terrain"}),(0,i.jsx)(n.td,{children:"Used for transitions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.WOODFLOOR"})}),(0,i.jsx)(n.td,{children:"Wooden flooring"}),(0,i.jsx)(n.td,{children:"Used in set pieces"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GROUND.CARPET"})}),(0,i.jsx)(n.td,{children:"Carpeted flooring"}),(0,i.jsx)(n.td,{children:"Used in set pieces"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"creating-custom-world-settings",children:"Creating Custom World Settings"}),"\n",(0,i.jsx)(n.p,{children:"You can define custom world settings in your mod:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modworldgenmain.lua\nGLOBAL.TUNING.WORLDGEN_DENSITY_MULTIPLIER = 0.8 -- Reduce overall density\nGLOBAL.terrain.filter.multiply.GRASS = 1.5 -- Increase grass density\n\n-- Custom level preset\nAddLevelPreset("CUSTOM_WORLD", {\n    name = "Custom World",\n    desc = "A customized world with unique features.",\n    location = "forest",\n    version = 1,\n    overrides = {\n        start_location = "default",\n        world_size = "medium",\n        resource_renewal = "always",\n        spring = "rare",\n        boons = "many",\n        weather = "rare",\n        roads = "never",\n        spiders = "often",\n        beefalo = "rare",\n        pigs = "often"\n    }\n})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"special-feature-placement",children:"Special Feature Placement"}),"\n",(0,i.jsx)(n.p,{children:"Special features like set pieces have dedicated placement systems:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Add a guaranteed set piece\nlevel.ordered_story_setpieces = {\n    "PigKingLayout",\n    "MaxwellThrone"\n}\n\n-- Add potential random set pieces\nlevel.random_set_pieces = {\n    "Chessy_1",\n    "Chessy_2",\n    "Chessy_3",\n    "Chessy_4",\n    "Chessy_5",\n    "Chessy_6"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-custom-rooms",children:"Creating Custom Rooms"}),"\n",(0,i.jsx)(n.p,{children:"You can create custom rooms for your mod:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a custom room\nAddRoom("MyCustomForest", {\n    colour = {r=0.2, g=0.7, b=0.1, a=0.3},\n    value = GROUND.FOREST,\n    tags = {"ExitPiece", "MyCustomTag"},\n    contents = {\n        distributepercent = 0.4, -- Higher density than regular forest\n        distributeprefabs = {\n            evergreen = 8,\n            grass = 0.5,\n            sapling = 0.7,\n            berrybush = 0.2,\n            red_mushroom = 0.1,\n            fireflies = 0.02,\n            goldnugget = 0.05,\n            flint = 0.1,\n            blue_mushroom = 0.02\n        }\n    }\n})\n\n-- Add a task that uses your custom room\nAddTask("MyCustomTask", {\n    locks = {LOCKS.NONE},\n    keys_given = {KEYS.PICKAXE, KEYS.AXE},\n    room_choices = {\n        ["Plain"] = {\n            ["MyCustomForest"] = 2,\n            ["Clearing"] = 1\n        }\n    },\n    room_bg = GROUND.GRASS,\n    background_room = "BGGrass",\n    colour = {r=0.2, g=0.6, b=0.2, a=1}\n})\n\n-- Add your task to a level\nAddLevel("SURVIVAL_DEFAULT", {\n    tasks = {"Make a pick", "MyCustomTask", "The other side"}\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"room-content-types",children:"Room Content Types"}),"\n",(0,i.jsx)(n.p,{children:"Rooms can distribute contents in different ways:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Standard distribution (random placement based on percentages)\ncontents = {\n    distributepercent = 0.3,\n    distributeprefabs = {\n        evergreen = 6,\n        grass = 0.3,\n        sapling = 0.5\n    }\n}\n\n-- Exact counts (place exactly this many of each prefab)\ncontents = {\n    countstaticlayouts = {\n        ["PigHouse"] = 3,\n        ["BerryPatch"] = 2\n    }\n}\n\n-- Mixed approach\ncontents = {\n    distributepercent = 0.2,\n    distributeprefabs = {\n        evergreen = 5,\n        grass = 0.4\n    },\n    countprefabs = {\n        pighouse = 2,\n        spiderden = 1\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"custom-terrain-creation",children:"Custom Terrain Creation"}),"\n",(0,i.jsx)(n.p,{children:"To create custom terrain types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a new terrain type\nGROUND.MYTERRAIN = 99 -- Choose an unused number\nGROUND_NAMES[GROUND.MYTERRAIN] = "MyTerrain"\n\n-- Add assets for the new terrain\nlocal function AddAssets()\n    return {\n        Asset("IMAGE", "levels/tiles/myterrain.tex"),\n        Asset("FILE", "levels/tiles/myterrain.xml")\n    }\nend\n\n-- Use the terrain in a custom room\nAddRoom("MyTerrainRoom", {\n    colour = {r=0.5, g=0.5, b=0.2, a=0.3},\n    value = GROUND.MYTERRAIN,\n    contents = {\n        distributepercent = 0.2,\n        distributeprefabs = {\n            rocks = 0.1,\n            grass = 0.5,\n            myprefab = 0.3\n        }\n    }\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-room-creation",children:"Advanced Room Creation"}),"\n",(0,i.jsx)(n.p,{children:"When creating custom rooms, you have several advanced options available:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'AddRoom("CustomAdvancedRoom", {\n    -- Basic properties\n    colour = {r=0.3, g=0.3, b=0.3, a=0.3},\n    value = GROUND.FOREST,\n    \n    -- Tags control room behavior and placement\n    tags = {\n        "ExitPiece",         -- Can be used as an exit\n        "Hutch_Fishbowl",    -- Can spawn Hutch\n        "Chester_Eyebone",   -- Can spawn Chester\'s eyebone\n        "StagehandGarden",   -- Can spawn Stagehand\n        "HasMonsters",       -- Contains hostile creatures\n        "Mist",             -- Has mist effects\n        "RoadPoison",       -- Roads are dangerous here\n        "Forest",           -- Forest biome tag\n        "MoonIsland"        -- Moon island biome tag\n    },\n    \n    -- Advanced content distribution\n    contents = {\n        -- Percentage of room to fill with distributed items\n        distributepercent = 0.4,\n        \n        -- Random distribution of prefabs\n        distributeprefabs = {\n            evergreen = {\n                weight = 6,           -- Relative spawn weight\n                min_spacing = 2,      -- Minimum spacing between trees\n                avoid_player = true,  -- Avoid spawning near players\n                clustering = 0.5      -- How much items cluster together (0-1)\n            },\n            grass = {\n                weight = 0.3,\n                min_spacing = 1.5,\n                clustering = 0.2\n            },\n            berrybush = {\n                weight = 0.2,\n                min_spacing = 1.8,\n                avoid_secondary = true -- Avoid other tagged items\n            }\n        },\n        \n        -- Exact count prefabs\n        countprefabs = {\n            pighouse = 2,    -- Exactly 2 pig houses\n            spiderden = 1    -- Exactly 1 spider den\n        },\n        \n        -- Static layouts (pre-designed arrangements)\n        countstaticlayouts = {\n            ["PigVillage"] = 1,\n            ["SpiderCity"] = 1\n        }\n    },\n    \n    -- Custom generation parameters\n    gen_params = {\n        ground_types = {     -- Multiple ground types in one room\n            [GROUND.FOREST] = 3,\n            [GROUND.GRASS] = 1\n        },\n        water_percentage = 0.2,  -- Amount of water\n        has_border = true,      -- Add terrain border\n        border_size = 2,        -- Size of border in tiles\n        edge_padding = 1        -- Padding from room edge\n    },\n    \n    -- Custom placement rules\n    custom_tiles = {\n        GeneratorFunction = function(room, entity, x, y, z)\n            -- Custom placement logic\n            return true -- or false to prevent placement\n        end\n    },\n    \n    -- Room-specific handlers\n    handlers = {\n        -- Called when room is first created\n        OnCreate = function(room)\n            -- Initialize room-specific data\n        end,\n        \n        -- Called when entities are being placed\n        OnPopulate = function(room)\n            -- Add custom entities\n        end,\n        \n        -- Called after all entities are placed\n        OnPostPopulate = function(room)\n            -- Final room modifications\n        end\n    }\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"terrain-patterns-and-mixing",children:"Terrain Patterns and Mixing"}),"\n",(0,i.jsx)(n.p,{children:"You can create complex terrain patterns by mixing different ground types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Create a checkerboard pattern\nlocal function CreateCheckerboardTerrain(room)\n    local size = room.size\n    for x = 0, size.x do\n        for y = 0, size.y do\n            if (x + y) % 2 == 0 then\n                room:SetTile(x, y, GROUND.FOREST)\n            else\n                room:SetTile(x, y, GROUND.GRASS)\n            end\n        end\n    end\nend\n\n-- Create terrain gradients\nlocal function CreateTerrainGradient(room)\n    local size = room.size\n    for x = 0, size.x do\n        local percent = x / size.x\n        if percent < 0.33 then\n            room:SetTile(x, y, GROUND.FOREST)\n        elseif percent < 0.66 then\n            room:SetTile(x, y, GROUND.GRASS)\n        else\n            room:SetTile(x, y, GROUND.MARSH)\n        end\n    end\nend\n\n-- Add noise to terrain\nlocal function AddTerrainNoise(room)\n    local size = room.size\n    for x = 0, size.x do\n        for y = 0, size.y do\n            if math.random() < 0.2 then\n                -- Randomly change 20% of tiles\n                room:SetTile(x, y, GROUND.DIRT)\n            end\n        end\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"custom-room-connections",children:"Custom Room Connections"}),"\n",(0,i.jsx)(n.p,{children:"You can define how rooms connect to each other:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'AddRoom("CustomConnectedRoom", {\n    -- ... other room properties ...\n    \n    -- Define valid connections\n    connections = {\n        {\n            name = "Forest",      -- Connect to Forest rooms\n            direction = "north",  -- From north side\n            guards = "spiderden" -- Guard with spider dens\n        },\n        {\n            name = "Rocky",       -- Connect to Rocky rooms\n            direction = "east",   -- From east side\n            distance = 2,        -- Must be 2 rooms away\n            required = true      -- Must have this connection\n        }\n    },\n    \n    -- Custom connection handling\n    OnConnect = function(room, other_room, direction)\n        -- Add custom logic when rooms connect\n        if direction == "north" then\n            -- Add special features at north connection\n        end\n    end\n})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"static-layouts",children:"Static Layouts"}),"\n",(0,i.jsx)(n.p,{children:'Static layouts allow you to create custom "set pieces" with precise object placement:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a static layout\nlocal mylayout = StaticLayout.Get(\n    "map/static_layouts/my_custom_layout",\n    {\n        start_mask = PLACE_MASK.NORMAL,\n        fill_mask = PLACE_MASK.IGNORE_IMPASSABLE,\n        layout_position = LAYOUT_POSITION.CENTER\n    }\n)\n\n-- Add it to the set pieces that can be placed\ntable.insert(level.random_set_pieces, "my_custom_layout")\n'})}),"\n",(0,i.jsx)(n.p,{children:"The layout file would define exact positions for objects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'return {\n  version = "1.1",\n  luaversion = "5.1",\n  orientation = "orthogonal",\n  width = 16,\n  height = 16,\n  tilewidth = 16,\n  tileheight = 16,\n  properties = {},\n  tilesets = {},\n  layers = {\n    {\n      type = "objectgroup",\n      name = "FG_OBJECTS",\n      visible = true,\n      opacity = 1,\n      properties = {},\n      objects = {\n        {\n          name = "evergreen",\n          type = "evergreen",\n          shape = "rectangle",\n          x = 64,\n          y = 80,\n          width = 0,\n          height = 0\n        },\n        {\n          name = "firepit",\n          type = "firepit",\n          shape = "rectangle",\n          x = 128,\n          y = 128,\n          width = 0,\n          height = 0\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"debugging-world-generation",children:"Debugging World Generation"}),"\n",(0,i.jsx)(n.p,{children:"When creating custom world generation, debugging is essential. Here are some useful techniques:"}),"\n",(0,i.jsx)(n.h3,{id:"visualization-tools",children:"Visualization Tools"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In your modmain, add a debug command to visualize the world graph\nlocal function VisualizeWorldGraph()\n    local graph = TheWorld.topology\n    \n    -- Highlight each node in the graph\n    for i, node in ipairs(graph.nodes) do\n        local x, y, z = node.x, 0, node.y\n        local marker = SpawnPrefab("flint") -- Use any visible prefab\n        marker.Transform:SetPosition(x, y, z)\n        marker:DoTaskInTime(30, marker.Remove) -- Clean up after 30 seconds\n        marker.AnimState:SetMultColour(1, 0, 0, 1) -- Make it red\n        \n        -- Show node info\n        print("Node", i, ":", node.type, "at", x, ",", z)\n    end\n    \n    -- Highlight each edge in the graph\n    for i, edge in ipairs(graph.edges) do\n        local node1 = graph.nodes[edge[1]]\n        local node2 = graph.nodes[edge[2]]\n        \n        -- Create a line of markers between the nodes\n        local steps = 10\n        for j = 0, steps do\n            local percent = j / steps\n            local x = node1.x + (node2.x - node1.x) * percent\n            local z = node1.y + (node2.y - node1.y) * percent\n            \n            local marker = SpawnPrefab("goldnugget")\n            marker.Transform:SetPosition(x, 0, z)\n            marker:DoTaskInTime(30, marker.Remove)\n        end\n    end\nend\n\nAddPlayerPostInit(function(player)\n    player:ListenForEvent("ms_debug_worldgen", VisualizeWorldGraph)\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"logging-world-generation",children:"Logging World Generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modworldgenmain.lua, add logging\nlocal oldAddTask = AddTask\nAddTask = function(name, data)\n    print("WORLDGEN: Adding task", name)\n    for k, v in pairs(data.room_choices or {}) do\n        print("  Room Group:", k)\n        for room, count in pairs(v) do\n            print("    Room:", room, "Count:", count)\n        end\n    end\n    return oldAddTask(name, data)\nend\n\nlocal oldAddRoom = AddRoom\nAddRoom = function(name, data)\n    print("WORLDGEN: Adding room", name, "with ground", data.value)\n    return oldAddRoom(name, data)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Network System"}),": Handles connections between different areas"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lock and Key System"}),": Controls progression through the world"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Room System"}),": Defines individual areas' contents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Map System"}),": Translates the generation plan into actual terrain"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);