"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9036],{1243:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/examples/custom-ai","title":"Creating Custom AI and Brain Behaviors","description":"This guide focuses on creating custom AI and brain behaviors for entities in Don\'t Starve Together. Understanding how to create custom AI allows you to develop unique creatures with complex behaviors that can interact with the game world and players in interesting ways.","source":"@site/docs/api-vanilla/examples/custom-ai.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/custom-ai","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-ai","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"id":"custom-ai","title":"Creating Custom AI and Brain Behaviors","sidebar_position":14},"sidebar":"docs","previous":{"title":"Creating Custom Creatures","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-creatures"},"next":{"title":"Creating Custom Game Modes","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-game-mode"}}');var s=t(4848),a=t(8453);const o={id:"custom-ai",title:"Creating Custom AI and Brain Behaviors",sidebar_position:14},r="Creating Custom AI and Brain Behaviors",l={},d=[{value:"Understanding AI in Don&#39;t Starve Together",id:"understanding-ai-in-dont-starve-together",level:2},{value:"Key Components of AI System",id:"key-components-of-ai-system",level:3},{value:"Basic Brain Structure",id:"basic-brain-structure",level:2},{value:"Node Types",id:"node-types",level:2},{value:"Priority Nodes",id:"priority-nodes",level:3},{value:"Sequence Nodes",id:"sequence-nodes",level:3},{value:"Decorator Nodes",id:"decorator-nodes",level:3},{value:"Condition Nodes",id:"condition-nodes",level:3},{value:"Action Nodes",id:"action-nodes",level:3},{value:"Common Behaviors",id:"common-behaviors",level:2},{value:"Wandering",id:"wandering",level:3},{value:"Following",id:"following",level:3},{value:"Combat",id:"combat",level:3},{value:"Foraging",id:"foraging",level:3},{value:"Advanced AI Techniques",id:"advanced-ai-techniques",level:2},{value:"Memory and Knowledge",id:"memory-and-knowledge",level:3},{value:"Time-based Behaviors",id:"time-based-behaviors",level:3},{value:"Group Behaviors",id:"group-behaviors",level:3},{value:"State-based Decision Making",id:"state-based-decision-making",level:3},{value:"Integration with StateGraph",id:"integration-with-stategraph",level:2},{value:"Complete Example: Custom Creature with AI",id:"complete-example-custom-creature-with-ai",level:2},{value:"Creating Custom Brain Behaviors",id:"creating-custom-brain-behaviors",level:2},{value:"Debugging AI",id:"debugging-ai",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debugging Tips",id:"debugging-tips",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"creating-custom-ai-and-brain-behaviors",children:"Creating Custom AI and Brain Behaviors"})}),"\n",(0,s.jsx)(e.p,{children:"This guide focuses on creating custom AI and brain behaviors for entities in Don't Starve Together. Understanding how to create custom AI allows you to develop unique creatures with complex behaviors that can interact with the game world and players in interesting ways."}),"\n",(0,s.jsx)(e.h2,{id:"understanding-ai-in-dont-starve-together",children:"Understanding AI in Don't Starve Together"}),"\n",(0,s.jsx)(e.p,{children:"Don't Starve Together uses a behavior tree system for AI, implemented through the Brain component. The behavior tree consists of various node types that determine how entities make decisions and interact with the world."}),"\n",(0,s.jsx)(e.h3,{id:"key-components-of-ai-system",children:"Key Components of AI System"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Brain Component"}),": The main component that manages AI behavior"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Behavior Trees"}),": Hierarchical structures of nodes that define decision-making"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Node Types"}),": Different types of nodes that control behavior flow"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Target Selection"}),": How entities choose what to interact with"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"State Integration"}),": How AI decisions translate to StateGraph actions"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"basic-brain-structure",children:"Basic Brain Structure"}),"\n",(0,s.jsx)(e.p,{children:"A basic brain implementation includes:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/brains/examplebrain.lua\nrequire "behaviours/wander"\nrequire "behaviours/follow"\nrequire "behaviours/faceentity"\nrequire "behaviours/chaseandattack"\nrequire "behaviours/runaway"\nrequire "behaviours/doaction"\n\nlocal ExampleBrain = Class(Brain, function(self, inst)\n    Brain._ctor(self, inst)\nend)\n\nfunction ExampleBrain:OnStart()\n    local root = PriorityNode(\n        {\n            -- Highest priority: run from danger\n            RunAway.Create(self.inst, "character", 5, 8),\n            \n            -- Next priority: attack if hostile\n            ChaseAndAttack(self.inst, 10),\n            \n            -- Lower priority: follow player\n            Follow(self.inst, function() return self.inst.followtarget end, 2, 6),\n            \n            -- Lowest priority: wander around\n            Wander(self.inst)\n        }, 1)\n    \n    self.bt = BT(self.inst, root)\nend\n\nreturn ExampleBrain\n'})}),"\n",(0,s.jsx)(e.h2,{id:"node-types",children:"Node Types"}),"\n",(0,s.jsx)(e.h3,{id:"priority-nodes",children:"Priority Nodes"}),"\n",(0,s.jsx)(e.p,{children:"Priority nodes execute child nodes in order until one succeeds:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'PriorityNode(\n    {\n        -- Nodes are checked in order until one succeeds\n        RunAway.Create(self.inst, "character", 5, 8),\n        ChaseAndAttack(self.inst, 10),\n        Wander(self.inst)\n    }, 1)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"sequence-nodes",children:"Sequence Nodes"}),"\n",(0,s.jsx)(e.p,{children:"Sequence nodes execute child nodes in order until one fails:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"SequenceNode(\n    {\n        -- All nodes must succeed for the sequence to succeed\n        FindFood(self.inst),\n        GoToFood(self.inst),\n        EatFood(self.inst)\n    })\n"})}),"\n",(0,s.jsx)(e.h3,{id:"decorator-nodes",children:"Decorator Nodes"}),"\n",(0,s.jsx)(e.p,{children:"Decorator nodes modify the behavior of their child node:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Invert the result of the child node\nNotDecorator(RunAway.Create(self.inst, "character", 5, 8))\n\n-- Only run the child node if a condition is met\nIfNode(function() return self.inst.components.hunger:GetPercent() < 0.5 end,\n    FindFood(self.inst))\n\n-- Run the child node for a specific time\nTimedNode(5, ChaseAndAttack(self.inst, 10))\n'})}),"\n",(0,s.jsx)(e.h3,{id:"condition-nodes",children:"Condition Nodes"}),"\n",(0,s.jsx)(e.p,{children:"Condition nodes check specific conditions:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Check if entity has a target\nIfNode(function() return self.inst.components.combat.target ~= nil end,\n    ChaseAndAttack(self.inst, 10))\n\n-- Check time of day\nIfNode(function() return TheWorld.state.isday end,\n    Wander(self.inst))\n"})}),"\n",(0,s.jsx)(e.h3,{id:"action-nodes",children:"Action Nodes"}),"\n",(0,s.jsx)(e.p,{children:"Action nodes perform specific actions:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Find and eat food\nDoAction(self.inst, function() \n    local target = FindEntity(self.inst, 20, function(item) \n        return item.components.edible ~= nil \n    end)\n    \n    if target ~= nil then\n        return BufferedAction(self.inst, target, ACTIONS.EAT)\n    end\n    return nil\nend)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"common-behaviors",children:"Common Behaviors"}),"\n",(0,s.jsx)(e.h3,{id:"wandering",children:"Wandering"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Basic wandering\nWander(self.inst)\n\n-- Wander with specific parameters\nWander(self.inst, function() return self.inst.components.knownlocations:GetLocation("home") end, 20)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"following",children:"Following"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Follow a specific target\nFollow(self.inst, function() return self.inst.followtarget end, 2, 6)\n\n-- Follow player when friendly\nFollow(self.inst, function() \n    local player = FindClosestPlayer(self.inst:GetPosition())\n    return (player ~= nil and self.inst.components.follower:GetLeader() == player) and player or nil\nend, 2, 6)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"combat",children:"Combat"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Chase and attack enemies\nChaseAndAttack(self.inst, 10, 20)\n\n-- Run away from threats\nRunAway.Create(self.inst, "character", 5, 8)\n\n-- Attack only certain targets\nChaseAndAttack(self.inst, 10, 20, function(target)\n    return target:HasTag("monster")\nend)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"foraging",children:"Foraging"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Find and collect items\nDoAction(self.inst, function() \n    local target = FindEntity(self.inst, 20, function(item) \n        return item.components.inventoryitem ~= nil and item.components.inventoryitem.canbepickedup\n    end)\n    \n    if target ~= nil then\n        return BufferedAction(self.inst, target, ACTIONS.PICKUP)\n    end\n    return nil\nend)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"advanced-ai-techniques",children:"Advanced AI Techniques"}),"\n",(0,s.jsx)(e.h3,{id:"memory-and-knowledge",children:"Memory and Knowledge"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Remember locations\nif self.inst.components.knownlocations == nil then\n    self.inst:AddComponent("knownlocations")\nend\nself.inst.components.knownlocations:RememberLocation("home", self.inst:GetPosition())\n\n-- Use remembered locations\nWander(self.inst, function() \n    return self.inst.components.knownlocations:GetLocation("home") \nend, 20)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"time-based-behaviors",children:"Time-based Behaviors"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Different behaviors based on time of day\nPriorityNode({\n    IfNode(function() return TheWorld.state.isday end, \n        Wander(self.inst)),\n    IfNode(function() return TheWorld.state.isnight end,\n        RunAway.Create(self.inst, "character", 5, 8))\n}, 1)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"group-behaviors",children:"Group Behaviors"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Find nearby allies\nlocal function FindAllies(inst)\n    return FindEntities(inst:GetPosition(), 20, nil, nil, {"player"}, {inst.prefab})\nend\n\n-- Follow group leader\nFollow(self.inst, function()\n    local allies = FindAllies(self.inst)\n    if #allies > 0 then\n        -- Find the ally furthest from home\n        local home = self.inst.components.knownlocations:GetLocation("home")\n        local leader = nil\n        local max_dist = 0\n        \n        for _, ally in ipairs(allies) do\n            local dist = home:Dist(ally:GetPosition())\n            if dist > max_dist then\n                max_dist = dist\n                leader = ally\n            end\n        end\n        \n        return leader\n    end\n    return nil\nend, 2, 6)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"state-based-decision-making",children:"State-based Decision Making"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Different behaviors based on internal state\nPriorityNode({\n    IfNode(function() return self.inst.components.hunger:GetPercent() < 0.25 end,\n        FindFood(self.inst)),\n    IfNode(function() return self.inst.components.health:GetPercent() < 0.5 end,\n        RunAway.Create(self.inst, "character", 5, 8)),\n    IfNode(function() return self.inst.components.combat.target ~= nil end,\n        ChaseAndAttack(self.inst, 10))\n}, 1)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"integration-with-stategraph",children:"Integration with StateGraph"}),"\n",(0,s.jsx)(e.p,{children:"AI decisions need to trigger appropriate state changes:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In stategraphs/SGexample.lua\nlocal states = {\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n    },\n    \n    State{\n        name = "attack",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.combat:StartAttack()\n            inst.AnimState:PlayAnimation("attack")\n        end,\n        \n        timeline = {\n            TimeEvent(10*FRAMES, function(inst) inst.components.combat:DoAttack() end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"complete-example-custom-creature-with-ai",children:"Complete Example: Custom Creature with AI"}),"\n",(0,s.jsx)(e.p,{children:"Let's create a complete example of a custom creature with AI:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/friendlycreature.lua\nlocal assets = {\n    Asset("ANIM", "anim/friendlycreature.zip"),\n}\n\nlocal function OnAttacked(inst, data)\n    -- Make creature run from attacker\n    inst.components.combat:SetTarget(data.attacker)\n    inst:PushEvent("panic", {attacker = data.attacker})\nend\n\nlocal function OnNewTarget(inst, data)\n    -- React to new combat target\n    if data.target ~= nil then\n        inst:PushEvent("hostile", {target = data.target})\n    end\nend\n\nlocal function RetargetFn(inst)\n    -- Only target creatures that attacked first\n    return FindEntity(\n        inst,\n        TUNING.PIG_TARGET_DIST,\n        function(guy)\n            return inst.components.combat:CanTarget(guy) and \n                   guy:HasTag("monster") and \n                   not guy:HasTag("friendlycreature")\n        end,\n        {"character"}\n    )\nend\n\nlocal function KeepTargetFn(inst, target)\n    -- Keep targeting while in range and target is alive\n    return inst.components.combat:CanTarget(target) and \n           inst:GetDistanceSqToInst(target) <= TUNING.PIG_KEEP_TARGET_DIST * TUNING.PIG_KEEP_TARGET_DIST\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n    \n    MakeCharacterPhysics(inst, 50, .5)\n    \n    inst.AnimState:SetBank("friendlycreature")\n    inst.AnimState:SetBuild("friendlycreature")\n    inst.AnimState:PlayAnimation("idle_loop", true)\n    \n    inst:AddTag("character")\n    inst:AddTag("friendlycreature")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add components\n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 3\n    inst.components.locomotor.runspeed = 5\n    \n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(100)\n    \n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(10)\n    inst.components.combat:SetAttackPeriod(2)\n    inst.components.combat:SetRetargetFunction(3, RetargetFn)\n    inst.components.combat:SetKeepTargetFunction(KeepTargetFn)\n    \n    inst:AddComponent("follower")\n    \n    inst:AddComponent("knownlocations")\n    \n    inst:ListenForEvent("attacked", OnAttacked)\n    inst:ListenForEvent("newcombattarget", OnNewTarget)\n    \n    -- Add brain\n    inst:SetBrain(require("brains/friendlycreaturbrain"))\n    \n    -- Add stategraph\n    inst:SetStateGraph("SGfriendlycreature")\n    \n    return inst\nend\n\nreturn Prefab("friendlycreature", fn, assets)\n'})}),"\n",(0,s.jsx)(e.p,{children:"Now let's create the brain for this creature:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/brains/friendlycreaturbrain.lua\nrequire "behaviours/wander"\nrequire "behaviours/follow"\nrequire "behaviours/faceentity"\nrequire "behaviours/chaseandattack"\nrequire "behaviours/runaway"\nrequire "behaviours/doaction"\nrequire "behaviours/findclosest"\n\nlocal MIN_FOLLOW_DIST = 2\nlocal MAX_FOLLOW_DIST = 6\nlocal TARGET_FOLLOW_DIST = 3\n\nlocal WANDER_DIST = 20\n\nlocal FriendlyCreatureBrain = Class(Brain, function(self, inst)\n    Brain._ctor(self, inst)\nend)\n\nlocal function GetFaceTargetFn(inst)\n    -- Face player when nearby\n    local target = FindClosestPlayer(inst:GetPosition())\n    return target ~= nil and not target:HasTag("notarget") and target or nil\nend\n\nlocal function GetFollowTarget(inst)\n    -- Follow player if they\'ve fed the creature\n    local target = inst.components.follower.leader\n    return target ~= nil and target:IsValid() and not target:HasTag("notarget") and target or nil\nend\n\nlocal function GetHomePos(inst)\n    -- Return to home position when idle\n    return inst.components.knownlocations:GetLocation("home")\nend\n\nfunction FriendlyCreatureBrain:OnStart()\n    local root = PriorityNode({\n        -- Run when attacked\n        WhileNode(function() return self.inst.components.health.takingfiredamage end, "OnFire", Panic(self.inst)),\n        \n        -- Run from threats\n        RunAway.Create(self.inst, "character", 5, 8, function(target) \n            return target:HasTag("monster") and target.components.combat and target.components.combat.target == self.inst \n        end),\n        \n        -- Attack enemies\n        WhileNode(function() return self.inst.components.combat.target ~= nil end, "AttackEnemy",\n            ChaseAndAttack(self.inst, 10, 20)),\n        \n        -- Follow leader\n        Follow(self.inst, GetFollowTarget, MIN_FOLLOW_DIST, TARGET_FOLLOW_DIST, MAX_FOLLOW_DIST),\n        \n        -- Face player when nearby\n        FaceEntity(self.inst, GetFaceTargetFn, GetFaceTargetFn),\n        \n        -- Wander around home\n        Wander(self.inst, GetHomePos, WANDER_DIST)\n    }, .25)\n    \n    self.bt = BT(self.inst, root)\nend\n\nreturn FriendlyCreatureBrain\n'})}),"\n",(0,s.jsx)(e.p,{children:"And finally, the stategraph:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/stategraphs/SGfriendlycreature.lua\nrequire("stategraphs/commonstates")\n\nlocal events = {\n    CommonHandlers.OnLocomote(true, true),\n    CommonHandlers.OnFreeze(),\n    CommonHandlers.OnAttack(),\n    CommonHandlers.OnAttacked(),\n    CommonHandlers.OnDeath(),\n    \n    EventHandler("panic", function(inst)\n        if not inst.components.health:IsDead() and not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("panic")\n        end\n    end),\n    \n    EventHandler("hostile", function(inst)\n        if not inst.components.health:IsDead() and not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("taunt")\n        end\n    end),\n}\n\nlocal states = {\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n    },\n    \n    State{\n        name = "walk",\n        tags = {"moving", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:WalkForward()\n            inst.AnimState:PlayAnimation("walk_loop", true)\n        end,\n    },\n    \n    State{\n        name = "run",\n        tags = {"moving", "running", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:RunForward()\n            inst.AnimState:PlayAnimation("run_loop", true)\n        end,\n    },\n    \n    State{\n        name = "taunt",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("taunt")\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/friendlycreature/taunt")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst) inst.sg:GoToState("idle") end),\n        },\n    },\n    \n    State{\n        name = "panic",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("panic")\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/friendlycreature/panic")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst) inst.sg:GoToState("run") end),\n        },\n    },\n}\n\n-- Add common states\nCommonStates.AddCombatStates(states,\n    {\n        hittimeline = {\n            TimeEvent(0, function(inst) inst.SoundEmitter:PlaySound("dontstarve/creatures/friendlycreature/hurt") end),\n        },\n        deathtimeline = {\n            TimeEvent(0, function(inst) inst.SoundEmitter:PlaySound("dontstarve/creatures/friendlycreature/death") end),\n        },\n    })\n\nCommonStates.AddFrozenStates(states)\n\nreturn StateGraph("friendlycreature", states, events, "idle")\n'})}),"\n",(0,s.jsx)(e.h2,{id:"creating-custom-brain-behaviors",children:"Creating Custom Brain Behaviors"}),"\n",(0,s.jsx)(e.p,{children:"To create custom behaviors not provided by the default behavior nodes:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/behaviours/mybehavior.lua\nlocal MyBehavior = Class(BehaviorNode, function(self, inst, findTargetFn, maxDist, minDist)\n    BehaviorNode._ctor(self, "MyBehavior")\n    self.inst = inst\n    self.findTargetFn = findTargetFn\n    self.maxDist = maxDist or 10\n    self.minDist = minDist or 2\n    self.status = READY\nend)\n\nfunction MyBehavior:Visit()\n    if self.status == READY then\n        -- Find target\n        self.target = self.findTargetFn(self.inst)\n        \n        if self.target == nil then\n            self.status = FAILED\n            return\n        end\n        \n        self.status = RUNNING\n    end\n    \n    if self.status == RUNNING then\n        -- Check if target is still valid\n        if not self.target:IsValid() then\n            self.status = FAILED\n            return\n        end\n        \n        -- Get distance to target\n        local dist = self.inst:GetDistanceSqToInst(self.target)\n        \n        if dist > self.maxDist * self.maxDist then\n            -- Too far, move closer\n            self.inst.components.locomotor:GoToEntity(self.target)\n        elseif dist < self.minDist * self.minDist then\n            -- Too close, back away\n            self.inst.components.locomotor:RunAway(self.target, self.minDist)\n        else\n            -- Just right, perform action\n            self:PerformAction()\n            self.status = SUCCESS\n            return\n        end\n        \n        self.status = RUNNING\n        return\n    end\nend\n\nfunction MyBehavior:PerformAction()\n    -- Override this in subclasses\n    print("Performing custom behavior")\nend\n\nfunction MyBehavior:Reset()\n    self.target = nil\n    self.status = READY\nend\n\nreturn MyBehavior\n'})}),"\n",(0,s.jsx)(e.h2,{id:"debugging-ai",children:"Debugging AI"}),"\n",(0,s.jsx)(e.p,{children:"To debug AI behavior:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Add debug visualization\nlocal function OnUpdate(self)\n    if CHEATS_ENABLED and self.inst.brain ~= nil and self.inst.brain.bt ~= nil then\n        -- Draw lines to targets\n        if self.inst.components.combat.target ~= nil then\n            TheWorld:PushDebugRender("line", self.inst:GetPosition(), self.inst.components.combat.target:GetPosition(), 1, 0, 0, 1)\n        end\n        \n        if self.inst.components.follower.leader ~= nil then\n            TheWorld:PushDebugRender("line", self.inst:GetPosition(), self.inst.components.follower.leader:GetPosition(), 0, 1, 0, 1)\n        end\n        \n        -- Print current behavior\n        local currentNode = self.inst.brain.bt:GetCurrentNode()\n        if currentNode ~= nil then\n            print(string.format("%s current behavior: %s", self.inst.prefab, tostring(currentNode)))\n        end\n    end\nend\n\n-- Add to brain\nfunction FriendlyCreatureBrain:OnStart()\n    -- ... existing code ...\n    \n    -- Add debug update\n    if CHEATS_ENABLED then\n        self.inst:DoPeriodicTask(1, function() OnUpdate(self) end)\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Hierarchical Structure"}),": Organize behaviors in a clear hierarchy with highest priorities first"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Reuse Common Behaviors"}),": Use the built-in behavior nodes when possible"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"State Integration"}),": Ensure brain decisions trigger appropriate state changes"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Performance"}),": Keep behavior trees efficient, especially for many entities"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Predictability"}),": Make AI behavior predictable enough for players to learn"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Personality"}),": Give creatures unique behaviors that reflect their character"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Debugging"}),": Include debug options to visualize decision-making"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"AI not responding"}),": Check if the brain is properly attached to the entity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Erratic behavior"}),": Ensure priority ordering makes sense"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Stuck in one state"}),": Check for conditions that might never resolve"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Performance issues"}),": Simplify complex behavior trees for better performance"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Animation mismatches"}),": Ensure state transitions match AI decisions"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Add this to your brain to print the current behavior\nself.inst:DoPeriodicTask(1, function()\n    if self.bt ~= nil and self.bt.currentnode ~= nil then\n        print(string.format("%s is currently: %s", self.inst.prefab, tostring(self.bt.currentnode)))\n    end\nend)\n\n-- Force a specific behavior for testing\nfunction FriendlyCreatureBrain:OnStart()\n    -- For testing, just make it wander\n    local root = PriorityNode({\n        Wander(self.inst)\n    }, 1)\n    \n    self.bt = BT(self.inst, root)\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(e.p,{children:"Creating custom AI and brain behaviors allows you to develop unique creatures with complex and interesting behaviors. By combining different node types and integrating with the stategraph system, you can create entities that respond intelligently to the game world and provide engaging experiences for players."}),"\n",(0,s.jsx)(e.p,{children:"See also:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/stategraph-system",children:"StateGraph System"})," - For integrating AI with animations"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/entity-system",children:"Entity System"})," - For understanding entity creation"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/component-system",children:"Component System"})," - For components used by AI"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-creatures",children:"Custom Creatures"})," - For more examples of creature creation"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-component",children:"Custom Components"})," - For creating components used by AI"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);