"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[72561],{28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>l});var i=o(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},30613:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"game-scripts/core-systems/game-mechanics/cooking/cookbookdata","title":"Cookbook Data","description":"Recipe discovery and food knowledge management system for Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/game-mechanics/cooking/cookbookdata.md","sourceDirName":"game-scripts/core-systems/game-mechanics/cooking","slug":"/game-scripts/core-systems/game-mechanics/cooking/cookbookdata","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/cooking/cookbookdata","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Cookbook Data","description":"Recipe discovery and food knowledge management system for Don\'t Starve Together","sidebar_position":2,"last_updated":"2025-06-25","build_version":"676312","change_status":"modified"}}');var r=o(74848),s=o(28453);const a={title:"Cookbook Data",description:"Recipe discovery and food knowledge management system for Don't Starve Together",sidebar_position:2,last_updated:"2025-06-25",build_version:"676312",change_status:"modified"},l="Cookbook Data \ud83d\udd04",t={},d=[{value:"Overview",id:"overview",level:2},{value:"Class Definition",id:"class-definition",level:2},{value:"CookbookData Class",id:"cookbookdata-class",level:3},{value:"Core Methods",id:"core-methods",level:2},{value:"Knowledge Access",id:"knowledge-access",level:3},{value:"GetKnownPreparedFoods()",id:"getknownpreparedfoods",level:4},{value:"IsUnlocked(product)",id:"isunlockedproduct",level:4},{value:"IsValidEntry(product)",id:"isvalidentryproduct",level:4},{value:"Recipe Management",id:"recipe-management",level:3},{value:"AddRecipe(product, ingredients)",id:"addrecipeproduct-ingredients",level:4},{value:"LearnFoodStats(product)",id:"learnfoodstatsproduct",level:4},{value:"Utility Methods",id:"utility-methods",level:3},{value:"RemoveCookedFromName(ingredients)",id:"removecookedfromnameingredients",level:4},{value:"New Content Tracking",id:"new-content-tracking",level:3},{value:"IsNewFood(product)",id:"isnewfoodproduct",level:4},{value:"ClearNewFlags()",id:"clearnewflags",level:4},{value:"Filter Management",id:"filter-management",level:3},{value:"SetFilter(category, value)",id:"setfiltercategory-value",level:4},{value:"GetFilter(category)",id:"getfiltercategory",level:4},{value:"ClearFilters()",id:"clearfilters",level:4},{value:"Data Persistence",id:"data-persistence",level:3},{value:"Save(force_save)",id:"saveforce_save",level:4},{value:"Load()",id:"load",level:4},{value:"ApplyOnlineProfileData()",id:"applyonlineprofiledata",level:4},{value:"Data Structures",id:"data-structures",level:2},{value:"Prepared Food Entry",id:"prepared-food-entry",level:3},{value:"Recipe Storage Format",id:"recipe-storage-format",level:3},{value:"Encoding/Decoding",id:"encodingdecoding",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Recipe Discovery System",id:"recipe-discovery-system",level:3},{value:"Cookbook UI Integration",id:"cookbook-ui-integration",level:3},{value:"Filter Application",id:"filter-application",level:3},{value:"Save System Integration",id:"save-system-integration",level:3},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Recipe Priority System",id:"recipe-priority-system",level:3},{value:"Ingredient Normalization",id:"ingredient-normalization",level:3},{value:"Online Synchronization",id:"online-synchronization",level:3},{value:"Platform Compatibility",id:"platform-compatibility",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Integration Points",id:"integration-points",level:2},{value:"Cooking System Integration",id:"cooking-system-integration",level:3},{value:"Inventory System Integration",id:"inventory-system-integration",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Invalid Recipes",id:"invalid-recipes",level:3},{value:"Save/Load Failures",id:"saveload-failures",level:3},{value:"Version History",id:"version-history",level:2},{value:"Related Modules",id:"related-modules",level:2},{value:"Technical Notes",id:"technical-notes",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cookbook-data-",children:"Cookbook Data \ud83d\udd04"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"CookbookData"})," module manages the cookbook system in Don't Starve Together, tracking discovered recipes, food preparation knowledge, and providing persistent storage for cooking-related data. It serves as the backend for the in-game cookbook interface."]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"CookbookData handles:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recipe Discovery"}),": Learning and storing cooking recipes as players discover them"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Food Knowledge"}),": Tracking which foods have been eaten and their nutritional stats"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Persistence"}),": Local and online synchronization of cookbook progress"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Filter Management"}),": User preferences for cookbook interface filtering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"New Content Tracking"}),": Flagging newly discovered foods and recipes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,r.jsx)(n.h3,{id:"cookbookdata-class",children:"CookbookData Class"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local CookbookData = Class(function(self)\n    self.preparedfoods = {}\n    self.newfoods = {}\n    self.filters = {}\n    --self.save_enabled = nil\nend)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Properties:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"preparedfoods"})," (table): Dictionary of discovered foods and their recipes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"newfoods"})," (table): Flags for newly discovered foods"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filters"})," (table): User-defined cookbook filters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"save_enabled"})," (boolean): Whether automatic saving is enabled"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dirty"})," (boolean): Flag indicating unsaved changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"synced"})," (boolean): Flag indicating online synchronization status"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,r.jsx)(n.h3,{id:"knowledge-access",children:"Knowledge Access"}),"\n",(0,r.jsx)(n.h4,{id:"getknownpreparedfoods",children:"GetKnownPreparedFoods()"}),"\n",(0,r.jsx)(n.p,{children:"Returns all discovered prepared foods and their associated data."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Dictionary of prepared foods with recipes and metadata"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local known_foods = CookbookData:GetKnownPreparedFoods()\nfor food_name, food_data in pairs(known_foods) do\n    print(food_name, "recipes:", #(food_data.recipes or {}))\n    print(food_name, "has_eaten:", food_data.has_eaten)\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"isunlockedproduct",children:"IsUnlocked(product)"}),"\n",(0,r.jsx)(n.p,{children:"Checks if a specific food item has been discovered."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"product"})," (string): Food prefab name"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table/nil): Food data if unlocked, nil otherwise"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'if CookbookData:IsUnlocked("meatballs") then\n    print("Meatballs recipe is known!")\nelse\n    print("Meatballs recipe not yet discovered")\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"isvalidentryproduct",children:"IsValidEntry(product)"}),"\n",(0,r.jsx)(n.p,{children:"Validates if a product can be tracked in the cookbook."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"product"})," (string): Food prefab name"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if valid cookbook entry"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'if CookbookData:IsValidEntry("meatballs") then\n    print("Meatballs is a valid cookbook item")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"recipe-management",children:"Recipe Management"}),"\n",(0,r.jsx)(n.h4,{id:"addrecipeproduct-ingredients",children:"AddRecipe(product, ingredients)"}),"\n",(0,r.jsx)(n.p,{children:"Adds a new recipe for a prepared food item."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"product"})," (string): Food prefab name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ingredients"})," (table): Array of ingredient prefab names"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if recipe was newly added or updated"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Recipe Storage Logic:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maintains up to 6 recipes per food (MAX_RECIPES = 6)"}),"\n",(0,r.jsx)(n.li,{children:"Automatically sorts ingredients alphabetically"}),"\n",(0,r.jsx)(n.li,{children:"Moves known recipes to front when re-discovered"}),"\n",(0,r.jsx)(n.li,{children:"Removes oldest recipes when limit exceeded"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add a meatballs recipe\nlocal success = CookbookData:AddRecipe("meatballs", {\n    "meat",\n    "meat", \n    "berries",\n    "twigs"\n})\n\nif success then\n    print("New meatballs recipe learned!")\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"learnfoodstatsproduct",children:"LearnFoodStats(product)"}),"\n",(0,r.jsx)(n.p,{children:"Records that a food item has been consumed, unlocking its nutritional information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"product"})," (string): Food prefab name"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if this was the first time eating this food"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Player ate meatballs for the first time\nif CookbookData:LearnFoodStats("meatballs") then\n    print("First time eating meatballs - stats unlocked!")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"utility-methods",children:"Utility Methods"}),"\n",(0,r.jsx)(n.h4,{id:"removecookedfromnameingredients",children:"RemoveCookedFromName(ingredients)"}),"\n",(0,r.jsx)(n.p,{children:'Normalizes ingredient names by removing "cooked" prefixes/suffixes.'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ingredients"})," (table): Array of ingredient names"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Array of normalized ingredient names"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local normalized = CookbookData:RemoveCookedFromName({\n    "cooked_meat",\n    "meat_cooked", \n    "berries"\n})\n-- Result: {"meat", "meat", "berries"}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"new-content-tracking",children:"New Content Tracking"}),"\n",(0,r.jsx)(n.h4,{id:"isnewfoodproduct",children:"IsNewFood(product)"}),"\n",(0,r.jsx)(n.p,{children:"Checks if a food is flagged as newly discovered."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"product"})," (string): Food prefab name"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if food is flagged as new"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'if CookbookData:IsNewFood("meatballs") then\n    -- Show "NEW!" indicator in UI\n    ShowNewFoodIndicator("meatballs")\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"clearnewflags",children:"ClearNewFlags()"}),"\n",(0,r.jsx)(n.p,{children:'Removes all "new food" flags, typically called when player acknowledges new discoveries.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Clear new flags when player opens cookbook\nCookbookData:ClearNewFlags()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"filter-management",children:"Filter Management"}),"\n",(0,r.jsx)(n.h4,{id:"setfiltercategory-value",children:"SetFilter(category, value)"}),"\n",(0,r.jsx)(n.p,{children:"Sets a cookbook filter preference."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"category"})," (string): Filter category name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," (any): Filter value"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Set filters for cookbook interface\nCookbookData:SetFilter("show_crockpot", true)\nCookbookData:SetFilter("show_portablecookpot", false)\nCookbookData:SetFilter("min_health", 20)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"getfiltercategory",children:"GetFilter(category)"}),"\n",(0,r.jsx)(n.p,{children:"Gets a cookbook filter preference."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"category"})," (string): Filter category name"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(any): Filter value or nil if not set"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local show_crockpot = CookbookData:GetFilter("show_crockpot")\nif show_crockpot then\n    -- Include crockpot recipes in display\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"clearfilters",children:"ClearFilters()"}),"\n",(0,r.jsx)(n.p,{children:"Resets all cookbook filters to defaults."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"CookbookData:ClearFilters()  -- Reset all cookbook filters\n"})}),"\n",(0,r.jsx)(n.h3,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,r.jsx)(n.h4,{id:"saveforce_save",children:"Save(force_save)"}),"\n",(0,r.jsx)(n.p,{children:"Saves cookbook data to persistent storage."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"force_save"})," (boolean, optional): Force save even if not dirty"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Auto-save when dirty\nCookbookData:Save()\n\n-- Force save regardless of dirty state\nCookbookData:Save(true)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"load",children:"Load()"}),"\n",(0,r.jsx)(n.p,{children:"Loads cookbook data from persistent storage with enhanced error recovery."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Enhanced Error Recovery (Build 676312):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Improved type checking for preparedfoods and filters data"}),"\n",(0,r.jsx)(n.li,{children:"Automatic fallback to online profile data when local save is corrupted"}),"\n",(0,r.jsx)(n.li,{children:"Automatic save recovery when successfully applying online cache"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Error Handling Flow:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Primary Load"}),": Attempts to load from local save file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Validation"}),": Validates that preparedfoods is a table structure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recovery Mode"}),": Falls back to online profile data if local data is corrupted"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatic Repair"}),": Saves corrected data back to local storage"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"CookbookData:Load()  -- Load saved cookbook data with error recovery\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Technical Enhancement Details:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Enhanced validation in Load() method (Build 676312)\nif type(recipe_book.preparedfoods) == "table" then\n    self.preparedfoods = recipe_book.preparedfoods\n    if type(recipe_book.filters) == "table" then\n        self.filters = recipe_book.filters\n    end\nelse\n    print("Failed to load preparedfoods table in cookbook!")\n    -- Automatic recovery attempt using online cache\nend\n'})}),"\n",(0,r.jsx)(n.h4,{id:"applyonlineprofiledata",children:"ApplyOnlineProfileData()"}),"\n",(0,r.jsx)(n.p,{children:"Synchronizes cookbook data with online profile/inventory."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if synchronization was successful"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'if CookbookData:ApplyOnlineProfileData() then\n    print("Cookbook synchronized with online profile")\nelse\n    print("Sync pending or failed")\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,r.jsx)(n.h3,{id:"prepared-food-entry",children:"Prepared Food Entry"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'preparedfoods["meatballs"] = {\n    recipes = {\n        {"meat", "meat", "berries", "twigs"},\n        {"meat", "meat", "carrot", "twigs"},\n        {"meat", "morsel", "berries", "berries"}\n    },\n    has_eaten = true\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"recipe-storage-format",children:"Recipe Storage Format"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"recipes"}),": Array of ingredient arrays, sorted by discovery order (newest first)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"has_eaten"}),": Boolean indicating if player has consumed this food"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MAX_RECIPES"}),": Maximum 6 recipes stored per food"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"encodingdecoding",children:"Encoding/Decoding"}),"\n",(0,r.jsx)(n.p,{children:"The system uses string encoding for online synchronization:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Encoded format: "meat,meat,berries,twigs|meat,morsel,berries,berries|true"\nlocal function EncodeCookbookEntry(entry)\n    local str = ""\n    if entry.recipes ~= nil then\n        for i = 1, math.min(MAX_RECIPES, #entry.recipes) do\n            local r = entry.recipes[i]\n            str = str .. table.concat(r, ",") .. "|"\n        end\n    end\n    str = str .. (entry.has_eaten and "true" or "false")\n    return str\nend\n\nlocal function DecodeCookbookEntry(value)\n    local data = {recipes = {}}\n    local recipes = string.split(value, "|")\n    for i = 1, #recipes-1 do\n        table.insert(data.recipes, string.split(recipes[i], ","))\n    end\n    data.has_eaten = recipes[#recipes] == "true"\n    return data\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"recipe-discovery-system",children:"Recipe Discovery System"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function OnFoodCooked(food_prefab, ingredients)\n    -- Learn the recipe when food is successfully cooked\n    local learned = CookbookData:AddRecipe(food_prefab, ingredients)\n    \n    if learned then\n        -- Show notification to player\n        ShowNotification("New recipe discovered: " .. food_prefab)\n    end\nend\n\nlocal function OnFoodEaten(food_prefab)\n    -- Learn food stats when eaten\n    local first_time = CookbookData:LearnFoodStats(food_prefab)\n    \n    if first_time then\n        -- Unlock food stats in cookbook\n        ShowNotification("Food stats unlocked: " .. food_prefab)\n    end\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cookbook-ui-integration",children:"Cookbook UI Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function BuildCookbookInterface()\n    local known_foods = CookbookData:GetKnownPreparedFoods()\n    \n    for food_name, food_data in pairs(known_foods) do\n        local ui_entry = CreateFoodEntry(food_name)\n        \n        -- Show recipes if known\n        if food_data.recipes then\n            for i, recipe in ipairs(food_data.recipes) do\n                ui_entry:AddRecipe(recipe)\n            end\n        end\n        \n        -- Show food stats if eaten\n        if food_data.has_eaten then\n            ui_entry:ShowNutritionInfo()\n        end\n        \n        -- Mark as new if recently discovered\n        if CookbookData:IsNewFood(food_name) then\n            ui_entry:AddNewFlag()\n        end\n    end\n    \n    -- Clear new flags when player views cookbook\n    CookbookData:ClearNewFlags()\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"filter-application",children:"Filter Application"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function FilterCookbookEntries(entries)\n    local filtered = {}\n    \n    for food_name, food_data in pairs(entries) do\n        local include = true\n        \n        -- Apply category filters\n        if not CookbookData:GetFilter("show_crockpot") then\n            if IsCrockpotRecipe(food_name) then\n                include = false\n            end\n        end\n        \n        -- Apply stat filters  \n        local min_health = CookbookData:GetFilter("min_health")\n        if min_health and GetFoodHealth(food_name) < min_health then\n            include = false\n        end\n        \n        if include then\n            filtered[food_name] = food_data\n        end\n    end\n    \n    return filtered\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"save-system-integration",children:"Save System Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function InitializeCookbook()\n    -- Load saved data\n    CookbookData:Load()\n    \n    -- Enable auto-saving\n    CookbookData.save_enabled = true\n    \n    -- Sync with online profile\n    CookbookData:ApplyOnlineProfileData()\nend\n\nlocal function OnGameSave()\n    -- Force save cookbook data\n    CookbookData:Save(true)\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"recipe-priority-system",children:"Recipe Priority System"}),"\n",(0,r.jsx)(n.p,{children:"Recipes are stored with the most recently discovered at the front:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"New Recipe"}),": Added to front of recipes array"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Known Recipe"}),": Moved to front if not already in top 2 positions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Capacity Management"}),": Oldest recipes removed when MAX_RECIPES exceeded"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ingredient-normalization",children:"Ingredient Normalization"}),"\n",(0,r.jsx)(n.p,{children:"The system normalizes ingredient names to handle cooked variants:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cooked_meat"})," \u2192 ",(0,r.jsx)(n.code,{children:"meat"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"meat_cooked"})," \u2192 ",(0,r.jsx)(n.code,{children:"meat"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"quagmire_cooked_"})," \u2192 ",(0,r.jsx)(n.code,{children:"quagmire_"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This ensures recipe matching works regardless of ingredient cooking state."}),"\n",(0,r.jsx)(n.h3,{id:"online-synchronization",children:"Online Synchronization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Offline Mode"}),": Uses local persistence only"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Online Mode"}),": Syncs with Steam/platform inventory system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mod Recipes"}),": Excluded from online sync to prevent save corruption"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"platform-compatibility",children:"Platform Compatibility"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local USE_SETTINGS_FILE = PLATFORM ~= "PS4" and PLATFORM ~= "NACL"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Different platforms may have different persistence mechanisms."}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lazy Loading"}),": Cookbook data loaded only when needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dirty Flag System"}),": Saves only when data changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recipe Limits"}),": Maximum recipes per food prevents unbounded growth"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Efficient Encoding"}),": Compact string format for online sync"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,r.jsx)(n.h3,{id:"cooking-system-integration",children:"Cooking System Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- cooking.lua integration\nlocal cooking = require("cooking")\n\n-- Check if product is valid cookbook entry\nfor cooker, recipes in pairs(cooking.cookbook_recipes) do\n    if recipes[product] ~= nil then\n        return true  -- Valid entry\n    end\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"inventory-system-integration",children:"Inventory System Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Sync with online inventory\nif not cooking.IsModCookerFood(product) and not TheNet:IsDedicated() then\n    TheInventory:SetCookBookValue(product, EncodeCookbookEntry(preparedfood))\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"invalid-recipes",children:"Invalid Recipes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'function CookbookData:AddRecipe(product, ingredients)\n    if product == nil or ingredients == nil then\n        print("Invalid cookbook recipe:", product, unpack(ingredients or {"(empty)"}))\n        return\n    elseif not self:IsValidEntry(product) then\n        --silent fail\n        return false\n    end\n    -- ... continue processing\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"saveload-failures",children:"Save/Load Failures"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'function CookbookData:Load()\n    self.preparedfoods = {}\n    self.filters = {}\n    local needs_save = false\n    local really_bad_state = false\n    \n    TheSim:GetPersistentString("cookbook", function(load_success, data)\n        if load_success and data ~= nil then\n            local status, recipe_book = pcall(function() return json.decode(data) end)\n            \n            if status and recipe_book then\n                -- Enhanced type validation (Build 676312)\n                if type(recipe_book.preparedfoods) == "table" then\n                    self.preparedfoods = recipe_book.preparedfoods\n                    if type(recipe_book.filters) == "table" then\n                        self.filters = recipe_book.filters\n                    end\n                else\n                    really_bad_state = true\n                    print("Failed to load preparedfoods table in cookbook!")\n                end\n            else\n                really_bad_state = true\n                print("Failed to load the cookbook!", status, recipe_book)\n            end\n        end\n    end)\n    \n    -- Enhanced error recovery (Build 676312)\n    if really_bad_state then\n        print("Trying to apply online cache of cookbook data..")\n        if self:ApplyOnlineProfileData() then\n            print("Was a success, using preparedfoods values")\n            needs_save = true\n        else\n            print("Which also failed. This error is unrecoverable. Cookbook will be cleared.")\n        end\n    end\n    \n    if needs_save then\n        print("Saving cookbook file as a fixup.")\n        self:Save(true)\n    end\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Version"}),(0,r.jsx)(n.th,{children:"Date"}),(0,r.jsx)(n.th,{children:"Changes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676312"}),(0,r.jsx)(n.td,{children:"2025-06-25"}),(0,r.jsx)(n.td,{children:"Enhanced error recovery in Load() method with type validation and automatic online cache fallback"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"Stable implementation with online sync support"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/cooking/",children:"Cooking"})})," - Core cooking system and recipe definitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../util/inventory.md",children:"Inventory"})})," - Online profile synchronization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"class.md",children:"Class"})})," - Base class system"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"technical-notes",children:"Technical Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maximum 6 recipes stored per food item to prevent memory bloat"}),"\n",(0,r.jsx)(n.li,{children:"Ingredient names automatically normalized to base forms"}),"\n",(0,r.jsx)(n.li,{children:"Online synchronization excludes mod-added recipes"}),"\n",(0,r.jsx)(n.li,{children:"Dirty flag system minimizes unnecessary save operations"}),"\n",(0,r.jsx)(n.li,{children:"Platform-specific persistence handling for console compatibility"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"This documentation covers the CookbookData module as of build 676312. The cookbook system enables players to track cooking discoveries and build comprehensive recipe knowledge with enhanced error recovery."})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);