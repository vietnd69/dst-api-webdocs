"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7807],{622:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api-vanilla/utils/vector","title":"Vector Utilities","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/utils/vector.md","sourceDirName":"api-vanilla/utils","slug":"/api-vanilla/utils/vector","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/vector","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"vector","title":"Vector Utilities","sidebar_position":2,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"File Utils","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/file-utils"},"next":{"title":"Examples","permalink":"/dst-api-webdocs/docs/category/examples"}}');var i=t(4848),o=t(8453);const c={id:"vector",title:"Vector Utilities",sidebar_position:2,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="Vector Utilities",a={},l=[{value:"Vector3 Class",id:"vector3-class",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Constructors",id:"constructors",level:3},{value:"Operators",id:"operators",level:3},{value:"Methods",id:"methods",level:3},{value:"Vector Operations",id:"vector-operations",level:4},{value:"Helper Functions",id:"helper-functions",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Entity Positioning",id:"entity-positioning",level:3},{value:"Direction and Movement",id:"direction-and-movement",level:3},{value:"Distance Checks",id:"distance-checks",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"vector-utilities",children:"Vector Utilities"})}),"\n",(0,i.jsx)(n.p,{children:"Vector manipulation and mathematics utilities are essential for handling positions, directions, and spatial calculations in Don't Starve Together mods."}),"\n",(0,i.jsx)(n.h2,{id:"vector3-class",children:"Vector3 Class"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Vector3"})," class represents a three-dimensional vector with x, y, and z components."]}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Create a new Vector3\nlocal pos = Vector3(x, y, z)\n\n-- Create a Vector3 at origin (0,0,0)\nlocal origin = Vector3()\n\n-- Access components\nlocal x = pos.x\nlocal y = pos.y\nlocal z = pos.z\n"})}),"\n",(0,i.jsx)(n.h3,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Standard constructor\nlocal vec = Vector3(x, y, z)\n\n-- Creating from angle (in radians)\nlocal vec = Vector3FromTheta(theta, radius)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"operators",children:"Operators"}),"\n",(0,i.jsx)(n.p,{children:"Vector3 supports the following operators:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operator"}),(0,i.jsx)(n.th,{children:"Usage"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"+"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vec1 + vec2"})}),(0,i.jsx)(n.td,{children:"Vector addition"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vec1 - vec2"})}),(0,i.jsx)(n.td,{children:"Vector subtraction"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"*"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vec * scalar"})}),(0,i.jsx)(n.td,{children:"Scalar multiplication"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"/"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vec / scalar"})}),(0,i.jsx)(n.td,{children:"Scalar division"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"unary -"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"-vec"})}),(0,i.jsx)(n.td,{children:"Vector negation"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h4,{id:"vector-operations",children:"Vector Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Dot product\nlocal dot = vec1:Dot(vec2)\n\n-- Cross product\nlocal cross = vec1:Cross(vec2)\n\n-- Distance between vectors\nlocal distance = vec1:Dist(vec2)\n\n-- Squared distance (more efficient)\nlocal distSq = vec1:DistSq(vec2)\n\n-- Vector length\nlocal length = vec:Length()\n\n-- Squared length (more efficient)\nlocal lengthSq = vec:LengthSq()\n\n-- Normalize vector (modifies original)\nvec:Normalize()\n\n-- Get normalized vector (returns new vector)\nlocal norm = vec:GetNormalized()\n\n-- Get normalized vector and length\nlocal norm, length = vec:GetNormalizedAndLength()\n\n-- Get components as separate values\nlocal x, y, z = vec:Get()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Convert value to Vector3\nlocal vec = ToVector3(obj, y, z)\n\n-- Create Vector3 from angle and radius\nlocal vec = Vector3FromTheta(theta, radius)\n\n-- Check if an object is a Vector3\nif obj:IsVector3() then\n    -- It's a Vector3\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"entity-positioning",children:"Entity Positioning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get entity position as Vector3\nlocal pos = Vector3(inst.Transform:GetWorldPosition())\n\n-- Move entity to position\ninst.Transform:SetPosition(target_pos.x, target_pos.y, target_pos.z)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"direction-and-movement",children:"Direction and Movement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get direction vector between two points\nlocal dir = (target_pos - start_pos):GetNormalized()\n\n-- Move in a direction\nlocal new_pos = current_pos + dir * speed\n\n-- Get angle from direction vector\nlocal angle = math.atan2(dir.z, dir.x)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"distance-checks",children:"Distance Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check if entity is within range\nlocal pos1 = Vector3(inst1.Transform:GetWorldPosition())\nlocal pos2 = Vector3(inst2.Transform:GetWorldPosition())\n\nif pos1:Dist(pos2) < max_distance then\n    -- Entities are within range\nend\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);