"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1413],{1677:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"api-vanilla/shared-properties/network-properties","title":"Network Properties","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/shared-properties/network-properties.md","sourceDirName":"api-vanilla/shared-properties","slug":"/api-vanilla/shared-properties/network-properties","permalink":"/dst-api-webdocs/docs/api-vanilla/shared-properties/network-properties","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"network-properties","title":"Network Properties","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Interaction Properties","permalink":"/dst-api-webdocs/docs/api-vanilla/shared-properties/interaction-properties"},"next":{"title":"Transformation Properties","permalink":"/dst-api-webdocs/docs/api-vanilla/shared-properties/transformation-properties"}}');var s=t(4848),r=t(8453);const l={id:"network-properties",title:"Network Properties",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},d="Network Properties",o={},a=[{value:"Core Network Properties",id:"core-network-properties",level:2},{value:"Network Variable Types",id:"network-variable-types",level:2},{value:"Network Communication Mechanisms",id:"network-communication-mechanisms",level:2},{value:"Server Authority Model",id:"server-authority-model",level:3},{value:"Network Variables (NetVars)",id:"network-variables-netvars",level:3},{value:"Remote Procedure Calls (RPCs)",id:"remote-procedure-calls-rpcs",level:3},{value:"Network Component Replication",id:"network-component-replication",level:2},{value:"Component Replica System",id:"component-replica-system",level:3},{value:"Network States and Optimization",id:"network-states-and-optimization",level:2},{value:"Network Priorities",id:"network-priorities",level:3},{value:"Bandwidth Optimization",id:"bandwidth-optimization",level:3},{value:"Network-Related Components",id:"network-related-components",level:2},{value:"Network Events",id:"network-events",level:2},{value:"Special Network Mechanics",id:"special-network-mechanics",level:2},{value:"Entity Classification",id:"entity-classification",level:3},{value:"Network Entity Visibility",id:"network-entity-visibility",level:3},{value:"Reconciliation and Desync Handling",id:"reconciliation-and-desync-handling",level:3},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"network-properties",children:"Network Properties"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"API Version: 619045"})}),"\n",(0,s.jsx)(n.p,{children:"Network properties are a set of shared attributes and mechanisms that enable multiplayer functionality in Don't Starve Together. These properties facilitate communication between server and clients, synchronize game state, and ensure consistent gameplay experiences across different machines."}),"\n",(0,s.jsx)(n.h2,{id:"core-network-properties",children:"Core Network Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GUID"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Unique identifier for each entity across the network"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"userid"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Unique identifier for each player"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ismastersim"})}),(0,s.jsx)(n.td,{children:"Boolean"}),(0,s.jsx)(n.td,{children:"Whether the current instance is the authoritative server"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ispredicting"})}),(0,s.jsx)(n.td,{children:"Boolean"}),(0,s.jsx)(n.td,{children:"Whether the client is currently predicting behaviors"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isreplica"})}),(0,s.jsx)(n.td,{children:"Boolean"}),(0,s.jsx)(n.td,{children:"Whether a component is the client-side replica version"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_hash"})}),(0,s.jsx)(n.td,{children:"NetVar"}),(0,s.jsx)(n.td,{children:"Hash-based network variable, used for referencing entities"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_entity"})}),(0,s.jsx)(n.td,{children:"NetVar"}),(0,s.jsx)(n.td,{children:"Entity reference network variable"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"entity:SetPristine()"})}),(0,s.jsx)(n.td,{children:"Function"}),(0,s.jsx)(n.td,{children:"Mark entity as ready for network replication"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"entity:SetPriority()"})}),(0,s.jsx)(n.td,{children:"Function"}),(0,s.jsx)(n.td,{children:"Set network traffic priority for the entity"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"network-variable-types",children:"Network Variable Types"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together provides various network variable types to efficiently synchronize different data:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"NetVar Type"}),(0,s.jsx)(n.th,{children:"Size"}),(0,s.jsx)(n.th,{children:"Range"}),(0,s.jsx)(n.th,{children:"Best For"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_bool"})}),(0,s.jsx)(n.td,{children:"1 bit"}),(0,s.jsx)(n.td,{children:"true/false"}),(0,s.jsx)(n.td,{children:"Binary states"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_tinybyte"})}),(0,s.jsx)(n.td,{children:"4 bits"}),(0,s.jsx)(n.td,{children:"0-15"}),(0,s.jsx)(n.td,{children:"Very small values"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_byte"})}),(0,s.jsx)(n.td,{children:"8 bits"}),(0,s.jsx)(n.td,{children:"0-255"}),(0,s.jsx)(n.td,{children:"Small values"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_shortint"})}),(0,s.jsx)(n.td,{children:"16 bits"}),(0,s.jsx)(n.td,{children:"-32,768 to 32,767"}),(0,s.jsx)(n.td,{children:"Medium values"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_int"})}),(0,s.jsx)(n.td,{children:"32 bits"}),(0,s.jsx)(n.td,{children:"-2^31 to 2^31-1"}),(0,s.jsx)(n.td,{children:"Large integers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_float"})}),(0,s.jsx)(n.td,{children:"32 bits"}),(0,s.jsx)(n.td,{children:"Floating point"}),(0,s.jsx)(n.td,{children:"Positions, decimals"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_string"})}),(0,s.jsx)(n.td,{children:"Variable"}),(0,s.jsx)(n.td,{children:"Text"}),(0,s.jsx)(n.td,{children:"Names, states, messages"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_hash"})}),(0,s.jsx)(n.td,{children:"32 bits"}),(0,s.jsx)(n.td,{children:"Entity reference hash"}),(0,s.jsx)(n.td,{children:"Referencing entities"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_entity"})}),(0,s.jsx)(n.td,{children:"32 bits"}),(0,s.jsx)(n.td,{children:"Direct entity reference"}),(0,s.jsx)(n.td,{children:"Direct entity references"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"network-communication-mechanisms",children:"Network Communication Mechanisms"}),"\n",(0,s.jsx)(n.h3,{id:"server-authority-model",children:"Server Authority Model"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together uses a strict server authority model:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"The server"})," maintains the authoritative game state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clients"})," receive updates from the server and render the state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clients"})," send action requests to the server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"The server"})," validates requests and executes valid actions"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Example of respecting server authority\nfunction MyComponent:DoSomething(value)\n    if not TheWorld.ismastersim then\n        -- Client cannot modify state directly\n        -- Send request to server instead\n        SendModRPCToServer(MOD_RPC.MyMod.RequestAction, self.inst.GUID, value)\n        return\n    end\n    \n    -- Server-side logic\n    self.value = value\n    self:SyncNetworkVars()\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"network-variables-netvars",children:"Network Variables (NetVars)"}),"\n",(0,s.jsx)(n.p,{children:"Network variables automatically sync data from server to clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Creating network variables\nfunction MyComponent:ctor(inst)\n    self.inst = inst\n    \n    self.myvalue = net_float(inst.GUID, "mycomponent.myvalue", "myvaluedirty")\n    self.mystate = net_string(inst.GUID, "mycomponent.mystate", "mystatedirty")\n    \n    if not TheWorld.ismastersim then\n        -- Client-side event listener for network updates\n        inst:ListenForEvent("myvaluedirty", function()\n            local new_value = self.myvalue:value()\n            -- React to updated value\n            self:OnValueChanged(new_value)\n        end)\n    end\nend\n\n-- Updating network variables (server only)\nfunction MyComponent:SetValue(value)\n    if not TheWorld.ismastersim then\n        return\n    end\n    \n    self.myvalue:set(value)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"remote-procedure-calls-rpcs",children:"Remote Procedure Calls (RPCs)"}),"\n",(0,s.jsx)(n.p,{children:"RPCs enable communication between clients and server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define RPC in modmain.lua\n-- Client to server RPC\nAddModRPCHandler("MyMod", "RequestAction", function(player, entity_id, action)\n    local entity = Ents[entity_id]\n    if entity and entity.components.mycomponent then\n        entity.components.mycomponent:DoAction(action)\n    end\nend)\n\n-- Server to client RPC\nAddClientModRPCHandler("MyMod", "NotifyEvent", function(event_type, x, y, z)\n    SpawnClientEffect(event_type, x, y, z)\nend)\n\n-- Sending RPC from client to server\nfunction SendActionRequest(entity, action)\n    SendModRPCToServer(MOD_RPC.MyMod.RequestAction, entity.GUID, action)\nend\n\n-- Sending RPC from server to client\nfunction NotifyPlayer(player, event_type, position)\n    SendModRPCToClient(MOD_RPC.MyMod.NotifyEvent, player.userid, \n                      event_type, position.x, position.y, position.z)\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"network-component-replication",children:"Network Component Replication"}),"\n",(0,s.jsx)(n.p,{children:"Components in Don't Starve Together have two versions:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server Component"}),": Full implementation with game logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client Replica"}),": Simplified version with network variables"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"component-replica-system",children:"Component Replica System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Register a component for replication in modmain.lua\nAddReplicableComponent("mycomponent")\n\n-- Server Component (components/mycomponent.lua)\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self.value = 100\n    \n    -- Initialize network variables\n    if self.inst.replica.mycomponent == nil then\n        self.inst.replica.mycomponent = {}\n        self.inst.replica.mycomponent._value = net_int(inst.GUID, "mycomponent._value", "valuechanged")\n    end\n    \n    -- Set initial value\n    self.inst.replica.mycomponent._value:set(self.value)\nend)\n\n-- Client Replica (components/mycomponent_replica.lua)\nlocal MyComponentReplica = Class(function(self, inst)\n    self.inst = inst\n    \n    -- Initialize network variable\n    self._value = net_int(inst.GUID, "mycomponent._value", "valuechanged")\n    \n    -- Set up client-side event handling\n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("valuechanged", function()\n            -- React to value change\n            inst:PushEvent("mycomponent.valuechanged", { value = self:GetValue() })\n        end)\n    end\nend)\n\nfunction MyComponentReplica:GetValue()\n    return self._value:value()\nend\n\nreturn MyComponentReplica\n'})}),"\n",(0,s.jsx)(n.h2,{id:"network-states-and-optimization",children:"Network States and Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"network-priorities",children:"Network Priorities"}),"\n",(0,s.jsx)(n.p,{children:"Entities can have different network priorities based on importance:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NETWORK_PRIORITY.CRITICAL"})," (0): Must be delivered immediately"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NETWORK_PRIORITY.HIGH"})," (1): Important for gameplay"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NETWORK_PRIORITY.MEDIUM"})," (2): Standard priority"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NETWORK_PRIORITY.LOW"})," (3): Can be delayed if needed"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Set entity network priority\nentity.entity:SetPriority(NETWORK_PRIORITY.HIGH) -- For important entities\n\n-- Lower priority for cosmetic entities\ndecorative_entity.entity:SetPriority(NETWORK_PRIORITY.LOW)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bandwidth-optimization",children:"Bandwidth Optimization"}),"\n",(0,s.jsx)(n.p,{children:"Techniques for optimizing network usage:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use appropriate data types"}),": Choose smallest possible NetVar type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch updates"}),": Combine multiple updates when possible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update frequency control"}),": Only send changes when necessary"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relevance filtering"}),": Only send data to players who need it"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Delta compression"}),": Send only what changed, not full state"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Bandwidth optimization example\nfunction OptimizedSync(inst)\n    -- Only sync if position changed significantly\n    local x, y, z = inst.Transform:GetWorldPosition()\n    \n    if inst._last_x == nil or \n       math.abs(inst._last_x - x) > 0.5 or\n       math.abs(inst._last_z - z) > 0.5 then\n        \n        inst.net_pos_x:set(x)\n        inst.net_pos_z:set(z)\n        \n        inst._last_x = x\n        inst._last_z = z\n    end\nend\n\ninst:DoPeriodicTask(0.2, OptimizedSync) -- 5 times per second maximum\n"})}),"\n",(0,s.jsx)(n.h2,{id:"network-related-components",children:"Network-Related Components"}),"\n",(0,s.jsx)(n.p,{children:"Several components interact with network properties:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Component"}),(0,s.jsx)(n.th,{children:"Key Network Interactions"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"NetworkIdentity"})}),(0,s.jsx)(n.td,{children:"Manages entity identification across the network"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"PlayerController"})}),(0,s.jsx)(n.td,{children:"Handles player input and sends action requests"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Combat"})}),(0,s.jsx)(n.td,{children:"Synchronizes combat state and attacks"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Inventory"})}),(0,s.jsx)(n.td,{children:"Manages item synchronization between players"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Container"})}),(0,s.jsx)(n.td,{children:"Synchronizes container contents"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Builder"})}),(0,s.jsx)(n.td,{children:"Synchronizes crafting and building actions"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WorldState"})}),(0,s.jsx)(n.td,{children:"Synchronizes world conditions across clients"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"network-events",children:"Network Events"}),"\n",(0,s.jsx)(n.p,{children:"Network properties trigger several standard events:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entityreplicated"})," - When an entity is first replicated to clients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"playerjoined"})," - When a player connects to the server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"playerleft"})," - When a player disconnects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ms_playerspawn"})," - When a player spawns in the world"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"networkdisconnect"})," - When network connection is lost"]}),"\n",(0,s.jsx)(n.li,{children:"Dirty events - Custom events when network variables change"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"special-network-mechanics",children:"Special Network Mechanics"}),"\n",(0,s.jsx)(n.h3,{id:"entity-classification",children:"Entity Classification"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Mark entity as having completed network setup\ninst.entity:SetPristine()\n\n-- Check if on server or client\nif not TheWorld.ismastersim then\n    -- Client-only code\n    return inst\nend\n\n-- Server-only code below\ninst:AddComponent("mycomponent")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"network-entity-visibility",children:"Network Entity Visibility"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Make entity invisible but still networked\nclassified = CreateEntity()\nclassified.entity:AddNetwork()\nclassified.entity:Hide()\nclassified.persists = false\n\n-- Add network variables for data storage\nclassified.health = net_float(classified.GUID, "health", "healthdirty")\nclassified.max_health = net_float(classified.GUID, "max_health")\n\n-- Set up parent relationship\nclassified:SetParent(owner)\nowner.player_classified = classified\n\n-- Mark as ready for network use\nclassified.entity:SetPristine()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"reconciliation-and-desync-handling",children:"Reconciliation and Desync Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Detect potential desync\nfunction CheckForDesync(inst)\n    local server_state = inst.replica.syncmanager:GetServerState()\n    local client_state = CalculateLocalState(inst)\n    \n    if math.abs(server_state - client_state) > DESYNC_THRESHOLD then\n        -- Detected desync, request full resync\n        SendModRPCToServer(MOD_RPC.MyMod.RequestResync, inst.GUID)\n    end\nend\n\n-- Handle resync requests\nfunction PerformFullResync(inst, target_player)\n    -- Collect all necessary state\n    local state = {\n        position = { inst.Transform:GetWorldPosition() },\n        health = inst.components.health and inst.components.health.currenthealth or nil,\n        inventory = GetInventoryState(inst),\n        -- Add other important state\n    }\n    \n    -- Encode and send full state\n    local encoded = json.encode(state)\n    SendModRPCToClient(MOD_RPC.MyMod.FullResync, target_player.userid, inst.GUID, encoded)\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-system",children:"Network System"})," - Core networking concepts and implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/client-server-synchronization",children:"Client-Server Synchronization"})," - Detailed synchronization techniques"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/rpc-system",children:"RPC System"})," - For remote procedure calls between server and clients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-bandwidth-optimization",children:"Network Bandwidth Optimization"})," - For optimization techniques"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/handling-latency-network-drops",children:"Handling Latency"})," - For dealing with network delays"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/security-considerations-networking",children:"Security Considerations"})," - Security best practices"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);