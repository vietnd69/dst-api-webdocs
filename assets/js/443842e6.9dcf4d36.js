"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2765],{8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(o.Provider,{value:e},n.children)}},9249:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/node-types/action-nodes","title":"Action Nodes","description":"Last Update: 2023-08-01","source":"@site/docs/api-vanilla/node-types/action-nodes.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/action-nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/action-nodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"action-nodes","title":"Action Nodes","sidebar_position":2,"last_updated":"2023-08-01T00:00:00.000Z","version":624447},"sidebar":"docs","previous":{"title":"Node Types Overview","permalink":"/dst-api-webdocs/docs/api/node-types"},"next":{"title":"Condition Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes"}}');var i=t(4848),o=t(8453);const a={id:"action-nodes",title:"Action Nodes",sidebar_position:2,last_updated:new Date("2023-08-01T00:00:00.000Z"),version:624447},r="Action Nodes",c={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Action Node States",id:"action-node-states",level:2},{value:"Built-in Action Nodes",id:"built-in-action-nodes",level:2},{value:"Movement Actions",id:"movement-actions",level:3},{value:"Combat Actions",id:"combat-actions",level:3},{value:"Other Common Actions",id:"other-common-actions",level:3},{value:"Creating Custom Action Nodes",id:"creating-custom-action-nodes",level:2},{value:"Example: Patrol Action",id:"example-patrol-action",level:2},{value:"Integration with Other Node Types",id:"integration-with-other-node-types",level:2},{value:"Action Node Performance Considerations",id:"action-node-performance-considerations",level:2},{value:"See also",id:"see-also",level:2}];function l(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Last Update: 2023-08-01"})}),"\n",(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"action-nodes",children:"Action Nodes"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"API Version: 624447"})}),"\n",(0,i.jsx)(e.p,{children:"Action Nodes are fundamental building blocks in Don't Starve Together's behavior tree system. They define specific actions that entities can perform, forming the \"leaves\" of behavior trees that drive AI decision-making."}),"\n",(0,i.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Basic action node structure\nlocal MyAction = Class(BehaviorNode, function(self, inst, action_fn)\n    BehaviorNode._ctor(self, "MyAction")\n    self.inst = inst\n    self.action_fn = action_fn\nend)\n\nfunction MyAction:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n    end\n\n    if self.status == RUNNING then\n        if self.action_fn(self.inst) then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n\n-- Used in a behavior tree\nlocal root = PriorityNode(\n{\n    MyAction(inst, function(inst) \n        -- Do something and return true/false for success/failure\n        return inst.components.combat:DoAttack()\n    end),\n    -- Other nodes\n}, 0.5) -- Run every 0.5 seconds\n'})}),"\n",(0,i.jsx)(e.h2,{id:"action-node-states",children:"Action Node States"}),"\n",(0,i.jsx)(e.p,{children:"Action nodes can be in one of four states:"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"State"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"READY"})}),(0,i.jsx)(e.td,{children:"Node is ready to be executed"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"RUNNING"})}),(0,i.jsx)(e.td,{children:"Node is currently executing"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"SUCCESS"})}),(0,i.jsx)(e.td,{children:"Node has completed successfully"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"FAILURE"})}),(0,i.jsx)(e.td,{children:"Node has failed to complete"})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"built-in-action-nodes",children:"Built-in Action Nodes"}),"\n",(0,i.jsx)(e.p,{children:"Don't Starve Together includes several pre-defined action nodes for common behaviors:"}),"\n",(0,i.jsx)(e.h3,{id:"movement-actions",children:"Movement Actions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Go to target entity\nGoToEntity(inst, target_fn, max_distance)\n\n-- Go to specific point\nGoToPoint(inst, point_fn)\n\n-- Wander around\nWander(inst, center_point, max_distance, min_time, max_time)\n\n-- Follow entity at distance\nFollow(inst, target_fn, min_dist, target_dist, max_dist)\n\n-- Run away from danger\nRunAway(inst, threat_fn, threat_distance, safe_distance)\n"})}),"\n",(0,i.jsx)(e.h3,{id:"combat-actions",children:"Combat Actions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Chase and attack target\nChaseAndAttack(inst, max_chase_time, give_up_distance)\n\n-- Attack specific target\nAttackTarget(inst, target_fn)\n\n-- Find nearest attackable target\nFindTarget(inst, distance, canattack_fn, tags)\n"})}),"\n",(0,i.jsx)(e.h3,{id:"other-common-actions",children:"Other Common Actions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Find and eat food\nFindFood(inst, food_tags, distance)\n\n-- Sleep at location\nSleep(inst, sleeptime_fn)\n\n-- Find specific items\nFindItem(inst, item_fn, distance)\n\n-- Perform custom action\nDoAction(inst, action_fn)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"creating-custom-action-nodes",children:"Creating Custom Action Nodes"}),"\n",(0,i.jsx)(e.p,{children:"To create a custom action node:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Derive from BehaviorNode"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local CustomAction = Class(BehaviorNode, function(self, inst, ...)\n    BehaviorNode._ctor(self, "CustomAction")\n    self.inst = inst\n    -- Store other parameters\nend)\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Implement Visit function"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"function CustomAction:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n    end\n    \n    if self.status == RUNNING then\n        -- Implement action logic here\n        -- Set status to SUCCESS or FAILURE based on result\n    end\n    \n    return self.status\nend\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Optional: Implement OnStop function"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"function CustomAction:OnStop()\n    -- Clean up any resources or states\nend\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"example-patrol-action",children:"Example: Patrol Action"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local Patrol = Class(BehaviorNode, function(self, inst, patrol_points, pause_time)\n    BehaviorNode._ctor(self, "Patrol")\n    self.inst = inst\n    self.patrol_points = patrol_points\n    self.pause_time = pause_time or 2\n    self.current_point = 1\n    self.waiting = false\n    self.wait_time = 0\nend)\n\nfunction Patrol:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n    end\n    \n    if self.status == RUNNING then\n        if self.waiting then\n            self.wait_time = self.wait_time - GetTickTime()\n            if self.wait_time <= 0 then\n                self.waiting = false\n                self.current_point = (self.current_point % #self.patrol_points) + 1\n            end\n            return self.status\n        end\n        \n        if self.inst.components.locomotor ~= nil then\n            local target = self.patrol_points[self.current_point]\n            local pos = self.inst:GetPosition()\n            \n            if distsq(pos.x, pos.z, target.x, target.z) < 1 then\n                self.waiting = true\n                self.wait_time = self.pause_time\n                self.inst.components.locomotor:Stop()\n            else\n                self.inst.components.locomotor:GoToPoint(target)\n            end\n            return self.status\n        else\n            return FAILURE\n        end\n    end\n    \n    return self.status\nend\n\nfunction Patrol:OnStop()\n    if self.inst.components.locomotor ~= nil then\n        self.inst.components.locomotor:Stop()\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"integration-with-other-node-types",children:"Integration with Other Node Types"}),"\n",(0,i.jsx)(e.p,{children:"Action nodes work with other node types to create complex behaviors:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Priority Nodes"}),": Choose which action to perform based on priority"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sequence Nodes"}),": Perform a series of actions in order"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Decorator Nodes"}),": Modify how actions are performed"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Condition Nodes"}),": Determine if actions can be performed"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Example combining multiple node types\nlocal behavior = PriorityNode(\n{\n    -- Run away if health is low (Condition + Action)\n    IfNode(function() return inst.components.health:GetPercent() < 0.3 end,\n        RunAway(inst, function() return FindClosestThreat(inst) end, 10, 15)\n    ),\n    \n    -- Chase and attack if target exists (Condition + Action)\n    IfNode(function() return inst.components.combat and inst.components.combat.target end,\n        ChaseAndAttack(inst, 10)\n    ),\n    \n    -- Otherwise patrol between points (Action)\n    Patrol(inst, {\n        Vector3(10, 0, 10),\n        Vector3(10, 0, -10),\n        Vector3(-10, 0, -10),\n        Vector3(-10, 0, 10)\n    }, 3)\n}, 0.5)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"action-node-performance-considerations",children:"Action Node Performance Considerations"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Keep action logic simple for better performance"}),"\n",(0,i.jsx)(e.li,{children:"Avoid expensive calculations in frequently called actions"}),"\n",(0,i.jsx)(e.li,{children:"Use timeouts to prevent infinite action attempts"}),"\n",(0,i.jsx)(e.li,{children:"Consider using throttled updates for non-critical actions"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/brain",children:"Brain"})," - For brain implementation using behavior trees"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes",children:"Priority Nodes"})," - For selecting between different actions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes",children:"Condition Nodes"})," - For conditional action execution"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes",children:"Sequence Nodes"})," - For executing actions in sequence"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes",children:"Decorator Nodes"})," - For modifying action behavior"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}}}]);