"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[449],{3120:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api-vanilla/global-objects/theglobalinstance","title":"TheGlobalInstance","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/global-objects/theglobalinstance.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/theglobalinstance","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theglobalinstance","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"theglobalinstance","title":"TheGlobalInstance","sidebar_position":8,"last_updated":"2023-07-06T00:00:00.000Z"}}');var l=a(4848),t=a(8453);const i={id:"theglobalinstance",title:"TheGlobalInstance",sidebar_position:8,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="TheGlobalInstance",r={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Data Management",id:"data-management",level:2},{value:"Persistence and Synchronization",id:"persistence-and-synchronization",level:2},{value:"Event Handlers",id:"event-handlers",level:2},{value:"Shard-Specific Operations",id:"shard-specific-operations",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Integration with Other Global Objects",id:"integration-with-other-global-objects",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"theglobalinstance",children:"TheGlobalInstance"})}),"\n",(0,l.jsx)(n.p,{children:"TheGlobalInstance is the global object that manages global data that persists across server shards in Don't Starve Together. It provides a centralized storage mechanism for data that needs to be shared between different server instances within a cluster."}),"\n",(0,l.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Set a global value that persists across all shards\nTheGlobalInstance:SetValue("global_key", some_value)\n\n-- Get a value from the global storage\nlocal value = TheGlobalInstance:GetValue("global_key")\n\n-- Check if a global value exists\nlocal exists = TheGlobalInstance:HasValue("global_key")\n\n-- Remove a global value\nTheGlobalInstance:RemoveValue("global_key")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"data-management",children:"Data Management"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Set a complex data structure in global storage\nTheGlobalInstance:SetValue("player_statistics", {\n    players_joined = 50,\n    boss_defeats = 10,\n    days_survived = 100\n})\n\n-- Update a nested value in global storage\nlocal stats = TheGlobalInstance:GetValue("player_statistics")\nif stats then\n    stats.players_joined = stats.players_joined + 1\n    TheGlobalInstance:SetValue("player_statistics", stats)\nend\n\n-- Clear all global values\nTheGlobalInstance:ClearAllValues()\n'})}),"\n",(0,l.jsx)(n.h2,{id:"persistence-and-synchronization",children:"Persistence and Synchronization"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Force save global instance data to disk\nTheGlobalInstance:Save()\n\n-- Request refresh of global data from primary shard\nTheGlobalInstance:SynchronizeWithMaster()\n\n-- Check if data is currently synchronized across shards\nlocal is_synced = TheGlobalInstance:IsDataSynchronized()\n\n-- Set synchronization interval (in seconds)\nTheGlobalInstance:SetSyncInterval(30)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"event-handlers",children:"Event Handlers"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Register a handler to be called when a specific global value changes\nTheGlobalInstance:AddValueChangeHandler("global_key", function(new_value, old_value)\n    print("Value changed from " .. tostring(old_value) .. " to " .. tostring(new_value))\nend)\n\n-- Remove a value change handler\nTheGlobalInstance:RemoveValueChangeHandler("global_key", handler_fn)\n\n-- Set handler for synchronization completion\nTheGlobalInstance:SetOnSyncCompleteFn(function()\n    print("Synchronization with master shard completed")\nend)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"shard-specific-operations",children:"Shard-Specific Operations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Check if value was set by current shard\nlocal is_local = TheGlobalInstance:IsLocalValue("global_key")\n\n-- Get the shard ID that last modified a value\nlocal shard_id = TheGlobalInstance:GetValueOrigin("global_key")\n\n-- Set value that\'s only visible to this shard\nTheGlobalInstance:SetLocalValue("shard_specific_key", some_value)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Data Serialization"}),": All global values must be serializable - avoid using entities, functions, or userdata"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Storage Limits"}),": There are practical limits to how much data can be stored globally - keep data structures compact"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Synchronization Latency"}),": Changes take time to propagate across shards - don't expect immediate consistency"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Server-Side Only"}),": TheGlobalInstance functions only work on servers, not on clients"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Persistence"}),": Data persists between server restarts but can be lost if files are corrupted or deleted"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"integration-with-other-global-objects",children:"Integration with Other Global Objects"}),"\n",(0,l.jsx)(n.p,{children:"TheGlobalInstance often works with other global objects:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theshard",children:"TheShard"})}),": For communication between shards"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/thenet",children:"TheNet"})}),": For network-related functionality"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theworld",children:"TheWorld"})}),": For accessing world state"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Global Player Statistics"}),": Tracking player achievements across all worlds"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cross-Shard Events"}),": Managing events that span multiple shards"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Persistent Game State"}),": Storing game state that should persist across all shards"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Global Resource Management"}),": Tracking resources that are shared between worlds"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Synchronized Settings"}),": Maintaining consistent settings across a server cluster"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var s=a(6540);const l={},t=s.createContext(l);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);