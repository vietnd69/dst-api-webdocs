"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[53936],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var l=s(96540);const r={},a=l.createContext(r);function i(e){const n=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),l.createElement(a.Provider,{value:n},e.children)}},93613:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"game-scripts/core-systems/data-management/saves/saveindex","title":"SaveIndex","description":"Save game management system for slot-based save data and session handling","source":"@site/docs/game-scripts/core-systems/data-management/saves/saveindex.md","sourceDirName":"game-scripts/core-systems/data-management/saves","slug":"/game-scripts/core-systems/data-management/saves/saveindex","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/saveindex","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"saveindex","title":"SaveIndex","description":"Save game management system for slot-based save data and session handling","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Save File Upgrades","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/savefileupgrades"},"next":{"title":"Scrapbook Partitions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/scrapbook-partitions"}}');var r=s(74848),a=s(28453);const i={id:"saveindex",title:"SaveIndex",description:"Save game management system for slot-based save data and session handling",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="SaveIndex",d={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Constants",id:"constants",level:2},{value:"SAVEDATA_VERSION",id:"savedata_version",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Save Slots",id:"save-slots",level:3},{value:"Session Management",id:"session-management",level:3},{value:"Multi-Level Support",id:"multi-level-support",level:3},{value:"Mod Integration",id:"mod-integration",level:3},{value:"Class Structure",id:"class-structure",level:2},{value:"SaveIndex()",id:"saveindex-constructor",level:3},{value:"Instance Methods",id:"instance-methods",level:2},{value:"Init()",id:"init",level:3},{value:"GuaranteeMinNumSlots(numslots)",id:"guarantee-min-num-slots",level:3},{value:"GetNumSlots()",id:"get-num-slots",level:3},{value:"Save(callback)",id:"save",level:3},{value:"Load(callback)",id:"load",level:3},{value:"LoadClusterSlot(slot, shard, callback)",id:"load-cluster-slot",level:3},{value:"GetSaveData(slotnum, cb)",id:"get-save-data",level:3},{value:"DeleteSlot(slot, cb, save_options)",id:"delete-slot",level:3},{value:"SaveCurrent(onsavedcb, isshutdown)",id:"save-current",level:3},{value:"StartSurvivalMode(saveslot, customoptions, serverdata, onsavedcb)",id:"start-survival-mode",level:3},{value:"IsSlotEmpty(slot)",id:"is-slot-empty",level:3},{value:"IsSlotMultiLevel(slot)",id:"is-slot-multi-level",level:3},{value:"GetSlotServerData(slot)",id:"get-slot-server-data",level:3},{value:"GetSlotGenOptions(slot)",id:"get-slot-gen-options",level:3},{value:"GetSlotSession(slot, caves_session)",id:"get-slot-session",level:3},{value:"LoadSlotCharacter(slot)",id:"load-slot-character",level:3},{value:"SetServerEnabledMods(slot)",id:"set-server-enabled-mods",level:3},{value:"LoadServerEnabledModsFromSlot(slot)",id:"load-server-enabled-mods-from-slot",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Save/Load Operations",id:"basic-saveload-operations",level:3},{value:"Starting New Game",id:"starting-new-game",level:3},{value:"Multi-Level Save Management",id:"multi-level-save-management",level:3},{value:"Mod Configuration Management",id:"mod-configuration-management",level:3},{value:"File Override System",id:"file-override-system",level:2},{value:"Level Data Override",id:"level-data-override",level:3},{value:"World Generation Override",id:"world-generation-override",level:3},{value:"Integration with Game Systems",id:"integration-with-game-systems",level:2},{value:"Session Management",id:"session-management-1",level:3},{value:"World Generation",id:"world-generation",level:3},{value:"Cluster Support",id:"cluster-support",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"File I/O Operations",id:"file-io-operations",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Data Validation",id:"data-validation",level:3},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Related Systems",id:"related-systems",level:2},{value:"Migration and Upgrades",id:"migration-and-upgrades",level:2},{value:"Legacy Save Migration",id:"legacy-save-migration",level:3},{value:"Version Upgrade Process",id:"version-upgrade-process",level:3},{value:"Technical Implementation Notes",id:"technical-implementation-notes",level:2},{value:"Data Structure Format",id:"data-structure-format",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"saveindex",children:"SaveIndex"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SaveIndex"})," class manages save game slots, session data, and save/load operations in Don't Starve Together. It provides a unified interface for handling save data across different game modes, world configurations, and multi-level setups (Master/Caves shards)."]}),"\n",(0,r.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,r.jsx)(n.h3,{id:"savedata_version",children:"SAVEDATA_VERSION"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Value:"})," ",(0,r.jsx)(n.code,{children:"4"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Current version number for save data format, used for upgrade compatibility."]}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"save-slots",children:"Save Slots"}),"\n",(0,r.jsx)(n.p,{children:"The system manages numbered save slots, each containing world options, server configuration, session identifiers, and enabled mod lists."}),"\n",(0,r.jsx)(n.h3,{id:"session-management",children:"Session Management"}),"\n",(0,r.jsx)(n.p,{children:"Each save slot is associated with a unique session identifier that links to the actual world save data files."}),"\n",(0,r.jsx)(n.h3,{id:"multi-level-support",children:"Multi-Level Support"}),"\n",(0,r.jsx)(n.p,{children:"Supports both single-world saves and multi-level cluster saves with separate Master and Caves shards."}),"\n",(0,r.jsx)(n.h3,{id:"mod-integration",children:"Mod Integration"}),"\n",(0,r.jsx)(n.p,{children:"Tracks enabled server mods and their configuration for each save slot."}),"\n",(0,r.jsx)(n.h2,{id:"class-structure",children:"Class Structure"}),"\n",(0,r.jsx)(n.h3,{id:"saveindex-constructor",children:"SaveIndex()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates a new SaveIndex instance and initializes the save data structure."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local saveIndex = SaveIndex()\n-- saveIndex is now ready for save/load operations\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initialization Process:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Sets save data version to current ",(0,r.jsx)(n.code,{children:"SAVEDATA_VERSION"})]}),"\n",(0,r.jsx)(n.li,{children:"Creates empty slots table"}),"\n",(0,r.jsxs)(n.li,{children:["Guarantees minimum number of slots via ",(0,r.jsx)(n.code,{children:"GuaranteeMinNumSlots()"})]}),"\n",(0,r.jsx)(n.li,{children:"Sets current slot to 1"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,r.jsx)(n.h3,{id:"init",children:"Init()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInitializes the SaveIndex with default data structure and ensures minimum slot count."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local saveIndex = SaveIndex()\nsaveIndex:Init()\n-- Save index is now initialized with default structure\n"})}),"\n",(0,r.jsx)(n.h3,{id:"guarantee-min-num-slots",children:"GuaranteeMinNumSlots(numslots)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nEnsures the save index has at least the specified number of slots, creating empty slot data as needed."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"numslots"})," (number): Minimum number of slots required"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"saveIndex:GuaranteeMinNumSlots(10)\n-- Save index now has at least 10 slots available\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-num-slots",children:"GetNumSlots()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nReturns the current number of save slots available."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(number): Number of available save slots"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local slotCount = saveIndex:GetNumSlots()\nprint("Available slots:", slotCount)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"save",children:"Save(callback)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"deprecated in build 676042"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nPreviously saved the SaveIndex to persistent storage. As of 09/09/2020, SaveIndex saving is deprecated and this function only calls the callback."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"callback"})," (function|nil): Optional callback function to execute after save"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'saveIndex:Save(function()\n    print("Save operation completed (deprecated)")\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"load",children:"Load(callback)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nLoads the SaveIndex from persistent storage, upgrading save data format if necessary."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"callback"})," (function|nil): Optional callback function to execute after load"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'saveIndex:Load(function()\n    print("Save index loaded successfully")\n    -- Access loaded data here\nend)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Load Process:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Retrieves persistent string data"}),"\n",(0,r.jsx)(n.li,{children:"Validates data integrity"}),"\n",(0,r.jsx)(n.li,{children:"Populates slots with loaded data"}),"\n",(0,r.jsx)(n.li,{children:"Applies save file upgrades if needed"}),"\n",(0,r.jsx)(n.li,{children:"Sets default world options for empty slots"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"load-cluster-slot",children:"LoadClusterSlot(slot, shard, callback)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nLoads save data for a specific slot and shard in a cluster configuration."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number): The save slot number"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shard"}),' (string): The shard name ("Master" or "Caves")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"callback"})," (function|nil): Optional callback function"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'saveIndex:LoadClusterSlot(1, "Master", function()\n    print("Cluster slot loaded")\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-save-data",children:"GetSaveData(slotnum, cb)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the actual world save data for a specific slot, handling both cluster and non-cluster configurations."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slotnum"})," (number): The save slot number"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cb"})," (function): Callback function that receives the save data"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'saveIndex:GetSaveData(1, function(savedata)\n    if savedata then\n        print("World data loaded for slot 1")\n        -- Process world save data\n    else\n        print("No save data found for slot 1")\n    end\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"delete-slot",children:"DeleteSlot(slot, cb, save_options)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nDeletes a save slot, optionally preserving world options and server configuration."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number): The save slot number to delete"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cb"})," (function|nil): Optional callback function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"save_options"})," (boolean): Whether to preserve options after deletion"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Delete slot completely\nsaveIndex:DeleteSlot(3, function()\n    print("Slot 3 deleted")\nend, false)\n\n-- Delete but preserve world options\nsaveIndex:DeleteSlot(3, function()\n    print("Slot 3 reset but options preserved")\nend, true)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"save-current",children:"SaveCurrent(onsavedcb, isshutdown)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nSaves the current world state to the active save slot. Only functions on server instances."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onsavedcb"})," (function|nil): Callback function after save completion"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isshutdown"})," (boolean): Whether this save is part of a shutdown process"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Regular save\nsaveIndex:SaveCurrent(function()\n    print("World saved successfully")\nend, false)\n\n-- Shutdown save\nsaveIndex:SaveCurrent(function()\n    print("World saved for shutdown")\nend, true)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"start-survival-mode",children:"StartSurvivalMode(saveslot, customoptions, serverdata, onsavedcb)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInitializes a new survival mode save slot with world generation options and server configuration."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"saveslot"})," (number): The save slot number to initialize"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"customoptions"})," (table|nil): Custom world generation options"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"serverdata"})," (table): Server configuration data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onsavedcb"})," (function|nil): Callback function after initialization"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local serverConfig = {\n    game_mode = "survival",\n    max_players = 6,\n    use_cluster_path = true\n}\n\nsaveIndex:StartSurvivalMode(1, nil, serverConfig, function()\n    print("Survival mode initialized for slot 1")\nend)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Initialization Process:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Sets session identifier"}),"\n",(0,r.jsx)(n.li,{children:"Applies custom or default world options"}),"\n",(0,r.jsx)(n.li,{children:"Processes level data overrides"}),"\n",(0,r.jsx)(n.li,{children:"Merges worldgen overrides"}),"\n",(0,r.jsx)(n.li,{children:"Updates server data"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"is-slot-empty",children:"IsSlotEmpty(slot)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nChecks whether a save slot is empty (has no session data)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number): The save slot number to check"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if slot is empty, false otherwise"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'if saveIndex:IsSlotEmpty(1) then\n    print("Slot 1 is available for new game")\nelse\n    print("Slot 1 contains existing save data")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"is-slot-multi-level",children:"IsSlotMultiLevel(slot)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nDetermines if a save slot uses multi-level (cluster) configuration with separate Master and Caves worlds."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number): The save slot number to check"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if slot is multi-level, false otherwise"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'if saveIndex:IsSlotMultiLevel(1) then\n    print("Slot 1 has both surface and caves")\nelse\n    print("Slot 1 has single world only")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-slot-server-data",children:"GetSlotServerData(slot)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRetrieves server configuration data for a specific save slot."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number): The save slot number"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Server configuration data, or empty table if none exists"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local serverData = saveIndex:GetSlotServerData(1)\nprint("Game mode:", serverData.game_mode or "unknown")\nprint("Max players:", serverData.max_players or "unknown")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-slot-gen-options",children:"GetSlotGenOptions(slot)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nReturns a deep copy of world generation options for the specified slot."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number|nil): The save slot number (uses current slot if nil)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Deep copy of world generation options"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local worldOptions = saveIndex:GetSlotGenOptions(1)\nfor i, levelData in ipairs(worldOptions) do\n    print("Level", i, ":", levelData.name)\n    print("Overrides:", #levelData.overrides, "settings")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-slot-session",children:"GetSlotSession(slot, caves_session)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the session identifier for a save slot, handling multi-level configurations."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number|nil): The save slot number (uses current slot if nil)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"caves_session"})," (boolean): Whether to get caves session ID in multi-level setup"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string|nil): Session identifier, or nil if none exists"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get surface world session\nlocal surfaceSession = saveIndex:GetSlotSession(1, false)\n\n-- Get caves world session  \nlocal cavesSession = saveIndex:GetSlotSession(1, true)\n\nprint("Surface session:", surfaceSession)\nprint("Caves session:", cavesSession)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"load-slot-character",children:"LoadSlotCharacter(slot)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nLoads the character prefab name for the current user in the specified save slot."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number|nil): The save slot number (uses current slot if nil)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string|nil): Character prefab name, or nil if not found"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local character = saveIndex:LoadSlotCharacter(1)\nif character then\n    print("Player character in slot 1:", character)\nelse\n    print("No character data found for slot 1")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"set-server-enabled-mods",children:"SetServerEnabledMods(slot)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nSaves the currently enabled server mods and their configurations to the specified save slot."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number|nil): The save slot number (uses current slot if nil)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Enable some mods through ModManager, then save to slot\nModManager:EnableMod("workshop-12345")\nKnownModIndex:SetConfigurationOption("workshop-12345", "setting1", "value1")\n\nsaveIndex:SetServerEnabledMods(1)\nprint("Enabled mods saved to slot 1")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"load-server-enabled-mods-from-slot",children:"LoadServerEnabledModsFromSlot(slot)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nLoads and applies server mod configurations from the specified save slot."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"slot"})," (number|nil): The save slot number (uses current slot if nil)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'saveIndex:LoadServerEnabledModsFromSlot(1)\nprint("Server mods loaded from slot 1")\n-- All previously enabled mods are now active with saved configurations\n'})}),"\n",(0,r.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"basic-saveload-operations",children:"Basic Save/Load Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Initialize save system\nlocal saveIndex = SaveIndex()\nsaveIndex:Load(function()\n    print("Save index ready")\n    \n    -- Check available slots\n    for i = 1, saveIndex:GetNumSlots() do\n        if saveIndex:IsSlotEmpty(i) then\n            print("Slot", i, "is available")\n        else\n            print("Slot", i, "contains saved game")\n        end\n    end\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"starting-new-game",children:"Starting New Game"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Configure new survival game\nlocal serverConfig = {\n    game_mode = "survival",\n    max_players = 4,\n    pvp = false,\n    pause_when_empty = true\n}\n\nlocal worldOptions = GetDefaultWorldOptions(LEVELTYPE.SURVIVAL)\n\nsaveIndex:StartSurvivalMode(1, worldOptions, serverConfig, function()\n    print("New game started in slot 1")\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"multi-level-save-management",children:"Multi-Level Save Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Check if save supports caves\nif saveIndex:IsSlotMultiLevel(1) then\n    -- Load surface world data\n    local surfaceSession = saveIndex:GetSlotSession(1, false)\n    \n    -- Load caves world data  \n    local cavesSession = saveIndex:GetSlotSession(1, true)\n    \n    print("Surface session:", surfaceSession)\n    print("Caves session:", cavesSession)\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mod-configuration-management",children:"Mod Configuration Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Save current mod setup to slot\nsaveIndex:SetServerEnabledMods(3)\n\n-- Later, restore mod setup from slot\nsaveIndex:LoadServerEnabledModsFromSlot(3)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"file-override-system",children:"File Override System"}),"\n",(0,r.jsx)(n.h3,{id:"level-data-override",children:"Level Data Override"}),"\n",(0,r.jsxs)(n.p,{children:["The system supports ",(0,r.jsx)(n.code,{children:"leveldataoverride.lua"})," files that completely replace level generation settings:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Example leveldataoverride.lua\nreturn {\n    id = "CUSTOM_LEVEL",\n    name = "Custom World",\n    desc = "A customized world configuration",\n    location = "forest",\n    overrides = {\n        world_size = "huge",\n        branching = "most",\n        loops = "always"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"world-generation-override",children:"World Generation Override"}),"\n",(0,r.jsxs)(n.p,{children:["The system supports ",(0,r.jsx)(n.code,{children:"worldgenoverride.lua"})," files for partial world setting modifications:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Example worldgenoverride.lua\nreturn {\n    override_enabled = true,\n    preset = "SURVIVAL_TOGETHER",\n    overrides = {\n        world_size = "large",\n        season_start = "autumn",\n        day = "longday"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-game-systems",children:"Integration with Game Systems"}),"\n",(0,r.jsx)(n.h3,{id:"session-management-1",children:"Session Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Integrates with ",(0,r.jsx)(n.code,{children:"TheNet:GetSessionIdentifier()"})," for unique session tracking"]}),"\n",(0,r.jsx)(n.li,{children:"Handles session file paths for both legacy and cluster configurations"}),"\n",(0,r.jsx)(n.li,{children:"Supports session metadata for quick world information access"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"world-generation",children:"World Generation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Coordinates with world generation system for applying overrides"}),"\n",(0,r.jsx)(n.li,{children:"Manages preset data and custom world configurations"}),"\n",(0,r.jsx)(n.li,{children:"Handles upgrade paths for world generation format changes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cluster-support",children:"Cluster Support"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Manages Master/Caves shard coordination"}),"\n",(0,r.jsx)(n.li,{children:"Handles cross-shard session data sharing"}),"\n",(0,r.jsx)(n.li,{children:"Supports cluster-specific file path management"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"file-io-operations",children:"File I/O Operations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses asynchronous file operations with callbacks"}),"\n",(0,r.jsx)(n.li,{children:"Implements lazy loading for slot data"}),"\n",(0,r.jsx)(n.li,{children:"Caches frequently accessed data during session"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses deep copying for world options to prevent shared references"}),"\n",(0,r.jsx)(n.li,{children:"Cleans up temporary data after operations"}),"\n",(0,r.jsx)(n.li,{children:"Manages slot data efficiently across multiple shards"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"data-validation",children:"Data Validation"}),"\n",(0,r.jsx)(n.p,{children:"The system includes comprehensive validation for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Save data integrity checks"}),"\n",(0,r.jsx)(n.li,{children:"Version compatibility verification"}),"\n",(0,r.jsx)(n.li,{children:"Required field presence validation"}),"\n",(0,r.jsx)(n.li,{children:"Corrupted file recovery"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Handle missing save data\nsaveIndex:GetSaveData(1, function(savedata)\n    if not savedata then\n        print("No save data found - slot may be corrupted")\n        -- Handle empty slot or corruption\n    end\nend)\n\n-- Validate world options\nlocal worldOptions = saveIndex:GetSlotGenOptions(1)\nif not worldOptions or #worldOptions == 0 then\n    print("Invalid world options - using defaults")\n    worldOptions = GetDefaultWorldOptions(LEVELTYPE.SURVIVAL)\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/savefileupgrades",children:"Save File Upgrades"}),": Handles version compatibility and data migration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./shardindex.md",children:"Shard Index"}),": Manages individual shard save data in cluster configurations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./worldgen.md",children:"World Generation"}),": Provides world creation and customization systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./modmanager.md",children:"Mod Manager"}),": Handles server mod enablement and configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./networking.md",children:"Session Management"}),": Manages network sessions and multiplayer coordination"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"migration-and-upgrades",children:"Migration and Upgrades"}),"\n",(0,r.jsx)(n.p,{children:"The SaveIndex system automatically handles migration from older save formats:"}),"\n",(0,r.jsx)(n.h3,{id:"legacy-save-migration",children:"Legacy Save Migration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Converts single-world saves to cluster format when needed"}),"\n",(0,r.jsx)(n.li,{children:"Migrates mod configuration from legacy formats"}),"\n",(0,r.jsx)(n.li,{children:"Preserves world generation settings across format changes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"version-upgrade-process",children:"Version Upgrade Process"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Automatic upgrade during load\nsaveIndex:Load(function()\n    -- System automatically applies upgrades based on save version\n    -- UpgradeSavedLevelData() converts older world option formats\n    -- Version-specific migrations preserve backward compatibility\n    print("Save data upgraded to current version")\nend)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"technical-implementation-notes",children:"Technical Implementation Notes"}),"\n",(0,r.jsx)(n.h3,{id:"data-structure-format",children:"Data Structure Format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- SaveIndex data structure\n{\n    version = 4,  -- SAVEDATA_VERSION\n    slots = {\n        [1] = {\n            world = {\n                options = {\n                    [1] = { -- Surface world options\n                        id = "SURVIVAL_TOGETHER",\n                        name = "Default World",\n                        overrides = { -- World generation settings\n                            world_size = "default",\n                            branching = "default"\n                        }\n                    },\n                    [2] = { -- Caves world options (if multi-level)\n                        id = "DST_CAVE",\n                        name = "The Caves"\n                    }\n                }\n            },\n            server = {\n                game_mode = "survival",\n                max_players = 6,\n                use_cluster_path = true\n            },\n            session_id = "unique_session_identifier",\n            enabled_mods = {\n                ["workshop-12345"] = {\n                    enabled = true,\n                    configuration_options = {\n                        setting1 = "value1"\n                    }\n                }\n            }\n        }\n    },\n    last_used_slot = 1\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);