"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6035],{1452:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"api-vanilla/getting-started/debugging-and-testing","title":"Debugging and Testing","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/getting-started/debugging-and-testing.md","sourceDirName":"api-vanilla/getting-started","slug":"/api/debugging-and-testing","permalink":"/dst-api-webdocs/docs/api/debugging-and-testing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"debugging-and-testing","title":"Debugging and Testing","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z","slug":"/api/debugging-and-testing"},"sidebar":"docs","previous":{"title":"Integrating with Project Management Tools","permalink":"/dst-api-webdocs/docs/api-vanilla/getting-started/project-management"},"next":{"title":"Setting Up a Testing Environment","permalink":"/dst-api-webdocs/docs/api/testing-environment"}}');var i=s(4848),r=s(8453);const o={id:"debugging-and-testing",title:"Debugging and Testing",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z"),slug:"/api/debugging-and-testing"},l="Debugging and Testing Mods",d={},a=[{value:"Debugging Techniques",id:"debugging-techniques",level:2},{value:"Console Logging",id:"console-logging",level:3},{value:"Debug Commands",id:"debug-commands",level:3},{value:"Debug Rendering",id:"debug-rendering",level:3},{value:"Mod Configuration",id:"mod-configuration",level:3},{value:"Debugging Common Issues",id:"debugging-common-issues",level:2},{value:"Network Synchronization Issues",id:"network-synchronization-issues",level:3},{value:"Component Debugging",id:"component-debugging",level:3},{value:"State Graph Debugging",id:"state-graph-debugging",level:3},{value:"Testing Strategies",id:"testing-strategies",level:2},{value:"Local Testing",id:"local-testing",level:3},{value:"Test Cases",id:"test-cases",level:3},{value:"Automated Testing",id:"automated-testing",level:3},{value:"Common Errors and Solutions",id:"common-errors-and-solutions",level:2},{value:"Script Errors",id:"script-errors",level:3},{value:"Mod Loading Errors",id:"mod-loading-errors",level:3},{value:"Multiplayer Issues",id:"multiplayer-issues",level:3},{value:"Debug Tools and Mods",id:"debug-tools-and-mods",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Advanced Debugging",id:"advanced-debugging",level:2},{value:"Memory Profiling",id:"memory-profiling",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"debugging-and-testing-mods",children:"Debugging and Testing Mods"})}),"\n",(0,i.jsx)(n.p,{children:"Developing mods for Don't Starve Together often involves troubleshooting issues and ensuring your mod works correctly. This guide covers the tools and techniques available for debugging and testing your mods."}),"\n",(0,i.jsx)(n.h2,{id:"debugging-techniques",children:"Debugging Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"console-logging",children:"Console Logging"}),"\n",(0,i.jsxs)(n.p,{children:["The most basic debugging technique is using ",(0,i.jsx)(n.code,{children:"print()"})," statements to output information to the console:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Basic print statement\nprint("Player health:", player.components.health.currenthealth)\n\n-- Format a table for better readability\nprint("Inventory:", dumptable(player.components.inventory.itemslots))\n'})}),"\n",(0,i.jsx)(n.p,{children:"To view these logs:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Enable the console by pressing the tilde key (",(0,i.jsx)(n.code,{children:"~"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Look for your print statements in the console output"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"CTRL+L"})," to clear the console if it gets too cluttered"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,i.jsx)(n.p,{children:"Don't Starve Together includes several built-in debug commands that can be entered in the console:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'c_give("prefab_name")        -- Spawn an item\nc_spawn("prefab_name")       -- Spawn an entity\nc_godmode()                  -- Toggle god mode\nc_select()                   -- Select an entity under the cursor\nc_reveal()                   -- Reveal the map\nc_supergodmode()             -- Enable super god mode (unlimited resources)\nc_freecrafting()             -- Enable free crafting\n'})}),"\n",(0,i.jsx)(n.h3,{id:"debug-rendering",children:"Debug Rendering"}),"\n",(0,i.jsx)(n.p,{children:"You can enable various debug visualizations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Enable debug rendering\nTheSim:SetDebugRenderEnabled(true)\n\n-- Show physics collision shapes\nTheSim:SetDebugPhysicsRender(true)\n\n-- Custom debug drawing\nTheWorld.debugrender = true\n\n-- In your entity\'s OnUpdate function:\nif TheWorld.debugrender then\n    local x, y, z = self.inst.Transform:GetWorldPosition()\n    TheWorld.DebugRender:Line(x, y, z, x, y + 2, z, 255, 0, 0, 255)\n    TheWorld.DebugRender:String(x, y + 2, z, "Debug Text", 255, 255, 255, 255)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mod-configuration",children:"Mod Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Create a configuration variable in your modmain.lua to enable/disable debug features:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nGLOBAL.DEBUG_ENABLED = GetModConfigData("debug_mode") or false\n\n-- Later in your code\nif GLOBAL.DEBUG_ENABLED then\n    print("Debug info:", some_variable)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"debugging-common-issues",children:"Debugging Common Issues"}),"\n",(0,i.jsx)(n.h3,{id:"network-synchronization-issues",children:"Network Synchronization Issues"}),"\n",(0,i.jsx)(n.p,{children:"When dealing with multiplayer synchronization problems:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Check if code is running on server or client\nif TheNet:GetIsServer() then\n    print("Running on server")\nelse\n    print("Running on client")\nend\n\n-- Debug network variables\nlocal net_var = net_float("mymod.myvar", "myvar_dirty")\nnet_var:set_local(5)\nprint("Local value:", net_var:value())\nprint("Is dirty:", net_var:is_dirty())\n'})}),"\n",(0,i.jsx)(n.h3,{id:"component-debugging",children:"Component Debugging"}),"\n",(0,i.jsxs)(n.p,{children:["Add a ",(0,i.jsx)(n.code,{children:"GetDebugString()"})," method to your components for better diagnostics:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function MyComponent:GetDebugString()\n    return string.format("Value: %d, State: %s", \n        self.value, \n        self.active and "active" or "inactive")\nend\n\n-- View the debug string in-game with c_select() and looking at the console\n'})}),"\n",(0,i.jsx)(n.h3,{id:"state-graph-debugging",children:"State Graph Debugging"}),"\n",(0,i.jsx)(n.p,{children:"For debugging state graphs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Print current state\nprint("Current state:", self.inst.sg:HasStateTag("idle") and "idle" or "not idle")\n\n-- Log state transitions\nlocal old_gotostate = self.inst.sg.GoToState\nself.inst.sg.GoToState = function(sg, statename, ...)\n    print("State transition:", sg.currentstate.name, "->", statename)\n    return old_gotostate(sg, statename, ...)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-strategies",children:"Testing Strategies"}),"\n",(0,i.jsx)(n.h3,{id:"local-testing",children:"Local Testing"}),"\n",(0,i.jsx)(n.p,{children:"Before sharing your mod, test it thoroughly in various scenarios:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solo Testing"}),": Test in a single-player game first"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Host Testing"}),": Host a server and test with multiple clients"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dedicated Server Testing"}),": Test on a dedicated server if possible"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-cases",children:"Test Cases"}),"\n",(0,i.jsx)(n.p,{children:"Create a checklist of test cases covering:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mod initialization and loading"}),"\n",(0,i.jsx)(n.li,{children:"All features and functionality"}),"\n",(0,i.jsx)(n.li,{children:"Interaction with other game systems"}),"\n",(0,i.jsx)(n.li,{children:"Edge cases and error conditions"}),"\n",(0,i.jsx)(n.li,{children:"Performance under various conditions"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example test script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function RunTests()\n    if not GLOBAL.DEBUG_ENABLED then return end\n    \n    print("=== RUNNING MOD TESTS ===")\n    \n    -- Test item creation\n    local item = SpawnPrefab("my_custom_item")\n    assert(item, "Failed to spawn custom item")\n    \n    -- Test component functionality\n    assert(item.components.mycomponent, "Missing component")\n    assert(item.components.mycomponent:TestFunction() == expected_result, \n           "Component function returned unexpected result")\n           \n    print("All tests passed!")\nend\n\n-- Run tests when the world is ready\nAddPrefabPostInit("world", function(world)\n    world:DoTaskInTime(1, RunTests)\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"automated-testing",children:"Automated Testing"}),"\n",(0,i.jsx)(n.p,{children:"For complex mods, consider creating an automated test system:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local tests = {}\n\nfunction AddTest(name, fn)\n    table.insert(tests, {name = name, fn = fn})\nend\n\nfunction RunAllTests()\n    local passed = 0\n    local failed = 0\n    \n    for _, test in ipairs(tests) do\n        print("Running test:", test.name)\n        local success, error_msg = pcall(test.fn)\n        \n        if success then\n            print("  PASSED")\n            passed = passed + 1\n        else\n            print("  FAILED:", error_msg)\n            failed = failed + 1\n        end\n    end\n    \n    print(string.format("Test results: %d passed, %d failed", passed, failed))\nend\n\n-- Define tests\nAddTest("Item Creation", function()\n    local item = SpawnPrefab("my_custom_item")\n    assert(item, "Failed to spawn item")\nend)\n\n-- Run tests with console command\nGLOBAL.c_runtests = RunAllTests\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-errors-and-solutions",children:"Common Errors and Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"script-errors",children:"Script Errors"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Error"}),(0,i.jsx)(n.th,{children:"Possible Cause"}),(0,i.jsx)(n.th,{children:"Solution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"attempt to index a nil value"})}),(0,i.jsx)(n.td,{children:"Trying to access a property of a nil object"}),(0,i.jsx)(n.td,{children:"Check if the object exists before accessing properties"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"attempt to call a nil value"})}),(0,i.jsx)(n.td,{children:"Calling a function that doesn't exist"}),(0,i.jsx)(n.td,{children:"Verify function names and that required modules are loaded"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"bad argument #1 to function"})}),(0,i.jsx)(n.td,{children:"Passing incorrect parameter type"}),(0,i.jsx)(n.td,{children:"Check parameter types and documentation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"stack overflow"})}),(0,i.jsx)(n.td,{children:"Infinite recursion"}),(0,i.jsx)(n.td,{children:"Look for circular function calls"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"mod-loading-errors",children:"Mod Loading Errors"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Error"}),(0,i.jsx)(n.th,{children:"Possible Cause"}),(0,i.jsx)(n.th,{children:"Solution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Mod doesn't appear in list"}),(0,i.jsx)(n.td,{children:"Incorrect folder structure"}),(0,i.jsx)(n.td,{children:"Verify modinfo.lua and folder naming"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Mod crashes on load"}),(0,i.jsx)(n.td,{children:"Error in modmain.lua"}),(0,i.jsx)(n.td,{children:"Check console for error messages"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Assets not loading"}),(0,i.jsx)(n.td,{children:"Incorrect path or format"}),(0,i.jsx)(n.td,{children:"Verify asset paths and formats"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"multiplayer-issues",children:"Multiplayer Issues"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Issue"}),(0,i.jsx)(n.th,{children:"Possible Cause"}),(0,i.jsx)(n.th,{children:"Solution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Desync"}),(0,i.jsx)(n.td,{children:"Inconsistent state between server/client"}),(0,i.jsx)(n.td,{children:"Use proper network variables and RPC calls"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Lag"}),(0,i.jsx)(n.td,{children:"Inefficient code or too many entities"}),(0,i.jsx)(n.td,{children:"Optimize performance-critical code"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Client-only effects"}),(0,i.jsx)(n.td,{children:"Not using proper network code"}),(0,i.jsx)(n.td,{children:"Separate client and server logic appropriately"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"debug-tools-and-mods",children:"Debug Tools and Mods"}),"\n",(0,i.jsx)(n.p,{children:"Several mods can help with debugging:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debug Menu"}),": Provides in-game access to many debug commands"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Craft Pot"}),": Allows spawning any item for testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"World Control"}),": Manipulate time, weather, and other world settings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Gesture Wheel Debugger"}),": Shows information about controller gestures"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolate Issues"}),": Test one feature at a time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Version Control"}),": Use Git to track changes and revert if needed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incremental Testing"}),": Test frequently as you develop"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Add pcall() around risky code to prevent crashes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logging Strategy"}),": Use structured logging with severity levels"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clean Up Debug Code"}),": Remove or disable debug code before releasing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-debugging",children:"Advanced Debugging"}),"\n",(0,i.jsx)(n.h3,{id:"memory-profiling",children:"Memory Profiling"}),"\n",(0,i.jsx)(n.p,{children:"For complex mods with potential memory issues:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local function CountInstances()\n    local counts = {}\n    for k, v in pairs(Ents) do\n        local prefab = v.prefab\n        counts[prefab] = (counts[prefab] or 0) + 1\n    end\n    \n    for prefab, count in pairs(counts) do\n        if count > 10 then\n            print(prefab, count)\n        end\n    end\nend\n\n-- Call periodically to check for entity leaks\nTheWorld:DoPeriodicTask(60, CountInstances)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function MeasureTime(fn, ...)\n    local start_time = os.clock()\n    local result = fn(...)\n    local end_time = os.clock()\n    print("Function took", (end_time - start_time) * 1000, "ms")\n    return result\nend\n\n-- Usage\nMeasureTime(MyExpensiveFunction, arg1, arg2)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Effective debugging and testing are essential skills for mod development. By using these techniques and tools, you can identify and fix issues more quickly, resulting in more stable and enjoyable mods for players."}),"\n",(0,i.jsx)(n.p,{children:"Remember that the most valuable debugging tool is a systematic approach: understand the problem, isolate the cause, fix the issue, and verify the solution works in all scenarios."})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);