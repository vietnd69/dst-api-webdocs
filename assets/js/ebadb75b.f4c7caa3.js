"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7857],{8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var r=a(6540);const s={},t=r.createContext(s);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},8669:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"api-vanilla/global-objects/theshard","title":"TheShard","description":"TheShard is the global object that manages communication between different server shards in Don\'t Starve Together. It provides interfaces for cross-shard messaging, player migration, and shared state management in multi-shard server clusters.","source":"@site/docs/api-vanilla/global-objects/theshard.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/theshard","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theshard","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"theshard","title":"TheShard","sidebar_position":7,"last_updated":"2023-07-06T00:00:00.000Z"}}');var s=a(4848),t=a(8453);const i={id:"theshard",title:"TheShard",sidebar_position:7,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="TheShard",d={},h=[{value:"Basic Shard Information",id:"basic-shard-information",level:2},{value:"Cross-Shard Communication",id:"cross-shard-communication",level:2},{value:"Player Migration",id:"player-migration",level:2},{value:"Shared State Management",id:"shared-state-management",level:2},{value:"Synchronization",id:"synchronization",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Integration with Other Global Objects",id:"integration-with-other-global-objects",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"theshard",children:"TheShard"})}),"\n",(0,s.jsx)(n.p,{children:"TheShard is the global object that manages communication between different server shards in Don't Starve Together. It provides interfaces for cross-shard messaging, player migration, and shared state management in multi-shard server clusters."}),"\n",(0,s.jsx)(n.h2,{id:"basic-shard-information",children:"Basic Shard Information"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Check if the game is running in a shard cluster\nlocal is_secondary = TheShard:IsSlave()\nlocal is_primary = TheShard:IsMaster()\n\n-- Get the current shard ID\nlocal shard_id = TheShard:GetShardId()\n\n-- Get list of connected shard IDs\nlocal connected_shards = TheShard:GetConnectedShards()\n\n-- Check if a specific shard is connected\nlocal is_connected = TheShard:IsShardConnected(shard_id)\n\n-- Get primary shard ID\nlocal master_shard = TheShard:GetMasterShardId()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cross-shard-communication",children:"Cross-Shard Communication"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Send a message to another shard\nTheShard:SendRemoteMessage(dest_shard_id, message_id, data)\n\n-- Send a message to the primary shard\nTheShard:SendToMaster(message_id, data)\n\n-- Send a message to all secondary shards\nTheShard:SendToSlaves(message_id, data)\n\n-- Register a handler for remote messages\nTheShard:AddRemoteMessageHandler(message_id, function(shard_id, data)\n    print("Received message from shard " .. shard_id)\nend)\n\n-- Listen for specific events on another shard\nTheShard:ListenForRemoteEvent(dest_shard_id, event_name, handler_fn)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"player-migration",children:"Player Migration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Check if player migrations are currently allowed\nlocal migrations_allowed = TheShard:AllowMigration(true)\n\n-- Start a player migration to another shard\nTheShard:StartMigration(player, dest_shard_id, destination_x, destination_z)\n\n-- Get migration data for a player (used during migration)\nlocal migration_data = TheShard:GetMigrationData(userid)\n\n-- Register a handler for when a player arrives from another shard\nTheShard:SetOnPlayerMigrated(function(player, migration_data)\n    -- Handle the newly arrived player\n    print(player.userid .. " arrived from shard " .. migration_data.shard_id)\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"shared-state-management",children:"Shared State Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Share world state with other shards\nTheShard:ShareWorldState(key, value)\n\n-- Get a shared world state value\nlocal value = TheShard:GetSharedWorldState(key)\n\n-- Set a migration reference point for seamless transitions\nTheShard:SetShardPosition(position_x, position_z)\n\n-- Get the position reference point of another shard\nlocal x, z = TheShard:GetShardPosition(shard_id)\n\n-- Get a value from cross-shard storage\nlocal value = TheShard:GetValue(key)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"synchronization",children:"Synchronization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Synchronize time between shards\nTheShard:SynchronizeWorldState()\n\n-- Get the clock time of another shard\nlocal day, time = TheShard:GetRemoteClockTime(shard_id)\n\n-- Get weather information from another shard\nlocal is_raining = TheShard:GetRemoteWeatherState(shard_id, "israining")\n\n-- Synchronize day/night cycles\nTheShard:SyncDayPhase()\n\n-- Check if a shard is in a specific phase\nlocal is_night = TheShard:IsShardInPhase(shard_id, "night")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server-Side Only"}),": TheShard functions only work on the server, not on clients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cluster Configuration"}),": Proper server cluster configuration is required for shard communication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Impact"}),": Cross-shard communication has latency and should be used judiciously"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Serialization Limitations"}),": Data sent between shards must be serializable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Resilience"}),": Always handle connection failures between shards gracefully"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-other-global-objects",children:"Integration with Other Global Objects"}),"\n",(0,s.jsx)(n.p,{children:"TheShard often works with other global objects:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/thenet",children:"TheNet"})}),": For basic network functionality"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theworld",children:"TheWorld"})}),": For accessing world state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theglobalinstance",children:"TheGlobalInstance"})}),": For data that persists across shards"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-World Servers"}),": Managing connections between overworld and caves"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Player Migration"}),": Moving players between worlds seamlessly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Synchronized Events"}),": Keeping world events synchronized across shards"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-Shard Entities"}),": Managing entities that can affect multiple shards"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared Resources"}),": Maintaining shared resource pools across shards"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);