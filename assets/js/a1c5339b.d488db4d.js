"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[79277],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var i=s(96540);const l={},t=i.createContext(l);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(t.Provider,{value:n},e.children)}},69006:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"game-scripts/core-systems/development-tools/debugging/debugtools","title":"Debug Tools","description":"Comprehensive collection of debugging utilities including stack traces, table inspection, and conditional debugging","source":"@site/docs/game-scripts/core-systems/development-tools/debugging/debugtools.md","sourceDirName":"game-scripts/core-systems/development-tools/debugging","slug":"/game-scripts/core-systems/development-tools/debugging/debugtools","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugtools","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"debugtools","title":"Debug Tools","description":"Comprehensive collection of debugging utilities including stack traces, table inspection, and conditional debugging","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Debug Sounds","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugsounds"},"next":{"title":"Inspect","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/inspect"}}');var l=s(74848),t=s(28453);const r={id:"debugtools",title:"Debug Tools",description:"Comprehensive collection of debugging utilities including stack traces, table inspection, and conditional debugging",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="Debug Tools",c={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Enhanced Print Functions",id:"enhanced-print-functions",level:2},{value:"printwrap(msg, ...)",id:"printwrap",level:3},{value:"printsel(inst, ...)",id:"printsel",level:3},{value:"Stack Trace Functions",id:"stack-trace-functions",level:2},{value:"debugstack(start, top, bottom)",id:"debugstack",level:3},{value:"debugstack_oneline(linenum)",id:"debugstack-oneline",level:3},{value:"Table Inspection Functions",id:"table-inspection-functions",level:2},{value:"dumptable(obj, indent, recurse_levels, visit_table, is_terse)",id:"dumptable",level:3},{value:"dumptablequiet(obj, indent, recurse_levels, visit_table)",id:"dumptablequiet",level:3},{value:"tabletodictstring(obj, fn)",id:"tabletodictstring",level:3},{value:"tabletoliststring(obj, fn)",id:"tabletoliststring",level:3},{value:"Conditional Debugging System",id:"conditional-debugging-system",level:2},{value:"EnableDebugOnEntity(thing, items)",id:"enabledebugonentity",level:3},{value:"Dbg(thing, level, ...)",id:"dbg",level:3},{value:"Advanced Debugging Functions",id:"advanced-debugging-functions",level:2},{value:"instrument_userdata(instance)",id:"instrument-userdata",level:3},{value:"debuglocals(level)",id:"debuglocals",level:3},{value:"Specialized Print Functions",id:"specialized-print-functions",level:2},{value:"dprint(...)",id:"dprint",level:3},{value:"IOprint(...)",id:"ioprint",level:3},{value:"eprint(inst, ...)",id:"eprint",level:3},{value:"Table Inspection Utilities",id:"table-inspection-utilities",level:2},{value:"ddump(obj, indent, recurse_levels, root)",id:"ddump",level:3},{value:"dtable(tab, depth)",id:"dtable",level:3},{value:"Visual Debugging",id:"visual-debugging",level:2},{value:"DrawLine(pos1, pos2)",id:"drawline",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"SortByTypeAndValue(a, b)",id:"sortbytypeandvalue",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Global Debugging Flags",id:"global-debugging-flags",level:2},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"debug-tools",children:"Debug Tools"})}),"\n",(0,l.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Build Version"}),(0,l.jsx)(n.th,{children:"Change Date"}),(0,l.jsx)(n.th,{children:"Change Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"676042"}),(0,l.jsx)(n.td,{children:"2025-06-21"}),(0,l.jsx)(n.td,{children:"stable"}),(0,l.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"debugtools"})," module provides a comprehensive suite of debugging utilities including stack trace generation, table inspection, conditional debugging systems, and enhanced print functions. It extends the standard Lua debugging capabilities with game-specific functionality."]}),"\n",(0,l.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Enhanced printing with automatic table handling\nprintwrap("Player data:", player_table)\n\n-- Stack trace generation\nprint(debugstack())\n\n-- Table inspection\ndumptable(game_state, 1, 3)\n\n-- Conditional debugging\nEnableDebugOnEntity(entity, "movement")\nDbg(entity, "movement", "Player moved to:", x, y)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"enhanced-print-functions",children:"Enhanced Print Functions"}),"\n",(0,l.jsx)(n.h3,{id:"printwrap",children:"printwrap(msg, ...)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nEnhanced print function that automatically handles table formatting. If additional arguments are tables, they are dumped using ",(0,l.jsx)(n.code,{children:"dumptable()"}),"."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"msg"})," (string): Message to print"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"..."})," (any): Additional arguments; tables are automatically formatted"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'printwrap("Game state:", {\n    health = 100,\n    hunger = 75,\n    items = {"axe", "pickaxe"}\n})\n'})}),"\n",(0,l.jsx)(n.h3,{id:"printsel",children:"printsel(inst, ...)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nConditional print that only outputs if the specified instance is currently selected (via ",(0,l.jsx)(n.code,{children:"c_sel()"}),")."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inst"})," (Entity): Entity to check selection for"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"..."})," (any): Arguments to print if selected"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Only prints if player is selected in debug mode\nprintsel(player, "Player health:", player.components.health:GetCurrent())\n'})}),"\n",(0,l.jsx)(n.h2,{id:"stack-trace-functions",children:"Stack Trace Functions"}),"\n",(0,l.jsx)(n.h3,{id:"debugstack",children:"debugstack(start, top, bottom)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nGenerates a formatted stack trace with configurable depth and truncation."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," (number): Starting stack level (default: 1)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"top"})," (number): Number of top frames to show (default: 12)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"bottom"})," (number): Number of bottom frames to show (default: 10)"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(string): Formatted stack trace"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'function ErrorHandler()\n    print("Error occurred:")\n    print(debugstack(2, 8, 5))\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"debugstack-oneline",children:"debugstack_oneline(linenum)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nReturns a single line of stack trace information for the specified level."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"linenum"})," (number): Stack level to examine (default: 3)"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(string): Single line stack trace information"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local caller = debugstack_oneline(2)\nprint("Called from:", caller)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"table-inspection-functions",children:"Table Inspection Functions"}),"\n",(0,l.jsx)(n.h3,{id:"dumptable",children:"dumptable(obj, indent, recurse_levels, visit_table, is_terse)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nRecursively prints table contents with configurable indentation and depth limits."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"obj"})," (table): Object to dump"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"indent"})," (number): Indentation level (default: 1)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"recurse_levels"})," (number): Maximum recursion depth (default: 5)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"visit_table"})," (table): Internal tracking for circular references"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"is_terse"})," (boolean): Whether to use minimal output"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"dumptable(player.components, 2, 3)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"dumptablequiet",children:"dumptablequiet(obj, indent, recurse_levels, visit_table)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nQuiet version of ",(0,l.jsx)(n.code,{children:"dumptable"})," that suppresses some output messages."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Same as ",(0,l.jsx)(n.code,{children:"dumptable"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"tabletodictstring",children:"tabletodictstring(obj, fn)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nConverts a table to a compact dictionary-style string representation."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"obj"})," (table): Table to convert"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"fn"})," (function): Optional transformation function for key-value pairs"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(string): Dictionary-style string representation"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local dict_str = tabletodictstring({a=1, b=2, c=3})\n-- Returns: "{ a=1, b=2, c=3 }"\n'})}),"\n",(0,l.jsx)(n.h3,{id:"tabletoliststring",children:"tabletoliststring(obj, fn)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nConverts an array-like table to a list-style string representation."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"obj"})," (table): Array to convert"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"fn"})," (function): Optional transformation function for values"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(string): List-style string representation"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local list_str = tabletoliststring({"apple", "banana", "cherry"})\n-- Returns: "[ apple, banana, cherry ]"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"conditional-debugging-system",children:"Conditional Debugging System"}),"\n",(0,l.jsx)(n.h3,{id:"enabledebugonentity",children:"EnableDebugOnEntity(thing, items)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nEnables conditional debugging on an entity with various filtering options."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"thing"})," (table): Entity to enable debugging on"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"items"})," (string|number|boolean): Debug filter configuration"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Filter Options:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"all"'}),": Enable all debug output"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"on"'}),": Enable debugging without changing filters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"off"'}),": Disable debugging without clearing filters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"false"}),": Completely disable and reset debugging"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"number"}),": Set priority threshold for numeric filtering"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"string"}),": Enable debugging for specific tag"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Enable all debugging\nEnableDebugOnEntity(player, "all")\n\n-- Enable only movement debugging\nEnableDebugOnEntity(player, "movement")\n\n-- Enable debugging for priority < 5\nEnableDebugOnEntity(player, 5)\n\n-- Disable debugging\nEnableDebugOnEntity(player, false)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"dbg",children:"Dbg(thing, level, ...)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nConditional debug print that respects entity-specific debug settings."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"thing"})," (table): Entity to check debug settings for"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"level"})," (string|number|boolean): Debug level or tag"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"..."})," (any): Arguments to print if conditions are met"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Level Types:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"string"}),": Must match enabled tag"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"number"}),": Must be below priority threshold"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"true"}),": Always prints if debugging is enabled"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Tag-based debugging\nDbg(player, "movement", "Player position:", x, y)\n\n-- Priority-based debugging\nDbg(enemy, 3, "High priority: Enemy attacking")\n\n-- Simple debugging\nDbg(item, true, "Item picked up")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-debugging-functions",children:"Advanced Debugging Functions"}),"\n",(0,l.jsx)(n.h3,{id:"instrument-userdata",children:"instrument_userdata(instance)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nCreates a proxy for userdata that prints call stacks for all method calls. Useful for tracing C function calls."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"instance"})," (userdata): Userdata instance to instrument"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(table): Proxy object that logs all method calls"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Instrument TheNet to trace all network calls\nlocal traced_net = instrument_userdata(TheNet)\ntraced_net:SendRPCToServer() -- Will print call stack\n"})}),"\n",(0,l.jsx)(n.h3,{id:"debuglocals",children:"debuglocals(level)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nReturns information about local variables at the specified stack level."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"level"})," (number): Stack level to examine"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(string): Formatted list of local variables and their values"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'function ExamineLocals()\n    local locals_info = debuglocals(1)\n    print("Local variables:", locals_info)\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"specialized-print-functions",children:"Specialized Print Functions"}),"\n",(0,l.jsx)(n.h3,{id:"dprint",children:"dprint(...)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nConditional debug print controlled by global flags. Only prints when cheats are enabled and specific conditions are met."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Control Variables:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"CHEATS_ENABLE_DPRINT"}),": Master enable flag"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"DPRINT_USERNAME"}),": User-specific filtering"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"DPRINT_PRINT_SOURCELINE"}),": Include source line information"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"..."})," (any): Arguments to print"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'CHEATS_ENABLE_DPRINT = true\nDPRINT_PRINT_SOURCELINE = true\ndprint("Debug message") -- Only prints if conditions are met\n'})}),"\n",(0,l.jsx)(n.h3,{id:"ioprint",children:"IOprint(...)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nRaw character output to stdout without processing, controlled by the same flags as ",(0,l.jsx)(n.code,{children:"dprint"}),"."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"..."})," (any): Raw content to output"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"eprint",children:"eprint(inst, ...)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nEntity-specific debug print that only outputs if the instance is the current debug entity."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inst"})," (Entity): Entity to check"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"..."})," (any): Arguments to print"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Only prints if 'inst' is the debug entity\neprint(inst, \"Entity state changed\")\n"})}),"\n",(0,l.jsx)(n.h2,{id:"table-inspection-utilities",children:"Table Inspection Utilities"}),"\n",(0,l.jsx)(n.h3,{id:"ddump",children:"ddump(obj, indent, recurse_levels, root)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nDebug version of ",(0,l.jsx)(n.code,{children:"dumptable"})," that uses ",(0,l.jsx)(n.code,{children:"dprint"})," for conditional output."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Same as ",(0,l.jsx)(n.code,{children:"dumptable"})," with additional ",(0,l.jsx)(n.code,{children:"root"})," parameter for circular reference tracking"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"dtable",children:"dtable(tab, depth)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nPretty-prints a table using the ",(0,l.jsx)(n.code,{children:"inspect"})," library if available."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"tab"})," (table): Table to inspect"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"depth"})," (number): Inspection depth (default: 1)"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"dtable(complex_data_structure, 3)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"visual-debugging",children:"Visual Debugging"}),"\n",(0,l.jsx)(n.h3,{id:"drawline",children:"DrawLine(pos1, pos2)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nDraws a debug line between two positions using the debug render system."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pos1"})," (Vector3): Starting position"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pos2"})," (Vector3): Ending position"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Draw line from player to target\nDrawLine(player:GetPosition(), target:GetPosition())\n"})}),"\n",(0,l.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,l.jsx)(n.h3,{id:"sortbytypeandvalue",children:"SortByTypeAndValue(a, b)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nComparison function for sorting mixed-type values by type first, then by value."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"a"})," (any): First value"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"b"})," (any): Second value"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(boolean): Comparison result"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Setup conditional debugging\nlocal player = GetPlayer()\nEnableDebugOnEntity(player, "all")\n\n-- Setup global debug flags\nCHEATS_ENABLE_DPRINT = true\nDPRINT_PRINT_SOURCELINE = true\n\n-- Enhanced table inspection\nlocal player_data = {\n    health = player.components.health:GetCurrent(),\n    hunger = player.components.hunger:GetCurrent(),\n    position = player:GetPosition()\n}\n\nprintwrap("Player status:", player_data)\n\n-- Conditional entity debugging\nDbg(player, "status", "Health check:", player_data.health)\n\n-- Stack trace example\nfunction TraceableFunction()\n    print("Function called from:")\n    print(debugstack(2, 5, 3))\nend\n\n-- Debug-specific printing\ndprint("Debug mode active")\neprint(player, "Player-specific debug info")\n\n-- Table inspection with various methods\nprint("=== Dictionary format ===")\nprint(tabletodictstring(player_data))\n\nprint("=== Detailed dump ===")\ndumptable(player_data, 1, 2)\n\nprint("=== Compact inspection ===")\ndtable(player_data, 2)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"global-debugging-flags",children:"Global Debugging Flags"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Flag"}),(0,l.jsx)(n.th,{children:"Type"}),(0,l.jsx)(n.th,{children:"Purpose"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CHEATS_ENABLED"})}),(0,l.jsx)(n.td,{children:"boolean"}),(0,l.jsx)(n.td,{children:"Master cheat system enable"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"CHEATS_ENABLE_DPRINT"})}),(0,l.jsx)(n.td,{children:"boolean"}),(0,l.jsx)(n.td,{children:"Enable dprint output"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"DPRINT_USERNAME"})}),(0,l.jsx)(n.td,{children:"string"}),(0,l.jsx)(n.td,{children:"User-specific debug filtering"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"DPRINT_PRINT_SOURCELINE"})}),(0,l.jsx)(n.td,{children:"boolean"}),(0,l.jsx)(n.td,{children:"Include source line in dprint"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugprint",children:"Debug Print"}),": Enhanced printing system"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugmenu",children:"Debug Menu"}),": Interactive debug menu framework"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugcommands",children:"Debug Commands"}),": Command-line debugging interface"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./consolecommands.md",children:"Console Commands"}),": Console command system"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}}}]);