"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1953],{7207:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"api-vanilla/examples/custom-creatures","title":"Creating Custom Creatures","description":"This guide focuses on creating custom creatures for Don\'t Starve Together. Custom creatures can add new challenges, pets, allies, or unique monsters to your mod.","source":"@site/docs/api-vanilla/examples/custom-creatures.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/custom-creatures","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-creatures","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"custom-creatures","title":"Creating Custom Creatures","sidebar_position":5,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Creating Custom Biomes","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-biomes"},"next":{"title":"Creating Custom AI and Brain Behaviors","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-ai"}}');var i=t(4848),o=t(8453);const s={id:"custom-creatures",title:"Creating Custom Creatures",sidebar_position:5,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="Creating Custom Creatures",c={},l=[{value:"Overview of Creature Creation",id:"overview-of-creature-creation",level:2},{value:"Basic Creature Structure",id:"basic-creature-structure",level:2},{value:"Creating Visual Assets",id:"creating-visual-assets",level:2},{value:"Animation Files",id:"animation-files",level:3},{value:"Animation States",id:"animation-states",level:3},{value:"Adding Components",id:"adding-components",level:2},{value:"Health Component",id:"health-component",level:3},{value:"Combat Component",id:"combat-component",level:3},{value:"Locomotor Component",id:"locomotor-component",level:3},{value:"Loot Dropper Component",id:"loot-dropper-component",level:3},{value:"Creating AI with a Brain",id:"creating-ai-with-a-brain",level:2},{value:"Creating a State Graph",id:"creating-a-state-graph",level:2},{value:"Adding Sounds",id:"adding-sounds",level:2},{value:"Special Abilities and Effects",id:"special-abilities-and-effects",level:2},{value:"Area of Effect Attack",id:"area-of-effect-attack",level:3},{value:"Environmental Effects",id:"environmental-effects",level:3},{value:"Spawning Minions",id:"spawning-minions",level:3},{value:"Network Synchronization",id:"network-synchronization",level:2},{value:"Making Your Creature Spawnable",id:"making-your-creature-spawnable",level:2},{value:"Custom Creature Examples",id:"custom-creature-examples",level:2},{value:"Basic Enemy Example",id:"basic-enemy-example",level:3},{value:"Friendly Creature Example",id:"friendly-creature-example",level:3},{value:"See also",id:"see-also",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"creating-custom-creatures",children:"Creating Custom Creatures"})}),"\n",(0,i.jsx)(e.p,{children:"This guide focuses on creating custom creatures for Don't Starve Together. Custom creatures can add new challenges, pets, allies, or unique monsters to your mod."}),"\n",(0,i.jsx)(e.h2,{id:"overview-of-creature-creation",children:"Overview of Creature Creation"}),"\n",(0,i.jsx)(e.p,{children:"Creating a custom creature involves several key components:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Prefab Definition"}),": The basic entity structure"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Visual Assets"}),": Animations, textures, and effects"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Components"}),": Health, combat, locomotion, etc."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"AI Behavior"}),": Brain and behavior tree implementation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"State Graph"}),": Animation states and transitions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Network Code"}),": Client-server synchronization"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"basic-creature-structure",children:"Basic Creature Structure"}),"\n",(0,i.jsx)(e.p,{children:"Here's a skeleton structure for a basic creature:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/custom_creature.lua\nlocal assets = {\n    Asset("ANIM", "anim/custom_creature.zip"),\n}\n\nlocal prefabs = {\n    "meat",\n    "monster_meat",\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Basic setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n    \n    -- Entity properties\n    MakeCharacterPhysics(inst, 50, .5)\n    \n    -- Animation setup\n    inst.AnimState:SetBank("custom_creature")\n    inst.AnimState:SetBuild("custom_creature")\n    inst.AnimState:PlayAnimation("idle")\n    \n    inst:AddTag("monster")\n    inst:AddTag("hostile")\n    inst:AddTag("custom_creature")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Components\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(100)\n    \n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(20)\n    inst.components.combat:SetAttackPeriod(2)\n    inst.components.combat:SetRange(2, 3)\n    \n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:SetLoot({"meat", "monster_meat"})\n    \n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 4\n    inst.components.locomotor.runspeed = 6\n    \n    inst:AddComponent("knownlocations")\n    inst:AddComponent("sleeper")\n    inst:AddComponent("inspectable")\n    \n    -- Brain & State Graph\n    inst:SetBrain(require("brains/custom_creature_brain"))\n    inst:SetStateGraph("SGcustom_creature")\n    \n    return inst\nend\n\nreturn Prefab("custom_creature", fn, assets, prefabs)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"creating-visual-assets",children:"Creating Visual Assets"}),"\n",(0,i.jsx)(e.p,{children:"Visual assets are crucial for your creature. You'll need:"}),"\n",(0,i.jsx)(e.h3,{id:"animation-files",children:"Animation Files"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Create a .scml file in Spriter (or another animation tool)"}),"\n",(0,i.jsx)(e.li,{children:"Export to Don't Starve's animation format"}),"\n",(0,i.jsxs)(e.li,{children:["Place in your mod's ",(0,i.jsx)(e.code,{children:"anim/"})," directory"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Register animations in your prefab\ninst.AnimState:SetBank("custom_creature") -- Bank name\ninst.AnimState:SetBuild("custom_creature") -- Build name\ninst.AnimState:PlayAnimation("idle") -- Animation name\n'})}),"\n",(0,i.jsx)(e.h3,{id:"animation-states",children:"Animation States"}),"\n",(0,i.jsx)(e.p,{children:"Common animation states to implement:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"idle"}),": Default standing animation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"walk"}),", ",(0,i.jsx)(e.code,{children:"run"}),": Movement animations"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"hit"}),": Reaction to being attacked"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"attack"}),": Attack animation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"sleep"}),": Sleeping animation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"death"}),": Death animation"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"adding-components",children:"Adding Components"}),"\n",(0,i.jsx)(e.p,{children:"Essential components for creatures:"}),"\n",(0,i.jsx)(e.h3,{id:"health-component",children:"Health Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("health")\ninst.components.health:SetMaxHealth(150)\ninst.components.health.murdersound = "dontstarve/creatures/myfx/death"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"combat-component",children:"Combat Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("combat")\ninst.components.combat:SetDefaultDamage(20)\ninst.components.combat:SetAttackPeriod(3)\ninst.components.combat:SetRange(3)\ninst.components.combat:SetRetargetFunction(3, RetargetFunction)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"locomotor-component",children:"Locomotor Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("locomotor")\ninst.components.locomotor.walkspeed = 4\ninst.components.locomotor.runspeed = 7\n'})}),"\n",(0,i.jsx)(e.h3,{id:"loot-dropper-component",children:"Loot Dropper Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("lootdropper")\ninst.components.lootdropper:AddRandomLoot("meat", 3)\ninst.components.lootdropper:AddRandomLoot("monster_meat", 1)\ninst.components.lootdropper.numrandomloot = 1\n'})}),"\n",(0,i.jsx)(e.h2,{id:"creating-ai-with-a-brain",children:"Creating AI with a Brain"}),"\n",(0,i.jsx)(e.p,{children:"The brain controls how your creature makes decisions:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- In scripts/brains/custom_creature_brain.lua\nrequire "behaviours/wander"\nrequire "behaviours/chaseandattack"\nrequire "behaviours/panic"\nrequire "behaviours/runaway"\n\nlocal CustomCreatureBrain = Class(Brain, function(self, inst)\n    Brain._ctor(self, inst)\nend)\n\nfunction CustomCreatureBrain:OnStart()\n    local root = PriorityNode(\n        {\n            -- Run away when health is low\n            WhileNode(function() return self.inst.components.health.takingfiredamage end, "OnFire",\n                Panic(self.inst)),\n                \n            -- Attack nearby targets\n            ChaseAndAttack(self.inst, 20, 30),\n            \n            -- Return to home area\n            WhileNode(function() \n                return self.inst.components.knownlocations:GetLocation("home") ~= nil \n            end, "HasHome",\n                Wander(self.inst, function() \n                    return self.inst.components.knownlocations:GetLocation("home") \n                end, 20)),\n            \n            -- Wander randomly\n            Wander(self.inst, function() \n                return self.inst:GetPosition() \n            end, 20)\n        }, .25)\n    \n    self.bt = BT(self.inst, root)\nend\n\nreturn CustomCreatureBrain\n'})}),"\n",(0,i.jsx)(e.h2,{id:"creating-a-state-graph",children:"Creating a State Graph"}),"\n",(0,i.jsx)(e.p,{children:"State graphs define animation states and transitions:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- In scripts/stategraphs/SGcustom_creature.lua\nrequire("stategraphs/commonstates")\n\nlocal events = {\n    EventHandler("attacked", function(inst) \n        if not inst.components.health:IsDead() and not \n            inst.sg:HasStateTag("attack") then\n            inst.sg:GoToState("hit")\n        end\n    end),\n    EventHandler("death", function(inst) inst.sg:GoToState("death") end),\n    EventHandler("doattack", function(inst) \n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("attack") \n        end\n    end),\n}\n\nlocal states = {\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle", true)\n        end,\n    },\n    \n    State{\n        name = "walk",\n        tags = {"moving", "canrotate"},\n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("walk", true)\n            inst.components.locomotor:WalkForward()\n        end,\n    },\n    \n    State{\n        name = "attack",\n        tags = {"attack", "busy"},\n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack")\n        end,\n        timeline = {\n            TimeEvent(15*FRAMES, function(inst) \n                inst.components.combat:DoAttack()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/myfx/attack")\n            end),\n        },\n        events = {\n            EventHandler("animover", function(inst) inst.sg:GoToState("idle") end),\n        },\n    },\n    \n    State{\n        name = "hit",\n        tags = {"busy"},\n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("hit")\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/myfx/hurt")\n            inst.components.locomotor:StopMoving()\n        end,\n        events = {\n            EventHandler("animover", function(inst) inst.sg:GoToState("idle") end),\n        },\n    },\n    \n    State{\n        name = "death",\n        tags = {"busy"},\n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("death")\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/myfx/death")\n            inst.components.locomotor:StopMoving()\n            RemovePhysicsColliders(inst)\n        end,\n    },\n}\n\nCommonStates.AddSleepStates(states)\nCommonStates.AddFrozenStates(states)\n\nreturn StateGraph("custom_creature", states, events, "idle")\n'})}),"\n",(0,i.jsx)(e.h2,{id:"adding-sounds",children:"Adding Sounds"}),"\n",(0,i.jsx)(e.p,{children:"Sound effects enhance your creature's presence:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- In your prefab function\ninst.SoundEmitter:PlaySound("dontstarve/creatures/myfx/idle")\n\n-- In your stategraph\nTimeEvent(15*FRAMES, function(inst) \n    inst.SoundEmitter:PlaySound("dontstarve/creatures/myfx/attack")\nend),\n'})}),"\n",(0,i.jsx)(e.h2,{id:"special-abilities-and-effects",children:"Special Abilities and Effects"}),"\n",(0,i.jsx)(e.p,{children:"You can add special abilities to make your creature unique:"}),"\n",(0,i.jsx)(e.h3,{id:"area-of-effect-attack",children:"Area of Effect Attack"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- In combat component setup\ninst.components.combat:SetAreaDamage(3, 0.8) -- 3 unit radius, 80% damage\n"})}),"\n",(0,i.jsx)(e.h3,{id:"environmental-effects",children:"Environmental Effects"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Create fire or other effects when attacking\nlocal function OnAttack(inst, target)\n    if math.random() < 0.3 then -- 30% chance\n        local fx = SpawnPrefab("firering_fx")\n        fx.Transform:SetPosition(target:GetPosition():Get())\n    end\nend\n\ninst.components.combat:SetOnHitOtherFn(OnAttack)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"spawning-minions",children:"Spawning Minions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local function SpawnMinions(inst, count)\n    count = count or 2\n    for i = 1, count do\n        local angle = math.random() * 2 * PI\n        local offset = Vector3(math.cos(angle), 0, math.sin(angle)) * 2\n        local pos = inst:GetPosition() + offset\n        \n        local minion = SpawnPrefab("custom_minion")\n        minion.Transform:SetPosition(pos:Get())\n        \n        -- Link minion to parent\n        minion.parent = inst\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"network-synchronization",children:"Network Synchronization"}),"\n",(0,i.jsx)(e.p,{children:"For proper client-server synchronization:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Network variables for client/server communication\ninst.num_minions = net_smallbyte(inst.GUID, "custom_creature.num_minions", "num_minions_dirty")\n\n-- Handling in the instance setup\nif not TheWorld.ismastersim then\n    -- Client-side code\n    inst:ListenForEvent("num_minions_dirty", function()\n        -- Update client-side visuals based on num_minions\n    end)\n    return inst\nelse\n    -- Server-side code\n    inst.SpawnMinions = SpawnMinions\n    \n    -- Update the network variable when minions change\n    inst.UpdateMinionCount = function(inst)\n        local count = 0\n        -- Count current minions\n        for k,v in pairs(Ents) do\n            if v.parent == inst and v.prefab == "custom_minion" and not v:IsInLimbo() then\n                count = count + 1\n            end\n        end\n        inst.num_minions:set(count)\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"making-your-creature-spawnable",children:"Making Your Creature Spawnable"}),"\n",(0,i.jsx)(e.p,{children:"Add your creature to the world through spawners:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\nAddPrefabPostInit("world", function(inst)\n    if inst.ismastersim then\n        -- Add creature to monster spawner\n        if inst.components.monstertracker then\n            inst.components.monstertracker:AddSpawn({\n                prefab = "custom_creature",\n                basechance = 0.1,\n                chancemult = {\n                    day = 0.5,  -- Less common during day\n                    dusk = 1.0,\n                    night = 2.0, -- More common at night\n                },\n                biases = {\n                    forest = 1.0,\n                    rocky = 0.8,\n                    savanna = 0.2,\n                },\n                range = {min=2, max=5},  -- How many spawn at once\n            })\n        end\n    end\nend)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"custom-creature-examples",children:"Custom Creature Examples"}),"\n",(0,i.jsx)(e.h3,{id:"basic-enemy-example",children:"Basic Enemy Example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local function fn()\n    local inst = CreateEntity()\n    \n    -- Basic setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n    \n    -- Physics setup\n    MakeCharacterPhysics(inst, 50, .5)\n    \n    -- Animation setup\n    inst.AnimState:SetBank("spider")\n    inst.AnimState:SetBuild("custom_spider")\n    inst.AnimState:PlayAnimation("idle")\n    \n    inst:AddTag("monster")\n    inst:AddTag("hostile")\n    inst:AddTag("scarytoprey")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Components\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(75)\n    \n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(10)\n    inst.components.combat:SetAttackPeriod(3)\n    inst.components.combat:SetRange(2)\n    \n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("monstermeat", 1)\n    inst.components.lootdropper:AddRandomLoot("silk", 0.5)\n    inst.components.lootdropper.numrandomloot = 1\n    \n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 3\n    inst.components.locomotor.runspeed = 5\n    \n    inst:AddComponent("sleeper")\n    inst:AddComponent("inspectable")\n    \n    -- AI and State Graph\n    inst:SetBrain(require("brains/spiderbrain"))\n    inst:SetStateGraph("SGspider")\n    \n    return inst\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"friendly-creature-example",children:"Friendly Creature Example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local function fn()\n    local inst = CreateEntity()\n    \n    -- Basic setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n    \n    -- Physics setup\n    MakeCharacterPhysics(inst, 10, .25)\n    \n    -- Animation setup\n    inst.AnimState:SetBank("rabbit")\n    inst.AnimState:SetBuild("friendly_bunny")\n    inst.AnimState:PlayAnimation("idle")\n    \n    inst:AddTag("animal")\n    inst:AddTag("prey")\n    inst:AddTag("companion")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Components\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(25)\n    \n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(0)\n    \n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("smallmeat", 1)\n    \n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 5\n    inst.components.locomotor.runspeed = 8\n    \n    inst:AddComponent("follower")\n    \n    inst:AddComponent("inspectable")\n    \n    -- Add pettable behavior\n    inst:AddComponent("petleash")\n    inst.components.petleash:SetOnSpawnFn(function(pet, owner)\n        pet.components.follower:SetLeader(owner)\n    end)\n    \n    -- AI and State Graph\n    inst:SetBrain(require("brains/friendlybunnybrain"))\n    inst:SetStateGraph("SGfriendlybunny")\n    \n    return inst\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-ai",children:"Custom AI"})," - For more details on AI systems"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-stategraphs-and-animations",children:"Custom Stategraphs and Animations"})," - For animation systems"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-component",children:"Custom Components"})," - For creature components"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"By following this guide, you can create unique creatures that add new gameplay experiences to your Don't Starve Together mod, from simple critters to complex boss monsters."})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);