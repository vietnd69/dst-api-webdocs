"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2079],{1753:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/world/worldsettings","title":"World Settings API","description":"Configuration options and controls for world generation settings.","source":"@site/docs/api-vanilla/world/worldsettings.md","sourceDirName":"api-vanilla/world","slug":"/api-vanilla/world/worldsettings","permalink":"/dst-api-webdocs/docs/api-vanilla/world/worldsettings","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"worldsettings","title":"World Settings API","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"World Generation","permalink":"/dst-api-webdocs/docs/api-vanilla/world/worldgen"},"next":{"title":"Prefabs","permalink":"/dst-api-webdocs/docs/category/prefabs"}}');var r=t(4848),i=t(8453);const o={id:"worldsettings",title:"World Settings API",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="World Settings API",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Components",id:"key-components",level:2},{value:"World Settings Timer",id:"world-settings-timer",level:3},{value:"World Settings Overrides",id:"world-settings-overrides",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Entity Spawners",id:"entity-spawners",level:3},{value:"Resource Regeneration",id:"resource-regeneration",level:3},{value:"World Events",id:"world-events",level:3},{value:"Settings Synchronization",id:"settings-synchronization",level:2},{value:"Related Systems",id:"related-systems",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"world-settings-api",children:"World Settings API"})}),"\n",(0,r.jsx)(n.p,{children:"Configuration options and controls for world generation settings."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The World Settings API provides functionality for adjusting game parameters that affect world behavior. It allows for customization of spawn rates, regeneration times, and various environmental factors."}),"\n",(0,r.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,r.jsx)(n.h3,{id:"world-settings-timer",children:"World Settings Timer"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"worldsettingstimer"})," component manages timers that are affected by world settings:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add a timer affected by world settings\nlocal timer_name = "my_timer"\nlocal duration = 60 -- seconds\nlocal enabled = true\ninst.components.worldsettingstimer:AddTimer(timer_name, duration, enabled, callback_fn)\n\n-- Start/stop/pause timer\ninst.components.worldsettingstimer:StartTimer(timer_name, duration)\ninst.components.worldsettingstimer:StopTimer(timer_name)\ninst.components.worldsettingstimer:PauseTimer(timer_name)\ninst.components.worldsettingstimer:ResumeTimer(timer_name)\n\n-- Check timer status\nlocal time_left = inst.components.worldsettingstimer:GetTimeLeft(timer_name)\nlocal is_active = inst.components.worldsettingstimer:ActiveTimerExists(timer_name)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"world-settings-overrides",children:"World Settings Overrides"}),"\n",(0,r.jsx)(n.p,{children:"The game provides systems to override default settings based on player-selected difficulty:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Applying world settings overrides\nWorldSettings_Spawner_SpawnDelay(inst, startdelay, enabled)\nWorldSettings_ChildSpawner_SpawnPeriod(inst, spawnperiod, enabled)\nWorldSettings_ChildSpawner_RegenPeriod(inst, regenperiod, enabled)\nWorldSettings_Pickable_RegenTime(inst, regentime, enabled)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsx)(n.h3,{id:"entity-spawners",children:"Entity Spawners"}),"\n",(0,r.jsx)(n.p,{children:"Control spawn rates and behaviors for entities in the world:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Configure a beefalo spawner with world settings\nlocal spawner = inst.components.childspawner\nWorldSettings_ChildSpawner_SpawnPeriod(inst, TUNING.BEEFALO_SPAWN_PERIOD, true)\nWorldSettings_ChildSpawner_RegenPeriod(inst, TUNING.BEEFALO_REGEN_PERIOD, true)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"resource-regeneration",children:"Resource Regeneration"}),"\n",(0,r.jsx)(n.p,{children:"Adjust how quickly resources regenerate:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Configure berry bush regrowth with world settings\nlocal pickable = inst.components.pickable\nWorldSettings_Pickable_RegenTime(inst, TUNING.BERRY_REGROW_TIME, true)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"world-events",children:"World Events"}),"\n",(0,r.jsx)(n.p,{children:"Configure timing for world events like boss appearances:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Set up timer for seasonal giant appearance\nlocal worldsettingstimer = TheWorld.components.worldsettingstimer\nworldsettingstimer:AddTimer("bearger_spawn", TUNING.BEARGER_SPAWN_DELAY, true, OnBeargerTimerDone)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"settings-synchronization",children:"Settings Synchronization"}),"\n",(0,r.jsx)(n.p,{children:"For dedicated servers, settings can be synchronized across shards:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Synchronize settings from master shard to secondary shards\nShard_SyncWorldSettings(world_id, is_resync)\n\n-- Apply synchronized settings from master shard\nWorldSettings_Overrides.Sync[option](value)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Customize Menu"}),": Frontend interface for selecting world settings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"World Generation"}),": Initial world creation based on settings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tuning Variables"}),": Default values for game parameters"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);