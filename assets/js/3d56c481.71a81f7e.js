"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[46955],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var s=t(96540);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}},42212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"game-scripts/core-systems/system-core/runtime/update","title":"Update System","description":"Core update loop system that handles game simulation timing and component updates","source":"@site/docs/game-scripts/core-systems/system-core/runtime/update.md","sourceDirName":"game-scripts/core-systems/system-core/runtime","slug":"/game-scripts/core-systems/system-core/runtime/update","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/runtime/update","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"update","title":"Update System","description":"Core update loop system that handles game simulation timing and component updates","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Runtime System Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/runtime/"},"next":{"title":"User Interface Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/"}}');var i=t(74848),a=t(28453);const l={id:"update",title:"Update System",description:"Core update loop system that handles game simulation timing and component updates",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="Update System",r={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Update Types",id:"update-types",level:2},{value:"Wall Time Updates",id:"wall-time-updates",level:3},{value:"WallUpdate(dt)",id:"wall-update",level:4},{value:"Simulation Time Updates",id:"simulation-time-updates",level:3},{value:"Update(dt)",id:"main-update",level:4},{value:"Static Updates",id:"static-updates",level:3},{value:"StaticUpdate(dt)",id:"static-update",level:4},{value:"Advanced Update Functions",id:"advanced-update-functions",level:2},{value:"PostUpdate(dt)",id:"post-update",level:3},{value:"PostPhysicsWallUpdate(dt)",id:"post-physics-wall-update",level:3},{value:"LongUpdate(dt, ignore_player)",id:"long-update",level:3},{value:"Component Registration Functions",id:"component-registration-functions",level:2},{value:"RegisterStaticComponentUpdate(classname, fn)",id:"register-static-component-update",level:3},{value:"RegisterStaticComponentLongUpdate(classname, fn)",id:"register-static-component-long-update",level:3},{value:"Update Registration",id:"update-registration",level:2},{value:"Component Update Registration",id:"component-update-registration",level:3},{value:"Update Flow",id:"update-flow",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Profiling",id:"profiling",level:3},{value:"Update Frequency",id:"update-frequency",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Component Update Pattern",id:"component-update-pattern",level:3},{value:"Wall Update Pattern",id:"wall-update-pattern",level:3},{value:"Related Systems",id:"related-systems",level:2},{value:"Constants",id:"constants",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"update-system",children:"Update System"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Update System"})," manages all update loops in Don't Starve Together, providing different timing mechanisms for various game systems. It handles wall time updates (real-time), simulation time updates (game time), static updates (paused server), and long updates (time skipping)."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Register a component for updates\nlocal function StartUpdating(self)\n    StartUpdatingComponent(self, self.inst)\nend\n\n-- Component update method\nfunction MyComponent:OnUpdate(dt)\n    -- This runs every simulation tick\n    self.timer = self.timer + dt\nend\n\n-- Wall update method (always runs)\nfunction MyComponent:OnWallUpdate(dt)\n    -- This runs on real time, even when paused\n    self.realtime_timer = self.realtime_timer + dt\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"update-types",children:"Update Types"}),"\n",(0,i.jsx)(n.h3,{id:"wall-time-updates",children:"Wall Time Updates"}),"\n",(0,i.jsx)(n.p,{children:"Wall time updates run continuously based on real time, not affected by game pause or simulation speed."}),"\n",(0,i.jsx)(n.h4,{id:"wall-update",children:"WallUpdate(dt)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nMain wall time update function that runs regardless of server pause state. Handles input, frontend updates, and camera updates."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dt"})," (number): Delta time in seconds since last wall update"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Processes RPC and user command queues"}),"\n",(0,i.jsx)(n.li,{children:"Updates wall updating components"}),"\n",(0,i.jsx)(n.li,{children:"Updates mixer, camera, and frontend"}),"\n",(0,i.jsx)(n.li,{children:"Handles input processing"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Components can register for wall updates\nfunction MyComponent:StartWallUpdating()\n    StartWallUpdatingComponent(self, self.inst)\nend\n\nfunction MyComponent:OnWallUpdate(dt)\n    -- Always runs, even when game is paused\n    self.wall_timer = self.wall_timer + dt\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"simulation-time-updates",children:"Simulation Time Updates"}),"\n",(0,i.jsx)(n.p,{children:"Simulation updates run on game time and are paused when the server is paused."}),"\n",(0,i.jsx)(n.h4,{id:"main-update",children:"Update(dt)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nMain simulation update loop that processes game logic. Only runs when server is not paused."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dt"})," (number): Delta time in seconds since last simulation update"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Runs scheduler tasks"}),"\n",(0,i.jsx)(n.li,{children:"Updates all registered components"}),"\n",(0,i.jsx)(n.li,{children:"Updates state graphs and AI brains"}),"\n",(0,i.jsx)(n.li,{children:"Manages component update registration"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Register component for simulation updates\nfunction MyComponent:StartUpdating()\n    StartUpdatingComponent(self, self.inst)\nend\n\nfunction MyComponent:OnUpdate(dt)\n    -- Only runs when game is not paused\n    self.game_timer = self.game_timer + dt\n    if self.game_timer > 5 then\n        self:DoSomething()\n        self.game_timer = 0\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"static-updates",children:"Static Updates"}),"\n",(0,i.jsx)(n.p,{children:"Static updates run only when the server is paused, allowing certain systems to continue functioning."}),"\n",(0,i.jsx)(n.h4,{id:"static-update",children:"StaticUpdate(dt)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nUpdates static components when the server is paused. Used for systems that need to continue running during pause."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dt"})," (number): Always 0 for static updates"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Register for static updates\nfunction MyComponent:StartStaticUpdating()\n    StartStaticUpdatingComponent(self, self.inst)\nend\n\nfunction MyComponent:OnStaticUpdate(dt)\n    -- Runs when server is paused, dt is always 0\n    if self.should_continue_when_paused then\n        self:ContinueOperation()\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-update-functions",children:"Advanced Update Functions"}),"\n",(0,i.jsx)(n.h3,{id:"post-update",children:"PostUpdate(dt)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRuns after the main update loop completes. Used for cleanup operations and final processing."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dt"})," (number): Delta time in seconds"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Updates emitter manager"}),"\n",(0,i.jsx)(n.li,{children:"Runs update looper post-update"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"post-physics-wall-update",children:"PostPhysicsWallUpdate(dt)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRuns after physics wall updates complete. Currently handles walkable platform manager updates."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dt"})," (number): Delta time in seconds"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"long-update",children:"LongUpdate(dt, ignore_player)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSpecial update function for advancing simulation over long periods (cave transitions, night skipping)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dt"})," (number): Large delta time value representing the time skip"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ignore_player"})," (boolean): Whether to skip updating player-related entities"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Skip 8 hours of game time\nTheWorld:LongUpdate(TUNING.TOTAL_DAY_TIME / 3, true)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"component-registration-functions",children:"Component Registration Functions"}),"\n",(0,i.jsx)(n.h3,{id:"register-static-component-update",children:"RegisterStaticComponentUpdate(classname, fn)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a static update function for a component class."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"classname"})," (string): Name of the component class"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Update function to call"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'RegisterStaticComponentUpdate("mycomponent", function(dt)\n    -- Static update logic for all instances\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"register-static-component-long-update",children:"RegisterStaticComponentLongUpdate(classname, fn)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a long update function for a component class."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"classname"})," (string): Name of the component class"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Long update function to call"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'RegisterStaticComponentLongUpdate("mycomponent", function(dt)\n    -- Long update logic for time skipping\nend)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"update-registration",children:"Update Registration"}),"\n",(0,i.jsx)(n.h3,{id:"component-update-registration",children:"Component Update Registration"}),"\n",(0,i.jsx)(n.p,{children:"Components can register for different types of updates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- For simulation updates\nStartUpdatingComponent(component, entity)\nStopUpdatingComponent(component, entity)\n\n-- For wall time updates\nStartWallUpdatingComponent(component, entity)\nStopWallUpdatingComponent(component, entity)\n\n-- For static updates (paused server)\nStartStaticUpdatingComponent(component, entity)\nStopStaticUpdatingComponent(component, entity)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"update-flow",children:"Update Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wall Update"}),": Always runs first, handles input and UI"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static Update"}),": Runs when paused, for special systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Main Update"}),": Runs when not paused, handles game logic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Post Update"}),": Cleanup after main update"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Post Physics Wall Update"}),": Final physics-related updates"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"profiling",children:"Profiling"}),"\n",(0,i.jsx)(n.p,{children:"The update system includes built-in profiling:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'TheSim:ProfilerPush("section_name")\n-- Update operations\nTheSim:ProfilerPop()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"update-frequency",children:"Update Frequency"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wall Updates"}),": Run at display framerate (typically 60 FPS)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simulation Updates"}),": Run at game tick rate (15 Hz by default)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static Updates"}),": Only when server is paused"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Long Updates"}),": Called manually for time skipping"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"component-update-pattern",children:"Component Update Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self.timer = 0\n    self:StartUpdating()\nend)\n\nfunction MyComponent:OnUpdate(dt)\n    self.timer = self.timer + dt\n    if self.timer >= 1.0 then  -- Every second\n        self:DoPeriodicAction()\n        self.timer = 0\n    end\nend\n\nfunction MyComponent:StartUpdating()\n    StartUpdatingComponent(self, self.inst)\nend\n\nfunction MyComponent:StopUpdating()\n    StopUpdatingComponent(self, self.inst)\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"wall-update-pattern",children:"Wall Update Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"function MyComponent:OnWallUpdate(dt)\n    -- Real-time operations (UI, input, etc.)\n    self.realtime_accumulator = self.realtime_accumulator + dt\n    \n    if self.should_update_ui then\n        self:UpdateUIElements()\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./scheduler.md",children:(0,i.jsx)(n.strong,{children:"Scheduler"})}),": Task scheduling system used within updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../stategraphs/stategraph.md",children:(0,i.jsx)(n.strong,{children:"StateGraphs"})}),": Updated during main update loop"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./brain.md",children:(0,i.jsx)(n.strong,{children:"Brain"})}),": AI brains updated during main update loop"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./entityscript.md",children:(0,i.jsx)(n.strong,{children:"Components"})}),": Component system that receives update calls"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(n.p,{children:"The update system uses these key timing constants:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FRAMES_PER_TICK"}),": Number of wall frames per simulation tick"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TICK_TIME"}),": Duration of one simulation tick in seconds"]}),"\n",(0,i.jsx)(n.li,{children:"Game runs at 15 simulation ticks per second by default"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);