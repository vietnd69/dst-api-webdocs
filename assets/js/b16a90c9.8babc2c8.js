"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2668],{2422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"api-vanilla/core/ui-system","title":"UI System","description":"Don\'t Starve Together uses a hierarchical widget-based UI system to create and manage user interfaces. This system allows for creating complex UIs with nested elements, event handling, animations, and interactions.","source":"@site/docs/api-vanilla/core/ui-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/ui-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/ui-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"ui-system","title":"UI System","sidebar_position":8},"sidebar":"docs","previous":{"title":"Remote Procedure Call System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/rpc-system"},"next":{"title":"Common Widgets","permalink":"/dst-api-webdocs/docs/api-vanilla/core/widgets"}}');var s=t(4848),l=t(8453);const d={id:"ui-system",title:"UI System",sidebar_position:8},a="UI System",o={},r=[{value:"Widget Hierarchy",id:"widget-hierarchy",level:2},{value:"Base Widget Class",id:"base-widget-class",level:2},{value:"Key Widget Properties",id:"key-widget-properties",level:3},{value:"Key Widget Methods",id:"key-widget-methods",level:3},{value:"Common Widget Types",id:"common-widget-types",level:2},{value:"Text",id:"text",level:3},{value:"Image",id:"image",level:3},{value:"Button",id:"button",level:3},{value:"ImageButton",id:"imagebutton",level:3},{value:"UIAnim",id:"uianim",level:3},{value:"NineSlice",id:"nineslice",level:3},{value:"Screen",id:"screen",level:3},{value:"Input Handling",id:"input-handling",level:2},{value:"Focus Management",id:"focus-management",level:2},{value:"Animations and Transitions",id:"animations-and-transitions",level:2},{value:"Creating Custom Widgets",id:"creating-custom-widgets",level:2},{value:"Templates and Common Patterns",id:"templates-and-common-patterns",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example: Complete UI Screen",id:"example-complete-ui-screen",level:2},{value:"UI Debugging",id:"ui-debugging",level:2},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Widget Lifecycle",id:"widget-lifecycle",level:3},{value:"Screen Management",id:"screen-management",level:3},{value:"Custom Input Handling",id:"custom-input-handling",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ui-system",children:"UI System"})}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together uses a hierarchical widget-based UI system to create and manage user interfaces. This system allows for creating complex UIs with nested elements, event handling, animations, and interactions."}),"\n",(0,s.jsx)(n.h2,{id:"widget-hierarchy",children:"Widget Hierarchy"}),"\n",(0,s.jsx)(n.p,{children:"The UI system in DST is built on a parent-child hierarchy of widgets:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Every UI element inherits from the base ",(0,s.jsx)(n.code,{children:"Widget"})," class"]}),"\n",(0,s.jsx)(n.li,{children:"Widgets can contain other widgets as children"}),"\n",(0,s.jsx)(n.li,{children:"Events and rendering flow through the hierarchy"}),"\n",(0,s.jsx)(n.li,{children:"Focus and input handling are managed through this hierarchy"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic widget hierarchy example\nlocal root = Widget("root")\nlocal panel = root:AddChild(Widget("panel"))\nlocal button = panel:AddChild(ImageButton("images/ui.xml", "button.tex", "button_focus.tex"))\n'})}),"\n",(0,s.jsx)(n.h2,{id:"base-widget-class",children:"Base Widget Class"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Widget"})," class is the foundation of all UI elements:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Widget = require "widgets/widget"\n\n-- Creating a basic widget\nlocal my_widget = Widget("my_widget")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"key-widget-properties",children:"Key Widget Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"children"})}),(0,s.jsx)(n.td,{children:"Table of child widgets"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"parent"})}),(0,s.jsx)(n.td,{children:"Reference to parent widget"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"focus"})}),(0,s.jsx)(n.td,{children:"Whether widget has input focus"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"enabled"})}),(0,s.jsx)(n.td,{children:"Whether widget is enabled"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"shown"})}),(0,s.jsx)(n.td,{children:"Whether widget is visible"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"key-widget-methods",children:"Key Widget Methods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Positioning and scaling\nwidget:SetPosition(x, y, z)       -- Set position relative to parent\nwidget:SetScale(scale)            -- Set scale (1 is normal size)\nwidget:SetRotation(angle)         -- Set rotation in degrees\n\n-- Visibility\nwidget:Show()                     -- Make widget visible\nwidget:Hide()                     -- Make widget invisible\n\n-- Hierarchy\nwidget:AddChild(child_widget)     -- Add a child widget\nwidget:RemoveChild(child_widget)  -- Remove a child widget\nwidget:KillAllChildren()          -- Remove all children\n\n-- Focus\nwidget:SetFocus()                 -- Give this widget focus\nwidget:ClearFocus()               -- Remove focus from this widget\n\n-- Lifecycle\nwidget:Kill()                     -- Destroy the widget and all children\nwidget:StartUpdating()            -- Make widget receive update calls\nwidget:StopUpdating()             -- Stop widget from receiving updates\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-widget-types",children:"Common Widget Types"}),"\n",(0,s.jsx)(n.p,{children:"DST provides many specialized widget types for different UI needs:"}),"\n",(0,s.jsx)(n.h3,{id:"text",children:"Text"}),"\n",(0,s.jsx)(n.p,{children:"Displays text with various formatting options:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Text = require "widgets/text"\n\nlocal my_text = Text(NEWFONT, 30, "Hello World")\nmy_text:SetColour(1, 1, 1, 1)  -- RGBA (white)\nmy_text:SetString("New text")  -- Change text content\n'})}),"\n",(0,s.jsx)(n.h3,{id:"image",children:"Image"}),"\n",(0,s.jsx)(n.p,{children:"Displays images from texture atlases:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Image = require "widgets/image"\n\nlocal my_image = Image("images/ui.xml", "panel.tex")\nmy_image:SetSize(100, 100)\nmy_image:SetTint(1, 0.8, 0.8, 1)  -- Apply a reddish tint\n'})}),"\n",(0,s.jsx)(n.h3,{id:"button",children:"Button"}),"\n",(0,s.jsx)(n.p,{children:"Base class for interactive buttons:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Button = require "widgets/button"\n\nlocal my_button = Button()\nmy_button:SetText("Click Me")\nmy_button:SetOnClick(function() print("Button clicked!") end)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"imagebutton",children:"ImageButton"}),"\n",(0,s.jsx)(n.p,{children:"Buttons with different images for different states:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local ImageButton = require "widgets/imagebutton"\n\nlocal my_button = ImageButton(\n    "images/ui.xml",      -- Atlas\n    "button.tex",         -- Normal state\n    "button_focus.tex",   -- Focus state\n    "button_disabled.tex" -- Disabled state\n)\n\nmy_button:SetOnClick(function() print("Image button clicked!") end)\nmy_button:SetScale(1.2)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"uianim",children:"UIAnim"}),"\n",(0,s.jsx)(n.p,{children:"Displays animated UI elements:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local UIAnim = require "widgets/uianim"\n\nlocal my_anim = UIAnim()\nmy_anim:GetAnimState():SetBank("portal_scene")\nmy_anim:GetAnimState():SetBuild("portal_scene2")\nmy_anim:GetAnimState():PlayAnimation("portal_idle", true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"nineslice",children:"NineSlice"}),"\n",(0,s.jsx)(n.p,{children:"Creates expandable panels with fixed corners:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local NineSlice = require "widgets/nineslice"\n\nlocal panel = NineSlice(\n    "images/ui.xml",        -- Atlas\n    "panel_nine_slice.tex", -- Texture\n    24                      -- Margin size\n)\npanel:SetSize(200, 150)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"screen",children:"Screen"}),"\n",(0,s.jsx)(n.p,{children:"Base class for full screens in the game:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Screen = require "widgets/screen"\n\nMyScreen = Class(Screen, function(self)\n    Screen._ctor(self, "MyScreen")\n    \n    -- Create UI elements\n    self.bg = self:AddChild(Image("images/bg.xml", "bg.tex"))\n    self.title = self:AddChild(Text(TITLEFONT, 50, "My Screen"))\n    \n    -- Set default focus\n    self.default_focus = self.title\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"input-handling",children:"Input Handling"}),"\n",(0,s.jsx)(n.p,{children:"Widgets can handle various input events:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Mouse events\nfunction MyWidget:OnMouseButton(button, down, x, y)\n    if button == MOUSEBUTTON_LEFT and down then\n        print("Left mouse button pressed")\n        return true -- Consume the event\n    end\n    return false -- Pass event to other widgets\nend\n\n-- Keyboard events\nfunction MyWidget:OnRawKey(key, down)\n    if key == KEY_SPACE and down then\n        print("Space key pressed")\n        return true\n    end\n    return false\nend\n\n-- Controller events\nfunction MyWidget:OnControl(control, down)\n    if control == CONTROL_ACCEPT and down then\n        print("Accept button pressed")\n        return true\n    end\n    return false\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"focus-management",children:"Focus Management"}),"\n",(0,s.jsx)(n.p,{children:"The focus system determines which widget receives input:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Set focus direction for controller/keyboard navigation\nwidget:SetFocusChangeDir(MOVE_UP, other_widget)\nwidget:SetFocusChangeDir(MOVE_DOWN, another_widget)\nwidget:SetFocusChangeDir(MOVE_LEFT, left_widget)\nwidget:SetFocusChangeDir(MOVE_RIGHT, right_widget)\n\n-- Set and clear focus\nwidget:SetFocus()\nwidget:ClearFocus()\n\n-- Focus callbacks\nfunction MyWidget:OnGainFocus()\n    self:SetScale(1.1) -- Grow when focused\nend\n\nfunction MyWidget:OnLoseFocus()\n    self:SetScale(1.0) -- Normal size when not focused\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"animations-and-transitions",children:"Animations and Transitions"}),"\n",(0,s.jsx)(n.p,{children:"Widgets support various animations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Move animation\nwidget:MoveTo(\n    Vector3(0, 0, 0),   -- Start position\n    Vector3(100, 0, 0), -- End position\n    0.5,                -- Duration in seconds\n    function()          -- Callback when complete\n        print("Move animation finished")\n    end\n)\n\n-- Scale animation\nwidget:ScaleTo(\n    Vector3(1, 1, 1),   -- Start scale\n    Vector3(1.5, 1.5, 1.5), -- End scale\n    0.3,                -- Duration\n    function()          -- Callback\n        print("Scale animation finished")\n    end\n)\n\n-- Rotate animation\nwidget:RotateTo(\n    0,      -- Start angle\n    360,    -- End angle\n    1.0,    -- Duration\n    nil,    -- Callback\n    false   -- Don\'t loop\n)\n\n-- Color tint animation\nwidget:TintTo(\n    {1, 1, 1, 1},   -- Start color (RGBA)\n    {1, 0, 0, 1},   -- End color (red)\n    0.5             -- Duration\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-custom-widgets",children:"Creating Custom Widgets"}),"\n",(0,s.jsx)(n.p,{children:"You can create custom widgets by extending existing ones:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local MyCustomWidget = Class(Widget, function(self)\n    Widget._ctor(self, "MyCustomWidget")\n    \n    -- Add components\n    self.bg = self:AddChild(Image("images/ui.xml", "panel.tex"))\n    self.text = self:AddChild(Text(NEWFONT, 30, "Custom Widget"))\n    \n    -- Set layout\n    self.bg:SetSize(200, 100)\n    self.text:SetPosition(0, 10)\nend)\n\n-- Add custom methods\nfunction MyCustomWidget:SetContent(content)\n    self.text:SetString(content)\nend\n\n-- Use the custom widget\nlocal my_widget = MyCustomWidget()\nmy_widget:SetContent("Hello World")\nroot:AddChild(my_widget)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"templates-and-common-patterns",children:"Templates and Common Patterns"}),"\n",(0,s.jsx)(n.p,{children:"DST provides many templates for common UI elements:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local TEMPLATES = require "widgets/templates"\n\n-- Create common UI elements\nlocal background = TEMPLATES.BackgroundTint(0.75)\nlocal panel = TEMPLATES.RectangleWindow(400, 300)\nlocal button = TEMPLATES.StandardButton(function() print("Clicked") end, "Click Me")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cleanup"}),": Always call ",(0,s.jsx)(n.code,{children:"widget:Kill()"})," when removing widgets to prevent memory leaks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Focus Management"}),": Set up proper focus navigation for controller support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scaling"}),": Use ",(0,s.jsx)(n.code,{children:"SetScaleMode"})," appropriately for different screen resolutions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Minimize the number of widgets and avoid creating them frequently"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Handling"}),": Return ",(0,s.jsx)(n.code,{children:"true"})," from event handlers to prevent event propagation when appropriate"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-complete-ui-screen",children:"Example: Complete UI Screen"}),"\n",(0,s.jsx)(n.p,{children:"Here's an example of a complete UI screen:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Screen = require "widgets/screen"\nlocal Widget = require "widgets/widget"\nlocal Text = require "widgets/text"\nlocal Image = require "widgets/image"\nlocal ImageButton = require "widgets/imagebutton"\nlocal TEMPLATES = require "widgets/templates"\n\nMyCustomScreen = Class(Screen, function(self)\n    Screen._ctor(self, "MyCustomScreen")\n    \n    -- Create root panel\n    self.root = self:AddChild(Widget("root"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add background\n    self.bg = self.root:AddChild(TEMPLATES.BackgroundTint())\n    \n    -- Add panel\n    self.panel = self.root:AddChild(Image("images/ui.xml", "panel.tex"))\n    self.panel:SetSize(500, 400)\n    \n    -- Add title\n    self.title = self.panel:AddChild(Text(TITLEFONT, 40, "My Custom Screen"))\n    self.title:SetPosition(0, 150)\n    \n    -- Add content\n    self.content = self.panel:AddChild(Text(BODYFONT, 25, "This is a custom screen example."))\n    self.content:SetPosition(0, 50)\n    \n    -- Add buttons\n    self.ok_button = self.panel:AddChild(ImageButton(\n        "images/ui.xml", \n        "button.tex", \n        "button_focus.tex", \n        "button_disabled.tex"\n    ))\n    self.ok_button:SetPosition(0, -120)\n    self.ok_button:SetText("OK")\n    self.ok_button:SetOnClick(function() TheFrontEnd:PopScreen() end)\n    \n    -- Set default focus\n    self.default_focus = self.ok_button\nend)\n\n-- Show the screen\nTheFrontEnd:PushScreen(MyCustomScreen())\n'})}),"\n",(0,s.jsx)(n.h2,{id:"ui-debugging",children:"UI Debugging"}),"\n",(0,s.jsx)(n.p,{children:"To debug UI layouts:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"widget:GetLocalPosition()"})," and ",(0,s.jsx)(n.code,{children:"widget:GetWorldPosition()"})," to check positions"]}),"\n",(0,s.jsx)(n.li,{children:"The game includes debug rendering that can be enabled with console commands"}),"\n",(0,s.jsx)(n.li,{children:"Add temporary colored backgrounds to visualize widget boundaries"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"print"})," statements to track focus and event propagation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,s.jsx)(n.h3,{id:"widget-lifecycle",children:"Widget Lifecycle"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Creation"}),": Widget is instantiated with ",(0,s.jsx)(n.code,{children:"Widget()"})," or a derived class"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Addition to Hierarchy"}),": Widget is added to a parent with ",(0,s.jsx)(n.code,{children:"parent:AddChild()"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Updates"}),": If enabled with ",(0,s.jsx)(n.code,{children:"widget:StartUpdating()"}),", widget receives update calls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Destruction"}),": Widget is destroyed with ",(0,s.jsx)(n.code,{children:"widget:Kill()"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"screen-management",children:"Screen Management"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"TheFrontEnd"})," object manages screen navigation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Push a new screen onto the stack\nTheFrontEnd:PushScreen(MyScreen())\n\n-- Pop the top screen\nTheFrontEnd:PopScreen()\n\n-- Replace all screens with a new one\nTheFrontEnd:SetScreen(MyScreen())\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-input-handling",children:"Custom Input Handling"}),"\n",(0,s.jsx)(n.p,{children:"For complex input handling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Add a global input handler\nself.input_handler = TheInput:AddGeneralHandler(function(key, down)\n    if key == KEY_ESCAPE and not down then\n        TheFrontEnd:PopScreen()\n        return true\n    end\n    return false\nend)\n\n-- Remove the handler when done\nTheInput:RemoveHandler(self.input_handler)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var i=t(6540);const s={},l=i.createContext(s);function d(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);