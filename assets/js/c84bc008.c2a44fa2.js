"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7901],{1697:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/core/client-server-synchronization","title":"Client-Server Synchronization","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/core/client-server-synchronization.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/client-server-synchronization","permalink":"/dst-api-webdocs/docs/api-vanilla/core/client-server-synchronization","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"client-server-synchronization","title":"Client-Server Synchronization","sidebar_position":8,"last_updated":"2023-07-06T00:00:00.000Z"}}');var a=t(4848),s=t(8453);const r={id:"client-server-synchronization",title:"Client-Server Synchronization",sidebar_position:8,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Client-Server Synchronization",o={},c=[{value:"Synchronization Fundamentals",id:"synchronization-fundamentals",level:2},{value:"Network Variables",id:"network-variables",level:2},{value:"Basic NetVar Usage",id:"basic-netvar-usage",level:3},{value:"Available NetVar Types",id:"available-netvar-types",level:3},{value:"Responding to NetVar Changes",id:"responding-to-netvar-changes",level:3},{value:"Replica Components",id:"replica-components",level:2},{value:"Creating a Replica Component",id:"creating-a-replica-component",level:3},{value:"Linking Server Component with Replica",id:"linking-server-component-with-replica",level:3},{value:"Registering the Replica",id:"registering-the-replica",level:3},{value:"Bidirectional Communication with RPCs",id:"bidirectional-communication-with-rpcs",level:2},{value:"Client-to-Server Actions",id:"client-to-server-actions",level:3},{value:"Server-to-Client Notifications",id:"server-to-client-notifications",level:3},{value:"Common Synchronization Patterns",id:"common-synchronization-patterns",level:2},{value:"Health Synchronization",id:"health-synchronization",level:3},{value:"Inventory Item Synchronization",id:"inventory-item-synchronization",level:3},{value:"Animation State Synchronization",id:"animation-state-synchronization",level:3},{value:"Optimizing Synchronization",id:"optimizing-synchronization",level:2},{value:"Update Frequency Control",id:"update-frequency-control",level:3},{value:"Prioritizing Critical Data",id:"prioritizing-critical-data",level:3},{value:"Handling Synchronization Edge Cases",id:"handling-synchronization-edge-cases",level:2},{value:"Late-Joining Players",id:"late-joining-players",level:3},{value:"Handling Disconnections",id:"handling-disconnections",level:3},{value:"Recovering from Desync",id:"recovering-from-desync",level:3},{value:"Complete Example: Synchronized Custom Entity",id:"complete-example-synchronized-custom-entity",level:2},{value:"See also",id:"see-also",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"client-server-synchronization",children:"Client-Server Synchronization"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"API Version: 619045"})}),"\n",(0,a.jsx)(e.p,{children:"Client-server synchronization is a critical aspect of developing multiplayer mods for Don't Starve Together. This guide covers techniques and best practices for keeping game state synchronized between server and clients."}),"\n",(0,a.jsx)(e.h2,{id:"synchronization-fundamentals",children:"Synchronization Fundamentals"}),"\n",(0,a.jsx)(e.p,{children:"In Don't Starve Together's client-server architecture:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["The ",(0,a.jsx)(e.strong,{children:"server"}),' is authoritative and maintains the "true" game state']}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Clients"})," receive updates from the server and predict some behaviors"]}),"\n",(0,a.jsxs)(e.li,{children:["Synchronization happens through ",(0,a.jsx)(e.strong,{children:"network variables"})," and ",(0,a.jsx)(e.strong,{children:"RPCs"})]}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:"-- This diagram represents data flow in DST's network model\n-- Server (Authoritative State)\n--    \u2191\u2193\n-- Network Layer (NetVars, RPCs)\n--    \u2191\u2193\n-- Clients (Local Representation)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"network-variables",children:"Network Variables"}),"\n",(0,a.jsx)(e.p,{children:"Network variables (NetVars) are the primary method for synchronizing entity state from server to clients."}),"\n",(0,a.jsx)(e.h3,{id:"basic-netvar-usage",children:"Basic NetVar Usage"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- In entity prefab definition (server-side)\nfunction MakeSyncedEntity()\n    local inst = CreateEntity()\n    \n    -- Add network component (required for synchronization)\n    inst.entity:AddNetwork()\n    \n    -- Add networked variables\n    inst.myvalue = net_float(inst.GUID, "myentity.myvalue", "myvaluedirty")\n    inst.mystate = net_string(inst.GUID, "myentity.mystate", "mystatedirty")\n    \n    -- Initial values\n    inst.myvalue:set(100)\n    inst.mystate:set("idle")\n    \n    -- Mark entity as ready for replication\n    inst.entity:SetPristine()\n    \n    -- Server-only components below\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add server-only components\n    inst:AddComponent("health")\n    \n    return inst\nend\n'})}),"\n",(0,a.jsx)(e.h3,{id:"available-netvar-types",children:"Available NetVar Types"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:"Type"}),(0,a.jsx)(e.th,{children:"Function"}),(0,a.jsx)(e.th,{children:"Description"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_byte"})}),(0,a.jsx)(e.td,{children:"8-bit integer"}),(0,a.jsx)(e.td,{children:"Small numbers (0-255)"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_shortint"})}),(0,a.jsx)(e.td,{children:"16-bit integer"}),(0,a.jsx)(e.td,{children:"Medium numbers"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_int"})}),(0,a.jsx)(e.td,{children:"32-bit integer"}),(0,a.jsx)(e.td,{children:"Large integer values"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_float"})}),(0,a.jsx)(e.td,{children:"Floating point"}),(0,a.jsx)(e.td,{children:"Decimal values"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_string"})}),(0,a.jsx)(e.td,{children:"String"}),(0,a.jsx)(e.td,{children:"Text values"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_bool"})}),(0,a.jsx)(e.td,{children:"Boolean"}),(0,a.jsx)(e.td,{children:"True/false values"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_hash"})}),(0,a.jsx)(e.td,{children:"Hash"}),(0,a.jsx)(e.td,{children:"For entity references"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_entity"})}),(0,a.jsx)(e.td,{children:"Entity reference"}),(0,a.jsx)(e.td,{children:"For direct entity references"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"net_tinybyte"})}),(0,a.jsx)(e.td,{children:"4-bit integer"}),(0,a.jsx)(e.td,{children:"Very small numbers (0-15)"})]})]})]}),"\n",(0,a.jsx)(e.h3,{id:"responding-to-netvar-changes",children:"Responding to NetVar Changes"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- In client code (typically in prefab or component)\nlocal function OnValueDirty(inst)\n    -- This is called when myvalue changes on the server\n    local new_value = inst.myvalue:value()\n    print("Value updated to:", new_value)\n    \n    -- Update visual representation\n    if new_value > 75 then\n        inst.AnimState:SetMultColour(0, 1, 0, 1) -- Green\n    elseif new_value > 25 then\n        inst.AnimState:SetMultColour(1, 1, 0, 1) -- Yellow\n    else\n        inst.AnimState:SetMultColour(1, 0, 0, 1) -- Red\n    end\nend\n\n-- Listen for the dirty event\ninst:ListenForEvent("myvaluedirty", OnValueDirty)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"replica-components",children:"Replica Components"}),"\n",(0,a.jsx)(e.p,{children:"Replica components are client-side counterparts to server components that expose necessary data to clients."}),"\n",(0,a.jsx)(e.h3,{id:"creating-a-replica-component",children:"Creating a Replica Component"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- In components/mycomponent_replica.lua\nlocal MyComponentReplica = Class(function(self, inst)\n    self.inst = inst\n    \n    -- Initialize networked values\n    self._value = net_float(inst.GUID, "mycomponent._value", "valuechanged")\n    self._state = net_string(inst.GUID, "mycomponent._state", "statechanged")\n    \n    -- If we\'re on the client, listen for changes\n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("valuechanged", function(inst) \n            self:OnValueChanged()\n        end)\n    end\nend)\n\nfunction MyComponentReplica:GetValue()\n    return self._value:value()\nend\n\nfunction MyComponentReplica:GetState()\n    return self._state:value()\nend\n\nfunction MyComponentReplica:OnValueChanged()\n    -- Handle value change on client\n    -- This is a good place to trigger visual effects\n    local value = self:GetValue()\n    self.inst:PushEvent("mycomponent.valuechanged", { value = value })\nend\n\nreturn MyComponentReplica\n'})}),"\n",(0,a.jsx)(e.h3,{id:"linking-server-component-with-replica",children:"Linking Server Component with Replica"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- In components/mycomponent.lua\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    \n    -- Initialize values\n    self.value = 100\n    self.state = "idle"\n    \n    -- Create networked values if not already created by replica\n    if self.inst.replica.mycomponent == nil then\n        self.inst.replica.mycomponent = {}\n        self.inst.replica.mycomponent._value = net_float(inst.GUID, "mycomponent._value", "valuechanged")\n        self.inst.replica.mycomponent._state = net_string(inst.GUID, "mycomponent._state", "statechanged")\n    end\n    \n    -- Initialize network values\n    self:SyncValues()\nend)\n\nfunction MyComponent:SetValue(value)\n    self.value = value\n    self:SyncValues()\nend\n\nfunction MyComponent:SetState(state)\n    self.state = state\n    self:SyncValues()\nend\n\nfunction MyComponent:SyncValues()\n    -- Only the server should update network values\n    if TheWorld.ismastersim then\n        self.inst.replica.mycomponent._value:set(self.value)\n        self.inst.replica.mycomponent._state:set(self.state)\n    end\nend\n\nreturn MyComponent\n'})}),"\n",(0,a.jsx)(e.h3,{id:"registering-the-replica",children:"Registering the Replica"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\nAddReplicableComponent("mycomponent")\n'})}),"\n",(0,a.jsx)(e.h2,{id:"bidirectional-communication-with-rpcs",children:"Bidirectional Communication with RPCs"}),"\n",(0,a.jsx)(e.p,{children:"While NetVars handle server-to-client synchronization, Remote Procedure Calls (RPCs) enable bidirectional communication."}),"\n",(0,a.jsx)(e.h3,{id:"client-to-server-actions",children:"Client-to-Server Actions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\n-- Define RPC\nMOD_RPC = {\n    MyMod = {\n        RequestAction = 0,\n    }\n}\n\n-- Server-side handler\nAddModRPCHandler("MyMod", "RequestAction", function(player, target_entity, action_type)\n    -- Validate request\n    if not player or player:HasTag("playerghost") then\n        return\n    end\n    \n    -- Find target entity\n    local target = Ents[target_entity]\n    if target == nil then\n        return\n    end\n    \n    -- Validate distance\n    if player:GetDistanceSqToInst(target) > 16 then -- 4 units squared\n        return\n    end\n    \n    -- Perform action\n    if action_type == "interact" and target.components.mycomponent then\n        target.components.mycomponent:Interact(player)\n        return true\n    end\n    \n    return false\nend)\n\n-- Client-side call\nlocal function RequestAction(entity, action)\n    SendModRPCToServer(MOD_RPC.MyMod.RequestAction, entity.GUID, action)\nend\n'})}),"\n",(0,a.jsx)(e.h3,{id:"server-to-client-notifications",children:"Server-to-Client Notifications"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\n-- Define RPC\nMOD_RPC = {\n    MyMod = {\n        NotifyEffect = 1,\n    }\n}\n\n-- Client-side handler\nAddClientModRPCHandler("MyMod", "NotifyEffect", function(effect_type, x, y, z)\n    -- Spawn client-side effect\n    local effect = SpawnPrefab(effect_type .. "_fx")\n    if effect then\n        effect.Transform:SetPosition(x, y, z)\n    end\n    \n    -- Play sound\n    TheFocalPoint.SoundEmitter:PlaySound("dontstarve/common/" .. effect_type)\nend)\n\n-- Server-side call\nlocal function NotifyNearbyPlayers(inst, effect_type)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    \n    -- Find players in range\n    local players = FindPlayersInRange(x, y, z, 20)\n    \n    -- Send notification to each nearby player\n    for _, player in ipairs(players) do\n        SendModRPCToClient(MOD_RPC.MyMod.NotifyEffect, player.userid, effect_type, x, y, z)\n    end\nend\n'})}),"\n",(0,a.jsx)(e.h2,{id:"common-synchronization-patterns",children:"Common Synchronization Patterns"}),"\n",(0,a.jsx)(e.h3,{id:"health-synchronization",children:"Health Synchronization"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Server-side health component modification\nlocal function UpdateHealth(inst, amount)\n    if inst.components.health then\n        inst.components.health:DoDelta(amount)\n        \n        -- Health component automatically syncs to clients\n        -- through the built-in health_replica component\n    end\nend\n\n-- Client-side health display\nlocal function OnHealthDirty(inst)\n    -- Get current health from replica\n    local health = inst.replica.health:GetCurrent()\n    local max_health = inst.replica.health:GetMax()\n    \n    -- Update health bar\n    local percent = health / max_health\n    UpdateHealthBar(inst, percent)\nend\n\ninst:ListenForEvent("healthdirty", OnHealthDirty)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"inventory-item-synchronization",children:"Inventory Item Synchronization"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Server-side inventory management\nfunction GiveItemToPlayer(player, item_prefab)\n    if player.components.inventory then\n        local item = SpawnPrefab(item_prefab)\n        player.components.inventory:GiveItem(item)\n        -- Inventory component handles synchronization\n    end\nend\n\n-- Client-side inventory update\nlocal function OnInventoryChanged(inst)\n    -- This event is triggered when inventory changes\n    RefreshInventoryUI(inst)\nend\n\ninst:ListenForEvent("itemschanged", OnInventoryChanged)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"animation-state-synchronization",children:"Animation State Synchronization"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Server-side animation control\nfunction PlayAnimation(inst, anim_name)\n    inst.AnimState:PlayAnimation(anim_name)\n    \n    -- Sync animation state to clients\n    inst.anim_name:set(anim_name)\n    inst.anim_time:set(GetTime())\nend\n\n-- Client-side animation handler\nlocal function OnAnimDirty(inst)\n    local anim_name = inst.anim_name:value()\n    inst.AnimState:PlayAnimation(anim_name)\nend\n\ninst:ListenForEvent("animdirty", OnAnimDirty)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"optimizing-synchronization",children:"Optimizing Synchronization"}),"\n",(0,a.jsx)(e.h3,{id:"update-frequency-control",children:"Update Frequency Control"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:"-- Only sync when value changes significantly\nfunction UpdateNetworkedPosition(inst)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    \n    -- Calculate distance from last synced position\n    local last_x, last_y, last_z = inst.last_sync_x, inst.last_sync_y, inst.last_sync_z\n    local dist_sq = distsq(x, z, last_x, last_z)\n    \n    -- Only sync if moved more than threshold\n    if dist_sq > 0.25 then -- 0.5 units squared\n        inst.net_pos_x:set(x)\n        inst.net_pos_z:set(z)\n        \n        inst.last_sync_x = x\n        inst.last_sync_z = z\n    end\nend\n"})}),"\n",(0,a.jsx)(e.h3,{id:"prioritizing-critical-data",children:"Prioritizing Critical Data"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:"-- Sync critical data immediately\nfunction SyncCriticalState(inst, state)\n    inst.net_critical_state:set(state)\n    inst.net_critical_time:set(GetTime())\nend\n\n-- Batch non-critical updates\nlocal function PeriodicSync(inst)\n    -- Collect all changes since last sync\n    local changes = {}\n    \n    -- Add changes to batch\n    if inst.appearance_dirty then\n        changes.appearance = inst.appearance\n        inst.appearance_dirty = false\n    end\n    \n    if inst.effects_dirty then\n        changes.effects = inst.active_effects\n        inst.effects_dirty = false\n    end\n    \n    -- Encode and sync batch\n    if next(changes) ~= nil then\n        local encoded = json.encode(changes)\n        inst.net_batch_update:set(encoded)\n    end\nend\n\ninst:DoPeriodicTask(1, PeriodicSync) -- Sync non-critical data every second\n"})}),"\n",(0,a.jsx)(e.h2,{id:"handling-synchronization-edge-cases",children:"Handling Synchronization Edge Cases"}),"\n",(0,a.jsx)(e.h3,{id:"late-joining-players",children:"Late-Joining Players"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- When a player joins, send them the current state\nlocal function OnPlayerJoined(world, player)\n    -- Find all important entities that need immediate sync\n    local critical_entities = FindEntities(...)\n    \n    for _, entity in ipairs(critical_entities) do\n        if entity.components.syncmanager then\n            -- Force a full sync to the new player\n            entity.components.syncmanager:SyncToPlayer(player)\n        end\n    end\nend\n\nTheWorld:ListenForEvent("ms_playerspawn", OnPlayerJoined)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"handling-disconnections",children:"Handling Disconnections"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Save important player state on disconnect\nlocal function OnPlayerLeft(world, player)\n    if player.userid then\n        -- Store persistent data\n        if player.components.persistentdata then\n            player.components.persistentdata:Save()\n        end\n        \n        -- Clean up any player-specific entities\n        local linked_entities = player.linked_entities or {}\n        for _, entity in pairs(linked_entities) do\n            if entity:IsValid() then\n                entity:Remove()\n            end\n        end\n    end\nend\n\nTheWorld:ListenForEvent("ms_playerleft", OnPlayerLeft)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"recovering-from-desync",children:"Recovering from Desync"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Client can detect potential desync\nlocal function CheckForDesync(inst)\n    local server_state = inst.replica.syncmanager:GetServerState()\n    local client_state = CalculateLocalState(inst)\n    \n    if math.abs(server_state - client_state) > DESYNC_THRESHOLD then\n        -- Detected desync, request full resync\n        SendModRPCToServer(MOD_RPC.MyMod.RequestResync, inst.GUID)\n        print("Desync detected, requesting resync")\n    end\nend\n\n-- Server handles resync requests\nAddModRPCHandler("MyMod", "RequestResync", function(player, entity_id)\n    local entity = Ents[entity_id]\n    if entity and entity.components.syncmanager then\n        entity.components.syncmanager:FullResync(player)\n    end\nend)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"complete-example-synchronized-custom-entity",children:"Complete Example: Synchronized Custom Entity"}),"\n",(0,a.jsx)(e.p,{children:"Here's a complete example of a custom entity with synchronized state:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- prefabs/mysyncedentity.lua\n\nlocal assets = {\n    Asset("ANIM", "anim/myentity.zip"),\n}\n\n-- Shared initialization (runs on both client and server)\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Basic entity setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    -- Setup animations\n    inst.AnimState:SetBank("myentity")\n    inst.AnimState:SetBuild("myentity")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add networked variables\n    inst.current_state = net_string(inst.GUID, "mysyncedentity.state", "statedirty")\n    inst.energy_level = net_byte(inst.GUID, "mysyncedentity.energy", "energydirty")\n    inst.owner_id = net_string(inst.GUID, "mysyncedentity.owner", "ownerdirty")\n    \n    -- Initialize network values\n    inst.current_state:set("idle")\n    inst.energy_level:set(100)\n    inst.owner_id:set("")\n    \n    -- Client-side event handlers\n    if not TheWorld.ismastersim then\n        -- Handle state changes\n        inst:ListenForEvent("statedirty", function(inst)\n            local state = inst.current_state:value()\n            inst.AnimState:PlayAnimation(state)\n        end)\n        \n        -- Handle energy changes\n        inst:ListenForEvent("energydirty", function(inst)\n            local energy = inst.energy_level:value()\n            -- Update visual effects based on energy\n            local intensity = energy / 100\n            inst.AnimState:SetMultColour(1, intensity, intensity, 1)\n        end)\n    end\n    \n    -- Mark entity as ready for replication\n    inst.entity:SetPristine()\n    \n    -- Server-only components and logic below\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add server-only components\n    inst:AddComponent("inspectable")\n    \n    -- Custom component for this entity\n    inst:AddComponent("energymanager")\n    inst.components.energymanager:SetMax(100)\n    inst.components.energymanager:SetCurrent(100)\n    \n    -- Update networked values when energy changes\n    inst:ListenForEvent("energychange", function(inst, data)\n        inst.energy_level:set(math.floor(data.current))\n    end)\n    \n    -- Set owner when picked up\n    inst:ListenForEvent("onpickup", function(inst, data)\n        if data.owner and data.owner.userid then\n            inst.owner_id:set(data.owner.userid)\n        end\n    end)\n    \n    -- Change state\n    inst.SetState = function(inst, state)\n        inst.current_state:set(state)\n        inst.AnimState:PlayAnimation(state)\n    end\n    \n    -- Periodic energy consumption\n    inst:DoPeriodicTask(1, function(inst)\n        if inst.components.energymanager then\n            inst.components.energymanager:DoDelta(-1)\n        end\n    end)\n    \n    return inst\nend\n\nreturn Prefab("mysyncedentity", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/rpc-system",children:"RPC System"})," - For detailed information on Remote Procedure Calls"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-system",children:"Network System"})," - For core networking concepts"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/entity-system",children:"Entity System"})," - For entity creation and management"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/component-system",children:"Component System"})," - For component architecture"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/networking-mod",children:"Examples"})," - For complete networking examples"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var i=t(6540);const a={},s=i.createContext(a);function r(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);