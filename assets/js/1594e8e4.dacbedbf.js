"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3174],{7652:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"api-vanilla/global-objects/theplayer","title":"ThePlayer","description":"ThePlayer is the global object representing the current player character in Don\'t Starve Together. It provides access to the player\'s state, components, and control capabilities.","source":"@site/docs/api-vanilla/global-objects/theplayer.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/theplayer","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theplayer","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"theplayer","title":"ThePlayer","sidebar_position":3},"sidebar":"docs","previous":{"title":"TheWorld","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theworld"},"next":{"title":"TheNet","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/thenet"}}');var l=a(4848),r=a(8453);const o={id:"theplayer",title:"ThePlayer",sidebar_position:3},i="ThePlayer",c={},s=[{value:"Basic Player Information",id:"basic-player-information",level:2},{value:"Player Components",id:"player-components",level:2},{value:"Client-Side Replicas",id:"client-side-replicas",level:2},{value:"Player Actions",id:"player-actions",level:2},{value:"User Interface",id:"user-interface",level:2},{value:"Player Events",id:"player-events",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"theplayer",children:"ThePlayer"})}),"\n",(0,l.jsx)(n.p,{children:"ThePlayer is the global object representing the current player character in Don't Starve Together. It provides access to the player's state, components, and control capabilities."}),"\n",(0,l.jsx)(n.h2,{id:"basic-player-information",children:"Basic Player Information"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Get player position\nlocal x, y, z = ThePlayer.Transform:GetWorldPosition()\n\n-- Get player prefab (character type)\nlocal character = ThePlayer.prefab -- Returns "wilson", "willow", "wx78", etc.\n\n-- Get player entity ID\nlocal entity_id = ThePlayer.entity:GetGUID()\n\n-- Check if player is valid\nlocal is_valid = ThePlayer:IsValid()\n\n-- Check player tags\nlocal is_ghost = ThePlayer:HasTag("playerghost")\nlocal is_busy = ThePlayer:HasTag("busy")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"player-components",children:"Player Components"}),"\n",(0,l.jsx)(n.p,{children:"ThePlayer has many components that control different aspects of the character:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Health component\nlocal health = ThePlayer.components.health\nlocal current_health = health.currenthealth\nlocal max_health = health.maxhealth\nlocal percent_health = health:GetPercent()\n\n-- Hunger component\nlocal hunger = ThePlayer.components.hunger\nlocal current_hunger = hunger.current\nlocal max_hunger = hunger.max\nlocal percent_hunger = hunger:GetPercent()\n\n-- Sanity component\nlocal sanity = ThePlayer.components.sanity\nlocal current_sanity = sanity.current\nlocal max_sanity = sanity.max\nlocal percent_sanity = sanity:GetPercent()\n\n-- Temperature component\nlocal temperature = ThePlayer.components.temperature\nlocal current_temp = temperature.current\nlocal is_freezing = temperature:IsFreezing()\nlocal is_overheating = temperature:IsOverheating()\n\n-- Inventory component\nlocal inventory = ThePlayer.components.inventory\nlocal active_item = inventory:GetActiveItem()\nlocal equipped_item = inventory:GetEquippedItem(EQUIPSLOTS.HANDS)\n\n-- Locomotor component\nlocal locomotor = ThePlayer.components.locomotor\nlocal speed = locomotor.walkspeed\nlocal current_platform = ThePlayer:GetCurrentPlatform() -- Returns boat if on a boat\n\n-- Builder component\nlocal builder = ThePlayer.components.builder\nlocal can_build = builder:CanBuild("campfire")\nlocal recipes = builder.recipes -- Known recipes\n\n-- Combat component\nlocal combat = ThePlayer.components.combat\nlocal damage = combat.defaultdamage\nlocal attack_range = combat.attackrange\n\n-- Player controller\nlocal controller = ThePlayer.components.playercontroller\nlocal is_enabled = controller.enabled\n'})}),"\n",(0,l.jsx)(n.h2,{id:"client-side-replicas",children:"Client-Side Replicas"}),"\n",(0,l.jsx)(n.p,{children:"On clients, components are accessed through their replicas:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Health replica\nlocal health_replica = ThePlayer.replica.health\nlocal current_health = health_replica:GetCurrent()\nlocal max_health = health_replica:GetMax()\nlocal percent_health = health_replica:GetPercent()\n\n-- Hunger replica\nlocal hunger_replica = ThePlayer.replica.hunger\nlocal current_hunger = hunger_replica:GetCurrent()\nlocal percent_hunger = hunger_replica:GetPercent()\n\n-- Sanity replica\nlocal sanity_replica = ThePlayer.replica.sanity\nlocal current_sanity = sanity_replica:GetCurrent()\nlocal percent_sanity = sanity_replica:GetPercent()\n\n-- Inventory replica\nlocal inventory_replica = ThePlayer.replica.inventory\nlocal has_item = inventory_replica:Has("log", 1)\nlocal active_item = inventory_replica:GetActiveItem()\n'})}),"\n",(0,l.jsx)(n.h2,{id:"player-actions",children:"Player Actions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Make the player say something\nThePlayer.components.talker:Say("Hello world!")\n\n-- Damage the player\nThePlayer.components.health:DoDelta(-10) -- Take 10 damage\n\n-- Feed the player\nThePlayer.components.hunger:DoDelta(10) -- Add 10 hunger\n\n-- Change player sanity\nThePlayer.components.sanity:DoDelta(10) -- Add 10 sanity\n\n-- Give the player an item\nThePlayer.components.inventory:GiveItem(SpawnPrefab("log"))\n\n-- Equip an item\nlocal item = SpawnPrefab("axe")\nThePlayer.components.inventory:Equip(item)\n\n-- Move the player\nThePlayer.Physics:Teleport(x, y, z) -- Teleport to coordinates\n'})}),"\n",(0,l.jsx)(n.h2,{id:"user-interface",children:"User Interface"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Access the player\'s HUD\nlocal hud = ThePlayer.HUD\n\n-- Show/hide HUD elements\nhud:Show() -- Show the entire HUD\nhud:Hide() -- Hide the entire HUD\n\n-- Add chat message\nThePlayer.components.talker:Say("This is a chat message")\n\n-- Show an announcement\nhud:ShowPopup(STRINGS.UI.HUD.ANNOUNCE_SUFFIX.."Important announcement!")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"player-events",children:"Player Events"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Listen for player events\nThePlayer:ListenForEvent("death", function()\n    print("Player died!")\nend)\n\n-- Common events\n-- "death" - Player died\n-- "respawn" - Player respawned\n-- "attacked" - Player was attacked\n-- "healthdelta" - Health changed\n-- "hungerdelta" - Hunger changed\n-- "sanitydelta" - Sanity changed\n-- "equip" - Item equipped\n-- "unequip" - Item unequipped\n-- "itemget" - Item added to inventory\n-- "itemlose" - Item removed from inventory\n-- "newactiveitem" - Active item changed\n'})}),"\n",(0,l.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Client vs. Server"}),": Some components only exist on the server, use replicas on the client"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"ThePlayer Availability"}),": ThePlayer may be nil until a player character is spawned"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Authority"}),": Only the server has authority to modify most player state"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Mod Compatibility"}),": Changing player state can affect other mods"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Character-Specific Logic"}),": Different characters may have different behavior"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Character State"}),": Checking and modifying health, hunger, and sanity"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Inventory Management"}),": Giving, taking, and checking inventory"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Player Movement"}),": Teleporting or checking position"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Character Information"}),": Getting player character type and state"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"User Interface"}),": Displaying information to the player"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(6540);const l={},r=t.createContext(l);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);