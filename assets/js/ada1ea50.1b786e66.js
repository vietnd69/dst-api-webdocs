"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1767],{5648:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-vanilla/data-types/data-types-overview","title":"Data Types Overview","description":"Last Update: 2024-08-22","source":"@site/docs/api-vanilla/data-types/index.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"data-types-overview","title":"Data Types Overview","sidebar_position":1,"last_updated":"2024-08-22T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Data Types","permalink":"/dst-api-webdocs/docs/category/data-types"},"next":{"title":"Vector3","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/vector3"}}');var s=n(4848),i=n(8453);const r={id:"data-types-overview",title:"Data Types Overview",sidebar_position:1,last_updated:new Date("2024-08-22T00:00:00.000Z")},l="Data Types Overview",o={},d=[{value:"Lua Data Types",id:"lua-data-types",level:2},{value:"DST-Specific Data Types",id:"dst-specific-data-types",level:2},{value:"Vectors and Positioning",id:"vectors-and-positioning",level:3},{value:"Graphics and UI",id:"graphics-and-ui",level:3},{value:"Network and Data Synchronization",id:"network-and-data-synchronization",level:3},{value:"Utility Types",id:"utility-types",level:3},{value:"Working with DST Data Types",id:"working-with-dst-data-types",level:2},{value:"Creation",id:"creation",level:3},{value:"Common Operations",id:"common-operations",level:3},{value:"Conversion",id:"conversion",level:3},{value:"Memory Management",id:"memory-management",level:2},{value:"Type Checking",id:"type-checking",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"Last Update: 2024-08-22"})}),"\n",(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"data-types-overview",children:"Data Types Overview"})}),"\n",(0,s.jsx)(a.p,{children:"Don't Starve Together uses a variety of data types to represent different kinds of information in the game. This page provides an overview of the common data types used in the Don't Starve Together API."}),"\n",(0,s.jsx)(a.h2,{id:"lua-data-types",children:"Lua Data Types"}),"\n",(0,s.jsx)(a.p,{children:"Don't Starve Together is built on Lua, so it inherits all standard Lua data types:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"nil"})," - Represents the absence of a value"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"boolean"})," - true or false"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"number"})," - Floating-point numbers (no separate integer type)"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"string"})," - Immutable sequences of characters"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"function"})," - First-class values that can be stored and passed around"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"table"})," - The primary data structure in Lua, used for arrays and dictionaries"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"userdata"})," - C data stored in Lua variables"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"thread"})," - Independent threads of execution"]}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"dst-specific-data-types",children:"DST-Specific Data Types"}),"\n",(0,s.jsx)(a.p,{children:"Don't Starve Together extends Lua with several custom data types implemented as userdata:"}),"\n",(0,s.jsx)(a.h3,{id:"vectors-and-positioning",children:"Vectors and Positioning"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/vector3",children:"Vector3"})," - Three-dimensional vectors used for positions, directions, and scales"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/vector",children:"Vector2"})," - Two-dimensional vectors used for UI positioning and 2D calculations"]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"graphics-and-ui",children:"Graphics and UI"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/colour",children:"Colour"})," - RGBA color values"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/rect",children:"Rect"})," - Rectangle data type for UI layouts and collision detection"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/anim",children:"Anim"})," - Animation state data"]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"network-and-data-synchronization",children:"Network and Data Synchronization"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/netvar",children:"NetVar"})," - Network variables for synchronizing state across clients"]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"utility-types",children:"Utility Types"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/userdata",children:"UserData"})," - Base type for DST custom data types"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/luatable",children:"LuaTable"})," - Enhanced Lua tables with additional functionality"]}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"working-with-dst-data-types",children:"Working with DST Data Types"}),"\n",(0,s.jsx)(a.h3,{id:"creation",children:"Creation"}),"\n",(0,s.jsx)(a.p,{children:"Most DST data types can be created via constructor functions:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:"-- Create a Vector3\nlocal pos = Vector3(x, y, z)\n\n-- Create a Color\nlocal color = Color(r, g, b, a)\n\n-- Create a Rect\nlocal rect = Rect(x, y, width, height)\n"})}),"\n",(0,s.jsx)(a.h3,{id:"common-operations",children:"Common Operations"}),"\n",(0,s.jsx)(a.p,{children:"DST data types typically support various operations:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:"-- Vector math\nlocal sum = Vector3(1, 0, 0) + Vector3(0, 1, 0)  -- Vector3(1, 1, 0)\nlocal direction = (target_pos - current_pos):Normalize()\nlocal distance = (target_pos - current_pos):Length()\n\n-- Color operations\nlocal darker_color = color * 0.5  -- Multiply all components by 0.5\n"})}),"\n",(0,s.jsx)(a.h3,{id:"conversion",children:"Conversion"}),"\n",(0,s.jsx)(a.p,{children:"Most DST data types can be converted to standard Lua types when needed:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:"-- Convert Vector3 to table\nlocal pos_table = pos:Get()  -- Returns {x, y, z}\n\n-- Convert Rect to dimensions\nlocal x, y, width, height = rect:GetRect()\n"})}),"\n",(0,s.jsx)(a.h2,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsx)(a.p,{children:"Unlike standard Lua values, some DST data types may require explicit memory management:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:"-- Some types might need cleanup\nif anim and anim.Delete then\n    anim:Delete()\nend\n"})}),"\n",(0,s.jsx)(a.h2,{id:"type-checking",children:"Type Checking"}),"\n",(0,s.jsx)(a.p,{children:"You can check for specific DST data types:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-lua",children:'-- Check if a value is a Vector3\nif type(value) == "userdata" and value.IsVector3 and value:IsVector3() then\n    -- It\'s a Vector3\nend\n'})}),"\n",(0,s.jsx)(a.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"https://www.lua.org/manual/5.1/manual.html",children:"Lua Manual"})," - Official documentation for Lua 5.1"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/luatable",children:"Lua Tables"})," - Advanced usage of Lua tables"]}),"\n"]})]})}function p(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>l});var t=n(6540);const s={},i=t.createContext(s);function r(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);