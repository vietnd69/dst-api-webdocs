"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[813],{842:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/localization/font-handling","title":"Font Handling for Different Languages","description":"This guide covers techniques for handling fonts in Don\'t Starve Together mods to support various languages, especially those with non-Latin scripts like Chinese, Japanese, Korean, Russian, and Arabic.","source":"@site/docs/api-vanilla/localization/font-handling.md","sourceDirName":"api-vanilla/localization","slug":"/api-vanilla/localization/font-handling","permalink":"/dst-api-webdocs/docs/api-vanilla/localization/font-handling","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"font-handling","title":"Font Handling for Different Languages","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Managing String Tables","permalink":"/dst-api-webdocs/docs/api-vanilla/localization/string-tables"},"next":{"title":"Localization Best Practices","permalink":"/dst-api-webdocs/docs/api-vanilla/localization/best-practices"}}');var a=t(4848),l=t(8453);const s={id:"font-handling",title:"Font Handling for Different Languages",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},o="Font Handling for Different Languages",r={},d=[{value:"Font Challenges in Localization",id:"font-challenges-in-localization",level:2},{value:"Default Font Support in Don&#39;t Starve Together",id:"default-font-support-in-dont-starve-together",level:2},{value:"Using Built-in Fonts",id:"using-built-in-fonts",level:2},{value:"Font Size Adjustments for Different Languages",id:"font-size-adjustments-for-different-languages",level:2},{value:"Custom Font Integration",id:"custom-font-integration",level:2},{value:"1. Prepare Font Assets",id:"1-prepare-font-assets",level:3},{value:"2. Add Font Files to Your Mod",id:"2-add-font-files-to-your-mod",level:3},{value:"3. Register the Font",id:"3-register-the-font",level:3},{value:"4. Use Your Custom Font",id:"4-use-your-custom-font",level:3},{value:"Language-Specific Font Selection",id:"language-specific-font-selection",level:2},{value:"Text Wrapping and Line Height",id:"text-wrapping-and-line-height",level:2},{value:"Right-to-Left (RTL) Language Support",id:"right-to-left-rtl-language-support",level:2},{value:"Dynamic Text Sizing",id:"dynamic-text-sizing",level:2},{value:"Font Fallbacks",id:"font-fallbacks",level:2},{value:"Testing Font Rendering",id:"testing-font-rendering",level:2},{value:"Next Steps",id:"next-steps",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"font-handling-for-different-languages",children:"Font Handling for Different Languages"})}),"\n",(0,a.jsx)(n.p,{children:"This guide covers techniques for handling fonts in Don't Starve Together mods to support various languages, especially those with non-Latin scripts like Chinese, Japanese, Korean, Russian, and Arabic."}),"\n",(0,a.jsx)(n.h2,{id:"font-challenges-in-localization",children:"Font Challenges in Localization"}),"\n",(0,a.jsx)(n.p,{children:"Different languages present unique font challenges:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Character Set Coverage"}),": Many languages use characters outside the basic Latin set"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Glyph Complexity"}),": Some languages have thousands of unique characters (CJK languages)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Text Direction"}),": Some languages read right-to-left (Arabic, Hebrew)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Character Size"}),": Some scripts need larger font sizes to remain legible"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Line Height"}),": Some scripts require more vertical space"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"default-font-support-in-dont-starve-together",children:"Default Font Support in Don't Starve Together"}),"\n",(0,a.jsx)(n.p,{children:"Don't Starve Together includes built-in support for several languages:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Latin scripts (English, Spanish, French, etc.)"}),"\n",(0,a.jsx)(n.li,{children:"Cyrillic scripts (Russian)"}),"\n",(0,a.jsx)(n.li,{children:"Chinese (Simplified and Traditional)"}),"\n",(0,a.jsx)(n.li,{children:"Japanese"}),"\n",(0,a.jsx)(n.li,{children:"Korean"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For these languages, the game automatically handles font selection based on the user's language setting."}),"\n",(0,a.jsx)(n.h2,{id:"using-built-in-fonts",children:"Using Built-in Fonts"}),"\n",(0,a.jsx)(n.p,{children:"To use the game's built-in fonts:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Access the game's font system\nlocal NEWFONT = GLOBAL.NEWFONT\nlocal DIALOGFONT = GLOBAL.DIALOGFONT\nlocal TITLEFONT = GLOBAL.TITLEFONT\nlocal NUMBERFONT = GLOBAL.NUMBERFONT\nlocal SMALLNUMBERFONT = GLOBAL.SMALLNUMBERFONT\nlocal TALKINGFONT = GLOBAL.TALKINGFONT\nlocal UIFONT = GLOBAL.UIFONT\n\n-- Example: Creating text with the appropriate font\nlocal text = widget:AddChild(Text(NEWFONT, 30))\ntext:SetString(STRINGS.MY_MOD.UI.TITLE)\n"})}),"\n",(0,a.jsx)(n.p,{children:"The game will automatically use the appropriate font for the current language."}),"\n",(0,a.jsx)(n.h2,{id:"font-size-adjustments-for-different-languages",children:"Font Size Adjustments for Different Languages"}),"\n",(0,a.jsx)(n.p,{children:"Some languages need different font sizes to be readable:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Adjust font size based on language\nlocal function GetAdjustedFontSize(base_size)\n    local language = GLOBAL.LanguageTranslator.defaultlanguage\n    \n    -- CJK languages often need larger fonts\n    if language == "zh" or language == "ja" or language == "ko" then\n        return base_size * 1.2 -- 20% larger\n    -- Cyrillic may need slight adjustments\n    elseif language == "ru" then\n        return base_size * 1.1 -- 10% larger\n    else\n        return base_size\n    end\nend\n\n-- Usage\nlocal title_text = widget:AddChild(Text(TITLEFONT, GetAdjustedFontSize(30)))\ntitle_text:SetString(STRINGS.MY_MOD.UI.TITLE)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"custom-font-integration",children:"Custom Font Integration"}),"\n",(0,a.jsx)(n.p,{children:"For languages or special characters not supported by the default fonts, you can add custom fonts:"}),"\n",(0,a.jsx)(n.h3,{id:"1-prepare-font-assets",children:"1. Prepare Font Assets"}),"\n",(0,a.jsx)(n.p,{children:"Create your custom font using a tool like BMFont or Glyph Designer. You'll need:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A .tex file (texture atlas containing glyphs)"}),"\n",(0,a.jsx)(n.li,{children:"A .xml file (describing glyph positions and metrics)"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-add-font-files-to-your-mod",children:"2. Add Font Files to Your Mod"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"modroot/\n  \u251c\u2500\u2500 fonts/\n  \u2502    \u251c\u2500\u2500 my_custom_font.tex\n  \u2502    \u2514\u2500\u2500 my_custom_font.xml\n  \u2514\u2500\u2500 modmain.lua\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-register-the-font",children:"3. Register the Font"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAssets = {\n    Asset("FONT", "fonts/my_custom_font.xml"),\n}\n\n-- Register the font\nlocal function RegisterCustomFont()\n    -- Wait until the game is fully loaded\n    AddSimPostInit(function()\n        -- Register your custom font\n        GLOBAL.TheSim:RegisterFont("fonts/my_custom_font.xml")\n        \n        -- Create a global reference\n        GLOBAL.MY_CUSTOM_FONT = "fonts/my_custom_font.xml"\n    end)\nend\n\nRegisterCustomFont()\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-use-your-custom-font",children:"4. Use Your Custom Font"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Create text with your custom font\nlocal function CreateCustomText(parent, text_string, size)\n    local text = parent:AddChild(Text(GLOBAL.MY_CUSTOM_FONT, size or 30))\n    text:SetString(text_string)\n    return text\nend\n\n-- Usage\nlocal my_text = CreateCustomText(root, STRINGS.MY_MOD.UI.TITLE)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"language-specific-font-selection",children:"Language-Specific Font Selection"}),"\n",(0,a.jsx)(n.p,{children:"To use different fonts for different languages:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function GetLanguageFont(default_font)\n    local language = GLOBAL.LanguageTranslator.defaultlanguage\n    \n    if language == "zh" then\n        return GLOBAL.NEWFONT -- Chinese font\n    elseif language == "ja" then\n        return GLOBAL.MY_JAPANESE_FONT -- Custom Japanese font\n    elseif language == "ko" then\n        return GLOBAL.NEWFONT -- Korean font\n    elseif language == "ru" then\n        return GLOBAL.NEWFONT -- Cyrillic font\n    elseif language == "ar" then\n        return GLOBAL.MY_ARABIC_FONT -- Custom Arabic font\n    else\n        return default_font -- Default Latin font\n    end\nend\n\n-- Usage\nlocal text = widget:AddChild(Text(GetLanguageFont(GLOBAL.DIALOGFONT), 30))\ntext:SetString(STRINGS.MY_MOD.UI.MESSAGE)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"text-wrapping-and-line-height",children:"Text Wrapping and Line Height"}),"\n",(0,a.jsx)(n.p,{children:"Different languages may require different text wrapping and line height settings:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function ConfigureTextForLanguage(text_widget)\n    local language = GLOBAL.LanguageTranslator.defaultlanguage\n    \n    -- Base settings\n    local line_spacing = 2\n    local max_width = 200\n    \n    -- Adjust for specific languages\n    if language == "zh" or language == "ja" or language == "ko" then\n        line_spacing = 4 -- More space between lines for CJK\n        max_width = 180 -- Narrower width for CJK characters\n    elseif language == "ru" then\n        line_spacing = 3 -- Slightly more space for Cyrillic\n    elseif language == "de" then\n        max_width = 220 -- German words can be longer\n    end\n    \n    -- Apply settings\n    text_widget:SetLineSpacing(line_spacing)\n    text_widget:SetRegionSize(max_width, 100)\n    text_widget:EnableWordWrap(true)\nend\n\n-- Usage\nlocal description = widget:AddChild(Text(DIALOGFONT, 25))\ndescription:SetString(STRINGS.MY_MOD.ITEMS.MAGIC_SWORD.DESCRIPTION)\nConfigureTextForLanguage(description)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"right-to-left-rtl-language-support",children:"Right-to-Left (RTL) Language Support"}),"\n",(0,a.jsx)(n.p,{children:"For RTL languages like Arabic and Hebrew:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function ConfigureRTLText(text_widget)\n    local language = GLOBAL.LanguageTranslator.defaultlanguage\n    \n    -- Check if current language is RTL\n    local is_rtl = (language == "ar" or language == "he")\n    \n    if is_rtl then\n        -- For RTL languages, reverse the string\n        -- This is a simplified approach; proper RTL support is more complex\n        local original_text = text_widget:GetString()\n        local reversed_text = ""\n        \n        for i = string.len(original_text), 1, -1 do\n            reversed_text = reversed_text .. string.sub(original_text, i, i)\n        end\n        \n        text_widget:SetString(reversed_text)\n        \n        -- Align to the right\n        text_widget:SetHAlign(GLOBAL.ANCHOR_RIGHT)\n    else\n        -- For LTR languages, use default alignment\n        text_widget:SetHAlign(GLOBAL.ANCHOR_LEFT)\n    end\nend\n\n-- Usage\nlocal text = widget:AddChild(Text(DIALOGFONT, 25))\ntext:SetString(STRINGS.MY_MOD.UI.MESSAGE)\nConfigureRTLText(text)\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Note"}),": Full RTL support is complex and may require specialized libraries. The above is a simplified approach."]}),"\n",(0,a.jsx)(n.h2,{id:"dynamic-text-sizing",children:"Dynamic Text Sizing"}),"\n",(0,a.jsx)(n.p,{children:"For UI elements where space is limited, implement dynamic text sizing:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local function FitTextToWidth(text_widget, max_width)\n    local text_width = text_widget:GetRegionSize()\n    \n    if text_width > max_width then\n        -- Calculate scale factor to fit\n        local scale = max_width / text_width\n        local current_size = text_widget:GetSize()\n        \n        -- Apply new size\n        text_widget:SetSize(math.max(current_size * scale, 12))\n    end\nend\n\n-- Usage\nlocal button_label = button:AddChild(Text(DIALOGFONT, 25))\nbutton_label:SetString(STRINGS.MY_MOD.UI.BUTTONS.LONG_BUTTON_NAME)\nFitTextToWidth(button_label, 100) -- Fit to 100 pixels width\n"})}),"\n",(0,a.jsx)(n.h2,{id:"font-fallbacks",children:"Font Fallbacks"}),"\n",(0,a.jsx)(n.p,{children:"Implement a fallback system for unsupported characters:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function SetTextWithFallback(text_widget, text_string, primary_font, fallback_font)\n    -- Try with primary font first\n    text_widget:SetFont(primary_font)\n    text_widget:SetString(text_string)\n    \n    -- Check if any characters are missing (will show as \u25a1 or ?)\n    local rendered_text = text_widget:GetString()\n    local has_missing_chars = string.find(rendered_text, "\u25a1") or string.find(rendered_text, "?")\n    \n    -- If missing characters, try fallback font\n    if has_missing_chars and fallback_font then\n        text_widget:SetFont(fallback_font)\n        text_widget:SetString(text_string)\n    end\nend\n\n-- Usage\nlocal text = widget:AddChild(Text(DIALOGFONT, 25))\nSetTextWithFallback(text, STRINGS.MY_MOD.UI.MESSAGE, DIALOGFONT, GLOBAL.MY_CUSTOM_FONT)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"testing-font-rendering",children:"Testing Font Rendering"}),"\n",(0,a.jsx)(n.p,{children:"To test font rendering for different languages:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function TestFontRendering(widget, font, size)\n    local languages = {\n        { code = "en", sample = "The quick brown fox jumps over the lazy dog" },\n        { code = "zh", sample = "\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8\u8df3\u8fc7\u61d2\u72d7" },\n        { code = "ja", sample = "\u7d20\u65e9\u3044\u8336\u8272\u306e\u30ad\u30c4\u30cd\u304c\u6020\u3051\u8005\u306e\u72ac\u3092\u98db\u3073\u8d8a\u3048\u307e\u3059" },\n        { code = "ko", sample = "\ube60\ub978 \uac08\uc0c9 \uc5ec\uc6b0\uac00 \uac8c\uc73c\ub978 \uac1c\ub97c \ub6f0\uc5b4 \ub118\uc2b5\ub2c8\ub2e4" },\n        { code = "ru", sample = "\u0411\u044b\u0441\u0442\u0440\u0430\u044f \u043a\u043e\u0440\u0438\u0447\u043d\u0435\u0432\u0430\u044f \u043b\u0438\u0441\u0430 \u043f\u0440\u044b\u0433\u0430\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 \u043b\u0435\u043d\u0438\u0432\u0443\u044e \u0441\u043e\u0431\u0430\u043a\u0443" },\n        { code = "de", sample = "Der schnelle braune Fuchs springt \xfcber den faulen Hund" },\n    }\n    \n    local y_offset = 0\n    for _, lang in ipairs(languages) do\n        local text = widget:AddChild(Text(font, size))\n        text:SetPosition(0, y_offset)\n        text:SetString(lang.code .. ": " .. lang.sample)\n        y_offset = y_offset - (size + 5)\n    end\nend\n\n-- Usage during development\nlocal root = GLOBAL.CreateScreen("FontTest")\nTestFontRendering(root, DIALOGFONT, 25)\nGLOBAL.TheFrontEnd:PushScreen(root)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"After implementing proper font handling, explore:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/localization/best-practices",children:"Localization Best Practices"})," - For effective translations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/localization/testing-localization",children:"Testing Localized Content"})," - For quality assurance"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Proper font handling is essential for making your mod accessible to players worldwide, especially those using languages with non-Latin scripts. By implementing these techniques, you can ensure your mod's text is readable and appealing across all supported languages."})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const a={},l=i.createContext(a);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);