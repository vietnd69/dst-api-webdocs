"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[74667],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},58137:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"game-scripts/core-systems/world-systems/generation/worldgen-main","title":"World Generation Main","description":"Core world generation system for creating game worlds with terrain, entities, and set pieces","source":"@site/docs/game-scripts/core-systems/world-systems/generation/worldgen_main.md","sourceDirName":"game-scripts/core-systems/world-systems/generation","slug":"/game-scripts/core-systems/world-systems/generation/worldgen-main","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/worldgen-main","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"worldgen-main","title":"World Generation Main","description":"Core world generation system for creating game worlds with terrain, entities, and set pieces","sidebar_position":1,"last_updated":"2025-06-25T00:00:00.000Z","build_version":676312,"change_status":"modified in build 676312"},"sidebar":"docs","previous":{"title":"World Generation Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/"},"next":{"title":"Custom Presets","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/custom-presets"}}');var r=s(74848),t=s(28453);const l={id:"worldgen-main",title:"World Generation Main",description:"Core world generation system for creating game worlds with terrain, entities, and set pieces",sidebar_position:1,last_updated:new Date("2025-06-25T00:00:00.000Z"),build_version:676312,change_status:"modified in build 676312"},d="World Generation Main",a={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Global Variables",id:"global-variables",level:2},{value:"SEED",id:"seed",level:3},{value:"WORLDGEN_MAIN",id:"worldgen-main",level:3},{value:"POT_GENERATION",id:"pot-generation",level:3},{value:"Functions",id:"functions",level:2},{value:"SetWorldGenSeed(seed)",id:"set-worldgen-seed",level:3},{value:"GenerateNew(debug, world_gen_data)",id:"generate-new",level:3},{value:"PROFILE_world_gen(debug)",id:"profile-world-gen",level:3},{value:"ShowDebug(savedata)",id:"show-debug",level:3},{value:"CheckMapSaveData(savedata)",id:"check-map-savedata",level:3},{value:"ValidateLineNumber(num)",id:"validate-line-number",level:3},{value:"Set Piece Management",id:"set-piece-management",level:2},{value:"AddSetPeices(level)",id:"add-set-pieces",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"LoadParametersAndGenerate(debug)",id:"load-parameters-and-generate",level:3},{value:"Platform Detection Functions",id:"platform-detection-functions",level:3},{value:"Environment Setup",id:"environment-setup",level:2},{value:"Package Path Configuration",id:"package-path-configuration",level:3},{value:"Custom Module Loader",id:"custom-module-loader",level:3},{value:"Required Dependencies",id:"required-dependencies",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Generation Retry Logic",id:"generation-retry-logic",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Save Data Structure",id:"save-data-structure",level:2},{value:"Generated Save Data Format",id:"generated-save-data-format",level:3},{value:"Data Serialization",id:"data-serialization",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Generation Optimization",id:"generation-optimization",level:3},{value:"Map Size Limits",id:"map-size-limits",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Recent Changes",id:"recent-changes",level:2},{value:"Build 676312 Utility Addition",id:"build-676312-utility-addition",level:3},{value:"ValidateLineNumber Function",id:"validatelinenumber-function",level:4}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"world-generation-main",children:"World Generation Main"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676312"}),(0,r.jsx)(n.td,{children:"2025-06-25"}),(0,r.jsx)(n.td,{children:"modified"}),(0,r.jsx)(n.td,{children:"Added ValidateLineNumber utility function"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Previous version"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"worldgen_main"})," module serves as the core world generation system for Don't Starve Together. It orchestrates the entire world creation process including terrain generation, entity placement, set piece distribution, and mod integration. This module is executed in a specialized world generation environment separate from the main game runtime."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- World generation is typically initiated through game parameters\nlocal world_gen_data = {\n    level_type = "SURVIVAL_TOGETHER",\n    level_data = level_definition,\n    show_debug = false\n}\n\n-- Generate new world with specified parameters\nlocal savedata = GenerateNew(false, world_gen_data)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"global-variables",children:"Global Variables"}),"\n",(0,r.jsx)(n.h3,{id:"seed",children:"SEED"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"number"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nThe world generation seed used for reproducible random number generation. Automatically set based on system time if not provided."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Seed is automatically generated\nprint("Current world seed:", SEED)\n\n-- Or manually set for testing\nSEED = 1234567890\nSEED = SetWorldGenSeed(SEED)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"worldgen-main",children:"WORLDGEN_MAIN"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"number"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nFlag indicating that the code is running in world generation context (value: 1)."]}),"\n",(0,r.jsx)(n.h3,{id:"pot-generation",children:"POT_GENERATION"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nFlag for pottery generation mode (default: false)."]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"set-worldgen-seed",children:"SetWorldGenSeed(seed)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nSets the random seed for world generation. If no seed is provided, generates one based on current system time using a reversed timestamp method."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"seed"})," (number, optional): The seed value to use. If nil, generates from system time"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(number): The seed value that was set"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function SetWorldGenSeed(seed)\n    if seed == nil then\n        seed = tonumber(tostring(os.time()):reverse():sub(1,6))\n    end\n\n    math.randomseed(seed)\n    math.random()\n\n    return seed\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Generate automatic seed from system time\nlocal seed = SetWorldGenSeed()\nprint("Generated seed:", seed)\n\n-- Use specific seed for reproducible generation\nlocal specific_seed = SetWorldGenSeed(1234567890)\n\n-- Global seed is automatically set during module load\nSEED = SetWorldGenSeed(SEED)\nprint("SEED = ", SEED)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Seed Generation Method:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time Retrieval"}),": Gets current system time with ",(0,r.jsx)(n.code,{children:"os.time()"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"String Conversion"}),": Converts to string representation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reversal"}),": Reverses the string to get different distribution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Truncation"}),": Takes first 6 characters for manageable seed size"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Number Conversion"}),": Converts back to number for use as seed"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"generate-new",children:"GenerateNew(debug, world_gen_data)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGenerates a new world with the specified parameters. This is the main entry point for world creation, handling level selection, task assignment, set piece placement, and entity injection."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"debug"})," (boolean): Whether to enable debug mode (uses special task set)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"world_gen_data"})," (table): World generation configuration containing level type and data"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Complete world save data with serialized entities and map information"}),"\n",(0,r.jsx)(n.li,{children:"(nil): If generation fails after maximum retries"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"World Gen Data Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'world_gen_data = {\n    level_type = "SURVIVAL_TOGETHER",  -- Game mode\n    level_data = {                     -- Level configuration\n        id = "SURVIVAL_TOGETHER",\n        name = "Default",\n        location = "forest",\n        overrides = {},                -- World setting overrides\n        -- Additional level properties...\n    },\n    show_debug = false,                -- Whether to show debug visualization\n    DLCEnabled = {}                    -- Enabled DLC content\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local world_data = {\n    level_type = "SURVIVAL_TOGETHER",\n    level_data = {\n        id = "SURVIVAL_TOGETHER",\n        name = "Standard World",\n        location = "forest",\n        overrides = {\n            worldsize = "default",\n            monsters = "default",\n            resources = "default"\n        }\n    },\n    show_debug = false\n}\n\nlocal savedata = GenerateNew(false, world_data)\nif savedata then\n    print("World generation successful!")\n    print("Map size:", savedata.map.width, "x", savedata.map.height)\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Generation Process:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameter Validation"}),": Validates world generation parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Level Creation"}),": Creates Level object from level data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prefab Selection"}),": Determines world location prefab"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Task Assignment"}),": Chooses tasks for level generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set Piece Addition"}),": Adds boons, traps, points of interest"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Map Generation"}),": Creates terrain and topology"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entity Injection"}),": Places world entities and objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Metadata Recording"}),": Adds build version and mod information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Serialization"}),": Converts to save data format"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"profile-world-gen",children:"PROFILE_world_gen(debug)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGenerates a world with performance profiling enabled. Outputs detailed timing information to profile.txt file."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"debug"})," (boolean): Whether to enable debug mode during profiling"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): World save data with profiling information"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Generate world with profiling\nlocal profiled_data = PROFILE_world_gen(false)\n-- Check profile.txt for timing details\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"show-debug",children:"ShowDebug(savedata)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nDisplays debug visualization of generated world entities. Shows entity positions and special data like wormhole connections."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"savedata"})," (table): Complete world save data to visualize"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Show debug visualization after generation\nif savedata then\n    ShowDebug(savedata)\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Debug Information Displayed:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entity positions scaled to map coordinates"}),"\n",(0,r.jsx)(n.li,{children:"Wormhole target connections"}),"\n",(0,r.jsx)(n.li,{children:"Set piece placements"}),"\n",(0,r.jsx)(n.li,{children:"Special entity data"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"check-map-savedata",children:"CheckMapSaveData(savedata)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nValidates that generated save data contains all required map components. Throws assertions if critical data is missing."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"savedata"})," (table): World save data to validate"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nNone (throws assertion on failure)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Validation Checks:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Map structure exists"}),"\n",(0,r.jsx)(n.li,{children:"Map prefab is set"}),"\n",(0,r.jsx)(n.li,{children:"Tile data is present"}),"\n",(0,r.jsx)(n.li,{children:"Map dimensions are defined"}),"\n",(0,r.jsx)(n.li,{children:"Topology information exists"}),"\n",(0,r.jsx)(n.li,{children:"Entity list is present"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Validate generated world data\nCheckMapSaveData(savedata)\nprint("Map validation passed!")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"validate-line-number",children:"ValidateLineNumber(num)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"added in build 676312"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nA placeholder utility function that provides a consistent API for line number validation across different execution contexts. In the world generation environment, this function performs no operations but maintains compatibility with debugging tools that may call it."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"num"})," (number): Line number to validate (parameter is ignored)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function ValidateLineNumber(num)\n    --do nothing\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"}),"\nThis function serves as a compatibility shim for debugging and development tools that expect line number validation functionality. While it performs no actual validation in the world generation context, it prevents errors when debugging tools attempt to call it."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Called by debugging tools, but does nothing in worldgen\nValidateLineNumber(42)\n\n-- Safe to call without effect\nlocal line_num = 100\nValidateLineNumber(line_num)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Added in build 676312 for debugging tool compatibility"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"set-piece-management",children:"Set Piece Management"}),"\n",(0,r.jsx)(n.h3,{id:"add-set-pieces",children:"AddSetPeices(level)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nAdds set pieces (special structures and points of interest) to the level based on world setting overrides."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"level"})," (Level): The level object to modify"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\nNone (modifies level object)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Set Piece Types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Boons"}),": Beneficial structures and resources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Traps"}),": Dangerous areas and obstacles"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Points of Interest"}),": Special locations and landmarks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Protected Resources"}),": Guarded valuable areas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Touchstones"}),": Resurrection structures"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Override Settings:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'level.overrides = {\n    boons = "default",        -- never/rare/default/often/always\n    traps = "default",        -- never/rare/default/often/always\n    poi = "default",          -- never/rare/default/often/always\n    protected = "default",    -- never/rare/default/often/always\n    touchstone = "default"    -- never/rare/default/often/always\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local level = Level(level_data)\nAddSetPeices(level)\nprint("Set pieces added based on overrides")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,r.jsx)(n.h3,{id:"load-parameters-and-generate",children:"LoadParametersAndGenerate(debug)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nLoads world generation parameters from global GEN_PARAMETERS and initiates world generation."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"debug"})," (boolean): Whether to enable debug mode"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Serialized world save data"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameter Loading:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Decodes JSON parameters from GEN_PARAMETERS global"}),"\n",(0,r.jsx)(n.li,{children:"Sets DLC enabled status"}),"\n",(0,r.jsx)(n.li,{children:"Validates parameter completeness"}),"\n",(0,r.jsx)(n.li,{children:"Initiates generation process"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Parameters are typically set externally\nGEN_PARAMETERS = json.encode(world_gen_data)\nlocal result = LoadParametersAndGenerate(false)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"platform-detection-functions",children:"Platform Detection Functions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nPlatform detection utilities for platform-specific world generation behavior. These functions check the global PLATFORM variable to determine the current platform."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'function IsConsole()\n    return (PLATFORM == "PS4") or (PLATFORM == "XBONE")\nend\n\nfunction IsNotConsole()\n    return not IsConsole()\nend\n\nfunction IsPS4()\n    return (PLATFORM == "PS4")\nend\n\nfunction IsPS5()\n    return (PLATFORM == "PS5")\nend\n\nfunction IsXB1()\n    return (PLATFORM == "XBONE")\nend\n\nfunction IsSteam()\n    return PLATFORM == "WIN32_STEAM" or PLATFORM == "LINUX_STEAM" or PLATFORM == "OSX_STEAM"\nend\n\nfunction IsLinux()\n    return PLATFORM == "LINUX_STEAM"\nend\n\nfunction IsRail()\n    return PLATFORM == "WIN32_RAIL"\nend\n\nfunction IsSteamDeck()\n    return IS_STEAM_DECK\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Platform Constants:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Console Platforms"}),": ",(0,r.jsx)(n.code,{children:'"PS4"'}),", ",(0,r.jsx)(n.code,{children:'"PS5"'}),", ",(0,r.jsx)(n.code,{children:'"XBONE"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Steam Platforms"}),": ",(0,r.jsx)(n.code,{children:'"WIN32_STEAM"'}),", ",(0,r.jsx)(n.code,{children:'"LINUX_STEAM"'}),", ",(0,r.jsx)(n.code,{children:'"OSX_STEAM"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Other Platforms"}),": ",(0,r.jsx)(n.code,{children:'"WIN32_RAIL"'})," (WeGame)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Special"}),": ",(0,r.jsx)(n.code,{children:"IS_STEAM_DECK"})," global variable for Steam Deck detection"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'if IsConsole() then\n    -- Apply console-specific generation settings\n    max_entities = 1000\n    print("Console platform detected:", PLATFORM)\nelse\n    -- PC can handle more entities  \n    max_entities = 2000\n    print("PC platform detected:", PLATFORM)\nend\n\n-- Platform-specific optimizations\nif IsSteam() then\n    -- Steam-specific features\n    enable_steam_workshop = true\nelseif IsRail() then\n    -- WeGame platform adjustments\n    enable_rail_features = true\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,r.jsx)(n.h3,{id:"package-path-configuration",children:"Package Path Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The module configures custom package loading for the world generation environment:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'package.path = "scripts\\\\?.lua;scriptlibs\\\\?.lua"\npackage.assetpath = {}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"custom-module-loader",children:"Custom Module Loader"}),"\n",(0,r.jsx)(n.p,{children:"Implements specialized module loading for mod support and asset management:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mod Manifest Support"}),": Loads mods with proper manifest paths"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Asset Path Resolution"}),": Resolves script paths for different platforms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fallback Loading"}),": Uses kleiloadlua for custom file loading"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"required-dependencies",children:"Required Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"The module loads essential systems for world generation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Core Systems"}),": util, class, vector3, constants, tuning"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Map Systems"}),": tasks, levels, rooms, tasksets, forest_map"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mod Support"}),": mods, modindex, mod data handling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Processing"}),": json, dumper, savefileupgrades"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"generation-retry-logic",children:"Generation Retry Logic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local try = 1\nlocal maxtries = 5\n\nwhile savedata == nil do\n    savedata = forest_map.Generate(...)\n    \n    if savedata == nil then\n        if try >= maxtries then\n            print("World generation failed after", maxtries, "attempts")\n            return nil\n        else\n            print("Retrying world generation, attempt", try, "of", maxtries)\n        end\n        try = try + 1\n        collectgarbage("collect")\n        WorldSim:ResetAll()\n    end\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Garbage Collection"}),": Forces collection between retry attempts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WorldSim Reset"}),": Clears simulation state for clean retries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Cleanup"}),": Manages memory during intensive generation"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"save-data-structure",children:"Save Data Structure"}),"\n",(0,r.jsx)(n.h3,{id:"generated-save-data-format",children:"Generated Save Data Format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'savedata = {\n    map = {\n        prefab = "forest",           -- World location\n        width = 1024,               -- Map width in tiles\n        height = 1024,              -- Map height in tiles\n        tiles = {...},              -- Tile type array\n        topology = {...},           -- Room and connection data\n        name = "Standard World",    -- Level display name\n        hideminimap = false        -- Minimap visibility\n    },\n    ents = {                       -- Entity placement data\n        ["prefab_name"] = {        -- Array of entity instances\n            {x = 100, z = 200, data = {...}},\n            -- Additional instances...\n        }\n    },\n    meta = {                       -- Generation metadata\n        build_version = "676042",\n        build_date = "2025-06-21",\n        seed = 1234567890,\n        level_id = "SURVIVAL_TOGETHER",\n        session_identifier = "unique_id"\n    },\n    mods = {...}                   -- Mod configuration data\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"data-serialization",children:"Data Serialization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pretty Printing"}),": Development builds use formatted output"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entity Separation"}),": Entities serialized individually for efficiency"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Metadata Tracking"}),": Records build version and generation parameters"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"generation-optimization",children:"Generation Optimization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Retry Mechanism"}),": Handles generation failures gracefully"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Management"}),": Clears resources between attempts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Profiling Support"}),": Built-in performance analysis tools"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"map-size-limits",children:"Map Size Limits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default Size"}),": 1024x1024 tiles for standard worlds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Constraints"}),": Balanced for different platforms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entity Density"}),": Optimized placement algorithms"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../map/forest_map.md",children:(0,r.jsx)(n.code,{children:"forest_map"})}),": Core map generation algorithms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../map/levels.md",children:(0,r.jsx)(n.code,{children:"levels"})}),": Level definition and configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../map/tasks.md",children:(0,r.jsx)(n.code,{children:"tasks"})}),": World generation task system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../map/rooms.md",children:(0,r.jsx)(n.code,{children:"rooms"})}),": Room placement and connectivity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./worldentities.md",children:(0,r.jsx)(n.code,{children:"worldentities"})}),": World entity injection system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./mods.md",children:(0,r.jsx)(n.code,{children:"mods"})}),": Mod loading and integration system"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"recent-changes",children:"Recent Changes"}),"\n",(0,r.jsx)(n.h3,{id:"build-676312-utility-addition",children:"Build 676312 Utility Addition"}),"\n",(0,r.jsx)(n.p,{children:"A new utility function was added to support debugging and development workflows:"}),"\n",(0,r.jsx)(n.h4,{id:"validatelinenumber-function",children:"ValidateLineNumber Function"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function ValidateLineNumber(num)\n    --do nothing\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," This placeholder function provides a consistent API for line number validation across different execution contexts. In the world generation environment, it performs no operations but maintains compatibility with debugging tools that may call it."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);