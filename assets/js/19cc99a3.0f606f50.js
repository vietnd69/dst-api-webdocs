"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[217],{8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var i=t(6540);const s={},l=i.createContext(s);function a(n){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(l.Provider,{value:e},n.children)}},8598:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/localization/testing-localization","title":"Testing Localized Content","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/localization/testing-localization.md","sourceDirName":"api-vanilla/localization","slug":"/api-vanilla/localization/testing-localization","permalink":"/dst-api-webdocs/docs/api-vanilla/localization/testing-localization","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"testing-localization","title":"Testing Localized Content","sidebar_position":6,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Localization Best Practices","permalink":"/dst-api-webdocs/docs/api-vanilla/localization/best-practices"},"next":{"title":"Shared Properties","permalink":"/dst-api-webdocs/docs/category/shared-properties"}}');var s=t(4848),l=t(8453);const a={id:"testing-localization",title:"Testing Localized Content",sidebar_position:6,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},r="Testing Localized Content",o={},c=[{value:"Why Testing Localization Matters",id:"why-testing-localization-matters",level:2},{value:"Testing Preparation",id:"testing-preparation",level:2},{value:"Create a Testing Plan",id:"create-a-testing-plan",level:3},{value:"Set Up Testing Environments",id:"set-up-testing-environments",level:3},{value:"Automated Testing",id:"automated-testing",level:2},{value:"String Validation",id:"string-validation",level:3},{value:"Placeholder Validation",id:"placeholder-validation",level:3},{value:"Length Validation",id:"length-validation",level:3},{value:"Manual Testing",id:"manual-testing",level:2},{value:"Visual Inspection",id:"visual-inspection",level:3},{value:"Functional Testing",id:"functional-testing",level:3},{value:"In-Game Testing Tools",id:"in-game-testing-tools",level:2},{value:"Pseudo-Localization Testing",id:"pseudo-localization-testing",level:2},{value:"Regression Testing",id:"regression-testing",level:2},{value:"Community Testing",id:"community-testing",level:2},{value:"Localization Testing Checklist",id:"localization-testing-checklist",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"testing-localized-content",children:"Testing Localized Content"})}),"\n",(0,s.jsx)(e.p,{children:"This guide covers comprehensive approaches for testing localized content in your Don't Starve Together mods to ensure high quality across all supported languages."}),"\n",(0,s.jsx)(e.h2,{id:"why-testing-localization-matters",children:"Why Testing Localization Matters"}),"\n",(0,s.jsx)(e.p,{children:"Thorough localization testing helps you:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Catch missing translations"})," before players do"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Identify visual issues"})," like text overflow or improper line breaks"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Ensure functionality"})," works correctly across languages"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Verify cultural appropriateness"})," of content"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Maintain consistent quality"})," across all supported languages"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"testing-preparation",children:"Testing Preparation"}),"\n",(0,s.jsx)(e.h3,{id:"create-a-testing-plan",children:"Create a Testing Plan"}),"\n",(0,s.jsx)(e.p,{children:"Before testing, develop a structured plan:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Identify test scenarios"})," covering all localized content"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Create a test matrix"})," for each supported language"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Set up testing environments"})," for each language"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Prepare test data"})," including edge cases"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Define acceptance criteria"})," for passing tests"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"set-up-testing-environments",children:"Set Up Testing Environments"}),"\n",(0,s.jsx)(e.p,{children:"Configure your testing environment to easily switch between languages:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua for testing\nlocal function SetupTestingEnvironment()\n    -- List of languages to test\n    local test_languages = {"en", "zh", "ru", "es", "pt", "de", "fr"}\n    \n    -- Create a global function to switch languages for testing\n    GLOBAL.SwitchLanguageForTesting = function(language_code)\n        if table.contains(test_languages, language_code) then\n            print("Switching to test language: " .. language_code)\n            \n            -- Override the default language\n            GLOBAL.LanguageTranslator.defaultlanguage = language_code\n            \n            -- Load the appropriate language file\n            local language_file = "scripts/languages/strings_" .. language_code .. ".lua"\n            if GLOBAL.kleifileexists(language_file) then\n                modimport(language_file)\n                return true\n            else\n                print("Warning: Language file not found for " .. language_code)\n                return false\n            end\n        else\n            print("Error: Unsupported test language: " .. language_code)\n            return false\n        end\n    end\n    \n    -- Add a console command for easy language switching\n    GLOBAL.TheInput:AddKeyDownHandler(GLOBAL.KEY_F7, function()\n        -- Cycle through test languages\n        local current_idx = table.indexof(test_languages, GLOBAL.LanguageTranslator.defaultlanguage) or 0\n        local next_idx = (current_idx % #test_languages) + 1\n        GLOBAL.SwitchLanguageForTesting(test_languages[next_idx])\n        \n        -- Refresh UI if needed\n        if GLOBAL.TheFrontEnd and GLOBAL.TheFrontEnd:GetActiveScreen() then\n            GLOBAL.TheFrontEnd:GetActiveScreen():RefreshLanguage()\n        end\n    end)\nend\n\n-- Only enable in development\nif GLOBAL.DEVELOPMENT_BUILD then\n    SetupTestingEnvironment()\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"automated-testing",children:"Automated Testing"}),"\n",(0,s.jsx)(e.h3,{id:"string-validation",children:"String Validation"}),"\n",(0,s.jsx)(e.p,{children:"Create scripts to automatically validate translations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Check for missing translations\nlocal function ValidateMissingTranslations()\n    local results = {}\n    \n    -- Base language (English)\n    local base_strings = STRINGS.MY_MOD\n    \n    -- Check each supported language\n    local supported_languages = {"zh", "ru", "es", "pt", "de", "fr"}\n    \n    for _, lang in ipairs(supported_languages) do\n        -- Load language strings\n        local language_file = "scripts/languages/strings_" .. lang .. ".lua"\n        local success = pcall(modimport, language_file)\n        \n        if success then\n            -- Compare with base language\n            local missing = {}\n            local function CheckStrings(base, translated, path)\n                path = path or ""\n                for key, value in pairs(base) do\n                    local current_path = path .. (path ~= "" and "." or "") .. key\n                    \n                    if type(value) == "table" then\n                        -- Recursive check for nested tables\n                        if translated[key] == nil then\n                            table.insert(missing, current_path)\n                        else\n                            CheckStrings(value, translated[key], current_path)\n                        end\n                    else\n                        -- Check string value\n                        if translated[key] == nil then\n                            table.insert(missing, current_path)\n                        elseif translated[key] == value then\n                            -- Untranslated string (same as English)\n                            table.insert(missing, current_path .. " (untranslated)")\n                        end\n                    end\n                end\n            end\n            \n            -- Store original strings\n            local original_strings = STRINGS.MY_MOD\n            \n            -- Check strings\n            CheckStrings(base_strings, STRINGS.MY_MOD)\n            \n            -- Restore original strings\n            STRINGS.MY_MOD = original_strings\n            \n            -- Store results\n            results[lang] = missing\n        else\n            print("Failed to load language file: " .. language_file)\n        end\n    end\n    \n    -- Print results\n    for lang, missing in pairs(results) do\n        print("=== Missing translations for " .. lang .. " ===")\n        if #missing == 0 then\n            print("No missing translations!")\n        else\n            for _, path in ipairs(missing) do\n                print("  - " .. path)\n            end\n        end\n        print("")\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"placeholder-validation",children:"Placeholder Validation"}),"\n",(0,s.jsx)(e.p,{children:"Check that all placeholders are properly handled:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Validate placeholder usage\nlocal function ValidatePlaceholders()\n    local issues = {}\n    \n    -- Find strings with placeholders\n    local function FindPlaceholders(strings, path)\n        path = path or ""\n        for key, value in pairs(strings) do\n            local current_path = path .. (path ~= "" and "." or "") .. key\n            \n            if type(value) == "string" then\n                -- Check for placeholders like {name}\n                local placeholders = {}\n                for placeholder in value:gmatch("{([^}]+)}") do\n                    table.insert(placeholders, placeholder)\n                end\n                \n                if #placeholders > 0 then\n                    -- Store string with placeholders\n                    table.insert(issues, {\n                        path = current_path,\n                        string = value,\n                        placeholders = placeholders\n                    })\n                end\n            elseif type(value) == "table" then\n                -- Recursive check\n                FindPlaceholders(value, current_path)\n            end\n        end\n    end\n    \n    -- Check base language\n    FindPlaceholders(STRINGS.MY_MOD)\n    \n    -- Print results\n    print("=== Strings with placeholders ===")\n    for _, issue in ipairs(issues) do\n        print(issue.path .. ": \\"" .. issue.string .. "\\"")\n        print("  Placeholders: " .. table.concat(issue.placeholders, ", "))\n    end\n    \n    -- Now check each language for missing placeholders\n    local supported_languages = {"zh", "ru", "es", "pt", "de", "fr"}\n    \n    for _, lang in ipairs(supported_languages) do\n        -- Load language strings\n        local language_file = "scripts/languages/strings_" .. lang .. ".lua"\n        local success = pcall(modimport, language_file)\n        \n        if success then\n            local lang_issues = {}\n            \n            -- Check each string with placeholders\n            for _, issue in ipairs(issues) do\n                -- Navigate to the translated string\n                local path_parts = {}\n                for part in issue.path:gmatch("[^.]+") do\n                    table.insert(path_parts, part)\n                end\n                \n                local translated_string = STRINGS.MY_MOD\n                local found = true\n                \n                for _, part in ipairs(path_parts) do\n                    if translated_string[part] ~= nil then\n                        translated_string = translated_string[part]\n                    else\n                        found = false\n                        break\n                    end\n                end\n                \n                if found and type(translated_string) == "string" then\n                    -- Check for each placeholder\n                    for _, placeholder in ipairs(issue.placeholders) do\n                        if not translated_string:find("{" .. placeholder .. "}") then\n                            table.insert(lang_issues, {\n                                path = issue.path,\n                                missing = placeholder,\n                                string = translated_string\n                            })\n                        end\n                    end\n                end\n            end\n            \n            -- Print results for this language\n            if #lang_issues > 0 then\n                print("\\n=== Placeholder issues in " .. lang .. " ===")\n                for _, issue in ipairs(lang_issues) do\n                    print(issue.path .. ": Missing placeholder {" .. issue.missing .. "}")\n                    print("  String: \\"" .. issue.string .. "\\"")\n                end\n            end\n        end\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h3,{id:"length-validation",children:"Length Validation"}),"\n",(0,s.jsx)(e.p,{children:"Check for text that might be too long for UI elements:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Validate string lengths\nlocal function ValidateStringLengths()\n    -- Define maximum lengths for different UI elements\n    local max_lengths = {\n        BUTTON = 15,\n        TITLE = 30,\n        TOOLTIP = 100,\n        DESCRIPTION = 200\n    }\n    \n    local issues = {}\n    \n    -- Check string lengths\n    local function CheckLengths(strings, path, category)\n        path = path or ""\n        for key, value in pairs(strings) do\n            local current_path = path .. (path ~= "" and "." or "") .. key\n            local current_category = category\n            \n            -- Try to determine category from path\n            if not current_category then\n                if current_path:find("BUTTON") then\n                    current_category = "BUTTON"\n                elseif current_path:find("TITLE") then\n                    current_category = "TITLE"\n                elseif current_path:find("TOOLTIP") then\n                    current_category = "TOOLTIP"\n                elseif current_path:find("DESCRIPTION") then\n                    current_category = "DESCRIPTION"\n                end\n            end\n            \n            if type(value) == "string" and current_category and max_lengths[current_category] then\n                -- Check length\n                if value:len() > max_lengths[current_category] then\n                    table.insert(issues, {\n                        path = current_path,\n                        category = current_category,\n                        length = value:len(),\n                        max_length = max_lengths[current_category],\n                        string = value\n                    })\n                end\n            elseif type(value) == "table" then\n                -- Recursive check\n                local next_category = current_category\n                if key == "BUTTONS" then\n                    next_category = "BUTTON"\n                elseif key == "TITLES" then\n                    next_category = "TITLE"\n                elseif key == "TOOLTIPS" then\n                    next_category = "TOOLTIP"\n                elseif key == "DESCRIPTIONS" or key == "DESCRIPTION" then\n                    next_category = "DESCRIPTION"\n                end\n                \n                CheckLengths(value, current_path, next_category)\n            end\n        end\n    end\n    \n    -- Check each language\n    local supported_languages = {"en", "zh", "ru", "es", "pt", "de", "fr"}\n    \n    for _, lang in ipairs(supported_languages) do\n        -- Load language strings\n        local original_strings = STRINGS.MY_MOD\n        \n        if lang ~= "en" then\n            local language_file = "scripts/languages/strings_" .. lang .. ".lua"\n            local success = pcall(modimport, language_file)\n            if not success then\n                print("Failed to load language file: " .. language_file)\n                goto continue\n            end\n        end\n        \n        -- Check lengths\n        local lang_issues = {}\n        CheckLengths(STRINGS.MY_MOD)\n        \n        -- Print results\n        if #issues > 0 then\n            print("\\n=== String length issues in " .. lang .. " ===")\n            for _, issue in ipairs(issues) do\n                print(issue.path .. " (" .. issue.length .. "/" .. issue.max_length .. ")")\n                print("  \\"" .. issue.string .. "\\"")\n            end\n        end\n        \n        -- Restore original strings\n        STRINGS.MY_MOD = original_strings\n        \n        ::continue::\n    end\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"manual-testing",children:"Manual Testing"}),"\n",(0,s.jsx)(e.h3,{id:"visual-inspection",children:"Visual Inspection"}),"\n",(0,s.jsx)(e.p,{children:"Conduct visual inspections of all UI elements:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Screenshot Comparison"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Take screenshots of UI in each language"}),"\n",(0,s.jsx)(e.li,{children:"Compare side by side for visual issues"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"UI Element Checklist"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Buttons and labels"}),"\n",(0,s.jsx)(e.li,{children:"Tooltips and descriptions"}),"\n",(0,s.jsx)(e.li,{children:"Menus and dialogs"}),"\n",(0,s.jsx)(e.li,{children:"Error messages"}),"\n",(0,s.jsx)(e.li,{children:"Status indicators"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Dynamic Text"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Test with variable content (long names, numbers)"}),"\n",(0,s.jsx)(e.li,{children:"Check text wrapping and truncation"}),"\n",(0,s.jsx)(e.li,{children:"Verify animations and transitions"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"functional-testing",children:"Functional Testing"}),"\n",(0,s.jsx)(e.p,{children:"Test all functionality that involves localized content:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Gameplay Features"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Character dialogue"}),"\n",(0,s.jsx)(e.li,{children:"Item descriptions"}),"\n",(0,s.jsx)(e.li,{children:"Quest text"}),"\n",(0,s.jsx)(e.li,{children:"Tutorial instructions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"User Interactions"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Input prompts"}),"\n",(0,s.jsx)(e.li,{children:"Feedback messages"}),"\n",(0,s.jsx)(e.li,{children:"Error handling"}),"\n",(0,s.jsx)(e.li,{children:"Help text"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Edge Cases"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Very long text"}),"\n",(0,s.jsx)(e.li,{children:"Special characters"}),"\n",(0,s.jsx)(e.li,{children:"Right-to-left text (if supported)"}),"\n",(0,s.jsx)(e.li,{children:"Mixed language content"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"in-game-testing-tools",children:"In-Game Testing Tools"}),"\n",(0,s.jsx)(e.p,{children:"Create in-game tools to help with localization testing:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Add a debug screen for localization testing\nlocal function CreateLocalizationTestScreen()\n    local LocTestScreen = Class(Screen, function(self)\n        Screen._ctor(self, "LocTestScreen")\n        \n        -- Background\n        self.bg = self:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n        self.bg:SetSize(GLOBAL.RESOLUTION_X, GLOBAL.RESOLUTION_Y)\n        self.bg:SetTint(0, 0, 0, 0.7)\n        \n        -- Title\n        self.title = self:AddChild(Text(GLOBAL.TITLEFONT, 40))\n        self.title:SetPosition(0, GLOBAL.RESOLUTION_Y/2 - 50)\n        self.title:SetString("Localization Test Screen")\n        \n        -- Current language\n        self.lang_text = self:AddChild(Text(GLOBAL.DIALOGFONT, 30))\n        self.lang_text:SetPosition(0, GLOBAL.RESOLUTION_Y/2 - 100)\n        self.lang_text:SetString("Current Language: " .. GLOBAL.LanguageTranslator.defaultlanguage)\n        \n        -- Test categories\n        self:CreateTestCategories()\n        \n        -- Close button\n        self.close_button = self:AddChild(TextButton())\n        self.close_button:SetPosition(0, -GLOBAL.RESOLUTION_Y/2 + 50)\n        self.close_button:SetText("Close")\n        self.close_button:SetOnClick(function() self:Close() end)\n        \n        -- Language switcher\n        self.lang_button = self:AddChild(TextButton())\n        self.lang_button:SetPosition(200, -GLOBAL.RESOLUTION_Y/2 + 50)\n        self.lang_button:SetText("Switch Language")\n        self.lang_button:SetOnClick(function() self:SwitchLanguage() end)\n    end)\n    \n    function LocTestScreen:CreateTestCategories()\n        local categories = {\n            {name = "UI Elements", strings = STRINGS.MY_MOD.UI},\n            {name = "Items", strings = STRINGS.MY_MOD.ITEMS},\n            {name = "Characters", strings = STRINGS.MY_MOD.CHARACTERS},\n            -- Add more categories as needed\n        }\n        \n        self.category_widgets = {}\n        local y_pos = GLOBAL.RESOLUTION_Y/2 - 150\n        local spacing = 40\n        \n        for i, category in ipairs(categories) do\n            local widget = self:AddChild(Widget("CategoryWidget"))\n            widget:SetPosition(0, y_pos - (i-1) * spacing * 3)\n            \n            -- Category title\n            local title = widget:AddChild(Text(GLOBAL.DIALOGFONT, 30))\n            title:SetPosition(0, spacing)\n            title:SetString(category.name)\n            \n            -- Sample strings\n            local sample_count = 0\n            local function AddSampleString(key, value, depth)\n                depth = depth or 0\n                if type(value) == "string" then\n                    local sample = widget:AddChild(Text(GLOBAL.DIALOGFONT, 20))\n                    sample:SetPosition(50 * depth, spacing - (sample_count + 1) * spacing)\n                    sample:SetString(key .. ": " .. value)\n                    sample_count = sample_count + 1\n                    \n                    -- Limit samples per category\n                    if sample_count >= 5 then\n                        return false\n                    end\n                    return true\n                elseif type(value) == "table" then\n                    for k, v in pairs(value) do\n                        if not AddSampleString(k, v, depth + 1) then\n                            return false\n                        end\n                    end\n                end\n                return true\n            end\n            \n            -- Add sample strings from this category\n            for k, v in pairs(category.strings) do\n                if not AddSampleString(k, v) then\n                    break\n                end\n            end\n            \n            table.insert(self.category_widgets, widget)\n        end\n    end\n    \n    function LocTestScreen:RefreshLanguage()\n        -- Update language display\n        self.lang_text:SetString("Current Language: " .. GLOBAL.LanguageTranslator.defaultlanguage)\n        \n        -- Remove old category widgets\n        for _, widget in ipairs(self.category_widgets) do\n            widget:Kill()\n        end\n        \n        -- Recreate with new language\n        self:CreateTestCategories()\n    end\n    \n    function LocTestScreen:SwitchLanguage()\n        local supported_languages = {"en", "zh", "ru", "es", "pt", "de", "fr"}\n        local current_idx = table.indexof(supported_languages, GLOBAL.LanguageTranslator.defaultlanguage) or 0\n        local next_idx = (current_idx % #supported_languages) + 1\n        \n        if GLOBAL.SwitchLanguageForTesting then\n            GLOBAL.SwitchLanguageForTesting(supported_languages[next_idx])\n            self:RefreshLanguage()\n        end\n    end\n    \n    function LocTestScreen:Close()\n        GLOBAL.TheFrontEnd:PopScreen()\n    end\n    \n    return LocTestScreen\nend\n\n-- Add a console command to open the test screen\nGLOBAL.TheInput:AddKeyDownHandler(GLOBAL.KEY_F8, function()\n    if GLOBAL.DEVELOPMENT_BUILD and GLOBAL.TheFrontEnd then\n        local LocTestScreen = CreateLocalizationTestScreen()\n        GLOBAL.TheFrontEnd:PushScreen(LocTestScreen())\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"pseudo-localization-testing",children:"Pseudo-Localization Testing"}),"\n",(0,s.jsx)(e.p,{children:"Pseudo-localization helps identify issues before real translations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Create a pseudo-localization function\nlocal function PseudoLocalize(text)\n    if type(text) ~= "string" then\n        return text\n    end\n    \n    -- Map for pseudo-localization\n    local char_map = {\n        a = "\xe4", b = "\u1e05", c = "\xe7", d = "\u1e0d", e = "\xeb", f = "\u1e1f",\n        g = "\u0121", h = "\u1e25", i = "\xef", j = "\u0135", k = "\u1e33", l = "\u1e37",\n        m = "\u1e43", n = "\xf1", o = "\xf6", p = "\u1e57", q = "q\u0307", r = "\u1e5b",\n        s = "\u1e61", t = "\u1e6d", u = "\xfc", v = "\u1e7f", w = "\u1e87", x = "\u1e8b",\n        y = "\xff", z = "\u017c", A = "\xc4", B = "\u1e04", C = "\xc7", D = "\u1e0c",\n        E = "\xcb", F = "\u1e1e", G = "\u0120", H = "\u1e24", I = "\xcf", J = "\u0134",\n        K = "\u1e32", L = "\u1e36", M = "\u1e42", N = "\xd1", O = "\xd6", P = "\u1e56",\n        Q = "Q\u0307", R = "\u1e5a", S = "\u1e60", T = "\u1e6c", U = "\xdc", V = "\u1e7e",\n        W = "\u1e86", X = "\u1e8a", Y = "\u0178", Z = "\u017b"\n    }\n    \n    -- Replace characters and expand length by ~30%\n    local result = ""\n    for i = 1, string.len(text) do\n        local char = string.sub(text, i, i)\n        result = result .. (char_map[char] or char)\n    end\n    \n    -- Expand by ~30% to simulate longer translations\n    return "[" .. result .. "...]"\nend\n\n-- Apply pseudo-localization to all strings\nlocal function PseudoLocalizeStrings(strings)\n    for key, value in pairs(strings) do\n        if type(value) == "string" then\n            strings[key] = PseudoLocalize(value)\n        elseif type(value) == "table" then\n            PseudoLocalizeStrings(value)\n        end\n    end\nend\n\n-- Create a pseudo-localized version for testing\nlocal function CreatePseudoLocalization()\n    -- Make a deep copy of English strings\n    local function DeepCopy(orig)\n        local copy\n        if type(orig) == "table" then\n            copy = {}\n            for orig_key, orig_value in pairs(orig) do\n                copy[orig_key] = DeepCopy(orig_value)\n            end\n        else\n            copy = orig\n        end\n        return copy\n    end\n    \n    local pseudo_strings = DeepCopy(STRINGS.MY_MOD)\n    \n    -- Apply pseudo-localization\n    PseudoLocalizeStrings(pseudo_strings)\n    \n    -- Save to a file for testing\n    local file = io.open("scripts/languages/strings_pseudo.lua", "w")\n    if file then\n        file:write("-- Pseudo-localized strings for testing\\n\\n")\n        file:write("STRINGS = GLOBAL.STRINGS\\n\\n")\n        \n        -- Write strings table\n        local function WriteTable(tbl, name, indent)\n            indent = indent or ""\n            file:write(indent .. name .. " = {\\n")\n            \n            for k, v in pairs(tbl) do\n                if type(v) == "table" then\n                    WriteTable(v, k, indent .. "    ")\n                else\n                    file:write(indent .. "    " .. k .. " = \\"" .. tostring(v):gsub("\\"", "\\\\\\"") .. "\\",\\n")\n                end\n            end\n            \n            file:write(indent .. "},\\n")\n        end\n        \n        WriteTable(pseudo_strings, "STRINGS.MY_MOD")\n        file:close()\n        \n        print("Pseudo-localization file created: scripts/languages/strings_pseudo.lua")\n    else\n        print("Failed to create pseudo-localization file")\n    end\nend\n\n-- Add a console command to create pseudo-localization\nif GLOBAL.DEVELOPMENT_BUILD then\n    GLOBAL.TheInput:AddKeyDownHandler(GLOBAL.KEY_F9, function()\n        CreatePseudoLocalization()\n    end)\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"regression-testing",children:"Regression Testing"}),"\n",(0,s.jsx)(e.p,{children:"Implement regression testing for localization:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Automated Screenshot Comparison"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Take screenshots of key UI elements in each language"}),"\n",(0,s.jsx)(e.li,{children:"Compare with baseline images to detect changes"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"String Validation After Updates"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Run validation scripts after each content update"}),"\n",(0,s.jsx)(e.li,{children:"Ensure new content is properly localized"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Version Control Integration"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Add localization tests to your CI/CD pipeline"}),"\n",(0,s.jsx)(e.li,{children:"Block merges that break localization"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"community-testing",children:"Community Testing"}),"\n",(0,s.jsx)(e.p,{children:"Leverage the community for additional testing:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Beta Testing Program"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Invite native speakers to test your mod"}),"\n",(0,s.jsx)(e.li,{children:"Provide clear reporting guidelines"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Feedback Channels"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Create a dedicated channel for translation issues"}),"\n",(0,s.jsx)(e.li,{children:"Make it easy to report problems"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Continuous Improvement"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Regularly update translations based on feedback"}),"\n",(0,s.jsx)(e.li,{children:"Credit community contributors"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"localization-testing-checklist",children:"Localization Testing Checklist"}),"\n",(0,s.jsx)(e.p,{children:"Use this checklist for comprehensive testing:"}),"\n",(0,s.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Completeness"}),": All strings are translated in all supported languages"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Accuracy"}),": Translations correctly convey the original meaning"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Formatting"}),": Placeholders, line breaks, and special characters work correctly"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Visual"}),": No text overflow, improper wrapping, or truncation"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Functionality"}),": All features work correctly in all languages"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Performance"}),": No significant performance impact from localization"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Cultural"}),": Content is culturally appropriate in all languages"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Consistency"}),": Terminology is consistent throughout the mod"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Accessibility"}),": Text is readable and appropriately sized"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(e.strong,{children:"Documentation"}),": All documentation is updated for all languages"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(e.p,{children:"Thorough localization testing is essential for creating a high-quality multilingual mod. By implementing automated tests, conducting manual inspections, and leveraging community feedback, you can ensure your mod provides an excellent experience for players worldwide."}),"\n",(0,s.jsx)(e.p,{children:"Remember that localization is an ongoing process. As you update your mod with new content, continue to apply these testing practices to maintain quality across all supported languages."})]})}function g(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);