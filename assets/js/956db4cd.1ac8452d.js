"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5576],{1556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"api-vanilla/stategraphs/events","title":"Stategraph Events","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/stategraphs/events.md","sourceDirName":"api-vanilla/stategraphs","slug":"/api-vanilla/stategraphs/events","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"events","title":"Stategraph Events","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"States API","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/states"},"next":{"title":"Action Handlers","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/actionhandlers"}}');var s=t(4848),i=t(8453);const d={id:"events",title:"Stategraph Events",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Stategraph Events",o={},r=[{value:"Event Handlers",id:"event-handlers",level:2},{value:"Common Events",id:"common-events",level:2},{value:"Animation Events",id:"animation-events",level:3},{value:"Combat Events",id:"combat-events",level:3},{value:"Movement Events",id:"movement-events",level:3},{value:"Status Events",id:"status-events",level:3},{value:"Custom Events",id:"custom-events",level:3},{value:"Event Data",id:"event-data",level:2},{value:"Global Event Handlers",id:"global-event-handlers",level:2},{value:"State-Specific Event Handlers",id:"state-specific-event-handlers",level:2},{value:"Common Event Handlers",id:"common-event-handlers",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"stategraph-events",children:"Stategraph Events"})}),"\n",(0,s.jsx)(n.p,{children:"Events are the mechanism that drives state transitions in the stategraph system. They allow entities to respond to game triggers and change their behavior accordingly."}),"\n",(0,s.jsx)(n.h2,{id:"event-handlers",children:"Event Handlers"}),"\n",(0,s.jsxs)(n.p,{children:["Event handlers are created using the ",(0,s.jsx)(n.code,{children:"EventHandler"})," constructor, which takes an event name and a callback function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'EventHandler("attacked", function(inst, data)\n    inst.sg:GoToState("hit")\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-events",children:"Common Events"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together has many built-in events that you can listen for:"}),"\n",(0,s.jsx)(n.h3,{id:"animation-events",children:"Animation Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"animover"}),": Triggered when an animation completes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"animqueueover"}),": Triggered when all queued animations complete"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'EventHandler("animover", function(inst)\n    inst.sg:GoToState("idle")\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"combat-events",children:"Combat Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"attacked"}),": Triggered when the entity takes damage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"death"}),": Triggered when the entity dies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"doattack"}),": Triggered when the entity should perform an attack"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'EventHandler("attacked", function(inst, data)\n    if not inst.components.health:IsDead() then\n        inst.sg:GoToState("hit")\n    end\nend)\n\nEventHandler("death", function(inst)\n    inst.sg:GoToState("death")\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"movement-events",children:"Movement Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"locomote"}),": Triggered when the entity's movement parameters change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stopmovingdirection"}),": Triggered when the entity should stop moving"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"step"}),": Triggered when the entity should make a footstep sound"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'EventHandler("locomote", function(inst)\n    local is_moving = inst.sg:HasStateTag("moving")\n    local should_move = inst.components.locomotor:WantsToMoveForward()\n    \n    if is_moving and not should_move then\n        inst.sg:GoToState("idle")\n    elseif not is_moving and should_move then\n        inst.sg:GoToState("walk_start")\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"status-events",children:"Status Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"freeze"}),": Triggered when the entity is frozen"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unfreeze"}),": Triggered when the entity thaws"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"gotosleep"}),": Triggered when the entity should go to sleep"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"knockback"}),": Triggered when the entity is knocked back"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'EventHandler("freeze", function(inst)\n    if not inst.components.health:IsDead() then\n        inst.sg:GoToState("frozen")\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-events",children:"Custom Events"}),"\n",(0,s.jsx)(n.p,{children:"You can create and trigger custom events for specific gameplay needs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define a handler for a custom event\nEventHandler("startspecialability", function(inst, data)\n    inst.sg:GoToState("special_ability", data)\nend)\n\n-- Trigger the custom event elsewhere in code\ninst:PushEvent("startspecialability", {power = 10})\n'})}),"\n",(0,s.jsx)(n.h2,{id:"event-data",children:"Event Data"}),"\n",(0,s.jsx)(n.p,{children:"Events can include data that provides context about the event:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'EventHandler("attacked", function(inst, data)\n    -- data.attacker is the entity that attacked\n    -- data.damage is the amount of damage taken\n    if data.attacker and data.attacker:HasTag("player") then\n        inst.sg:GoToState("player_hit")\n    else\n        inst.sg:GoToState("monster_hit")\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"global-event-handlers",children:"Global Event Handlers"}),"\n",(0,s.jsx)(n.p,{children:"You can define event handlers at the stategraph level to handle events regardless of which state the entity is in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local events = {\n    EventHandler("death", function(inst)\n        inst.sg:GoToState("death")\n    end),\n    \n    EventHandler("attacked", function(inst, data)\n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("hit")\n        end\n    end),\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"state-specific-event-handlers",children:"State-Specific Event Handlers"}),"\n",(0,s.jsx)(n.p,{children:"You can also define event handlers that only apply when in a specific state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'State{\n    name = "idle",\n    tags = {"idle", "canrotate"},\n    \n    events = {\n        EventHandler("attacked", function(inst, data)\n            inst.sg:GoToState("hit")\n        end),\n        \n        EventHandler("doattack", function(inst)\n            inst.sg:GoToState("attack")\n        end),\n    },\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-event-handlers",children:"Common Event Handlers"}),"\n",(0,s.jsxs)(n.p,{children:["Don't Starve Together includes a library of common event handlers in ",(0,s.jsx)(n.code,{children:"commonstates.lua"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local events = {\n    -- Standard event handlers from CommonHandlers\n    CommonHandlers.OnStep(),\n    CommonHandlers.OnSleep(),\n    CommonHandlers.OnFreeze(),\n    CommonHandlers.OnAttacked(),\n    CommonHandlers.OnDeath(),\n    CommonHandlers.OnLocomote(true, true), -- can_run, can_walk\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This helps maintain consistent behavior across different entities while reducing code duplication."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var a=t(6540);const s={},i=a.createContext(s);function d(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);