"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4741],{3860:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-vanilla/examples/custom-world-generation","title":"Custom World Generation","description":"This guide provides a comprehensive overview of creating custom world generation in Don\'t Starve Together. You\'ll learn the fundamental concepts, approaches, and practical examples to create unique and engaging worlds for your mods.","source":"@site/docs/api-vanilla/examples/custom-world-generation.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/custom-world-generation","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-world-generation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"custom-world-generation","title":"Custom World Generation","sidebar_position":9},"sidebar":"docs","previous":{"title":"World Generation","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/worldgen-mod"},"next":{"title":"Creating Custom Biomes","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-biomes"}}');var o=s(4848),i=s(8453);const r={id:"custom-world-generation",title:"Custom World Generation",sidebar_position:9},a="Custom World Generation",l={},d=[{value:"World Generation Fundamentals",id:"world-generation-fundamentals",level:2},{value:"Key Components",id:"key-components",level:3},{value:"World Generation Process",id:"world-generation-process",level:3},{value:"Creating a Custom World",id:"creating-a-custom-world",level:2},{value:"Step 1: Creating Custom Rooms",id:"step-1-creating-custom-rooms",level:2},{value:"Basic Room Structure",id:"basic-room-structure",level:3},{value:"Room Properties",id:"room-properties",level:3},{value:"Advanced Room Configuration",id:"advanced-room-configuration",level:3},{value:"Mixed Terrain Types",id:"mixed-terrain-types",level:3},{value:"Step 2: Creating Custom Tasks",id:"step-2-creating-custom-tasks",level:2},{value:"Basic Task Structure",id:"basic-task-structure",level:3},{value:"Task Properties",id:"task-properties",level:3},{value:"Advanced Task Configuration",id:"advanced-task-configuration",level:3},{value:"Step 3: Modifying Level Definitions",id:"step-3-modifying-level-definitions",level:2},{value:"Basic Level Modification",id:"basic-level-modification",level:3},{value:"Advanced Level Modification",id:"advanced-level-modification",level:3},{value:"Creating a Completely New Level",id:"creating-a-completely-new-level",level:3},{value:"Step 4: Creating Custom Ground Types",id:"step-4-creating-custom-ground-types",level:2},{value:"Registering a New Ground Type",id:"registering-a-new-ground-type",level:3},{value:"Creating Ground Textures",id:"creating-ground-textures",level:3},{value:"Step 5: Creating Custom Setpieces",id:"step-5-creating-custom-setpieces",level:2},{value:"Creating a Static Layout",id:"creating-a-static-layout",level:3},{value:"Registering the Setpiece",id:"registering-the-setpiece",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Example 1: Adding a Desert Biome",id:"example-1-adding-a-desert-biome",level:3},{value:"Example 2: Creating a Custom Start Area",id:"example-2-creating-a-custom-start-area",level:3},{value:"Example 3: Adding a Dangerous Biome",id:"example-3-adding-a-dangerous-biome",level:3},{value:"Advanced Techniques",id:"advanced-techniques",level:2},{value:"Custom World Generation",id:"custom-world-generation-1",level:3},{value:"Custom Room Distribution",id:"custom-room-distribution",level:3},{value:"Seasonal Changes",id:"seasonal-changes",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Debugging World Generation",id:"debugging-world-generation",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"custom-world-generation",children:"Custom World Generation"})}),"\n",(0,o.jsx)(n.p,{children:"This guide provides a comprehensive overview of creating custom world generation in Don't Starve Together. You'll learn the fundamental concepts, approaches, and practical examples to create unique and engaging worlds for your mods."}),"\n",(0,o.jsx)(n.h2,{id:"world-generation-fundamentals",children:"World Generation Fundamentals"}),"\n",(0,o.jsx)(n.p,{children:"Don't Starve Together's world generation system is built on several key components that work together to create the game world:"}),"\n",(0,o.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Levels"}),": The overall world configuration (forest, caves, etc.)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tasks"}),': Gameplay areas with specific purposes (e.g., "Starting Area", "Resource Area")']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Rooms"}),": Specific areas with defined terrain and object distributions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tiles"}),": The basic ground types that make up the world"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Setpieces"}),": Pre-designed arrangements of objects"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"world-generation-process",children:"World Generation Process"}),"\n",(0,o.jsx)(n.p,{children:"The world generation follows this sequence:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Level Selection"}),": The game selects a level configuration based on the chosen preset"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Task Assignment"}),": Tasks are assigned to different regions of the map"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Room Placement"}),": Rooms are placed within tasks based on task requirements"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Terrain Generation"}),": Terrain is generated for each room"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Object Placement"}),": Objects are placed within rooms according to distribution rules"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Finalization"}),": Final adjustments are made, such as placing setpieces and connecting regions"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"creating-a-custom-world",children:"Creating a Custom World"}),"\n",(0,o.jsx)(n.p,{children:"To create a custom world generation, you'll need to:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create custom rooms"}),"\n",(0,o.jsx)(n.li,{children:"Define custom tasks"}),"\n",(0,o.jsx)(n.li,{children:"Modify level definitions"}),"\n",(0,o.jsx)(n.li,{children:"Create custom ground types (optional)"}),"\n",(0,o.jsx)(n.li,{children:"Create custom setpieces (optional)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Let's walk through each step in detail."}),"\n",(0,o.jsx)(n.h2,{id:"step-1-creating-custom-rooms",children:"Step 1: Creating Custom Rooms"}),"\n",(0,o.jsx)(n.p,{children:"Rooms are the basic building blocks of world generation. Each room has a terrain type and a set of objects to spawn."}),"\n",(0,o.jsx)(n.h3,{id:"basic-room-structure",children:"Basic Room Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddRoom("MyCustomRoom", {\n    colour = {r=0.3, g=0.5, b=0.6, a=0.3},  -- Color on the minimap\n    value = WORLD_TILES.GRASS,              -- Base terrain type\n    tags = {"ExitPiece", "Chester_Eyebone"}, -- Tags for room selection\n    contents = {\n        distributepercent = 0.15,           -- Density of objects\n        distributeprefabs = {               -- Objects to spawn\n            evergreen = 3,\n            grass = 0.5,\n            sapling = 0.5,\n            flint = 0.05,\n            boulder = 0.01,\n        },\n    }\n})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"room-properties",children:"Room Properties"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"colour"}),": Used for map visualization during development"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"value"}),": The base terrain type (from ",(0,o.jsx)(n.code,{children:"WORLD_TILES"})," in ",(0,o.jsx)(n.code,{children:"constants.lua"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"tags"}),": Special tags that affect room selection and object placement"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"contents"}),": Defines what objects appear in the room and their distribution"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"advanced-room-configuration",children:"Advanced Room Configuration"}),"\n",(0,o.jsx)(n.p,{children:"For more complex rooms, you can use additional properties:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddRoom("ComplexRoom", {\n    colour = {r=0.4, g=0.6, b=0.4, a=0.3},\n    value = WORLD_TILES.FOREST,\n    tags = {"ExitPiece", "Clearing"},\n    contents = {\n        countstaticlayout = {\n            ["PigVillage"] = 1,  -- Include exactly one pig village\n            ["Maxwell1"] = function() return math.random(0,1) end, -- Maybe include Maxwell statue\n        },\n        countprefabs = {\n            pighouse = function() return 2 + math.random(2) end, -- 2-4 pighouses\n        },\n        distributepercent = 0.2,\n        distributeprefabs = {\n            evergreen = 3,\n            grass = 0.5,\n            sapling = 0.5,\n            berrybush = 0.2,\n            rock1 = 0.05,\n            flint = 0.05,\n        },\n    }\n})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"mixed-terrain-types",children:"Mixed Terrain Types"}),"\n",(0,o.jsx)(n.p,{children:"You can create rooms with multiple terrain types:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddRoom("MixedTerrainRoom", {\n    colour = {r=0.4, g=0.5, b=0.5, a=0.3},\n    tags = {"ExitPiece"},\n    contents = {\n        distributepercent = 0.15,\n        distributeprefabs = {\n            evergreen = 3,\n            grass = 0.5,\n            sapling = 0.5,\n        },\n    },\n    ground_types = {WORLD_TILES.GRASS, WORLD_TILES.FOREST, WORLD_TILES.MARSH},\n    ground_distribution = {\n        [WORLD_TILES.GRASS] = 8,\n        [WORLD_TILES.FOREST] = 4,\n        [WORLD_TILES.MARSH] = 2,\n    },\n})\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-2-creating-custom-tasks",children:"Step 2: Creating Custom Tasks"}),"\n",(0,o.jsx)(n.p,{children:"Tasks are collections of rooms that fulfill a specific gameplay purpose."}),"\n",(0,o.jsx)(n.h3,{id:"basic-task-structure",children:"Basic Task Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddTask("MyCustomTask", {\n    locks = {LOCKS.TIER1},           -- Requirements to access this task\n    keys_given = {KEYS.WOOD, KEYS.TIER2}, -- Resources/capabilities provided\n    room_choices = {\n        ["Forest"] = 2,              -- Include 2 Forest rooms\n        ["BarePlain"] = 1,           -- Include 1 BarePlain room\n        ["MyCustomRoom"] = 1         -- Include 1 of our custom rooms\n    },\n    room_bg = WORLD_TILES.GRASS,     -- Default terrain type\n    background_room = "BGGrass",     -- Room type for empty areas\n    colour = {r=0.2, g=0.6, b=0.2, a=1} -- Color on the map\n})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"task-properties",children:"Task Properties"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"locks"}),": Requirements to access this task"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"keys_given"}),": Resources or capabilities provided by this task"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"room_choices"}),": Rooms to include (with counts)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"room_bg"}),": Default terrain type"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"background_room"}),": Room type for empty areas"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"advanced-task-configuration",children:"Advanced Task Configuration"}),"\n",(0,o.jsx)(n.p,{children:"For more complex tasks, you can use additional properties:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddTask("ComplexTask", {\n    locks = {LOCKS.TIER2, LOCKS.ROCKS},\n    keys_given = {KEYS.TIER3, KEYS.GOLD},\n    room_choices = {\n        ["Forest"] = {1, 3},         -- 1-3 Forest rooms\n        ["DeepForest"] = {2, 3},     -- 2-3 DeepForest rooms\n        ["Clearing"] = 1,            -- Exactly 1 Clearing\n    },\n    room_bg = WORLD_TILES.FOREST,\n    background_room = "BGForest",\n    colour = {r=0.1, g=0.4, b=0.1, a=1},\n    substitutes = {"ComplexTask2"},  -- Alternate task if this one can\'t be placed\n    make_loop = true,               -- Try to make this area loop back on itself\n})\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-3-modifying-level-definitions",children:"Step 3: Modifying Level Definitions"}),"\n",(0,o.jsx)(n.p,{children:"To include your custom tasks in the world generation, you need to modify the level definitions."}),"\n",(0,o.jsx)(n.h3,{id:"basic-level-modification",children:"Basic Level Modification"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddLevelPreInit("SURVIVAL_TOGETHER", function(level)\n    -- Add our custom task to the list of tasks\n    if level.tasks then\n        table.insert(level.tasks, "MyCustomTask")\n    end\n    \n    -- Add our custom room to the list of rooms\n    if level.rooms then\n        table.insert(level.rooms, "MyCustomRoom")\n    end\n    \n    -- Add a setpiece to the world\n    if level.random_set_pieces then\n        table.insert(level.random_set_pieces, "MyCustomSetpiece")\n    end\n})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"advanced-level-modification",children:"Advanced Level Modification"}),"\n",(0,o.jsx)(n.p,{children:"For more complex level modifications:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'AddLevelPreInit("SURVIVAL_TOGETHER", function(level)\n    -- Modify task distribution\n    level.overrides = level.overrides or {}\n    level.overrides.task_distribute = level.overrides.task_distribute or {}\n    level.overrides.task_distribute.MyCustomTask = 1.5  -- Higher weight\n    \n    -- Add required setpieces\n    if level.required_setpieces then\n        table.insert(level.required_setpieces, "MyImportantSetpiece")\n    end\n    \n    -- Change starting location\n    level.start_location = "MyCustomStart"\n    \n    -- Modify resource distribution\n    level.overrides.berrybush = "often"\n    level.overrides.trees = "mostly"\n    level.overrides.flint = "default"\n    level.overrides.grass = "plenty"\n})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"creating-a-completely-new-level",children:"Creating a Completely New Level"}),"\n",(0,o.jsx)(n.p,{children:"For a completely custom world:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local my_level = {\n    id = "CUSTOM_WORLD",\n    name = "My Custom World",\n    desc = "A completely custom world experience.",\n    location = "forest",\n    version = 4,\n    overrides = {\n        task_distribute = {\n            MyCustomTask = 1.5,\n            AnotherTask = 0.8,\n        },\n        -- Resource distribution\n        berrybush = "often",\n        trees = "mostly",\n        grass = "plenty",\n        -- Season settings\n        season_start = "autumn",\n        autumn = "longseason",\n        winter = "shortseason",\n        spring = "default",\n        summer = "shortseason",\n    },\n    tasks = {\n        "Make a pick",\n        "MyCustomTask",\n        "AnotherTask",\n        "Dig that rock",\n        "Great Plains",\n    },\n    numoptionaltasks = 4,\n    optionaltasks = {\n        "Befriend the pigs",\n        "Kill the spiders",\n        "The hunters",\n        "Magic meadow",\n        "MyOptionalTask",\n    },\n    required_setpieces = {\n        "Sculptures_1",\n        "MaxwellThrone",\n        "MyRequiredSetpiece",\n    },\n    numrandom_set_pieces = 5,\n    random_set_pieces = {\n        "Chessy_1",\n        "Chessy_2",\n        "Chessy_3",\n        "Maxwell1",\n        "Maxwell2",\n        "Maxwell3",\n        "MyRandomSetpiece",\n    },\n    ordered_story_setpieces = {\n        {"MyStorySetpiece1", "Day 10"},\n        {"MyStorySetpiece2", "Day 25"},\n    },\n}\n\nAddLevel(LEVELTYPE.SURVIVAL, my_level)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-4-creating-custom-ground-types",children:"Step 4: Creating Custom Ground Types"}),"\n",(0,o.jsx)(n.p,{children:"To create a completely unique biome, you may want to add custom ground types."}),"\n",(0,o.jsx)(n.h3,{id:"registering-a-new-ground-type",children:"Registering a New Ground Type"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\n\n-- Add the new ground type\nlocal GROUND = GLOBAL.GROUND\nlocal GROUND_NAMES = GLOBAL.STRINGS.NAMES.GROUND\nlocal GROUND_TILES = GLOBAL.GROUND_TILES\n\n-- Register new ground type\nGROUND.MYTERRAIN = #GROUND_TILES + 1\nGROUND_NAMES.MYTERRAIN = "My Custom Terrain"\nGROUND_TILES[GROUND.MYTERRAIN] = "myterrain"\n\n-- Add the ground assets\nAddGamePostInit(function()\n    local GroundAtlas = GLOBAL.resolvefilepath("levels/textures/ground_noise.xml")\n    local GroundImage = GLOBAL.resolvefilepath("levels/textures/ground_noise.tex")\n    \n    -- Add our custom ground\n    GLOBAL.TheWorld.components.groundcreep:AddGroundDef(\n        GROUND.MYTERRAIN,\n        GroundAtlas,\n        GroundImage,\n        "levels/textures/myterrain_noise.tex",\n        "myterrain"\n    )\nend)\n\n-- Add custom tile physics\nAddSimPostInit(function()\n    for k, v in pairs(GLOBAL.GROUND_FLOORING) do\n        if v == GROUND.MYTERRAIN then\n            GLOBAL.SetGroundFertility(v, 0.5)  -- Medium fertility\n            GLOBAL.SetGroundClass(v, "forest") -- Forest class\n            GLOBAL.SetGroundSpeedMultiplier(v, 1.1) -- Slightly faster movement\n        end\n    end\nend)\n\n-- Add required assets\nAssets = {\n    Asset("IMAGE", "levels/textures/myterrain.tex"),\n    Asset("IMAGE", "levels/textures/myterrain_noise.tex"),\n    Asset("IMAGE", "minimap/myterrain.tex"),\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"creating-ground-textures",children:"Creating Ground Textures"}),"\n",(0,o.jsx)(n.p,{children:"For a complete custom ground, you'll need to create these texture files:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"levels/tiles/myterrain.tex"})," - The base texture for the ground"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"levels/textures/myterrain_noise.tex"})," - The noise texture for variation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"minimap/myterrain.tex"})," - The minimap representation"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-5-creating-custom-setpieces",children:"Step 5: Creating Custom Setpieces"}),"\n",(0,o.jsx)(n.p,{children:"Setpieces are pre-designed layouts that can be placed in the world."}),"\n",(0,o.jsx)(n.h3,{id:"creating-a-static-layout",children:"Creating a Static Layout"}),"\n",(0,o.jsxs)(n.p,{children:["Create a file in ",(0,o.jsx)(n.code,{children:"map/static_layouts/my_setpiece.lua"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'return {\n  version = "1.1",\n  luaversion = "5.1",\n  orientation = "orthogonal",\n  width = 16,\n  height = 16,\n  tilewidth = 16,\n  tileheight = 16,\n  properties = {},\n  tilesets = {\n    {\n      name = "tiles",\n      firstgid = 1,\n      tilewidth = 64,\n      tileheight = 64,\n      spacing = 0,\n      margin = 0,\n      image = "../../../../tools/tiled/dont_starve/tiles.png",\n      imagewidth = 512,\n      imageheight = 384,\n      properties = {}\n    }\n  },\n  layers = {\n    {\n      type = "tilelayer",\n      name = "BG_TILES",\n      x = 0,\n      y = 0,\n      width = 16,\n      height = 16,\n      visible = true,\n      opacity = 1,\n      properties = {},\n      encoding = "lua",\n      data = {}\n    },\n    {\n      type = "objectgroup",\n      name = "FG_OBJECTS",\n      visible = true,\n      opacity = 1,\n      properties = {},\n      objects = {\n        {\n          name = "evergreen",\n          type = "evergreen",\n          shape = "rectangle",\n          x = 128,\n          y = 128,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        },\n        {\n          name = "evergreen",\n          type = "evergreen",\n          shape = "rectangle",\n          x = 96,\n          y = 160,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        },\n        {\n          name = "pighouse",\n          type = "pighouse",\n          shape = "rectangle",\n          x = 160,\n          y = 96,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        },\n        {\n          name = "firepit",\n          type = "firepit",\n          shape = "rectangle",\n          x = 128,\n          y = 96,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"registering-the-setpiece",children:"Registering the Setpiece"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAddLevelPreInit("SURVIVAL_TOGETHER", function(level)\n    if level.random_set_pieces then\n        table.insert(level.random_set_pieces, "my_setpiece")\n    end\nend)\n\n-- Register the layout\nAddRoom("my_setpiece", StaticLayout.Get("map/static_layouts/my_setpiece"))\n'})}),"\n",(0,o.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,o.jsx)(n.p,{children:"Let's look at some practical examples of custom world generation."}),"\n",(0,o.jsx)(n.h3,{id:"example-1-adding-a-desert-biome",children:"Example 1: Adding a Desert Biome"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\n\n-- Register new ground type\nGROUND.DESERT = #GROUND_TILES + 1\nGROUND_NAMES.DESERT = "Desert"\nGROUND_TILES[GROUND.DESERT] = "desert"\n\n-- Add custom room\nAddRoom("DesertRoom", {\n    colour = {r=0.8, g=0.7, b=0.5, a=0.3},\n    value = GROUND.DESERT,\n    tags = {"ExitPiece", "Desert"},\n    contents = {\n        distributepercent = 0.06,\n        distributeprefabs = {\n            cactus = 0.5,\n            rock1 = 0.3,\n            houndbone = 0.2,\n            flint = 0.1,\n        }\n    }\n})\n\n-- Add custom task\nAddTask("DesertTask", {\n    locks = {LOCKS.TIER2},\n    keys_given = {KEYS.TIER3},\n    room_choices = {\n        ["DesertRoom"] = {3, 5},\n        ["Rocky"] = {1, 2},\n    },\n    room_bg = GROUND.DESERT,\n    background_room = "BGDesert",\n    colour = {r=0.8, g=0.7, b=0.5, a=1}\n})\n\n-- Add background room\nAddRoom("BGDesert", {\n    colour = {r=0.8, g=0.7, b=0.5, a=0.3},\n    value = GROUND.DESERT,\n    tags = {"Desert", "RoadPoison"},\n    contents = {\n        distributepercent = 0.03,\n        distributeprefabs = {\n            rock1 = 0.05,\n            flint = 0.05,\n        }\n    }\n})\n\n-- Add to level\nAddLevelPreInit("SURVIVAL_TOGETHER", function(level)\n    if level.tasks then\n        table.insert(level.tasks, "DesertTask")\n    end\n    \n    if level.rooms then\n        table.insert(level.rooms, "DesertRoom")\n        table.insert(level.rooms, "BGDesert")\n    end\n    \n    -- Add oasis setpiece\n    if level.random_set_pieces then\n        table.insert(level.random_set_pieces, "DesertOasis")\n    end\n})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"example-2-creating-a-custom-start-area",children:"Example 2: Creating a Custom Start Area"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Custom starting area with plenty of resources\nAddRoom("CustomStart", {\n    colour = {r=0.3, g=0.8, b=0.5, a=0.3},\n    value = WORLD_TILES.GRASS,\n    tags = {"ExitPiece", "StartArea"},\n    contents = {\n        countstaticlayout = {\n            ["DefaultStart"] = 1,  -- Include the default start layout\n        },\n        countprefabs = {\n            firepit = 1,\n            tent = 1,\n        },\n        distributepercent = 0.2,\n        distributeprefabs = {\n            sapling = 1,\n            grass = 1,\n            berrybush = 0.5,\n            flint = 0.4,\n            rocks = 0.4,\n            evergreen = 0.3,\n        }\n    }\n})\n\n-- Custom start task\nAddTask("CustomStartTask", {\n    locks = {LOCKS.NONE},\n    keys_given = {KEYS.TIER1, KEYS.AXE, KEYS.PICKAXE},\n    room_choices = {\n        ["CustomStart"] = 1,\n        ["Forest"] = {1, 2},\n        ["BarePlain"] = 1,\n    },\n    room_bg = WORLD_TILES.GRASS,\n    background_room = "BGGrass",\n    colour = {r=0.3, g=0.8, b=0.5, a=1}\n})\n\n-- Add to level\nAddLevelPreInit("SURVIVAL_TOGETHER", function(level)\n    -- Replace the default start task\n    if level.tasks then\n        for i, task in ipairs(level.tasks) do\n            if task == "Make a pick" then\n                level.tasks[i] = "CustomStartTask"\n                break\n            end\n        end\n    end\n    \n    -- Set the start location\n    level.start_location = "CustomStart"\n})\n'})}),"\n",(0,o.jsx)(n.h3,{id:"example-3-adding-a-dangerous-biome",children:"Example 3: Adding a Dangerous Biome"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Add a dangerous swamp biome\nAddRoom("DangerousSwamp", {\n    colour = {r=0.4, g=0.3, b=0.5, a=0.3},\n    value = WORLD_TILES.MARSH,\n    tags = {"ExitPiece", "Swamp", "Dangerous"},\n    contents = {\n        distributepercent = 0.2,\n        distributeprefabs = {\n            marsh_tree = 0.5,\n            marsh_bush = 0.3,\n            tentacle = 0.4,\n            reeds = 0.2,\n            mermhouse = 0.1,\n        }\n    }\n})\n\n-- Add a dangerous swamp task\nAddTask("DangerousSwampTask", {\n    locks = {LOCKS.TIER3},\n    keys_given = {KEYS.TIER4, KEYS.SWAMP},\n    room_choices = {\n        ["DangerousSwamp"] = {3, 4},\n        ["Marsh"] = {1, 2},\n    },\n    room_bg = WORLD_TILES.MARSH,\n    background_room = "BGMarsh",\n    colour = {r=0.4, g=0.3, b=0.5, a=1}\n})\n\n-- Add to level\nAddLevelPreInit("SURVIVAL_TOGETHER", function(level)\n    if level.tasks then\n        table.insert(level.tasks, "DangerousSwampTask")\n    end\n    \n    -- Add a special setpiece\n    if level.random_set_pieces then\n        table.insert(level.random_set_pieces, "SwampAltar")\n    end\n    \n    -- Make it appear later in the game\n    if level.ordered_story_setpieces then\n        table.insert(level.ordered_story_setpieces, {"SwampBoss", "Day 35"})\n    end\n})\n'})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-techniques",children:"Advanced Techniques"}),"\n",(0,o.jsx)(n.h3,{id:"custom-world-generation-1",children:"Custom World Generation"}),"\n",(0,o.jsx)(n.p,{children:"For more advanced customization, you can create a mod that hooks into the world generation process:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nlocal function CustomizeWorldGeneration(world)\n    -- Modify world generation parameters\n    world.topology.overrides.berrybush = "never"\n    world.topology.overrides.spiders = "always"\n    \n    -- Add custom tasks or rooms\n    -- ...\nend\n\nAddPrefabPostInit("world", CustomizeWorldGeneration)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"custom-room-distribution",children:"Custom Room Distribution"}),"\n",(0,o.jsx)(n.p,{children:"You can create custom distribution rules for objects in rooms:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Custom distribution function\nlocal function CustomDistribution(room, prefab, points_x, points_y, width, height)\n    -- Custom placement logic\n    local custom_points = {}\n    \n    -- Example: Place objects in a circle\n    local center_x = width / 2\n    local center_y = height / 2\n    local radius = math.min(width, height) / 3\n    \n    for i = 1, 8 do\n        local angle = (i - 1) * (2 * math.pi / 8)\n        local x = center_x + radius * math.cos(angle)\n        local y = center_y + radius * math.sin(angle)\n        table.insert(custom_points, {x = x, y = y})\n    end\n    \n    return custom_points\nend\n\n-- Hook into room generation\nAddRoomPreInit("Forest", function(room)\n    room.custom_distribution = CustomDistribution\nend)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"seasonal-changes",children:"Seasonal Changes"}),"\n",(0,o.jsx)(n.p,{children:"You can make your world generation respond to seasons:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        inst:WatchWorldState("season", function(inst, season)\n            if season == "winter" then\n                -- Change world properties in winter\n                inst.components.worldstate.data.snowlevel = 1.0\n                \n                -- Spawn more winter-specific creatures\n                local x, y, z = inst.Transform:GetWorldPosition()\n                local ents = TheSim:FindEntities(x, y, z, 10000, {"winter_spawner"})\n                for _, ent in ipairs(ents) do\n                    if ent.components.childspawner then\n                        ent.components.childspawner:SetMaxChildren(10)\n                    end\n                end\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"World Too Small"}),": Increase ",(0,o.jsx)(n.code,{children:"world_size"})," parameter or add more tasks"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Resources Too Scarce"}),": Increase specific resource parameters (e.g., ",(0,o.jsx)(n.code,{children:'berrybush = "often"'}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Too Many Enemies"}),": Decrease enemy parameters (e.g., ",(0,o.jsx)(n.code,{children:'spiders = "rare"'}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Disconnected Regions"}),": Increase ",(0,o.jsx)(n.code,{children:"branching"})," and ",(0,o.jsx)(n.code,{children:"loop"})," parameters"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Missing Biomes"}),": Ensure all required tasks are included in the task set"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Crashes During Generation"}),": Check for syntax errors or invalid references in your room/task definitions"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"debugging-world-generation",children:"Debugging World Generation"}),"\n",(0,o.jsx)(n.p,{children:"Use these techniques to debug world generation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Print debug information during world generation\nAddPrefabPostInit("world", function(inst)\n    print("World Generation Debug:")\n    print("Tasks:", #inst.topology.tasks)\n    print("Nodes:", #inst.topology.nodes)\n    \n    for i, node in ipairs(inst.topology.nodes) do\n        print(string.format("Node %d: %s at (%.1f, %.1f)", i, node.type, node.x, node.z))\n    end\n    \n    -- Save a map of the world for debugging\n    if inst.minimap then\n        inst.minimap:Save("worldgen_debug.png")\n    end\nend)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"Creating custom world generation in Don't Starve Together allows for incredibly unique and engaging player experiences. By understanding the system's components and how they interact, you can create worlds tailored to specific gameplay experiences."}),"\n",(0,o.jsx)(n.p,{children:"Whether through simple modifications to existing worlds or creating entirely new ones, the possibilities for world generation are vast. Experiment with different combinations of rooms, tasks, and setpieces to create the perfect world for your mod."}),"\n",(0,o.jsxs)(n.p,{children:["For more specific examples and advanced techniques, check out the ",(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/worldgen-mod",children:"World Generation Mod Example"})," and ",(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/project-biome",children:"New Biome Project"})," tutorials."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);