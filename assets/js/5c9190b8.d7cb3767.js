"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5472],{8385:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api-vanilla/data-types/rect","title":"Rect","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/data-types/rect.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/rect","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/rect","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"rect","title":"Rect","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Colour","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/colour"},"next":{"title":"Anim","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/anim"}}');var r=t(4848),l=t(8453);const a={id:"rect",title:"Rect",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},s="Rect",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Properties",id:"properties",level:2},{value:"Core Methods",id:"core-methods",level:2},{value:"Creation and Initialization",id:"creation-and-initialization",level:3},{value:"Position and Size",id:"position-and-size",level:3},{value:"Transformations",id:"transformations",level:3},{value:"Testing and Intersection",id:"testing-and-intersection",level:3},{value:"Integration with UI System",id:"integration-with-ui-system",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"UI Layout",id:"ui-layout",level:3},{value:"Collision Detection",id:"collision-detection",level:3},{value:"Selection Area",id:"selection-area",level:3},{value:"See also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"rect",children:"Rect"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"API Version: 619045"})}),"\n",(0,r.jsx)(n.p,{children:"Rect is a data type representing rectangular areas in Don't Starve Together. It's used for defining boundaries, collision areas, UI layouts, and region-based operations."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"In Don't Starve Together, the Rect data type is used to define rectangular regions in 2D space. It's commonly used for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"UI element positioning and boundaries"}),"\n",(0,r.jsx)(n.li,{children:"Collision detection areas"}),"\n",(0,r.jsx)(n.li,{children:"Screen regions and viewports"}),"\n",(0,r.jsx)(n.li,{children:"Selection areas for game interaction"}),"\n",(0,r.jsx)(n.li,{children:"Texture regions for rendering"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Rect objects are defined by their position (typically the top-left corner) and their dimensions (width and height)."}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"x"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"X-coordinate of the rectangle's left edge"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"y"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Y-coordinate of the rectangle's top edge"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"width"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Width of the rectangle"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"height"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Height of the rectangle"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,r.jsx)(n.h3,{id:"creation-and-initialization",children:"Creation and Initialization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Create a new rectangle\nlocal rect = Rect(x, y, width, height)\n\n-- Create a rectangle from two points\nlocal rect = Rect.FromCorners(x1, y1, x2, y2)\n\n-- Create a zero-sized rectangle at position\nlocal rect = Rect.Point(x, y)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"position-and-size",children:"Position and Size"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Get corners of the rectangle\nlocal left, top = rect:GetLeft(), rect:GetTop()\nlocal right, bottom = rect:GetRight(), rect:GetBottom()\n\n-- Get center of the rectangle\nlocal centerX, centerY = rect:GetCenter()\n\n-- Get size of the rectangle\nlocal width, height = rect:GetSize()\nlocal area = rect:GetArea()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"transformations",children:"Transformations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Move the rectangle by an offset\nrect:Offset(deltaX, deltaY)\n\n-- Scale the rectangle\nrect:Scale(scaleX, scaleY)\n\n-- Expand rectangle in all directions\nrect:Inflate(amount)\n\n-- Expand in specific directions\nrect:InflateHorz(amount)  -- Horizontally\nrect:InflateVert(amount)  -- Vertically\n"})}),"\n",(0,r.jsx)(n.h3,{id:"testing-and-intersection",children:"Testing and Intersection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Check if a point is inside the rectangle\nlocal contains = rect:Contains(x, y)\n\n-- Check if rectangle is empty (zero area)\nlocal isEmpty = rect:IsEmpty()\n\n-- Check if two rectangles intersect\nlocal intersects = rect1:Intersects(rect2)\n\n-- Get the intersection of two rectangles\nlocal intersectRect = rect1:GetIntersection(rect2)\n\n-- Get the union of two rectangles\nlocal unionRect = rect1:GetUnion(rect2)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-ui-system",children:"Integration with UI System"}),"\n",(0,r.jsx)(n.p,{children:"Rect objects are extensively used in the UI system for layout and positioning:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Position a UI element using a rectangle\nfunction PositionUIElement(widget, rect)\n    widget:SetPosition(rect:GetCenter())\n    widget:SetSize(rect:GetSize())\nend\n\n-- Create a layout grid\nfunction CreateLayoutGrid(startX, startY, cellWidth, cellHeight, columns, rows)\n    local cells = {}\n    for y = 0, rows - 1 do\n        for x = 0, columns - 1 do\n            local cellRect = Rect(\n                startX + x * cellWidth,\n                startY + y * cellHeight,\n                cellWidth,\n                cellHeight\n            )\n            table.insert(cells, cellRect)\n        end\n    end\n    return cells\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsx)(n.h3,{id:"ui-layout",children:"UI Layout"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Create a centered panel with padding\nfunction CreateCenteredPanel(screenWidth, screenHeight, panelWidth, panelHeight)\n    local centerX = screenWidth / 2\n    local centerY = screenHeight / 2\n    \n    -- Create panel rectangle centered on screen\n    local panelRect = Rect(\n        centerX - panelWidth / 2,\n        centerY - panelHeight / 2,\n        panelWidth,\n        panelHeight\n    )\n    \n    -- Create content rectangle with padding\n    local padding = 10\n    local contentRect = Rect(\n        panelRect.x + padding,\n        panelRect.y + padding,\n        panelRect.width - padding * 2,\n        panelRect.height - padding * 2\n    )\n    \n    return panelRect, contentRect\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"collision-detection",children:"Collision Detection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Check if two entities' collision rectangles overlap\nfunction CheckCollision(entity1, entity2)\n    local rect1 = GetEntityCollisionRect(entity1)\n    local rect2 = GetEntityCollisionRect(entity2)\n    \n    return rect1:Intersects(rect2)\nend\n\n-- Get entity collision rectangle\nfunction GetEntityCollisionRect(entity)\n    local x, y, z = entity.Transform:GetWorldPosition()\n    local width, height = entity.Physics:GetSize()\n    \n    -- Convert 3D position to 2D rectangle\n    return Rect(\n        x - width / 2,\n        z - height / 2,\n        width,\n        height\n    )\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"selection-area",children:"Selection Area"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Create a selection rectangle from mouse drag\nfunction CreateSelectionRect(startX, startY, endX, endY)\n    -- Ensure correct order of corners regardless of drag direction\n    local left = math.min(startX, endX)\n    local top = math.min(startY, endY)\n    local right = math.max(startX, endX)\n    local bottom = math.max(startY, endY)\n    \n    -- Create rectangle from corners\n    return Rect.FromCorners(left, top, right, bottom)\nend\n\n-- Find entities within selection rectangle\nfunction GetEntitiesInRect(rect)\n    local entities = {}\n    \n    -- Find all entities in the world\n    local allEntities = TheSim:FindEntities(0, 0, 0, 1000)\n    \n    for _, entity in ipairs(allEntities) do\n        local x, y, z = entity.Transform:GetWorldPosition()\n        \n        -- Check if entity position is within rectangle\n        if rect:Contains(x, z) then\n            table.insert(entities, entity)\n        end\n    end\n    \n    return entities\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/vector3",children:"Vector3 Data Type"})," - For 3D position representation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/vector",children:"Vector2 Data Type"})," - For 2D position representation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/ui-system",children:"UI System"})," - For UI layout using Rect"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/widgets",children:"Widgets"})," - For UI elements that use Rect for positioning"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../core/physics.md",children:"Physics System"})," - For collision detection using Rect"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);