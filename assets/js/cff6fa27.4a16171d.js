"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9454],{1261:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api-vanilla/data-types/luatable","title":"Lua Table","description":"Lua Table is a flexible data structure widely used in the Don\'t Starve Together API for storing and passing data.","source":"@site/docs/api-vanilla/data-types/luatable.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/luatable","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/luatable","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"luatable","title":"Lua Table","sidebar_position":5}}');var l=a(4848),i=a(8453);const s={id:"luatable",title:"Lua Table",sidebar_position:5},r="Lua Table",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Table Creation",id:"table-creation",level:2},{value:"Accessing Table Elements",id:"accessing-table-elements",level:2},{value:"Iterating Over Tables",id:"iterating-over-tables",level:2},{value:"Table Manipulation",id:"table-manipulation",level:2},{value:"Tables as Objects",id:"tables-as-objects",level:2},{value:"Common DST Table Patterns",id:"common-dst-table-patterns",level:2},{value:"Component Structure",id:"component-structure",level:3},{value:"Configuration Tables",id:"configuration-tables",level:3},{value:"Event Callbacks",id:"event-callbacks",level:3},{value:"Advanced Table Techniques",id:"advanced-table-techniques",level:2},{value:"Table References",id:"table-references",level:3},{value:"Metatables",id:"metatables",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"lua-table",children:"Lua Table"})}),"\n",(0,l.jsx)(n.p,{children:"Lua Table is a flexible data structure widely used in the Don't Starve Together API for storing and passing data."}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"In Lua, tables are the only built-in complex data structure and serve multiple purposes:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Arrays (sequential data)"}),"\n",(0,l.jsx)(n.li,{children:"Dictionaries/Maps (key-value pairs)"}),"\n",(0,l.jsx)(n.li,{children:"Objects (through metatables)"}),"\n",(0,l.jsx)(n.li,{children:"Namespaces (for organizing functions and variables)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Don't Starve Together uses tables extensively throughout its codebase to represent everything from inventory contents to game configurations and component data."}),"\n",(0,l.jsx)(n.h2,{id:"table-creation",children:"Table Creation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Empty table\nlocal empty_table = {}\n\n-- Table with initial values (as an array)\nlocal array_like = {"Wilson", "Willow", "Wolfgang", "Wendy"}\n\n-- Table with initial values (as a dictionary)\nlocal dict_like = {\n    health = 150,\n    hunger = 150,\n    sanity = 200,\n    damage = 1.0\n}\n\n-- Mixed table with both array and dictionary parts\nlocal mixed = {\n    "first_item",\n    "second_item",\n    name = "Backpack",\n    slots = 8\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"accessing-table-elements",children:"Accessing Table Elements"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Array-like access (indices start at 1 in Lua)\nlocal character = array_like[1]  -- "Wilson"\nlocal last = array_like[#array_like]  -- "Wendy" (#table returns the length)\n\n-- Dictionary-like access\nlocal health_value = dict_like.health  -- 150\n-- OR using square brackets (required for dynamic keys)\nlocal stat_name = "hunger"\nlocal hunger_value = dict_like[stat_name]  -- 150\n\n-- Checking if a key exists\nif dict_like.speed then\n    -- This code won\'t run because \'speed\' doesn\'t exist\nend\n\n-- Safe access pattern for nested tables\nif dict_like and dict_like.attributes and dict_like.attributes.speed then\n    -- Safe way to check deeply nested properties\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"iterating-over-tables",children:"Iterating Over Tables"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Iterate over all key-value pairs (unordered)\nfor k, v in pairs(dict_like) do\n    print(k, v)  -- Prints each key and value\nend\n\n-- Iterate over array part only (ordered by index)\nfor i, v in ipairs(array_like) do\n    print(i, v)  -- Prints each index and value\nend\n\n-- Manual iteration with numeric indices\nfor i = 1, #array_like do\n    local value = array_like[i]\n    -- Do something with value\nend\n"})}),"\n",(0,l.jsx)(n.h2,{id:"table-manipulation",children:"Table Manipulation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Adding elements\ndict_like.speed = 6  -- Add a new key-value pair\ntable.insert(array_like, "Maxwell")  -- Add to the end of array\ntable.insert(array_like, 2, "Wickerbottom")  -- Insert at position 2\n\n-- Removing elements\ndict_like.damage = nil  -- Remove a key-value pair\ntable.remove(array_like, 3)  -- Remove item at index 3\ntable.remove(array_like)  -- Remove last item\n\n-- Concatenating array contents to a string\nlocal names_string = table.concat(array_like, ", ")\n\n-- Sorting array part\ntable.sort(array_like)  -- Default sort (alphabetical for strings)\ntable.sort(array_like, function(a, b) return #a < #b end)  -- Sort by string length\n'})}),"\n",(0,l.jsx)(n.h2,{id:"tables-as-objects",children:"Tables as Objects"}),"\n",(0,l.jsx)(n.p,{children:"In Don't Starve Together, tables often function as objects with methods:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Creating a component-like object\nlocal MyObject = {\n    value = 100,\n    \n    -- Method definition\n    GetValue = function(self)\n        return self.value\n    end,\n    \n    -- Alternative method definition\n    SetValue = function(self, new_value)\n        self.value = new_value\n    end\n}\n\n-- Using methods\nlocal current = MyObject:GetValue()  -- Colon syntax automatically passes 'self'\nMyObject:SetValue(150)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"common-dst-table-patterns",children:"Common DST Table Patterns"}),"\n",(0,l.jsx)(n.h3,{id:"component-structure",children:"Component Structure"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self.value = 100\n    self.active = true\nend)\n\nfunction MyComponent:GetValue()\n    return self.value\nend\n\nfunction MyComponent:SetValue(val)\n    self.value = val\n    -- Do something with the new value\nend\n\nreturn MyComponent\n"})}),"\n",(0,l.jsx)(n.h3,{id:"configuration-tables",children:"Configuration Tables"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Tuning constants\nTUNING.MY_CHARACTER = {\n    HEALTH = 150,\n    HUNGER = 150,\n    SANITY = 200,\n    DAMAGE = 1.0,\n    SPEED = 6,\n    HUNGER_RATE = 0.15\n}\n\n-- Recipe definition\nlocal my_item = Recipe("my_item", \n    {\n        Ingredient("twigs", 2),\n        Ingredient("cutgrass", 3),\n        Ingredient("flint", 1)\n    },\n    RECIPETABS.SURVIVAL,\n    TECH.SCIENCE_ONE\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"event-callbacks",children:"Event Callbacks"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Event handler table\nlocal events = {\n    onattacked = function(inst, data)\n        -- React to being attacked\n    end,\n    \n    ondeath = function(inst)\n        -- React to death\n    end\n}\n\n-- Register all events\nfor event, fn in pairs(events) do\n    inst:ListenForEvent(event, fn)\nend\n"})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-table-techniques",children:"Advanced Table Techniques"}),"\n",(0,l.jsx)(n.h3,{id:"table-references",children:"Table References"}),"\n",(0,l.jsx)(n.p,{children:"Tables are reference types in Lua, which means:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local original = {value = 10}\nlocal reference = original  -- Both variables point to the same table\n\nreference.value = 20  -- Changes both 'reference' and 'original'\nprint(original.value)  -- Prints 20\n\n-- Deep copying a table (simple version)\nfunction DeepCopy(orig)\n    local copy\n    if type(orig) == \"table\" then\n        copy = {}\n        for k, v in pairs(orig) do\n            copy[k] = DeepCopy(v)\n        end\n    else\n        copy = orig\n    end\n    return copy\nend\n\nlocal independent_copy = DeepCopy(original)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"metatables",children:"Metatables"}),"\n",(0,l.jsx)(n.p,{children:"Metatables enable advanced table behavior in Lua:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Create a vector-like table with metamethods\nlocal Vector = {}\nVector.__index = Vector\n\nfunction Vector.new(x, y, z)\n    return setmetatable({x = x or 0, y = y or 0, z = z or 0}, Vector)\nend\n\nfunction Vector.__add(a, b)\n    return Vector.new(a.x + b.x, a.y + b.y, a.z + b.z)\nend\n\n-- Usage\nlocal v1 = Vector.new(1, 0, 0)\nlocal v2 = Vector.new(0, 1, 0)\nlocal v3 = v1 + v2  -- Uses the __add metamethod\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Use the right structure"}),": Arrays for sequential data, dictionaries for named properties."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Check existence"}),": Always check if a table or key exists before accessing nested properties."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Be careful with references"}),": Remember that tables are passed by reference, not by value."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Prefer local tables"}),": Use local variables for tables to avoid polluting the global namespace."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Initialize tables properly"}),": Set default values for all expected keys to avoid nil errors."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Use table.insert/remove"}),": For array operations rather than directly setting indices."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Cache table results"}),": Store table.X in a local variable if you'll access it multiple times."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var t=a(6540);const l={},i=t.createContext(l);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);