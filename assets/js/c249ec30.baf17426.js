"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9500],{152:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"api-vanilla/components/builder","title":"Builder Component","description":"Last Update: 2023-08-01","source":"@site/docs/api-vanilla/components/builder.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/builder","permalink":"/dst-api-webdocs/docs/api-vanilla/components/builder","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":21,"frontMatter":{"id":"builder","title":"Builder Component","sidebar_position":21,"last_updated":"2023-08-01T00:00:00.000Z","version":624447},"sidebar":"docs","previous":{"title":"Perishable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/perishable"},"next":{"title":"Container","permalink":"/dst-api-webdocs/docs/api-vanilla/components/container"}}');var s=i(4848),r=i(8453);const t={id:"builder",title:"Builder Component",sidebar_position:21,last_updated:new Date("2023-08-01T00:00:00.000Z"),version:624447},d="Builder Component",c={},a=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Recipe Management",id:"recipe-management",level:3},{value:"Building",id:"building",level:3},{value:"Tech Levels",id:"tech-levels",level:3},{value:"Skill Tree Integration",id:"skill-tree-integration",level:3},{value:"Character Skill Tree Integration",id:"character-skill-tree-integration",level:3},{value:"Tech Trees",id:"tech-trees",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Character Skills and Builder System",id:"character-skills-and-builder-system",level:2},{value:"Builder Skills",id:"builder-skills",level:3},{value:"Builder Tags (Pre-624447)",id:"builder-tags-pre-624447",level:3},{value:"Character Skills and Builder Component",id:"character-skills-and-builder-component",level:3},{value:"Recipe Integration with Character Skills",id:"recipe-integration-with-character-skills",level:4},{value:"Benefits of the Skill System",id:"benefits-of-the-skill-system",level:4},{value:"Common Builder Skills",id:"common-builder-skills",level:3},{value:"Events and Notifications",id:"events-and-notifications",level:3},{value:"Example: Setting Up a Builder with Tech Levels",id:"example-setting-up-a-builder-with-tech-levels",level:2},{value:"Builder Skills vs Builder Tags",id:"builder-skills-vs-builder-tags",level:2},{value:"Migration Guide: Tags to Skills",id:"migration-guide-tags-to-skills",level:3},{value:"Common Tag to Skill Mappings",id:"common-tag-to-skill-mappings",level:3},{value:"See also",id:"see-also",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Last Update: 2023-08-01"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"builder-component",children:"Builder Component"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"API Version: 624447"})}),"\n",(0,s.jsx)(n.p,{children:"The Builder component allows entities to craft and construct items and structures. It manages recipes, ingredients, technology levels, and crafting buffs."}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add a builder component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("builder")\n\n-- Configure the builder component\nlocal builder = entity.components.builder\nbuilder:GiveAllRecipes() -- For testing, gives all recipes\nbuilder:UnlockRecipe("campfire") -- Unlock specific recipe\n'})}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"recipes"})}),(0,s.jsx)(n.td,{children:"Table"}),(0,s.jsx)(n.td,{children:"List of known recipe names"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"freebuildmode"})}),(0,s.jsx)(n.td,{children:"Boolean"}),(0,s.jsx)(n.td,{children:"Whether building requires ingredients"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ingredientmod"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Modifier for ingredient requirements"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"techlevels"})}),(0,s.jsx)(n.td,{children:"Table"}),(0,s.jsx)(n.td,{children:"Current tech levels the builder has access to"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"bonus_tech_level"})}),(0,s.jsx)(n.td,{children:"Table"}),(0,s.jsx)(n.td,{children:"Extra tech levels from buffs or equipment"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"buffered_builds"})}),(0,s.jsx)(n.td,{children:"Table"}),(0,s.jsx)(n.td,{children:"Builds queued for crafting"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"current_prototyper"})}),(0,s.jsx)(n.td,{children:"Entity"}),(0,s.jsx)(n.td,{children:"Current workstation being used"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"builder_skills"})}),(0,s.jsx)(n.td,{children:"Table"}),(0,s.jsx)(n.td,{children:"Skills from character's skill tree that enable recipes (added in API 624447)"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,s.jsx)(n.h3,{id:"recipe-management",children:"Recipe Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Learn recipes\nbuilder:UnlockRecipe("spear") -- Learn a specific recipe\nbuilder:GiveAllRecipes() -- Learn all recipes\nbuilder:AddRecipe("firepit") -- Add a single recipe\n\n-- Check recipes\nlocal knows_recipe = builder:KnowsRecipe("axe")\nlocal can_build = builder:CanBuild("hammer")\nlocal tech_level = builder:GetTechLevel(TECH.SCIENCE_ONE)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"building",children:"Building"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Build an item\nbuilder:MakeRecipe("backpack", nil, nil, nil, nil, nil, 1)\n\n-- Get ingredient requirements\nlocal ingredients = builder:GetIngredients("tent")\n\n-- Count available ingredients\nlocal can_build, missing = builder:CanBuild("birdcage")\nif not can_build then\n    for i, v in ipairs(missing) do\n        print("Missing: " .. v.type .. " x" .. v.amount)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"tech-levels",children:"Tech Levels"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Set tech levels\nbuilder:SetTechLevel(TECH.SCIENCE_ONE, 1)\nbuilder:SetTechLevel(TECH.MAGIC_TWO, 1)\n\n-- Add temporary tech boost from equipment\nbuilder:AddBonus(TECH.SCIENCE_ONE, 1, "sciencemachine")\n\n-- Remove tech boost\nbuilder:RemoveBonus("sciencemachine")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"skill-tree-integration",children:"Skill Tree Integration"}),"\n",(0,s.jsx)(n.p,{children:"As of API version 624447, builder tags for skill trees have been replaced with builder skills:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add a builder skill from a character\'s skill tree\nbuilder:AddBuilderSkill("woodcutter_harvester")\n\n-- Remove a builder skill\nbuilder:RemoveBuilderSkill("woodcutter_harvester")\n\n-- Check if builder has a specific skill\nlocal has_skill = builder:HasBuilderSkill("woodcutter_harvester")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"character-skill-tree-integration",children:"Character Skill Tree Integration"}),"\n",(0,s.jsxs)(n.p,{children:["Characters with the ",(0,s.jsx)(n.code,{children:"skilltreeupdater"})," component can grant builder skills when players unlock abilities in their skill tree. These skills then enable specific recipes in the builder component:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In a character\'s skill tree definition\nlocal WOODCUTTER_SKILL = {\n    onactivate = function(inst, skilldata)\n        if inst.components.builder ~= nil then\n            inst.components.builder:AddBuilderSkill("woodcutter_harvester")\n        end\n    end,\n    \n    ondeactivate = function(inst, skilldata)\n        if inst.components.builder ~= nil then\n            inst.components.builder:RemoveBuilderSkill("woodcutter_harvester")\n        end\n    end,\n}\n\n-- In a recipe definition that requires a special skill\nRecipe("specialaxe", \n    {Ingredient("twigs", 2), Ingredient("flint", 1)}, \n    RECIPETABS.TOOLS, \n    {builder_skill = "woodcutter_harvester"} -- Requires specific skill\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"tech-trees",children:"Tech Trees"}),"\n",(0,s.jsx)(n.p,{children:"The builder component organizes recipes by tech trees:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TECH.NONE"})," - Basic recipes available to everyone"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TECH.SCIENCE_ONE"})," - Science Machine level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TECH.SCIENCE_TWO"})," - Alchemy Engine level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TECH.MAGIC_TWO"})," - Prestihatitator level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TECH.MAGIC_THREE"})," - Shadow Manipulator level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TECH.ANCIENT_TWO"})," - Ancient Pseudoscience Station level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TECH.CELESTIAL_ONE"})," - Celestial Altar level"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,s.jsx)(n.p,{children:"The Builder component often works with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Inventory"})," - For managing ingredients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Sanity"})," - Some crafting can affect sanity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ActionHandler"})," - For triggering building actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Prototyper"})," - For workstations that enhance crafting abilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Skilltreeupdater"})," - For skills that unlock recipes (added in API 624447)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"character-skills-and-builder-system",children:"Character Skills and Builder System"}),"\n",(0,s.jsx)(n.h3,{id:"builder-skills",children:"Builder Skills"}),"\n",(0,s.jsx)(n.p,{children:"Builder skills were introduced in API version 624447 to replace the older builder tags system. These skills represent specific crafting abilities that characters can acquire through their skill trees."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic builder skill management\nlocal builder = inst.components.builder\n\n-- Adding skills\nbuilder:AddBuilderSkill("woodcutter_harvester") -- Add woodcutting skill\nbuilder:AddBuilderSkill("masterchef_spicestation") -- Add cooking skill\n\n-- Removing skills\nbuilder:RemoveBuilderSkill("woodcutter_harvester")\n\n-- Checking for skills\nif builder:HasBuilderSkill("masterchef_spicestation") then\n    -- Character can craft spice-related recipes\nend\n\n-- Recipe unlock example based on skill\nif builder:HasBuilderSkill("naturalist_florist") then\n    builder:UnlockRecipe("flowersalad")\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"builder-tags-pre-624447",children:"Builder Tags (Pre-624447)"}),"\n",(0,s.jsx)(n.p,{children:"Before API version 624447, characters used a tag-based system to unlock special recipes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Old system (deprecated)\ninst:AddTag("handyperson") -- Added tag to allow building structures\ninst:AddTag("masterchef") -- Added tag to allow cooking special foods\ninst:RemoveTag("handyperson") -- Removed building capability\n'})}),"\n",(0,s.jsx)(n.p,{children:"When implementing mods that need to work across API versions, you should check the API version and use the appropriate system:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function EnableWoodcuttingRecipes(inst)\n    if TheSim:GetGameID() == "DST" and TUNING.API_VERSION >= 624447 then\n        -- Use new builder skills system\n        if inst.components.builder ~= nil then\n            inst.components.builder:AddBuilderSkill("woodcutter_harvester")\n        end\n    else\n        -- Use old tag system for backward compatibility\n        inst:AddTag("woodcutter")\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"character-skills-and-builder-component",children:"Character Skills and Builder Component"}),"\n",(0,s.jsx)(n.p,{children:"The character skill tree system (introduced in API version 624447) provides a progression framework that integrates with the builder component. Here's how they work together:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Character skill tree setup (for modders creating custom characters)\nlocal function SetupCharacterSkills(inst)\n    -- Add the skill tree updater component\n    inst:AddComponent("skilltreeupdater")\n    \n    -- Define skill groups and how they affect builder skills\n    local skills = {\n        -- Woodcutting skill group\n        woodcutting = {\n            -- Novice skill\n            novice_woodcutter = {\n                onactivate = function(inst)\n                    if inst.components.builder then\n                        -- Enable basic woodcutting recipes\n                        inst.components.builder:AddBuilderSkill("woodcutter_basic")\n                    end\n                end,\n                ondeactivate = function(inst)\n                    if inst.components.builder then\n                        inst.components.builder:RemoveBuilderSkill("woodcutter_basic")\n                    end\n                end,\n            },\n            \n            -- Advanced skill (requires novice first)\n            expert_woodcutter = {\n                -- Skill requirements\n                requires = {"novice_woodcutter"},\n                \n                onactivate = function(inst)\n                    if inst.components.builder then\n                        -- Enable advanced woodcutting recipes\n                        inst.components.builder:AddBuilderSkill("woodcutter_advanced")\n                        inst.components.builder:AddBuilderSkill("woodcutter_harvester")\n                    end\n                end,\n                ondeactivate = function(inst)\n                    if inst.components.builder then\n                        inst.components.builder:RemoveBuilderSkill("woodcutter_advanced")\n                        inst.components.builder:RemoveBuilderSkill("woodcutter_harvester")\n                    end\n                end,\n            },\n        },\n        \n        -- Cooking skill group\n        cooking = {\n            -- Define cooking-related skills...\n        },\n    }\n    \n    -- Register the skills with the skill tree updater\n    inst.components.skilltreeupdater:SetSkillTrees(skills)\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h4,{id:"recipe-integration-with-character-skills",children:"Recipe Integration with Character Skills"}),"\n",(0,s.jsxs)(n.p,{children:["Recipes can be locked behind character skills using the ",(0,s.jsx)(n.code,{children:"builder_skill"})," parameter:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic recipe that anyone can craft\nRecipe("spear", \n    {Ingredient("twigs", 1), Ingredient("flint", 1), Ingredient("rope", 1)}, \n    RECIPETABS.WAR)\n\n-- Recipe that requires a specific builder skill \nRecipe("superaxe", \n    {Ingredient("twigs", 2), Ingredient("flint", 2), Ingredient("goldnugget", 1)}, \n    RECIPETABS.TOOLS, \n    {builder_skill = "woodcutter_advanced"})\n    \n-- Recipe with multiple skill requirements (ANY of these skills will allow crafting)\nRecipe("multitool", \n    {Ingredient("twigs", 3), Ingredient("flint", 3), Ingredient("gears", 1)}, \n    RECIPETABS.TOOLS,\n    {builder_skill = {"engineering_advanced", "woodcutter_advanced"}})\n'})}),"\n",(0,s.jsx)(n.h4,{id:"benefits-of-the-skill-system",children:"Benefits of the Skill System"}),"\n",(0,s.jsx)(n.p,{children:"The character skill tree and builder skill integration offers several advantages:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Progressive Unlocking"}),": Characters can unlock new crafting abilities as they progress"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Character Specialization"}),": Different characters can have unique crafting abilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Skill-Specific Recipes"}),": Certain recipes can be limited to characters with specific skills"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Modifications"}),": Skills can be granted or removed based on game events, equipment, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Mod Integration"}),": Cleaner interface for mods to interact with character abilities"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-builder-skills",children:"Common Builder Skills"}),"\n",(0,s.jsx)(n.p,{children:"Some commonly used builder skills in the game include:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Skill Name"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Related Recipes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"woodcutter_harvester"})}),(0,s.jsx)(n.td,{children:"Basic woodcutting abilities"}),(0,s.jsx)(n.td,{children:"Special axe variants"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"masterchef_spicestation"})}),(0,s.jsx)(n.td,{children:"Advanced cooking techniques"}),(0,s.jsx)(n.td,{children:"Special spiced foods"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"naturalist_florist"})}),(0,s.jsx)(n.td,{children:"Plant and flower knowledge"}),(0,s.jsx)(n.td,{children:"Special flower recipes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"engineering_advanced"})}),(0,s.jsx)(n.td,{children:"Advanced engineering knowledge"}),(0,s.jsx)(n.td,{children:"Complex structures"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"arcane_crafter"})}),(0,s.jsx)(n.td,{children:"Magical crafting abilities"}),(0,s.jsx)(n.td,{children:"Magical items and structures"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"events-and-notifications",children:"Events and Notifications"}),"\n",(0,s.jsx)(n.p,{children:"When builder skills are added or removed, you can listen for these changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'inst:ListenForEvent("builderskillchanged", function(inst, data)\n    -- data.skill = Name of skill that changed\n    -- data.added = true if added, false if removed\n    print("Builder skill changed: " .. data.skill .. " - Added: " .. tostring(data.added))\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"example-setting-up-a-builder-with-tech-levels",children:"Example: Setting Up a Builder with Tech Levels"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function SetupBuilder(inst)\n    inst:AddComponent("builder")\n    \n    local builder = inst.components.builder\n    \n    -- Give basic tech level\n    builder:SetTechLevel(TECH.SCIENCE_ONE, 1)\n    \n    -- Unlock basic survival recipes\n    builder:UnlockRecipe("axe")\n    builder:UnlockRecipe("pickaxe")\n    builder:UnlockRecipe("campfire")\n    builder:UnlockRecipe("firepit")\n    builder:UnlockRecipe("spear")\n    \n    -- Add callback when near prototypers\n    inst:ListenForEvent("techtreechange", function(inst, data)\n        -- Do something when tech level changes\n        print("Tech tree changed: " .. data.level)\n    end)\n    \n    return builder\nend\n\n-- Example of using a prototyper (Science Machine)\nlocal function OnActivatePrototyper(inst, doer)\n    if doer.components.builder ~= nil then\n        doer.components.builder:AddBonus(TECH.SCIENCE_ONE, 1, inst)\n    end\nend\n\nlocal function OnDeactivatePrototyper(inst, doer)\n    if doer.components.builder ~= nil then\n        doer.components.builder:RemoveBonus(inst)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"builder-skills-vs-builder-tags",children:"Builder Skills vs Builder Tags"}),"\n",(0,s.jsx)(n.p,{children:"Prior to API version 624447, character skill trees used builder tags to unlock recipes. As of 624447, these have been replaced with builder skills, which integrate directly with the skill tree system. If you were using builder tags related to skill trees in your mods, you'll need to update to the new builder skills system."}),"\n",(0,s.jsx)(n.h3,{id:"migration-guide-tags-to-skills",children:"Migration Guide: Tags to Skills"}),"\n",(0,s.jsx)(n.p,{children:"If you're updating a mod from pre-624447 to the newer API version, follow these steps to migrate from builder tags to builder skills:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Identify tag usage"}),": Find all instances where you add/remove builder-related tags"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Old code using tags\ninst:AddTag("handyperson") -- Added tag to allow building structures\ninst:AddTag("masterchef") -- Added tag to allow cooking special foods\ninst:RemoveTag("handyperson") -- Removed building capability\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Map tags to skills"}),": Replace tags with their equivalent builder skills"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Common tag to skill mappings\nlocal TAG_TO_SKILL = {\n    masterchef = "masterchef_spicestation",\n    handyperson = "engineering_advanced",\n    woodcutter = "woodcutter_harvester",\n    -- Add other mappings as needed\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Update code to use builder skills"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- New code using builder skills\nif inst.components.builder then\n    inst.components.builder:AddBuilderSkill("masterchef_spicestation")\n    inst.components.builder:AddBuilderSkill("engineering_advanced")\nend\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Handle compatibility across versions"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function AddCraftingAbility(inst, ability_name)\n    if TUNING.API_VERSION >= 624447 then\n        -- New API - use builder skills\n        if inst.components.builder then\n            local skill = TAG_TO_SKILL[ability_name] or ability_name\n            inst.components.builder:AddBuilderSkill(skill)\n        end\n    else\n        -- Old API - use tags\n        inst:AddTag(ability_name)\n    end\nend\n\n-- Usage\nAddCraftingAbility(inst, "masterchef")\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Update recipe definitions"}),": If you've defined custom recipes that relied on builder tags, update them to use builder skills instead:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Old recipe definition\nRecipe("specialitem", \n    {Ingredient("twigs", 1), Ingredient("cutgrass", 2)}, \n    RECIPETABS.TOOLS, \n    {builder_tag = "masterchef"})\n    \n-- New recipe definition\nRecipe("specialitem", \n    {Ingredient("twigs", 1), Ingredient("cutgrass", 2)}, \n    RECIPETABS.TOOLS, \n    {builder_skill = "masterchef_spicestation"})\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Test thoroughly"}),": Ensure recipes unlock correctly across different API versions."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-tag-to-skill-mappings",children:"Common Tag to Skill Mappings"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Old Builder Tag"}),(0,s.jsx)(n.th,{children:"New Builder Skill"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"masterchef"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"masterchef_spicestation"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"handyperson"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"engineering_advanced"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"woodcutter"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"woodcutter_harvester"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gem_alchemistI"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"arcane_crafter"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"plantkin"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"naturalist_florist"})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Remember that builder skills offer more granular control than the previous tag system, allowing for more nuanced recipe unlocking based on character progression."}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/inventory",children:"Inventory Component"})," - For storing crafting ingredients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/other-components",children:"Prototyper Component"})," - For workstations that provide tech levels"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/recipes/crafting",children:"Recipes"})," - For crafting recipe definitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/sanity",children:"Sanity Component"})," - For sanity effects from crafting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/container",children:"Container Component"})," - For storing crafted items"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var l=i(6540);const s={},r=l.createContext(s);function t(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);