"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5191],{7829:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-vanilla/examples/case-forge","title":"Case Study - The Forge Mod","description":"This case study examines \\"ReForged\\" - a fan-made mod that recreates and extends \\"The Forge\\" event from Don\'t Starve Together. The Forge was originally a limited-time official event created by Klei Entertainment. This mod implementation demonstrates advanced techniques for creating a complete game mode with custom mechanics, prefabs, components, and UI elements.","source":"@site/docs/api-vanilla/examples/case-forge.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/case-forge","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-forge","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"case-forge","title":"Case Study - The Forge Mod","sidebar_position":2,"version":619045},"sidebar":"docs","previous":{"title":"Case Study - Combined Status","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-status"},"next":{"title":"Case Study - Island Adventures Core","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-ia-core"}}');var s=a(4848),i=a(8453);const o={id:"case-forge",title:"Case Study - The Forge Mod",sidebar_position:2,version:619045},r="Case Study: The Forge Mod",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Code Structure",id:"code-structure",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Custom Components",id:"custom-components",level:3},{value:"Combat System Extensions",id:"combat-system-extensions",level:3},{value:"Wave Management",id:"wave-management",level:3},{value:"Custom UI",id:"custom-ui",level:3},{value:"Server-Client Communication",id:"server-client-communication",level:3},{value:"API Usage Highlights",id:"api-usage-highlights",level:2},{value:"Component System",id:"component-system",level:3},{value:"Prefab Creation",id:"prefab-creation",level:3},{value:"Event System",id:"event-system",level:3},{value:"World State Management",id:"world-state-management",level:3},{value:"Key Lessons",id:"key-lessons",level:2},{value:"1. Component-Based Architecture",id:"1-component-based-architecture",level:3},{value:"2. Network Synchronization",id:"2-network-synchronization",level:3},{value:"3. Game Mode Customization",id:"3-game-mode-customization",level:3},{value:"4. Code Organization",id:"4-code-organization",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"case-study-the-forge-mod",children:"Case Study: The Forge Mod"})}),"\n",(0,s.jsx)(n.p,{children:'This case study examines "ReForged" - a fan-made mod that recreates and extends "The Forge" event from Don\'t Starve Together. The Forge was originally a limited-time official event created by Klei Entertainment. This mod implementation demonstrates advanced techniques for creating a complete game mode with custom mechanics, prefabs, components, and UI elements.'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://gitlab.com/forged-forge/forge",children:"Gitlab"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://steamcommunity.com/sharedfiles/filedetails/?id=1938752683",children:"Steam Workshop"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Forge mod converts Don't Starve Together into a combat-focused arena game mode where players fight waves of enemies and bosses. Key features include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Custom game mode with distinct rules (no hunger/sanity, combat focus)"}),"\n",(0,s.jsx)(n.li,{children:"Wave-based enemy system with custom AI and behaviors"}),"\n",(0,s.jsx)(n.li,{children:"Unique weapons and armor with special abilities"}),"\n",(0,s.jsx)(n.li,{children:"Custom UI and HUD elements"}),"\n",(0,s.jsx)(n.li,{children:"Achievement and stat tracking systems"}),"\n",(0,s.jsx)(n.li,{children:"Extensive configuration options"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"code-structure",children:"Code Structure"}),"\n",(0,s.jsx)(n.p,{children:"The mod follows a well-organized structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"forge/\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 components/         # Custom components\n\u2502   \u251c\u2500\u2500 forge_data/         # Core data modules\n\u2502   \u2502   \u251c\u2500\u2500 prefabs/        # Custom prefabs\n\u2502   \u2502   \u2514\u2500\u2500 components/     # Event-specific components\n\u2502   \u251c\u2500\u2500 _common_functions.lua  # Shared utility functions \n\u2502   \u251c\u2500\u2500 forge_main.lua      # Main mod code\n\u2502   \u251c\u2500\u2500 forge_combat.lua    # Combat system\n\u2502   \u251c\u2500\u2500 forge_tuning.lua    # Game balance values\n\u2502   \u2514\u2500\u2500 forge_prefab.lua    # Prefab creation helpers\n\u251c\u2500\u2500 anim/                   # Custom animations\n\u251c\u2500\u2500 images/                 # Images and textures\n\u251c\u2500\u2500 modinfo.lua             # Mod configuration\n\u2514\u2500\u2500 modmain.lua             # Mod entry point\n"})}),"\n",(0,s.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"custom-components",children:"Custom Components"}),"\n",(0,s.jsx)(n.p,{children:"The Forge implements numerous custom components to support its unique gameplay:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Example: Rechargeable Component (for special weapon abilities)\nfunction Rechargeable:SetRechargeTime(time)\n    self.maxcharge = time\n    self.charge = time\n    self.inst:StartUpdatingComponent(self)\n    self:OnUpdate(0)\nend\n\nfunction Rechargeable:SetOnReadyFn(fn)\n    self.onready = fn\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"Key components include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rechargeable"})," - For abilities with cooldowns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"buffable"})," - For applying status effects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stat_tracker"})," - For tracking player performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aoespell"})," - For area-of-effect abilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"corpsereviver"})," - For player revive mechanics"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"combat-system-extensions",children:"Combat System Extensions"}),"\n",(0,s.jsx)(n.p,{children:"The mod significantly extends the base game's combat system to support advanced mechanics:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Adding damage types\n_G.TUNING.FORGE.DAMAGETYPES = {\n    PHYSICAL = 1,\n    MAGIC = 2,\n    SOUND = 3,\n    GAS = 4,\n    LIQUID = 5\n}\n\n-- Adding damage buffs\nfunction Combat:AddDamageBuff(buffname, data, recieved, remove_old_buff)\n    if remove_old_buff and self:HasDamageBuff(buffname, recieved) then\n        self:RemoveDamageBuff(buffname, recieved)\n    end\n    if not self:HasDamageBuff(buffname, recieved) then\n        local buff = type(data) == "number" and {buff = data} or data\n        self.damagebuffs[recieved and "recieved" or "dealt"][buffname] = buff\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"wave-management",children:"Wave Management"}),"\n",(0,s.jsx)(n.p,{children:"Enemy waves are controlled through a sophisticated wave system:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Wave definition example (simplified)\nwaves = {\n    {\n        name = "Crocommanders",\n        count = 6,\n        prefabs = {"crocommander"},\n    },\n    {\n        name = "Pit Pigs",\n        count = 6,\n        prefabs = {"pitpig"},\n        health_override = 200,\n    },\n    {\n        name = "Boarrior",\n        count = 1,\n        prefabs = {"boarrior"},\n        arena_override = "arena2",\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-ui",children:"Custom UI"}),"\n",(0,s.jsx)(n.p,{children:"The mod implements extensive UI modifications for the unique game mode:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- UI customization example\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal ImageButton = require "widgets/imagebutton"\n\n-- Patching existing UI classes\nfor class, fn in pairs(ForgeUI) do\n    AddClassPostConstruct(class, fn)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"server-client-communication",children:"Server-Client Communication"}),"\n",(0,s.jsx)(n.p,{children:"The mod uses a robust networking layer to synchronize game state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Setting up network components\nfor classif, fn in pairs(ForgeNetworking) do\n    AddPrefabPostInit(classif.."_classified", fn)\nend\n\n-- Custom command for player location pinging\nAddUserCommand("pinglocation", {\n    prettyname = STRINGS.REFORGED.USERCOMMANDS.PING_LOCATION_TITLE,\n    desc = STRINGS.REFORGED.USERCOMMANDS.PING_LOCATION_DESC,\n    permission = COMMAND_PERMISSION.USER,\n    params = {"location"},\n    paramsoptional = {false},\n    serverfn = function(params, caller)\n        if TheWorld then\n            TheWorld.net.components.command_manager:UpdateCommandCooldownForUser("pinglocation", caller.userid)\n            local lavaarenaeventstate = TheWorld.net.components.lavaarenaeventstate\n            if lavaarenaeventstate and lavaarenaeventstate.in_progress:value() then\n                local player = GetPlayer(caller.userid)\n                if player and not (player.ping_banner and player.ping_banner:IsValid()) then\n                    banner = SpawnPrefab("rf_ping_banner")\n                    local pos = params.location and ConvertTableToPoint(ConvertStringToTable(params.location))\n                    if pos then\n                        banner.Transform:SetPosition(pos.x, pos.y, pos.z)\n                        player.ping_banner = banner\n                    end\n                end\n            end\n        end\n    end,\n})\n'})}),"\n",(0,s.jsx)(n.h2,{id:"api-usage-highlights",children:"API Usage Highlights"}),"\n",(0,s.jsx)(n.h3,{id:"component-system",children:"Component System"}),"\n",(0,s.jsx)(n.p,{children:"The Forge mod makes extensive use of the component system, both by extending existing components and creating new ones:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Extending the combat component\nAddComponentPostInit("combat", function(self)\n    self.damage_override = nil\n    self.damagetype = nil\n    self.damagebuffs = { dealt = {}, recieved = {} }\n    \n    -- Adding new methods\n    function self:SetDamageType(damagetype)\n        self.damagetype = damagetype\n    end\n    \n    -- Overriding existing methods\n    local _oldGetAttackRange = self.GetAttackRange\n    function self:GetAttackRange()\n        local weapon = self:GetWeapon()\n        if weapon and weapon.components.weapon:CanAltAttack() then\n            return weapon.components.weapon.altattackrange\n        else\n            return _oldGetAttackRange(self)\n        end\n    end\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"prefab-creation",children:"Prefab Creation"}),"\n",(0,s.jsxs)(n.p,{children:["The mod introduces a custom helper function ",(0,s.jsx)(n.code,{children:"ForgePrefab()"})," for creating prefabs that integrate with the mod's systems:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- ForgePrefab helper function\nForgePrefab = function(name, fn, assets, deps, force_path_search, category, is_mod, atlas, image, mod_icon, stats, abilities, swap_build, swap_data)\n    -- Creates a Prefab and adds it to the forge item list\n    -- to be displayed in the admin/debug menu.\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"event-system",children:"Event System"}),"\n",(0,s.jsx)(n.p,{children:"The mod leverages the event system for coordinating gameplay elements:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'inst:ListenForEvent("playeractivated", function(inst, player)\n    if _G.ThePlayer == player then\n        UserCommands.RunUserCommand("updateusersfriends", \n            {total_friends = GetFriendCount()}, \n            _G.TheNet:GetClientTableForUser(_G.TheNet:GetUserID()))\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"world-state-management",children:"World State Management"}),"\n",(0,s.jsx)(n.p,{children:"The mod uses TheWorld to manage game state across clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'AddPrefabPostInit("lavaarena", function(inst)\n    if not _G.TheNet:IsDedicated() then\n        inst:ListenForEvent("playeractivated", function(inst, player)\n            if _G.ThePlayer == player then\n                UserCommands.RunUserCommand("updateusersfriends", \n                    {total_friends = GetFriendCount()}, \n                    _G.TheNet:GetClientTableForUser(_G.TheNet:GetUserID()))\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"key-lessons",children:"Key Lessons"}),"\n",(0,s.jsx)(n.h3,{id:"1-component-based-architecture",children:"1. Component-Based Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The mod demonstrates the power of DST's component system by:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Extending existing components like ",(0,s.jsx)(n.code,{children:"combat"})," to add new functionality"]}),"\n",(0,s.jsx)(n.li,{children:"Creating specialized components for specific features"}),"\n",(0,s.jsx)(n.li,{children:"Separating concerns into focused components"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-network-synchronization",children:"2. Network Synchronization"}),"\n",(0,s.jsx)(n.p,{children:"Effective multiplayer experience requires careful attention to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Synchronized state between server and clients"}),"\n",(0,s.jsx)(n.li,{children:"Efficient network usage by only sending necessary data"}),"\n",(0,s.jsx)(n.li,{children:"Using the classified networking pattern for sensitive data"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-game-mode-customization",children:"3. Game Mode Customization"}),"\n",(0,s.jsx)(n.p,{children:"Creating a complete game mode involves:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Modifying core game mechanics (hunger, sanity, damage)"}),"\n",(0,s.jsx)(n.li,{children:"Creating custom UI for mode-specific information"}),"\n",(0,s.jsx)(n.li,{children:"Managing game progression through waves and stages"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-code-organization",children:"4. Code Organization"}),"\n",(0,s.jsx)(n.p,{children:"The mod demonstrates good practices in code organization:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Separating functionality into logical modules"}),"\n",(0,s.jsx)(n.li,{children:"Using common utility functions"}),"\n",(0,s.jsx)(n.li,{children:"Keeping configuration separate from implementation"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"The Forge mod showcases advanced techniques for creating a complex game mode in Don't Starve Together. By studying its implementation, developers can learn how to effectively use DST's API to create rich, interactive experiences while maintaining good performance and code organization."}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/component-system",children:"Component System"})," - For understanding how components work"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/event-system",children:"Event System"})," - For event handling as used in this mod"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-system",children:"Network System"})," - For multiplayer synchronization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/combat",children:"Combat Component"})," - The base component extended in this mod"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-component",children:"Custom Component Example"})," - For learning how to create custom components"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var t=a(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);