"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[60777],{6394:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/utilities/perfutil","title":"Performance Utilities","description":"Performance monitoring, profiling, and debugging utilities for Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/fundamentals/utilities/perfutil.md","sourceDirName":"game-scripts/core-systems/fundamentals/utilities","slug":"/game-scripts/core-systems/fundamentals/utilities/perfutil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/perfutil","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"perfutil","title":"Performance Utilities","description":"Performance monitoring, profiling, and debugging utilities for Don\'t Starve Together","sidebar_position":10,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Math Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/mathutil"},"next":{"title":"Simulation Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/simutil"}}');var r=i(74848),s=i(28453);const a={id:"perfutil",title:"Performance Utilities",description:"Performance monitoring, profiling, and debugging utilities for Don't Starve Together",sidebar_position:10,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},o="Performance Utilities",l={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Entity Monitoring Functions",id:"entity-monitoring-functions",level:2},{value:"CountEntities()",id:"count-entities",level:3},{value:"Save Data Functions",id:"save-data-functions",level:2},{value:"GetProfilerSave(results)",id:"get-profiler-save",level:3},{value:"Player Monitoring Functions",id:"player-monitoring-functions",level:2},{value:"GetProfilerPlayers(results)",id:"get-profiler-players",level:3},{value:"Server Information Functions",id:"server-information-functions",level:2},{value:"GetProfilerServerStats(results)",id:"get-profiler-server-stats",level:3},{value:"Mod Information Functions",id:"mod-information-functions",level:2},{value:"GetProfilerModInfo(results)",id:"get-profiler-mod-info",level:3},{value:"Comprehensive Profiling Functions",id:"comprehensive-profiling-functions",level:2},{value:"GetProfilerMetaData()",id:"get-profiler-metadata",level:3},{value:"Advanced Profiling Functions",id:"advanced-profiling-functions",level:2},{value:"ExpandWorldFromProfile()",id:"expand-world-from-profile",level:3},{value:"Performance Monitoring Workflows",id:"performance-monitoring-workflows",level:2},{value:"Complete Performance Assessment",id:"complete-performance-assessment",level:3},{value:"Debugging and Troubleshooting",id:"debugging-and-troubleshooting",level:2},{value:"Common Use Cases",id:"common-use-cases",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Security Notes",id:"security-notes",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"performance-utilities",children:"Performance Utilities"})}),"\n",(0,r.jsx)(e.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Build Version"}),(0,r.jsx)(e.th,{children:"Change Date"}),(0,r.jsx)(e.th,{children:"Change Type"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsx)(e.tbody,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"676042"}),(0,r.jsx)(e.td,{children:"2025-06-21"}),(0,r.jsx)(e.td,{children:"stable"}),(0,r.jsx)(e.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"perfutil"})," module provides a comprehensive set of performance monitoring and profiling utilities for Don't Starve Together. These functions are essential for debugging performance issues, monitoring game state, and collecting diagnostic information about entities, players, mods, and server performance. The module is primarily used for development, debugging, and server administration purposes."]}),"\n",(0,r.jsx)(e.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Count all entities and display statistics\nCountEntities()\n-- Output: Detailed breakdown of all entities by prefab type\n\n-- Get comprehensive profiler metadata\nlocal profile_data = GetProfilerMetaData()\nprint("Server mode: " .. profile_data.ClientMode)\nprint("Number of players: " .. (profile_data.numplayers or 0))\nprint("Active mods: " .. (profile_data.mods or "none"))\n\n-- Example output analysis\nif profile_data.numplayers and profile_data.numplayers > 10 then\n    print("High player count - monitor performance")\nend\n'})}),"\n",(0,r.jsx)(e.h2,{id:"entity-monitoring-functions",children:"Entity Monitoring Functions"}),"\n",(0,r.jsx)(e.h3,{id:"count-entities",children:"CountEntities()"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Status:"})," ",(0,r.jsx)(e.code,{children:"stable"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"}),"\nPerforms a comprehensive count and analysis of all entities in the game world. Provides detailed statistics including total entities, awake entities, invalid entities, and a breakdown by prefab type sorted by frequency."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Returns:"}),"\nNone (prints results to console)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Output Format:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Total entities: 1234 (awake 567)\nNo prefab: 2\nInvalid entities: 0\n     tree_01 -   150\n     grass   -   120\n     rock    -    85\n     ...\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Monitor entity count before and after operations\nprint("=== Before Spawning ===")\nCountEntities()\n\n-- Spawn many entities for testing\nfor i = 1, 100 do\n    SpawnPrefab("tree_01").Transform:SetPosition(math.random(-50, 50), 0, math.random(-50, 50))\nend\n\nprint("=== After Spawning ===")\nCountEntities()\n\n-- Use for memory leak detection\nlocal function MonitorEntityGrowth()\n    local start_time = GetTime()\n    CountEntities()\n    \n    -- Check again after 5 minutes\n    Scheduler:DoTaskInTime(300, function()\n        print("=== Entity Check After 5 Minutes ===")\n        CountEntities()\n        print("Monitor for unusual entity growth patterns")\n    end)\nend\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Performance Analysis:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Memory Leaks"}),": Increasing invalid entity count indicates memory leaks"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Entity Bloat"}),": Excessive entities of specific types may indicate spawning issues"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sleep State"}),": High awake entity count may impact performance"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"save-data-functions",children:"Save Data Functions"}),"\n",(0,r.jsx)(e.h3,{id:"get-profiler-save",children:"GetProfilerSave(results)"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Status:"})," ",(0,r.jsx)(e.code,{children:"stable"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"}),"\nRetrieves world save data and stores it in the results table for profiling purposes. Handles both dedicated server and client configurations with appropriate file path resolution."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results"})," (table): Table to store the retrieved save data"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Returns:"}),"\nNone (modifies results table)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Result Fields:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results.levelstring"})," (string): World configuration data in string format"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Collect save data for analysis\nlocal save_results = {}\nGetProfilerSave(save_results)\n\n-- Process save data when available\nlocal function AnalyzeSaveData()\n    if save_results.levelstring then\n        print("Save data collected successfully")\n        \n        -- Analyze world configuration\n        if save_results.levelstring:find("caves") then\n            print("World includes caves")\n        end\n        \n        if save_results.levelstring:find("forest") then\n            print("World includes forest")\n        end\n        \n        -- Check save data size\n        local data_size = string.len(save_results.levelstring)\n        print("Save data size: " .. data_size .. " bytes")\n        \n        if data_size > 1000000 then  -- 1MB\n            print("WARNING: Large save file detected")\n        end\n    else\n        print("Save data not yet available")\n    end\nend\n\n-- Check periodically until data is loaded\nlocal check_task = Scheduler:AddTask(1, AnalyzeSaveData)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"player-monitoring-functions",children:"Player Monitoring Functions"}),"\n",(0,r.jsx)(e.h3,{id:"get-profiler-players",children:"GetProfilerPlayers(results)"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Status:"})," ",(0,r.jsx)(e.code,{children:"stable"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"}),"\nCollects player connection information including player count and ping statistics for network performance analysis."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results"})," (table): Table to store player information"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Returns:"}),"\nNone (modifies results table)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Result Fields:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results.numplayers"})," (number): Total number of connected players"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results.pings"}),' (string): Space-separated ping values or "host" for server']}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Monitor player connection quality\nlocal function MonitorPlayerConnections()\n    local player_data = {}\n    GetProfilerPlayers(player_data)\n    \n    if player_data.numplayers then\n        print("Connected players: " .. player_data.numplayers)\n        \n        if player_data.pings then\n            local ping_values = {}\n            for ping in player_data.pings:gmatch("%S+") do\n                if ping ~= "host" then\n                    table.insert(ping_values, tonumber(ping))\n                end\n            end\n            \n            -- Calculate average ping\n            if #ping_values > 0 then\n                local total_ping = 0\n                local high_ping_count = 0\n                \n                for _, ping in ipairs(ping_values) do\n                    total_ping = total_ping + ping\n                    if ping > 200 then\n                        high_ping_count = high_ping_count + 1\n                    end\n                end\n                \n                local avg_ping = total_ping / #ping_values\n                print("Average ping: " .. math.floor(avg_ping) .. "ms")\n                \n                if high_ping_count > 0 then\n                    print("WARNING: " .. high_ping_count .. " players with high ping (>200ms)")\n                end\n            end\n        end\n    else\n        print("No player data available")\n    end\nend\n\n-- Regular connection monitoring\nScheduler:AddPeriodicTask(30, MonitorPlayerConnections)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"server-information-functions",children:"Server Information Functions"}),"\n",(0,r.jsx)(e.h3,{id:"get-profiler-server-stats",children:"GetProfilerServerStats(results)"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Status:"})," ",(0,r.jsx)(e.code,{children:"stable"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"}),"\nDetermines and records the server's operational mode (Dedicated Server, Server, or Client)."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results"})," (table): Table to store server statistics"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Returns:"}),"\nNone (modifies results table)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Result Fields:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results.ClientMode"}),' (string): One of "Dedicated Server", "Server", or "Client"']}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Adapt behavior based on server type\nlocal function ConfigureByServerType()\n    local server_info = {}\n    GetProfilerServerStats(server_info)\n    \n    print("Running in mode: " .. server_info.ClientMode)\n    \n    if server_info.ClientMode == "Dedicated Server" then\n        print("Dedicated server detected - enabling server optimizations")\n        -- Enable server-specific optimizations\n        -- Reduce visual effects, increase tick rate, etc.\n        \n    elseif server_info.ClientMode == "Server" then\n        print("Host server detected - balancing client/server load")\n        -- Balance between hosting and client performance\n        \n    elseif server_info.ClientMode == "Client" then\n        print("Client mode detected - focusing on local performance")\n        -- Client-specific optimizations\n        -- Reduce network polling, optimize rendering, etc.\n    end\nend\n\n-- Configuration on startup\nConfigureByServerType()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"mod-information-functions",children:"Mod Information Functions"}),"\n",(0,r.jsx)(e.h3,{id:"get-profiler-mod-info",children:"GetProfilerModInfo(results)"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Status:"})," ",(0,r.jsx)(e.code,{children:"stable"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"}),"\nCollects information about active server mods including count and names for compatibility and performance analysis."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results"})," (table): Table to store mod information"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Returns:"}),"\nNone (modifies results table)"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Result Fields:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"results.mods"}),' (string): Format "count:[mod1][mod2][mod3]..."']}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Analyze mod compatibility and performance impact\nlocal function AnalyzeModConfiguration()\n    local mod_info = {}\n    GetProfilerModInfo(mod_info)\n    \n    if mod_info.mods then\n        local count_str, mod_list = mod_info.mods:match("(%d+):(.*)")\n        local mod_count = tonumber(count_str) or 0\n        \n        print("Active mods: " .. mod_count)\n        \n        if mod_count == 0 then\n            print("Vanilla game - optimal performance expected")\n        elseif mod_count <= 5 then\n            print("Light mod usage - minimal performance impact")\n        elseif mod_count <= 15 then\n            print("Moderate mod usage - monitor performance")\n        else\n            print("Heavy mod usage - expect performance impact")\n        end\n        \n        -- Extract individual mod names\n        if mod_list then\n            local mods = {}\n            for mod in mod_list:gmatch("%[([^%]]+)%]") do\n                table.insert(mods, mod)\n            end\n            \n            print("Loaded mods:")\n            for i, mod in ipairs(mods) do\n                print("  " .. i .. ". " .. mod)\n            end\n            \n            -- Check for known problematic mods\n            local problematic_mods = {"heavy_graphics_mod", "entity_spawner"}\n            for _, problem_mod in ipairs(problematic_mods) do\n                for _, loaded_mod in ipairs(mods) do\n                    if loaded_mod:find(problem_mod) then\n                        print("WARNING: Potentially problematic mod detected: " .. loaded_mod)\n                    end\n                end\n            end\n        end\n    else\n        print("No mod information available")\n    end\nend\n'})}),"\n",(0,r.jsx)(e.h2,{id:"comprehensive-profiling-functions",children:"Comprehensive Profiling Functions"}),"\n",(0,r.jsx)(e.h3,{id:"get-profiler-metadata",children:"GetProfilerMetaData()"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Status:"})," ",(0,r.jsx)(e.code,{children:"stable"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"}),"\nCollects comprehensive profiling information by combining data from all other profiler functions. Returns a complete snapshot of the current game state for performance analysis."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"(table): Complete profiler data including server stats, save data, player info, and mod information"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Comprehensive performance analysis\nlocal function PerformComprehensiveAnalysis()\n    local metadata = GetProfilerMetaData()\n    \n    print("=== Comprehensive Performance Analysis ===")\n    \n    -- Server Analysis\n    if metadata.ClientMode then\n        print("Server Mode: " .. metadata.ClientMode)\n    end\n    \n    -- Player Analysis\n    if metadata.numplayers then\n        print("Player Count: " .. metadata.numplayers)\n        \n        if metadata.pings then\n            print("Player Pings: " .. metadata.pings)\n        end\n        \n        -- Performance warnings based on player count\n        if metadata.numplayers > 16 then\n            print("WARNING: High player count may impact performance")\n        end\n    end\n    \n    -- Mod Analysis\n    if metadata.mods then\n        local mod_count = metadata.mods:match("(%d+):")\n        print("Active Mods: " .. (mod_count or "0"))\n        \n        if tonumber(mod_count) > 20 then\n            print("WARNING: High mod count may cause performance issues")\n        end\n    end\n    \n    -- Save Data Analysis\n    if metadata.levelstring then\n        local save_size = string.len(metadata.levelstring)\n        print("Save Data Size: " .. save_size .. " bytes")\n        \n        if save_size > 500000 then  -- 500KB\n            print("WARNING: Large save file - potential memory usage concern")\n        end\n    end\n    \n    return metadata\nend\n\n-- Periodic comprehensive analysis\nlocal function StartPerformanceMonitoring()\n    print("Starting performance monitoring...")\n    \n    -- Initial analysis\n    PerformComprehensiveAnalysis()\n    \n    -- Schedule regular checks\n    Scheduler:AddPeriodicTask(300, function()  -- Every 5 minutes\n        print("\\n=== Scheduled Performance Check ===")\n        local data = PerformComprehensiveAnalysis()\n        \n        -- Log to file for historical analysis\n        local timestamp = os.date("%Y-%m-%d %H:%M:%S")\n        local log_entry = string.format(\n            "[%s] Players: %s, Mods: %s, Mode: %s",\n            timestamp,\n            data.numplayers or "N/A",\n            data.mods and data.mods:match("(%d+):") or "N/A",\n            data.ClientMode or "N/A"\n        )\n        print("Log: " .. log_entry)\n    end)\nend\n'})}),"\n",(0,r.jsx)(e.h2,{id:"advanced-profiling-functions",children:"Advanced Profiling Functions"}),"\n",(0,r.jsx)(e.h3,{id:"expand-world-from-profile",children:"ExpandWorldFromProfile()"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Status:"})," ",(0,r.jsx)(e.code,{children:"stable"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Description:"}),"\nExtracts world configuration data from a stored performance profile and saves it as a separate world file. Used for debugging and world analysis from historical profile data."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Returns:"}),'\nNone (creates "profile_world" file if successful)']}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Extract world data from profile for analysis\nlocal function ExtractAndAnalyzeWorldProfile()\n    print("Extracting world data from profile...")\n    \n    ExpandWorldFromProfile()\n    \n    -- Check if extraction was successful\n    Scheduler:DoTaskInTime(1, function()\n        TheSim:GetPersistentString("profile_world", function(success, data)\n            if success and data then\n                print("World profile extracted successfully")\n                print("Profile data size: " .. string.len(data) .. " bytes")\n                \n                -- Analyze extracted world data\n                local function AnalyzeWorldProfile(world_data)\n                    if world_data:find(\'"caves":true\') then\n                        print("Profile includes caves configuration")\n                    end\n                    \n                    if world_data:find(\'"forest":true\') then\n                        print("Profile includes forest configuration")\n                    end\n                    \n                    -- Look for world size indicators\n                    if world_data:find(\'"size":"huge"\') then\n                        print("Large world detected - expect higher entity counts")\n                    end\n                    \n                    -- Check for special world settings\n                    if world_data:find(\'"difficulty":"hard"\') then\n                        print("Hard difficulty world")\n                    end\n                end\n                \n                AnalyzeWorldProfile(data)\n            else\n                print("Failed to extract world profile or no profile available")\n            end\n        end)\n    end)\nend\n\n-- Use for post-mortem analysis\nlocal function PostMortemAnalysis()\n    print("Performing post-mortem performance analysis...")\n    \n    -- Get current state\n    CountEntities()\n    local current_metadata = GetProfilerMetaData()\n    \n    -- Extract historical data\n    ExpandWorldFromProfile()\n    \n    print("Analysis complete - check logs for performance patterns")\nend\n'})}),"\n",(0,r.jsx)(e.h2,{id:"performance-monitoring-workflows",children:"Performance Monitoring Workflows"}),"\n",(0,r.jsx)(e.h3,{id:"complete-performance-assessment",children:"Complete Performance Assessment"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Comprehensive performance monitoring system\nlocal PerformanceMonitor = {}\n\nfunction PerformanceMonitor:Initialize()\n    print("Initializing Performance Monitor...")\n    self.baseline_data = {}\n    self.alert_thresholds = {\n        max_entities = 5000,\n        max_players = 20,\n        max_ping = 300,\n        max_mods = 25\n    }\n    \n    self:CollectBaseline()\n    self:StartMonitoring()\nend\n\nfunction PerformanceMonitor:CollectBaseline()\n    print("Collecting baseline performance data...")\n    \n    -- Entity baseline\n    local entity_count = 0\n    for _ in pairs(Ents) do\n        entity_count = entity_count + 1\n    end\n    self.baseline_data.entities = entity_count\n    \n    -- Server baseline\n    self.baseline_data.metadata = GetProfilerMetaData()\n    \n    print("Baseline established:")\n    print("  Entities: " .. entity_count)\n    print("  Players: " .. (self.baseline_data.metadata.numplayers or 0))\n    print("  Mods: " .. (self.baseline_data.metadata.mods and self.baseline_data.metadata.mods:match("(%d+):") or "0"))\nend\n\nfunction PerformanceMonitor:CheckCurrentState()\n    local current_data = {}\n    \n    -- Current entity count\n    local entity_count = 0\n    for _ in pairs(Ents) do\n        entity_count = entity_count + 1\n    end\n    current_data.entities = entity_count\n    \n    -- Current metadata\n    current_data.metadata = GetProfilerMetaData()\n    \n    -- Performance alerts\n    self:CheckAlerts(current_data)\n    \n    return current_data\nend\n\nfunction PerformanceMonitor:CheckAlerts(current_data)\n    local alerts = {}\n    \n    -- Entity count alert\n    if current_data.entities > self.alert_thresholds.max_entities then\n        table.insert(alerts, "HIGH ENTITY COUNT: " .. current_data.entities)\n    end\n    \n    -- Player count alert\n    local player_count = current_data.metadata.numplayers or 0\n    if player_count > self.alert_thresholds.max_players then\n        table.insert(alerts, "HIGH PLAYER COUNT: " .. player_count)\n    end\n    \n    -- Mod count alert\n    if current_data.metadata.mods then\n        local mod_count = tonumber(current_data.metadata.mods:match("(%d+):")) or 0\n        if mod_count > self.alert_thresholds.max_mods then\n            table.insert(alerts, "HIGH MOD COUNT: " .. mod_count)\n        end\n    end\n    \n    -- Print alerts\n    if #alerts > 0 then\n        print("=== PERFORMANCE ALERTS ===")\n        for _, alert in ipairs(alerts) do\n            print("\u26a0\ufe0f  " .. alert)\n        end\n        print("==========================")\n    end\nend\n\nfunction PerformanceMonitor:StartMonitoring()\n    print("Starting continuous performance monitoring...")\n    \n    -- Regular monitoring task\n    Scheduler:AddPeriodicTask(60, function()  -- Every minute\n        self:CheckCurrentState()\n    end)\n    \n    -- Detailed analysis every 10 minutes\n    Scheduler:AddPeriodicTask(600, function()\n        print("\\n=== Detailed Performance Analysis ===")\n        CountEntities()\n        self:CheckCurrentState()\n        print("=====================================\\n")\n    end)\nend\n\n-- Initialize the monitor\n-- PerformanceMonitor:Initialize()\n'})}),"\n",(0,r.jsx)(e.h2,{id:"debugging-and-troubleshooting",children:"Debugging and Troubleshooting"}),"\n",(0,r.jsx)(e.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Memory leak detection\nlocal function DetectMemoryLeaks()\n    local initial_count = 0\n    for _ in pairs(Ents) do\n        initial_count = initial_count + 1\n    end\n    \n    print("Initial entity count: " .. initial_count)\n    \n    -- Check again after some time\n    Scheduler:DoTaskInTime(300, function()  -- 5 minutes\n        local final_count = 0\n        for _ in pairs(Ents) do\n            final_count = final_count + 1\n        end\n        \n        local growth = final_count - initial_count\n        print("Entity growth after 5 minutes: " .. growth)\n        \n        if growth > 100 then\n            print("WARNING: Potential memory leak detected!")\n            CountEntities()  -- Detailed breakdown\n        end\n    end)\nend\n\n-- Network performance analysis\nlocal function AnalyzeNetworkPerformance()\n    local player_data = {}\n    GetProfilerPlayers(player_data)\n    \n    if player_data.pings then\n        local high_ping_players = 0\n        local total_ping = 0\n        local ping_count = 0\n        \n        for ping in player_data.pings:gmatch("%S+") do\n            if ping ~= "host" then\n                local ping_value = tonumber(ping)\n                if ping_value then\n                    total_ping = total_ping + ping_value\n                    ping_count = ping_count + 1\n                    \n                    if ping_value > 200 then\n                        high_ping_players = high_ping_players + 1\n                    end\n                end\n            end\n        end\n        \n        if ping_count > 0 then\n            local avg_ping = total_ping / ping_count\n            print("Network Analysis:")\n            print("  Average ping: " .. math.floor(avg_ping) .. "ms")\n            print("  High ping players: " .. high_ping_players)\n            \n            if avg_ping > 150 then\n                print("  \u26a0\ufe0f  High average ping detected")\n            end\n        end\n    end\nend\n'})}),"\n",(0,r.jsx)(e.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"./scheduler.md",children:"Scheduler"}),": Task scheduling for periodic performance monitoring"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"./consolecommands.md",children:"Console Commands"}),": Debug commands that may use performance utilities"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"./debugtools.md",children:"Debug Tools"}),": Additional debugging and profiling tools"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"./mods.md",children:"Mod Manager"}),": Mod management system for mod information collection"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"./networking.md",children:"Network"}),": Network systems for player and ping data"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Entity Counting"}),": ",(0,r.jsx)(e.code,{children:"CountEntities()"})," iterates through all entities - use sparingly in production"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Save Data Retrieval"}),": ",(0,r.jsx)(e.code,{children:"GetProfilerSave()"})," involves file I/O operations with async callbacks"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Network Queries"}),": Player information collection may have slight network overhead"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Memory Usage"}),": Metadata collection creates temporary data structures"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Frequency"}),": Regular profiling should be balanced against performance impact"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"security-notes",children:"Security Notes"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"File Access"}),": Some functions access persistent storage - ensure proper permissions"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Data Exposure"}),": Profiler metadata may contain sensitive server information"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Production Use"}),": These utilities are primarily for development and debugging environments"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Client/Server"}),": Some functions behave differently on dedicated servers vs. clients"]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var t=i(96540);const r={},s=t.createContext(r);function a(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);