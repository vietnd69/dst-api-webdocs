"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[56156],{24534:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"game-scripts/core-systems/character-systems/progression/skilltreedata","title":"Skill Tree Data","description":"Class for managing character skill tree data including skill activation, experience tracking, validation, and persistence","source":"@site/docs/game-scripts/core-systems/character-systems/progression/skilltreedata.md","sourceDirName":"game-scripts/core-systems/character-systems/progression","slug":"/game-scripts/core-systems/character-systems/progression/skilltreedata","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/progression/skilltreedata","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"skilltreedata","title":"Skill Tree Data","description":"Class for managing character skill tree data including skill activation, experience tracking, validation, and persistence","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Progression Constants","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/progression/progressionconstants"},"next":{"title":"WX78 Module Definitions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/progression/wx78-moduledefs"}}');var i=l(74848),r=l(28453);const a={id:"skilltreedata",title:"Skill Tree Data",description:"Class for managing character skill tree data including skill activation, experience tracking, validation, and persistence",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Skill Tree Data",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Class Constructor",id:"class-constructor",level:2},{value:"SkillTreeData()",id:"constructor",level:3},{value:"Core Methods",id:"core-methods",level:2},{value:"IsActivated(skill, characterprefab)",id:"is-activated",level:3},{value:"IsValidSkill(skill, characterprefab)",id:"is-valid-skill",level:3},{value:"ActivateSkill(skill, characterprefab)",id:"activate-skill",level:3},{value:"DeactivateSkill(skill, characterprefab)",id:"deactivate-skill",level:3},{value:"RespecSkills(characterprefab)",id:"respec-skills",level:3},{value:"Experience Management",id:"experience-management",level:2},{value:"GetSkillXP(characterprefab)",id:"get-skill-xp",level:3},{value:"AddSkillXP(amount, characterprefab)",id:"add-skill-xp",level:3},{value:"GetPointsForSkillXP(skillxp)",id:"get-points-for-skill-xp",level:3},{value:"GetAvailableSkillPoints(characterprefab)",id:"get-available-skill-points",level:3},{value:"GetMaximumExperiencePoints()",id:"get-maximum-experience-points",level:3},{value:"Networking Support",id:"networking-support",level:2},{value:"GetPlayerSkillSelection(characterprefab)",id:"get-player-skill-selection",level:3},{value:"GetNamesFromSkillSelection(skillselection, characterprefab)",id:"get-names-from-skill-selection",level:3},{value:"RPC Helper Methods",id:"rpc-helper-methods",level:2},{value:"GetSkillNameFromID(characterprefab, skill_rpc_id)",id:"get-skill-name-from-id",level:3},{value:"GetSkillIDFromName(characterprefab, skill)",id:"get-skill-id-from-name",level:3},{value:"Data Persistence",id:"data-persistence",level:2},{value:"EncodeSkillTreeData(characterprefab)",id:"encode-skill-tree-data",level:3},{value:"DecodeSkillTreeData(data)",id:"decode-skill-tree-data",level:3},{value:"Save(force_save, characterprefab)",id:"save",level:3},{value:"Load()",id:"load",level:3},{value:"Validation System",id:"validation-system",level:2},{value:"ValidateCharacterData(characterprefab, activatedskills, skillxp)",id:"validate-character-data",level:3},{value:"Online Profile Integration",id:"online-profile-integration",level:2},{value:"ApplyOnlineProfileData()",id:"apply-online-profile-data",level:3},{value:"ApplyCharacterData(characterprefab, skilltreedata)",id:"apply-character-data",level:3},{value:"OPAH (Online Profile Access Handler) Methods",id:"opah-online-profile-access-handler-methods",level:2},{value:"OPAH_DoBackup()",id:"opah-do-backup",level:3},{value:"OPAH_Ready()",id:"opah-ready",level:3},{value:"Data Structures",id:"data-structures",level:2},{value:"Internal Properties",id:"internal-properties",level:3},{value:"activatedskills",id:"activatedskills",level:4},{value:"skillxp",id:"skillxp",level:4},{value:"External Dependencies",id:"external-dependencies",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Basic Skill Management",id:"basic-skill-management",level:3},{value:"Experience and Point Calculation",id:"experience-and-point-calculation",level:3},{value:"Skill Tree Reset",id:"skill-tree-reset",level:3},{value:"Network Synchronization",id:"network-synchronization",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"skill-tree-data",children:"Skill Tree Data"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"SkillTreeData"})," class manages character skill tree information including activated skills, experience points, validation logic, and data persistence. It handles skill progression, networking synchronization, and save/load operations for the skill tree system."]}),"\n",(0,i.jsx)(n.h2,{id:"class-constructor",children:"Class Constructor"}),"\n",(0,i.jsx)(n.h3,{id:"constructor",children:"SkillTreeData()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCreates a new SkillTreeData instance with empty skill and experience data."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local skilltreedata = SkillTreeData()\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Initialized Properties:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"activatedskills"}),": Table mapping character prefabs to their activated skills"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skillxp"}),": Table mapping character prefabs to their experience points"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NILDATA"}),": Cached default encoded data string"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,i.jsx)(n.h3,{id:"is-activated",children:"IsActivated(skill, characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if a specific skill is activated for a character."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skill"})," (string): Skill name to check"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): true if skill is activated"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'if skilltreedata:IsActivated("wilson_torch", "wilson") then\n    print("Wilson has torch skill activated")\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"is-valid-skill",children:"IsValidSkill(skill, characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nValidates if a skill exists in the character's skill tree definition."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skill"})," (string): Skill name to validate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): true if skill is valid for character"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'if skilltreedata:IsValidSkill("wilson_torch", "wilson") then\n    -- Safe to activate this skill\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"activate-skill",children:"ActivateSkill(skill, characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nActivates a skill for a character. Performs validation to ensure skill prerequisites are met and available skill points exist."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skill"})," (string): Skill name to activate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): true if skill was successfully activated"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local success = skilltreedata:ActivateSkill("wilson_torch", "wilson")\nif success then\n    print("Torch skill activated for Wilson")\nelse\n    print("Failed to activate skill - check prerequisites or skill points")\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Validation Performed:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Skill exists in character's skill tree"}),"\n",(0,i.jsx)(n.li,{children:"Character has enough available skill points"}),"\n",(0,i.jsx)(n.li,{children:"Skill prerequisites are satisfied"}),"\n",(0,i.jsx)(n.li,{children:"Skill connections (must_have_one_of, must_have_all_of) are valid"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"deactivate-skill",children:"DeactivateSkill(skill, characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nDeactivates a skill for a character. Validates that dependent skills won't become invalid."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skill"})," (string): Skill name to deactivate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): true if skill was successfully deactivated"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local success = skilltreedata:DeactivateSkill("wilson_torch", "wilson")\nif success then\n    print("Torch skill deactivated for Wilson")\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"respec-skills",children:"RespecSkills(characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRemoves all activated skills for a character, effectively resetting their skill tree."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Reset Wilson\'s entire skill tree\nskilltreedata:RespecSkills("wilson")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"experience-management",children:"Experience Management"}),"\n",(0,i.jsx)(n.h3,{id:"get-skill-xp",children:"GetSkillXP(characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets the current experience points for a character."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Current experience points (0 if none)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local xp = skilltreedata:GetSkillXP("wilson")\nprint("Wilson has", xp, "experience points")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"add-skill-xp",children:"AddSkillXP(amount, characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nAdds experience points to a character, clamped to maximum allowed value."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"amount"})," (number): Experience points to add"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): true if experience was added"}),"\n",(0,i.jsx)(n.li,{children:"(number): New total experience amount"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local success, newxp = skilltreedata:AddSkillXP(100, "wilson")\nif success then\n    print("Added XP. Wilson now has", newxp, "total experience")\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"get-points-for-skill-xp",children:"GetPointsForSkillXP(skillxp)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates how many skill points are available for a given experience amount."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skillxp"})," (number): Experience points"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Available skill points"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local xp = 5000\nlocal points = skilltreedata:GetPointsForSkillXP(xp)\nprint(xp, "experience grants", points, "skill points")\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Algorithm:"}),"\nUses ",(0,i.jsx)(n.code,{children:"TUNING.SKILL_THRESHOLDS"})," to determine skill point progression:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Example threshold progression\nTUNING.SKILL_THRESHOLDS = {100, 200, 300, 500, 800, ...}\n-- 100 XP = 1 point, 300 XP = 2 points, 600 XP = 3 points, etc.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"get-available-skill-points",children:"GetAvailableSkillPoints(characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates remaining unspent skill points for a character."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Available unspent skill points"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local available = skilltreedata:GetAvailableSkillPoints("wilson")\nprint("Wilson can still activate", available, "more skills")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Calculation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- available = total_points_from_xp - activated_skills_count\n"})}),"\n",(0,i.jsx)(n.h3,{id:"get-maximum-experience-points",children:"GetMaximumExperiencePoints()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets the maximum possible experience points based on skill thresholds."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Maximum experience points"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local max_xp = skilltreedata:GetMaximumExperiencePoints()\nprint("Maximum possible XP:", max_xp)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"networking-support",children:"Networking Support"}),"\n",(0,i.jsx)(n.h3,{id:"get-player-skill-selection",children:"GetPlayerSkillSelection(characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nConverts activated skills to a compact bitfield representation for network transmission."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): Array with bitfield values representing activated skills"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local selection = skilltreedata:GetPlayerSkillSelection("wilson")\n-- Returns: {bitfield_value} where bits represent activated skills\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Technical Details:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Uses skill ",(0,i.jsx)(n.code,{children:"rpc_id"})," values to create bitfield"]}),"\n",(0,i.jsx)(n.li,{children:"Maximum 32 skills per bitfield slot"}),"\n",(0,i.jsx)(n.li,{children:"Optimized for network bandwidth"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"get-names-from-skill-selection",children:"GetNamesFromSkillSelection(skillselection, characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nConverts network bitfield representation back to skill names table."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skillselection"})," (table): Bitfield array from network"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): Table mapping skill names to true for activated skills"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local skills = skilltreedata:GetNamesFromSkillSelection(selection, "wilson")\n-- Returns: {wilson_torch = true, wilson_lighter = true, ...}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"rpc-helper-methods",children:"RPC Helper Methods"}),"\n",(0,i.jsx)(n.h3,{id:"get-skill-name-from-id",children:"GetSkillNameFromID(characterprefab, skill_rpc_id)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nLooks up skill name from RPC ID for network message handling."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skill_rpc_id"})," (number): RPC identifier for skill"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(string or nil): Skill name or nil if not found"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"get-skill-id-from-name",children:"GetSkillIDFromName(characterprefab, skill)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets RPC ID for a skill name for network message creation."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skill"})," (string): Skill name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number or nil): RPC ID or nil if not found"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,i.jsx)(n.h3,{id:"encode-skill-tree-data",children:"EncodeSkillTreeData(characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nEncodes skill tree data into a compact string format for storage."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name (optional)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(string): Encoded skill tree data"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Format:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Format: "skill1,skill2,skill3|experience"\n-- Example: "wilson_torch,wilson_lighter|1500"\n-- No skills: "!|1500"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local encoded = skilltreedata:EncodeSkillTreeData("wilson")\n-- Returns: "wilson_torch,wilson_lighter|1500"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"decode-skill-tree-data",children:"DecodeSkillTreeData(data)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nDecodes skill tree data from string format back to tables."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data"})," (string): Encoded skill tree data string"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table or nil): Activated skills table"}),"\n",(0,i.jsx)(n.li,{children:"(number or nil): Experience points"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local skills, xp = skilltreedata:DecodeSkillTreeData("wilson_torch,wilson_lighter|1500")\n-- skills = {wilson_torch = true, wilson_lighter = true}\n-- xp = 1500\n'})}),"\n",(0,i.jsx)(n.h3,{id:"save",children:"Save(force_save, characterprefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSaves skill tree data to persistent storage."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"force_save"})," (boolean): Force save even if not dirty"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab for special save modes"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Save if data has changed\nskilltreedata:Save()\n\n-- Force immediate save\nskilltreedata:Save(true)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Storage Format:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- JSON format with full data structure\n{\n    activatedskills = {wilson = {wilson_torch = true}},\n    skillxp = {wilson = 1500}\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"load",children:"Load()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nLoads skill tree data from persistent storage with validation and error recovery."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"skilltreedata:Load()\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error Recovery:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Validates loaded data structure"}),"\n",(0,i.jsx)(n.li,{children:"Checks each character's skill state"}),"\n",(0,i.jsx)(n.li,{children:"Clears invalid configurations"}),"\n",(0,i.jsx)(n.li,{children:"Falls back to online profile data if local data is corrupted"}),"\n",(0,i.jsx)(n.li,{children:"Saves corrected data back to storage"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"validation-system",children:"Validation System"}),"\n",(0,i.jsx)(n.h3,{id:"validate-character-data",children:"ValidateCharacterData(characterprefab, activatedskills, skillxp)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nComprehensive validation of character skill tree state."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"activatedskills"})," (table): Skills to validate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skillxp"})," (number): Experience points"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): true if configuration is valid"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Validation Checks:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Character has skill tree"}),": Prefab exists in SKILLTREE_DEFS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Experience range"}),": XP ",(0,i.jsx)(n.code,{children:">="})," 0 and within limits"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Point allocation"}),": Activated skills ",(0,i.jsx)(n.code,{children:"<="})," available points from XP"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Skill existence"}),": All activated skills exist in character's tree"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prerequisites"}),": ",(0,i.jsx)(n.code,{children:"must_have_one_of"})," dependencies satisfied"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Requirements"}),": ",(0,i.jsx)(n.code,{children:"must_have_all_of"})," dependencies satisfied"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unlock conditions"}),": Custom ",(0,i.jsx)(n.code,{children:"lock_open"})," functions validated"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local valid = skilltreedata:ValidateCharacterData(\n    "wilson",\n    {wilson_torch = true, wilson_lighter = true},\n    1500\n)\nif not valid then\n    print("Invalid skill configuration detected")\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"online-profile-integration",children:"Online Profile Integration"}),"\n",(0,i.jsx)(n.h3,{id:"apply-online-profile-data",children:"ApplyOnlineProfileData()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSynchronizes with Steam/online profile skill tree data."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): true if online data was successfully applied"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'if skilltreedata:ApplyOnlineProfileData() then\n    print("Synchronized with online profile")\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"apply-character-data",children:"ApplyCharacterData(characterprefab, skilltreedata)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nApplies encoded skill tree data for a specific character with validation."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"characterprefab"})," (string): Character prefab name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skilltreedata"})," (string): Encoded skill tree data"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): true if data was successfully applied"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local success = skilltreedata:ApplyCharacterData("wilson", "wilson_torch|1500")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"opah-online-profile-access-handler-methods",children:"OPAH (Online Profile Access Handler) Methods"}),"\n",(0,i.jsx)(n.h3,{id:"opah-do-backup",children:"OPAH_DoBackup()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})," - Internal Method"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nBacks up local skill data before receiving server synchronization. Used during multiplayer session startup."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Internal Process:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Disables save operations"}),"\n",(0,i.jsx)(n.li,{children:"Backs up current activated skills"}),"\n",(0,i.jsx)(n.li,{children:"Sends local XP to server"}),"\n",(0,i.jsx)(n.li,{children:"Enables skip validation mode"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"opah-ready",children:"OPAH_Ready()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})," - Internal Method"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCompletes server synchronization process and restores local data if needed."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Internal Process:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Compares server data with backed up local data"}),"\n",(0,i.jsx)(n.li,{children:"Restores local skills if they differ from server"}),"\n",(0,i.jsx)(n.li,{children:"Re-enables save operations and validation"}),"\n",(0,i.jsx)(n.li,{children:"Triggers XP update notifications"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,i.jsx)(n.h3,{id:"internal-properties",children:"Internal Properties"}),"\n",(0,i.jsx)(n.h4,{id:"activatedskills",children:"activatedskills"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Structure: {characterprefab = {skillname = true, ...}, ...}\n{\n    wilson = {\n        wilson_torch = true,\n        wilson_lighter = true\n    },\n    willow = {\n        willow_ignition = true\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"skillxp",children:"skillxp"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Structure: {characterprefab = experience_points, ...}\n{\n    wilson = 1500,\n    willow = 2300\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"external-dependencies",children:"External Dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SKILLTREE_DEFS"}),": Skill tree definitions from prefabs/skilltree_defs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SKILLTREE_METAINFO"}),": Metadata including RPC lookups"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING.SKILL_THRESHOLDS"}),": Experience point thresholds for skill points"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"basic-skill-management",children:"Basic Skill Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local skilltree = SkillTreeData()\n\n-- Check if skill can be activated\nif skilltree:GetAvailableSkillPoints("wilson") > 0 and\n   skilltree:IsValidSkill("wilson_torch", "wilson") then\n    \n    -- Activate the skill\n    if skilltree:ActivateSkill("wilson_torch", "wilson") then\n        print("Skill activated successfully")\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"experience-and-point-calculation",children:"Experience and Point Calculation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Add experience and check new available points\nlocal old_points = skilltree:GetAvailableSkillPoints("wilson")\nlocal success, new_xp = skilltree:AddSkillXP(500, "wilson")\nlocal new_points = skilltree:GetAvailableSkillPoints("wilson")\n\nif new_points > old_points then\n    print("Gained", new_points - old_points, "skill points!")\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"skill-tree-reset",children:"Skill Tree Reset"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Complete character respec\nlocal character = "wilson"\nskilltree:RespecSkills(character)\nprint("Reset all skills for", character)\nprint("Available points:", skilltree:GetAvailableSkillPoints(character))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"network-synchronization",children:"Network Synchronization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Prepare data for network transmission\nlocal selection = skilltree:GetPlayerSkillSelection("wilson")\n-- ... send selection over network ...\n\n-- Receive and apply network data\nlocal received_skills = skilltree:GetNamesFromSkillSelection(selection, "wilson")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The class includes comprehensive error handling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Invalid Skills"}),": Prints warnings for non-existent skills"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validation Failures"}),": Detailed error messages for validation issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Corrupt Data"}),": Automatic recovery from corrupted save files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Network Sync"}),": Backup/restore during multiplayer synchronization"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../prefabs/skilltree_defs.md",children:(0,i.jsx)(n.strong,{children:"Skill Tree Definitions"})}),": Contains skill tree structure definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../components/skilltreeupdater.md",children:(0,i.jsx)(n.strong,{children:"Skill Tree Updater"})}),": Component that uses this class for skill management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./playerprofile.md",children:(0,i.jsx)(n.strong,{children:"Player Profile"})}),": Handles profile-level skill tree persistence"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./networkclientrpc.md",children:(0,i.jsx)(n.strong,{children:"Network Client RPC"})}),": Network communication for skill tree updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./constants.md",children:(0,i.jsx)(n.strong,{children:"Tuning"})}),": Contains skill-related constants and thresholds"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>t});var s=l(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);