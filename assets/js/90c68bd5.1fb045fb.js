"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7368],{7926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/core/event-system","title":"Event System","description":"Don\'t Starve Together uses an event system to manage and react to game state changes. This system allows entities to register listeners and respond to events from other entities.","source":"@site/docs/api-vanilla/core/event-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/event-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/event-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"event-system","title":"Event System","sidebar_position":2},"sidebar":"docs","previous":{"title":"EntityScript","permalink":"/dst-api-webdocs/docs/api-vanilla/core/entityscript"},"next":{"title":"Constants","permalink":"/dst-api-webdocs/docs/api-vanilla/core/constants"}}');var s=t(4848),a=t(8453);const o={id:"event-system",title:"Event System",sidebar_position:2},r="Event System",l={},d=[{value:"Registering and Firing Events",id:"registering-and-firing-events",level:2},{value:"Key Methods",id:"key-methods",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"Unregistering Events",id:"unregistering-events",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Listening to events from the entity itself",id:"listening-to-events-from-the-entity-itself",level:3},{value:"Listening to events from another entity",id:"listening-to-events-from-another-entity",level:3},{value:"Firing events with data",id:"firing-events-with-data",level:3},{value:"Common Events",id:"common-events",level:2},{value:"Combat Events",id:"combat-events",level:3},{value:"Character Events",id:"character-events",level:3},{value:"World Events",id:"world-events",level:3},{value:"Entity Lifecycle Events",id:"entity-lifecycle-events",level:3},{value:"Network Events",id:"network-events",level:2},{value:"How Network Synchronization Works",id:"how-network-synchronization-works",level:3},{value:"Network Variables and Events",id:"network-variables-and-events",level:3},{value:"Common Network Variable Types",id:"common-network-variable-types",level:3},{value:"Real-World Example: Syncing Entity State",id:"real-world-example-syncing-entity-state",level:3},{value:"Creating Custom Events in Mods",id:"creating-custom-events-in-mods",level:2},{value:"Defining Custom Events",id:"defining-custom-events",level:3},{value:"Firing Custom Events",id:"firing-custom-events",level:3},{value:"Listening for Custom Events",id:"listening-for-custom-events",level:3},{value:"Practical Example: Custom Quest System",id:"practical-example-custom-quest-system",level:3},{value:"Benefits of Custom Events",id:"benefits-of-custom-events",level:3},{value:"Comprehensive Event List",id:"comprehensive-event-list",level:2},{value:"Player Events",id:"player-events",level:3},{value:"World Events",id:"world-events-1",level:3},{value:"Entity Events",id:"entity-events",level:3},{value:"Environmental and Status Effects",id:"environmental-and-status-effects",level:3},{value:"Component-Specific Events",id:"component-specific-events",level:3},{value:"Game Hooks",id:"game-hooks",level:2},{value:"Understanding the Hook System",id:"understanding-the-hook-system",level:3},{value:"Hook Types and Usage",id:"hook-types-and-usage",level:3},{value:"Component Hooks",id:"component-hooks",level:3},{value:"Prefab Hooks",id:"prefab-hooks",level:3},{value:"State Graph Hooks",id:"state-graph-hooks",level:3},{value:"Brain Hooks",id:"brain-hooks",level:3},{value:"Global Hooks",id:"global-hooks",level:3},{value:"Event Handling Best Practices",id:"event-handling-best-practices",level:2},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Weather Warning System",id:"weather-warning-system",level:3},{value:"Enhanced Sanity System",id:"enhanced-sanity-system",level:3},{value:"Interactive Environment System",id:"interactive-environment-system",level:3},{value:"Summary and Best Practices",id:"summary-and-best-practices",level:2},{value:"Key Concepts Recap",id:"key-concepts-recap",level:3},{value:"Best Practices for Events",id:"best-practices-for-events",level:3},{value:"Best Practices for Hooks",id:"best-practices-for-hooks",level:3},{value:"Performance Considerations",id:"performance-considerations-1",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"event-system",children:"Event System"})}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together uses an event system to manage and react to game state changes. This system allows entities to register listeners and respond to events from other entities."}),"\n",(0,s.jsx)(n.p,{children:"The event system is a fundamental part of the game's architecture, enabling communication between different components and entities. It follows a publisher-subscriber pattern, where entities can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Publish (fire) events"})," when something happens"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Subscribe (listen) to events"})," to react when they occur"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unsubscribe (remove listeners)"})," when no longer needed"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach creates a loosely coupled system where components don't need direct knowledge of each other to interact, making the codebase more modular and easier to extend."}),"\n",(0,s.jsx)(n.h2,{id:"registering-and-firing-events",children:"Registering and Firing Events"}),"\n",(0,s.jsx)(n.p,{children:"The event system has two primary operations: registering event listeners and firing events. These operations form the foundation of event-based communication in the game."}),"\n",(0,s.jsx)(n.h3,{id:"key-methods",children:"Key Methods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Register event listener\ninst:ListenForEvent(event_name, fn, source)\n\n-- Fire event\ninst:PushEvent(event_name, data)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"event_name"}),': Name of the event (string) - identifies what happened (e.g., "death", "attacked")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fn"}),": Callback function called when the event occurs - contains the code that should run in response"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"source"}),": (Optional) Source entity firing the event - if not specified, listens from all sources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"}),": (Optional) Data sent with the event, usually a table - provides additional context about the event"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(n.p,{children:["When you call ",(0,s.jsx)(n.code,{children:"ListenForEvent()"}),', you\'re essentially saying: "When this specific event happens, run this function." The event system maintains internal tables of registered listeners and notifies them when relevant events occur.']}),"\n",(0,s.jsxs)(n.p,{children:["When you call ",(0,s.jsx)(n.code,{children:"PushEvent()"}),", the system checks for all listeners registered for that event and calls their callback functions, passing any provided data."]}),"\n",(0,s.jsx)(n.h2,{id:"unregistering-events",children:"Unregistering Events"}),"\n",(0,s.jsx)(n.p,{children:"To prevent memory leaks and ensure proper cleanup, it's important to remove event listeners when they're no longer needed, especially for temporary entities."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Unregister event listener\ninst:RemoveEventCallback(event_name, fn, source)\n\n-- Unregister all event listeners\ninst:RemoveAllEventCallbacks()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When removing a listener, you need to provide the same parameters that were used when registering it: the event name, function reference, and source (if specified). Alternatively, ",(0,s.jsx)(n.code,{children:"RemoveAllEventCallbacks()"})," removes all listeners from an entity at once, which is useful during cleanup operations."]}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.p,{children:"The following examples demonstrate common patterns for using the event system in Don't Starve Together."}),"\n",(0,s.jsx)(n.h3,{id:"listening-to-events-from-the-entity-itself",children:"Listening to events from the entity itself"}),"\n",(0,s.jsx)(n.p,{children:"One of the most common uses of events is to have an entity react to its own state changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Entity listens to "attacked" event from itself\ninst:ListenForEvent("attacked", function(inst, data)\n    print("Attacked by: " .. tostring(data.attacker))\n    print("Damage: " .. tostring(data.damage))\n    \n    -- Example: Play a unique sound when attacked\n    if inst.SoundEmitter then\n        inst.SoundEmitter:PlaySound("dontstarve/creatures/monster_hurt")\n    end\n    \n    -- Example: Notify nearby allies\n    local x, y, z = inst.Transform:GetWorldPosition()\n    local allies = TheSim:FindEntities(x, y, z, 20, {"ally"})\n    for _, ally in ipairs(allies) do\n        ally:PushEvent("allythreatened", {threatener = data.attacker})\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this example, when the entity is attacked:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"It prints information about the attack"}),"\n",(0,s.jsx)(n.li,{children:"Plays a sound effect"}),"\n",(0,s.jsx)(n.li,{children:"Notifies nearby allies about the threat"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"listening-to-events-from-another-entity",children:"Listening to events from another entity"}),"\n",(0,s.jsx)(n.p,{children:"You can also listen to events fired by other entities, which is useful for creating interactions between entities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Entity listens to "death" event from target\ninst:ListenForEvent("death", function(target)\n    print(target.prefab .. " has died!")\n    \n    -- Example: Celebrate when target dies\n    if inst.components.talker then\n        inst.components.talker:Say("I\'ve defeated " .. target:GetDisplayName() .. "!")\n    end\n    \n    -- Example: Grant experience reward\n    if inst.components.combat then\n        inst.components.combat.externaldamagetakenmultipliers:SetModifier("victory", 0.9, "victory_buff")\n        -- Remove the buff after 10 seconds\n        inst:DoTaskInTime(10, function() \n            inst.components.combat.externaldamagetakenmultipliers:RemoveModifier("victory") \n        end)\n    end\nend, target)\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this example:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The entity listens for when a specific target entity dies"}),"\n",(0,s.jsx)(n.li,{children:'Makes the entity "say" something when the target dies'}),"\n",(0,s.jsx)(n.li,{children:"Grants a temporary combat buff to the entity"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"firing-events-with-data",children:"Firing events with data"}),"\n",(0,s.jsx)(n.p,{children:"You can fire custom events with additional data to communicate between different parts of your code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Fire "customaction" event with data\ninst:PushEvent("customaction", { \n    target = target_entity, \n    value = 10,\n    location = Vector3(inst.Transform:GetWorldPosition()),\n    success = true\n})\n'})}),"\n",(0,s.jsx)(n.p,{children:"This pattern is particularly useful when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You need to communicate between different components on the same entity"}),"\n",(0,s.jsx)(n.li,{children:"You want to broadcast information to multiple listeners"}),"\n",(0,s.jsx)(n.li,{children:"You want to decouple the action trigger from the action handler"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-events",children:"Common Events"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together has numerous built-in events that you can listen for in your mods. Below are some of the most frequently used events organized by category. Understanding these events allows you to respond to various game situations effectively."}),"\n",(0,s.jsx)(n.h3,{id:"combat-events",children:"Combat Events"}),"\n",(0,s.jsx)(n.p,{children:"Combat events are triggered during fights and interactions between entities that can deal or receive damage."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- When entity is attacked\n-- data: { attacker, damage, damageresolved, original_damage, weapon, stimuli, spdamage, redirected, noimpactsound }\ninst:ListenForEvent("attacked", function(inst, data)\n    -- The \'data\' table contains detailed information about the attack\n    local attacker = data.attacker -- Entity that performed the attack\n    local damage = data.damage -- Final damage after all modifiers\n    local original_damage = data.original_damage -- Damage before modifiers\n    \n    -- Example: Apply a counter-effect when attacked by spiders\n    if attacker and attacker:HasTag("spider") then\n        attacker:PushEvent("attacked", {attacker = inst, damage = damage * 0.5})\n    end\nend)\n\n-- When entity dies\ninst:ListenForEvent("death", function(inst)\n    -- This is often used for:\n    -- - Playing death animations or sounds\n    -- - Dropping special loot\n    -- - Triggering world events\n    \n    -- Example: Spawn flies when a monster dies\n    for i = 1, 3 do\n        local fly = SpawnPrefab("fly")\n        local x, y, z = inst.Transform:GetWorldPosition()\n        fly.Transform:SetPosition(x + math.random(-2, 2), y, z + math.random(-2, 2))\n    end\nend)\n\n-- When entity damages another entity\ninst:ListenForEvent("onhitother", function(inst, data)\n    -- data contains: target, damage, stimuli, etc.\n    local target = data.target\n    local damage = data.damage\n    \n    -- Example: Apply a burning effect on hit\n    if inst.components.burnable and inst.components.burnable:IsBurning() and\n       target.components.burnable and not target.components.burnable:IsBurning() then\n        target.components.burnable:Ignite()\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"character-events",children:"Character Events"}),"\n",(0,s.jsx)(n.p,{children:"Character events relate to player characters and their stats, providing ways to respond to changes in hunger, health, sanity, and equipment."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- When character\'s hunger changes\ninst:ListenForEvent("hungerdelta", function(inst, data)\n    -- data.newpercent - new hunger percentage\n    -- data.oldpercent - previous hunger percentage\n    -- data.delta - amount changed\n    \n    -- Example: Make the character move slower when very hungry\n    if data.newpercent < 0.2 and inst.components.locomotor then\n        inst.components.locomotor:SetExternalSpeedMultiplier("hunger_penalty", 0.7)\n    elseif data.newpercent >= 0.2 and inst.components.locomotor then\n        inst.components.locomotor:RemoveExternalSpeedMultiplier("hunger_penalty")\n    end\nend)\n\n-- When character\'s health changes\ninst:ListenForEvent("healthdelta", function(inst, data)\n    -- Similar structure to hungerdelta\n    -- Example: Create a visual effect when health is very low\n    if data.newpercent < 0.1 then\n        local fx = SpawnPrefab("hitsparks")\n        fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n    end\nend)\n\n-- When character equips item\ninst:ListenForEvent("equip", function(inst, data)\n    -- data.item - the equipped item\n    -- data.eslot - equipment slot\n    \n    -- Example: Apply special effect for a specific item\n    if data.item.prefab == "nightsword" then\n        inst.components.sanity.night_drain_mult = 1.5\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"world-events",children:"World Events"}),"\n",(0,s.jsxs)(n.p,{children:["World events are fired by ",(0,s.jsx)(n.code,{children:"TheWorld"})," entity and represent global changes like seasons, time of day, or weather conditions."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- When season changes\nTheWorld:ListenForEvent("seasonchange", function(world, data)\n    -- data.season - new season ("winter", "summer", etc.)\n    -- data.prev - previous season\n    \n    -- Example: Prepare all players for winter\n    if data.season == "winter" then\n        for _, player in ipairs(AllPlayers) do\n            if player.components.talker then\n                player.components.talker:Say("Winter is coming!")\n            end\n            \n            -- Give insulation buff\n            if player.components.temperature then\n                player.components.temperature:SetModifier("season_change", 10)\n            end\n        end\n    end\nend)\n\n-- When day/night phase changes\nTheWorld:ListenForEvent("phasechanged", function(world, data)\n    -- data.newphase - "day", "dusk", or "night"\n    -- data.oldphase - previous phase\n    \n    -- Example: Make monsters more aggressive at night\n    if data.newphase == "night" then\n        local monsters = TheSim:FindEntities(0, 0, 0, 1000, {"monster"})\n        for _, monster in ipairs(monsters) do\n            if monster.components.combat then\n                monster.components.combat:SetAttackPeriod(monster.components.combat.min_attack_period * 0.8)\n            end\n        end\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"entity-lifecycle-events",children:"Entity Lifecycle Events"}),"\n",(0,s.jsx)(n.p,{children:"These events help manage the lifecycle of entities, from animation completion to destruction."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- When animation ends\ninst:ListenForEvent("animover", function(inst)\n    -- This is useful for:\n    -- - Chaining animations\n    -- - Triggering actions after animations\n    -- - State transitions\n    \n    -- Example: Return to idle state after attack animation\n    if inst.sg and inst.sg:HasStateTag("attack") then\n        inst.sg:GoToState("idle")\n    end\nend)\n\n-- When entity is destroyed\ninst:ListenForEvent("onremove", function(inst)\n    -- Critical for cleanup to prevent memory leaks\n    -- Example: Remove all tasks and event listeners\n    if inst.task then\n        inst.task:Cancel()\n        inst.task = nil\n    end\n    \n    -- Clean up any external references\n    if inst.ownerref and inst.ownerref:IsValid() then\n        inst.ownerref.owneditem = nil\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Learning to use these common events effectively is key to creating responsive, interactive mods that integrate well with the game's systems."}),"\n",(0,s.jsx)(n.h2,{id:"network-events",children:"Network Events"}),"\n",(0,s.jsx)(n.p,{children:"In multiplayer environments, events play a critical role in synchronizing game state between the server and clients. The event system works in conjunction with network variables to efficiently propagate changes across the network."}),"\n",(0,s.jsx)(n.h3,{id:"how-network-synchronization-works",children:"How Network Synchronization Works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'The server is authoritative and manages the "master" game state'}),"\n",(0,s.jsxs)(n.li,{children:["Network variables (",(0,s.jsx)(n.code,{children:"net_*"})," types) store data that needs to be synchronized"]}),"\n",(0,s.jsx)(n.li,{children:"When network variables change, they trigger events on clients"}),"\n",(0,s.jsx)(n.li,{children:"Clients listen for these events and update their local state accordingly"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This architecture ensures that all players see a consistent game world while minimizing network traffic."}),"\n",(0,s.jsx)(n.h3,{id:"network-variables-and-events",children:"Network Variables and Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define a network variable on an entity\n-- Parameters: GUID, variable path, dirty event name\ninst.mynetval = net_bool(inst.GUID, "myentity.mynetval", "mynetvaldirty")\n\n-- On the server, set the value (this will sync to clients)\nif TheWorld.ismastersim then\n    inst.mynetval:set(true)  -- Will trigger "mynetvaldirty" event on clients\nend\n\n-- On clients, listen for the change event\nif not TheWorld.ismastersim then\n    inst:ListenForEvent("mynetvaldirty", function()\n        -- Get the current synchronized value\n        local current_value = inst.mynetval:value()\n        \n        -- Update visual representation based on the value\n        if current_value then\n            inst.AnimState:SetBuild("entity_active_build")\n        else\n            inst.AnimState:SetBuild("entity_inactive_build")\n        end\n    end)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"common-network-variable-types",children:"Common Network Variable Types"}),"\n",(0,s.jsx)(n.p,{children:"DST provides several types of network variables to match different data needs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Boolean values\nnet_bool = net_bool(GUID, path, dirty_event)\n\n-- Integer values (for whole numbers)\nnet_int = net_int(GUID, path, dirty_event)\n\n-- Float values (for decimal numbers)\nnet_float = net_float(GUID, path, dirty_event)\n\n-- String values\nnet_string = net_string(GUID, path, dirty_event)\n\n-- Entity references\nnet_entity = net_entity(GUID, path, dirty_event)\n\n-- Hash values (for optimized string comparison)\nnet_hash = net_hash(GUID, path, dirty_event)\n\n-- Vector3 values (for positions)\nnet_vector3 = net_vector3(GUID, path, dirty_event)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"real-world-example-syncing-entity-state",children:"Real-World Example: Syncing Entity State"}),"\n",(0,s.jsx)(n.p,{children:"Here's a more complete example showing how to use network events to synchronize an entity's state between server and clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In the entity\'s constructor\nfunction MyEntity:ctor(inst)\n    -- Network variables - define on both server and client\n    self.active = net_bool(inst.GUID, "myentity.active", "myentity.activedirty")\n    self.power_level = net_float(inst.GUID, "myentity.power_level", "myentity.powerleveldirty")\n    self.owner = net_entity(inst.GUID, "myentity.owner", "myentity.ownerdirty")\n    \n    -- Client-side handlers for network events\n    if not TheWorld.ismastersim then\n        -- Handle active state changes\n        inst:ListenForEvent("myentity.activedirty", function(inst)\n            local is_active = self.active:value()\n            self:UpdateActiveVisuals(is_active)\n        end)\n        \n        -- Handle power level changes\n        inst:ListenForEvent("myentity.powerleveldirty", function(inst)\n            local power = self.power_level:value()\n            self:UpdatePowerVisuals(power)\n        end)\n        \n        -- Handle owner changes\n        inst:ListenForEvent("myentity.ownerdirty", function(inst)\n            local owner = self.owner:value()\n            self:UpdateOwnerVisuals(owner)\n        end)\n    end\nend\n\n-- Server-side methods to change state\nfunction MyEntity:Activate(active_state)\n    if not TheWorld.ismastersim then return end\n    self.active:set(active_state)\n    -- Additional server-side logic...\nend\n\nfunction MyEntity:SetPowerLevel(level)\n    if not TheWorld.ismastersim then return end\n    self.power_level:set(level)\n    -- Additional server-side logic...\nend\n\nfunction MyEntity:SetOwner(owner_entity)\n    if not TheWorld.ismastersim then return end\n    self.owner:set(owner_entity)\n    -- Additional server-side logic...\nend\n\n-- Client-side visual update methods\nfunction MyEntity:UpdateActiveVisuals(is_active)\n    if is_active then\n        self.inst.AnimState:PlayAnimation("active")\n        -- Add light, effects, etc.\n    else\n        self.inst.AnimState:PlayAnimation("inactive")\n        -- Remove light, effects, etc.\n    end\nend\n\n-- Other visual updates...\n'})}),"\n",(0,s.jsx)(n.p,{children:"This pattern ensures that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The server maintains authority over game state"}),"\n",(0,s.jsx)(n.li,{children:"Clients receive updates only when values actually change"}),"\n",(0,s.jsx)(n.li,{children:"Network traffic is minimized"}),"\n",(0,s.jsx)(n.li,{children:"Visual representations stay synchronized across all players"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"creating-custom-events-in-mods",children:"Creating Custom Events in Mods"}),"\n",(0,s.jsx)(n.p,{children:"Custom events allow mod developers to create their own communication channels between different parts of their mod. This approach helps maintain clean, modular code by decoupling systems while still allowing them to interact."}),"\n",(0,s.jsx)(n.h3,{id:"defining-custom-events",children:"Defining Custom Events"}),"\n",(0,s.jsx)(n.p,{children:"The first step is to define your custom events. It's a good practice to list all your custom events in one place:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua or a shared constants file\nlocal MY_EVENTS = {\n    "mycustomevent1",      -- Triggered when something specific happens\n    "mycustomevent2",      -- Triggered when another specific thing happens\n    "special_ability_used", -- Triggered when a special ability is used\n    "resource_discovered",  -- Triggered when a new resource is found\n    "quest_progress",       -- Triggered when quest progress is made\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"firing-custom-events",children:"Firing Custom Events"}),"\n",(0,s.jsx)(n.p,{children:"You can fire custom events from anywhere in your code. Make sure to include relevant data that listeners might need:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In a prefab or component\nfunction TriggerSpecialAbility(inst, ability_name, power_level)\n    -- Perform the ability logic\n    -- ...\n    \n    -- Then fire an event so other systems can respond\n    inst:PushEvent("special_ability_used", {\n        ability = ability_name,\n        power = power_level,\n        location = Vector3(inst.Transform:GetWorldPosition()),\n        timestamp = GetTime()\n    })\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"listening-for-custom-events",children:"Listening for Custom Events"}),"\n",(0,s.jsx)(n.p,{children:"Other parts of your mod can listen for your custom events:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In another prefab or component\nfunction SetupEventListeners(inst)\n    -- Listen for the special ability event\n    inst:ListenForEvent("special_ability_used", function(inst, data)\n        -- React to the ability being used\n        print("Special ability used: " .. data.ability)\n        print("Power level: " .. data.power)\n        \n        -- Maybe create visual effects at the location\n        local fx = SpawnPrefab("sparkle_fx")\n        fx.Transform:SetPosition(data.location:Get())\n        \n        -- Or grant buffs to nearby allies\n        local x, y, z = data.location:Get()\n        local allies = TheSim:FindEntities(x, y, z, 10, {"player"})\n        for _, ally in ipairs(allies) do\n            if ally.components.health then\n                ally.components.health:DoDelta(5)\n            end\n        end\n    end)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"practical-example-custom-quest-system",children:"Practical Example: Custom Quest System"}),"\n",(0,s.jsx)(n.p,{children:"Here's a more complete example of how you might use custom events to implement a quest system in your mod:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nlocal QUEST_EVENTS = {\n    "quest_accepted",\n    "quest_objective_progress",\n    "quest_completed",\n    "quest_failed",\n    "quest_abandoned"\n}\n\n-- In quest_component.lua\nlocal QuestComponent = Class(function(self, inst)\n    self.inst = inst\n    self.active_quests = {}\n    self.completed_quests = {}\n    \n    -- Set up listeners for events that might advance quests\n    self:SetupQuestProgressListeners()\nend)\n\nfunction QuestComponent:SetupQuestProgressListeners()\n    -- Listen for monster kills\n    self.inst:ListenForEvent("killed", function(attacker, data)\n        if data.victim and self:HasKillObjective(data.victim.prefab) then\n            self:AdvanceKillObjective(data.victim.prefab)\n        end\n    end)\n    \n    -- Listen for item pickups\n    self.inst:ListenForEvent("itemget", function(inst, data)\n        if data.item and self:HasCollectionObjective(data.item.prefab) then\n            self:AdvanceCollectionObjective(data.item.prefab)\n        end\n    end)\nend\n\nfunction QuestComponent:AcceptQuest(quest_id)\n    -- Set up the quest\n    local quest = QUEST_DEFINITIONS[quest_id]\n    if not quest then return false end\n    \n    self.active_quests[quest_id] = {\n        id = quest_id,\n        objectives = table.deepcopy(quest.objectives),\n        started_at = GetTime()\n    }\n    \n    -- Fire the quest accepted event\n    self.inst:PushEvent("quest_accepted", {\n        quest_id = quest_id,\n        quest_name = quest.name\n    })\n    \n    return true\nend\n\nfunction QuestComponent:AdvanceKillObjective(monster_prefab)\n    -- Check all active quests for this objective\n    for quest_id, quest_data in pairs(self.active_quests) do\n        for i, objective in ipairs(quest_data.objectives) do\n            if objective.type == "kill" and objective.target == monster_prefab then\n                -- Update the objective\n                objective.current = (objective.current or 0) + 1\n                \n                -- Fire progress event\n                self.inst:PushEvent("quest_objective_progress", {\n                    quest_id = quest_id,\n                    objective_index = i,\n                    current = objective.current,\n                    required = objective.count,\n                    percent = objective.current / objective.count\n                })\n                \n                -- Check if quest is completed\n                if self:CheckQuestCompletion(quest_id) then\n                    self:CompleteQuest(quest_id)\n                end\n                \n                break\n            end\n        end\n    end\nend\n\n-- Other methods for quest management...\n\nfunction QuestComponent:CompleteQuest(quest_id)\n    local quest = QUEST_DEFINITIONS[quest_id]\n    if not quest then return false end\n    \n    -- Move from active to completed\n    self.completed_quests[quest_id] = self.active_quests[quest_id]\n    self.active_quests[quest_id] = nil\n    \n    -- Fire the completion event\n    self.inst:PushEvent("quest_completed", {\n        quest_id = quest_id,\n        quest_name = quest.name,\n        rewards = quest.rewards\n    })\n    \n    -- Grant rewards\n    self:GrantQuestRewards(quest_id)\n    \n    return true\nend\n\n-- In another file that uses the quest events\nlocal function SetupQuestUI(inst)\n    -- Listen for quest events to update the UI\n    inst:ListenForEvent("quest_accepted", function(inst, data)\n        -- Show a notification\n        if inst.HUD and inst.HUD.controls then\n            inst.HUD.controls:ShowQuestNotification("New Quest: " .. data.quest_name)\n        end\n    end)\n    \n    inst:ListenForEvent("quest_objective_progress", function(inst, data)\n        -- Update the quest tracker UI\n        if inst.HUD and inst.HUD.controls and inst.HUD.controls.questtracker then\n            inst.HUD.controls.questtracker:UpdateObjective(\n                data.quest_id, \n                data.objective_index, \n                data.current, \n                data.required\n            )\n        end\n    end)\n    \n    inst:ListenForEvent("quest_completed", function(inst, data)\n        -- Show completion notification and rewards\n        if inst.HUD and inst.HUD.controls then\n            inst.HUD.controls:ShowQuestCompletionPopup(data.quest_name, data.rewards)\n        end\n        \n        -- Maybe play a sound\n        inst.SoundEmitter:PlaySound("dontstarve/HUD/quest_complete")\n    end)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"benefits-of-custom-events",children:"Benefits of Custom Events"}),"\n",(0,s.jsx)(n.p,{children:"Using custom events in your mods provides several advantages:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Decoupling"})," - Different systems can interact without direct dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensibility"})," - Other mods can listen for your events to add compatibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean Code"})," - Event-based architecture promotes organized, maintainable code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility"})," - New features can be added by simply adding new event listeners"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When designing your mod, consider what events would make sense for other parts of your code (or other mods) to react to, and create a consistent naming scheme for your custom events."}),"\n",(0,s.jsx)(n.h2,{id:"comprehensive-event-list",children:"Comprehensive Event List"}),"\n",(0,s.jsx)(n.p,{children:"Below is a comprehensive list of events available in Don't Starve Together, organized by category:"}),"\n",(0,s.jsx)(n.h3,{id:"player-events",children:"Player Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Player spawning and initialization\n"ms_playerjoined"           -- Player joined the game\n"ms_playerspawn"            -- Player spawned in the world\n"ms_respawnedfromghost"     -- Player revived from ghost\n"respawnfromghost"          -- Player is being revived from ghost\n"ghost"                     -- Player became a ghost\n"playeractivated"           -- Player character fully activated\n"playerdeactivated"         -- Player character deactivated (disconnect, etc.)\n"ms_becameghost"            -- Player became a ghost (master simulation)\n\n-- Player stats and state\n"healthdelta"               -- Health changed\n"hungerdelta"               -- Hunger changed\n"sanitydelta"               -- Sanity changed\n"temperaturedelta"          -- Temperature changed\n"moisturedelta"             -- Moisture (wetness) changed\n"goinginsane"               -- Starting to go insane\n"attacked"                  -- Player was attacked\n"startstarving"             -- Started starving\n"stopstarving"              -- Stopped starving\n"startfreezing"             -- Started freezing\n"stopfreezing"              -- Stopped freezing\n"startoverheating"          -- Started overheating\n"stopoverheating"           -- Stopped overheating\n"death"                     -- Player died\n"ms_playerreroll"           -- Player changed character\n\n-- Inventory and item events\n"equip"                     -- Equipped an item\n"unequip"                   -- Unequipped an item\n"itemget"                   -- Got an item\n"itemlose"                  -- Lost an item\n"newactiveitem"             -- New active item\n"stacksizechange"           -- Stack size changed\n"dropitem"                  -- Dropped an item\n"gotnewitem"                -- Got a new item\n"builditem"                 -- Built an item\n"buildsuccess"              -- Successfully built something\n"buildstructure"            -- Built a structure\n"techtreechange"            -- Tech tree level changed\n\n-- Action events\n"actionfailed"              -- Action failed\n"locomote"                  -- Movement related event\n"working"                   -- Performing work action\n"finishedwork"              -- Finished work action\n"makecamp"                  -- Made a camp\n"performaction"             -- Performed an action\n'})}),"\n",(0,s.jsx)(n.h3,{id:"world-events-1",children:"World Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Time and season\n"clocktick"                 -- Clock ticked\n"daycomplete"               -- Day cycle completed\n"nightcomplete"             -- Night cycle completed\n"cycleschanged"             -- Cycles (days) changed\n"phasechanged"              -- Day/Dusk/Night phase changed\n"ms_setseason"              -- Season being set\n"ms_setseasonmode"          -- Season mode being set\n"seasonchange"              -- Season changed\n"seasontick"                -- Season tick\n\n-- Weather\n"rainstart"                 -- Rain started\n"rainstop"                  -- Rain stopped\n"snowcoverchange"           -- Snow cover changed\n"lightningstriketarget"     -- Lightning strike target determined\n"ms_sendlightningstrike"    -- Lightning strike sent\n"ms_forceprecipitation"     -- Precipitation forced\n"ms_forcenoprecipitation"   -- No precipitation forced\n"stormlevel"                -- Storm level changed\n\n-- World generation\n"worldmapsetsize"           -- World map size set\n"worldmappropgated"         -- World map propagated\n"ms_worldgenupdate"         -- World generation update\n"worldgenseedset"           -- World generation seed set\n"ms_worldgenmapprepasstatus" -- World gen map prepass status\n"ms_worldgenflagsset"       -- World gen flags set\n"ms_worldgenmappregeneration" -- World gen map pregeneration\n"ms_worldgenmappostgeneration" -- World gen map postgeneration\n\n-- Miscellaneous world\n"moonphasechanged"          -- Moon phase changed\n"ms_simunpaused"            -- Simulation unpaused\n"ms_simpaused"              -- Simulation paused\n"pausechanged"              -- Pause state changed\n"fireaddedtotile"           -- Fire added to tile\n"fireremovedtromtile"       -- Fire removed from tile\n"fog_thicken"               -- Fog thickened\n"worldstate"                -- World state change\n'})}),"\n",(0,s.jsx)(n.h3,{id:"entity-events",children:"Entity Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Lifecycle\n"onremove"                  -- Entity removed/destroyed\n"enterlimbo"                -- Entity entered limbo state\n"exitlimbo"                 -- Entity exited limbo state\n"entity_sleep"              -- Entity went to sleep\n"entity_wake"               -- Entity woke up\n"saveandremove"             -- Entity saved and removed\n\n-- Animation\n"animover"                  -- Animation finished\n"animqueueover"             -- Animation queue finished\n"newstate"                  -- State graph state changed\n\n-- Interaction\n"attacked"                  -- Entity attacked\n"onhitother"                -- Hit another entity\n"blocked"                   -- Attack was blocked\n"knockback"                 -- Entity knocked back\n"startfollowing"            -- Started following\n"stopfollowing"             -- Stopped following\n"pickedup"                  -- Entity picked up\n"putininventory"            -- Put in inventory\n"ondropped"                 -- Dropped on ground\n"onpickup"                  -- On pickup\n"onbuilt"                   -- Structure built\n"onopen"                    -- Container opened\n"onclose"                   -- Container closed\n"timerdone"                 -- Timer completed\n"startportableboat"         -- Started portable boat\n"finishportableboat"        -- Finished portable boat\n'})}),"\n",(0,s.jsx)(n.h3,{id:"environmental-and-status-effects",children:"Environmental and Status Effects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Fire and temperature\n"startfiredamage"           -- Started taking fire damage\n"stopfiredamage"            -- Stopped taking fire damage\n"onignite"                  -- Entity ignited\n"onextinguish"              -- Entity extinguished\n"onburnt"                   -- Entity burnt\n\n-- Other effects\n"startaeid"                 -- Started AoE ID\n"stopaeid"                  -- Stopped AoE ID\n"poisondamage"              -- Poison damage\n"foodbuffattached"          -- Food buff attached\n"foodbuffdetached"          -- Food buff detached\n"sheltered"                 -- Entity became sheltered\n"becameconsumable"          -- Became consumable\n"reactivate"                -- Entity reactivated\n'})}),"\n",(0,s.jsx)(n.h3,{id:"component-specific-events",children:"Component-Specific Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Gardening\n"plantgrowth"               -- Plant growth changed\n"plantpicked"               -- Plant picked\n"pollinated"                -- Plant pollinated\n\n-- Cooking and food\n"spoilratechange"           -- Spoil rate changed\n"perishchange"              -- Perish state changed\n"harvestable"               -- Entity became harvestable\n"harvest"                   -- Entity harvested\n"killed"                    -- Entity killed\n\n-- Combat and health\n"minhealth"                 -- Health reached minimum\n"percentusedchange"         -- Percent used changed\n"armordamaged"              -- Armor damaged\n"fishingtargetgotaway"      -- Fishing target escaped\n"fishingcollect"            -- Fishing collection\n"fishingended"              -- Fishing ended\n"killed"                    -- Entity killed\n"detachchild"               -- Detached child entity\n'})}),"\n",(0,s.jsx)(n.h2,{id:"game-hooks",children:"Game Hooks"}),"\n",(0,s.jsx)(n.p,{children:"Hooks allow you to intercept and modify game behavior at specific points in the code execution. Unlike events, which are triggered during gameplay, hooks are applied when the game is loading, allowing you to modify core functionality before it's used."}),"\n",(0,s.jsx)(n.h3,{id:"understanding-the-hook-system",children:"Understanding the Hook System"}),"\n",(0,s.jsx)(n.p,{children:'Hooks in Don\'t Starve Together follow a "Post-Init" pattern, meaning they run after the original initialization of components, prefabs, stategraphs, or brains. This gives you the opportunity to:'}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extend existing functionality"})," - Add new behaviors to existing game elements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Override default behavior"})," - Replace original methods with your own implementations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modify default values"})," - Change properties or configurations set during initialization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add new features"})," - Inject completely new functionality into the game"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The hook system is one of the most powerful tools available to modders, as it allows deep integration with the game's systems without having to replace entire files."}),"\n",(0,s.jsx)(n.h3,{id:"hook-types-and-usage",children:"Hook Types and Usage"}),"\n",(0,s.jsx)(n.p,{children:"DST provides several types of hooks for different parts of the game:"}),"\n",(0,s.jsx)(n.h3,{id:"component-hooks",children:"Component Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add functionality to existing components\nAddComponentPostInit("health", function(self, inst)\n    -- Runs after Health component is initialized\n    -- self: The component instance\n    -- inst: The entity the component belongs to\n    \n    local old_DoDelta = self.DoDelta\n    self.DoDelta = function(self, amount, ...)\n        print("Health changed by: " .. amount)\n        return old_DoDelta(self, amount, ...)\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"prefab-hooks",children:"Prefab Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Modify existing prefabs\nAddPrefabPostInit("wilson", function(inst)\n    -- Runs after wilson prefab is created\n    -- inst: The entity instance\n    \n    if not TheWorld.ismastersim then \n        return \n    end\n    \n    -- Give Wilson extra starting health\n    if inst.components.health then\n        inst.components.health:SetMaxHealth(200)\n        inst.components.health:SetPercent(1)\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"state-graph-hooks",children:"State Graph Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Modify stategraphs\nAddStategraphPostInit("wilson", function(sg)\n    -- Runs after wilson stategraph is created\n    -- sg: The stategraph instance\n    \n    -- Add a new state\n    sg.states["mycustomstate"] = State{\n        name = "mycustomstate",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n    }\n    \n    -- Modify an existing state\n    local old_onenter = sg.states.idle.onenter\n    sg.states.idle.onenter = function(inst, ...)\n        print("Wilson entered idle state")\n        return old_onenter(inst, ...)\n    end\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"brain-hooks",children:"Brain Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Modify AI brains\nAddBrainPostInit("beefalobrain", function(brain)\n    -- Runs after beefalo brain is created\n    -- brain: The brain instance\n    \n    -- Add a new behavior\n    table.insert(brain.bt.root.children, \n        BehaviourNode({\n            Action = function(inst)\n                if inst.components.hunger and inst.components.hunger:GetPercent() < 0.5 then\n                    -- Look for food when hungry\n                    return SUCCESS\n                end\n                return FAILED\n            end\n        })\n    )\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"global-hooks",children:"Global Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Run code when game entities are added\nAddPrefabPostInitAny(function(inst)\n    -- Runs for every prefab instantiated\n    -- inst: The entity instance\n    \n    if inst:HasTag("player") then\n        print("A player prefab was created: " .. inst.prefab)\n    end\nend)\n\n-- Run code when world is generated\nAddSimPostInit(function()\n    -- Runs after world generation\n    print("World generation complete!")\n    \n    -- Modify world settings\n    if TheWorld.components.seasons then\n        TheWorld.components.seasons:SetSeason(SEASONS.SUMMER)\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"event-handling-best-practices",children:"Event Handling Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Avoid creating closures in ListenForEvent\n-- BAD:\nfor i = 1, 100 do\n    local entity = SpawnPrefab("rabbit")\n    entity:ListenForEvent("death", function() \n        print("Rabbit " .. i .. " died!") \n    end)\nend\n\n-- GOOD:\nlocal function OnRabbitDeath(inst, rabbitId)\n    print("Rabbit " .. rabbitId .. " died!")\nend\n\nfor i = 1, 100 do\n    local entity = SpawnPrefab("rabbit")\n    entity.rabbitId = i\n    entity:ListenForEvent("death", function(inst) \n        OnRabbitDeath(inst, inst.rabbitId) \n    end)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Always remove event listeners when they\'re no longer needed\nlocal function SetupTempListener(inst, target)\n    local function OnTargetDeath()\n        print("Target died!")\n        -- Further cleanup code\n    end\n    \n    inst:ListenForEvent("death", OnTargetDeath, target)\n    \n    -- Store the callback and source for later cleanup\n    inst.deathCallback = OnTargetDeath\n    inst.deathSource = target\nend\n\nlocal function RemoveTempListener(inst)\n    if inst.deathCallback and inst.deathSource then\n        inst:RemoveEventCallback("death", inst.deathCallback, inst.deathSource)\n        inst.deathCallback = nil\n        inst.deathSource = nil\n    end\nend\n\n-- Remove listeners when entity is removed\ninst:ListenForEvent("onremove", function(inst)\n    RemoveTempListener(inst)\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,s.jsx)(n.h3,{id:"weather-warning-system",children:"Weather Warning System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- This example creates a weather warning system that alerts players before storms\nlocal function WeatherWarningSystem(inst)\n    -- Precipitation warning\n    TheWorld:ListenForEvent("ms_forceprecipitation", function(world, data)\n        for _, player in ipairs(AllPlayers) do\n            if player.components.talker then\n                player.components.talker:Say("I feel raindrops coming...")\n            end\n        end\n    end)\n    \n    -- Lightning warning\n    TheWorld:ListenForEvent("ms_sendlightningstrike", function(world, data)\n        -- Check if player is near the strike\n        for _, player in ipairs(AllPlayers) do\n            if player:GetDistanceSqToPoint(data.x, data.y, data.z) < 400 then\n                if player.components.talker then\n                    player.components.talker:Say("That lightning was too close!")\n                end\n                \n                -- Apply temporary speed boost from fear\n                if player.components.locomotor then\n                    player.components.locomotor:SetExternalSpeedMultiplier("lightning_fear", 1.25)\n                    player:DoTaskInTime(3, function()\n                        player.components.locomotor:RemoveExternalSpeedMultiplier("lightning_fear")\n                    end)\n                end\n            end\n        end\n    end)\n    \n    -- Season change preparation\n    TheWorld:ListenForEvent("seasonchange", function(world, data)\n        -- Alert players 3 days before winter\n        if data.season == "winter" then\n            for _, player in ipairs(AllPlayers) do\n                if player.components.talker then\n                    player.components.talker:Say("Winter is coming soon. I should prepare.")\n                end\n            end\n        end\n    end)\nend\n\nAddSimPostInit(WeatherWarningSystem)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"enhanced-sanity-system",children:"Enhanced Sanity System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- This example enhances the sanity system with new effects at different sanity levels\nlocal function EnhanceSanitySystem()\n    AddComponentPostInit("sanity", function(self, inst)\n        if not inst:HasTag("player") then return end\n        \n        -- Track previous sanity percent for threshold detection\n        self.previous_percent = self:GetPercent()\n        \n        -- Store original DoDelta\n        local oldDoDelta = self.DoDelta\n        \n        -- Override DoDelta to add our custom logic\n        self.DoDelta = function(self, delta, ...)\n            -- Call original function\n            local result = oldDoDelta(self, delta, ...)\n            \n            -- Get new percentage\n            local current_percent = self:GetPercent()\n            \n            -- Check if we crossed thresholds\n            if current_percent <= 0.3 and self.previous_percent > 0.3 then\n                -- Below 30% sanity\n                inst:PushEvent("sanitylow", {percent = current_percent})\n                \n                -- Start spawning shadow creatures more frequently\n                if inst.components.areaaware then\n                    local x, y, z = inst.Transform:GetWorldPosition()\n                    local nightmares = TheSim:FindEntities(x, y, z, 20, {"nightmare"})\n                    \n                    if #nightmares < 2 then\n                        local nightmare = SpawnPrefab("crawlinghorror")\n                        local offset = FindWalkableOffset(Point(x, y, z), math.random() * 2 * PI, 10, 12)\n                        if offset then\n                            nightmare.Transform:SetPosition(x + offset.x, 0, z + offset.z)\n                        end\n                    end\n                end\n            elseif current_percent >= 0.5 and self.previous_percent < 0.5 then\n                -- Above 50% sanity\n                inst:PushEvent("sanitynormal", {percent = current_percent})\n                \n                -- Improve combat abilities slightly when sane\n                if inst.components.combat then\n                    inst.components.combat.damagemultiplier = 1.1\n                end\n            elseif current_percent >= 0.8 and self.previous_percent < 0.8 then\n                -- Above 80% sanity\n                inst:PushEvent("sanityhigh", {percent = current_percent})\n                \n                -- Grant movement speed when very sane\n                if inst.components.locomotor then\n                    inst.components.locomotor:SetExternalSpeedMultiplier("high_sanity", 1.15)\n                end\n            elseif current_percent < 0.8 and self.previous_percent >= 0.8 then\n                -- Remove high sanity bonuses\n                if inst.components.locomotor then\n                    inst.components.locomotor:RemoveExternalSpeedMultiplier("high_sanity")\n                end\n            end\n            \n            -- Update previous percent\n            self.previous_percent = current_percent\n            \n            return result\n        end\n        \n        -- Listen for custom sanity events\n        inst:ListenForEvent("sanitylow", function(inst, data)\n            if inst.components.talker then\n                inst.components.talker:Say("The shadows are closing in...")\n            end\n        end)\n        \n        inst:ListenForEvent("sanityhigh", function(inst, data)\n            if inst.components.talker then\n                inst.components.talker:Say("My mind is clear and focused!")\n            end\n        end)\n    end)\nend\n\nAddSimPostInit(EnhanceSanitySystem)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"interactive-environment-system",children:"Interactive Environment System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- This example creates an interactive environment that responds to player actions\nlocal function SetupInteractiveEnvironment()\n    -- Make trees remember who chopped them\n    AddPrefabPostInit("evergreen", function(inst)\n        if not TheWorld.ismastersim then return end\n        \n        -- Track players who chop this tree\n        inst.choppers = {}\n        \n        -- Listen for work events\n        inst:ListenForEvent("worked", function(inst, data)\n            if data.worker and data.worker:HasTag("player") and data.worker.userid then\n                -- Record this player as having chopped this tree\n                inst.choppers[data.worker.userid] = true\n                \n                -- If this tree has been chopped by 3 or more different players\n                local chopper_count = 0\n                for _ in pairs(inst.choppers) do \n                    chopper_count = chopper_count + 1 \n                end\n                \n                if chopper_count >= 3 then\n                    -- Make tree special - more logs when it falls\n                    if inst.components.lootdropper then\n                        local old_DropLoot = inst.components.lootdropper.DropLoot\n                        inst.components.lootdropper.DropLoot = function(self, pt)\n                            old_DropLoot(self, pt)\n                            -- Drop extra logs\n                            for i = 1, 2 do\n                                local log = SpawnPrefab("log")\n                                if log then\n                                    local x, y, z = pt:Get()\n                                    log.Transform:SetPosition(x + math.random(-1, 1), y, z + math.random(-1, 1))\n                                end\n                            end\n                            -- Special effect\n                            SpawnPrefab("pine_needles_chop").Transform:SetPosition(pt:Get())\n                        end\n                    end\n                    \n                    -- Visual indicator\n                    if not inst:HasTag("communal_tree") then\n                        inst:AddTag("communal_tree")\n                        inst.AnimState:SetMultColour(1.1, 1.1, 1.1, 1)\n                    end\n                end\n            end\n        end)\n    end)\n    \n    -- Birds react to player presence\n    AddPrefabPostInit("crow", function(inst)\n        if not TheWorld.ismastersim then return end\n        \n        local old_OnEntityWake = inst.OnEntityWake\n        inst.OnEntityWake = function(inst)\n            if old_OnEntityWake then\n                old_OnEntityWake(inst)\n            end\n            \n            -- Check for nearby players\n            local x, y, z = inst.Transform:GetWorldPosition()\n            local players = TheSim:FindEntities(x, y, z, 10, {"player"})\n            \n            for _, player in ipairs(players) do\n                -- If player is sneaking\n                if player.sg and player.sg:HasStateTag("idle") and \n                   player.components.locomotor and player.components.locomotor:WantsToMoveForward() and\n                   player.components.locomotor.walkspeed < 3 then\n                    -- Bird doesn\'t fly away from sneaking players\n                    return\n                end\n            end\n            \n            -- If player has recently killed birds, this bird is more cautious\n            local recent_bird_kills = TheWorld.components.birdrespawner and TheWorld.components.birdrespawner.recent_bird_kills or 0\n            if recent_bird_kills > 3 then\n                -- Increase detection range\n                local x, y, z = inst.Transform:GetWorldPosition()\n                local players = TheSim:FindEntities(x, y, z, 15, {"player"})\n                if #players > 0 then\n                    inst:PushEvent("startled")\n                end\n            end\n        end\n    end)\n    \n    -- Track bird kills for the world\n    if not TheWorld.components.birdrespawner then return end\n    \n    local old_SpawnModeNormal = TheWorld.components.birdrespawner.SpawnModeNormal\n    TheWorld.components.birdrespawner.SpawnModeNormal = function(self, ...)\n        -- Track recent bird kills\n        self.recent_bird_kills = self.recent_bird_kills or 0\n        \n        -- Decay bird kill count every day\n        if not self.bird_kill_task then\n            self.bird_kill_task = TheWorld:DoPeriodicTask(TUNING.TOTAL_DAY_TIME, function()\n                if self.recent_bird_kills > 0 then\n                    self.recent_bird_kills = math.max(0, self.recent_bird_kills - 1)\n                end\n            end)\n        end\n        \n        return old_SpawnModeNormal(self, ...)\n    end\n    \n    -- Listen for bird deaths\n    AddPrefabPostInit("bird", function(inst)\n        if not TheWorld.ismastersim then return end\n        \n        inst:ListenForEvent("death", function()\n            if TheWorld.components.birdrespawner then\n                TheWorld.components.birdrespawner.recent_bird_kills = \n                    (TheWorld.components.birdrespawner.recent_bird_kills or 0) + 1\n            end\n        end)\n    end)\nend\n\nAddSimPostInit(SetupInteractiveEnvironment) \n'})}),"\n",(0,s.jsx)(n.h2,{id:"summary-and-best-practices",children:"Summary and Best Practices"}),"\n",(0,s.jsx)(n.p,{children:"The event system and hooks are fundamental tools for creating mods in Don't Starve Together. Here's a summary of key concepts and best practices to keep in mind:"}),"\n",(0,s.jsx)(n.h3,{id:"key-concepts-recap",children:"Key Concepts Recap"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Events"})," are signals fired during gameplay that entities can listen for and react to"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hooks"})," are initialization-time modifications that change how game systems function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network variables"})," synchronize state between server and clients using events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom events"})," allow you to create your own communication channels in mods"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"best-practices-for-events",children:"Best Practices for Events"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Clean up event listeners"})," when they're no longer needed to prevent memory leaks"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'inst:ListenForEvent("onremove", function()\n    inst:RemoveEventCallback("myevent", myeventfn)\nend)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Keep event handlers focused"})," - Each handler should do one specific thing"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Good practice - separate handlers for different concerns\ninst:ListenForEvent("attacked", OnAttackedUpdateHealth)\ninst:ListenForEvent("attacked", OnAttackedPlayEffects)\n\n-- Bad practice - one handler doing too many things\ninst:ListenForEvent("attacked", OnAttackedDoEverything)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use descriptive event names"})," for custom events that clearly indicate what happened"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Good: Clear and specific\ninst:PushEvent("special_ability_activated", data)\n\n-- Bad: Vague and unclear\ninst:PushEvent("effect1", data)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Include all relevant data"})," in your event payload to avoid coupling between systems"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'inst:PushEvent("harvest_complete", {\n    harvester = harvester,\n    position = Vector3(x, y, z),\n    item_prefab = "carrot",\n    quantity = 3,\n    quality = "perfect"\n})\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"best-practices-for-hooks",children:"Best Practices for Hooks"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Always check for server/client"})," when using hooks that might affect gameplay"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'AddPrefabPostInit("wilson", function(inst)\n    if not TheWorld.ismastersim then return end\n    -- Server-side modifications...\nend)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Preserve original functionality"})," when overriding methods unless you have a good reason not to"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Save original method\nlocal oldOnAttacked = inst.components.health.OnAttacked\n\n-- Override with new behavior that calls the original\ninst.components.health.OnAttacked = function(self, attacker, damage, ...)\n    -- Custom code before\n    local result = oldOnAttacked(self, attacker, damage, ...)\n    -- Custom code after\n    return result\nend\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use AddComponentPostInit sparingly"})," as it affects all instances of a component"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consider compatibility with other mods"})," when applying hooks to commonly modified components"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-considerations-1",children:"Performance Considerations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avoid creating too many event listeners"})," for frequently fired events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep event handling code efficient"})," as it might run many times per second"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Be careful with hooks that run on every entity"})," (like AddPrefabPostInitAny)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean up all references in onremove events"})," to prevent memory leaks"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By following these practices, you'll create mods that are more efficient, more maintainable, and more compatible with other mods in the ecosystem."}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"The event system and hooks provide powerful tools for modifying and extending Don't Starve Together. Events allow entities to communicate and react to gameplay changes, while hooks let you modify the core behavior of game systems."}),"\n",(0,s.jsx)(n.p,{children:"Understanding when to use each approach is key to successful modding:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"events"})," when you need to react to things happening during gameplay"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"hooks"})," when you need to modify how the game works at a fundamental level"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"network events"})," when you need to synchronize state in multiplayer"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"custom events"})," when building complex mods with multiple interacting systems"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"With these tools at your disposal, you can create sophisticated mods that seamlessly integrate with the game and provide new experiences for players."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);