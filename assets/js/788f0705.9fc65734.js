"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6954],{1513:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/examples/case-status","title":"Case Study - Combined Status","description":"This case study examines the \\"Combined Status\\" mod for Don\'t Starve Together, which enhances the player status display with additional information. We\'ll analyze its implementation and extract valuable modding techniques for UI enhancement.","source":"@site/docs/api-vanilla/examples/case-status.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/case-status","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-status","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"id":"case-status","title":"Case Study - Combined Status","sidebar_position":13},"sidebar":"docs","previous":{"title":"Case Study - Wormhole Marks","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-wormhole"},"next":{"title":"Custom Tool Set Project","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/project-tools"}}');var i=t(4848),s=t(8453);const o={id:"case-status",title:"Case Study - Combined Status",sidebar_position:13},l="Case Study: Combined Status Mod",r={},d=[{value:"Mod Overview",id:"mod-overview",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Core Techniques Used",id:"core-techniques-used",level:3},{value:"1. UI Widget Creation and Positioning",id:"1-ui-widget-creation-and-positioning",level:2},{value:"Key Code Elements",id:"key-code-elements",level:3},{value:"Implementation Analysis",id:"implementation-analysis",level:3},{value:"2. Status Data Collection",id:"2-status-data-collection",level:2},{value:"Key Code Elements",id:"key-code-elements-1",level:3},{value:"Implementation Analysis",id:"implementation-analysis-1",level:3},{value:"3. Dynamic UI Updates",id:"3-dynamic-ui-updates",level:2},{value:"Key Code Elements",id:"key-code-elements-2",level:3},{value:"Implementation Analysis",id:"implementation-analysis-2",level:3},{value:"4. Configuration System",id:"4-configuration-system",level:2},{value:"Key Code Elements",id:"key-code-elements-3",level:3},{value:"Implementation Analysis",id:"implementation-analysis-3",level:3},{value:"5. Performance Optimization",id:"5-performance-optimization",level:2},{value:"Key Code Elements",id:"key-code-elements-4",level:3},{value:"Implementation Analysis",id:"implementation-analysis-4",level:3},{value:"Lessons Learned",id:"lessons-learned",level:2},{value:"1. Non-Intrusive UI Design",id:"1-non-intrusive-ui-design",level:3},{value:"2. Efficient Data Collection",id:"2-efficient-data-collection",level:3},{value:"3. User-Centered Configuration",id:"3-user-centered-configuration",level:3},{value:"4. Performance Awareness",id:"4-performance-awareness",level:3},{value:"Implementing Similar Features",id:"implementing-similar-features",level:2},{value:"Step 1: Plan Your UI Layout",id:"step-1-plan-your-ui-layout",level:3},{value:"Step 2: Create Basic UI Structure",id:"step-2-create-basic-ui-structure",level:3},{value:"Step 3: Collect and Display Data",id:"step-3-collect-and-display-data",level:3},{value:"Step 4: Set Up Periodic Updates",id:"step-4-set-up-periodic-updates",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"case-study-combined-status-mod",children:"Case Study: Combined Status Mod"})}),"\n",(0,i.jsx)(n.p,{children:"This case study examines the \"Combined Status\" mod for Don't Starve Together, which enhances the player status display with additional information. We'll analyze its implementation and extract valuable modding techniques for UI enhancement."}),"\n",(0,i.jsx)(n.h2,{id:"mod-overview",children:"Mod Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Combined Status mod addresses a common player need: having more information readily visible on the screen. The mod:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Combines temperature, season, and world day information into a compact display"}),"\n",(0,i.jsx)(n.li,{children:"Shows numerical values for health, hunger, and sanity"}),"\n",(0,i.jsx)(n.li,{children:"Displays exact durability percentages for equipped items"}),"\n",(0,i.jsx)(n.li,{children:"Adds moon phase indicators and clock"}),"\n",(0,i.jsx)(n.li,{children:"Maintains the game's visual style while adding functionality"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"core-techniques-used",children:"Core Techniques Used"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"UI Widget Creation and Positioning"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Status Data Collection"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Dynamic UI Updates"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Configuration System"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Performance Optimization"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's examine each of these techniques in detail."}),"\n",(0,i.jsx)(n.h2,{id:"1-ui-widget-creation-and-positioning",children:"1. UI Widget Creation and Positioning"}),"\n",(0,i.jsx)(n.p,{children:"The mod creates custom UI elements that match the game's visual style while providing additional information."}),"\n",(0,i.jsx)(n.h3,{id:"key-code-elements",children:"Key Code Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create the main status display widget\nlocal function CreateStatusDisplay(owner)\n    -- Create the root widget\n    local root = owner.HUD.controls.top_root:AddChild(Widget("CombinedStatus"))\n    root:SetVAnchor(ANCHOR_TOP)\n    root:SetHAnchor(ANCHOR_LEFT)\n    root:SetPosition(CONFIG.POSITION_X, CONFIG.POSITION_Y, 0)\n    \n    -- Create the background\n    local background = root:AddChild(Image("images/status_bg.xml", "status_bg.tex"))\n    background:SetScale(0.7, 0.7, 0.7)\n    \n    -- Add temperature display\n    local temp = root:AddChild(Widget("temperature"))\n    temp:SetPosition(25, -25, 0)\n    \n    local temp_icon = temp:AddChild(Image("images/temperature.xml", "temperature.tex"))\n    temp_icon:SetScale(0.5, 0.5, 0.5)\n    \n    local temp_text = temp:AddChild(Text(NUMBERFONT, 28))\n    temp_text:SetPosition(25, 0, 0)\n    temp_text:SetString("0\xb0C")\n    \n    -- Add more UI elements...\n    \n    -- Store references to update later\n    root.temp_text = temp_text\n    \n    return root\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-analysis",children:"Implementation Analysis"}),"\n",(0,i.jsx)(n.p,{children:"The UI creation system demonstrates:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Widget Hierarchy"}),": Creating a structured UI with parent-child relationships"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Anchoring"}),": Using anchors to position UI elements relative to screen edges"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Styling"}),": Matching the game's art style with appropriate assets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Component Organization"}),": Grouping related elements into sub-widgets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference Management"}),": Storing references to elements that need updating"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-status-data-collection",children:"2. Status Data Collection"}),"\n",(0,i.jsx)(n.p,{children:"The mod needs to gather various types of data from different game systems to display in the UI."}),"\n",(0,i.jsx)(n.h3,{id:"key-code-elements-1",children:"Key Code Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Collect player status data\nlocal function GetPlayerStatus(player)\n    if not player then return {} end\n    \n    local status = {}\n    \n    -- Get health data\n    if player.components.health then\n        status.health = {\n            current = math.floor(player.components.health.currenthealth),\n            max = math.floor(player.components.health.maxhealth),\n            percent = player.components.health:GetPercent()\n        }\n    end\n    \n    -- Get hunger data\n    if player.components.hunger then\n        status.hunger = {\n            current = math.floor(player.components.hunger.current),\n            max = math.floor(player.components.hunger.max),\n            percent = player.components.hunger:GetPercent()\n        }\n    end\n    \n    -- Get sanity data\n    if player.components.sanity then\n        status.sanity = {\n            current = math.floor(player.components.sanity.current),\n            max = math.floor(player.components.sanity.max),\n            percent = player.components.sanity:GetPercent()\n        }\n    end\n    \n    -- Get temperature\n    if player.components.temperature then\n        status.temperature = math.floor(player.components.temperature:GetCurrent())\n        status.is_freezing = player.components.temperature:IsFreezing()\n        status.is_overheating = player.components.temperature:IsOverheating()\n    end\n    \n    -- Get equipped items\n    status.equipped = {}\n    if player.components.inventory then\n        for k, v in pairs(EQUIPSLOTS) do\n            local item = player.components.inventory:GetEquippedItem(v)\n            if item then\n                local data = {\n                    prefab = item.prefab,\n                    name = item:GetDisplayName()\n                }\n                \n                -- Get durability if available\n                if item.components.finiteuses then\n                    data.durability = item.components.finiteuses:GetPercent()\n                elseif item.components.armor then\n                    data.durability = item.components.armor:GetPercent()\n                elseif item.components.fueled then\n                    data.durability = item.components.fueled:GetPercent()\n                end\n                \n                status.equipped[v] = data\n            end\n        end\n    end\n    \n    return status\nend\n\n-- Collect world status data\nlocal function GetWorldStatus()\n    if not TheWorld then return {} end\n    \n    local status = {}\n    \n    -- Get season info\n    if TheWorld.components.seasons then\n        status.season = TheWorld.components.seasons:GetSeason()\n        status.days_left = TheWorld.components.seasons:GetDaysLeftInSeason()\n        status.days_elapsed = TheWorld.components.seasons:GetSeasonLength() - status.days_left\n    end\n    \n    -- Get time of day\n    if TheWorld.components.clock then\n        status.time = TheWorld.components.clock:GetTimeString()\n        status.day = TheWorld.components.clock:GetNumCycles() + 1\n        status.phase = TheWorld.components.clock:GetPhase()\n        status.remaining_daylight = TheWorld.components.clock:GetTimeUntilPhase("dusk")\n    end\n    \n    -- Get moon phase\n    if TheWorld.components.worldstate then\n        status.moon_phase = TheWorld.components.worldstate:GetMoonPhase()\n    end\n    \n    return status\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-analysis-1",children:"Implementation Analysis"}),"\n",(0,i.jsx)(n.p,{children:"The data collection system demonstrates:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Component Access"}),": Safely accessing various game components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Defensive Programming"}),": Checking for component existence before accessing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Transformation"}),": Converting raw values to display-friendly formats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comprehensive Coverage"}),": Gathering data from both player and world sources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structured Organization"}),": Organizing related data into logical groups"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-dynamic-ui-updates",children:"3. Dynamic UI Updates"}),"\n",(0,i.jsx)(n.p,{children:"The mod updates the UI elements in response to changes in the game state."}),"\n",(0,i.jsx)(n.h3,{id:"key-code-elements-2",children:"Key Code Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Update the status display\nlocal function UpdateStatusDisplay(widget, player_status, world_status)\n    -- Update temperature\n    if widget.temp_text and player_status.temperature then\n        local temp = player_status.temperature\n        local color = NORMAL_COLOR\n        \n        -- Set color based on temperature state\n        if player_status.is_freezing then\n            color = COLD_COLOR\n        elseif player_status.is_overheating then\n            color = HOT_COLOR\n        end\n        \n        widget.temp_text:SetString(string.format("%d\xb0C", temp))\n        widget.temp_text:SetColor(color)\n    end\n    \n    -- Update health display\n    if widget.health_text and player_status.health then\n        local health = player_status.health\n        widget.health_text:SetString(string.format("%d / %d", health.current, health.max))\n        \n        -- Update health bar\n        if widget.health_bar then\n            widget.health_bar:SetPercent(health.percent)\n        end\n    end\n    \n    -- Update hunger display\n    if widget.hunger_text and player_status.hunger then\n        local hunger = player_status.hunger\n        widget.hunger_text:SetString(string.format("%d / %d", hunger.current, hunger.max))\n        \n        -- Update hunger bar\n        if widget.hunger_bar then\n            widget.hunger_bar:SetPercent(hunger.percent)\n        end\n    end\n    \n    -- Update sanity display\n    if widget.sanity_text and player_status.sanity then\n        local sanity = player_status.sanity\n        widget.sanity_text:SetString(string.format("%d / %d", sanity.current, sanity.max))\n        \n        -- Update sanity bar\n        if widget.sanity_bar then\n            widget.sanity_bar:SetPercent(sanity.percent)\n        end\n    end\n    \n    -- Update season and day display\n    if widget.season_text and world_status.season then\n        local season_name = STRINGS.UI.SERVERLISTINGSCREEN.SEASONS[string.upper(world_status.season)]\n        widget.season_text:SetString(season_name)\n        \n        -- Update season icon\n        if widget.season_icon then\n            widget.season_icon:SetTexture("images/seasons.xml", world_status.season .. ".tex")\n        end\n    end\n    \n    if widget.day_text and world_status.day then\n        widget.day_text:SetString(string.format(STRINGS.UI.HUD.DAY, world_status.day))\n    end\n    \n    -- Update clock\n    if widget.clock_text and world_status.time then\n        widget.clock_text:SetString(world_status.time)\n    end\n    \n    -- Update moon phase\n    if widget.moon_icon and world_status.moon_phase then\n        widget.moon_icon:SetTexture("images/moon_phases.xml", "moon_phase_" .. world_status.moon_phase .. ".tex")\n    end\n    \n    -- Update equipped items\n    if widget.equipped and player_status.equipped then\n        for slot, item_widget in pairs(widget.equipped) do\n            local item = player_status.equipped[slot]\n            \n            if item and item_widget.durability and item.durability then\n                -- Show durability percentage\n                item_widget.durability:SetString(string.format("%d%%", math.floor(item.durability * 100)))\n                \n                -- Set color based on durability\n                local color = NORMAL_COLOR\n                if item.durability < 0.1 then\n                    color = DANGER_COLOR\n                elseif item.durability < 0.3 then\n                    color = WARNING_COLOR\n                end\n                item_widget.durability:SetColor(color)\n            else\n                -- Hide durability text if no item or no durability\n                if item_widget.durability then\n                    item_widget.durability:SetString("")\n                end\n            end\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-analysis-2",children:"Implementation Analysis"}),"\n",(0,i.jsx)(n.p,{children:"The UI update system demonstrates:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conditional Updates"}),": Only updating elements when data is available"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Feedback"}),": Using colors to indicate status conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Formatting"}),": Formatting numerical values for readability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Localization Support"}),": Using game strings for localized text"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dynamic Visuals"}),": Changing textures based on game state"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-configuration-system",children:"4. Configuration System"}),"\n",(0,i.jsx)(n.p,{children:"The mod provides options for users to customize the display according to their preferences."}),"\n",(0,i.jsx)(n.h3,{id:"key-code-elements-3",children:"Key Code Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Configuration options in modinfo.lua\nconfiguration_options = {\n    {\n        name = "POSITION",\n        label = "Display Position",\n        options = {\n            {description = "Top Left", data = "topleft"},\n            {description = "Top Right", data = "topright"},\n            {description = "Bottom Left", data = "bottomleft"},\n            {description = "Bottom Right", data = "bottomright"},\n            {description = "Center Top", data = "centertop"},\n            {description = "Center Bottom", data = "centerbottom"}\n        },\n        default = "topleft"\n    },\n    {\n        name = "SHOW_NUMERICAL",\n        label = "Show Numerical Values",\n        options = {\n            {description = "Yes", data = true},\n            {description = "No", data = false}\n        },\n        default = true\n    },\n    {\n        name = "SHOW_DURABILITY",\n        label = "Show Item Durability",\n        options = {\n            {description = "Always", data = "always"},\n            {description = "When Low", data = "low"},\n            {description = "Never", data = "never"}\n        },\n        default = "always"\n    },\n    {\n        name = "UPDATE_INTERVAL",\n        label = "Update Frequency",\n        options = {\n            {description = "Very High (0.1s)", data = 0.1},\n            {description = "High (0.25s)", data = 0.25},\n            {description = "Normal (0.5s)", data = 0.5},\n            {description = "Low (1s)", data = 1}\n        },\n        default = 0.5\n    }\n}\n\n-- Apply configuration in modmain.lua\nlocal function ApplyConfiguration()\n    CONFIG = {\n        POSITION = GetModConfigData("POSITION"),\n        SHOW_NUMERICAL = GetModConfigData("SHOW_NUMERICAL"),\n        SHOW_DURABILITY = GetModConfigData("SHOW_DURABILITY"),\n        UPDATE_INTERVAL = GetModConfigData("UPDATE_INTERVAL")\n    }\n    \n    -- Calculate position based on configuration\n    if CONFIG.POSITION == "topleft" then\n        CONFIG.POSITION_X = 10\n        CONFIG.POSITION_Y = -10\n    elseif CONFIG.POSITION == "topright" then\n        CONFIG.POSITION_X = -10\n        CONFIG.POSITION_Y = -10\n        CONFIG.ALIGNMENT = "right"\n    elseif CONFIG.POSITION == "bottomleft" then\n        CONFIG.POSITION_X = 10\n        CONFIG.POSITION_Y = 10\n        CONFIG.ANCHOR_V = ANCHOR_BOTTOM\n    elseif CONFIG.POSITION == "bottomright" then\n        CONFIG.POSITION_X = -10\n        CONFIG.POSITION_Y = 10\n        CONFIG.ANCHOR_V = ANCHOR_BOTTOM\n        CONFIG.ALIGNMENT = "right"\n    elseif CONFIG.POSITION == "centertop" then\n        CONFIG.POSITION_X = 0\n        CONFIG.POSITION_Y = -10\n        CONFIG.ANCHOR_H = ANCHOR_MIDDLE\n        CONFIG.ALIGNMENT = "center"\n    elseif CONFIG.POSITION == "centerbottom" then\n        CONFIG.POSITION_X = 0\n        CONFIG.POSITION_Y = 10\n        CONFIG.ANCHOR_V = ANCHOR_BOTTOM\n        CONFIG.ANCHOR_H = ANCHOR_MIDDLE\n        CONFIG.ALIGNMENT = "center"\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-analysis-3",children:"Implementation Analysis"}),"\n",(0,i.jsx)(n.p,{children:"The configuration system demonstrates:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User-Friendly Options"}),": Providing clear descriptions for each option"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Appropriate Defaults"}),": Setting sensible default values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Option Categories"}),": Organizing options by functionality"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Configuration Application"}),": Transforming user settings into usable values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Derived Settings"}),": Calculating additional settings based on user choices"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5-performance-optimization",children:"5. Performance Optimization"}),"\n",(0,i.jsx)(n.p,{children:"The mod includes optimizations to ensure it doesn't impact game performance."}),"\n",(0,i.jsx)(n.h3,{id:"key-code-elements-4",children:"Key Code Elements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Optimized update function\nlocal function InitializeStatusUpdates(widget)\n    -- Store last values to avoid unnecessary updates\n    local last_player_status = {}\n    local last_world_status = {}\n    \n    -- Create periodic update task\n    return player:DoPeriodicTask(CONFIG.UPDATE_INTERVAL, function()\n        -- Only collect data if widget exists and is visible\n        if not widget or not widget.shown then return end\n        \n        -- Collect current status data\n        local player_status = GetPlayerStatus(player)\n        local world_status = GetWorldStatus()\n        \n        -- Check if anything has changed\n        local player_changed = HasChanges(player_status, last_player_status)\n        local world_changed = HasChanges(world_status, last_world_status)\n        \n        -- Only update if something changed\n        if player_changed or world_changed then\n            UpdateStatusDisplay(widget, player_status, world_status)\n            \n            -- Store current values for next comparison\n            last_player_status = DeepCopy(player_status)\n            last_world_status = DeepCopy(world_status)\n        end\n    end)\nend\n\n-- Helper function to check if data has changed\nlocal function HasChanges(new_data, old_data)\n    -- Quick check for nil or different types\n    if type(new_data) ~= type(old_data) then\n        return true\n    end\n    \n    -- Handle non-table types\n    if type(new_data) ~= "table" then\n        return new_data ~= old_data\n    end\n    \n    -- Check if any keys in new_data are different from old_data\n    for k, v in pairs(new_data) do\n        if type(v) == "table" then\n            if HasChanges(v, old_data[k]) then\n                return true\n            end\n        elseif old_data[k] == nil or v ~= old_data[k] then\n            return true\n        end\n    end\n    \n    -- Check if any keys in old_data are missing from new_data\n    for k, v in pairs(old_data) do\n        if new_data[k] == nil then\n            return true\n        end\n    end\n    \n    return false\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-analysis-4",children:"Implementation Analysis"}),"\n",(0,i.jsx)(n.p,{children:"The performance optimization demonstrates:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conditional Updates"}),": Only updating the UI when data changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Update Frequency Control"}),": Allowing users to adjust update frequency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visibility Checks"}),": Skipping updates when UI is not visible"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Change Detection"}),": Efficiently detecting changes in complex data structures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Management"}),": Properly storing and comparing previous states"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"lessons-learned",children:"Lessons Learned"}),"\n",(0,i.jsx)(n.p,{children:"From analyzing the Combined Status mod, we can extract several valuable lessons for UI mod development:"}),"\n",(0,i.jsx)(n.h3,{id:"1-non-intrusive-ui-design",children:"1. Non-Intrusive UI Design"}),"\n",(0,i.jsx)(n.p,{children:"The mod demonstrates how to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add information without cluttering the screen"}),"\n",(0,i.jsx)(n.li,{children:"Maintain the game's visual style"}),"\n",(0,i.jsx)(n.li,{children:"Position UI elements to avoid interfering with gameplay"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-efficient-data-collection",children:"2. Efficient Data Collection"}),"\n",(0,i.jsx)(n.p,{children:"The mod shows good practices for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Safely accessing game components"}),"\n",(0,i.jsx)(n.li,{children:"Organizing data collection in logical functions"}),"\n",(0,i.jsx)(n.li,{children:"Transforming raw data into display-friendly formats"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-user-centered-configuration",children:"3. User-Centered Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The mod prioritizes user experience through:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Providing meaningful configuration options"}),"\n",(0,i.jsx)(n.li,{children:"Setting sensible defaults"}),"\n",(0,i.jsx)(n.li,{children:"Allowing users to customize according to their preferences"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-performance-awareness",children:"4. Performance Awareness"}),"\n",(0,i.jsx)(n.p,{children:"Despite adding UI elements and collecting data, the mod maintains good performance by:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Only updating when necessary"}),"\n",(0,i.jsx)(n.li,{children:"Allowing users to control update frequency"}),"\n",(0,i.jsx)(n.li,{children:"Efficiently detecting changes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementing-similar-features",children:"Implementing Similar Features"}),"\n",(0,i.jsx)(n.p,{children:"If you want to create a mod with similar status display features, follow these steps:"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-plan-your-ui-layout",children:"Step 1: Plan Your UI Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define what information you want to display\nlocal STATUS_ELEMENTS = {\n    {id = "health", type = "stat", component = "health"},\n    {id = "hunger", type = "stat", component = "hunger"},\n    {id = "sanity", type = "stat", component = "sanity"},\n    {id = "temperature", type = "value", component = "temperature"},\n    {id = "season", type = "world", source = "seasons"},\n    {id = "day", type = "world", source = "clock"},\n    {id = "time", type = "world", source = "clock"}\n}\n\n-- Plan the visual layout\nlocal LAYOUT = {\n    rows = 3,\n    columns = 2,\n    spacing = {x = 100, y = 30},\n    position = {x = 10, y = -10}\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-create-basic-ui-structure",children:"Step 2: Create Basic UI Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create a basic status display\nfunction CreateBasicStatusDisplay(player)\n    -- Create root widget\n    local root = player.HUD.controls:AddChild(Widget("StatusDisplay"))\n    root:SetVAnchor(ANCHOR_TOP)\n    root:SetHAnchor(ANCHOR_LEFT)\n    root:SetPosition(LAYOUT.position.x, LAYOUT.position.y, 0)\n    \n    -- Create background\n    local bg = root:AddChild(Image("images/ui_elements.xml", "status_bg.tex"))\n    bg:SetScale(0.8, 0.8, 0.8)\n    \n    -- Create element containers\n    root.elements = {}\n    \n    -- Create individual status elements\n    for i, element in ipairs(STATUS_ELEMENTS) do\n        local row = math.floor((i-1) / LAYOUT.columns)\n        local col = (i-1) % LAYOUT.columns\n        \n        local pos_x = col * LAYOUT.spacing.x\n        local pos_y = -row * LAYOUT.spacing.y\n        \n        local widget = CreateStatusElement(element.id, element.type)\n        widget:SetPosition(pos_x, pos_y, 0)\n        \n        root:AddChild(widget)\n        root.elements[element.id] = widget\n    end\n    \n    return root\nend\n\n-- Create individual status element\nfunction CreateStatusElement(id, type)\n    local widget = Widget(id)\n    \n    -- Create icon\n    local icon = widget:AddChild(Image("images/status_icons.xml", id .. ".tex"))\n    icon:SetScale(0.5, 0.5, 0.5)\n    icon:SetPosition(-30, 0, 0)\n    \n    -- Create text\n    local text = widget:AddChild(Text(NUMBERFONT, 24))\n    text:SetPosition(10, 0, 0)\n    text:SetString("--")\n    \n    widget.icon = icon\n    widget.text = text\n    \n    return widget\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-collect-and-display-data",children:"Step 3: Collect and Display Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Update status display with current data\nfunction UpdateStatusDisplay(widget, player)\n    if not widget or not player then return end\n    \n    -- Update health\n    if widget.elements.health and player.components.health then\n        local current = math.floor(player.components.health.currenthealth)\n        local max = math.floor(player.components.health.maxhealth)\n        widget.elements.health.text:SetString(string.format("%d / %d", current, max))\n    end\n    \n    -- Update hunger\n    if widget.elements.hunger and player.components.hunger then\n        local current = math.floor(player.components.hunger.current)\n        local max = math.floor(player.components.hunger.max)\n        widget.elements.hunger.text:SetString(string.format("%d / %d", current, max))\n    end\n    \n    -- Update sanity\n    if widget.elements.sanity and player.components.sanity then\n        local current = math.floor(player.components.sanity.current)\n        local max = math.floor(player.components.sanity.max)\n        widget.elements.sanity.text:SetString(string.format("%d / %d", current, max))\n    end\n    \n    -- Update temperature\n    if widget.elements.temperature and player.components.temperature then\n        local temp = math.floor(player.components.temperature:GetCurrent())\n        widget.elements.temperature.text:SetString(string.format("%d\xb0C", temp))\n    end\n    \n    -- Update world information\n    if TheWorld then\n        -- Update season\n        if widget.elements.season and TheWorld.components.seasons then\n            local season = TheWorld.components.seasons:GetSeason()\n            local season_name = STRINGS.UI.SERVERLISTINGSCREEN.SEASONS[string.upper(season)]\n            widget.elements.season.text:SetString(season_name)\n        end\n        \n        -- Update day\n        if widget.elements.day and TheWorld.components.clock then\n            local day = TheWorld.components.clock:GetNumCycles() + 1\n            widget.elements.day.text:SetString(string.format(STRINGS.UI.HUD.DAY, day))\n        end\n        \n        -- Update time\n        if widget.elements.time and TheWorld.components.clock then\n            local time = TheWorld.components.clock:GetTimeString()\n            widget.elements.time.text:SetString(time)\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-4-set-up-periodic-updates",children:"Step 4: Set Up Periodic Updates"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Initialize periodic updates\nfunction InitializeStatusUpdates(player, widget)\n    -- Create update task\n    return player:DoPeriodicTask(0.5, function()\n        if player and widget and widget.shown then\n            UpdateStatusDisplay(widget, player)\n        end\n    end)\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"The Combined Status mod exemplifies excellent UI mod design through:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Information Enhancement"}),": Providing useful information without overwhelming the player"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Integration"}),": Maintaining the game's art style and UI conventions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Customization"}),": Allowing players to adjust the display to their preferences"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Consciousness"}),": Ensuring the mod doesn't negatively impact game performance"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By studying this mod, we can learn how to create UI enhancements that add value to the game experience while respecting its visual design and performance requirements. These principles apply to any mod that aims to improve the game's interface."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var a=t(6540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);