"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[25712],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var l=s(96540);const i={},r=l.createContext(i);function a(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(r.Provider,{value:n},e.children)}},92333:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/core/class","title":"Class","description":"Object-oriented programming system providing inheritance, property management, and instance tracking","source":"@site/docs/game-scripts/core-systems/fundamentals/core/class.md","sourceDirName":"game-scripts/core-systems/fundamentals/core","slug":"/game-scripts/core-systems/fundamentals/core/class","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/core/class","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"class","title":"Class","description":"Object-oriented programming system providing inheritance, property management, and instance tracking","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Core Fundamentals Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/core/"},"next":{"title":"Entity Replica System","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/core/entityreplica"}}');var i=s(74848),r=s(28453);const a={id:"class",title:"Class",description:"Object-oriented programming system providing inheritance, property management, and instance tracking",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Class",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"Class(base, _ctor, props)",id:"class",level:3},{value:"makereadonly(t, k)",id:"makereadonly",level:3},{value:"addsetter(t, k, fn)",id:"addsetter",level:3},{value:"removesetter(t, k)",id:"removesetter",level:3},{value:"Instance Methods",id:"instance-methods",level:2},{value:"inst(klass)",id:"is-a",level:3},{value:"inst()",id:"is-class",level:3},{value:"Class(obj)",id:"is-instance",level:3},{value:"Global Configuration",id:"global-configuration",level:2},{value:"TrackClassInstances",id:"trackclassinstances",level:3},{value:"ClassRegistry",id:"classregistry",level:3},{value:"ClassTrackingTable",id:"classtrackingtable",level:3},{value:"ClassTrackingInterval",id:"classtrackinginterval",level:3},{value:"Advanced Functions",id:"advanced-functions",level:2},{value:"HandleClassInstanceTracking()",id:"handle-class-instance-tracking",level:3},{value:"ReloadedClass(mt)",id:"reloaded-class",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Basic Inheritance",id:"basic-inheritance",level:3},{value:"Property Validation",id:"property-validation",level:3},{value:"Component System",id:"component-system",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Metatable Structure",id:"metatable-structure",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Technical Notes",id:"technical-notes",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Constructor Patterns",id:"constructor-patterns",level:3},{value:"Inheritance Guidelines",id:"inheritance-guidelines",level:3},{value:"Property Management",id:"property-management",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"class",children:"Class"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Class"})," system provides object-oriented programming capabilities for Don't Starve Together's Lua environment. It implements inheritance, property management with setters/getters, read-only properties, instance tracking, and hot reloading support. This system enables structured code organization and reusable component patterns throughout the game."]}),"\n",(0,i.jsx)(n.p,{children:"The Class system is compatible with Lua 5.1 and uses metatables to implement inheritance and method dispatch. It supports single inheritance, constructor functions, property validation, and optional instance tracking for memory debugging."}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Simple class with constructor\nlocal Player = Class(function(self, name, health)\n    self.name = name\n    self.health = health or 100\n    self.inventory = {}\nend)\n\n-- Class with inheritance\nlocal Warrior = Class(Player, function(self, name, health, weapon)\n    Player._ctor(self, name, health)  -- Call parent constructor\n    self.weapon = weapon or "sword"\n    self.armor = 50\nend)\n\n-- Create instances\nlocal player = Player("Wilson", 150)\nlocal warrior = Warrior("Wigfrid", 200, "spear")\n\n-- Check inheritance\nprint(player:is_a(Player))    -- true\nprint(warrior:is_a(Player))   -- true (inheritance)\nprint(warrior:is_a(Warrior))  -- true\n'})}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.h3,{id:"class",children:"Class(base, _ctor, props)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCreates a new class with optional inheritance, constructor, and property management."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"base"})," (table/function, optional): Base class for inheritance, or constructor if no inheritance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"_ctor"})," (function, optional): Constructor function called when creating instances"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"props"})," (table, optional): Property definitions with setter functions"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): New class object with metatable configured for inheritance"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Simple class\nlocal Animal = Class(function(self, name)\n    self.name = name\n    self.health = 100\nend)\n\n-- Class with inheritance\nlocal Dog = Class(Animal, function(self, name, breed)\n    Animal._ctor(self, name)\n    self.breed = breed\nend)\n\n-- Class with property management\nlocal Monster = Class(function(self, name)\n    self.name = name\n    self._health = 100\nend, {\n    health = function(self, value, old)\n        if value < 0 then value = 0 end\n        if value > self.max_health then value = self.max_health end\n        self._health = value\n        if value <= 0 then\n            self:OnDeath()\n        end\n    end\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n",(0,i.jsx)(n.li,{children:"Supports Lua 5.1 compatibility"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"makereadonly",children:"makereadonly(t, k)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nMakes a property read-only, preventing modification after initial assignment."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"t"})," (table): Instance to modify"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"k"})," (string): Property name to make read-only"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local Config = Class(function(self, version)\n    self.version = version\n    self.debug_mode = false\n    \n    -- Make version read-only after creation\n    makereadonly(self, "version")\nend)\n\nlocal config = Config("1.0.0")\nprint(config.version)  -- "1.0.0"\n\n-- This will throw an error:\n-- config.version = "2.0.0"  -- Error: Cannot change read only property\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"addsetter",children:"addsetter(t, k, fn)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nAdds a setter function that validates or transforms property assignments."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"t"})," (table): Instance to modify"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"k"})," (string): Property name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Setter function with signature ",(0,i.jsx)(n.code,{children:"(self, new_value, old_value)"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local Character = Class(function(self, name)\n    self.name = name\n    self._health = 100\n    self.max_health = 100\n    \n    -- Add health validation\n    addsetter(self, "health", function(self, value, old)\n        -- Clamp value between 0 and max_health\n        value = math.max(0, math.min(value, self.max_health))\n        self._health = value\n        \n        -- Trigger events\n        if value <= 0 and old > 0 then\n            self:OnDeath()\n        elseif value > old then\n            self:OnHeal(value - old)\n        end\n    end)\nend)\n\nlocal player = Character("Wilson")\nplayer.health = 150  -- Automatically clamped to 100\nplayer.health = -10  -- Automatically clamped to 0, triggers OnDeath\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"removesetter",children:"removesetter(t, k)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRemoves a property setter, restoring direct property access."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"t"})," (table): Instance to modify"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"k"})," (string): Property name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Remove the health setter for direct access\nremovesetter(player, "health")\nplayer.health = 75  -- Now sets directly without validation\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,i.jsxs)(n.h3,{id:"is-a",children:["inst",":is_a","(klass)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if an instance is derived from a specific class."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"klass"})," (table): Class to check inheritance against"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["(boolean): ",(0,i.jsx)(n.code,{children:"true"})," if instance inherits from the class"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local player = Player("Wilson", 150)\nlocal warrior = Warrior("Wigfrid", 200, "spear")\n\nprint(player:is_a(Player))    -- true\nprint(warrior:is_a(Player))   -- true (inheritance)\nprint(warrior:is_a(Warrior))  -- true\nprint(player:is_a(Warrior))   -- false\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"is-class",children:["inst",":is_class","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if an object is a class definition rather than an instance."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"None"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["(boolean): ",(0,i.jsx)(n.code,{children:"true"})," if object is a class, ",(0,i.jsx)(n.code,{children:"false"})," if instance"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'print(Player:is_class())        -- true\nprint(player:is_class())        -- false\n\n-- Useful for validation\nlocal function ProcessObject(obj)\n    if obj:is_class() then\n        print("This is a class definition")\n    else\n        print("This is an instance")\n    end\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"is-instance",children:["Class",":is_instance","(obj)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nClass method to check if an object is an instance of this specific class."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"obj"})," (any): Object to test"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["(boolean): ",(0,i.jsx)(n.code,{children:"true"})," if object is an instance of this class"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local player = Player("Wilson")\nlocal number = 42\n\nprint(Player:is_instance(player))  -- true\nprint(Player:is_instance(number))  -- false\nprint(Warrior:is_instance(player)) -- false (different class)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"global-configuration",children:"Global Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"trackclassinstances",children:"TrackClassInstances"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Value:"})," ",(0,i.jsx)(n.code,{children:"false"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Enable/disable instance tracking for debugging purposes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Enable in class.lua for development\nlocal TrackClassInstances = true\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"classregistry",children:"ClassRegistry"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," ",(0,i.jsx)(n.code,{children:"table"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Registry of all defined classes for hot reloading support."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"classtrackingtable",children:"ClassTrackingTable"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," ",(0,i.jsx)(n.code,{children:"table"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Weak-keyed table tracking instances per class when tracking is enabled."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"classtrackinginterval",children:"ClassTrackingInterval"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Value:"})," ",(0,i.jsx)(n.code,{children:"100"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Frames between tracking reports when instance tracking is enabled."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-functions",children:"Advanced Functions"}),"\n",(0,i.jsx)(n.h3,{id:"handle-class-instance-tracking",children:"HandleClassInstanceTracking()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nProvides periodic reports on class instance counts for memory debugging. Must be called from main game loop when tracking is enabled."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"None"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Enable tracking (set at top of class.lua)\nlocal TrackClassInstances = true\nClassTrackingInterval = 60  -- Report every 60 frames\n\n-- In main game loop\nfunction Update(dt)\n    HandleClassInstanceTracking()\n    -- ... other update logic\nend\n\n-- Output will show top 10 classes by instance count:\n-- 1 : Monster - 1500\n-- 2 : Component - 800  \n-- 3 : Player - 4\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"reloaded-class",children:"ReloadedClass(mt)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCleans up class registry during hot reloading to prevent memory leaks."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mt"})," (table): Class metatable to remove from registry"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Called automatically during mod hot reload\n-- Removes old class definitions from registry\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Added in initial implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"basic-inheritance",children:"Basic Inheritance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Base entity class\nlocal Entity = Class(function(self, x, y)\n    self.x = x or 0\n    self.y = y or 0\n    self.components = {}\nend)\n\nfunction Entity:AddComponent(name, component)\n    self.components[name] = component\n    component.inst = self\nend\n\n-- Living entity with health\nlocal Living = Class(Entity, function(self, x, y, health)\n    Entity._ctor(self, x, y)\n    self.health = health or 100\n    self.max_health = health or 100\nend)\n\nfunction Living:TakeDamage(amount)\n    self.health = self.health - amount\n    if self.health <= 0 then\n        self:Die()\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"property-validation",children:"Property Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local ValidatedCharacter = Class(function(self, name)\n    self.name = name\n    self._level = 1\n    self._health = 100\n    \n    -- Level validation (1-100)\n    addsetter(self, "level", function(self, value, old)\n        if type(value) ~= "number" then\n            error("Level must be a number")\n        end\n        value = math.max(1, math.min(100, math.floor(value)))\n        self._level = value\n        \n        -- Scale health with level\n        self.max_health = 100 + (value * 10)\n    end)\n    \n    -- Health validation\n    addsetter(self, "health", function(self, value, old)\n        value = math.max(0, math.min(value, self.max_health))\n        self._health = value\n        \n        if value <= 0 then\n            self:OnDeath()\n        end\n    end)\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"component-system",children:"Component System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Base component class\nlocal Component = Class(function(self)\n    self.inst = nil  -- Will be set when added to entity\nend)\n\n-- Health component\nlocal Health = Class(Component, function(self, max_health)\n    Component._ctor(self)\n    self.max_health = max_health or 100\n    self.current_health = self.max_health\nend)\n\nfunction Health:TakeDamage(amount)\n    self.current_health = math.max(0, self.current_health - amount)\n    if self.current_health <= 0 then\n        self.inst:PushEvent("death")\n    end\n    self.inst:PushEvent("healthdelta", {old = self.current_health + amount, new = self.current_health})\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The Class system uses several Lua metatable features:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"__index"})}),": For method lookup and property getters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"__newindex"})}),": For property setters and validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"__call"})}),": For constructor invocation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Weak references"}),": For memory-safe instance tracking"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"metatable-structure",children:"Metatable Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Class metatable provides inheritance chain\nlocal c = {}  -- Class table\nc._base = base_class  -- Parent class reference\nc.__index = c  -- Method lookup\nc._ctor = constructor  -- Constructor function\n\n-- Instance tracking (when enabled)\nClassTrackingTable[mt] = {}  -- Weak-keyed instance table\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"../components/",children:"Components"})}),": Component-based entity architecture built on Class system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"../prefabs.md",children:"Prefabs"})}),": Entity creation using Class-based components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"../entityscript.md",children:"EntityScript"})}),": Core entity functionality using Class inheritance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"../mods.md",children:"Mod System"})}),": Hot reloading support for class modifications"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"technical-notes",children:"Technical Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lua Version"}),": Compatible with Lua 5.1, not compatible with Lua 5.0"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Management"}),": Uses weak references for instance tracking to prevent memory leaks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Minimal overhead for method dispatch through metatable chains"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inheritance"}),": Single inheritance only, no multiple inheritance support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hot Reloading"}),": Full support for class redefinition during development"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"constructor-patterns",children:"Constructor Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Good: Clear parameter validation\nlocal Character = Class(function(self, name, health, level)\n    assert(type(name) == "string", "Name must be a string")\n    assert(type(health) == "number", "Health must be a number")\n    \n    self.name = name\n    self.health = math.max(1, health)\n    self.level = level or 1\nend)\n\n-- Good: Default parameter handling\nlocal Monster = Class(function(self, config)\n    config = config or {}\n    self.health = config.health or 100\n    self.damage = config.damage or 10\n    self.speed = config.speed or 1\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"inheritance-guidelines",children:"Inheritance Guidelines"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Good: Always call parent constructor\nlocal Derived = Class(Base, function(self, ...)\n    Base._ctor(self, ...)  -- Call parent first\n    -- Then initialize derived-specific properties\nend)\n\n-- Good: Override methods properly\nfunction Derived:SomeMethod(...)\n    -- Call parent method if needed\n    local result = Base.SomeMethod(self, ...)\n    \n    -- Add derived behavior\n    -- ... additional logic\n    \n    return result\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"property-management",children:"Property Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Good: Use setters for validation\nlocal ValidatedClass = Class(function(self)\n    self._private_value = 0\n    \n    addsetter(self, "value", function(self, new_val, old_val)\n        if type(new_val) ~= "number" then\n            error("Value must be a number")\n        end\n        self._private_value = math.max(0, new_val)\n    end)\nend)\n\n-- Good: Provide getter methods for computed properties\nfunction ValidatedClass:GetValue()\n    return self._private_value\nend\n\nfunction ValidatedClass:GetDisplayValue()\n    return string.format("%.2f", self._private_value)\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);