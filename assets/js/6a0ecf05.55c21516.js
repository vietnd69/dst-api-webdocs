"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6471],{1125:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/utils/table","title":"Table Utilities","description":"Lua table manipulation and processing functions for Don\'t Starve Together modding.","source":"@site/docs/api-vanilla/utils/table.md","sourceDirName":"api-vanilla/utils","slug":"/api-vanilla/utils/table","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/table","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"table","title":"Table Utilities","sidebar_position":4},"sidebar":"docs","previous":{"title":"String Utilities","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/string"},"next":{"title":"Math Utilities","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/math"}}');var i=t(4848),l=t(8453);const s={id:"table",title:"Table Utilities",sidebar_position:4},o="Table Utilities",r={},d=[{value:"Standard Table Functions",id:"standard-table-functions",level:2},{value:"Basic Operations",id:"basic-operations",level:3},{value:"Extended Table Functions",id:"extended-table-functions",level:2},{value:"Table Properties",id:"table-properties",level:3},{value:"Table Transformations",id:"table-transformations",level:3},{value:"Table Element Operations",id:"table-element-operations",level:3},{value:"Nested Table Operations",id:"nested-table-operations",level:3},{value:"Debug Functions",id:"debug-functions",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Working with Component Data",id:"working-with-component-data",level:3},{value:"Managing Collections",id:"managing-collections",level:3},{value:"Configuration and Data Storage",id:"configuration-and-data-storage",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"table-utilities",children:"Table Utilities"})}),"\n",(0,i.jsx)(n.p,{children:"Lua table manipulation and processing functions for Don't Starve Together modding."}),"\n",(0,i.jsx)(n.h2,{id:"standard-table-functions",children:"Standard Table Functions"}),"\n",(0,i.jsx)(n.p,{children:"These functions are part of the standard Lua table library:"}),"\n",(0,i.jsx)(n.h3,{id:"basic-operations",children:"Basic Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Insert an element into a table\ntable.insert(t, value)       -- Appends value to the end\ntable.insert(t, pos, value)  -- Inserts at position pos\n\n-- Remove an element from a table\ntable.remove(t)              -- Removes last element\ntable.remove(t, pos)         -- Removes element at position pos\n\n-- Sort a table\ntable.sort(t)                -- Sort with default comparison (<)\ntable.sort(t, compare_fn)    -- Sort with custom comparison function\n\n-- Concatenate table elements\ntable.concat(t)              -- Join all elements\ntable.concat(t, separator)   -- Join with separator\n"})}),"\n",(0,i.jsx)(n.h2,{id:"extended-table-functions",children:"Extended Table Functions"}),"\n",(0,i.jsx)(n.p,{children:"Don't Starve Together provides additional utility functions for working with tables:"}),"\n",(0,i.jsx)(n.h3,{id:"table-properties",children:"Table Properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get the number of elements in a table\nlocal count = table.count(t)\n\n-- Get the maximum numeric index\nlocal max_index = table.maxn(t)\n\n-- Get number of elements when used as an array\nlocal length = table.getn(t)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"table-transformations",children:"Table Transformations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get all keys from a table\nlocal keys = table.getkeys(t)\n\n-- Invert a table (swap keys and values)\nlocal inverted = table.invert(t)\n\n-- Reverse a table (array)\nlocal reversed = table.reverse(t)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"table-element-operations",children:"Table Element Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Remove a specific value from an array\ntable.removearrayvalue(t, value)\n\n-- Remove a specific value from any table\ntable.removetablevalue(t, value)\n\n-- Check if a table contains a value\nif table.contains(t, value) then\n    -- Table contains the value\nend\n\n-- Check if a table contains a key\nif table.containskey(t, key) then\n    -- Table contains the key\nend\n\n-- Find a key by its value\nlocal key = table.reverselookup(t, value)\n\n-- Check if two tables have identical keys\nif table.keysareidentical(t1, t2) then\n    -- Tables have the same keys\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"nested-table-operations",children:"Nested Table Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Access nested fields safely by string path\nlocal value = table.getfield(t, "path.to.field")\n\n-- Set nested fields by string path\ntable.setfield(t, "path.to.field", value)\n\n-- Find a field in a nested table\nlocal path = table.findfield(t, field_name)\n\n-- Find the path to a field in a nested table\nlocal path = table.findpath(t, field_name)\n\n-- Access nested fields with type checking\nlocal value = table.typecheckedgetfield(t, expected_type, "field1", "field2")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"debug-functions",children:"Debug Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get a string representation of a table (for debugging)\nlocal str = table.inspect(t)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"working-with-component-data",children:"Working with Component Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Store component configuration\nlocal config = {\n    health = 100,\n    damage = 10,\n    tags = {"monster", "hostile"}\n}\n\n-- Add tags\nfor _, tag in ipairs(config.tags) do\n    inst:AddTag(tag)\nend\n\n-- Check if entity has any hostile tag\nlocal hostile_tags = {"hostile", "monster", "epic"}\nfor _, tag in ipairs(hostile_tags) do\n    if inst:HasTag(tag) then\n        return true\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"managing-collections",children:"Managing Collections"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Keep track of all spawned entities\nlocal spawned_entities = {}\n\nlocal function RegisterEntity(entity)\n    table.insert(spawned_entities, entity)\n    entity:ListenForEvent("onremove", function()\n        table.removetablevalue(spawned_entities, entity)\n    end)\nend\n\n-- Find closest entity\nlocal function GetClosestEntity(position, max_dist)\n    local closest = nil\n    local closest_dist = max_dist or math.huge\n    \n    for _, entity in ipairs(spawned_entities) do\n        local dist = entity:GetDistanceSqToPoint(position)\n        if dist < closest_dist then\n            closest = entity\n            closest_dist = dist\n        end\n    end\n    \n    return closest\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-and-data-storage",children:"Configuration and Data Storage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Nested configuration\nlocal config = {\n    spawn = {\n        frequency = 0.1,\n        max_entities = 10\n    },\n    entity = {\n        health = 100,\n        speed = 4\n    }\n}\n\n-- Access with getfield\nlocal spawn_freq = table.getfield(config, "spawn.frequency")\nlocal max_health = table.getfield(config, "entity.health")\n\n-- Set with setfield\ntable.setfield(config, "spawn.max_entities", 20)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const i={},l=a.createContext(i);function s(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);