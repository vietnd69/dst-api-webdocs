"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2409],{3739:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"api-vanilla/examples/snippets/event-handling","title":"Event Handling Snippets","description":"This page provides reusable code snippets for handling events in Don\'t Starve Together.","source":"@site/docs/api-vanilla/examples/snippets/event-handling.md","sourceDirName":"api-vanilla/examples/snippets","slug":"/api-vanilla/examples/snippets/event-handling","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/event-handling","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"event-handling","title":"Event Handling Snippets","sidebar_position":2},"sidebar":"docs","previous":{"title":"Entity Spawning Snippets","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/entity-spawning"},"next":{"title":"Saving and Loading Snippets","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/saving-loading"}}');var i=t(4848),r=t(8453);const l={id:"event-handling",title:"Event Handling Snippets",sidebar_position:2},s="Event Handling Snippets",d={},o=[{value:"Basic Event Handling",id:"basic-event-handling",level:2},{value:"Listen for Entity Events",id:"listen-for-entity-events",level:3},{value:"Remove Event Listeners",id:"remove-event-listeners",level:3},{value:"World Events",id:"world-events",level:2},{value:"Listen for Season Changes",id:"listen-for-season-changes",level:3},{value:"Listen for Time of Day Changes",id:"listen-for-time-of-day-changes",level:3},{value:"Listen for Weather Events",id:"listen-for-weather-events",level:3},{value:"Player Events",id:"player-events",level:2},{value:"Listen for Player Health Changes",id:"listen-for-player-health-changes",level:3},{value:"Listen for Player Hunger Changes",id:"listen-for-player-hunger-changes",level:3},{value:"Listen for Player Sanity Changes",id:"listen-for-player-sanity-changes",level:3},{value:"Listen for Player Item Actions",id:"listen-for-player-item-actions",level:3},{value:"Combat Events",id:"combat-events",level:2},{value:"Listen for Entity Attacks",id:"listen-for-entity-attacks",level:3},{value:"Listen for Entity Death",id:"listen-for-entity-death",level:3},{value:"Inventory Events",id:"inventory-events",level:2},{value:"Listen for Item Pickup/Drop",id:"listen-for-item-pickupdrop",level:3},{value:"Listen for Equipment Changes",id:"listen-for-equipment-changes",level:3},{value:"Advanced Event Handling",id:"advanced-event-handling",level:2},{value:"Event Debouncing",id:"event-debouncing",level:3},{value:"Event Throttling",id:"event-throttling",level:3},{value:"Conditional Event Handling",id:"conditional-event-handling",level:3},{value:"Event Sequence Detection",id:"event-sequence-detection",level:3},{value:"Global Event Bus",id:"global-event-bus",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"event-handling-snippets",children:"Event Handling Snippets"})}),"\n",(0,i.jsx)(e.p,{children:"This page provides reusable code snippets for handling events in Don't Starve Together."}),"\n",(0,i.jsx)(e.h2,{id:"basic-event-handling",children:"Basic Event Handling"}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-entity-events",children:"Listen for Entity Events"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for an event on an entity\nlocal function ListenForEntityEvent(entity, event_name, handler)\n    if entity then\n        entity:ListenForEvent(event_name, handler)\n    end\nend\n\n-- Usage\nListenForEntityEvent(ThePlayer, "death", function(inst)\n    print("Player died!")\nend)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"remove-event-listeners",children:"Remove Event Listeners"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for an event with the ability to remove the listener\nlocal function CreateRemovableListener(entity, event_name, handler)\n    if entity then\n        local function wrapped_handler(...)\n            handler(...)\n        end\n        \n        entity:ListenForEvent(event_name, wrapped_handler)\n        \n        -- Return a function that can remove this listener\n        return function()\n            entity:RemoveEventCallback(event_name, wrapped_handler)\n        end\n    end\n    return function() end -- Return empty function if entity is nil\nend\n\n-- Usage\nlocal remove_listener = CreateRemovableListener(ThePlayer, "attacked", function(inst, data)\n    print("Player was attacked by " .. tostring(data.attacker))\nend)\n\n-- Later, to remove the listener\nremove_listener()\n'})}),"\n",(0,i.jsx)(e.h2,{id:"world-events",children:"World Events"}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-season-changes",children:"Listen for Season Changes"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for season changes\nlocal function OnSeasonChange(season_handler)\n    TheWorld:ListenForEvent("seasonchange", function(world, data)\n        local season = data.season\n        season_handler(season)\n    end)\nend\n\n-- Usage\nOnSeasonChange(function(season)\n    if season == "winter" then\n        print("Winter is coming!")\n    elseif season == "summer" then\n        print("Summer is here!")\n    elseif season == "autumn" then\n        print("Autumn leaves are falling")\n    elseif season == "spring" then\n        print("Spring has sprung!")\n    end\nend)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-time-of-day-changes",children:"Listen for Time of Day Changes"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for time of day changes\nlocal function OnTimeOfDayChange(day_handler, dusk_handler, night_handler)\n    local function CheckTime(inst, phase)\n        if phase == "day" and day_handler then\n            day_handler()\n        elseif phase == "dusk" and dusk_handler then\n            dusk_handler()\n        elseif phase == "night" and night_handler then\n            night_handler()\n        end\n    end\n    \n    TheWorld:ListenForEvent("phasechanged", function(inst, phase)\n        CheckTime(inst, phase)\n    end)\n    \n    -- Also check immediately\n    CheckTime(TheWorld, TheWorld.state.phase)\nend\n\n-- Usage\nOnTimeOfDayChange(\n    function() print("It\'s daytime!") end,\n    function() print("It\'s dusk!") end,\n    function() print("It\'s night!") end\n)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-weather-events",children:"Listen for Weather Events"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for weather events\nlocal function OnWeatherChange(handlers)\n    -- Lightning\n    if handlers.lightning then\n        TheWorld:ListenForEvent("lightning", handlers.lightning)\n    end\n    \n    -- Start/Stop Rain\n    if handlers.startrain then\n        TheWorld:ListenForEvent("startrain", handlers.startrain)\n    end\n    \n    if handlers.stoprain then\n        TheWorld:ListenForEvent("stoprain", handlers.stoprain)\n    end\n    \n    -- Start/Stop Snow\n    if handlers.startsnow then\n        TheWorld:ListenForEvent("startsnow", handlers.startsnow)\n    end\n    \n    if handlers.stopsnow then\n        TheWorld:ListenForEvent("stopsnow", handlers.stopsnow)\n    end\n    \n    -- Start/Stop Sandstorm (Desert)\n    if handlers.sandstormchanged then\n        TheWorld:ListenForEvent("sandstormchanged", handlers.sandstormchanged)\n    end\nend\n\n-- Usage\nOnWeatherChange({\n    lightning = function() print("Lightning struck!") end,\n    startrain = function() print("It started raining") end,\n    stoprain = function() print("Rain stopped") end,\n    startsnow = function() print("It started snowing") end,\n    stopsnow = function() print("Snow stopped") end,\n    sandstormchanged = function(world, data) \n        print("Sandstorm " .. (data.sandstorm and "started" or "stopped"))\n    end\n})\n'})}),"\n",(0,i.jsx)(e.h2,{id:"player-events",children:"Player Events"}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-player-health-changes",children:"Listen for Player Health Changes"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for player health changes\nlocal function OnPlayerHealthChange(player, threshold_percent, low_handler, high_handler)\n    if player and player.components.health then\n        player:ListenForEvent("healthdelta", function(inst, data)\n            local percent = player.components.health:GetPercent()\n            \n            if percent <= threshold_percent and low_handler then\n                low_handler(percent, data)\n            elseif percent > threshold_percent and high_handler then\n                high_handler(percent, data)\n            end\n        end)\n    end\nend\n\n-- Usage\nOnPlayerHealthChange(ThePlayer, 0.3,\n    function(percent) print("Health low: " .. math.floor(percent * 100) .. "%") end,\n    function(percent) print("Health ok: " .. math.floor(percent * 100) .. "%") end\n)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-player-hunger-changes",children:"Listen for Player Hunger Changes"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for player hunger changes\nlocal function OnPlayerHungerChange(player, threshold_percent, low_handler, high_handler)\n    if player and player.components.hunger then\n        player:ListenForEvent("hungerdelta", function(inst, data)\n            local percent = player.components.hunger:GetPercent()\n            \n            if percent <= threshold_percent and low_handler then\n                low_handler(percent, data)\n            elseif percent > threshold_percent and high_handler then\n                high_handler(percent, data)\n            end\n        end)\n    end\nend\n\n-- Usage\nOnPlayerHungerChange(ThePlayer, 0.25,\n    function(percent) print("Getting hungry: " .. math.floor(percent * 100) .. "%") end,\n    function(percent) print("Hunger ok: " .. math.floor(percent * 100) .. "%") end\n)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-player-sanity-changes",children:"Listen for Player Sanity Changes"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for player sanity changes\nlocal function OnPlayerSanityChange(player, threshold_percent, low_handler, high_handler)\n    if player and player.components.sanity then\n        player:ListenForEvent("sanitydelta", function(inst, data)\n            local percent = player.components.sanity:GetPercent()\n            \n            if percent <= threshold_percent and low_handler then\n                low_handler(percent, data)\n            elseif percent > threshold_percent and high_handler then\n                high_handler(percent, data)\n            end\n        end)\n    end\nend\n\n-- Usage\nOnPlayerSanityChange(ThePlayer, 0.4,\n    function(percent) print("Going insane: " .. math.floor(percent * 100) .. "%") end,\n    function(percent) print("Sanity ok: " .. math.floor(percent * 100) .. "%") end\n)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-player-item-actions",children:"Listen for Player Item Actions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for player item actions\nlocal function OnPlayerItemAction(player, action_type, handler)\n    if player then\n        player:ListenForEvent("performaction", function(inst, data)\n            if data and data.action and data.action.id == action_type then\n                handler(data.action, data.target)\n            end\n        end)\n    end\nend\n\n-- Usage\nOnPlayerItemAction(ThePlayer, ACTIONS.CHOP.id, function(action, target)\n    print("Player chopped " .. tostring(target))\nend)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"combat-events",children:"Combat Events"}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-entity-attacks",children:"Listen for Entity Attacks"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for when an entity attacks or is attacked\nlocal function OnEntityCombat(entity, on_attack_handler, on_attacked_handler)\n    if entity then\n        -- When this entity attacks something\n        if on_attack_handler then\n            entity:ListenForEvent("onhitother", function(inst, data)\n                on_attack_handler(data.target, data.damage, data.weapon)\n            end)\n        end\n        \n        -- When this entity is attacked\n        if on_attacked_handler then\n            entity:ListenForEvent("attacked", function(inst, data)\n                on_attacked_handler(data.attacker, data.damage, data.weapon)\n            end)\n        end\n    end\nend\n\n-- Usage\nOnEntityCombat(ThePlayer,\n    function(target, damage) print("Player attacked " .. tostring(target) .. " for " .. tostring(damage) .. " damage") end,\n    function(attacker, damage) print("Player was attacked by " .. tostring(attacker) .. " for " .. tostring(damage) .. " damage") end\n)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-entity-death",children:"Listen for Entity Death"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for entity death\nlocal function OnEntityDeath(entity, handler)\n    if entity then\n        entity:ListenForEvent("death", function(inst, data)\n            local killer = data and data.afflicter or nil\n            handler(killer)\n        end)\n    end\nend\n\n-- Usage\nOnEntityDeath(ThePlayer, function(killer)\n    if killer then\n        print("Player was killed by " .. tostring(killer))\n    else\n        print("Player died")\n    end\nend)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"inventory-events",children:"Inventory Events"}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-item-pickupdrop",children:"Listen for Item Pickup/Drop"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for item pickup and drop events\nlocal function OnInventoryChange(player, item_add_handler, item_lose_handler)\n    if player and player.components.inventory then\n        if item_add_handler then\n            player:ListenForEvent("itemget", function(inst, data)\n                item_add_handler(data.item, data.slot)\n            end)\n        end\n        \n        if item_lose_handler then\n            player:ListenForEvent("itemlose", function(inst, data)\n                item_lose_handler(data.prev_item)\n            end)\n        end\n    end\nend\n\n-- Usage\nOnInventoryChange(ThePlayer,\n    function(item) print("Picked up " .. tostring(item.prefab)) end,\n    function(item) print("Lost " .. tostring(item.prefab)) end\n)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"listen-for-equipment-changes",children:"Listen for Equipment Changes"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Listen for equipment changes\nlocal function OnEquipmentChange(player, equip_handler, unequip_handler)\n    if player then\n        if equip_handler then\n            player:ListenForEvent("equip", function(inst, data)\n                equip_handler(data.item, data.eslot)\n            end)\n        end\n        \n        if unequip_handler then\n            player:ListenForEvent("unequip", function(inst, data)\n                unequip_handler(data.item, data.eslot)\n            end)\n        end\n    end\nend\n\n-- Usage\nOnEquipmentChange(ThePlayer,\n    function(item, slot) print("Equipped " .. tostring(item.prefab) .. " in " .. tostring(slot)) end,\n    function(item, slot) print("Unequipped " .. tostring(item.prefab) .. " from " .. tostring(slot)) end\n)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"advanced-event-handling",children:"Advanced Event Handling"}),"\n",(0,i.jsx)(e.h3,{id:"event-debouncing",children:"Event Debouncing"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Create a debounced event handler that only triggers once within a time period\nlocal function CreateDebouncedHandler(delay, handler)\n    local timer = nil\n    \n    return function(...)\n        if timer then\n            timer:Cancel()\n        end\n        \n        local args = {...}\n        timer = TheWorld:DoTaskInTime(delay, function()\n            handler(unpack(args))\n            timer = nil\n        end)\n    end\nend\n\n-- Usage\nlocal debounced_handler = CreateDebouncedHandler(1, function()\n    print("This will only print once per second no matter how often triggered")\nend)\n\n-- Can be called multiple times but handler only executes once per second\nThePlayer:ListenForEvent("hungerdelta", debounced_handler)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"event-throttling",children:"Event Throttling"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Create a throttled event handler that only triggers at most once per time period\nlocal function CreateThrottledHandler(delay, handler)\n    local last_time = 0\n    \n    return function(...)\n        local current_time = GetTime()\n        if current_time - last_time >= delay then\n            last_time = current_time\n            handler(...)\n        end\n    end\nend\n\n-- Usage\nlocal throttled_handler = CreateThrottledHandler(5, function()\n    print("This will print at most once every 5 seconds")\nend)\n\n-- Can be called frequently but handler only executes once every 5 seconds at most\nThePlayer:ListenForEvent("sanitydelta", throttled_handler)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"conditional-event-handling",children:"Conditional Event Handling"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Create an event handler that only triggers when a condition is met\nlocal function CreateConditionalHandler(condition_fn, handler)\n    return function(...)\n        if condition_fn(...) then\n            handler(...)\n        end\n    end\nend\n\n-- Usage\nlocal night_only_handler = CreateConditionalHandler(\n    function() return TheWorld.state.isnight end,\n    function() print("This only happens at night") end\n)\n\n-- Handler only executes when it\'s night\nTheWorld:ListenForEvent("phasechanged", night_only_handler)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"event-sequence-detection",children:"Event Sequence Detection"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Detect a sequence of events\nlocal function DetectEventSequence(entity, events, timeout, success_handler)\n    local current_step = 1\n    local timer = nil\n    \n    local function reset_sequence()\n        current_step = 1\n        if timer then\n            timer:Cancel()\n            timer = nil\n        end\n    end\n    \n    local function setup_next_step()\n        if current_step <= #events then\n            local event_info = events[current_step]\n            \n            entity:ListenForEvent(event_info.name, function(inst, data)\n                if event_info.condition == nil or event_info.condition(inst, data) then\n                    -- Remove this listener\n                    entity:RemoveEventCallback(event_info.name, setup_next_step)\n                    \n                    -- Move to next step\n                    current_step = current_step + 1\n                    \n                    -- Reset timer\n                    if timer then\n                        timer:Cancel()\n                    end\n                    \n                    -- If we completed the sequence\n                    if current_step > #events then\n                        success_handler()\n                        reset_sequence()\n                    else\n                        -- Set timeout for next step\n                        timer = TheWorld:DoTaskInTime(timeout, reset_sequence)\n                        setup_next_step()\n                    end\n                end\n            end)\n        end\n    end\n    \n    setup_next_step()\n    \n    -- Return a function to cancel the sequence detection\n    return reset_sequence\nend\n\n-- Usage: Detect when player chops a tree then mines a rock within 10 seconds\nlocal cancel_detection = DetectEventSequence(ThePlayer, \n    {\n        {name = "performaction", condition = function(inst, data) \n            return data.action and data.action.id == ACTIONS.CHOP.id \n        end},\n        {name = "performaction", condition = function(inst, data) \n            return data.action and data.action.id == ACTIONS.MINE.id \n        end}\n    },\n    10,\n    function()\n        print("Player chopped a tree then mined a rock within 10 seconds!")\n    }\n)\n\n-- To cancel the detection\n-- cancel_detection()\n'})}),"\n",(0,i.jsx)(e.h2,{id:"global-event-bus",children:"Global Event Bus"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Create a simple event bus for global communication\nlocal EventBus = {\n    listeners = {}\n}\n\n-- Subscribe to an event\nfunction EventBus:Subscribe(event_name, listener)\n    self.listeners[event_name] = self.listeners[event_name] or {}\n    table.insert(self.listeners[event_name], listener)\n    \n    -- Return unsubscribe function\n    return function()\n        self:Unsubscribe(event_name, listener)\n    end\nend\n\n-- Unsubscribe from an event\nfunction EventBus:Unsubscribe(event_name, listener)\n    if self.listeners[event_name] then\n        for i, l in ipairs(self.listeners[event_name]) do\n            if l == listener then\n                table.remove(self.listeners[event_name], i)\n                break\n            end\n        end\n    end\nend\n\n-- Publish an event\nfunction EventBus:Publish(event_name, ...)\n    if self.listeners[event_name] then\n        for _, listener in ipairs(self.listeners[event_name]) do\n            listener(...)\n        end\n    end\nend\n\n-- Usage\nlocal unsubscribe = EventBus:Subscribe("custom_event", function(message)\n    print("Received: " .. message)\nend)\n\n-- Trigger the event\nEventBus:Publish("custom_event", "Hello World!")\n\n-- Unsubscribe when no longer needed\n-- unsubscribe()\n'})}),"\n",(0,i.jsx)(e.p,{children:"These snippets provide a foundation for handling various events in Don't Starve Together mods. Adapt them to your specific needs and combine them for more complex event handling behaviors."})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>s});var a=t(6540);const i={},r=a.createContext(i);function l(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);