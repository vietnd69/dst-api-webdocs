"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9735],{833:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/core-systems/network-system","title":"Network System","description":"The Network System in Don\'t Starve Together manages multiplayer communication, ensuring game state is properly synchronized between the server and all connected clients.","source":"@site/docs/api-vanilla/core-systems/network-system.md","sourceDirName":"api-vanilla/core-systems","slug":"/api-vanilla/core-systems/network-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core-systems/network-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"network-system","title":"Network System","sidebar_position":5},"sidebar":"docs","previous":{"title":"State Graph System","permalink":"/dst-api-webdocs/docs/api-vanilla/core-systems/stategraph-system"},"next":{"title":"Entity Framework","permalink":"/dst-api-webdocs/docs/category/entity-framework"}}');var s=t(4848),r=t(8453);const l={id:"network-system",title:"Network System",sidebar_position:5},o="Network System",a={},c=[{value:"Client-Server Architecture",id:"client-server-architecture",level:2},{value:"Networked Entities",id:"networked-entities",level:2},{value:"Entity Replication",id:"entity-replication",level:3},{value:"Network Variables",id:"network-variables",level:2},{value:"Component Replication",id:"component-replication",level:2},{value:"Remote Procedure Calls (RPCs)",id:"remote-procedure-calls-rpcs",level:2},{value:"Authority Checking",id:"authority-checking",level:2},{value:"Network Events",id:"network-events",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"network-system",children:"Network System"})}),"\n",(0,s.jsx)(n.p,{children:"The Network System in Don't Starve Together manages multiplayer communication, ensuring game state is properly synchronized between the server and all connected clients."}),"\n",(0,s.jsx)(n.h2,{id:"client-server-architecture",children:"Client-Server Architecture"}),"\n",(0,s.jsx)(n.p,{children:"DST uses a client-server architecture where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server"}),": Holds the authoritative game state and runs all game logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clients"}),": Receive updates from the server and send player inputs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dedicated Server"}),": A server-only instance that doesn't render the game"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Understanding this separation is crucial for creating mods that work correctly in multiplayer."}),"\n",(0,s.jsx)(n.h2,{id:"networked-entities",children:"Networked Entities"}),"\n",(0,s.jsx)(n.p,{children:"In multiplayer, entities exist in two forms:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Master Entity"})," (server-side): Contains all components and logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client Entity"})," (client-side): Contains visual components and replicated data"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"entity-replication",children:"Entity Replication"}),"\n",(0,s.jsx)(n.p,{children:"When creating networked entities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function fn()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    \n    -- Add network component - required for multiplayer\n    inst.entity:AddNetwork()\n    \n    -- Initialize client-side components and properties\n    inst.AnimState:SetBank("myentity")\n    inst.AnimState:SetBuild("myentity")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Mark entity as pristine (finished client setup)\n    inst.entity:SetPristine()\n    \n    -- Return early for client instances\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add server-only components\n    inst:AddComponent("health")\n    inst:AddComponent("combat")\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"network-variables",children:"Network Variables"}),"\n",(0,s.jsx)(n.p,{children:"Network variables are special variables that automatically synchronize between server and clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In component initialization\nfunction MyComponent:Init(inst)\n    self.inst = inst\n    \n    -- Define network variables with:\n    -- 1. Entity GUID\n    -- 2. Network path\n    -- 3. Dirty event name\n    self.value = net_int(inst.GUID, "mycomponent.value", "valuedirty")\n    self.active = net_bool(inst.GUID, "mycomponent.active", "activedirty")\n    self.name = net_string(inst.GUID, "mycomponent.name", "namedirty")\n    self.target = net_entity(inst.GUID, "mycomponent.target", "targetdirty")\n}\n\n-- Setter function that works on server\nfunction MyComponent:SetValue(val)\n    if TheWorld.ismastersim then\n        self.value:set(val)  -- This triggers network synchronization\n    end\nend\n\n-- Getter function that works on both server and client\nfunction MyComponent:GetValue()\n    return self.value:value()\nend\n'})}),"\n",(0,s.jsx)(n.p,{children:"Available network variable types include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_byte"}),": 8-bit integer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_shortint"}),": 16-bit integer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_int"}),": 32-bit integer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_uint"}),": Unsigned 32-bit integer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_float"}),": Floating-point number"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_string"}),": String"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_bool"}),": Boolean"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_hash"}),": Hash value"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_entity"}),": Entity reference"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"component-replication",children:"Component Replication"}),"\n",(0,s.jsx)(n.p,{children:"For components that need client-side functionality, create replica components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Server component (components/mycomponent.lua)\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self.value = 0\n    self.netvalue = net_int(inst.GUID, "mycomponent.value", "valuedirty")\nend)\n\nfunction MyComponent:SetValue(val)\n    self.value = val\n    self.netvalue:set(val)\nend\n\n-- Client replica (components/mycomponent_replica.lua)\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self._value = net_int(inst.GUID, "mycomponent.value", "valuedirty")\n    \n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("valuedirty", function()\n            -- React to value changes on client\n            local val = self:GetValue()\n            -- Update visual effects, play sounds, etc.\n        end)\n    end\nend)\n\nfunction MyComponent:GetValue()\n    return self._value:value()\nend\n'})}),"\n",(0,s.jsx)(n.p,{children:"Register replicated components in your mod:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAddReplicableComponent("mycomponent")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"remote-procedure-calls-rpcs",children:"Remote Procedure Calls (RPCs)"}),"\n",(0,s.jsx)(n.p,{children:"RPCs allow you to send commands between client and server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define RPC handler in modmain.lua\nAddModRPCHandler("MyMod", "DoAction", function(player, target, value)\n    -- This runs on the server when called from client\n    print(player.name .. " requested action on " .. target.prefab)\n    \n    -- Perform action with server authority\n    if target.components.mycomponent then\n        target.components.mycomponent:DoSomething(value)\n    end\nend)\n\n-- Call the RPC from client to server\nSendModRPCToServer(MOD_RPC.MyMod.DoAction, TheInput:GetWorldEntityUnderMouse(), 42)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"authority-checking",children:"Authority Checking"}),"\n",(0,s.jsx)(n.p,{children:"Always check for server authority before modifying game state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Only modify game state on the server\nif TheWorld.ismastersim then\n    inst.components.health:SetMaxHealth(100)\n    inst.components.combat:SetDefaultDamage(10)\nend\n\n-- Read-only operations are safe on client\nlocal health_percent = inst.components.health:GetPercent()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"network-events",children:"Network Events"}),"\n",(0,s.jsx)(n.p,{children:"Network variables trigger events when their values change:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Listen for network variable changes (usually on client)\ninst:ListenForEvent("valuedirty", function()\n    local current_value = self._value:value()\n    -- Update UI or visuals based on new value\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.p,{children:"When working with the network system:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimize Network Traffic"}),": Only synchronize essential data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check Authority"}),": Always check ",(0,s.jsx)(n.code,{children:"TheWorld.ismastersim"})," before modifying game state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Efficient Types"}),": Choose the smallest network variable type that fits your needs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Updates"}),": Group related updates to minimize network messages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create Proper Replicas"}),": For complex components, create dedicated replica components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validate Client Input"}),": Always validate data received from clients on the server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test in Multiplayer"}),": Regularly test your mod with multiple clients to catch networking issues"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);