"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8884],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const s={},d=i.createContext(s);function l(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(d.Provider,{value:n},e.children)}},9073:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/components/edible","title":"Edible","description":"The Edible component defines the properties of items that can be eaten. It manages food values, spoilage effects, and special food effects.","source":"@site/docs/api-vanilla/components/edible.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/edible","permalink":"/dst-api-webdocs/docs/api-vanilla/components/edible","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":22,"frontMatter":{"id":"edible","title":"Edible","sidebar_position":22},"sidebar":"docs","previous":{"title":"Eater","permalink":"/dst-api-webdocs/docs/api-vanilla/components/eater"},"next":{"title":"Equippable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/equippable"}}');var s=t(4848),d=t(8453);const l={id:"edible",title:"Edible",sidebar_position:22},o="Edible Component",r={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Food Types",id:"food-types",level:2},{value:"Food States",id:"food-states",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"See also",id:"see-also",level:2},{value:"Example: Creating an Edible Food Item",id:"example-creating-an-edible-food-item",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"edible-component",children:"Edible Component"})}),"\n",(0,s.jsx)(n.p,{children:"The Edible component defines the properties of items that can be eaten. It manages food values, spoilage effects, and special food effects."}),"\n",(0,s.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add an edible component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("edible")\n\n-- Configure the edible component\nlocal edible = entity.components.edible\nedible:SetHealth(10)\nedible:SetHunger(20)\nedible:SetSanity(5)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"healthvalue"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Health restored when eaten"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"hungervalue"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Hunger restored when eaten"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sanityvalue"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Sanity restored when eaten"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"foodtype"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Type of food (MEAT, VEGGIE, GENERIC, etc.)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"secondaryfoodtype"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"Secondary food classification"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"foodstate"})}),(0,s.jsx)(n.td,{children:"String"}),(0,s.jsx)(n.td,{children:"State of the food (FRESH, STALE, SPOILED)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"oneaten"})}),(0,s.jsx)(n.td,{children:"Function"}),(0,s.jsx)(n.td,{children:"Function called when eaten"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"temperaturedelta"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Temperature change when eaten"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"temperatureduration"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Duration of temperature effect"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stale_hunger"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Hunger value when stale"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stale_health"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Health value when stale"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spoiled_hunger"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Hunger value when spoiled"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spoiled_health"})}),(0,s.jsx)(n.td,{children:"Number"}),(0,s.jsx)(n.td,{children:"Health value when spoiled"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Set food values\nedible:SetHealth(5) -- Health restored\nedible:SetHunger(25) -- Hunger restored\nedible:SetSanity(-10) -- Sanity effect (negative for sanity loss)\n\n-- Set food type\nedible:SetFoodType(FOODTYPE.MEAT)\n\n-- Set temperature effects\nedible:SetTemperature(10, 120) -- +10\xb0C for 120 seconds\n\n-- Get current food values based on freshness\nlocal health, hunger, sanity = edible:GetHealth(), edible:GetHunger(), edible:GetSanity()\n\n-- Set callback for when eaten\nedible:SetOnEatenFn(function(inst, eater)\n    -- Do something when this food is eaten\n    print(eater.prefab .. " ate " .. inst.prefab)\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"food-types",children:"Food Types"}),"\n",(0,s.jsx)(n.p,{children:"Common food types include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FOODTYPE.MEAT"})," - Meat items"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FOODTYPE.VEGGIE"})," - Vegetables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FOODTYPE.FRUIT"})," - Fruits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FOODTYPE.GENERIC"})," - Generic edibles"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FOODTYPE.GOODIES"})," - Special treats"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FOODTYPE.SEEDS"})," - Seeds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FOODTYPE.MONTSTER"})," - Monster foods"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FOODTYPE.INSECT"})," - Insect foods"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"food-states",children:"Food States"}),"\n",(0,s.jsx)(n.p,{children:"Food can be in different states, which affect its values:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fresh"})," - Full food values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stale"})," - Reduced food values (typically 50-75% of fresh values)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spoiled"})," - Significantly reduced food values (typically 25-50% of fresh values)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,s.jsx)(n.p,{children:"The Edible component often works with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Perishable"})," - For food spoilage mechanics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Inventoryitem"})," - For storing food in inventory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Stackable"})," - For stacking identical food items"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Eater"})," - The component that consumes edible items"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FoodMemory"})," - For tracking eaten food preferences"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/eater",children:"Eater Component"})," - For entities that can consume food"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/perishable",children:"Perishable Component"})," - For food spoilage mechanics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/cookable",children:"Cookable Component"})," - For food that can be cooked"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/stackable",children:"Stackable Component"})," - For stacking food items"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/health",children:"Health Component"})," - For health effects from food"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/hunger",children:"Hunger Component"})," - For hunger effects from food"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/sanity",children:"Sanity Component"})," - For sanity effects from food"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-creating-an-edible-food-item",children:"Example: Creating an Edible Food Item"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function MakeFood()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Make it an inventory item\n    inst:AddComponent("inventoryitem")\n    \n    -- Make it edible\n    inst:AddComponent("edible")\n    local edible = inst.components.edible\n    edible:SetHealth(1)\n    edible:SetHunger(12.5)\n    edible:SetSanity(0)\n    edible:SetFoodType(FOODTYPE.VEGGIE)\n    \n    -- Make it perishable\n    inst:AddComponent("perishable")\n    inst.components.perishable:SetPerishTime(TUNING.PERISH_FAST)\n    inst.components.perishable:StartPerishing()\n    \n    -- Add a special effect when eaten\n    edible:SetOnEatenFn(function(inst, eater)\n        if eater.components.temperature ~= nil then\n            -- Cool down the eater slightly\n            eater.components.temperature:SetTemperatureInBelly(-5, 120)\n        end\n    end)\n    \n    return inst\nend \n'})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);