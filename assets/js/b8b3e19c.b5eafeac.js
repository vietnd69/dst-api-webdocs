"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[270],{1341:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/world/world-overview","title":"World API Overview","description":"APIs for world generation, management and manipulation in Don\'t Starve Together.","source":"@site/docs/api-vanilla/world/index.md","sourceDirName":"api-vanilla/world","slug":"/api/world","permalink":"/dst-api-webdocs/docs/api/world","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"world-overview","title":"World API Overview","sidebar_position":1,"slug":"/api/world"}}');var r=s(4848),t=s(8453);const l={id:"world-overview",title:"World API Overview",sidebar_position:1,slug:"/api/world"},o="World API Overview",a={},d=[{value:"Core Components",id:"core-components",level:2},{value:"Map Generation",id:"map-generation",level:3},{value:"Seasonal System",id:"seasonal-system",level:3},{value:"World Settings",id:"world-settings",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Accessing World Components",id:"accessing-world-components",level:3},{value:"Listening for World Events",id:"listening-for-world-events",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Shard Management",id:"shard-management",level:3},{value:"World State Persistence",id:"world-state-persistence",level:3},{value:"Related Systems",id:"related-systems",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"world-api-overview",children:"World API Overview"})}),"\n",(0,r.jsx)(n.p,{children:"APIs for world generation, management and manipulation in Don't Starve Together."}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.p,{children:"The World API consists of several interconnected systems that handle different aspects of the game world:"}),"\n",(0,r.jsx)(n.h3,{id:"map-generation",children:"Map Generation"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/world/map",children:"Map API"})," provides functionality for generating and manipulating the physical terrain of the game world. It handles:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Terrain types and tile definitions"}),"\n",(0,r.jsx)(n.li,{children:"Biome placement and distributions"}),"\n",(0,r.jsx)(n.li,{children:"Procedural generation algorithms"}),"\n",(0,r.jsx)(n.li,{children:"World layout and structures"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"seasonal-system",children:"Seasonal System"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/world/seasons",children:"Seasons API"})," controls the cyclical nature of the game world, including:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Season transitions and durations"}),"\n",(0,r.jsx)(n.li,{children:"Day/night cycle adjustments per season"}),"\n",(0,r.jsx)(n.li,{children:"Environmental effects (temperature, precipitation)"}),"\n",(0,r.jsx)(n.li,{children:"Season-specific events and mechanics"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"world-settings",children:"World Settings"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/world/worldsettings",children:"World Settings API"})," provides customization options for various world behaviors:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entity spawn rates and regeneration times"}),"\n",(0,r.jsx)(n.li,{children:"Difficulty settings and scaling"}),"\n",(0,r.jsx)(n.li,{children:"Resource availability and distribution"}),"\n",(0,r.jsx)(n.li,{children:"Event timing and frequency"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"accessing-world-components",children:"Accessing World Components"}),"\n",(0,r.jsxs)(n.p,{children:["Most world systems can be accessed through ",(0,r.jsx)(n.code,{children:"TheWorld"})," global object:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Access map functions\nlocal is_land = TheWorld.Map:IsLand(x, y, z)\n\n-- Access season information\nlocal current_season = TheWorld.components.seasons:GetSeason()\n\n-- Access world settings\nlocal worldsettingstimer = TheWorld.components.worldsettingstimer\n"})}),"\n",(0,r.jsx)(n.h3,{id:"listening-for-world-events",children:"Listening for World Events"}),"\n",(0,r.jsx)(n.p,{children:"Components can register for world events to respond to changes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Listen for season changes\ninst:ListenForEvent("seasonchange", OnSeasonChange, TheWorld)\n\n-- Listen for day/night transitions\ninst:ListenForEvent("cycleschanged", OnCycleChanged, TheWorld)\n\n-- Listen for weather events\ninst:ListenForEvent("ms_stormlevel", OnStormLevelChanged, TheWorld)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsx)(n.h3,{id:"shard-management",children:"Shard Management"}),"\n",(0,r.jsx)(n.p,{children:"For multi-shard worlds (connected server instances), the World API provides:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Synchronization of world states across shards"}),"\n",(0,r.jsx)(n.li,{children:"Shard-specific world generation parameters"}),"\n",(0,r.jsx)(n.li,{children:"Cross-shard entity and player migration"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"world-state-persistence",children:"World State Persistence"}),"\n",(0,r.jsx)(n.p,{children:"The world state is persisted between game sessions through:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"World save data serialization"}),"\n",(0,r.jsx)(n.li,{children:"Component-specific save/load methods"}),"\n",(0,r.jsx)(n.li,{children:"Data migration during version updates"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,r.jsx)(n.p,{children:"The World API interacts with several other core systems:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entity System"}),": Spawning and managing entities in the world"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Player Systems"}),": Handling player interactions with the world"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network System"}),": Synchronizing world state across clients"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);