"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3655],{4689:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api-vanilla/global-objects/thefrontend","title":"TheFrontEnd","description":"TheFrontEnd is the global object that controls the game\'s user interface and screens in Don\'t Starve Together. It handles screen transitions, UI state management, popups, and other interface-related functionality.","source":"@site/docs/api-vanilla/global-objects/thefrontend.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/thefrontend","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/thefrontend","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"thefrontend","title":"TheFrontEnd","sidebar_position":9}}');var r=t(4848),a=t(8453);const o={id:"thefrontend",title:"TheFrontEnd",sidebar_position:9},i="TheFrontEnd",l={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Screen Management",id:"screen-management",level:2},{value:"Popup Management",id:"popup-management",level:2},{value:"Menu Navigation",id:"menu-navigation",level:2},{value:"UI Components and Widgets",id:"ui-components-and-widgets",level:2},{value:"Fade Effects and Transitions",id:"fade-effects-and-transitions",level:2},{value:"Event Handling",id:"event-handling",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Integration with Other Global Objects",id:"integration-with-other-global-objects",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"thefrontend",children:"TheFrontEnd"})}),"\n",(0,r.jsx)(n.p,{children:"TheFrontEnd is the global object that controls the game's user interface and screens in Don't Starve Together. It handles screen transitions, UI state management, popups, and other interface-related functionality."}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get the current screen\nlocal current_screen = TheFrontEnd:GetActiveScreen()\n\n-- Get the screen below the current one\nlocal previous_screen = TheFrontEnd:GetScreenUnderTop()\n\n-- Check if a specific screen is active\nlocal is_character_select = TheFrontEnd:GetActiveScreen().name == "CharacterSelectScreen"\n\n-- Check if a popup is currently displayed\nlocal has_popup = TheFrontEnd:IsDisplayingPopup()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"screen-management",children:"Screen Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Push a new screen onto the screen stack\nlocal new_screen = MyCoolScreen()\nTheFrontEnd:PushScreen(new_screen)\n\n-- Pop the top screen off the stack\nTheFrontEnd:PopScreen()\n\n-- Pop all screens until you reach the main menu\nTheFrontEnd:PopAllScreens()\n\n-- Replace the current screen with a new one\nTheFrontEnd:ReplaceScreenWithOneOf({new_screen})\n\n-- Quickly transition to a new screen\nTheFrontEnd:GoToScreen(new_screen)\n\n-- Get the number of screens in the stack\nlocal screen_count = TheFrontEnd:GetScreenStackSize()\n\n-- Hide all screens (keeps them in the stack but doesn't render them)\nTheFrontEnd:HideAllScreens()\n\n-- Show all screens after hiding them\nTheFrontEnd:ShowAllScreens()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"popup-management",children:"Popup Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Show a basic popup\nlocal popup = PopupDialogScreen(title, body_text, button_callbacks)\nTheFrontEnd:PushScreen(popup)\n\n-- Display a custom confirmation dialog\nlocal dialog = PopupDialogScreen(\n    "Confirm Action", \n    "Are you sure you want to do this?",\n    {\n        {text="YES", cb = function() print("User confirmed") end},\n        {text="NO", cb = function() print("User declined") end}\n    }\n)\nTheFrontEnd:PushScreen(dialog)\n\n-- Show a message that automatically fades\nTheFrontEnd:DisplayAchievement("achievement_name")\nTheFrontEnd:DisplayTemporaryText("Text to display", "big", 5)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"menu-navigation",children:"Menu Navigation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Navigate to the main menu\nTheFrontEnd:SetScreensToShow("MainMenu")\n\n-- Show the character select screen\nTheFrontEnd:SetScreensToShow("CharacterSelect")\n\n-- Go to the options menu\nTheFrontEnd:SetScreensToShow("OptionsMenu")\n\n-- Show the credits\nTheFrontEnd:SetScreensToShow("Credits")\n\n-- Get the last used menu screen\nlocal last_screen = TheFrontEnd:GetLastUsedScreenName()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ui-components-and-widgets",children:"UI Components and Widgets"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Get a reference to the HUD\nlocal hud = TheFrontEnd:GetHUD()\n\n-- Control UI visibility\nTheFrontEnd:HideStatusNumbers(hide)\nTheFrontEnd:HidePlayerStatus(hide)\n\n-- Set text scale\nTheFrontEnd:SetTextScale(scale)\nlocal current_scale = TheFrontEnd:GetTextScale()\n\n-- Enable/disable help text\nTheFrontEnd:EnableHelpText(enable)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"fade-effects-and-transitions",children:"Fade Effects and Transitions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Fade screen in/out\nTheFrontEnd:FadeIn(time)\nTheFrontEnd:FadeOut(time)\n\n-- Set up a black fade effect\nTheFrontEnd:SetFadeLevel(level) -- 0 is fully visible, 1 is black\n\n-- Check if a fade is in progress\nlocal is_fading = TheFrontEnd:GetFadeLevel() > 0\n\n-- Perform a cross-fade between screens\nTheFrontEnd:CrossFadeScreen(new_screen)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"event-handling",children:"Event Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add a screen change handler\nTheFrontEnd:AddScreenChangedHandler(function(screen)\n    print("Screen changed to: " .. screen.name)\nend)\n\n-- Add a globally active keyboard handler\nTheFrontEnd:AddGlobalKeyHandler(function(key, down)\n    if key == KEY_ESCAPE and down then\n        -- Do something when ESC is pressed\n        return true -- Returning true consumes the event\n    end\n    return false -- Let other handlers process this key event\nend)\n\n-- Add a widget input handler\nTheFrontEnd:AddWidgetInputHandler(widget, function(key, down)\n    -- Handle input for a specific widget\nend)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client-Side Only"}),": TheFrontEnd only exists on the client, not on dedicated servers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Impact"}),": Creating complex UI screens can impact performance - keep UI elements minimal"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Handlers"}),": Be careful with global input handlers as they could interfere with game controls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Screen Stack"}),": Be mindful of the screen stack - always pop screens you push to avoid memory issues"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Focus Management"}),": Screens at the top of the stack receive input focus - use it appropriately"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-other-global-objects",children:"Integration with Other Global Objects"}),"\n",(0,r.jsx)(n.p,{children:"TheFrontEnd often works with other global objects:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theinput",children:"TheInput"})}),": For handling user input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theplayer",children:"ThePlayer"})}),": For accessing player data to display"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theinventory",children:"TheInventory"})}),": For displaying inventory items and skins"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom Menus"}),": Creating mod configuration screens"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Information Displays"}),": Showing additional game information or tooltips"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Notifications"}),": Creating custom notifications for mod events"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom HUD Elements"}),": Adding new elements to the game's HUD"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interactive UIs"}),": Building interactive interfaces for mod features"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);