"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6954],{1513:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/examples/case-status","title":"Case Study - Combined Status","description":"This case study examines the \\"Combined Status\\" mod for Don\'t Starve Together, which enhances the player status display with additional information. We\'ll analyze its implementation and extract valuable modding techniques for UI enhancement.","source":"@site/docs/api-vanilla/examples/case-status.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/case-status","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-status","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"id":"case-status","title":"Case Study - Combined Status","sidebar_position":13,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Case Study - Wormhole Marks","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-wormhole"},"next":{"title":"Case Study - The Forge Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-forge"}}');var a=t(4848),i=t(8453);const o={id:"case-status",title:"Case Study - Combined Status",sidebar_position:13,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Case Study: Combined Status Mod",r={},d=[{value:"Mod Overview",id:"mod-overview",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Core Techniques Used",id:"core-techniques-used",level:3},{value:"1. Custom Widget Creation and Integration",id:"1-custom-widget-creation-and-integration",level:2},{value:"Custom Widget Classes",id:"custom-widget-classes",level:3},{value:"Integration with Existing UI",id:"integration-with-existing-ui",level:3},{value:"Implementation Analysis",id:"implementation-analysis",level:3},{value:"2. Game Component Data Access",id:"2-game-component-data-access",level:2},{value:"Player Status Data",id:"player-status-data",level:3},{value:"World Status Data",id:"world-status-data",level:3},{value:"Implementation Analysis",id:"implementation-analysis-1",level:3},{value:"3. Cross-Platform Compatibility",id:"3-cross-platform-compatibility",level:2},{value:"Implementation Analysis",id:"implementation-analysis-2",level:3},{value:"4. Responsive UI Configuration",id:"4-responsive-ui-configuration",level:2},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Dynamic Layout Adjustment",id:"dynamic-layout-adjustment",level:3},{value:"Implementation Analysis",id:"implementation-analysis-3",level:3},{value:"5. Event-Based UI Updates",id:"5-event-based-ui-updates",level:2},{value:"Implementation Analysis",id:"implementation-analysis-4",level:3},{value:"6. Performance Optimization",id:"6-performance-optimization",level:2},{value:"Implementation Analysis",id:"implementation-analysis-5",level:3},{value:"7. Integration with Other Mods",id:"7-integration-with-other-mods",level:2},{value:"Implementation Analysis",id:"implementation-analysis-6",level:3},{value:"Lessons Learned",id:"lessons-learned",level:2},{value:"1. User-Centered Design",id:"1-user-centered-design",level:3},{value:"2. Cross-Platform Development",id:"2-cross-platform-development",level:3},{value:"3. Performance-Conscious Development",id:"3-performance-conscious-development",level:3},{value:"4. Integration and Compatibility",id:"4-integration-and-compatibility",level:3},{value:"Implementing Similar Features",id:"implementing-similar-features",level:2},{value:"Step 1: Plan Your UI Layout",id:"step-1-plan-your-ui-layout",level:3},{value:"Step 2: Create Basic UI Structure",id:"step-2-create-basic-ui-structure",level:3},{value:"Step 3: Collect and Display Data",id:"step-3-collect-and-display-data",level:3},{value:"Step 4: Set Up Periodic Updates with Optimization",id:"step-4-set-up-periodic-updates-with-optimization",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"case-study-combined-status-mod",children:"Case Study: Combined Status Mod"})}),"\n",(0,a.jsx)(n.p,{children:"This case study examines the \"Combined Status\" mod for Don't Starve Together, which enhances the player status display with additional information. We'll analyze its implementation and extract valuable modding techniques for UI enhancement."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/rezecib/Combined-Status",children:"Github"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://steamcommunity.com/sharedfiles/filedetails/?id=376333686",children:"Steam Workshop"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"mod-overview",children:"Mod Overview"}),"\n",(0,a.jsx)(n.p,{children:"The Combined Status mod addresses a common player need: having more information readily visible on the screen. The mod is compatible with all versions of Don't Starve and Don't Starve Together, enhancing the HUD with various player and world information. The mod:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Shows numerical values for health, hunger, and sanity"}),"\n",(0,a.jsx)(n.li,{children:"Displays player and world temperature with customizable units (Game units, Celsius, Fahrenheit)"}),"\n",(0,a.jsx)(n.li,{children:"Shows season information through a clock or compact display with days remaining"}),"\n",(0,a.jsx)(n.li,{children:"Displays moon phases with advanced features like waxing/waning distinction"}),"\n",(0,a.jsx)(n.li,{children:"Shows equipped item durability percentages"}),"\n",(0,a.jsx)(n.li,{children:"Adds custom meters like naughtiness (in singleplayer) and beaver meter for Woodie"}),"\n",(0,a.jsx)(n.li,{children:"Features high customizability through numerous configuration options"}),"\n",(0,a.jsx)(n.li,{children:"Maintains the game's visual style while adding functionality"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,a.jsx)(n.h3,{id:"core-techniques-used",children:"Core Techniques Used"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Custom Widget Creation and Integration"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Game Component Data Access"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Cross-Platform Compatibility"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Responsive UI Configuration"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Event-Based UI Updates"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Performance Optimization"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Integration with Other Mods"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Let's examine each of these techniques in detail."}),"\n",(0,a.jsx)(n.h2,{id:"1-custom-widget-creation-and-integration",children:"1. Custom Widget Creation and Integration"}),"\n",(0,a.jsx)(n.p,{children:"The mod creates custom UI elements and integrates them with the game's existing UI by using class post-construction (modifying existing classes) and creating custom widget classes."}),"\n",(0,a.jsx)(n.h3,{id:"custom-widget-classes",children:"Custom Widget Classes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- MiniBadge widget for compact status displays\nlocal Minibadge = Class(Widget, function(self, name, owner)\n    Widget._ctor(self, "Minibadge")\n    self.owner = owner\n\t\n    self.name = name\n\n    self:SetScale(.9, .9, .9)\n\t\n    self.bg = self:AddChild(Image("images/status_bgs.xml", "status_bgs.tex"))\n    self.bg:SetScale(.4,.43,1)\n    self.bg:SetPosition(-.5, -40)\n\t\n    self.num = self:AddChild(Text(NUMBERFONT, 28))\n    self.num:SetHAlign(ANCHOR_MIDDLE)\n    self.num:SetPosition(3.5, -40.5)\n    self.num:SetScale(1,.78,1)\nend)\n\n-- Custom season clock widget\nlocal SeasonClock = Class(Widget, function(self, owner, isdst, season_transition_fn, show_clock_text)\n    Widget._ctor(self, "SeasonClock")\n    \n    -- Configure based on game version and environment\n    self._dst = isdst\n    self._season_transition_fn = season_transition_fn\n    local world = self._dst and TheWorld or GetWorld()\n    self._cave = (self._dst and world ~= nil and world:HasTag("cave"))\n        or (not self._dst and world:IsCave())\n        \n    -- Create clock visuals\n    self._face = self:AddChild(Image("images/hud.xml", "clock_NIGHT.tex"))\n    self._face:SetClickable(false)\n    \n    -- Create clock segments\n    local segscale = .4\n    for i = NUM_SEGS, 1, -1 do\n        local seg = self:AddChild(Image("images/hud.xml", "clock_wedge.tex"))\n        seg:SetScale((i == 1 and 0.5 or 1)*segscale, segscale, segscale)\n        seg:SetHRegPoint(ANCHOR_LEFT)\n        seg:SetVRegPoint(ANCHOR_BOTTOM)\n        seg:SetRotation((i - (i == 1 and 1 or 2)) * (360 / NUM_SEGS))\n        seg:SetClickable(false)\n        self._segs[i] = seg\n    end\nend)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"integration-with-existing-ui",children:"Integration with Existing UI"}),"\n",(0,a.jsx)(n.p,{children:"The mod uses class post-construction to modify existing game UI components:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Modify the Badge class to add numerical display\nlocal function BadgePostConstruct(self)\n    if self.active == nil then\n        self.active = true\n    end\n    \n    self:SetScale(.9,.9,.9)\n    \n    -- Add background for numerical display\n    self.bg = self:AddChild(Image("images/status_bgs.xml", "status_bgs.tex"))\n    self.bg:SetScale(SHOWDETAILEDSTATNUMBERS and 0.55 or .4,.43,0)\n    self.bg:SetPosition(-.5, -40, 0)\n    \n    -- Configure numerical display\n    self.num:SetFont(GLOBAL.NUMBERFONT)\n    self.num:SetSize(SHOWDETAILEDSTATNUMBERS and 20 or 28)\n    self.num:SetPosition(2, -40.5, 0)\n    self.num:SetScale(1,.78,1)\n\n    self.num:MoveToFront()\n    if self.active then\n        self.num:Show()\n    end\n    \n    -- Add max value display when hovering\n    self.maxnum = self:AddChild(Text(GLOBAL.NUMBERFONT, SHOWMAXONNUMBERS and 25 or 33))\n    self.maxnum:SetPosition(6, 0, 0)\n    self.maxnum:MoveToFront()\n    self.maxnum:Hide()\n    \n    -- Override focus methods to show/hide max numbers\n    local OldOnGainFocus = self.OnGainFocus\n    function self:OnGainFocus()\n        OldOnGainFocus(self)\n        if self.active then\n            self.maxnum:Show()\n        end\n    end\nend\nAddClassPostConstruct("widgets/badge", BadgePostConstruct)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-analysis",children:"Implementation Analysis"}),"\n",(0,a.jsx)(n.p,{children:"The UI integration system demonstrates:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Custom Widgets"}),": Creating specialized widgets like ",(0,a.jsx)(n.code,{children:"Minibadge"})," and ",(0,a.jsx)(n.code,{children:"SeasonClock"})," for enhanced functionality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Class Extension"}),": Using post-construction to modify existing game widgets"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Hierarchy Management"}),": Building complex nested widget structures"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Visual Consistency"}),": Maintaining the game's art style with matching assets"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Responsive Layout"}),": Adapting widget positioning and scaling based on configurations"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"2-game-component-data-access",children:"2. Game Component Data Access"}),"\n",(0,a.jsx)(n.p,{children:"The mod accesses various game systems and components to collect data for display, handling differences between game versions."}),"\n",(0,a.jsx)(n.h3,{id:"player-status-data",children:"Player Status Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local function GetPlayerStatus(player)\n    if not player then return {} end\n    \n    local status = {}\n    \n    -- Get health data with safety checks\n    if player.components.health then\n        status.health = {\n            current = math.floor(player.components.health.currenthealth),\n            max = math.floor(player.components.health.maxhealth),\n            percent = player.components.health:GetPercent()\n        }\n    end\n    \n    -- Get hunger data\n    if player.components.hunger then\n        status.hunger = {\n            current = math.floor(player.components.hunger.current),\n            max = math.floor(player.components.hunger.max),\n            percent = player.components.hunger:GetPercent()\n        }\n    end\n    \n    -- Get temperature with unit conversion\n    if player.components.temperature then\n        local temp = player.components.temperature:GetCurrent()\n        status.temperature = math.floor(temp + 0.5)\n        status.is_freezing = player.components.temperature:IsFreezing()\n        status.is_overheating = player.components.temperature:IsOverheating()\n    end\n    \n    -- Get naughtiness (only available in single-player)\n    if not DST and player.components.kramped then\n        status.naughtiness = {\n            current = player.components.kramped.actions,\n            max = player.components.kramped.threshold,\n            percent = player.components.kramped.actions / player.components.kramped.threshold\n        }\n    end\n    \n    -- Get beaver meter for Woodie\n    if player.components.beaverness then\n        status.beaverness = {\n            current = player.components.beaverness:GetPercent(),\n            max = 1,\n            percent = player.components.beaverness:GetPercent(),\n        }\n    end\n    \n    return status\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"world-status-data",children:"World Status Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function GetWorldStatus()\n    -- Handle differences between DST and DS\n    local world = DST and TheWorld or GetSeasonManager()\n    if not world then return {} end\n    \n    local status = {}\n    \n    -- Get season info\n    if DST then\n        status.season = TheWorld.state.season\n        status.days_left = TheWorld.state.remainingdaysinseason\n        status.days_elapsed = TheWorld.state[status.season .. "length"] - status.days_left\n    else\n        status.season = world:GetSeason()\n        status.days_left = (1 - world.percent_season) * world:GetSeasonLength()\n        status.days_elapsed = world:GetSeasonLength() - status.days_left\n    end\n    \n    -- Get time of day\n    local clock = DST and TheWorld or GetClock()\n    if clock then\n        status.time = clock:GetTimeString()\n        status.day = (DST and TheWorld.state.cycles or clock:GetNumCycles()) + 1\n        status.phase = DST and TheWorld.state.phase or clock:GetPhase()\n    end\n    \n    -- Get moon phase\n    if DST then\n        status.moon_phase = TheWorld.state.moonphase\n        status.moon_visible = TheWorld.state.moonvisible \n    else\n        status.moon_phase = GetClock():GetMoonPhase()\n        status.moon_visible = GetClock():GetMoonPhase() ~= "new"\n    end\n    \n    -- Get world temperature\n    if world.GetCurrentTemperature then\n        status.world_temperature = math.floor(world:GetCurrentTemperature() + 0.5)\n    end\n    \n    return status\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-analysis-1",children:"Implementation Analysis"}),"\n",(0,a.jsx)(n.p,{children:"The data collection system demonstrates:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Component Safety"}),": Using safety checks before accessing components"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Cross-Version Abstraction"}),": Handling differences between DS and DST"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Complex Calculations"}),": Computing derived values like days remaining"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Data Normalization"}),": Formatting data for consistent display"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Feature Detection"}),": Checking for optional components before accessing them"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"3-cross-platform-compatibility",children:"3. Cross-Platform Compatibility"}),"\n",(0,a.jsx)(n.p,{children:"The mod includes extensive handling to work across different game versions: vanilla Don't Starve, Reign of Giants, Shipwrecked, Hamlet, and Don't Starve Together."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Detect game version and DLCs\nlocal DST = GLOBAL.TheSim.GetGameID ~= nil and GLOBAL.TheSim:GetGameID() == "DST"\nlocal ROG = DST or CheckDlcEnabled("REIGN_OF_GIANTS")\nlocal CSW = CheckDlcEnabled("CAPY_DLC")\nlocal HML = CheckDlcEnabled("PORKLAND_DLC")\n\n-- Handle different season systems\nlocal function FindSeasonTransitions()\n    if DST then\n        local seasons_trans = {"autumn", "winter", "spring", "summer"}\n        --IsShipwreckedWorld and IsPorkWorld are defined in Island Adventures\n        if HAS_MOD.ISLAND_ADVENTURES then\n            return GLOBAL.IsShipwreckedWorld() and {"mild", "wet", "green", "dry"}\n                or GLOBAL.IsPorkWorld() and {"temperate", "humid", "lush"}\n                or seasons_trans\n        end\n        return seasons_trans\n    end\n    \n    -- For singleplayer, scrape the SeasonManager\'s data\n    local season_trans = {}\n    local season_orders = {\n        "autumn", "winter", "spring", "summer",\n        "mild", "wet", "green", "dry",\n        "temperate", "humid", "lush",\n    }\n    for i, season in ipairs(season_orders) do\n        if GLOBAL.GetSeasonManager()[season .. "enabled"] then\n            table.insert(season_trans, season)\n        end\n    end\n    -- Vanilla DS fallback\n    if #season_trans == 0 then\n        season_trans = {"summer", "winter"}\n    end\n    return season_trans\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-analysis-2",children:"Implementation Analysis"}),"\n",(0,a.jsx)(n.p,{children:"The cross-platform compatibility demonstrates:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Feature Detection"}),": Checking for available functions and components"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DLC Detection"}),": Identifying which DLC content is enabled"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Version-Specific Logic"}),": Applying different code paths based on game version"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Graceful Fallbacks"}),": Providing reasonable defaults when features are unavailable"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Dynamic Content"}),": Adjusting UI for different game environments"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"4-responsive-ui-configuration",children:"4. Responsive UI Configuration"}),"\n",(0,a.jsx)(n.p,{children:"The mod provides extensive configuration options to users and dynamically adjusts the UI layout based on those settings."}),"\n",(0,a.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Configuration options in modinfo.lua\nconfiguration_options = {\n    {\n        name = "POSITION",\n        label = "Display Position",\n        options = {\n            {description = "Top Left", data = "topleft"},\n            {description = "Top Right", data = "topright"},\n            {description = "Bottom Left", data = "bottomleft"},\n            {description = "Bottom Right", data = "bottomright"},\n            {description = "Center Top", data = "centertop"},\n            {description = "Center Bottom", data = "centerbottom"}\n        },\n        default = "topleft"\n    },\n    {\n        name = "SHOWTEMPERATURE",\n        label = "Temperature",\n        hover = "Show the temperature of the player.",\n        options =    {\n                        {description = "Show", data = true},\n                        {description = "Hide", data = false},\n                    },\n        default = true,\n    },\n    {\n        name = "UNIT",\n        label = "Temperature Unit",\n        hover = "Do the right thing, and leave this on Game.",\n        options =    {\n                        {description = "Game Units", data = "T"},\n                        {description = "Celsius", data = "C"},\n                        {description = "Fahrenheit", data = "F"},\n                    },\n        default = "T",\n    },\n    {\n        name = "SEASONOPTIONS",\n        label = "Season Clock",\n        hover = "Adds a clock that shows the seasons, and rearranges the status badges to fit better.",\n        options =    {\n                        {description = "Micro", data = "Micro"},\n                        {description = "Compact", data = "Compact"},\n                        {description = "Clock", data = "Clock"},\n                        {description = "No", data = ""},\n                    },\n        default = "Clock",\n    },\n    {\n        name = "HUDSCALEFACTOR",\n        label = "HUD Scale",\n        hover = "Lets you adjust the size of the badges and clocks independently of the rest of the game HUD scale.",\n        options = hud_scale_options,\n        default = 100,\n    },\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"dynamic-layout-adjustment",children:"Dynamic Layout Adjustment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Apply configuration in modmain.lua\nlocal function ApplyConfiguration()\n    -- Read configuration values\n    CONFIG = {\n        POSITION = GetModConfigData("POSITION"),\n        SHOW_NUMERICAL = GetModConfigData("SHOWSTATNUMBERS"),\n        SHOW_DURABILITY = GetModConfigData("SHOWDURABILITY"),\n        UPDATE_INTERVAL = GetModConfigData("UPDATE_INTERVAL")\n    }\n    \n    -- Calculate position based on configuration\n    if CONFIG.POSITION == "topleft" then\n        CONFIG.POSITION_X = 10\n        CONFIG.POSITION_Y = -10\n    elseif CONFIG.POSITION == "topright" then\n        CONFIG.POSITION_X = -10\n        CONFIG.POSITION_Y = -10\n        CONFIG.ALIGNMENT = "right"\n    elseif CONFIG.POSITION == "bottomleft" then\n        CONFIG.POSITION_X = 10\n        CONFIG.POSITION_Y = 10\n        CONFIG.ANCHOR_V = ANCHOR_BOTTOM\n    elseif CONFIG.POSITION == "bottomright" then\n        CONFIG.POSITION_X = -10\n        CONFIG.POSITION_Y = 10\n        CONFIG.ANCHOR_V = ANCHOR_BOTTOM\n        CONFIG.ALIGNMENT = "right"\n    elseif CONFIG.POSITION == "centertop" then\n        CONFIG.POSITION_X = 0\n        CONFIG.POSITION_Y = -10\n        CONFIG.ANCHOR_H = ANCHOR_MIDDLE\n        CONFIG.ALIGNMENT = "center"\n    elseif CONFIG.POSITION == "centerbottom" then\n        CONFIG.POSITION_X = 0\n        CONFIG.POSITION_Y = 10\n        CONFIG.ANCHOR_V = ANCHOR_BOTTOM\n        CONFIG.ANCHOR_H = ANCHOR_MIDDLE\n        CONFIG.ALIGNMENT = "center"\n    end\n    \n    -- Scale UI based on configuration\n    CONFIG.SCALE = HUDSCALEFACTOR\n    \n    -- Adjust status elements based on which features are enabled\n    CONFIG.TEMP_Y_OFFSET = SHOWTEMPERATURE and 30 or 0\n    CONFIG.WORLD_TEMP_Y_OFFSET = SHOWWORLDTEMP and 30 or 0\n    CONFIG.NAUGHTINESS_Y_OFFSET = SHOWNAUGHTINESS and 30 or 0\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-analysis-3",children:"Implementation Analysis"}),"\n",(0,a.jsx)(n.p,{children:"The responsive configuration system demonstrates:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Rich Configuration Options"}),": Providing users with detailed control"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Hover Tooltips"}),": Explaining options with hover text"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Layout Algorithm"}),": Dynamic positioning based on user preferences"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Feature Dependencies"}),": Enabling/disabling features based on other settings"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Scale Management"}),": Handling different screen sizes and resolutions"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"5-event-based-ui-updates",children:"5. Event-Based UI Updates"}),"\n",(0,a.jsx)(n.p,{children:"The mod uses the game's event system to efficiently update UI elements when relevant data changes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Listen for events to update the season display\nif DST then\n    local function listen_for_event_delayed(event, fn)\n        self.inst:ListenForEvent(event, function(inst, data)\n            TheWorld:DoTaskInTime(0, function()\n                fn(self, data)\n            end)\n        end, TheWorld)\n    end\n    listen_for_event_delayed("seasontick", self.OnCyclesChanged)\n    listen_for_event_delayed("seasonlengthschanged", self.OnSeasonLengthsChanged)\n    listen_for_event_delayed("phasechanged", self.OnPhaseChanged)\nelse\n    self.inst:ListenForEvent("daycomplete", function(inst, data)\n        self.inst:DoTaskInTime(0, function()\n            self:OnCyclesChanged()\n            if self._have_focus then\n                self:OnGainFocus()\n            else\n                self:OnLoseFocus()\n            end\n        end)\n    end, GetWorld())\n    self.inst:ListenForEvent("seasonChange", function()\n        self:OnSeasonLengthsChanged()\n        if self._have_focus then\n            self:OnGainFocus()\n        else\n            self:OnLoseFocus()\n        end\n    end, GetWorld())\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-analysis-4",children:"Implementation Analysis"}),"\n",(0,a.jsx)(n.p,{children:"The event-based update system demonstrates:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Efficient Updates"}),": Only updating when relevant data changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Event Delay"}),": Using DoTaskInTime(0) to prevent event processing conflicts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Event Filtering"}),": Selecting specific events to respond to"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"State Preservation"}),": Maintaining focus state during updates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Version-Specific Events"}),": Handling different event systems in DS and DST"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"6-performance-optimization",children:"6. Performance Optimization"}),"\n",(0,a.jsx)(n.p,{children:"The mod includes several optimizations to ensure it doesn't impact game performance."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Optimized update function with change detection\nlocal function InitializeStatusUpdates(widget)\n    -- Store last values to avoid unnecessary updates\n    local last_player_status = {}\n    local last_world_status = {}\n    \n    -- Create periodic update task\n    return player:DoPeriodicTask(CONFIG.UPDATE_INTERVAL, function()\n        -- Skip processing if widget is hidden\n        if not widget or not widget.shown then return end\n        \n        -- Collect current status data\n        local player_status = GetPlayerStatus(player)\n        local world_status = GetWorldStatus()\n        \n        -- Check if anything has changed\n        local player_changed = HasChanges(player_status, last_player_status)\n        local world_changed = HasChanges(world_status, last_world_status)\n        \n        -- Only update if something changed\n        if player_changed or world_changed then\n            UpdateStatusDisplay(widget, player_status, world_status)\n            \n            -- Store current values for next comparison\n            last_player_status = DeepCopy(player_status)\n            last_world_status = DeepCopy(world_status)\n        end\n    end)\nend\n\n-- Helper function to check if data has changed\nlocal function HasChanges(new_data, old_data)\n    -- Quick check for nil or different types\n    if type(new_data) ~= type(old_data) then\n        return true\n    end\n    \n    -- Handle non-table types\n    if type(new_data) ~= "table" then\n        return new_data ~= old_data\n    end\n    \n    -- Check if any keys in new_data are different from old_data\n    for k, v in pairs(new_data) do\n        if type(v) == "table" then\n            if old_data[k] == nil or HasChanges(v, old_data[k]) then\n                return true\n            end\n        elseif old_data[k] == nil or v ~= old_data[k] then\n            return true\n        end\n    end\n    \n    -- Check if any keys in old_data are missing from new_data\n    for k, v in pairs(old_data) do\n        if new_data[k] == nil then\n            return true\n        end\n    end\n    \n    return false\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-analysis-5",children:"Implementation Analysis"}),"\n",(0,a.jsx)(n.p,{children:"The performance optimization demonstrates:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Conditional Updates"}),": Only updating when data actually changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deep Comparison"}),": Efficiently comparing nested data structures"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Visibility Checks"}),": Skipping updates when UI is not visible"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Update Frequency Control"}),": Allowing users to adjust update frequency"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Memory Management"}),": Properly copying and storing previous state data"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"7-integration-with-other-mods",children:"7. Integration with Other Mods"}),"\n",(0,a.jsx)(n.p,{children:"The mod detects and integrates with other popular mods to enhance compatibility and features."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local CHECK_MODS = {\n    ["workshop-1402200186"] = "TROPICAL",\n    ["workshop-874857181"] = "CHINESE",\n    ["workshop-2189004162"] = "INSIGHT",\n}\nlocal HAS_MOD = {}\n-- Check for already loaded mods\nfor mod_name, key in pairs(CHECK_MODS) do\n    HAS_MOD[key] = HAS_MOD[key] or (GLOBAL.KnownModIndex:IsModEnabled(mod_name) and mod_name)\nend\n-- Check for mods that will load later\nfor k,v in pairs(GLOBAL.KnownModIndex:GetModsToLoad()) do\n    local mod_type = CHECK_MODS[v]\n    if mod_type then\n        HAS_MOD[mod_type] = v\n    end\n    \n    local modinfo = GLOBAL.KnownModIndex:GetModInfo(v)\n    -- Special case for RPG HUD which has many variants\n    if string.match(modinfo.name or "", "RPG HUD") then\n        HAS_MOD.RPGHUD = true\n    elseif modinfo.ia_core then -- For Shipwrecked and Hamlet port mods\n        HAS_MOD.ISLAND_ADVENTURES = true\n    end\nend\n\n-- Adjust UI based on other mods\nif HAS_MOD.RPGHUD then\n    -- Adjust position to avoid conflicts with RPG HUD elements\n    nudge = 75 -- Increased offset when RPG HUD is present\nelse\n    nudge = 12.5\nend\n\n-- Use naughtiness from Insight mod if available in DST\nif DST and HAS_MOD.INSIGHT and SHOWNAUGHTINESS then\n    self.inst:ListenForEvent("naughtiness_delta", function(player, data)\n        if self.naughtiness and data then\n            self.naughtiness.num:SetString(data.naughtiness.."/"..data.max_naughtiness)\n        end\n    end, self.owner)\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-analysis-6",children:"Implementation Analysis"}),"\n",(0,a.jsx)(n.p,{children:"The mod integration system demonstrates:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Mod Detection"}),": Identifying installed mods through KnownModIndex"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Conditional Features"}),": Enabling features based on mod availability"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Layout Adjustment"}),": Modifying layouts to avoid conflicts with other mods"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Feature Enhancement"}),": Using features from other mods when available"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Universal Compatibility"}),": Fallbacks for when integration is not possible"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"lessons-learned",children:"Lessons Learned"}),"\n",(0,a.jsx)(n.p,{children:"From analyzing the Combined Status mod, we can extract several valuable lessons for UI mod development:"}),"\n",(0,a.jsx)(n.h3,{id:"1-user-centered-design",children:"1. User-Centered Design"}),"\n",(0,a.jsx)(n.p,{children:"The mod demonstrates how to:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Provide extensive configuration options to suit different player preferences"}),"\n",(0,a.jsx)(n.li,{children:"Display information that is most relevant to player decision-making"}),"\n",(0,a.jsx)(n.li,{children:"Create clear visual hierarchy and readable information displays"}),"\n",(0,a.jsx)(n.li,{children:"Balance information density with visual clarity"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-cross-platform-development",children:"2. Cross-Platform Development"}),"\n",(0,a.jsx)(n.p,{children:"The mod shows good practices for:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Handling differences between game versions with graceful fallbacks"}),"\n",(0,a.jsx)(n.li,{children:"Detecting available features before attempting to use them"}),"\n",(0,a.jsx)(n.li,{children:"Adapting to different DLC content and environments"}),"\n",(0,a.jsx)(n.li,{children:"Maintaining consistent look and feel across platforms"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-performance-conscious-development",children:"3. Performance-Conscious Development"}),"\n",(0,a.jsx)(n.p,{children:"Despite adding UI elements and collecting data, the mod maintains good performance by:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Only updating when necessary through change detection"}),"\n",(0,a.jsx)(n.li,{children:"Allowing users to control update frequency"}),"\n",(0,a.jsx)(n.li,{children:"Using efficient data structures and comparison methods"}),"\n",(0,a.jsx)(n.li,{children:"Skipping updates when elements are not visible"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"4-integration-and-compatibility",children:"4. Integration and Compatibility"}),"\n",(0,a.jsx)(n.p,{children:"The mod prioritizes working well with:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The base game's existing UI elements and style"}),"\n",(0,a.jsx)(n.li,{children:"Other popular mods through detection and adaptation"}),"\n",(0,a.jsx)(n.li,{children:"Different screen resolutions through scale management"}),"\n",(0,a.jsx)(n.li,{children:"Various in-game contexts like caves, seasons, and character types"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"implementing-similar-features",children:"Implementing Similar Features"}),"\n",(0,a.jsx)(n.p,{children:"If you want to create a mod with similar status display features, follow these steps:"}),"\n",(0,a.jsx)(n.h3,{id:"step-1-plan-your-ui-layout",children:"Step 1: Plan Your UI Layout"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Define what information you want to display\nlocal STATUS_ELEMENTS = {\n    {id = "health", type = "stat", component = "health"},\n    {id = "hunger", type = "stat", component = "hunger"},\n    {id = "sanity", type = "stat", component = "sanity"},\n    {id = "temperature", type = "value", component = "temperature"},\n    {id = "season", type = "world", source = "seasons"},\n    {id = "day", type = "world", source = "clock"},\n    {id = "time", type = "world", source = "clock"}\n}\n\n-- Plan the visual layout\nlocal LAYOUT = {\n    rows = 3,\n    columns = 2,\n    spacing = {x = 100, y = 30},\n    position = {x = 10, y = -10}\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-create-basic-ui-structure",children:"Step 2: Create Basic UI Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Create a basic status display\nfunction CreateBasicStatusDisplay(player)\n    -- Create root widget\n    local root = player.HUD.controls:AddChild(Widget("StatusDisplay"))\n    root:SetVAnchor(ANCHOR_TOP)\n    root:SetHAnchor(ANCHOR_LEFT)\n    root:SetPosition(LAYOUT.position.x, LAYOUT.position.y, 0)\n    \n    -- Create background\n    local bg = root:AddChild(Image("images/ui_elements.xml", "status_bg.tex"))\n    bg:SetScale(0.8, 0.8, 0.8)\n    \n    -- Create element containers\n    root.elements = {}\n    \n    -- Create individual status elements\n    for i, element in ipairs(STATUS_ELEMENTS) do\n        local row = math.floor((i-1) / LAYOUT.columns)\n        local col = (i-1) % LAYOUT.columns\n        \n        local pos_x = col * LAYOUT.spacing.x\n        local pos_y = -row * LAYOUT.spacing.y\n        \n        local widget = CreateStatusElement(element.id, element.type)\n        widget:SetPosition(pos_x, pos_y, 0)\n        \n        root:AddChild(widget)\n        root.elements[element.id] = widget\n    end\n    \n    return root\nend\n\n-- Create individual status element\nfunction CreateStatusElement(id, type)\n    local widget = Widget(id)\n    \n    -- Create icon\n    local icon = widget:AddChild(Image("images/status_icons.xml", id .. ".tex"))\n    icon:SetScale(0.5, 0.5, 0.5)\n    icon:SetPosition(-30, 0, 0)\n    \n    -- Create text\n    local text = widget:AddChild(Text(NUMBERFONT, 24))\n    text:SetPosition(10, 0, 0)\n    text:SetString("--")\n    \n    widget.icon = icon\n    widget.text = text\n    \n    return widget\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-collect-and-display-data",children:"Step 3: Collect and Display Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Update status display with current data\nfunction UpdateStatusDisplay(widget, player)\n    if not widget or not player then return end\n    \n    local is_dst = TheSim:GetGameID() == "DST"\n    \n    -- Update health\n    if widget.elements.health and player.components.health then\n        local current = math.floor(player.components.health.currenthealth)\n        local max = math.floor(player.components.health.maxhealth)\n        widget.elements.health.text:SetString(string.format("%d / %d", current, max))\n        \n        -- Color based on value\n        local percent = player.components.health:GetPercent()\n        if percent < 0.25 then\n            widget.elements.health.text:SetColour(1, 0, 0)\n        else\n            widget.elements.health.text:SetColour(1, 1, 1)\n        end\n    end\n    \n    -- Update temperature with unit conversion\n    if widget.elements.temperature and player.components.temperature then\n        local temp = player.components.temperature:GetCurrent()\n        local temp_str = ""\n        \n        -- Convert based on units\n        if CONFIG.UNIT == "C" then\n            temp_str = string.format("%d\xb0C", math.floor(temp/2 + 0.5))\n        elseif CONFIG.UNIT == "F" then\n            temp_str = string.format("%d\xb0F", math.floor(0.9*temp + 32.5))\n        else -- Game units\n            temp_str = string.format("%d\xb0", math.floor(temp + 0.5))\n        end\n        \n        widget.elements.temperature.text:SetString(temp_str)\n        \n        -- Set color based on temperature state\n        if player.components.temperature:IsFreezing() then\n            widget.elements.temperature.text:SetColour(0.5, 0.5, 1)\n        elseif player.components.temperature:IsOverheating() then\n            widget.elements.temperature.text:SetColour(1, 0.4, 0.4)\n        else\n            widget.elements.temperature.text:SetColour(1, 1, 1)\n        end\n    end\n    \n    -- Update world information using the appropriate functions for the game version\n    local world = is_dst and TheWorld or GetWorld()\n    local seasons = is_dst and TheWorld or GetSeasonManager()\n    local clock = is_dst and TheWorld or GetClock()\n    \n    if world and seasons and clock then\n        -- Update season\n        if widget.elements.season then\n            local season = is_dst and world.state.season or seasons:GetSeason()\n            local season_name = is_dst\n                and STRINGS.UI.SERVERLISTINGSCREEN.SEASONS[season:upper()]\n                or STRINGS.UI.SANDBOXMENU[season:upper()]\n            widget.elements.season.text:SetString(season_name)\n        end\n        \n        -- Update day\n        if widget.elements.day then\n            local day = (is_dst and world.state.cycles or clock:GetNumCycles()) + 1\n            widget.elements.day.text:SetString(string.format(STRINGS.UI.HUD.DAY, day))\n        end\n    end\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"step-4-set-up-periodic-updates-with-optimization",children:"Step 4: Set Up Periodic Updates with Optimization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Initialize periodic updates with change detection\nfunction InitializeStatusUpdates(player, widget)\n    local last_health = 0\n    local last_hunger = 0\n    local last_temp = 0\n    local last_day = 0\n    local last_season = ""\n    \n    -- Create update task\n    return player:DoPeriodicTask(0.5, function()\n        if not player or not widget or not widget.shown then\n            return -- Skip processing if not needed\n        end\n        \n        -- Check for changes in key values\n        local health_changed = player.components.health \n            and math.floor(player.components.health.currenthealth) ~= last_health\n        local hunger_changed = player.components.hunger\n            and math.floor(player.components.hunger.current) ~= last_hunger\n        local temp_changed = player.components.temperature\n            and math.floor(player.components.temperature:GetCurrent()) ~= last_temp\n            \n        local is_dst = TheSim:GetGameID() == "DST"\n        local world = is_dst and TheWorld or GetWorld()\n        local seasons = is_dst and TheWorld or GetSeasonManager()\n        local clock = is_dst and TheWorld or GetClock()\n        \n        local day_changed = is_dst and world.state.cycles ~= last_day\n            or not is_dst and clock:GetNumCycles() ~= last_day\n        local season_changed = is_dst and world.state.season ~= last_season\n            or not is_dst and seasons:GetSeason() ~= last_season\n            \n        -- Only update if something changed\n        if health_changed or hunger_changed or temp_changed or day_changed or season_changed then\n            UpdateStatusDisplay(widget, player)\n            \n            -- Store current values for next comparison\n            if player.components.health then\n                last_health = math.floor(player.components.health.currenthealth)\n            end\n            if player.components.hunger then\n                last_hunger = math.floor(player.components.hunger.current)\n            end\n            if player.components.temperature then\n                last_temp = math.floor(player.components.temperature:GetCurrent())\n            end\n            if is_dst then\n                last_day = world.state.cycles\n                last_season = world.state.season\n            else\n                last_day = clock:GetNumCycles()\n                last_season = seasons:GetSeason()\n            end\n        end\n    end)\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"The Combined Status mod exemplifies professional UI mod development through:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Information Enhancement"}),": Providing useful information without overwhelming the player"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Cross-Platform Support"}),": Working across all game versions with consistent functionality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Visual Integration"}),": Maintaining the game's art style and UI conventions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"User Customization"}),": Providing extensive options to tailor the experience"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance Optimization"}),": Ensuring the mod doesn't impact game performance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Mod Compatibility"}),": Working alongside other popular mods"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"By studying this mod, we can learn how to create UI enhancements that add value to the game experience while respecting its visual design, performance requirements, and ecosystem. These principles apply to any mod that aims to improve the game's interface."}),"\n",(0,a.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/widgets",children:"Widget System"})," - For UI widget creation and management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/health",children:"Health Component"})," - For accessing player health data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/temperature",children:"Temperature Component"})," - For accessing temperature data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/hunger",children:"Hunger Component"})," - For accessing hunger data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/sanity",children:"Sanity Component"})," - For accessing sanity data"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/ui-system",children:"UI System"})," - For understanding the game's UI architecture"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);