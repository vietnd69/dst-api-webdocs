"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5998],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},9574:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/node-types/entity","title":"Entity","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/node-types/entity.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/entity","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/entity","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"entity","title":"Entity","sidebar_position":2,"last_updated":"2023-07-06T00:00:00.000Z"}}');var s=t(4848),a=t(8453);const o={id:"entity",title:"Entity",sidebar_position:2,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="Entity",d={},l=[{value:"Entity properties and methods",id:"entity-properties-and-methods",level:2},{value:"Properties",id:"properties",level:2},{value:"entity: EntityObject <code>[readonly]</code>",id:"entity-entityobject-readonly",level:3},{value:"Transform: TransformComponent <code>[readonly]</code>",id:"transform-transformcomponent-readonly",level:3},{value:"AnimState: AnimStateComponent <code>[readonly]</code>",id:"animstate-animstatecomponent-readonly",level:3},{value:"components: ComponentTable <code>[readonly]</code>",id:"components-componenttable-readonly",level:3},{value:"tags: TagTable <code>[readonly]</code>",id:"tags-tagtable-readonly",level:3},{value:"Methods",id:"methods",level:2},{value:"AddTag(tag: string): void",id:"addtagtag-string-void",level:3},{value:"RemoveTag(tag: string): void",id:"removetagtag-string-void",level:3},{value:"HasTag(tag: string): boolean",id:"hastagtag-string-boolean",level:3},{value:"AddComponent(name: string): Component",id:"addcomponentname-string-component",level:3},{value:"RemoveComponent(name: string): void",id:"removecomponentname-string-void",level:3},{value:"Remove(): void",id:"remove-void",level:3},{value:"Entity Creation",id:"entity-creation",level:2},{value:"Core Entity Parts",id:"core-entity-parts",level:2},{value:"Entity Lifecycle",id:"entity-lifecycle",level:2},{value:"Finding Entities",id:"finding-entities",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"entity",children:"Entity"})}),"\n",(0,s.jsx)(n.p,{children:"Entity is the most basic node type in Don't Starve Together, representing all objects in the game from characters and items to structures."}),"\n",(0,s.jsx)(n.h2,{id:"entity-properties-and-methods",children:"Entity properties and methods"}),"\n",(0,s.jsx)(n.p,{children:"Entity provides the following key properties and methods:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Properties"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entity"})," - Low-level entity object with core functionality"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Transform"})," - Position, rotation, and scale"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AnimState"})," - Animations and visual appearance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"components"})," - Components attached to the entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tags"})," - Lightweight markers for entity characteristics"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Methods"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AddTag()"})," - Add a tag to the entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RemoveTag()"})," - Remove a tag from the entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"HasTag()"})," - Check if entity has a tag"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AddComponent()"})," - Add a component to the entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RemoveComponent()"})," - Remove a component from the entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Remove()"})," - Remove the entity from the game"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.h3,{id:"entity-entityobject-readonly",children:["entity: EntityObject ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"The low-level entity object that provides core functionality. You use this object to add basic parts to the entity."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Add core parts to entity\nentity.entity:AddTransform()\nentity.entity:AddAnimState()\nentity.entity:AddNetwork()\nentity.entity:SetPristine()\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"transform-transformcomponent-readonly",children:["Transform: TransformComponent ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"Controls the entity's position, rotation, and scale in the world."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Get position\nlocal x, y, z = entity.Transform:GetWorldPosition()\n\n-- Set position\nentity.Transform:SetPosition(10, 0, 20)\n\n-- Set rotation\nentity.Transform:SetRotation(45)  -- degrees\n\n-- Set scale\nentity.Transform:SetScale(1.5, 1.5, 1.5)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"animstate-animstatecomponent-readonly",children:["AnimState: AnimStateComponent ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"Controls the entity's visual appearance and animations."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Set the visual appearance\nentity.AnimState:SetBank("spiderden")  -- animation bank\nentity.AnimState:SetBuild("spider_cocoon")  -- art assets\nentity.AnimState:PlayAnimation("idle")  -- animation to play\n\n-- Animation parameters\nentity.AnimState:SetMultColour(1, 0.5, 0.5, 1)  -- tint red\nentity.AnimState:SetTime(0.5)  -- set animation time\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"components-componenttable-readonly",children:["components: ComponentTable ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"Table containing all components attached to this entity. Each component provides specific functionality."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Access components\nlocal health = entity.components.health\nif health then\n    health:SetMaxHealth(100)\nend\n\n-- Check component exists\nif entity.components.combat then\n    entity.components.combat:SetDefaultDamage(10)\nend\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"tags-tagtable-readonly",children:["tags: TagTable ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"Set of tags attached to this entity. Tags are used for quick identification of entity characteristics."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Check tags\nif entity.tags["player"] then\n    print("This is a player entity")\nend\n\n-- Iterate through tags\nfor tag, _ in pairs(entity.tags) do\n    print("Entity has tag: " .. tag)\nend\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"addtagtag-string-void",children:"AddTag(tag: string): void"}),"\n",(0,s.jsx)(n.p,{children:"Adds a tag to the entity. Tags are lightweight markers used to identify entity characteristics."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add tags to identify entity characteristics\nentity:AddTag("player")\nentity:AddTag("scarytoprey")\nentity:AddTag("character")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"removetagtag-string-void",children:"RemoveTag(tag: string): void"}),"\n",(0,s.jsx)(n.p,{children:"Removes a tag from the entity."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Remove a tag\nentity:RemoveTag("scarytoprey")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"hastagtag-string-boolean",children:"HasTag(tag: string): boolean"}),"\n",(0,s.jsx)(n.p,{children:"Checks if the entity has the specified tag."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Check if entity has a tag\nif entity:HasTag("player") then\n    -- Do something with player entities\nend\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"addcomponentname-string-component",children:"AddComponent(name: string): Component"}),"\n",(0,s.jsx)(n.p,{children:"Adds a component to the entity and returns the newly created component."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add components to provide functionality\nlocal health = entity:AddComponent("health")\nhealth:SetMaxHealth(100)\n\nlocal combat = entity:AddComponent("combat")\ncombat:SetDefaultDamage(10)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"removecomponentname-string-void",children:"RemoveComponent(name: string): void"}),"\n",(0,s.jsx)(n.p,{children:"Removes a component from the entity."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Remove a component\nentity:RemoveComponent("burnable")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"remove-void",children:"Remove(): void"}),"\n",(0,s.jsx)(n.p,{children:"Removes the entity from the game world. The entity will be destroyed and can no longer be used."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Remove entity from game\nentity:Remove()\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"entity-creation",children:"Entity Creation"}),"\n",(0,s.jsx)(n.p,{children:"Entities are typically created through prefabs, but can also be created directly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local entity = CreateEntity()\nentity:AddTag("myentity")\nentity.entity:AddTransform()\nentity.entity:AddAnimState()\nentity.entity:AddNetwork()\n\n-- Set up other entity properties\nentity.entity:SetPristine()\n\nif not TheWorld.ismastersim then\n    return entity\nend\n\n-- Server-side component setup\nentity:AddComponent("inventoryitem")\n\nreturn entity\n'})}),"\n",(0,s.jsx)(n.h2,{id:"core-entity-parts",children:"Core Entity Parts"}),"\n",(0,s.jsx)(n.p,{children:"Each entity can have these core parts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Transform"}),": Position, rotation, and scale"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AnimState"}),": Animations and visual appearance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SoundEmitter"}),": Sound effects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network"}),": Multiplayer synchronization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Physics"}),": Collision and physical interactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Light"}),": Light emission"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MiniMapEntity"}),": Appearance on the minimap"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Add core parts\nentity.entity:AddTransform()\nentity.entity:AddAnimState()\nentity.entity:AddSoundEmitter()\nentity.entity:AddNetwork()\nentity.entity:AddPhysics()\nentity.entity:AddLight()\nentity.entity:AddMiniMapEntity()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"entity-lifecycle",children:"Entity Lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"Entities have a lifecycle in the game:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Creation"}),": Entity is created through prefab or directly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Setup"}),": Components and properties are configured"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Activation"}),": Entity becomes active in the world"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Updates"}),": Entity is updated each frame"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Removal"}),": Entity is removed from the world"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"finding-entities",children:"Finding Entities"}),"\n",(0,s.jsx)(n.p,{children:"Entities can be found using various functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Find entities near a position\nlocal entities = TheSim:FindEntities(x, y, z, radius, {"player"}, {"ghost"})\n\n-- Find closest entity\nlocal entity = FindClosestEntity(x, y, z, radius, {"tree"})\n\n-- Find entities in a given area\nlocal entities = FindEntitiesInArea(x1, y1, z1, x2, y2, z2, {"monster"})\n'})}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/component",children:"Component"})," - Modular functionality attached to entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/prefab",children:"Prefab"})," - Templates for entity creation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/network",children:"Network"})," - Multiplayer synchronization system"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"tags.md",children:"Tags"})," - Tag system for entity identification"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);