"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[62184],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},44663:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"game-scripts/core-systems/user-interface/input/input","title":"Input System","description":"Comprehensive input handling for keyboard, mouse, controllers, and virtual controls","source":"@site/docs/game-scripts/core-systems/user-interface/input/input.md","sourceDirName":"game-scripts/core-systems/user-interface/input","slug":"/game-scripts/core-systems/user-interface/input/input","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/input/input","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"input","title":"Input System","description":"Comprehensive input handling for keyboard, mouse, controllers, and virtual controls","sidebar_position":1,"slug":"/game-scripts/core-systems/user-interface/input/input","last_updated":"2025-06-25T00:00:00.000Z","build_version":676312,"change_status":"modified"},"sidebar":"docs","previous":{"title":"Input Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/input/"},"next":{"title":"Haptic Effects","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/input/haptics"}}');var i=s(74848),r=s(28453);const l={id:"input",title:"Input System",description:"Comprehensive input handling for keyboard, mouse, controllers, and virtual controls",sidebar_position:1,slug:"/game-scripts/core-systems/user-interface/input/input",last_updated:new Date("2025-06-25T00:00:00.000Z"),build_version:676312,change_status:"modified"},o="Input System",d={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Core Input Class",id:"core-input-class",level:2},{value:"Input Class Constructor",id:"input-class-constructor",level:3},{value:"Input Device Management",id:"input-device-management",level:2},{value:"Controller Management",id:"controller-management",level:3},{value:"TheInput()",id:"theinput",level:4},{value:"TheInput()",id:"theinput-1",level:4},{value:"TheInput()",id:"theinput-2",level:4},{value:"TheInput()",id:"theinput-3",level:4},{value:"Mouse Control",id:"mouse-control",level:3},{value:"TheInput(enable)",id:"theinputenable",level:4},{value:"Event Handler Registration",id:"event-handler-registration",level:2},{value:"Keyboard Events",id:"keyboard-events",level:3},{value:"TheInput(key, fn)",id:"theinputkey-fn",level:4},{value:"TheInput(key, fn)",id:"theinputkey-fn-1",level:4},{value:"Mouse Events",id:"mouse-events",level:3},{value:"TheInput(fn)",id:"theinputfn",level:4},{value:"TheInput(fn)",id:"theinputfn-1",level:4},{value:"Control Events",id:"control-events",level:3},{value:"TheInput(control, fn)",id:"theinputcontrol-fn",level:4},{value:"TheInput(fn)",id:"theinputfn-2",level:4},{value:"Input State Queries",id:"input-state-queries",level:2},{value:"Keyboard State",id:"keyboard-state",level:3},{value:"TheInput(key)",id:"theinputkey",level:4},{value:"Mouse State",id:"mouse-state",level:3},{value:"TheInput(button)",id:"theinputbutton",level:4},{value:"Control State",id:"control-state",level:3},{value:"TheInput(control)",id:"theinputcontrol",level:4},{value:"TheInput(control)",id:"theinputcontrol-1",level:4},{value:"Virtual Controls System",id:"virtual-controls-system",level:2},{value:"Virtual Control Resolution",id:"virtual-control-resolution",level:3},{value:"TheInput(control)",id:"theinputcontrol-2",level:4},{value:"Control Schemes",id:"control-schemes",level:3},{value:"TheInput(schemeId)",id:"theinputschemeid",level:4},{value:"TheInput()",id:"theinput-4",level:4},{value:"TheInput()",id:"theinput-5",level:4},{value:"Position and Entity Detection",id:"position-and-entity-detection",level:2},{value:"World Position",id:"world-position",level:3},{value:"TheInput()",id:"theinput-6",level:4},{value:"TheInput(height)",id:"theinputheight",level:4},{value:"Entity Detection",id:"entity-detection",level:3},{value:"TheInput()",id:"theinput-7",level:4},{value:"TheInput()",id:"theinput-8",level:4},{value:"TheInput()",id:"theinput-9",level:4},{value:"Text Input and Virtual Keyboard",id:"text-input-and-virtual-keyboard",level:2},{value:"Virtual Keyboard Management",id:"virtual-keyboard-management",level:3},{value:"TheInput(text_widget)",id:"theinputtext_widget",level:4},{value:"TheInput(for_text_widget)",id:"theinputfor_text_widget",level:4},{value:"TheInput()",id:"theinput-10",level:4},{value:"Text Input Events",id:"text-input-events",level:3},{value:"TheInput(fn)",id:"theinputfn-3",level:4},{value:"Control Mapping and Localization",id:"control-mapping-and-localization",level:2},{value:"Control Mapping",id:"control-mapping",level:3},{value:"TheInput(deviceId, controlId, use_default_mapping, use_control_mapper)",id:"theinputdeviceid-controlid-use_default_mapping-use_control_mapper",level:4},{value:"TheInput(deviceId, controlId)",id:"theinputdeviceid-controlid",level:4},{value:"Special Key Detection",id:"special-key-detection",level:3},{value:"TheInput(key)",id:"theinputkey-1",level:4},{value:"Platform Integration",id:"platform-integration",level:2},{value:"Platform Detection",id:"platform-detection",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Global Functions",id:"global-functions",level:2},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Input Handler Setup",id:"input-handler-setup",level:3},{value:"Virtual Control Integration",id:"virtual-control-integration",level:3},{value:"Related Modules",id:"related-modules",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"input-system",children:"Input System"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676312"}),(0,i.jsx)(n.td,{children:"2025-06-25"}),(0,i.jsx)(n.td,{children:"modified"}),(0,i.jsx)(n.td,{children:"Enhanced player validation in ResolveVirtualControls and added validation line numbers"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Previous version"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"input.lua"})," script provides the core input management system for Don't Starve Together, handling keyboard, mouse, and controller inputs across multiple platforms. It manages event processing, control mapping, virtual controls, and input device coordination to create a unified input experience across different hardware configurations."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Access the global input system\nlocal input = TheInput\n\n-- Add input handlers\ninput:AddKeyDownHandler(KEY_SPACE, function() print("Space pressed") end)\ninput:AddControlHandler(CONTROL_PRIMARY, function(control, down) \n    if down then print("Primary action") end \nend)\n\n-- Check input states\nif input:IsKeyDown(KEY_W) then\n    -- Handle movement\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-input-class",children:"Core Input Class"}),"\n",(0,i.jsx)(n.h3,{id:"input-class-constructor",children:"Input Class Constructor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"Input = Class(function(self)\n    self.onkey = EventProcessor()         -- All key events\n    self.onkeyup = EventProcessor()       -- Key release events\n    self.onkeydown = EventProcessor()     -- Key press events\n    self.onmousebutton = EventProcessor() -- Mouse button events\n    self.position = EventProcessor()      -- Mouse position events\n    self.oncontrol = EventProcessor()     -- Control events\n    self.ontextinput = EventProcessor()   -- Text input events\n    self.ongesture = EventProcessor()     -- Gesture events\nend)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Properties:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hoverinst"}),": Currently hovered entity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mouse_enabled"}),": Whether mouse input is active"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"controllerid_cached"}),": Cached active controller ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"entitiesundermouse"}),": List of entities under mouse cursor"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"input-device-management",children:"Input Device Management"}),"\n",(0,i.jsx)(n.h3,{id:"controller-management",children:"Controller Management"}),"\n",(0,i.jsxs)(n.h4,{id:"theinput",children:["TheInput",":DisableAllControllers","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nDisables all connected controllers except the primary input device."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"TheInput:DisableAllControllers()\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-1",children:["TheInput",":EnableAllControllers","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nEnables all connected controllers that are physically connected."]}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-2",children:["TheInput",":ControllerAttached","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if a controller is currently attached and active."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if controller is active, false otherwise"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-3",children:["TheInput",":GetInputDevices","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nReturns a list of all connected input devices with their identifiers."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["(table): Array of device info tables with ",(0,i.jsx)(n.code,{children:"text"})," and ",(0,i.jsx)(n.code,{children:"data"})," fields"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local devices = TheInput:GetInputDevices()\nfor i, device in ipairs(devices) do\n    print("Device:", device.text, "ID:", device.data)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mouse-control",children:"Mouse Control"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputenable",children:["TheInput",":EnableMouse","(enable)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nEnables or disables mouse input functionality."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enable"})," (boolean): Whether to enable mouse input"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"TheInput:EnableMouse(true)  -- Enable mouse\nTheInput:EnableMouse(false) -- Disable mouse\n"})}),"\n",(0,i.jsx)(n.h2,{id:"event-handler-registration",children:"Event Handler Registration"}),"\n",(0,i.jsx)(n.h3,{id:"keyboard-events",children:"Keyboard Events"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputkey-fn",children:["TheInput",":AddKeyDownHandler","(key, fn)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a function to be called when a specific key is pressed down."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key"})," (number): Key constant (e.g., KEY_SPACE, KEY_W)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Callback function to execute"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(object): Event handler reference for removal"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinputkey-fn-1",children:["TheInput",":AddKeyUpHandler","(key, fn)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a function to be called when a specific key is released."]}),"\n",(0,i.jsx)(n.h3,{id:"mouse-events",children:"Mouse Events"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputfn",children:["TheInput",":AddMouseButtonHandler","(fn)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a function to be called for mouse button events."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Callback function receiving (button, down, x, y) parameters"]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinputfn-1",children:["TheInput",":AddMoveHandler","(fn)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a function to be called when the mouse moves."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Callback function receiving (x, y) parameters"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"control-events",children:"Control Events"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputcontrol-fn",children:["TheInput",":AddControlHandler","(control, fn)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a function to be called when a specific control is activated."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"control"})," (number): Control constant (e.g., CONTROL_PRIMARY, CONTROL_MOVE_UP)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Callback function receiving (control, digitalvalue, analogvalue) parameters"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'TheInput:AddControlHandler(CONTROL_PRIMARY, function(control, down, analog)\n    if down then\n        print("Primary action pressed with analog value:", analog)\n    end\nend)\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"theinputfn-2",children:["TheInput",":AddGeneralControlHandler","(fn)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a function to be called for all control events."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Callback function receiving (control, digitalvalue, analogvalue) parameters"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"input-state-queries",children:"Input State Queries"}),"\n",(0,i.jsx)(n.h3,{id:"keyboard-state",children:"Keyboard State"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputkey",children:["TheInput",":IsKeyDown","(key)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if a specific key is currently pressed."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key"})," (number): Key constant to check"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if key is currently pressed"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"mouse-state",children:"Mouse State"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputbutton",children:["TheInput",":IsMouseDown","(button)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if a specific mouse button is currently pressed."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"button"})," (number): Mouse button constant"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if mouse button is currently pressed"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"control-state",children:"Control State"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputcontrol",children:["TheInput",":IsControlPressed","(control)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if a control is currently pressed, including virtual control resolution."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"control"})," (number): Control constant or virtual control ID"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if control is currently active"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinputcontrol-1",children:["TheInput",":GetAnalogControlValue","(control)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets the analog value for a control (useful for analog sticks, triggers)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"control"})," (number): Control constant"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Analog value between 0.0 and 1.0"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"virtual-controls-system",children:"Virtual Controls System"}),"\n",(0,i.jsx)(n.h3,{id:"virtual-control-resolution",children:"Virtual Control Resolution"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputcontrol-2",children:["TheInput",":ResolveVirtualControls","(control)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"modified in build 676312"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nResolves virtual controls to actual control inputs based on current control scheme and game state. Enhanced with improved player validation for better stability."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"control"})," (number): Virtual control ID or regular control ID"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number|nil): Resolved control ID or nil if control should be ignored"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Player Validation Enhancement (Build 676312):"}),"\nImproved null-checking for player entities to prevent potential crashes when HUD components are not available."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Previous validation (could access HUD on nil player)\nif not (player and player.HUD and player.HUD:IsCraftingOpen()) then\n\n-- Enhanced validation (ensures player exists before HUD access)\nif player and not (player.HUD and player.HUD:IsCraftingOpen()) then\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Virtual Control Categories:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Camera Controls"}),": VIRTUAL_CONTROL_CAMERA_ZOOM_IN to VIRTUAL_CONTROL_CAMERA_ROTATE_RIGHT"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Aiming Controls"}),": VIRTUAL_CONTROL_AIM_UP to VIRTUAL_CONTROL_AIM_RIGHT"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inventory Navigation"}),": VIRTUAL_CONTROL_INV_UP to VIRTUAL_CONTROL_INV_RIGHT"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inventory Actions"}),": VIRTUAL_CONTROL_INV_ACTION_UP to VIRTUAL_CONTROL_INV_ACTION_RIGHT"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strafe Controls"}),": VIRTUAL_CONTROL_STRAFE_UP to VIRTUAL_CONTROL_STRAFE_RIGHT"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"control-schemes",children:"Control Schemes"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputschemeid",children:["TheInput",":GetActiveControlScheme","(schemeId)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets the currently active control scheme for a specific scheme category."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"schemeId"})," (number): Scheme category ID (e.g., CONTROL_SCHEME_CAM_AND_INV)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Active scheme number (1-8)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Control Scheme Types:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scheme 1"}),": Classic style with direct remappable controls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schemes 2-3"}),": R-Stick navigation with optional modifier"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schemes 4-7"}),": D-Pad navigation with advanced twin-stick support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Even Schemes"}),": Require modifier button for camera controls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schemes 4-7"}),": Support free aiming and camera movement"]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-4",children:["TheInput",":SupportsControllerFreeAiming","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if the current control scheme supports free aiming with analog sticks."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if free aiming is supported (schemes 4-7)"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-5",children:["TheInput",":SupportsControllerFreeCamera","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if the current control scheme supports free camera movement."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if free camera is supported (schemes 2-7)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"position-and-entity-detection",children:"Position and Entity Detection"}),"\n",(0,i.jsx)(n.h3,{id:"world-position",children:"World Position"}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-6",children:["TheInput",":GetWorldPosition","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets the world position corresponding to the current mouse cursor position."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(Vector3|nil): World position vector or nil if invalid"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinputheight",children:["TheInput",":GetWorldXZWithHeight","(height)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nProjects screen position to world XZ coordinates at a specific height."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"height"})," (number): Y-axis height for projection"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): World X and Z coordinates"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"entity-detection",children:"Entity Detection"}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-7",children:["TheInput",":GetWorldEntityUnderMouse","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets the world entity currently under the mouse cursor."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(Entity|nil): World entity under mouse or nil"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-8",children:["TheInput",":GetHUDEntityUnderMouse","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets the HUD/UI entity currently under the mouse cursor."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(Entity|nil): HUD entity under mouse or nil"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-9",children:["TheInput",":GetAllEntitiesUnderMouse","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets all entities under the mouse cursor, ordered by depth."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): Array of entities under mouse cursor"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"text-input-and-virtual-keyboard",children:"Text Input and Virtual Keyboard"}),"\n",(0,i.jsx)(n.h3,{id:"virtual-keyboard-management",children:"Virtual Keyboard Management"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputtext_widget",children:["TheInput",":OpenVirtualKeyboard","(text_widget)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nOpens the platform virtual keyboard for text input (Steam Deck, console)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"text_widget"})," (Widget): Text widget requesting keyboard input"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if virtual keyboard was opened successfully"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinputfor_text_widget",children:["TheInput",":AbortVirtualKeyboard","(for_text_widget)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCloses the virtual keyboard for a specific text widget."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"for_text_widget"})," (Widget): Text widget to close keyboard for"]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinput-10",children:["TheInput",":PlatformUsesVirtualKeyboard","()"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if the current platform uses virtual keyboards for text input."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if platform uses virtual keyboards"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"text-input-events",children:"Text Input Events"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputfn-3",children:["TheInput",":AddTextInputHandler","(fn)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRegisters a handler for text input events."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"})," (function): Callback function receiving text parameter"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"control-mapping-and-localization",children:"Control Mapping and Localization"}),"\n",(0,i.jsx)(n.h3,{id:"control-mapping",children:"Control Mapping"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputdeviceid-controlid-use_default_mapping-use_control_mapper",children:["TheInput",":GetLocalizedControl","(deviceId, controlId, use_default_mapping, use_control_mapper)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGets the localized display name for a control mapping on a specific device."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deviceId"})," (number): Input device ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"controlId"})," (number): Control ID to get mapping for"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"use_default_mapping"})," (boolean): Whether to use default mapping"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"use_control_mapper"})," (boolean): Whether to use control mapper"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(string): Localized control name/description"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"theinputdeviceid-controlid",children:["TheInput",":IsControlMapped","(deviceId, controlId)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if a control is mapped on a specific device."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deviceId"})," (number): Input device ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"controlId"})," (number): Control ID to check"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if control is mapped"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"special-key-detection",children:"Special Key Detection"}),"\n",(0,i.jsxs)(n.h4,{id:"theinputkey-1",children:["TheInput",":IsPasteKey","(key)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if a key combination represents a paste operation across platforms."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key"})," (number): Key being checked"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if key combination is paste (Ctrl+V, Cmd+V, Shift+Insert)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"platform-integration",children:"Platform Integration"}),"\n",(0,i.jsx)(n.h3,{id:"platform-detection",children:"Platform Detection"}),"\n",(0,i.jsx)(n.p,{children:"The input system automatically adapts to different platforms:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Console Platforms"}),": Optimized for controller input"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PC Platforms"}),": Full keyboard/mouse support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Steam Deck"}),": Virtual keyboard integration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Platform"}),": Unified control mapping"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Caching"}),": Controller state caching for performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Entity Filtering"}),": Mouse-through entity filtering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frame-Based Updates"}),": Input state updates tied to frame rate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Management"}),": Automatic cleanup of event handlers"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"global-functions",children:"Global Functions"}),"\n",(0,i.jsx)(n.p,{children:"The input system provides global callback functions for C++ integration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"function OnPosition(x, y)           -- Mouse position updates\nfunction OnControl(control, digital, analog)  -- Control events\nfunction OnMouseButton(button, is_up, x, y)  -- Mouse button events\nfunction OnInputKey(key, is_up)     -- Keyboard events\nfunction OnInputText(text)          -- Text input events\nfunction OnGesture(gesture)         -- Touch/gesture events\nfunction OnControlMapped(deviceId, controlId, inputId, hasChanged)  -- Control mapping\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Development Enhancement (Build 676312):"}),"\nThe OnControl function now includes validation line numbers (",(0,i.jsx)(n.code,{children:"ValidateLineNumber(162)"})," and ",(0,i.jsx)(n.code,{children:"ValidateLineNumber(171)"}),") for debugging and development verification purposes. These checkpoints assist in ensuring code integrity during development phases."]}),"\n",(0,i.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"input-handler-setup",children:"Input Handler Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Register multiple input handlers\nlocal input_handlers = {}\n\n-- Keyboard handler\ntable.insert(input_handlers, TheInput:AddKeyDownHandler(KEY_TAB, function()\n    -- Toggle inventory\nend))\n\n-- Control handler  \ntable.insert(input_handlers, TheInput:AddControlHandler(CONTROL_ACTION, function(control, down)\n    if down then\n        -- Perform action\n    end\nend))\n\n-- Cleanup function\nfunction CleanupInputHandlers()\n    for _, handler in ipairs(input_handlers) do\n        handler:Remove()\n    end\n    input_handlers = {}\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"virtual-control-integration",children:"Virtual Control Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check virtual controls with scheme awareness\nlocal function CheckMovementInput()\n    local scheme = TheInput:GetActiveControlScheme(CONTROL_SCHEME_CAM_AND_INV)\n    \n    if TheInput:SupportsControllerFreeAiming() then\n        -- Use twin-stick controls\n        local aim_x = TheInput:GetAnalogControlValue(VIRTUAL_CONTROL_AIM_RIGHT) - \n                     TheInput:GetAnalogControlValue(VIRTUAL_CONTROL_AIM_LEFT)\n    else\n        -- Use traditional controls\n        local move_x = TheInput:IsControlPressed(CONTROL_MOVE_RIGHT) and 1 or 0\n        move_x = move_x - (TheInput:IsControlPressed(CONTROL_MOVE_LEFT) and 1 or 0)\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/input/haptics",children:"Haptics"}),": Haptic feedback triggered by input events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./events.md",children:"Events"}),": Event system used for input event processing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./constants.md",children:"Constants"}),": Input constants and control definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"mdc:dst-api-webdocs/path/to/profile.md",children:"Profile System"}),": Control scheme preference storage"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);