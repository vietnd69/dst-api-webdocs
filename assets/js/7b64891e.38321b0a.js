"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5309],{4120:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/global-objects/thenet","title":"TheNet","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/global-objects/thenet.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/thenet","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/thenet","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"thenet","title":"TheNet","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"ThePlayer","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theplayer"},"next":{"title":"TheSim","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/thesim"}}');var a=t(4848),i=t(8453);const r={id:"thenet",title:"TheNet",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="TheNet",l={},d=[{value:"Basic Network Information",id:"basic-network-information",level:2},{value:"Player Information",id:"player-information",level:2},{value:"Messages and Announcements",id:"messages-and-announcements",level:2},{value:"Server Management",id:"server-management",level:2},{value:"Remote Procedure Calls (RPCs)",id:"remote-procedure-calls-rpcs",level:2},{value:"World Management",id:"world-management",level:2},{value:"Online Features",id:"online-features",level:2},{value:"Mod Management",id:"mod-management",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"thenet",children:"TheNet"})}),"\n",(0,a.jsx)(n.p,{children:"TheNet is the global object that manages networking functions and connections in Don't Starve Together. It provides interfaces for client-server communications, player information, server settings, and more."}),"\n",(0,a.jsx)(n.h2,{id:"basic-network-information",children:"Basic Network Information"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if the game is running on a dedicated server\nlocal is_dedicated = TheNet:IsDedicated()\n\n-- Check if the game is running as a server\nlocal is_server = TheNet:GetIsServer()\n\n-- Check if the server is client-hosted (non-dedicated)\nlocal is_client_hosted = TheNet:GetServerIsClientHosted()\n\n-- Check if the current instance is the master simulation\nlocal is_master_sim = TheNet:GetIsMasterSimulation()\n\n-- Check if the current instance is a client\nlocal is_client = TheNet:GetIsClient()\n\n-- Check if the server is paused\nlocal is_paused = TheNet:IsServerPaused()\n\n-- Get the current game mode\nlocal game_mode = TheNet:GetServerGameMode() -- Returns "survival", "wilderness", "endless", or "lavaarena", "quagmire" for event servers\n'})}),"\n",(0,a.jsx)(n.h2,{id:"player-information",children:"Player Information"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get the local player's user ID\nlocal user_id = TheNet:GetUserID()\n\n-- Get the client table (information about all connected clients)\nlocal clients = TheNet:GetClientTable()\n\n-- Get information about a specific client\nlocal client_info = TheNet:GetClientTableForUser(userid)\n\n-- Check if a player is an administrator\nlocal is_admin = TheNet:GetIsServerAdmin()\n\n-- Check if PVP is enabled\nlocal pvp_enabled = TheNet:GetPVPEnabled()\n\n-- Get the default maximum number of players allowed\nlocal max_players = TheNet:GetDefaultMaxPlayers()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"messages-and-announcements",children:"Messages and Announcements"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Send a system message (only visible to the local client)\nTheNet:SystemMessage("This is a system message")\n\n-- Send an announcement (visible to all players)\nTheNet:Announce("Important announcement!", nil, nil, "default")\n-- Categories: "join_game", "leave_game", "death", "resurrect", "vote", "vote_passed", "vote_failed", "default"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"server-management",children:"Server Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Start a server\nTheNet:StartServer()\n\n-- Start a client connection\nTheNet:StartClient(ip, port, password)\n\n-- Download server mods\nTheNet:DownloadServerMods()\n\n-- Begin server mod setup\nTheNet:BeginServerModSetup()\n\n-- Set up a specific mod\nTheNet:ServerModSetup(mod_id)\n\n-- Set up a collection of mods\nTheNet:ServerModCollectionSetup(collection_id)\n\n-- Start a vote\nTheNet:StartVote(vote_id, initiator_userid)\n\n-- Stop a current vote\nTheNet:StopVote()\n\n-- Announce vote result\nTheNet:AnnounceVoteResult(vote_id, initiator_name, passed)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"remote-procedure-calls-rpcs",children:"Remote Procedure Calls (RPCs)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Send an RPC to the server\nTheNet:SendRPCToServer(rpc_code, ...)\n\n-- Send an RPC to a client\nTheNet:SendRPCToClient(rpc_code, client_id, ...)\n\n-- Send an RPC to a shard\nTheNet:SendRPCToShard(rpc_code, ...)\n\n-- Send a mod RPC to the server\nTheNet:SendModRPCToServer(namespace, rpc_id, ...)\n\n-- Send a mod RPC to a client\nTheNet:SendModRPCToClient(namespace, rpc_id, client_id, ...)\n\n-- Send a mod RPC to a shard\nTheNet:SendModRPCToShard(namespace, rpc_id, ...)\n\n-- Send a slash command to the server\nTheNet:SendSlashCmdToServer(command)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"world-management",children:"World Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Send a world rollback request\nTheNet:SendWorldRollbackRequestToServer(days)\n\n-- Send a world reset request\nTheNet:SendWorldResetRequestToServer()\n\n-- Get the session identifier\nlocal session_id = TheNet:GetSessionIdentifier()\n\n-- Get a world session file\nlocal file = TheNet:GetWorldSessionFile(session_id)\n\n-- Get a world session file in a cluster slot\nlocal file = TheNet:GetWorldSessionFileInClusterSlot(slot_num, shard_name, session_id)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"online-features",children:"Online Features"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Check if the game is in online mode\nlocal is_online = TheNet:IsOnlineMode()\n\n-- Get network statistics\nlocal stats = TheNet:GetNetworkStatistics()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"mod-management",children:"Mod Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get the list of server mod names\nlocal mods = TheNet:GetServerModNames()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Server vs. Client Context"}),": Many TheNet functions behave differently depending on whether they're called on a server or client"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Dedicated vs. Client-Hosted"}),": Some functions specifically check for dedicated servers versus client-hosted servers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Master Simulation"}),": Some operations should only be performed in the master simulation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Permissions"}),": Operations like server administration require appropriate permissions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Network Performance"}),": Avoid sending unnecessary network messages that could impact performance"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Server Administration"}),": Managing server settings, votes, and mod configurations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Player Information"}),": Getting information about connected players"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Network Communication"}),": Sending data between clients and servers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"World Management"}),": Managing world state and session information"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Announcements"}),": Displaying messages to players"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);