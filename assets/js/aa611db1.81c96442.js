"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2546],{5492:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-vanilla/node-types/brain","title":"Brain","description":"Last Update: 2023-08-15","source":"@site/docs/api-vanilla/node-types/brain.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/brain","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/brain","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"brain","title":"Brain","sidebar_position":3,"last_updated":"2023-08-15T00:00:00.000Z","version":624447},"sidebar":"docs","previous":{"title":"Sequence Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes"},"next":{"title":"Data Types","permalink":"/dst-api-webdocs/docs/category/data-types"}}');var r=i(4848),s=i(8453);const a={id:"brain",title:"Brain",sidebar_position:3,last_updated:new Date("2023-08-15T00:00:00.000Z"),version:624447},d="Brain",o={},l=[{value:"Brain properties and methods",id:"brain-properties-and-methods",level:2},{value:"Properties",id:"properties",level:2},{value:"inst: Entity <code>[readonly]</code>",id:"inst-entity-readonly",level:3},{value:"events: <code>Table</code> <code>[readonly]</code>",id:"events-table-readonly",level:3},{value:"bt: BehaviorTree <code>[readonly]</code>",id:"bt-behaviortree-readonly",level:3},{value:"currentbehaviour: <code>String</code> | null <code>[readonly]</code>",id:"currentbehaviour-string--null-readonly",level:3},{value:"thinkperiod: <code>Number</code>",id:"thinkperiod-number",level:3},{value:"Methods",id:"methods",level:2},{value:"OnStart(): <code>void</code>",id:"onstart-void",level:3},{value:"OnStop(): <code>void</code>",id:"onstop-void",level:3},{value:"Start(): <code>void</code>",id:"start-void",level:3},{value:"Stop(): <code>void</code>",id:"stop-void",level:3},{value:"AddEventHandler(event: <code>String</code>, fn: <code>Function</code>): <code>void</code>",id:"addeventhandlerevent-string-fn-function-void",level:3},{value:"Events",id:"events",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Brain Implementation",id:"basic-brain-implementation",level:3},{value:"Complex Brain with Memory",id:"complex-brain-with-memory",level:3},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Last Update: 2023-08-15"})}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"brain",children:"Brain"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"API Version: 624447"})}),"\n",(0,r.jsx)(n.p,{children:"The Brain node type controls entity AI decision-making through behavior trees. It serves as the central controller for non-player entities, determining their actions based on behavior tree nodes, events, and world conditions."}),"\n",(0,r.jsx)(n.h2,{id:"brain-properties-and-methods",children:"Brain properties and methods"}),"\n",(0,r.jsx)(n.p,{children:"Brain provides the following key properties and methods:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Properties"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," - Reference to the entity this brain controls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"events"})," - Table of registered event handlers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bt"})," - The behavior tree that defines decision-making"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"currentbehaviour"})," - Name of the currently executing behavior"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"thinkperiod"})," - Time between brain updates in seconds"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OnStart()"})," - Called when the brain starts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OnStop()"})," - Called when the brain stops"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Start()"})," - Activates the brain"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Stop()"})," - Deactivates the brain"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AddEventHandler()"})," - Registers an event handler"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.h3,{id:"inst-entity-readonly",children:["inst: ",(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"})," ",(0,r.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,r.jsx)(n.p,{children:"A reference to the entity that this Brain is controlling."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Access the brain's entity\nlocal health = brain.inst.components.health\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"events-table-readonly",children:["events: ",(0,r.jsx)(n.code,{children:"Table"})," ",(0,r.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,r.jsx)(n.p,{children:"Table of event handlers registered for this brain. Events are used to react to various stimuli in the game world."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- View registered events\nfor event, handler in pairs(brain.events) do\n    print("Brain responds to: " .. event)\nend\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"bt-behaviortree-readonly",children:["bt: ",(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/behavior-tree",children:"BehaviorTree"})," ",(0,r.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,r.jsx)(n.p,{children:"The behavior tree that defines this brain's decision-making process. The BehaviorTree contains the root node of the behavior tree hierarchy."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Access behavior tree status\nlocal status = brain.bt.root:GetStatus()\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"currentbehaviour-string--null-readonly",children:["currentbehaviour: ",(0,r.jsx)(n.code,{children:"String"})," | null ",(0,r.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,r.jsx)(n.p,{children:"The name of the behavior currently being executed, or nil if no behavior is active."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get current behavior\nif brain.currentbehaviour then\n    print("Currently executing: " .. brain.currentbehaviour)\nelse\n    print("No behavior currently active")\nend\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"thinkperiod-number",children:["thinkperiod: ",(0,r.jsx)(n.code,{children:"Number"})]}),"\n",(0,r.jsx)(n.p,{children:"Time between brain updates in seconds. Lower values make the AI more responsive but increase performance cost."}),"\n",(0,r.jsx)(n.p,{children:"Default value: 0.5 (updates twice per second)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Set more frequent updates for this brain\nbrain.thinkperiod = 0.25  -- Update 4 times per second\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(n.h3,{id:"onstart-void",children:["OnStart(): ",(0,r.jsx)(n.code,{children:"void"})]}),"\n",(0,r.jsx)(n.p,{children:"Virtual method called when the brain starts. Override this in your custom brain implementation to set up the behavior tree."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function MyBrain:OnStart()\n    -- Create behavior tree\n    local root = PriorityNode({\n        AttackWhenHungry(self.inst),\n        Wander(self.inst)\n    })\n    \n    self.bt = BT(self.inst, root)\nend\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"onstop-void",children:["OnStop(): ",(0,r.jsx)(n.code,{children:"void"})]}),"\n",(0,r.jsx)(n.p,{children:"Virtual method called when the brain stops. Override this to clean up any resources or states when the brain deactivates."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function MyBrain:OnStop()\n    -- Clean up any active states\n    self.inst.components.combat:SetTarget(nil)\nend\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"start-void",children:["Start(): ",(0,r.jsx)(n.code,{children:"void"})]}),"\n",(0,r.jsx)(n.p,{children:"Activates the brain, initializing the behavior tree and beginning the AI's decision-making process."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Manually start a brain\nbrain:Start()\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"stop-void",children:["Stop(): ",(0,r.jsx)(n.code,{children:"void"})]}),"\n",(0,r.jsx)(n.p,{children:"Deactivates the brain, stopping all AI behaviors and pausing the behavior tree evaluation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Manually stop a brain\nbrain:Stop()\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"addeventhandlerevent-string-fn-function-void",children:["AddEventHandler(event: ",(0,r.jsx)(n.code,{children:"String"}),", fn: ",(0,r.jsx)(n.code,{children:"Function"}),"): ",(0,r.jsx)(n.code,{children:"void"})]}),"\n",(0,r.jsx)(n.p,{children:"Registers a handler for the specified event name. The handler will be called when the event occurs."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add event handler for attacks\nbrain:AddEventHandler("attacked", function(inst, data)\n    -- React to being attacked\n    inst.components.combat:SetTarget(data.attacker)\nend)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,r.jsx)(n.p,{children:"Brain nodes respond to these common events:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event"}),(0,r.jsx)(n.th,{children:"Triggered When"}),(0,r.jsx)(n.th,{children:"Typical Response"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"attacked"})}),(0,r.jsx)(n.td,{children:"Entity is hit by an attack"}),(0,r.jsx)(n.td,{children:"Set target to attacker"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onhitother"})}),(0,r.jsx)(n.td,{children:"Entity successfully hits another"}),(0,r.jsx)(n.td,{children:"Continue attacking"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"newcombattarget"})}),(0,r.jsx)(n.td,{children:"Combat component acquires target"}),(0,r.jsx)(n.td,{children:"Switch to attack behavior"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"entitysleep"})}),(0,r.jsx)(n.td,{children:"Entity is removed from active world"}),(0,r.jsx)(n.td,{children:"Pause brain processing"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"entitywake"})}),(0,r.jsx)(n.td,{children:"Entity is added to active world"}),(0,r.jsx)(n.td,{children:"Resume brain processing"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-brain-implementation",children:"Basic Brain Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local MyBrain = Class(Brain, function(self, inst)\n    -- Initialize brain with the entity\n    Brain._ctor(self, inst)\nend)\n\nfunction MyBrain:OnStart()\n    -- Create a behavior tree for this brain\n    local root = PriorityNode({\n        -- Run away from threats\n        RunAway(self.inst, "player", 4, 6),\n        \n        -- Attack targets in range\n        ChaseAndAttack(self.inst, 10),\n        \n        -- Default behavior when nothing else to do\n        Wander(self.inst)\n    })\n    \n    -- Set up behavior tree\n    self.bt = BT(self.inst, root)\nend\n\n-- Register event handlers\nfunction MyBrain:OnInitializationComplete()\n    self:AddEventHandler("attacked", function(inst, data)\n        -- Remember who attacked us\n        self.inst.components.combat:SetTarget(data.attacker)\n    end)\nend\n\nreturn MyBrain\n'})}),"\n",(0,r.jsx)(n.h3,{id:"complex-brain-with-memory",children:"Complex Brain with Memory"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local ComplexBrain = Class(Brain, function(self, inst)\n    Brain._ctor(self, inst)\n    \n    -- Brain memory for decision making\n    self.home_position = inst:GetPosition()\n    self.has_target = false\n    self.flee_time = 0\nend)\n\nfunction ComplexBrain:OnStart()\n    -- Create a more complex behavior tree with state\n    local root = PriorityNode({\n        -- Flee when health is low\n        DoAction(self.inst, function() \n            if self.inst.components.health:GetPercent() < 0.25 then\n                self.flee_time = GetTime()\n                return true\n            end\n            return false\n        end, "FleeOnLowHealth", function() \n            return RunAway(self.inst, "player", 8, 12) \n        end),\n        \n        -- Return home after fleeing\n        DoAction(self.inst, function()\n            if self.flee_time > 0 and GetTime() - self.flee_time > 10 then\n                self.flee_time = 0\n                return true\n            end\n            return false\n        end, "ReturnHome", function()\n            return GoToPoint(self.inst, self.home_position)\n        end),\n        \n        -- Attack nearby enemies\n        ChaseAndAttack(self.inst, 15),\n        \n        -- Wander around home\n        Wander(self.inst, function() return self.home_position end, 20)\n    })\n    \n    self.bt = BT(self.inst, root)\nend\n\nreturn ComplexBrain\n'})}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/behavior-node",children:"BehaviorNode"})," - Base class for all behavior tree nodes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes",children:"PriorityNode"})," - Node for selecting behaviors by priority"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes",children:"SequenceNode"})," - Node for executing behaviors in sequence"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);