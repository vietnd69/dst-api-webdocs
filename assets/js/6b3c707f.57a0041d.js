"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[99939],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>t});var i=s(96540);const r={},l=i.createContext(r);function d(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(l.Provider,{value:n},e.children)}},96858:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"game-scripts/core-systems/data-management/assets/json","title":"JSON","description":"JSON encoding and decoding support for Lua data structures","source":"@site/docs/game-scripts/core-systems/data-management/assets/json.md","sourceDirName":"game-scripts/core-systems/data-management/assets","slug":"/game-scripts/core-systems/data-management/assets/json","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/assets/json","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"json","title":"JSON","description":"JSON encoding and decoding support for Lua data structures","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Assets Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/assets/"},"next":{"title":"Klump","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/assets/klump"}}');var r=s(74848),l=s(28453);const d={id:"json",title:"JSON",description:"JSON encoding and decoding support for Lua data structures",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="JSON",c={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Important Notice",id:"important-notice",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"encode(v)",id:"encode",level:3},{value:"encode_compliant(v)",id:"encode-compliant",level:3},{value:"decode(s, startPos)",id:"decode",level:3},{value:"null()",id:"null",level:3},{value:"Internal Functions",id:"internal-functions",level:2},{value:"String Escaping Differences",id:"string-escaping-differences",level:2},{value:"Game Format (encode)",id:"game-format-encode",level:3},{value:"Compliant Format (encode_compliant)",id:"compliant-format-encode_compliant",level:3},{value:"Array Detection",id:"array-detection",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Performance Notes",id:"performance-notes",level:2},{value:"Related Modules",id:"related-modules",level:2},{value:"License",id:"license",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"json",children:"JSON"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"json"})," module provides JSON encoding and decoding support for the Lua language. This is a modified version of JSON4Lua (version 0.9.40) that includes game-specific adaptations for Don't Starve Together's data handling requirements."]}),"\n",(0,r.jsx)(n.h2,{id:"important-notice",children:"Important Notice"}),"\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Warning"}),": The ",(0,r.jsx)(n.code,{children:"encode()"})," function is ",(0,r.jsx)(n.strong,{children:"not compliant"})," with JSON standards. Only use this for game data persistence. For external services (analytics, leaderboards, etc.), use ",(0,r.jsx)(n.code,{children:"encode_compliant()"})," instead."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local json = require("json")\n\n-- Encoding game data\nlocal data = { health = 100, items = {"axe", "pickaxe"} }\nlocal encoded = json.encode(data)\n\n-- Decoding game data\nlocal decoded = json.decode(encoded)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"encode",children:"encode(v)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nEncodes an arbitrary Lua object/variable into a JSON string. This function uses game-specific string encoding that is not compliant with JSON standards but works with the game's decode function."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"v"})," (any): The Lua object/variable to be JSON encoded"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): JSON-encoded string in internal Lua string format"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local data = {\n    player = "Wilson",\n    health = 100,\n    inventory = {"axe", "berries", nil, "torch"},\n    position = {x = 10, y = 0, z = 15}\n}\n\nlocal json_string = json.encode(data)\n-- Returns: {"player":"Wilson","health":100,"inventory":["axe","berries",null,"torch"],"position":{"x":10,"y":0,"z":15}}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supported Types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nil"})," \u2192 ",(0,r.jsx)(n.code,{children:'"null"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"string"})," \u2192 JSON string with game-specific escaping"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"number"})," \u2192 JSON number"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"boolean"})," \u2192 JSON boolean"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"table"})," \u2192 JSON object or array"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"function"})," (only ",(0,r.jsx)(n.code,{children:"json.null"}),") \u2192 ",(0,r.jsx)(n.code,{children:'"null"'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"encode-compliant",children:"encode_compliant(v)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nEncodes a Lua object into JSON-compliant format suitable for external web services. The game cannot decode this output format."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"v"})," (any): The Lua object/variable to be JSON encoded"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Standards-compliant JSON string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local data = { message = "Hello\\nWorld", count = 42 }\nlocal compliant_json = json.encode_compliant(data)\n-- Safe to send to external APIs\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Never add decode support for this function's output. The format may change without warning."]}),"\n",(0,r.jsx)(n.h3,{id:"decode",children:"decode(s, startPos)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nDecodes a JSON string and returns the decoded value as a Lua data structure."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"s"})," (string): The JSON string to decode"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"startPos"})," (number, optional): Starting position in the string (defaults to 1)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(any): The decoded Lua object (table, string, number, boolean, or nil)"}),"\n",(0,r.jsx)(n.li,{children:"(number): Position of the first character after the scanned JSON object"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local json_string = \'{"health":100,"items":["axe","berries"]}\'\nlocal data, next_pos = json.decode(json_string)\n\nprint(data.health) -- 100\nprint(data.items[1]) -- "axe"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supported Input:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["JSON objects ",(0,r.jsx)(n.code,{children:"{}"})]}),"\n",(0,r.jsxs)(n.li,{children:["JSON arrays ",(0,r.jsx)(n.code,{children:"[]"})]}),"\n",(0,r.jsx)(n.li,{children:"JSON strings (single or double quoted)"}),"\n",(0,r.jsx)(n.li,{children:"JSON numbers (including scientific notation)"}),"\n",(0,r.jsxs)(n.li,{children:["JSON booleans (",(0,r.jsx)(n.code,{children:"true"}),", ",(0,r.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["JSON null (",(0,r.jsx)(n.code,{children:"null"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["C-style comments ",(0,r.jsx)(n.code,{children:"/* */"})," (ignored)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"null",children:"null()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nReturns a null value that can be used in associative arrays. This allows explicit null values in tables where ",(0,r.jsx)(n.code,{children:"nil"})," would be discarded."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): The null function reference"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local data = {\n    name = "Wilson",\n    age = json.null(), -- Explicit null value\n    items = {"axe", json.null(), "berries"} -- Null in array\n}\n\nlocal encoded = json.encode(data)\n-- Results in: {"name":"Wilson","age":null,"items":["axe",null,"berries"]}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"internal-functions",children:"Internal Functions"}),"\n",(0,r.jsx)(n.p,{children:"The module includes several private functions for parsing different JSON elements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decode_scanArray(s, startPos)"}),": Scans JSON arrays"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decode_scanObject(s, startPos)"}),": Scans JSON objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decode_scanString(s, startPos)"}),": Scans JSON strings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decode_scanNumber(s, startPos)"}),": Scans JSON numbers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decode_scanConstant(s, startPos)"}),": Scans constants (true, false, null)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decode_scanComment(s, startPos)"}),": Scans and discards comments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decode_scanWhitespace(s, startPos)"}),": Skips whitespace"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"encodeString(s)"}),": Encodes strings with game-specific escaping"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"encodeString_compliant(s)"}),": Encodes strings with JSON-compliant escaping"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isArray(t)"}),": Determines if a table should be encoded as an array"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isEncodable(o)"}),": Checks if an object can be JSON encoded"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"string-escaping-differences",children:"String Escaping Differences"}),"\n",(0,r.jsx)(n.h3,{id:"game-format-encode",children:"Game Format (encode)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Escapes both single and double quotes\ns = string.gsub(s, \"'\", \"\\\\'\")  -- Game-specific\ns = string.gsub(s, '\"', '\\\\\"')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"compliant-format-encode_compliant",children:"Compliant Format (encode_compliant)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Only escapes double quotes (JSON standard)\ns = string.gsub(s, '\"', '\\\\\"')\n-- Does not escape single quotes\n"})}),"\n",(0,r.jsx)(n.h2,{id:"array-detection",children:"Array Detection"}),"\n",(0,r.jsx)(n.p,{children:"The module uses specific logic to determine if a table should be encoded as a JSON array:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Array Criteria:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Has indexes 1..n for n items"}),"\n",(0,r.jsx)(n.li,{children:"No other encodable data except optional 'n' field"}),"\n",(0,r.jsx)(n.li,{children:"All indexed elements must be encodable"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Object Otherwise:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Any table not meeting array criteria"}),"\n",(0,r.jsx)(n.li,{children:"Encoded as JSON object with key-value pairs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(n.p,{children:["The module uses ",(0,r.jsx)(n.code,{children:"tracked_assert"})," for error reporting:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Unterminated strings or objects"}),"\n",(0,r.jsx)(n.li,{children:"Invalid JSON syntax"}),"\n",(0,r.jsx)(n.li,{children:"Unsupported data types during encoding"}),"\n",(0,r.jsx)(n.li,{children:"Malformed numeric values"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"performance-notes",children:"Performance Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"table.concat()"})," for efficient string building during encoding"]}),"\n",(0,r.jsx)(n.li,{children:"Supports comment parsing for flexible JSON input"}),"\n",(0,r.jsx)(n.li,{children:"Optimized array detection algorithm"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./fileutil.md",children:"fileutil"}),": File operations that may use JSON serialization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./saveindex.md",children:"saveindex"}),": Save system that relies on JSON encoding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./networking.md",children:"networking"}),": Network communication using JSON data"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,r.jsxs)(n.p,{children:["This module is based on JSON4Lua by Craig Mason-Jones, released under the MIT License. The original homepage: ",(0,r.jsx)(n.a,{href:"http://json.luaforge.net/",children:"http://json.luaforge.net/"})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);