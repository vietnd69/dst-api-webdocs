"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7118],{4095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/stategraphs/stategraphs-overview","title":"Stategraphs Overview","description":"Stategraphs are a powerful state machine system that controls entity behavior, animations, and interactions in Don\'t Starve Together. They provide a structured way to define how entities transition between different states based on events and actions.","source":"@site/docs/api-vanilla/stategraphs/index.md","sourceDirName":"api-vanilla/stategraphs","slug":"/api/stategraphs","permalink":"/dst-api-webdocs/docs/api/stategraphs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"stategraphs-overview","title":"Stategraphs Overview","sidebar_position":1,"slug":"/api/stategraphs"},"sidebar":"docs","previous":{"title":"State Graphs","permalink":"/dst-api-webdocs/docs/category/state-graphs"},"next":{"title":"States API","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/states"}}');var s=n(4848),i=n(8453);const r={id:"stategraphs-overview",title:"Stategraphs Overview",sidebar_position:1,slug:"/api/stategraphs"},o="Stategraphs Overview",l={},d=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Creating a Stategraph",id:"creating-a-stategraph",level:2},{value:"Using Stategraphs",id:"using-stategraphs",level:2},{value:"Common States and Handlers",id:"common-states-and-handlers",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"stategraphs-overview",children:"Stategraphs Overview"})}),"\n",(0,s.jsx)(t.p,{children:"Stategraphs are a powerful state machine system that controls entity behavior, animations, and interactions in Don't Starve Together. They provide a structured way to define how entities transition between different states based on events and actions."}),"\n",(0,s.jsx)(t.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(t.p,{children:"A stategraph consists of several key components:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"States"}),": Defined behaviors that an entity can be in at any given time (e.g., idle, walking, attacking)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Events"}),": Triggers that can cause state transitions (e.g., receiving damage, reaching a target)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Transitions"}),": Rules for moving between states in response to events"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"ActionHandlers"}),": Special handlers for gameplay actions initiated by the player or AI"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-stategraph",children:"Creating a Stategraph"}),"\n",(0,s.jsx)(t.p,{children:"To create a stategraph, you'll need to:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Define the states with their enter/exit behaviors and timelines"}),"\n",(0,s.jsx)(t.li,{children:"Set up event handlers to respond to game events"}),"\n",(0,s.jsx)(t.li,{children:"Define any necessary action handlers"}),"\n",(0,s.jsx)(t.li,{children:"Return a StateGraph object"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Basic example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local function CreateMyEntityStategraph()\n    local states = {\n        State{\n            name = "idle",\n            tags = { "idle", "canrotate" },\n            onenter = function(inst)\n                inst.AnimState:PlayAnimation("idle")\n            end,\n        },\n        -- More states...\n    }\n\n    local events = {\n        EventHandler("attacked", function(inst)\n            inst.sg:GoToState("hit")\n        end),\n        -- More event handlers...\n    }\n\n    return StateGraph("myentity", states, events, "idle")\nend\n'})}),"\n",(0,s.jsx)(t.h2,{id:"using-stategraphs",children:"Using Stategraphs"}),"\n",(0,s.jsx)(t.p,{children:"To use a stategraph with an entity:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'function MyEntity:Init()\n    -- Create the entity\n    local inst = CreateEntity()\n    \n    -- Add components\n    inst:AddComponent("locomotor")\n    \n    -- Set the stategraph\n    inst:SetStateGraph("SGmyentity")\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(t.h2,{id:"common-states-and-handlers",children:"Common States and Handlers"}),"\n",(0,s.jsxs)(t.p,{children:["Don't Starve Together provides reusable states and handlers in ",(0,s.jsx)(t.code,{children:"commonstates.lua"}),", which you can use to implement standard behaviors like:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Walking/running"}),"\n",(0,s.jsx)(t.li,{children:"Attacking"}),"\n",(0,s.jsx)(t.li,{children:"Taking damage"}),"\n",(0,s.jsx)(t.li,{children:"Sleeping"}),"\n",(0,s.jsx)(t.li,{children:"Freezing"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This module helps maintain consistency across different entities while reducing code duplication."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);