"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[39618],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(96540);const s={},l=t.createContext(s);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(l.Provider,{value:n},e.children)}},86876:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"game-scripts/core-systems/world-systems/entities/prefabutil","title":"Prefab Utilities","description":"Helper functions and utilities for creating and managing prefabs","source":"@site/docs/game-scripts/core-systems/world-systems/entities/prefabutil.md","sourceDirName":"game-scripts/core-systems/world-systems/entities","slug":"/game-scripts/core-systems/world-systems/entities/prefabutil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabutil","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"prefabutil","title":"Prefab Utilities","description":"Helper functions and utilities for creating and managing prefabs","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Prefab Skins Data","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabskins"},"next":{"title":"World Entities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/worldentities"}}');var s=i(74848),l=i(28453);const a={id:"prefabutil",title:"Prefab Utilities",description:"Helper functions and utilities for creating and managing prefabs",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},r="Prefab Utilities",o={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Placer Functions",id:"placer-functions",level:2},{value:"MakePlacer(name, bank, build, anim, onground, snap, metersnap, scale, fixedcameraoffset, facing, postinit_fn, offset, onfailedplacement)",id:"makeplacer",level:3},{value:"Placer Properties",id:"placer-properties",level:3},{value:"Deployable Kit Functions",id:"deployable-kit-functions",level:2},{value:"MakeDeployableKitItem(name, prefab_to_deploy, bank, build, anim, assets, floatable_data, tags, burnable, deployable_data, stack_size, PostMasterSimfn)",id:"makedeployablekititem",level:3},{value:"Deployment System",id:"deployment-system",level:2},{value:"deployablekititem_ondeploy(inst, pt, deployer, rot)",id:"deployablekititem-ondeploy",level:3},{value:"Common Deployment Configurations",id:"common-deployment-configurations",level:2},{value:"Deployment Modes",id:"deployment-modes",level:3},{value:"Deployment Spacing",id:"deployment-spacing",level:3},{value:"Grid Placement",id:"grid-placement",level:3},{value:"Advanced Usage Patterns",id:"advanced-usage-patterns",level:2},{value:"Custom Validation",id:"custom-validation",level:3},{value:"Skin Integration",id:"skin-integration",level:3},{value:"Multi-Stage Deployment",id:"multi-stage-deployment",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"prefab-utilities",children:"Prefab Utilities"})}),"\n",(0,s.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Build Version"}),(0,s.jsx)(n.th,{children:"Change Date"}),(0,s.jsx)(n.th,{children:"Change Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"prefabutil"})," module provides utility functions for creating common types of prefabs, particularly placers and deployable kit items. These functions standardize the creation process and handle common patterns used throughout the game."]}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Create a placer for building preview\nlocal my_placer = MakePlacer("my_structure_placer", "my_structure", "my_structure", "idle")\n\n-- Create a deployable kit item\nlocal my_kit = MakeDeployableKitItem("my_structure_kit", "my_structure", \n    "my_kit", "my_kit", "idle", assets, floatable_data)\n\nreturn my_placer, my_kit\n'})}),"\n",(0,s.jsx)(n.h2,{id:"placer-functions",children:"Placer Functions"}),"\n",(0,s.jsx)(n.h3,{id:"makeplacer",children:"MakePlacer(name, bank, build, anim, onground, snap, metersnap, scale, fixedcameraoffset, facing, postinit_fn, offset, onfailedplacement)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nCreates a placer prefab used for previewing structure placement before building."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," (string): Placer prefab name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bank"})," (string): Animation bank name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"build"})," (string): Animation build name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"anim"})," (string): Animation to play"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onground"})," (boolean, optional): Whether placer should be oriented on ground"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"snap"})," (boolean, optional): Whether to snap to grid"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"metersnap"})," (number, optional): Snap distance in meters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scale"})," (number, optional): Scale multiplier for the placer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fixedcameraoffset"})," (boolean, optional): Whether to use fixed camera offset"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"facing"}),' (string, optional): Facing type ("two", "four", "six", "eight")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"postinit_fn"})," (function, optional): Additional initialization function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"offset"})," (Vector3, optional): Position offset for the placer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onfailedplacement"})," (function, optional): Callback when placement fails"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(Prefab): Configured placer prefab"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic structure placer\nlocal chest_placer = MakePlacer("chest_placer", "treasure_chest", "treasure_chest", "closed")\n\n-- Advanced placer with grid snapping\nlocal fence_placer = MakePlacer("fence_placer", "fence", "fence", "idle", \n    false,    -- not on ground\n    true,     -- snap to grid\n    1,        -- 1 meter snap\n    1,        -- normal scale\n    nil,      -- no fixed camera offset\n    "eight",  -- 8-directional facing\n    function(inst)\n        -- Custom initialization\n        inst.AnimState:SetMultColour(0.6, 0.6, 0.6, 0.6)\n    end\n)\n\n-- Placer with custom offset\nlocal lamp_placer = MakePlacer("lamp_placer", "lamp", "lamp", "idle",\n    false, false, nil, nil, nil, nil, nil,\n    Vector3(0, 1, 0)  -- Raised above ground\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"placer-properties",children:"Placer Properties"}),"\n",(0,s.jsxs)(n.p,{children:["Placers created by ",(0,s.jsx)(n.code,{children:"MakePlacer"})," have several important characteristics:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Tags:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"CLASSIFIED"'})," - Non-networked entity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"NOCLICK"'})," - Cannot be clicked/interacted with"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"placer"'})," - Identifies as a placement preview"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Components:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"placer"})," - Handles placement logic and validation"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Visual Properties:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Light override set to full brightness"}),"\n",(0,s.jsx)(n.li,{children:"Semi-transparent appearance for preview"}),"\n",(0,s.jsx)(n.li,{children:"Snapping and grid alignment support"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"deployable-kit-functions",children:"Deployable Kit Functions"}),"\n",(0,s.jsx)(n.h3,{id:"makedeployablekititem",children:"MakeDeployableKitItem(name, prefab_to_deploy, bank, build, anim, assets, floatable_data, tags, burnable, deployable_data, stack_size, PostMasterSimfn)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nCreates a deployable kit item that can be used to place structures in the world."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," (string): Kit item prefab name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prefab_to_deploy"})," (string): Name of prefab to spawn when deployed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bank"})," (string): Animation bank for the kit item"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"build"})," (string, optional): Animation build (defaults to bank)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"anim"}),' (string, optional): Animation name (defaults to "idle")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"assets"})," (table, optional): Array of Asset objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"floatable_data"})," (table, optional): Floating configuration ",(0,s.jsx)(n.code,{children:"{size, y_offset, scale}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tags"})," (table, optional): Additional tags for the kit item"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"burnable"})," (table/boolean, optional): Burnable configuration or true for default"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"deployable_data"})," (table, optional): Deployment configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stack_size"})," (number, optional): Maximum stack size"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"PostMasterSimfn"})," (function, optional): Additional master sim initialization"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(Prefab): Configured deployable kit item"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Deployable Data Options:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'deployable_data = {\n    deploymode = DEPLOYMODE.ANYWHERE,        -- Where item can be deployed\n    deployspacing = DEPLOYSPACING.MEDIUM,    -- Spacing requirements\n    restrictedtag = "tag_name",              -- Tag restriction for placement\n    usegridplacer = true,                    -- Use grid-based placement\n    usedeployspacingasoffset = true,         -- Use spacing as offset\n    deploytoss_symbol_override = "symbol",   -- Override toss animation symbol\n    custom_candeploy_fn = function() end,    -- Custom deployment validation\n    common_postinit = function(inst) end,    -- Client-side initialization\n    master_postinit = function(inst) end,    -- Server-side initialization\n    OnSave = function(inst, data) end,       -- Save function\n    OnLoad = function(inst, data) end,       -- Load function\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic deployable chest kit\nlocal chest_kit = MakeDeployableKitItem("chest_kit", "treasurechest",\n    "chest_kit", "chest_kit", "idle", {\n        Asset("ANIM", "anim/chest_kit.zip"),\n        Asset("ATLAS", "images/inventoryimages/chest_kit.xml"),\n    }\n)\n\n-- Advanced kit with floating and stacking\nlocal advanced_kit = MakeDeployableKitItem("fence_kit", "fence",\n    "fence_kit", "fence_kit", "idle",\n    assets,\n    {size = "med", y_offset = 0.1, scale = 0.8},  -- floatable_data\n    {"deployable", "kit"},                         -- tags\n    {fuelvalue = 50},                             -- burnable\n    {\n        deploymode = DEPLOYMODE.ANYWHERE,\n        deployspacing = DEPLOYSPACING.LESS,\n        usegridplacer = true,\n        common_postinit = function(inst)\n            inst:AddTag("fence_kit")\n        end,\n        master_postinit = function(inst)\n            inst:AddComponent("fuel")\n            inst.components.fuel.fuelvalue = 50\n        end\n    },\n    20  -- stack_size\n)\n\n-- Kit with custom deployment validation\nlocal special_kit = MakeDeployableKitItem("special_kit", "special_structure",\n    "special_kit", nil, nil, assets, nil, nil, nil,\n    {\n        deploymode = DEPLOYMODE.ANYWHERE,\n        custom_candeploy_fn = function(inst, pt, deployer)\n            -- Only allow deployment on specific ground types\n            local ground = TheWorld.Map:GetTileAtPoint(pt:Get())\n            return ground == GROUND.GRASS or ground == GROUND.FOREST\n        end\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"deployment-system",children:"Deployment System"}),"\n",(0,s.jsx)(n.h3,{id:"deployablekititem-ondeploy",children:"deployablekititem_ondeploy(inst, pt, deployer, rot)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nInternal function that handles the deployment process when a kit item is used."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Process:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Spawns the target prefab at the deployment point"}),"\n",(0,s.jsx)(n.li,{children:"Transfers skin information if available"}),"\n",(0,s.jsxs)(n.li,{children:["Triggers ",(0,s.jsx)(n.code,{children:'"onbuilt"'})," event with deployment context"]}),"\n",(0,s.jsx)(n.li,{children:"Removes the kit item"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Event Data:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- "onbuilt" event data\n{\n    builder = deployer,     -- Entity that deployed the kit\n    pos = pt,              -- Deployment position\n    rot = rot,             -- Deployment rotation\n    deployable = inst      -- The kit item being deployed\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-deployment-configurations",children:"Common Deployment Configurations"}),"\n",(0,s.jsx)(n.h3,{id:"deployment-modes",children:"Deployment Modes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Available deployment modes\nDEPLOYMODE.ANYWHERE          -- Can be placed anywhere valid\nDEPLOYMODE.ON_WATER         -- Must be placed on water\nDEPLOYMODE.ON_LAND          -- Must be placed on land  \nDEPLOYMODE.MAST             -- Special mast placement rules\nDEPLOYMODE.TURF             -- Turf-specific placement\n"})}),"\n",(0,s.jsx)(n.h3,{id:"deployment-spacing",children:"Deployment Spacing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Spacing requirements between deployables\nDEPLOYSPACING.NONE          -- No spacing requirements\nDEPLOYSPACING.LESS          -- Minimal spacing\nDEPLOYSPACING.MEDIUM        -- Standard spacing\nDEPLOYSPACING.MORE          -- Large spacing requirements\n"})}),"\n",(0,s.jsx)(n.h3,{id:"grid-placement",children:"Grid Placement"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Grid-based placement for aligned structures\ndeployable_data = {\n    usegridplacer = true,\n    deployspacing = DEPLOYSPACING.MEDIUM,\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-usage-patterns",children:"Advanced Usage Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"custom-validation",children:"Custom Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Kit that can only be placed near water\nlocal dock_kit = MakeDeployableKitItem("dock_kit", "dock",\n    "dock_kit", nil, nil, assets, nil, nil, nil,\n    {\n        custom_candeploy_fn = function(inst, pt, deployer)\n            -- Check for nearby water\n            local x, y, z = pt:Get()\n            for dx = -3, 3 do\n                for dz = -3, 3 do\n                    local tile = TheWorld.Map:GetTileAtPoint(x + dx, 0, z + dz)\n                    if tile == GROUND.OCEAN or tile == GROUND.POND then\n                        return true\n                    end\n                end\n            end\n            return false, "Must be placed near water"\n        end\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"skin-integration",children:"Skin Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Kit that preserves skin when deployed\nlocal skinnable_kit = MakeDeployableKitItem("chest_kit", "treasurechest",\n    "chest_kit", nil, nil, assets, nil, nil, nil,\n    {\n        master_postinit = function(inst)\n            -- Custom skin handling\n            local old_ondeploy = inst.components.deployable.ondeploy\n            inst.components.deployable.ondeploy = function(inst, pt, deployer, rot)\n                -- Store skin before deployment\n                local skin_name = inst.linked_skinname\n                local structure = SpawnPrefab(inst._prefab_to_deploy, skin_name, inst.skin_id)\n                if structure then\n                    structure.Transform:SetPosition(pt:Get())\n                    structure:PushEvent("onbuilt", {\n                        builder = deployer,\n                        pos = pt,\n                        rot = rot,\n                        deployable = inst\n                    })\n                    inst:Remove()\n                end\n            end\n        end\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"multi-stage-deployment",children:"Multi-Stage Deployment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Kit that creates multiple structures\nlocal complex_kit = MakeDeployableKitItem("base_kit", "main_structure",\n    "base_kit", nil, nil, assets, nil, nil, nil,\n    {\n        master_postinit = function(inst)\n            inst.components.deployable.ondeploy = function(inst, pt, deployer, rot)\n                -- Deploy main structure\n                local main = SpawnPrefab("main_structure")\n                main.Transform:SetPosition(pt:Get())\n                \n                -- Deploy supporting structures\n                local support1 = SpawnPrefab("support_structure")\n                support1.Transform:SetPosition(pt.x + 2, 0, pt.z)\n                \n                local support2 = SpawnPrefab("support_structure")  \n                support2.Transform:SetPosition(pt.x - 2, 0, pt.z)\n                \n                -- Link structures\n                main.supports = {support1, support2}\n                \n                inst:Remove()\n            end\n        end\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabs",children:"Prefabs"}),": Core prefab system and classes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../components/deployable.md",children:"Deployable Component"}),": Deployment logic and validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../components/placer.md",children:"Placer Component"}),": Placement preview system"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./construction.md",children:"Construction"}),": Building and structure creation"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);