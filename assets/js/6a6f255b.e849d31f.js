"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2562],{7818:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"api-vanilla/node-types/priority-nodes","title":"Priority Nodes","description":"Last Update: 2023-08-15","source":"@site/docs/api-vanilla/node-types/priority-nodes.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/priority-nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"priority-nodes","title":"Priority Nodes","sidebar_position":5,"last_updated":"2023-08-15T00:00:00.000Z","version":624447},"sidebar":"docs","previous":{"title":"Decorator Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes"},"next":{"title":"Sequence Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes"}}');var s=i(4848),t=i(8453);const o={id:"priority-nodes",title:"Priority Nodes",sidebar_position:5,last_updated:new Date("2023-08-15T00:00:00.000Z"),version:624447},d="Priority Nodes",l={},a=[{value:"PriorityNode properties and methods",id:"prioritynode-properties-and-methods",level:2},{value:"Properties",id:"properties",level:2},{value:"inst: Entity <code>[readonly]</code>",id:"inst-entity-readonly",level:3},{value:"children: <code>Array&lt;BehaviorNode&gt;</code> <code>[readonly]</code>",id:"children-arraybehaviornode-readonly",level:3},{value:"period: number",id:"period-number",level:3},{value:"lasttime: <code>number</code> <code>[readonly]</code>",id:"lasttime-number-readonly",level:3},{value:"status: &#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39; <code>[readonly]</code>",id:"status-ready--running--success--failure-readonly",level:3},{value:"Methods",id:"methods",level:2},{value:"Visit(): &#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39;",id:"visit-ready--running--success--failure",level:3},{value:"Stop(): <code>void</code>",id:"stop-void",level:3},{value:"Reset(): <code>void</code>",id:"reset-void",level:3},{value:"Built-in Priority Node Types",id:"built-in-priority-node-types",level:2},{value:"PriorityNode(inst: Entity, children: <code>Array&lt;BehaviorNode&gt;</code>, period?: <code>number</code>): <code>PriorityNode</code>",id:"prioritynodeinst-entity-children-arraybehaviornode-period-number-prioritynode",level:3},{value:"BrainPriorityNode(inst: <code>Entity</code>, children: <code>Array&lt;BehaviorNode&gt;</code>, period?: <code>number</code>): <code>PriorityNode</code>",id:"brainprioritynodeinst-entity-children-arraybehaviornode-period-number-prioritynode",level:3},{value:"Common Priority Patterns",id:"common-priority-patterns",level:2},{value:"Survival Hierarchy",id:"survival-hierarchy",level:3},{value:"State-Based Priorities",id:"state-based-priorities",level:3},{value:"Creating Custom Priority Nodes",id:"creating-custom-priority-nodes",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Last Update: 2023-08-15"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"priority-nodes",children:"Priority Nodes"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"API Version: 624447"})}),"\n",(0,s.jsx)(n.p,{children:'Priority Nodes are specialized behavior tree nodes in Don\'t Starve Together that execute child nodes in order of priority until one succeeds. They function as a logical "OR" operation, trying each child node in sequence and stopping at the first one that succeeds.'}),"\n",(0,s.jsx)(n.h2,{id:"prioritynode-properties-and-methods",children:"PriorityNode properties and methods"}),"\n",(0,s.jsx)(n.p,{children:"PriorityNode provides the following key properties and methods:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Properties"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inst"})," - Reference to the entity this node controls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"children"})," - List of child nodes in priority order"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"period"})," - Time between re-evaluations in seconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lasttime"})," - Last evaluation timestamp"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"status"})," - Current execution status of the node"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Methods"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Visit()"})," - Evaluates the node and its children"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Stop()"})," - Stops execution of this node and all children"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Reset()"})," - Resets this node and all children to READY state"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.h3,{id:"inst-entity-readonly",children:["inst: Entity ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"A reference to the entity that this priority node is controlling."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Access the priority node's entity\nlocal health = priority_node.inst.components.health\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"children-arraybehaviornode-readonly",children:["children: ",(0,s.jsx)(n.code,{children:"Array<BehaviorNode>"})," ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"List of child nodes in priority order. Children are evaluated in the order they appear in this array, with earlier children having higher priority."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Create priority node with ordered children\nlocal priority_node = PriorityNode(inst, {\n    RunAway(inst, "character", 5, 8),  -- Highest priority: run away\n    ChaseAndAttack(inst, 10),          -- Medium priority: attack\n    Wander(inst)                       -- Lowest priority: wander\n})\n\n-- Access a specific child\nlocal first_child = priority_node.children[1]\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"period-number",children:"period: number"}),"\n",(0,s.jsx)(n.p,{children:"Time in seconds between re-evaluations of the priority list. If a higher priority node becomes available during execution of a lower priority node, the priority node will wait until the next evaluation period before switching."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Create a priority node that re-evaluates every 0.5 seconds\nlocal priority_node = PriorityNode(inst, {\n    RunAway(inst, "character", 5, 8),\n    ChaseAndAttack(inst, 10),\n    Wander(inst)\n}, 0.5)\n\n-- Modify the period\npriority_node.period = 1.0  -- Re-evaluate every second\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"lasttime-number-readonly",children:["lasttime: ",(0,s.jsx)(n.code,{children:"number"})," ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"Timestamp of the last evaluation, used to determine when the next evaluation should occur based on the period."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Check when the last evaluation occurred\nlocal time_since_last_eval = GetTime() - priority_node.lasttime\nprint("Time since last evaluation: " .. time_since_last_eval .. " seconds")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"status-ready--running--success--failure-readonly",children:["status: 'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE' ",(0,s.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,s.jsx)(n.p,{children:"The current execution status of the priority node:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"READY"}),": Node is ready to begin evaluating children"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RUNNING"}),": Node is currently executing one of its children"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SUCCESS"}),": A child node has succeeded"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FAILURE"}),": All child nodes have failed"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Check the current status\nif priority_node.status == SUCCESS then\n    print("A child node succeeded")\nelseif priority_node.status == FAILURE then\n    print("All child nodes failed")\nend\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"visit-ready--running--success--failure",children:"Visit(): 'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE'"}),"\n",(0,s.jsx)(n.p,{children:"Evaluates the priority node by trying each child in order until one succeeds or all fail."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"function PriorityNode:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n        self.lasttime = GetTime()\n        \n        -- Try to find a child that can run\n        for i, child in ipairs(self.children) do\n            child:Start()\n            local status = child:Visit()\n            \n            if status == RUNNING or status == SUCCESS then\n                self.current_child = i\n                if status == SUCCESS then\n                    self.status = SUCCESS\n                end\n                return self.status\n            end\n            \n            child:Stop()\n        end\n        \n        -- All children failed\n        self.status = FAILURE\n        return self.status\n    end\n    \n    if self.status == RUNNING then\n        -- Check if we should re-evaluate priorities\n        local now = GetTime()\n        if now - self.lasttime >= self.period then\n            self.lasttime = now\n            \n            -- Try higher priority children first\n            for i = 1, self.current_child - 1 do\n                self.children[i]:Start()\n                local status = self.children[i]:Visit()\n                \n                if status == RUNNING or status == SUCCESS then\n                    -- Higher priority child can run, switch to it\n                    self.children[self.current_child]:Stop()\n                    self.current_child = i\n                    if status == SUCCESS then\n                        self.status = SUCCESS\n                    end\n                    return self.status\n                end\n                \n                self.children[i]:Stop()\n            end\n        end\n        \n        -- Continue with current child\n        local status = self.children[self.current_child]:Visit()\n        \n        if status ~= RUNNING then\n            self.status = status\n        end\n    end\n    \n    return self.status\nend\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"stop-void",children:["Stop(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n",(0,s.jsx)(n.p,{children:"Stops execution of this priority node and all its children."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"function PriorityNode:Stop()\n    for i, child in ipairs(self.children) do\n        child:Stop()\n    end\n    self.status = READY\n    self.current_child = nil\nend\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"reset-void",children:["Reset(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n",(0,s.jsx)(n.p,{children:"Resets the priority node and all its children to READY state."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"function PriorityNode:Reset()\n    for i, child in ipairs(self.children) do\n        child:Reset()\n    end\n    self.status = READY\n    self.current_child = nil\nend\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"built-in-priority-node-types",children:"Built-in Priority Node Types"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together includes several pre-defined priority node types:"}),"\n",(0,s.jsxs)(n.h3,{id:"prioritynodeinst-entity-children-arraybehaviornode-period-number-prioritynode",children:["PriorityNode(inst: Entity, children: ",(0,s.jsx)(n.code,{children:"Array<BehaviorNode>"}),", period?: ",(0,s.jsx)(n.code,{children:"number"}),"): ",(0,s.jsx)(n.code,{children:"PriorityNode"})]}),"\n",(0,s.jsx)(n.p,{children:"The basic priority node that executes children in order until one succeeds or all fail."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"inst"}),": Entity the node controls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"children"}),": Array of child nodes in priority order"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"period"}),": (Optional) Time in seconds between re-evaluations"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Create a priority node with three behaviors\nlocal node = PriorityNode(inst, {\n    RunAway(inst, "character", 5, 8),  -- Highest priority\n    ChaseAndAttack(inst, 10),          -- Medium priority\n    Wander(inst)                       -- Lowest priority\n}, 0.5)  -- Re-evaluate priorities every 0.5 seconds\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"brainprioritynodeinst-entity-children-arraybehaviornode-period-number-prioritynode",children:["BrainPriorityNode(inst: ",(0,s.jsx)(n.code,{children:"Entity"}),", children: ",(0,s.jsx)(n.code,{children:"Array<BehaviorNode>"}),", period?: ",(0,s.jsx)(n.code,{children:"number"}),"): ",(0,s.jsx)(n.code,{children:"PriorityNode"})]}),"\n",(0,s.jsx)(n.p,{children:"A priority node that's specifically designed for use in brain components. It works the same as a regular PriorityNode but includes additional brain-specific functionality."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"inst"}),": Entity the node controls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"children"}),": Array of child nodes in priority order"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"period"}),": (Optional) Time in seconds between re-evaluations"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Create a brain priority node\nlocal node = BrainPriorityNode(inst, {\n    PanicBehavior(inst),\n    CombatBehavior(inst),\n    ForageBehavior(inst),\n    IdleBehavior(inst)\n}, 1.0)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"common-priority-patterns",children:"Common Priority Patterns"}),"\n",(0,s.jsx)(n.p,{children:"Here are some common patterns for using priority nodes:"}),"\n",(0,s.jsx)(n.h3,{id:"survival-hierarchy",children:"Survival Hierarchy"}),"\n",(0,s.jsx)(n.p,{children:"Organizing behaviors by survival importance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Survival hierarchy with most important behaviors first\nlocal behavior = PriorityNode(inst, {\n    -- Emergency behaviors (highest priority)\n    SequenceNode(inst, {\n        ConditionNode(function() return inst.components.health:GetPercent() < 0.25 end),\n        RunAway(inst, "character", 8, 12)\n    }),\n    \n    -- Basic needs\n    SequenceNode(inst, {\n        ConditionNode(function() return inst.components.hunger:GetPercent() < 0.25 end),\n        FindAndEatFood(inst)\n    }),\n    \n    -- Opportunistic behaviors\n    SequenceNode(inst, {\n        ConditionNode(function() return inst.components.combat:CanTarget() end),\n        ChaseAndAttack(inst, 10)\n    }),\n    \n    -- Default behaviors (lowest priority)\n    Wander(inst)\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"state-based-priorities",children:"State-Based Priorities"}),"\n",(0,s.jsx)(n.p,{children:"Switching between different behavior sets based on state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Different priority sets based on time of day\nlocal behavior = PriorityNode(inst, {\n    -- Night-time behaviors\n    SequenceNode(inst, {\n        ConditionNode(function() return TheWorld.state.isnight end),\n        PriorityNode(inst, {\n            FindLightSource(inst),\n            SleepBehavior(inst),\n            StayNearHome(inst, 5)\n        })\n    }),\n    \n    -- Day-time behaviors\n    PriorityNode(inst, {\n        GatherResourcesBehavior(inst),\n        ExploreBehavior(inst),\n        Wander(inst)\n    })\n})\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-custom-priority-nodes",children:"Creating Custom Priority Nodes"}),"\n",(0,s.jsx)(n.p,{children:"To create a custom priority node with special behavior:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local CustomPriorityNode = Class(BehaviorNode, function(self, inst, children, period, custom_param)\n    BehaviorNode._ctor(self, "CustomPriorityNode")\n    self.inst = inst\n    self.children = children\n    self.period = period or 0\n    self.lasttime = 0\n    self.current_child = nil\n    self.custom_param = custom_param\nend)\n\nfunction CustomPriorityNode:Visit()\n    -- Custom priority logic here\n    -- ...\n    \n    return self.status\nend\n\nfunction CustomPriorityNode:Stop()\n    for i, child in ipairs(self.children) do\n        child:Stop()\n    end\n    self.status = READY\n    self.current_child = nil\nend\n\n-- Usage\nlocal node = CustomPriorityNode(inst, {\n    RunAway(inst, "character", 5, 8),\n    ChaseAndAttack(inst, 10),\n    Wander(inst)\n}, 0.5, "custom value")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Child Order"}),": Place the most likely to succeed nodes first to avoid unnecessary evaluations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Evaluation Period"}),": Use an appropriate period value - smaller values give more responsive behavior but use more CPU"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Child Count"}),": Keep the number of children manageable; consider using sub-priority nodes for complex hierarchies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Condition Checks"}),": Use ConditionNode wrappers for expensive condition checks to avoid evaluating entire sub-trees"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Management"}),": Be careful with state transitions between different priority children"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/brain",children:"Brain"})," - Brain component that uses behavior trees"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/behavior-node",children:"Behavior Node"})," - Base class for all behavior tree nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes",children:"Sequence Nodes"})," - Nodes that execute actions in sequence"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes",children:"Decorator Nodes"})," - Nodes that modify other nodes' behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes",children:"Condition Nodes"})," - Nodes that evaluate conditions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);