"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9760],{1324:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/shared-properties/network","title":"Network","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/shared-properties/network.md","sourceDirName":"api-vanilla/shared-properties","slug":"/api-vanilla/shared-properties/network","permalink":"/dst-api-webdocs/docs/api-vanilla/shared-properties/network","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"network","title":"Network","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z"}}');var r=t(4848),s=t(8453);const o={id:"network",title:"Network",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z")},a="Network",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Adding Network to an Entity",id:"adding-network-to-an-entity",level:2},{value:"Network Architecture",id:"network-architecture",level:2},{value:"Server vs. Client Code",id:"server-vs-client-code",level:3},{value:"Networking Entity Data",id:"networking-entity-data",level:2},{value:"Basic Networking",id:"basic-networking",level:3},{value:"Network Variables",id:"network-variables",level:3},{value:"NetWorking Components",id:"networking-components",level:2},{value:"NetComponents",id:"netcomponents",level:3},{value:"Classified Entities",id:"classified-entities",level:3},{value:"Network Optimization",id:"network-optimization",level:2},{value:"Network Priority",id:"network-priority",level:3},{value:"Dormant Entities",id:"dormant-entities",level:3},{value:"Common Networking Patterns",id:"common-networking-patterns",level:2},{value:"Master Simulation Check",id:"master-simulation-check",level:3},{value:"Event Handling Across Network",id:"event-handling-across-network",level:3},{value:"Debugging Network Issues",id:"debugging-network-issues",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Tools",id:"debug-tools",level:3},{value:"Example: Fully Networked Entity",id:"example-fully-networked-entity",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"network",children:"Network"})}),"\n",(0,r.jsx)(n.p,{children:"Network is a common property that manages data synchronization between server and client in the multiplayer system. It is a crucial component for creating entities that properly function in Don't Starve Together's client-server architecture."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Don't Starve Together uses a client-server networking model where:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The server (master simulation) maintains the authoritative game state"}),"\n",(0,r.jsx)(n.li,{children:"Clients receive updates from the server and send input to the server"}),"\n",(0,r.jsx)(n.li,{children:"Network components handle the synchronization of entity data"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The Network property is essential for any entity that needs to be visible and interactive across all clients in a multiplayer game."}),"\n",(0,r.jsx)(n.h2,{id:"adding-network-to-an-entity",children:"Adding Network to an Entity"}),"\n",(0,r.jsx)(n.p,{children:"The Network component must be added during entity creation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function CreateNetworkedEntity()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    \n    -- Add network component\n    inst.entity:AddNetwork()\n    \n    -- Complete network initialization\n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Server-only code here\n    \n    return inst\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"network-architecture",children:"Network Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"server-vs-client-code",children:"Server vs. Client Code"}),"\n",(0,r.jsx)(n.p,{children:"In networked entities, code is organized into server (master simulation) and client sections:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function MyPrefab()\n    local inst = CreateEntity()\n    \n    -- Components required by both client and server\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Networked properties setup\n    inst:AddTag("networked_tag")\n    \n    inst.entity:SetPristine()\n    \n    -- Early return for clients\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Server-only components and logic\n    inst:AddComponent("inventoryitem")\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"networking-entity-data",children:"Networking Entity Data"}),"\n",(0,r.jsx)(n.h3,{id:"basic-networking",children:"Basic Networking"}),"\n",(0,r.jsx)(n.p,{children:"Only certain types of data are automatically synchronized:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Transform position and rotation"}),"\n",(0,r.jsx)(n.li,{children:"AnimState animations and visual states"}),"\n",(0,r.jsxs)(n.li,{children:["Entity tags added before ",(0,r.jsx)(n.code,{children:"SetPristine()"})]}),"\n",(0,r.jsx)(n.li,{children:"Explicit network variables"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"network-variables",children:"Network Variables"}),"\n",(0,r.jsx)(n.p,{children:"To synchronize custom data between server and clients:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Create a networked variable (server code)\ninst.bird_type = net_string(inst.GUID, "bird.type", "bird_type_dirty")\n\n-- Set the value (server only)\ninst.bird_type:set("crow")\n\n-- Listen for changes (client code)\ninst:ListenForEvent("bird_type_dirty", OnBirdTypeDirty)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"networking-components",children:"NetWorking Components"}),"\n",(0,r.jsx)(n.p,{children:"Don't Starve Together provides specialized components for networking:"}),"\n",(0,r.jsx)(n.h3,{id:"netcomponents",children:"NetComponents"}),"\n",(0,r.jsx)(n.p,{children:"Wrapper components that handle network synchronization for you:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add a networked component\ninst:AddComponent("container")\ninst.components.container:WidgetSetup("backpack")\n\n-- These components handle their own networking\n'})}),"\n",(0,r.jsx)(n.h3,{id:"classified-entities",children:"Classified Entities"}),"\n",(0,r.jsx)(n.p,{children:"For complex data structures, classified entities are used:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Create a classified entity for private data\nlocal classified = SpawnPrefab("myentity_classified")\nclassified.entity:SetParent(inst.entity)\nclassified.Network:SetClassifiedTarget(inst)\nclassified:AddTag("CLASSIFIED")\n\ninst.classified = classified\n'})}),"\n",(0,r.jsx)(n.h2,{id:"network-optimization",children:"Network Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"network-priority",children:"Network Priority"}),"\n",(0,r.jsx)(n.p,{children:"Control how frequently an entity is updated:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Set network update priority\ninst:AddComponent("networkproximityfader")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dormant-entities",children:"Dormant Entities"}),"\n",(0,r.jsx)(n.p,{children:"Entities far from players can become dormant:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Make entity go dormant when far from players\ninst:AddComponent("knownlocations")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-networking-patterns",children:"Common Networking Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"master-simulation-check",children:"Master Simulation Check"}),"\n",(0,r.jsx)(n.p,{children:"Always check if code is running on the server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"if TheWorld.ismastersim then\n    -- Server-only code\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"event-handling-across-network",children:"Event Handling Across Network"}),"\n",(0,r.jsx)(n.p,{children:"Events can be sent across the network:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Server pushing events to clients\nTheWorld:PushEvent("my_global_event", {data = value})\n\n-- Server-to-client targeted events\nSendRPCToClient(CLIENT_RPC.DoSomething, player.userid, ...)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"debugging-network-issues",children:"Debugging Network Issues"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Client-server desynchronization"}),"\n",(0,r.jsx)(n.li,{children:"Missing network component"}),"\n",(0,r.jsx)(n.li,{children:"Not initializing network with SetPristine()"}),"\n",(0,r.jsx)(n.li,{children:"Modifying client-side data that should be server-authoritative"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"debug-tools",children:"Debug Tools"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Print entity network status\nprint(inst, "has network:", inst.entity:HasNetwork())\n\n-- View network statistics\nc_printnetnumber() -- Console command\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-fully-networked-entity",children:"Example: Fully Networked Entity"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Server-client synchronized entity\nlocal function MyNetworkedEntity()\n    local inst = CreateEntity()\n    \n    -- Basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    -- Setup animation\n    inst.AnimState:SetBank("myentity")\n    inst.AnimState:SetBuild("myentity")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Networked tags\n    inst:AddTag("myentity")\n    \n    -- Networked variables\n    inst.entity_state = net_string(inst.GUID, "myentity.state", "state_dirty")\n    \n    -- Complete network initialization\n    inst.entity:SetPristine()\n    \n    -- Client-side handlers\n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("state_dirty", function(inst)\n            local state = inst.entity_state:value()\n            inst.AnimState:PlayAnimation(state)\n        end)\n        \n        return inst\n    end\n    \n    -- Server-only components\n    inst:AddComponent("inspectable")\n    \n    -- Server-side state control\n    inst.SetState = function(inst, state)\n        inst.entity_state:set(state)\n        inst.AnimState:PlayAnimation(state)\n    end\n    \n    -- Initial state\n    inst.entity_state:set("idle")\n    \n    return inst\nend\n\nreturn Prefab("mynetworkedentity", MyNetworkedEntity)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);