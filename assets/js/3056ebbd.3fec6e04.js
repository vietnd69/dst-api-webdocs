"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9936],{807:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api-vanilla/examples/custom-stategraphs-and-animations","title":"Custom Stategraphs and Animations","description":"This guide covers how to create custom stategraphs and animations for your Don\'t Starve Together mods. Stategraphs are a powerful state machine system that controls entity behavior, animations, and interactions, while animations provide the visual representation of those behaviors.","source":"@site/docs/api-vanilla/examples/custom-stategraphs-and-animations.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/custom-stategraphs-and-animations","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-stategraphs-and-animations","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"custom-stategraphs-and-animations","title":"Custom Stategraphs and Animations","sidebar_position":5,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Custom UI Elements","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-ui-elements"},"next":{"title":"State Graph Integration","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/stategraph-mod"}}');var i=e(4848),s=e(8453);const o={id:"custom-stategraphs-and-animations",title:"Custom Stategraphs and Animations",sidebar_position:5,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="Custom Stategraphs and Animations",l={},c=[{value:"Understanding Stategraphs",id:"understanding-stategraphs",level:2},{value:"Core Components of Stategraphs",id:"core-components-of-stategraphs",level:3},{value:"Basic Stategraph Structure",id:"basic-stategraph-structure",level:3},{value:"Creating Custom Animations",id:"creating-custom-animations",level:2},{value:"Animation Pipeline Overview",id:"animation-pipeline-overview",level:3},{value:"Animation File Structure",id:"animation-file-structure",level:3},{value:"Setting Up Animations in Code",id:"setting-up-animations-in-code",level:3},{value:"Integrating Animations with Stategraphs",id:"integrating-animations-with-stategraphs",level:2},{value:"Animation Playback Methods",id:"animation-playback-methods",level:3},{value:"Animation-Driven State Transitions",id:"animation-driven-state-transitions",level:3},{value:"Timeline Events and Animation Frames",id:"timeline-events-and-animation-frames",level:3},{value:"Complete Example: Custom Creature with Stategraph and Animations",id:"complete-example-custom-creature-with-stategraph-and-animations",level:2},{value:"Advanced Animation Techniques",id:"advanced-animation-techniques",level:2},{value:"Multi-Stage Animations",id:"multi-stage-animations",level:3},{value:"Animation Blending for Smooth Transitions",id:"animation-blending-for-smooth-transitions",level:3},{value:"Animation Symbol Overrides",id:"animation-symbol-overrides",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"custom-stategraphs-and-animations",children:"Custom Stategraphs and Animations"})}),"\n",(0,i.jsx)(t.p,{children:"This guide covers how to create custom stategraphs and animations for your Don't Starve Together mods. Stategraphs are a powerful state machine system that controls entity behavior, animations, and interactions, while animations provide the visual representation of those behaviors."}),"\n",(0,i.jsx)(t.h2,{id:"understanding-stategraphs",children:"Understanding Stategraphs"}),"\n",(0,i.jsx)(t.p,{children:"Stategraphs are finite state machines that control how entities behave and transition between different states. They provide a structured way to organize complex behaviors and ensure that animations, sound effects, and gameplay mechanics are properly synchronized."}),"\n",(0,i.jsx)(t.h3,{id:"core-components-of-stategraphs",children:"Core Components of Stategraphs"}),"\n",(0,i.jsx)(t.p,{children:"A stategraph consists of several key components:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"States"}),": Defined behaviors that an entity can be in (e.g., idle, walking, attacking)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Events"}),": Triggers that cause state transitions (e.g., receiving damage, reaching a target)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Transitions"}),": Rules for moving between states in response to events"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"ActionHandlers"}),": Special handlers for gameplay actions initiated by the player or AI"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Timeline Events"}),": Functions triggered at specific frames during animations"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"basic-stategraph-structure",children:"Basic Stategraph Structure"}),"\n",(0,i.jsx)(t.p,{children:"Here's the basic structure of a stategraph:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'local states = {\n    -- Define states here\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        onenter = function(inst) -- Called when entering this state\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n        onexit = function(inst) -- Called when exiting this state\n            -- Cleanup code here\n        end,\n        events = {\n            -- Define event handlers for this state\n            EventHandler("animover", function(inst)\n                -- Transition to another state when animation ends\n            end),\n        },\n        timeline = {\n            -- Functions to call at specific animation frames\n            TimeEvent(10*FRAMES, function(inst)\n                -- Do something at frame 10\n            end),\n        },\n    },\n    -- More states...\n}\n\nlocal events = {\n    -- Global event handlers that apply to all states\n    EventHandler("attacked", function(inst)\n        if not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("hit")\n        end\n    end),\n    -- More event handlers...\n}\n\nlocal actionhandlers = {\n    -- Handlers for player actions\n    ActionHandler(ACTIONS.CHOP, function(inst)\n        inst.sg:GoToState("chop")\n        return true\n    end),\n    -- More action handlers...\n}\n\n-- Create and return the stategraph\nreturn StateGraph("entity_name", states, events, "idle", actionhandlers)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"creating-custom-animations",children:"Creating Custom Animations"}),"\n",(0,i.jsx)(t.p,{children:"Before integrating animations with stategraphs, you need to create the animations themselves. Don't Starve Together uses a specific animation format that requires several steps to create."}),"\n",(0,i.jsx)(t.h3,{id:"animation-pipeline-overview",children:"Animation Pipeline Overview"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Create Artwork"}),": Design your character/entity's artwork, separating different parts that need to move independently"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Rig and Animate"}),": Use animation software to rig and animate your character"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Export Animations"}),": Export as sprite sheets or individual frames"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Create Build and Bank Files"}),": Convert your animations into DST's format using Spriter or other tools"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Load Animations in Game"}),": Reference your animations in your mod code"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"animation-file-structure",children:"Animation File Structure"}),"\n",(0,i.jsx)(t.p,{children:"Don't Starve Together uses two main file types for animations:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Build Files (.zip)"}),": Contains the actual artwork/textures"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Bank Files (.bin)"}),": Contains the animation data (bone structure, keyframes, etc.)"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Both files should have the same name for the game to associate them correctly."}),"\n",(0,i.jsx)(t.h3,{id:"setting-up-animations-in-code",children:"Setting Up Animations in Code"}),"\n",(0,i.jsx)(t.p,{children:"To use your animations in-game:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'-- In your prefab file\nfunction MyEntity()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    \n    -- Set up animations\n    inst.AnimState:SetBank("my_entity") -- References my_entity.bin\n    inst.AnimState:SetBuild("my_entity") -- References my_entity.zip\n    inst.AnimState:PlayAnimation("idle")\n    \n    return inst\nend\n'})}),"\n",(0,i.jsx)(t.h2,{id:"integrating-animations-with-stategraphs",children:"Integrating Animations with Stategraphs"}),"\n",(0,i.jsx)(t.p,{children:"The power of stategraphs comes from their tight integration with the animation system. This allows you to synchronize code execution with specific animation frames."}),"\n",(0,i.jsx)(t.h3,{id:"animation-playback-methods",children:"Animation Playback Methods"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'-- Play a single animation (looping optional)\ninst.AnimState:PlayAnimation("walk", true)  -- true means loop\n\n-- Queue animations to play in sequence\ninst.AnimState:PlayAnimation("attack_pre")\ninst.AnimState:PushAnimation("attack_loop", true)  -- will play after attack_pre\ninst.AnimState:PushAnimation("attack_pst", false)  -- will play after attack_loop stops\n'})}),"\n",(0,i.jsx)(t.h3,{id:"animation-driven-state-transitions",children:"Animation-Driven State Transitions"}),"\n",(0,i.jsx)(t.p,{children:"One of the most common patterns is to transition to a new state when an animation completes:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'State{\n    name = "attack",\n    tags = {"attack", "busy"},\n    \n    onenter = function(inst)\n        inst.AnimState:PlayAnimation("attack")\n    end,\n    \n    events = {\n        -- Transition to idle when the animation finishes\n        EventHandler("animover", function(inst)\n            inst.sg:GoToState("idle")\n        end),\n    },\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"timeline-events-and-animation-frames",children:"Timeline Events and Animation Frames"}),"\n",(0,i.jsx)(t.p,{children:"Timeline events allow you to execute code at specific frames during an animation:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'State{\n    name = "attack",\n    tags = {"attack", "busy"},\n    \n    onenter = function(inst)\n        inst.AnimState:PlayAnimation("attack")\n    end,\n    \n    timeline = {\n        -- Wind-up sound at the start of the attack\n        TimeEvent(0*FRAMES, function(inst) \n            inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/attack_growl")\n        end),\n        \n        -- Actual attack damage happens at a specific frame\n        TimeEvent(10*FRAMES, function(inst) \n            -- This is timed to match exactly when the attack animation shows impact\n            inst.components.combat:DoAttack()\n            -- Impact sound precisely when the attack lands\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/attack_impact")\n        end),\n    },\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"FRAMES"})," constant represents 1/30 of a second, which is the frame rate of animations in Don't Starve Together."]}),"\n",(0,i.jsx)(t.h2,{id:"complete-example-custom-creature-with-stategraph-and-animations",children:"Complete Example: Custom Creature with Stategraph and Animations"}),"\n",(0,i.jsx)(t.p,{children:"Let's create a complete example of a custom creature with its own stategraph and animations:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'-- In modmain.lua\nPrefabFiles = {\n    "custom_creature",\n}\n\nAssets = {\n    Asset("ANIM", "anim/custom_creature.zip"),\n    Asset("ANIM", "anim/custom_creature_build.zip"),\n}\n\n-- In scripts/prefabs/custom_creature.lua\nlocal assets = {\n    Asset("ANIM", "anim/custom_creature.zip"),\n    Asset("ANIM", "anim/custom_creature_build.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    -- Set up physics\n    MakeCharacterPhysics(inst, 50, .5)\n    \n    -- Set up animations\n    inst.AnimState:SetBank("custom_creature")\n    inst.AnimState:SetBuild("custom_creature_build")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add tags\n    inst:AddTag("monster")\n    inst:AddTag("hostile")\n    \n    -- Make the entity pristine for networking\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add components for behavior\n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 4\n    inst.components.locomotor.runspeed = 6\n    \n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(20)\n    inst.components.combat:SetAttackPeriod(2)\n    inst.components.combat:SetRange(2)\n    \n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(200)\n    \n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("meat", 3)\n    inst.components.lootdropper:AddRandomLoot("monster_meat", 1)\n    \n    -- Set up AI\n    inst:AddComponent("knownlocations")\n    \n    inst:AddComponent("inspectable")\n    \n    -- Set up the stategraph\n    inst:SetStateGraph("SGcustom_creature")\n    \n    -- Set up brain\n    inst:SetBrain(require("brains/custom_creature_brain"))\n    \n    return inst\nend\n\nreturn Prefab("custom_creature", fn, assets)\n'})}),"\n",(0,i.jsx)(t.p,{children:"Now, let's create the stategraph for our custom creature:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'-- In scripts/stategraphs/SGcustom_creature.lua\nrequire("stategraphs/commonstates")\n\nlocal function CreateCustomCreatureStateGraph()\n    local states = {\n        -- Idle state\n        State{\n            name = "idle",\n            tags = {"idle", "canrotate"},\n            \n            onenter = function(inst)\n                inst.AnimState:PlayAnimation("idle", true)\n                inst.Physics:Stop()\n            end,\n        },\n        \n        -- Walk state\n        State{\n            name = "walk",\n            tags = {"moving", "canrotate"},\n            \n            onenter = function(inst)\n                inst.AnimState:PlayAnimation("walk", true)\n                inst.components.locomotor:WalkForward()\n            end,\n            \n            timeline = {\n                TimeEvent(5*FRAMES, function(inst)\n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/footstep")\n                end),\n                TimeEvent(15*FRAMES, function(inst)\n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/footstep")\n                end),\n            },\n        },\n        \n        -- Attack state\n        State{\n            name = "attack",\n            tags = {"attack", "busy"},\n            \n            onenter = function(inst, target)\n                inst.Physics:Stop()\n                inst.AnimState:PlayAnimation("attack")\n                inst.components.combat:StartAttack()\n                inst.sg.statemem.target = target\n            end,\n            \n            timeline = {\n                TimeEvent(8*FRAMES, function(inst)\n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/attack_pre")\n                end),\n                TimeEvent(15*FRAMES, function(inst)\n                    inst.components.combat:DoAttack(inst.sg.statemem.target)\n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/attack")\n                end),\n            },\n            \n            events = {\n                EventHandler("animover", function(inst)\n                    inst.sg:GoToState("idle")\n                end),\n            },\n        },\n        \n        -- Hit reaction state\n        State{\n            name = "hit",\n            tags = {"hit", "busy"},\n            \n            onenter = function(inst)\n                inst.AnimState:PlayAnimation("hit")\n                inst.Physics:Stop()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/hurt")\n            end,\n            \n            events = {\n                EventHandler("animover", function(inst)\n                    inst.sg:GoToState("idle")\n                end),\n            },\n        },\n        \n        -- Death state\n        State{\n            name = "death",\n            tags = {"busy"},\n            \n            onenter = function(inst)\n                inst.AnimState:PlayAnimation("death")\n                inst.Physics:Stop()\n                inst.components.lootdropper:DropLoot(inst:GetPosition())\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/death")\n            end,\n            \n            timeline = {\n                TimeEvent(10*FRAMES, function(inst)\n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/death_voice")\n                end),\n            },\n            \n            events = {\n                EventHandler("animover", function(inst)\n                    inst:Remove()\n                end),\n            },\n        },\n    }\n\n    local events = {\n        -- Locomotion\n        EventHandler("locomote", function(inst)\n            if not inst.sg:HasStateTag("busy") then\n                local is_moving = inst.sg:HasStateTag("moving")\n                local wants_to_move = inst.components.locomotor:WantsToMoveForward()\n                \n                if is_moving and not wants_to_move then\n                    inst.sg:GoToState("idle")\n                elseif not is_moving and wants_to_move then\n                    inst.sg:GoToState("walk")\n                end\n            end\n        end),\n        \n        -- Combat\n        EventHandler("doattack", function(inst, data)\n            if not inst.components.health:IsDead() and not inst.sg:HasStateTag("busy") then\n                inst.sg:GoToState("attack", data.target)\n            end\n        end),\n        \n        -- Taking damage\n        EventHandler("attacked", function(inst)\n            if not inst.components.health:IsDead() and not inst.sg:HasStateTag("busy") then\n                inst.sg:GoToState("hit")\n            end\n        end),\n        \n        -- Death\n        EventHandler("death", function(inst)\n            inst.sg:GoToState("death")\n        end),\n    }\n\n    return StateGraph("custom_creature", states, events, "idle")\nend\n\nreturn CreateCustomCreatureStateGraph()\n'})}),"\n",(0,i.jsx)(t.h2,{id:"advanced-animation-techniques",children:"Advanced Animation Techniques"}),"\n",(0,i.jsx)(t.h3,{id:"multi-stage-animations",children:"Multi-Stage Animations"}),"\n",(0,i.jsx)(t.p,{children:"For complex animations, it's often cleaner to break them into multiple states:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'-- Pre-attack windup\nState{\n    name = "attack_pre",\n    tags = {"attack", "busy"},\n    \n    onenter = function(inst)\n        inst.AnimState:PlayAnimation("attack_pre")\n    end,\n    \n    events = {\n        EventHandler("animover", function(inst)\n            inst.sg:GoToState("attack_loop")\n        end),\n    },\n},\n\n-- Attack loop\nState{\n    name = "attack_loop",\n    tags = {"attack", "busy"},\n    \n    onenter = function(inst)\n        inst.AnimState:PlayAnimation("attack_loop")\n        inst.sg.statemem.attack_count = 0\n    end,\n    \n    timeline = {\n        TimeEvent(10*FRAMES, function(inst)\n            inst.components.combat:DoAttack()\n            inst.sg.statemem.attack_count = inst.sg.statemem.attack_count + 1\n        end),\n    },\n    \n    events = {\n        EventHandler("animover", function(inst)\n            if inst.sg.statemem.attack_count >= 3 then\n                inst.sg:GoToState("attack_pst")\n            else\n                inst.AnimState:PlayAnimation("attack_loop")\n            end\n        end),\n    },\n},\n\n-- Post-attack recovery\nState{\n    name = "attack_pst",\n    tags = {"busy"},\n    \n    onenter = function(inst)\n        inst.AnimState:PlayAnimation("attack_pst")\n    end,\n    \n    events = {\n        EventHandler("animover", function(inst)\n            inst.sg:GoToState("idle")\n        end),\n    },\n},\n'})}),"\n",(0,i.jsx)(t.h3,{id:"animation-blending-for-smooth-transitions",children:"Animation Blending for Smooth Transitions"}),"\n",(0,i.jsx)(t.p,{children:"To create smoother transitions between states, you can use animation blending techniques:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'-- Blend from walking to running\nState{\n    name = "walk_to_run",\n    tags = {"moving", "running", "canrotate"},\n    \n    onenter = function(inst)\n        -- Start with walk animation but at a higher speed\n        inst.AnimState:PlayAnimation("walk_loop", true)\n        inst.AnimState:SetRate(1.5)\n        \n        -- Increase movement speed gradually\n        inst.components.locomotor:RunForward()\n        \n        -- Schedule a transition to the full run state\n        inst.sg:SetTimeout(0.5)\n    end,\n    \n    ontimeout = function(inst)\n        inst.sg:GoToState("run")\n    end,\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"animation-symbol-overrides",children:"Animation Symbol Overrides"}),"\n",(0,i.jsx)(t.p,{children:"You can override specific parts of an animation to create variations:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'-- Change the head symbol for a different appearance\ninst.AnimState:OverrideSymbol("head", "custom_creature_heads", "head_variant2")\n\n-- Restore the original symbol\ninst.AnimState:ClearOverrideSymbol("head")\n'})}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Match timeline events to animation keyframes"}),(0,i.jsx)(t.br,{}),"\n","Study your animations carefully and place timeline events at the exact frames where they make the most visual sense."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Use state tags to control animation behavior"}),(0,i.jsx)(t.br,{}),"\n",'Tags like "busy" can prevent interruptions during important animations.']}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Break complex animations into multiple states"}),(0,i.jsx)(t.br,{}),"\n","For readability and maintainability, divide long sequences into pre/loop/post states."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Test animations at different speeds"}),(0,i.jsx)(t.br,{}),"\n","Make sure your timeline events still make sense if animation rates change."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Use statemem to store animation context"}),(0,i.jsx)(t.br,{}),"\n","The state memory table is ideal for tracking information across animation frames."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Document animation frame numbers"}),(0,i.jsx)(t.br,{}),"\n","Add comments to indicate which frame numbers correspond to important events in the animation."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Reuse common states when possible"}),(0,i.jsx)(t.br,{}),"\n","Use the ",(0,i.jsx)(t.code,{children:"commonstates.lua"})," module to leverage pre-built states for standard behaviors."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"Creating custom stategraphs and animations is one of the most powerful ways to bring unique entities to life in Don't Starve Together. By mastering the integration between stategraphs and animations, you can create entities with fluid, responsive behaviors that feel right at home in the game world."}),"\n",(0,i.jsx)(t.p,{children:"The key to successful animation-driven gameplay is careful synchronization between visual elements, sound effects, and gameplay mechanics. When done right, players won't even notice the complex state machine running behind the scenes\u2014they'll just experience a cohesive, polished entity that responds naturally to the game world."})]})}function m(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>o,x:()=>r});var a=e(6540);const i={},s=a.createContext(i);function o(n){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),a.createElement(s.Provider,{value:t},n.children)}}}]);