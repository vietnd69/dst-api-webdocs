"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6679],{7643:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/entity-framework/entityscript","title":"EntityScript","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/entity-framework/entityscript.md","sourceDirName":"api-vanilla/entity-framework","slug":"/api-vanilla/entity-framework/entityscript","permalink":"/dst-api-webdocs/docs/api-vanilla/entity-framework/entityscript","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"entityscript","title":"EntityScript","sidebar_position":1,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Entity Framework","permalink":"/dst-api-webdocs/docs/category/entity-framework"},"next":{"title":"Tag System","permalink":"/dst-api-webdocs/docs/api-vanilla/entity-framework/tags"}}');var a=t(4848),s=t(8453);const r={id:"entityscript",title:"EntityScript",sidebar_position:1,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="EntityScript",d={},l=[{value:"Lifecycle Methods",id:"lifecycle-methods",level:2},{value:"Component Management",id:"component-management",level:2},{value:"Tag System",id:"tag-system",level:2},{value:"Child Entity Management",id:"child-entity-management",level:2},{value:"Entity Properties and Metadata",id:"entity-properties-and-metadata",level:2},{value:"Task and Thread Management",id:"task-and-thread-management",level:2},{value:"Brain and AI Control",id:"brain-and-ai-control",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2},{value:"Using EntityScript in Mods",id:"using-entityscript-in-mods",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"entityscript",children:"EntityScript"})}),"\n",(0,a.jsx)(n.p,{children:"EntityScript is the base class for all entities in Don't Starve Together. Every object in the game such as characters, items, structures, and monsters inherits from this class."}),"\n",(0,a.jsx)(n.h2,{id:"lifecycle-methods",children:"Lifecycle Methods"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get entity save data\nentity:GetSaveRecord()\n\n-- Hide entity from players\nentity:Hide()\n\n-- Show entity to players\nentity:Show()\n\n-- Check if entity is in limbo (temporarily inactive state)\nentity:IsInLimbo()\n\n-- Force entity out of limbo\nentity:ForceOutOfLimbo(state)\n\n-- Remove entity from scene\nentity:RemoveFromScene()\n\n-- Return entity to scene\nentity:ReturnToScene()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"component-management",children:"Component Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Add component to entity\nentity:AddComponent(name) -- name: component name (string)\n\n-- Remove component from entity\nentity:RemoveComponent(name) -- name: component name (string)\n\n-- Start updating component\nentity:StartUpdatingComponent(cmp, do_static_update)\n\n-- Stop updating component\nentity:StopUpdatingComponent(cmp)\n\n-- Stop updating component (delayed)\nentity:StopUpdatingComponent_Deferred(cmp)\n\n-- Get component name\nentity:GetComponentName(cmp)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"tag-system",children:"Tag System"}),"\n",(0,a.jsx)(n.p,{children:"Tags are the primary way to categorize and identify capabilities of entities in Don't Starve Together."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Add tag to entity\nentity:AddTag(tag)\n\n-- Remove tag from entity\nentity:RemoveTag(tag)\n\n-- Add or remove tag based on condition\nentity:AddOrRemoveTag(tag, condition)\n\n-- Check if entity has specific tag\nentity:HasTag(tag) -- tag: string\n\n-- Check if entity has all listed tags\nentity:HasTags(...) -- Multiple tags as separate parameters\n\n-- Check if entity has one of the listed tags\nentity:HasOneOfTags(...) -- Multiple tags as separate parameters\n"})}),"\n",(0,a.jsx)(n.h2,{id:"child-entity-management",children:"Child Entity Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Spawn child entity\nentity:SpawnChild(name)\n\n-- Remove child entity\nentity:RemoveChild(child)\n\n-- Add child entity\nentity:AddChild(child)\n\n-- Remove platform follower\nentity:RemovePlatformFollower(child)\n\n-- Add platform follower\nentity:AddPlatformFollower(child)\n\n-- Get platform followers list\nentity:GetPlatformFollowers()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"entity-properties-and-metadata",children:"Entity Properties and Metadata"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get basic entity name\nentity:GetBasicDisplayName()\n\n-- Get entity name with adjectives\nentity:GetAdjectivedName()\n\n-- Get display name of entity\nentity:GetDisplayName()\n\n-- Check if entity is wet\nentity:GetIsWet()\n\n-- Check if entity is acid sizzling\nentity:IsAcidSizzling()\n\n-- Get entity skin build\nentity:GetSkinBuild()\n\n-- Get entity skin name\nentity:GetSkinName()\n\n-- Set prefab name for entity\nentity:SetPrefabName(name)\n\n-- Set override for prefab name\nentity:SetPrefabNameOverride(nameoverride)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"task-and-thread-management",children:"Task and Thread Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Kill all tasks\nentity:KillTasks()\n\n-- Start a new thread\nentity:StartThread(fn)\n\n-- Run a script\nentity:RunScript(name)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"brain-and-ai-control",children:"Brain and AI Control"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Restart brain\nentity:RestartBrain()\n\n-- Stop brain\nentity:StopBrain()\n\n-- Get brain string information\nentity:GetBrainString()\n\n-- Get debug string\nentity:GetDebugString()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Add inherent action\nentity:AddInherentAction(act)\n\n-- Remove inherent action\nentity:RemoveInherentAction(act)\n\n-- Get entity lifetime\nentity:GetTimeAlive()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"using-entityscript-in-mods",children:"Using EntityScript in Mods"}),"\n",(0,a.jsx)(n.p,{children:"When creating a new prefab, you'll receive an EntityScript object:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function MyPrefabFn()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Add tags\n    inst:AddTag("myspecialtag")\n    \n    -- Setup network\n    inst.entity:SetPristine()\n    \n    -- Client-side code\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add server components\n    inst:AddComponent("inventoryitem")\n    inst:AddComponent("inspectable")\n    \n    return inst\nend\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);