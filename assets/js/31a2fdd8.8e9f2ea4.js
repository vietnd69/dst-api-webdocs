"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6664],{266:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>o,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/core/tuning","title":"TUNING System","description":"Last Update: 2024-05-01","source":"@site/docs/api-vanilla/core/tuning.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/tuning","permalink":"/dst-api-webdocs/docs/api-vanilla/core/tuning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"id":"tuning","title":"TUNING System","sidebar_position":12,"last_updated":"2024-05-01T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"State Graph System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/stategraph-system"},"next":{"title":"AnimState System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/animstate-system"}}');var i=s(4848),l=s(8453);const r={id:"tuning",title:"TUNING System",sidebar_position:12,last_updated:new Date("2024-05-01T00:00:00.000Z")},c="TUNING System",t={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Accessing TUNING in Mods",id:"accessing-tuning-in-mods",level:2},{value:"Key TUNING Categories",id:"key-tuning-categories",level:2},{value:"Character Stats",id:"character-stats",level:3},{value:"Item Properties",id:"item-properties",level:3},{value:"Creature Stats",id:"creature-stats",level:3},{value:"Time and World Settings",id:"time-and-world-settings",level:3},{value:"Food and Healing Values",id:"food-and-healing-values",level:3},{value:"Combat and Damage",id:"combat-and-damage",level:3},{value:"Nested TUNING Structures",id:"nested-tuning-structures",level:2},{value:"Modifying TUNING Values",id:"modifying-tuning-values",level:2},{value:"Creating Character-Specific TUNING Values",id:"creating-character-specific-tuning-values",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common TUNING Values Reference",id:"common-tuning-values-reference",level:2},{value:"Character Stats",id:"character-stats-1",level:3},{value:"Weapon Damage",id:"weapon-damage",level:3},{value:"Tool Durability",id:"tool-durability",level:3},{value:"Creature Stats",id:"creature-stats-1",level:3}];function N(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2024-05-01"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tuning-system",children:"TUNING System"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"API Version: 624447"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"TUNING"})," table is a central configuration system in Don't Starve Together that stores game balance values, constants, and settings that affect virtually every aspect of gameplay. It contains thousands of values that determine everything from character stats and creature behaviors to item properties and world settings."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"TUNING"})," table acts as a global repository for game balance values. Using a centralized table for these constants makes it easier to:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Balance the game holistically"}),"\n",(0,i.jsx)(n.li,{children:"Modify game parameters through modding"}),"\n",(0,i.jsx)(n.li,{children:"Maintain consistency across similar objects"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TUNING"})," values can be accessed directly in any script that has access to the global scope:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Reference TUNING values directly in game scripts\nlocal max_health = TUNING.WILSON_HEALTH\nlocal spear_damage = TUNING.SPEAR_DAMAGE\n\n-- Use TUNING values for component initialization\ninst.components.health:SetMaxHealth(TUNING.PIG_HEALTH)\ninst.components.combat:SetDefaultDamage(TUNING.PIG_DAMAGE)\ninst.components.combat:SetAttackPeriod(TUNING.PIG_ATTACK_PERIOD)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"accessing-tuning-in-mods",children:"Accessing TUNING in Mods"}),"\n",(0,i.jsxs)(n.p,{children:["For mod scripts, you need to access ",(0,i.jsx)(n.code,{children:"TUNING"})," through the global namespace:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nlocal TUNING = GLOBAL.TUNING\n\n-- Access values via the local reference\nprint("Default player health:", TUNING.WILSON_HEALTH)\n\n-- Or access directly through GLOBAL\nprint("Default player health:", GLOBAL.TUNING.WILSON_HEALTH)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"key-tuning-categories",children:"Key TUNING Categories"}),"\n",(0,i.jsx)(n.h3,{id:"character-stats",children:"Character Stats"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Base character values (Wilson's values are the standard)\nTUNING.WILSON_HEALTH = 150           -- Base health\nTUNING.WILSON_HUNGER = 150           -- Stomach size\nTUNING.WILSON_SANITY = 200           -- Max sanity\nTUNING.WILSON_ATTACK_PERIOD = 0.4    -- Attack cooldown\nTUNING.WILSON_HUNGER_RATE = 75/480   -- Hunger drain per segment\n\n-- Other character-specific values\nTUNING.WENDY_HEALTH = 150\nTUNING.ABIGAIL_LIGHTING.INTENSITY = 0.8\nTUNING.WOLFGANG_HUNGER = 200\nTUNING.WOLFGANG_HUNGER_RATE_MULT_WIMPY = 1.5\n"})}),"\n",(0,i.jsx)(n.h3,{id:"item-properties",children:"Item Properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Weapon damage\nTUNING.SPEAR_DAMAGE = 34\nTUNING.AXE_DAMAGE = 27.2\nTUNING.NIGHTSWORD_DAMAGE = 68\n\n-- Tool uses (durability)\nTUNING.AXE_USES = 100\nTUNING.PICKAXE_USES = 33\nTUNING.SHOVEL_USES = 25\nTUNING.HAMMER_USES = 75\nTUNING.SPEAR_USES = 150\n\n-- Stack sizes\nTUNING.STACK_SIZE_LARGEITEM = 10\nTUNING.STACK_SIZE_MEDITEM = 20\nTUNING.STACK_SIZE_SMALLITEM = 40\nTUNING.STACK_SIZE_TINYITEM = 60\n\n-- Light values\nTUNING.TORCH_LIGHT = 2.5\nTUNING.CAMPFIRE_LIGHT_RADIUS = 3.0\nTUNING.FIREPIT_LIGHT_RADIUS = 3.5\n"})}),"\n",(0,i.jsx)(n.h3,{id:"creature-stats",children:"Creature Stats"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Pig stats\nTUNING.PIG_HEALTH = 250\nTUNING.PIG_DAMAGE = 33\nTUNING.PIG_ATTACK_PERIOD = 3\nTUNING.PIG_TARGET_DIST = 16\nTUNING.PIG_MAX_STUN_LOCKS = 2\n\n-- Spider stats\nTUNING.SPIDER_HEALTH = 100\nTUNING.SPIDER_DAMAGE = 20\nTUNING.SPIDER_ATTACK_PERIOD = 3\nTUNING.SPIDER_TARGET_DIST = 4\nTUNING.SPIDER_WARRIOR_HEALTH = 200\nTUNING.SPIDER_WARRIOR_DAMAGE = 20\n"})}),"\n",(0,i.jsx)(n.h3,{id:"time-and-world-settings",children:"Time and World Settings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Time constants\nTUNING.SEG_TIME = 30                 -- Seconds per segment\nTUNING.TOTAL_DAY_TIME = 480          -- Seconds in a full day (16 segments)\nTUNING.DAY_SEGS_DEFAULT = 10         -- Number of day segments\nTUNING.DUSK_SEGS_DEFAULT = 4         -- Number of dusk segments\nTUNING.NIGHT_SEGS_DEFAULT = 2        -- Number of night segments\n\n-- Food spoilage times (in days)\nTUNING.PERISH_SUPERFAST = 1\nTUNING.PERISH_FAST = 2\nTUNING.PERISH_MED = 6\nTUNING.PERISH_SLOW = 10\nTUNING.PERISH_PRESERVED = 20\n"})}),"\n",(0,i.jsx)(n.h3,{id:"food-and-healing-values",children:"Food and Healing Values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Hunger restoration\nTUNING.CALORIES_TINY = 9.375\nTUNING.CALORIES_SMALL = 12.5\nTUNING.CALORIES_MEDSMALL = 18.75\nTUNING.CALORIES_MED = 25\nTUNING.CALORIES_LARGE = 37.5\nTUNING.CALORIES_HUGE = 75\n\n-- Health restoration\nTUNING.HEALING_TINY = 1\nTUNING.HEALING_SMALL = 3\nTUNING.HEALING_MEDSMALL = 8\nTUNING.HEALING_MED = 20\nTUNING.HEALING_MEDLARGE = 30\nTUNING.HEALING_LARGE = 40\nTUNING.HEALING_HUGE = 60\n\n-- Sanity restoration\nTUNING.SANITY_SUPERTINY = 1\nTUNING.SANITY_TINY = 5\nTUNING.SANITY_SMALL = 10\nTUNING.SANITY_MED = 15\nTUNING.SANITY_MEDLARGE = 20\nTUNING.SANITY_LARGE = 33\nTUNING.SANITY_HUGE = 50\n"})}),"\n",(0,i.jsx)(n.h3,{id:"combat-and-damage",children:"Combat and Damage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Damage types multipliers\nTUNING.FIRE_DAMAGE_MULT = 1.0\nTUNING.ELECTRIC_DAMAGE_MULT = 1.5\nTUNING.POISON_DAMAGE_MULT = 1.0\nTUNING.ICE_DAMAGE_MULT = 1.0\n\n-- Combat tuning\nTUNING.PLAYER_DAMAGE_TAKEN_MOD = 1.0\nTUNING.SPRING_COMBAT_MOD = 1.33      -- Combat modifier during spring\n"})}),"\n",(0,i.jsx)(n.h2,{id:"nested-tuning-structures",children:"Nested TUNING Structures"}),"\n",(0,i.jsx)(n.p,{children:"Some TUNING values are organized in nested tables for better organization:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Boat settings\nTUNING.BOAT = {\n    HEALTH = 600,\n    MASS = 1000,\n    SAIL_FORCE = 5,\n    RUDDER_TURN_SPEED = 0.6,\n    WIND_FORCE = 1.2,\n    WAVE_FORCE = 2.0,\n    DRAG = 0.15\n}\n\n-- Character-specific TUNING\nTUNING.WARLY_FOOD_MULT = {\n    SANITY = 1.2,\n    HEALTH = 1.3,\n    HUNGER = 1.2\n}\n\n-- Tech tree definitions\nTUNING.PROTOTYPER_TREES = {\n    SCIENCEMACHINE = TechTree.Create({\n        SCIENCE = 1\n    }),\n    ALCHEMYMACHINE = TechTree.Create({\n        SCIENCE = 2,\n        MAGIC = 1\n    }),\n    SHADOWMANIPULATOR = TechTree.Create({\n        MAGIC = 3\n    }),\n    ANCIENTALTAR_LOW = TechTree.Create({\n        ANCIENT = 2\n    })\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"modifying-tuning-values",children:"Modifying TUNING Values"}),"\n",(0,i.jsxs)(n.p,{children:["You can modify ",(0,i.jsx)(n.code,{children:"TUNING"})," values in mods to change game balance:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- In modmain.lua\n-- Modify character stats\nGLOBAL.TUNING.WILSON_HEALTH = 200        -- Increase Wilson's health\nGLOBAL.TUNING.WILSON_HUNGER_RATE = 0.5   -- Decrease hunger drain rate\n\n-- Modify weapon damage\nGLOBAL.TUNING.SPEAR_DAMAGE = 40          -- Increase spear damage\nGLOBAL.TUNING.HAMBAT_DAMAGE = 70         -- Increase ham bat damage\n\n-- Add new TUNING values for your mod\nGLOBAL.TUNING.MYMOD = {\n    SPECIAL_ITEM_DAMAGE = 50,\n    SPECIAL_ITEM_USES = 150,\n    CUSTOM_CREATURE_HEALTH = 300\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-character-specific-tuning-values",children:"Creating Character-Specific TUNING Values"}),"\n",(0,i.jsx)(n.p,{children:"For custom characters, it's a good practice to add your character's TUNING values:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- In modmain.lua\nGLOBAL.TUNING.CUSTOMCHARACTER_HEALTH = 120\nGLOBAL.TUNING.CUSTOMCHARACTER_HUNGER = 175\nGLOBAL.TUNING.CUSTOMCHARACTER_SANITY = 180\nGLOBAL.TUNING.CUSTOMCHARACTER_DAMAGE_MULTIPLIER = 1.2\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reference existing values"}),": Scale your new values relative to existing ones for better balance."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"TUNING.MYITEM_DAMAGE = TUNING.SPEAR_DAMAGE * 1.2  -- 20% stronger than a spear\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use the namespace pattern"}),": Group related values in a nested table."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"TUNING.MYMOD = {\n    ITEM_DAMAGE = 30,\n    ITEM_USES = 100,\n    CREATURE_HEALTH = 200\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Document your changes"}),": Add comments explaining significant balance changes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Increased to make early game less punishing\nTUNING.HUNGER_RATE = TUNING.WILSON_HUNGER_RATE * 0.8\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Be consistent with naming"}),": Follow the all-caps convention and descriptive naming."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Good: Clear, descriptive, all caps\nTUNING.MYITEM_DAMAGE = 35\n\n-- Bad: Inconsistent with game convention\nTUNING.myItemDamage = 35\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-tuning-values-reference",children:"Common TUNING Values Reference"}),"\n",(0,i.jsx)(n.p,{children:"Below is a reference of commonly used TUNING values by category:"}),"\n",(0,i.jsx)(n.h3,{id:"character-stats-1",children:"Character Stats"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WILSON_HEALTH"}),": 150"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WILSON_HUNGER"}),": 150"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WILSON_SANITY"}),": 200"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WILSON_ATTACK_PERIOD"}),": 0.4"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WILSON_HUNGER_RATE"}),": 75/480 (~0.156)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WILSON_WALK_SPEED"}),": 4"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WILSON_RUN_SPEED"}),": 6"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"weapon-damage",children:"Weapon Damage"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NIGHTSWORD_DAMAGE"}),": 68"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SPEAR_DAMAGE"}),": 34"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HAMBAT_DAMAGE"}),": 59.5"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AXE_DAMAGE"}),": 27.2"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BATBAT_DAMAGE"}),": 42.5"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RUINS_BAT_DAMAGE"}),": 59.5"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WATHGRITHR_SPEAR_DAMAGE"}),": 42.5"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tool-durability",children:"Tool Durability"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AXE_USES"}),": 100"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PICKAXE_USES"}),": 33"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SHOVEL_USES"}),": 25"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HAMMER_USES"}),": 75"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SPEAR_USES"}),": 150"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FISHINGROD_USES"}),": 9"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BUGNET_USES"}),": 10"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NIGHTSWORD_USES"}),": 100"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"creature-stats-1",children:"Creature Stats"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PIG_HEALTH"}),": 250"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BEEFALOHERD_DAMAGE"}),": 34"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SPIDER_HEALTH"}),": 100"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SPIDER_DAMAGE"}),": 20"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HOUND_HEALTH"}),": 150"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HOUND_DAMAGE"}),": 20"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"KOALEFANT_HEALTH"}),": 500"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"KOALEFANT_DAMAGE"}),": 50"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TALLBIRD_HEALTH"}),": 400"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TALLBIRD_DAMAGE"}),": 50"]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(N,{...e})}):N(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var a=s(6540);const i={},l=a.createContext(i);function r(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);