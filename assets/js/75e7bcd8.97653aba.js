"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6398],{2282:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"api-vanilla/core/widgets","title":"Common Widgets","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/core/widgets.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/widgets","permalink":"/dst-api-webdocs/docs/api-vanilla/core/widgets","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"id":"widgets","title":"Common Widgets","sidebar_position":14,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"UI System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/ui-system"},"next":{"title":"Creating Screens","permalink":"/dst-api-webdocs/docs/api-vanilla/core/creating-screens"}}');var l=t(4848),s=t(8453);const a={id:"widgets",title:"Common Widgets",sidebar_position:14,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="Common Widgets",d={},r=[{value:"Basic UI Components",id:"basic-ui-components",level:2},{value:"Text",id:"text",level:3},{value:"Image",id:"image",level:3},{value:"Button",id:"button",level:3},{value:"ImageButton",id:"imagebutton",level:3},{value:"AnimButton",id:"animbutton",level:3},{value:"Layout Components",id:"layout-components",level:2},{value:"NineSlice",id:"nineslice",level:3},{value:"ThreeSlice",id:"threeslice",level:3},{value:"Container Widgets",id:"container-widgets",level:2},{value:"ScrollableList",id:"scrollablelist",level:3},{value:"Menu",id:"menu",level:3},{value:"Interactive Components",id:"interactive-components",level:2},{value:"TextEdit",id:"textedit",level:3},{value:"Spinner",id:"spinner",level:3},{value:"Special Effects",id:"special-effects",level:2},{value:"UIAnim",id:"uianim",level:3},{value:"RingMeter",id:"ringmeter",level:3},{value:"Templates",id:"templates",level:2},{value:"Status Displays",id:"status-displays",level:2},{value:"Advanced Layout Techniques",id:"advanced-layout-techniques",level:2},{value:"Positioning and Anchoring",id:"positioning-and-anchoring",level:3},{value:"Focus Management",id:"focus-management",level:3},{value:"Example: Inventory Item Widget",id:"example-inventory-item-widget",level:2},{value:"Best Practices for Widget Development",id:"best-practices-for-widget-development",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"common-widgets",children:"Common Widgets"})}),"\n",(0,l.jsx)(n.p,{children:"Don't Starve Together provides a rich collection of pre-built widgets that can be used to create complex UI elements. This document covers the most commonly used widgets and how to implement them in your mods."}),"\n",(0,l.jsx)(n.h2,{id:"basic-ui-components",children:"Basic UI Components"}),"\n",(0,l.jsx)(n.h3,{id:"text",children:"Text"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Text"})," widget displays text with various formatting options:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Text = require "widgets/text"\n\n-- Parameters: font, size, text, color\nlocal my_text = Text(NEWFONT, 30, "Hello World")\nmy_text:SetColour(1, 1, 1, 1)  -- RGBA (white)\n\n-- Common methods\nmy_text:SetString("New text")  -- Change text content\nmy_text:SetSize(40)            -- Change font size\nmy_text:SetRegionSize(200, 50) -- Set text box dimensions\nmy_text:EnableWordWrap(true)   -- Enable word wrapping\n'})}),"\n",(0,l.jsx)(n.p,{children:"Available fonts:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"BODYTEXTFONT"})," - Standard body text"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"BUTTONFONT"})," - Used for buttons"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"CHATFONT"})," - Used for chat messages"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"HEADERFONT"})," - Used for headers"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"NEWFONT"})," - Standard UI font"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TITLEFONT"})," - Used for titles"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"UIFONT"})," - Alternative UI font"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"image",children:"Image"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Image"})," widget displays images from texture atlases:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Image = require "widgets/image"\n\n-- Parameters: atlas, texture\nlocal my_image = Image("images/ui.xml", "panel.tex")\n\n-- Common methods\nmy_image:SetSize(100, 100)     -- Set dimensions\nmy_image:SetTint(1, 0.8, 0.8, 1)  -- Apply a reddish tint\nmy_image:SetScale(1.5)         -- Scale the image\nmy_image:SetRotation(45)       -- Rotate 45 degrees\n'})}),"\n",(0,l.jsx)(n.h3,{id:"button",children:"Button"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Button"})," widget is the base class for interactive buttons:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Button = require "widgets/button"\n\nlocal my_button = Button()\nmy_button:SetText("Click Me")\nmy_button:SetOnClick(function() print("Button clicked!") end)\n\n-- Button states\nmy_button:Enable()     -- Make the button interactive\nmy_button:Disable()    -- Make the button non-interactive\nmy_button:SetSelected(true)  -- Set the button as selected\n'})}),"\n",(0,l.jsx)(n.h3,{id:"imagebutton",children:"ImageButton"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"ImageButton"})," widget creates buttons with different images for different states:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local ImageButton = require "widgets/imagebutton"\n\n-- Parameters: atlas, normal, focus, disabled, down, selected, scale, offset\nlocal my_button = ImageButton(\n    "images/ui.xml",      -- Atlas\n    "button.tex",         -- Normal state\n    "button_focus.tex",   -- Focus state\n    "button_disabled.tex" -- Disabled state\n)\n\n-- Set click handler\nmy_button:SetOnClick(function() print("Image button clicked!") end)\n\n-- Styling\nmy_button:SetScale(1.2)\nmy_button:SetText("My Button")  -- Add text to the button\nmy_button:SetTextSize(20)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"animbutton",children:"AnimButton"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"AnimButton"})," widget creates buttons using animations:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local AnimButton = require "widgets/animbutton"\n\n-- Parameters: atlas, normal, focus, disabled, down, selected, scale, offset\nlocal my_anim_button = AnimButton("anim.zip", "idle", "focus")\nmy_anim_button:SetOnClick(function() print("Animated button clicked!") end)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"layout-components",children:"Layout Components"}),"\n",(0,l.jsx)(n.h3,{id:"nineslice",children:"NineSlice"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"NineSlice"})," widget creates expandable panels with fixed corners:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local NineSlice = require "widgets/nineslice"\n\n-- Parameters: atlas, texture, margin\nlocal panel = NineSlice(\n    "images/ui.xml",        -- Atlas\n    "panel_nine_slice.tex", -- Texture\n    24                      -- Margin size\n)\npanel:SetSize(200, 150)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"threeslice",children:"ThreeSlice"}),"\n",(0,l.jsxs)(n.p,{children:["Similar to ",(0,l.jsx)(n.code,{children:"NineSlice"})," but for horizontal or vertical slicing only:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local ThreeSlice = require "widgets/threeslice"\n\n-- Parameters: atlas, texture, vertical, margin\nlocal bar = ThreeSlice(\n    "images/ui.xml",        -- Atlas\n    "bar_three_slice.tex",  -- Texture\n    true,                   -- Vertical orientation\n    16                      -- Margin size\n)\nbar:SetSize(30, 200)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"container-widgets",children:"Container Widgets"}),"\n",(0,l.jsx)(n.h3,{id:"scrollablelist",children:"ScrollableList"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"ScrollableList"})," widget creates scrollable lists of items:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local ScrollableList = require "widgets/scrollablelist"\n\n-- Parameters: items, item_width, item_height, num_visible_items, items_per_row, horizontal\nlocal items = {\n    { text = "Item 1", data = 1 },\n    { text = "Item 2", data = 2 },\n    { text = "Item 3", data = 3 },\n    -- More items...\n}\n\nlocal function BuildItem(item, index)\n    local widget = Widget("list-item")\n    local text = widget:AddChild(Text(NEWFONT, 20, item.text))\n    \n    widget.OnGainFocus = function()\n        text:SetColour(1, 1, 0, 1)  -- Yellow on focus\n    end\n    \n    widget.OnLoseFocus = function()\n        text:SetColour(1, 1, 1, 1)  -- White when not focused\n    end\n    \n    widget.OnSelect = function()\n        print("Selected item: " .. item.text)\n    end\n    \n    return widget\nend\n\nlocal list = ScrollableList(\n    items,      -- Items array\n    350,        -- Item width\n    40,         -- Item height\n    5,          -- Number of visible items\n    1,          -- Items per row\n    false       -- Not horizontal\n)\n\nlist:SetItemsData(items)\nlist:SetUpdateFn(BuildItem)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"menu",children:"Menu"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Menu"})," widget creates a menu with multiple items:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Menu = require "widgets/menu"\n\n-- Parameters: direction, spacing, width, height\nlocal menu = Menu(nil, 0, true)\n\n-- Add menu items\nmenu:AddItem("Play", function() print("Play selected") end)\nmenu:AddItem("Options", function() print("Options selected") end)\nmenu:AddItem("Quit", function() print("Quit selected") end)\n\n-- Focus the first item\nmenu:SetFocus()\n'})}),"\n",(0,l.jsx)(n.h2,{id:"interactive-components",children:"Interactive Components"}),"\n",(0,l.jsx)(n.h3,{id:"textedit",children:"TextEdit"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"TextEdit"})," widget creates editable text fields:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local TextEdit = require "widgets/textedit"\n\n-- Parameters: font, size, text, color, max_length\nlocal text_edit = TextEdit(NEWFONT, 30, "Edit me", {1,1,1,1}, 100)\n\n-- Set callbacks\ntext_edit:SetOnTextInputted(function(text)\n    print("Text changed to: " .. text)\nend)\n\ntext_edit:SetOnEnter(function(text)\n    print("Enter pressed with text: " .. text)\nend)\n\n-- Methods\ntext_edit:SetEditing(true)  -- Focus and start editing\ntext_edit:SetString("New text")  -- Set the text content\n'})}),"\n",(0,l.jsx)(n.h3,{id:"spinner",children:"Spinner"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Spinner"})," widget creates a value selector with increment/decrement buttons:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Spinner = require "widgets/spinner"\n\n-- Parameters: values, width, height, textinfo, callback, initial_index, atlas, textures\nlocal values = {"Low", "Medium", "High"}\nlocal spinner = Spinner(\n    values,             -- Values to cycle through\n    200,                -- Width\n    60,                 -- Height\n    {font=NEWFONT, size=25},  -- Text formatting\n    function(selected)  -- Callback when value changes\n        print("Selected: " .. selected)\n    end,\n    2                   -- Initial index (Medium)\n)\n\n-- Methods\nspinner:SetSelected("High")  -- Set the current value\nlocal current = spinner:GetSelected()  -- Get the current value\n'})}),"\n",(0,l.jsx)(n.h2,{id:"special-effects",children:"Special Effects"}),"\n",(0,l.jsx)(n.h3,{id:"uianim",children:"UIAnim"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"UIAnim"})," widget displays animated UI elements:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local UIAnim = require "widgets/uianim"\n\nlocal my_anim = UIAnim()\nmy_anim:GetAnimState():SetBank("portal_scene")\nmy_anim:GetAnimState():SetBuild("portal_scene2")\nmy_anim:GetAnimState():PlayAnimation("portal_idle", true)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"ringmeter",children:"RingMeter"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"RingMeter"})," widget creates circular progress indicators:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local RingMeter = require "widgets/ringmeter"\n\n-- Parameters: atlas, texture_bg, texture_fg, anticlockwise\nlocal meter = RingMeter(\n    "images/ui.xml",    -- Atlas\n    "ring_meter_bg.tex",  -- Background texture\n    "ring_meter_fg.tex",  -- Foreground texture\n    false                 -- Clockwise direction\n)\n\n-- Set the value (0 to 1)\nmeter:SetValue(0.75)  -- 75% full\n'})}),"\n",(0,l.jsx)(n.h2,{id:"templates",children:"Templates"}),"\n",(0,l.jsx)(n.p,{children:"DST provides many pre-built templates for common UI elements:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local TEMPLATES = require "widgets/templates"\n\n-- Create common UI elements\nlocal background = TEMPLATES.BackgroundTint(0.75)\nlocal panel = TEMPLATES.RectangleWindow(400, 300)\nlocal button = TEMPLATES.StandardButton(function() print("Clicked") end, "Click Me")\nlocal checkbox = TEMPLATES.Checkbox("Option", true, function(checked) print("Checked: " .. tostring(checked)) end)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Common templates include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TEMPLATES.BackgroundTint(alpha, rgb)"})," - Creates a tinted background"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TEMPLATES.RectangleWindow(width, height)"})," - Creates a standard window"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TEMPLATES.StandardButton(callback, text)"})," - Creates a standard button"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TEMPLATES.IconButton(atlas, texture, callback)"})," - Creates an icon button"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TEMPLATES.Checkbox(text, initial_value, callback)"})," - Creates a checkbox"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TEMPLATES.LabelSpinner(text, options, callback)"})," - Creates a labeled spinner"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"status-displays",children:"Status Displays"}),"\n",(0,l.jsx)(n.p,{children:"DST includes specialized widgets for displaying player status:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local StatusDisplays = require "widgets/statusdisplays"\n\n-- Create status displays for health, hunger, sanity\nlocal status = StatusDisplays(ThePlayer)\n\n-- Individual badges can also be created\nlocal HealthBadge = require "widgets/healthbadge"\nlocal health_badge = HealthBadge(ThePlayer)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-layout-techniques",children:"Advanced Layout Techniques"}),"\n",(0,l.jsx)(n.h3,{id:"positioning-and-anchoring",children:"Positioning and Anchoring"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Set position relative to parent\nwidget:SetPosition(100, 50, 0)  -- x, y, z\n\n-- Set anchoring to screen edges\nwidget:SetVAnchor(ANCHOR_MIDDLE)  -- ANCHOR_TOP, ANCHOR_MIDDLE, ANCHOR_BOTTOM\nwidget:SetHAnchor(ANCHOR_LEFT)    -- ANCHOR_LEFT, ANCHOR_MIDDLE, ANCHOR_RIGHT\n\n-- Set scale mode\nwidget:SetScaleMode(SCALEMODE_PROPORTIONAL)  -- SCALEMODE_NONE, SCALEMODE_FILLSCREEN, SCALEMODE_PROPORTIONAL\n"})}),"\n",(0,l.jsx)(n.h3,{id:"focus-management",children:"Focus Management"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Set focus direction for controller/keyboard navigation\nwidget:SetFocusChangeDir(MOVE_UP, other_widget)\nwidget:SetFocusChangeDir(MOVE_DOWN, another_widget)\nwidget:SetFocusChangeDir(MOVE_LEFT, left_widget)\nwidget:SetFocusChangeDir(MOVE_RIGHT, right_widget)\n\n-- Set and clear focus\nwidget:SetFocus()\nwidget:ClearFocus()\n\n-- Focus callbacks\nfunction MyWidget:OnGainFocus()\n    self:SetScale(1.1) -- Grow when focused\nend\n\nfunction MyWidget:OnLoseFocus()\n    self:SetScale(1.0) -- Normal size when not focused\nend\n"})}),"\n",(0,l.jsx)(n.h2,{id:"example-inventory-item-widget",children:"Example: Inventory Item Widget"}),"\n",(0,l.jsx)(n.p,{children:"Here's a complete example of creating a custom widget for displaying inventory items:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\n\n-- Create a custom inventory item widget\nlocal InventoryItemWidget = Class(Widget, function(self, item_data)\n    Widget._ctor(self, "InventoryItemWidget")\n    \n    -- Store item data\n    self.item_data = item_data\n    \n    -- Create background\n    self.bg = self:AddChild(Image("images/inventoryimages.xml", "inventory_slot.tex"))\n    self.bg:SetSize(80, 80)\n    \n    -- Create item icon\n    self.icon = self:AddChild(Image(item_data.atlas, item_data.image))\n    self.icon:SetSize(60, 60)\n    \n    -- Create count text for stackable items\n    if item_data.count and item_data.count > 1 then\n        self.count = self:AddChild(Text(NEWFONT, 20, tostring(item_data.count)))\n        self.count:SetPosition(25, -25)\n    end\n    \n    -- Add hover text\n    self:SetTooltip(item_data.name)\n    \n    -- Set up click handling\n    self:SetOnClick(function()\n        print("Clicked on " .. item_data.name)\n    end)\nend)\n\n-- Add a method to update the count\nfunction InventoryItemWidget:UpdateCount(count)\n    if not self.count and count > 1 then\n        self.count = self:AddChild(Text(NEWFONT, 20, tostring(count)))\n        self.count:SetPosition(25, -25)\n    elseif self.count then\n        self.count:SetString(tostring(count))\n    end\n    \n    self.item_data.count = count\nend\n\n-- Add a method to handle clicks\nfunction InventoryItemWidget:SetOnClick(fn)\n    self.onclick = fn\n    self:SetClickable(true)\nend\n\n-- Override OnControl to handle clicks\nfunction InventoryItemWidget:OnControl(control, down)\n    if Widget.OnControl(self, control, down) then return true end\n    \n    if control == CONTROL_ACCEPT and not down and self.onclick then\n        self.onclick()\n        return true\n    end\n    \n    return false\nend\n\n-- Usage example\nlocal item = InventoryItemWidget({\n    name = "Log",\n    atlas = "images/inventoryimages.xml",\n    image = "log.tex",\n    count = 5\n})\nroot:AddChild(item)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices-for-widget-development",children:"Best Practices for Widget Development"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Memory Management"}),": Always call ",(0,l.jsx)(n.code,{children:"widget:Kill()"})," when removing widgets to prevent memory leaks"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Focus Management"}),": Set up proper focus navigation for controller support"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Scaling"}),": Use ",(0,l.jsx)(n.code,{children:"SetScaleMode"})," appropriately for different screen resolutions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Performance"}),": Minimize the number of widgets and avoid creating them frequently"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Event Handling"}),": Return ",(0,l.jsx)(n.code,{children:"true"})," from event handlers to prevent event propagation when appropriate"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reusability"}),": Create custom widget classes for UI elements you use repeatedly"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Animation"}),": Use the animation system for smooth transitions instead of manual positioning"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Accessibility"}),": Ensure UI elements are properly sized and have adequate contrast"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Organization"}),": Group related widgets into logical hierarchies"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Testing"}),": Test your UI on different resolutions and with both mouse and controller input"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const l={},s=i.createContext(l);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);