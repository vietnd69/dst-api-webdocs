"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6114],{4804:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"api-vanilla/examples/custom-ui-elements","title":"Custom UI Elements","description":"This guide demonstrates how to create custom UI elements for Don\'t Starve Together mods. You\'ll learn how to build reusable widgets, create custom screens, and implement interactive UI components.","source":"@site/docs/api-vanilla/examples/custom-ui-elements.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/custom-ui-elements","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-ui-elements","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"custom-ui-elements","title":"Custom UI Elements","sidebar_position":10},"sidebar":"docs","previous":{"title":"UI Customization","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/ui-mod"},"next":{"title":"Custom Stategraphs and Animations","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-stategraphs-and-animations"}}');var i=t(4848),s=t(8453);const a={id:"custom-ui-elements",title:"Custom UI Elements",sidebar_position:10},o="Custom UI Elements",d={},c=[{value:"Creating Basic Custom Widgets",id:"creating-basic-custom-widgets",level:2},{value:"Custom Button Example",id:"custom-button-example",level:3},{value:"Custom Panel Example",id:"custom-panel-example",level:3},{value:"Interactive UI Components",id:"interactive-ui-components",level:2},{value:"Custom Slider Widget",id:"custom-slider-widget",level:3},{value:"Custom Checkbox Widget",id:"custom-checkbox-widget",level:3},{value:"Custom Inventory UI",id:"custom-inventory-ui",level:2},{value:"Custom Inventory Slot",id:"custom-inventory-slot",level:3},{value:"Custom Popups and Dialogs",id:"custom-popups-and-dialogs",level:2},{value:"Custom Confirmation Dialog",id:"custom-confirmation-dialog",level:3},{value:"Custom HUD Elements",id:"custom-hud-elements",level:2},{value:"Custom Status Badge",id:"custom-status-badge",level:3},{value:"Advanced UI Techniques",id:"advanced-ui-techniques",level:2},{value:"Draggable Window",id:"draggable-window",level:3},{value:"Tabbed Interface",id:"tabbed-interface",level:3},{value:"Best Practices",id:"best-practices",level:2}];function r(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"custom-ui-elements",children:"Custom UI Elements"})}),"\n",(0,i.jsx)(n.p,{children:"This guide demonstrates how to create custom UI elements for Don't Starve Together mods. You'll learn how to build reusable widgets, create custom screens, and implement interactive UI components."}),"\n",(0,i.jsx)(n.h2,{id:"creating-basic-custom-widgets",children:"Creating Basic Custom Widgets"}),"\n",(0,i.jsx)(n.p,{children:"Custom widgets allow you to create reusable UI components for your mods. They are built by extending existing widget classes."}),"\n",(0,i.jsx)(n.h3,{id:"custom-button-example",children:"Custom Button Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a custom styled button with hover effects\nlocal Widget = require "widgets/widget"\nlocal ImageButton = require "widgets/imagebutton"\nlocal Text = require "widgets/text"\n\nlocal CustomButton = Class(ImageButton, function(self, text, onclick, scale)\n    ImageButton._ctor(self, "images/ui.xml", "button.tex", "button_focus.tex")\n    \n    self.text = self:AddChild(Text(BUTTONFONT, 25, text))\n    self.text:SetPosition(0, 2)\n    \n    self:SetScale(scale or 1)\n    self:SetOnClick(onclick)\n    \n    -- Add pulsing animation when hovered\n    self.pulse = false\n    self:StartUpdating()\nend)\n\nfunction CustomButton:OnUpdate(dt)\n    local pos = TheInput:GetScreenPosition()\n    local wx, wy = self:GetWorldPosition():Get()\n    local w, h = self:GetSize()\n    \n    local hover = math.abs(pos.x - wx) < w/2 and math.abs(pos.y - wy) < h/2\n    \n    if hover and not self.pulse then\n        self.pulse = true\n        self:ScaleTo(self:GetScale(), self:GetScale() * 1.1, 0.2)\n        self.text:SetColour(1, 0.8, 0, 1)  -- Gold text on hover\n    elseif not hover and self.pulse then\n        self.pulse = false\n        self:ScaleTo(self:GetScale(), self:GetScale() / 1.1, 0.2)\n        self.text:SetColour(1, 1, 1, 1)  -- White text normally\n    end\nend\n\n-- Usage\nlocal my_button = CustomButton("Click Me", function() print("Button clicked!") end, 0.8)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-panel-example",children:"Custom Panel Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a custom styled panel with title and content area\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\n\nlocal CustomPanel = Class(Widget, function(self, title, width, height)\n    Widget._ctor(self, "CustomPanel")\n    \n    self.bg = self:AddChild(Image("images/ui.xml", "panel.tex"))\n    self.bg:SetSize(width, height)\n    \n    self.title = self:AddChild(Text(TITLEFONT, 30, title))\n    self.title:SetPosition(0, height/2 - 30)\n    \n    -- Create a content container for easy positioning\n    self.content = self:AddChild(Widget("content"))\n    self.content:SetPosition(0, 0)\nend)\n\n-- Add method to add content to the panel\nfunction CustomPanel:AddContent(widget)\n    return self.content:AddChild(widget)\nend\n\n-- Usage\nlocal panel = CustomPanel("My Panel", 300, 200)\nlocal text = panel:AddContent(Text(BODYFONT, 20, "This is a custom panel!"))\ntext:SetPosition(0, 0)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"interactive-ui-components",children:"Interactive UI Components"}),"\n",(0,i.jsx)(n.h3,{id:"custom-slider-widget",children:"Custom Slider Widget"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a custom slider for numeric values\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\n\nlocal CustomSlider = Class(Widget, function(self, min_value, max_value, default_value, on_change)\n    Widget._ctor(self, "CustomSlider")\n    \n    self.min_value = min_value or 0\n    self.max_value = max_value or 100\n    self.value = default_value or min_value\n    self.on_change = on_change\n    \n    -- Create the track\n    self.track = self:AddChild(Image("images/ui.xml", "line.tex"))\n    self.track:SetSize(200, 5)\n    \n    -- Create the handle\n    self.handle = self:AddChild(Image("images/ui.xml", "circle.tex"))\n    self.handle:SetSize(20, 20)\n    \n    -- Create the value text\n    self.text = self:AddChild(Text(NUMBERFONT, 20, tostring(self.value)))\n    self.text:SetPosition(0, -25)\n    \n    -- Set initial handle position\n    self:UpdateHandlePosition()\n    \n    -- Make the handle draggable\n    self.dragging = false\n    self:SetClickable(true)\nend)\n\nfunction CustomSlider:UpdateHandlePosition()\n    local percent = (self.value - self.min_value) / (self.max_value - self.min_value)\n    local x_pos = (percent * 200) - 100  -- Track width is 200, centered at 0\n    self.handle:SetPosition(x_pos, 0)\n    self.text:SetString(tostring(math.floor(self.value)))\nend\n\nfunction CustomSlider:SetValue(value)\n    value = math.max(self.min_value, math.min(self.max_value, value))\n    if value ~= self.value then\n        self.value = value\n        self:UpdateHandlePosition()\n        if self.on_change then\n            self.on_change(self.value)\n        end\n    end\nend\n\nfunction CustomSlider:OnMouseButton(button, down, x, y)\n    if button == MOUSEBUTTON_LEFT then\n        if down then\n            -- Start dragging\n            self.dragging = true\n            self:OnMouseMove(x, y)\n            self:StartUpdating()\n            return true\n        else\n            -- Stop dragging\n            self.dragging = false\n            self:StopUpdating()\n            return true\n        end\n    end\n    return false\nend\n\nfunction CustomSlider:OnUpdate(dt)\n    if self.dragging then\n        local pos = TheInput:GetScreenPosition()\n        self:OnMouseMove(pos.x, pos.y)\n    end\nend\n\nfunction CustomSlider:OnMouseMove(x, y)\n    if self.dragging then\n        local wx, wy = self:GetWorldPosition():Get()\n        local track_width = 200\n        local local_x = x - wx\n        \n        -- Convert position to value\n        local percent = (local_x + track_width/2) / track_width\n        percent = math.max(0, math.min(1, percent))\n        local value = self.min_value + percent * (self.max_value - self.min_value)\n        \n        self:SetValue(value)\n    end\nend\n\n-- Usage\nlocal slider = CustomSlider(0, 100, 50, function(value)\n    print("Slider value changed to: " .. value)\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-checkbox-widget",children:"Custom Checkbox Widget"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a custom checkbox with label\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\n\nlocal CustomCheckbox = Class(Widget, function(self, text, initial_value, on_change)\n    Widget._ctor(self, "CustomCheckbox")\n    \n    self.checked = initial_value or false\n    self.on_change = on_change\n    \n    -- Create the box\n    self.box = self:AddChild(Image("images/ui.xml", "checkbox.tex"))\n    self.box:SetSize(30, 30)\n    self.box:SetPosition(-100, 0)\n    \n    -- Create the check mark\n    self.check = self:AddChild(Image("images/ui.xml", "checkmark.tex"))\n    self.check:SetSize(20, 20)\n    self.check:SetPosition(-100, 0)\n    \n    -- Create the label\n    self.label = self:AddChild(Text(BODYFONT, 25, text))\n    self.label:SetPosition(0, 0)\n    \n    -- Update visual state\n    self:UpdateCheck()\n    \n    -- Make clickable\n    self:SetClickable(true)\nend)\n\nfunction CustomCheckbox:UpdateCheck()\n    if self.checked then\n        self.check:Show()\n    else\n        self.check:Hide()\n    end\nend\n\nfunction CustomCheckbox:SetChecked(checked)\n    if checked ~= self.checked then\n        self.checked = checked\n        self:UpdateCheck()\n        if self.on_change then\n            self.on_change(self.checked)\n        end\n    end\nend\n\nfunction CustomCheckbox:OnControl(control, down)\n    if Widget.OnControl(self, control, down) then return true end\n    \n    if control == CONTROL_ACCEPT and not down then\n        self:SetChecked(not self.checked)\n        return true\n    end\n    \n    return false\nend\n\nfunction CustomCheckbox:OnMouseButton(button, down, x, y)\n    if button == MOUSEBUTTON_LEFT and not down then\n        self:SetChecked(not self.checked)\n        return true\n    end\n    return false\nend\n\n-- Usage\nlocal checkbox = CustomCheckbox("Enable Feature", true, function(checked)\n    print("Checkbox changed to: " .. tostring(checked))\nend)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"custom-inventory-ui",children:"Custom Inventory UI"}),"\n",(0,i.jsx)(n.h3,{id:"custom-inventory-slot",children:"Custom Inventory Slot"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a custom inventory slot that can hold items\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\n\nlocal InventorySlot = Class(Widget, function(self, atlas, bgim, item, on_item_change)\n    Widget._ctor(self, "InventorySlot")\n    \n    self.item = item\n    self.on_item_change = on_item_change\n    \n    -- Create background\n    self.bg = self:AddChild(Image(atlas or "images/ui.xml", bgim or "inv_slot.tex"))\n    self.bg:SetSize(60, 60)\n    \n    -- Create item image (if item exists)\n    self.item_image = nil\n    self:UpdateItem()\n    \n    -- Make slot interactive\n    self:SetClickable(true)\nend)\n\nfunction InventorySlot:UpdateItem()\n    if self.item_image then\n        self.item_image:Kill()\n        self.item_image = nil\n    end\n    \n    if self.count_text then\n        self.count_text:Kill()\n        self.count_text = nil\n    end\n    \n    if self.item then\n        -- Create item image\n        self.item_image = self:AddChild(Image(self.item.atlas, self.item.image))\n        self.item_image:SetSize(50, 50)\n        \n        -- Add count text if stackable\n        if self.item.count and self.item.count > 1 then\n            self.count_text = self:AddChild(Text(NUMBERFONT, 20, tostring(self.item.count)))\n            self.count_text:SetPosition(15, -15)\n        end\n    end\nend\n\nfunction InventorySlot:SetItem(item)\n    if item ~= self.item then\n        self.item = item\n        self:UpdateItem()\n        \n        if self.on_item_change then\n            self.on_item_change(self.item)\n        end\n    end\nend\n\nfunction InventorySlot:OnControl(control, down)\n    if Widget.OnControl(self, control, down) then return true end\n    \n    if control == CONTROL_ACCEPT and not down then\n        if self.onclick then\n            self.onclick(self)\n        end\n        return true\n    end\n    \n    return false\nend\n\n-- Usage\nlocal slot = InventorySlot(nil, nil, {\n    atlas = "images/inventoryimages.xml",\n    image = "log.tex",\n    count = 5\n}, function(item)\n    if item then\n        print("Slot now contains: " .. item.image)\n    else\n        print("Slot is now empty")\n    end\nend)\n\nslot.onclick = function(slot)\n    print("Slot was clicked")\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"custom-popups-and-dialogs",children:"Custom Popups and Dialogs"}),"\n",(0,i.jsx)(n.h3,{id:"custom-confirmation-dialog",children:"Custom Confirmation Dialog"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a custom confirmation dialog\nlocal Screen = require "widgets/screen"\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\nlocal ImageButton = require "widgets/imagebutton"\n\nlocal ConfirmationDialog = Class(Screen, function(self, title, message, on_confirm, on_cancel)\n    Screen._ctor(self, "ConfirmationDialog")\n    \n    self.on_confirm = on_confirm\n    self.on_cancel = on_cancel\n    \n    -- Create black background for dimming\n    self.black = self:AddChild(Image("images/global.xml", "square.tex"))\n    self.black:SetVRegPoint(ANCHOR_MIDDLE)\n    self.black:SetHRegPoint(ANCHOR_MIDDLE)\n    self.black:SetVAnchor(ANCHOR_MIDDLE)\n    self.black:SetHAnchor(ANCHOR_MIDDLE)\n    self.black:SetScaleMode(SCALEMODE_FILLSCREEN)\n    self.black:SetTint(0, 0, 0, 0.7)\n    \n    -- Create root widget\n    self.root = self:AddChild(Widget("root"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetPosition(0, 0, 0)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Create panel\n    self.panel = self.root:AddChild(Image("images/ui.xml", "panel.tex"))\n    self.panel:SetSize(400, 250)\n    \n    -- Create title\n    self.title = self.panel:AddChild(Text(TITLEFONT, 40, title))\n    self.title:SetPosition(0, 80)\n    \n    -- Create message\n    self.message = self.panel:AddChild(Text(BODYFONT, 25, message))\n    self.message:SetPosition(0, 10)\n    self.message:SetRegionSize(350, 100)\n    self.message:EnableWordWrap(true)\n    \n    -- Create buttons\n    self.confirm_btn = self.panel:AddChild(ImageButton("images/ui.xml", "button.tex", "button_focus.tex"))\n    self.confirm_btn:SetPosition(-80, -70)\n    self.confirm_btn:SetText("Confirm")\n    self.confirm_btn:SetOnClick(function()\n        TheFrontEnd:PopScreen()\n        if self.on_confirm then\n            self.on_confirm()\n        end\n    end)\n    \n    self.cancel_btn = self.panel:AddChild(ImageButton("images/ui.xml", "button.tex", "button_focus.tex"))\n    self.cancel_btn:SetPosition(80, -70)\n    self.cancel_btn:SetText("Cancel")\n    self.cancel_btn:SetOnClick(function()\n        TheFrontEnd:PopScreen()\n        if self.on_cancel then\n            self.on_cancel()\n        end\n    end)\n    \n    -- Set up focus navigation\n    self.confirm_btn:SetFocusChangeDir(MOVE_RIGHT, self.cancel_btn)\n    self.cancel_btn:SetFocusChangeDir(MOVE_LEFT, self.confirm_btn)\n    \n    -- Set default focus\n    self.default_focus = self.cancel_btn\nend)\n\nfunction ConfirmationDialog:OnControl(control, down)\n    if Screen.OnControl(self, control, down) then return true end\n    \n    if not down and control == CONTROL_CANCEL then\n        TheFrontEnd:PopScreen()\n        if self.on_cancel then\n            self.on_cancel()\n        end\n        return true\n    end\n    \n    return false\nend\n\n-- Usage\nlocal dialog = ConfirmationDialog(\n    "Confirm Action",\n    "Are you sure you want to perform this action? It cannot be undone.",\n    function()\n        print("User confirmed")\n    end,\n    function()\n        print("User cancelled")\n    end\n)\n\nTheFrontEnd:PushScreen(dialog)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"custom-hud-elements",children:"Custom HUD Elements"}),"\n",(0,i.jsx)(n.h3,{id:"custom-status-badge",children:"Custom Status Badge"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a custom status badge for the HUD\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\n\nlocal CustomStatusBadge = Class(Widget, function(self, owner, icon, max_value)\n    Widget._ctor(self, "CustomStatusBadge")\n    \n    self.owner = owner\n    self.max_value = max_value or 100\n    self.current_value = max_value\n    \n    -- Create background\n    self.bg = self:AddChild(Image("images/ui.xml", "status_bg.tex"))\n    self.bg:SetSize(60, 60)\n    \n    -- Create icon\n    self.icon = self:AddChild(Image("images/ui.xml", icon or "health.tex"))\n    self.icon:SetSize(40, 40)\n    \n    -- Create meter ring\n    self.ring = self:AddChild(Image("images/ui.xml", "status_meter.tex"))\n    self.ring:SetSize(65, 65)\n    \n    -- Create value text\n    self.text = self:AddChild(Text(NUMBERFONT, 20, tostring(self.current_value)))\n    self.text:SetPosition(0, -40)\n    \n    -- Start updating\n    self:StartUpdating()\nend)\n\nfunction CustomStatusBadge:SetValue(value)\n    value = math.max(0, math.min(self.max_value, value))\n    if value ~= self.current_value then\n        self.current_value = value\n        \n        -- Update visual representation\n        local percent = value / self.max_value\n        self.ring:SetTint(1, 1, 1, percent)\n        self.text:SetString(tostring(math.floor(value)))\n        \n        -- Add visual feedback for low values\n        if percent < 0.25 then\n            self.icon:SetTint(1, 0.3, 0.3, 1)  -- Red tint when low\n            if not self.pulsing then\n                self.pulsing = true\n            end\n        else\n            self.icon:SetTint(1, 1, 1, 1)\n            self.pulsing = false\n        end\n    end\nend\n\nfunction CustomStatusBadge:OnUpdate(dt)\n    -- Pulse animation when low\n    if self.pulsing then\n        local t = GetTime() % 1\n        local scale = 0.9 + 0.2 * math.sin(t * 2 * math.pi)\n        self.icon:SetScale(scale)\n    else\n        self.icon:SetScale(1)\n    end\n    \n    -- Here you would typically read the actual value from the owner\n    -- Example: self:SetValue(self.owner.components.health.currenthealth)\nend\n\n-- Usage\nlocal badge = CustomStatusBadge(ThePlayer, "health.tex", 100)\nbadge:SetValue(75)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-ui-techniques",children:"Advanced UI Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"draggable-window",children:"Draggable Window"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a draggable window widget\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\nlocal ImageButton = require "widgets/imagebutton"\n\nlocal DraggableWindow = Class(Widget, function(self, title, width, height)\n    Widget._ctor(self, "DraggableWindow")\n    \n    self.width = width or 400\n    self.height = height or 300\n    \n    -- Create panel\n    self.bg = self:AddChild(Image("images/ui.xml", "panel.tex"))\n    self.bg:SetSize(self.width, self.height)\n    \n    -- Create title bar\n    self.title_bar = self:AddChild(Image("images/ui.xml", "title_bar.tex"))\n    self.title_bar:SetSize(self.width, 40)\n    self.title_bar:SetPosition(0, self.height/2 - 20)\n    \n    -- Create title\n    self.title = self.title_bar:AddChild(Text(TITLEFONT, 25, title))\n    self.title:SetPosition(0, 0)\n    \n    -- Create close button\n    self.close_btn = self.title_bar:AddChild(ImageButton("images/ui.xml", "close.tex", "close_focus.tex"))\n    self.close_btn:SetPosition(self.width/2 - 20, 0)\n    self.close_btn:SetScale(0.7)\n    self.close_btn:SetOnClick(function()\n        self:Hide()\n        if self.on_close then\n            self.on_close()\n        end\n    end)\n    \n    -- Create content container\n    self.content = self:AddChild(Widget("content"))\n    self.content:SetPosition(0, -20)\n    \n    -- Make window draggable\n    self.dragging = false\n    self.drag_offset = Vector3(0, 0, 0)\n    self.title_bar:SetClickable(true)\nend)\n\nfunction DraggableWindow:AddContent(widget)\n    return self.content:AddChild(widget)\nend\n\nfunction DraggableWindow:OnMouseButton(button, down, x, y)\n    if Widget.OnMouseButton(self, button, down, x, y) then \n        return true \n    end\n    \n    -- Handle dragging from title bar\n    if self.title_bar:IsVisible() then\n        local title_bar_pos = self.title_bar:GetWorldPosition()\n        local w = self.width\n        local h = 40\n        \n        if math.abs(x - title_bar_pos.x) < w/2 and math.abs(y - title_bar_pos.y) < h/2 then\n            if button == MOUSEBUTTON_LEFT then\n                if down then\n                    -- Start dragging\n                    self.dragging = true\n                    local window_pos = self:GetWorldPosition()\n                    self.drag_offset = Vector3(window_pos.x - x, window_pos.y - y, 0)\n                    self:StartUpdating()\n                    return true\n                else\n                    -- Stop dragging\n                    self.dragging = false\n                    self:StopUpdating()\n                    return true\n                end\n            end\n        end\n    end\n    \n    return false\nend\n\nfunction DraggableWindow:OnUpdate(dt)\n    if self.dragging then\n        local pos = TheInput:GetScreenPosition()\n        local new_pos = pos + self.drag_offset\n        self:SetPosition(new_pos)\n    end\nend\n\n-- Usage\nlocal window = DraggableWindow("My Window", 300, 200)\nlocal text = window:AddContent(Text(BODYFONT, 20, "This is a draggable window!\\nDrag the title bar to move it."))\ntext:SetPosition(0, 0)\n\nwindow.on_close = function()\n    print("Window was closed")\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"tabbed-interface",children:"Tabbed Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define a tabbed interface widget\nlocal Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\nlocal ImageButton = require "widgets/imagebutton"\n\nlocal TabbedPanel = Class(Widget, function(self, width, height)\n    Widget._ctor(self, "TabbedPanel")\n    \n    self.width = width or 400\n    self.height = height or 300\n    self.tabs = {}\n    self.active_tab = nil\n    \n    -- Create panel\n    self.bg = self:AddChild(Image("images/ui.xml", "panel.tex"))\n    self.bg:SetSize(self.width, self.height)\n    \n    -- Create tab bar\n    self.tab_bar = self:AddChild(Widget("tab_bar"))\n    self.tab_bar:SetPosition(0, self.height/2 - 20)\n    \n    -- Create content area\n    self.content = self:AddChild(Widget("content"))\n    self.content:SetPosition(0, -10)\nend)\n\nfunction TabbedPanel:AddTab(title, content_fn)\n    local tab_index = #self.tabs + 1\n    local tab_width = 100\n    \n    -- Create tab button\n    local tab_btn = self.tab_bar:AddChild(ImageButton(\n        "images/ui.xml", \n        "tab.tex", \n        "tab_selected.tex"\n    ))\n    tab_btn:SetPosition((tab_index - 1) * tab_width - self.width/2 + tab_width/2, 0)\n    tab_btn:SetText(title)\n    tab_btn:SetTextSize(20)\n    tab_btn:SetScale(0.8)\n    \n    -- Create tab content (initially hidden)\n    local tab_content = self.content:AddChild(Widget("tab_" .. tab_index))\n    content_fn(tab_content)\n    tab_content:Hide()\n    \n    -- Store tab data\n    local tab = {\n        index = tab_index,\n        title = title,\n        button = tab_btn,\n        content = tab_content\n    }\n    \n    table.insert(self.tabs, tab)\n    \n    -- Set up button click\n    tab_btn:SetOnClick(function()\n        self:SelectTab(tab_index)\n    end)\n    \n    -- Set up focus navigation\n    if tab_index > 1 then\n        tab_btn:SetFocusChangeDir(MOVE_LEFT, self.tabs[tab_index-1].button)\n        self.tabs[tab_index-1].button:SetFocusChangeDir(MOVE_RIGHT, tab_btn)\n    end\n    \n    -- If this is the first tab, select it\n    if tab_index == 1 then\n        self:SelectTab(1)\n    end\n    \n    return tab\nend\n\nfunction TabbedPanel:SelectTab(index)\n    -- Hide all tab contents and deselect all buttons\n    for _, tab in ipairs(self.tabs) do\n        tab.content:Hide()\n        tab.button:SetTextures("images/ui.xml", "tab.tex", "tab_selected.tex")\n    end\n    \n    -- Show selected tab content and select button\n    if self.tabs[index] then\n        self.tabs[index].content:Show()\n        self.tabs[index].button:SetTextures("images/ui.xml", "tab_selected.tex", "tab_selected.tex")\n        self.active_tab = index\n    end\nend\n\n-- Usage\nlocal tabbed_panel = TabbedPanel(400, 300)\n\ntabbed_panel:AddTab("General", function(parent)\n    local text = parent:AddChild(Text(BODYFONT, 20, "General settings tab content"))\n    text:SetPosition(0, 0)\nend)\n\ntabbed_panel:AddTab("Audio", function(parent)\n    local text = parent:AddChild(Text(BODYFONT, 20, "Audio settings tab content"))\n    text:SetPosition(0, 0)\nend)\n\ntabbed_panel:AddTab("Video", function(parent)\n    local text = parent:AddChild(Text(BODYFONT, 20, "Video settings tab content"))\n    text:SetPosition(0, 0)\nend)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Component Reusability"}),": Design widgets to be reusable across different screens and mods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Focus Management"}),": Always set up proper focus navigation for controller support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cleanup"}),": Call ",(0,i.jsx)(n.code,{children:"widget:Kill()"})," when removing widgets to prevent memory leaks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Handling"}),": Return ",(0,i.jsx)(n.code,{children:"true"})," from event handlers to prevent event propagation when appropriate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scaling"}),": Use ",(0,i.jsx)(n.code,{children:"SetScaleMode"})," appropriately for different screen resolutions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Minimize the number of widgets and avoid creating them frequently"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Feedback"}),": Provide clear visual feedback for hover, focus, and click states"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Accessibility"}),": Ensure all interactive elements can be navigated with a controller"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistency"}),": Follow DST's UI style for a consistent user experience"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing"}),": Test your UI on different resolutions and with both mouse and controller input"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By following these examples and best practices, you can create rich, interactive UI elements for your Don't Starve Together mods that integrate seamlessly with the game's existing interface."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var l=t(6540);const i={},s=l.createContext(i);function a(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);