"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[66329],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(96540);const r={},l=i.createContext(r);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:n},e.children)}},35294:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"game-scripts/core-systems/world-systems/tiles-terrain/noisetilefunctions","title":"Noise Tile Functions","description":"Functions for converting noise values to specific world tile types in Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/world-systems/tiles-terrain/noisetilefunctions.md","sourceDirName":"game-scripts/core-systems/world-systems/tiles-terrain","slug":"/game-scripts/core-systems/world-systems/tiles-terrain/noisetilefunctions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/noisetilefunctions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"noisetilefunctions","title":"Noise Tile Functions","description":"Functions for converting noise values to specific world tile types in Don\'t Starve Together","sidebar_position":5,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"World Tile Definitions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/worldtiledefs"},"next":{"title":"Ground Creep Definitions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/groundcreepdefs"}}');var r=s(74848),l=s(28453);const o={id:"noisetilefunctions",title:"Noise Tile Functions",description:"Functions for converting noise values to specific world tile types in Don't Starve Together",sidebar_position:5,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Noise Tile Functions",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Noise Conversion Functions",id:"noise-conversion-functions",level:2},{value:"GetTileForFungusMoonNoise(noise)",id:"get-tile-for-fungus-moon-noise",level:3},{value:"GetTileForDirtNoise(noise)",id:"get-tile-for-dirt-noise",level:3},{value:"GetTileForAbyssNoise(noise)",id:"get-tile-for-abyss-noise",level:3},{value:"GetTileForCaveNoise(noise)",id:"get-tile-for-cave-noise",level:3},{value:"GetTileForFungusNoise(noise)",id:"get-tile-for-fungus-noise",level:3},{value:"GetTileForMeteorCoastNoise(noise)",id:"get-tile-for-meteor-coast-noise",level:3},{value:"GetTileForMeteorMineNoise(noise)",id:"get-tile-for-meteor-mine-noise",level:3},{value:"GetTileForGroundNoise(noise)",id:"get-tile-for-ground-noise",level:3},{value:"Module Structure",id:"module-structure",level:2},{value:"Usage in World Generation",id:"usage-in-world-generation",level:2},{value:"Related Modules",id:"related-modules",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"noise-tile-functions",children:"Noise Tile Functions"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"noisetilefunctions"})," module provides a collection of noise-to-tile conversion functions used in world generation. These functions take noise values (typically between 0 and 1) and return appropriate ",(0,r.jsx)(n.code,{children:"WORLD_TILES"})," constants based on predefined thresholds, enabling procedural terrain generation for different biome types."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Access the noise tile function mapping\nlocal noisetilefunctions = require("noisetilefunctions")\n\n-- Get a specific conversion function\nlocal groundConverter = noisetilefunctions[WORLD_TILES.GROUND_NOISE]\n\n-- Convert noise value to tile type\nlocal noise_value = 0.3\nlocal tile_type = groundConverter(noise_value)\n-- Result: WORLD_TILES.ROCKY\n\n-- Use default converter for unknown noise types\nlocal defaultConverter = noisetilefunctions.default\nlocal default_tile = defaultConverter(0.6)\n-- Result: WORLD_TILES.FOREST\n'})}),"\n",(0,r.jsx)(n.h2,{id:"noise-conversion-functions",children:"Noise Conversion Functions"}),"\n",(0,r.jsx)(n.h3,{id:"get-tile-for-fungus-moon-noise",children:"GetTileForFungusMoonNoise(noise)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts noise values to fungus and fungusmoon tile types with alternating patterns for moon-influenced fungal areas."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"noise"})," (number): Noise value between 0 and 1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(WORLD_TILES): ",(0,r.jsx)(n.code,{children:"WORLD_TILES.FUNGUS"})," or ",(0,r.jsx)(n.code,{children:"WORLD_TILES.FUNGUSMOON"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Noise Thresholds:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"< 0.25"}),": FUNGUS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.25-0.35"}),": FUNGUSMOON"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.35-0.4"}),": FUNGUS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.4-0.45"}),": FUNGUSMOON"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.45-0.55"}),": FUNGUS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.55-0.65"}),": FUNGUSMOON"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">= 0.65"}),": FUNGUS"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local converter = noisetilefunctions[WORLD_TILES.FUNGUSMOON_NOISE]\nlocal tile1 = converter(0.1)   -- WORLD_TILES.FUNGUS\nlocal tile2 = converter(0.3)   -- WORLD_TILES.FUNGUSMOON\nlocal tile3 = converter(0.6)   -- WORLD_TILES.FUNGUSMOON\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-tile-for-dirt-noise",children:"GetTileForDirtNoise(noise)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts noise values to dirt-based tile types for surface terrain generation."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"noise"})," (number): Noise value between 0 and 1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(WORLD_TILES): ",(0,r.jsx)(n.code,{children:"WORLD_TILES.DIRT"})," or ",(0,r.jsx)(n.code,{children:"WORLD_TILES.DESERT_DIRT"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Noise Thresholds:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"< 0.4"}),": DIRT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">= 0.4"}),": DESERT_DIRT"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local converter = noisetilefunctions[WORLD_TILES.DIRT_NOISE]\nlocal tile1 = converter(0.2)   -- WORLD_TILES.DIRT\nlocal tile2 = converter(0.8)   -- WORLD_TILES.DESERT_DIRT\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-tile-for-abyss-noise",children:"GetTileForAbyssNoise(noise)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts noise values to abyss-related tile types, primarily creating impassable terrain with small cave areas."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"noise"})," (number): Noise value between 0 and 1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(WORLD_TILES): ",(0,r.jsx)(n.code,{children:"WORLD_TILES.IMPASSABLE"})," or ",(0,r.jsx)(n.code,{children:"WORLD_TILES.CAVE"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Noise Thresholds:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"< 0.75"}),": IMPASSABLE"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.75-0.85"}),": CAVE"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">= 0.85"}),": IMPASSABLE"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local converter = noisetilefunctions[WORLD_TILES.ABYSS_NOISE]\nlocal tile1 = converter(0.5)   -- WORLD_TILES.IMPASSABLE\nlocal tile2 = converter(0.8)   -- WORLD_TILES.CAVE\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-tile-for-cave-noise",children:"GetTileForCaveNoise(noise)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts noise values to cave terrain types, creating a mix of passable cave areas, underground rock, and impassable barriers."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"noise"})," (number): Noise value between 0 and 1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(WORLD_TILES): ",(0,r.jsx)(n.code,{children:"WORLD_TILES.IMPASSABLE"}),", ",(0,r.jsx)(n.code,{children:"WORLD_TILES.CAVE"}),", or ",(0,r.jsx)(n.code,{children:"WORLD_TILES.UNDERROCK"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Noise Thresholds:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"< 0.25"}),": IMPASSABLE"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.25-0.4"}),": CAVE"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.4-0.7"}),": UNDERROCK"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">= 0.7"}),": IMPASSABLE"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local converter = noisetilefunctions[WORLD_TILES.CAVE_NOISE]\nlocal tile1 = converter(0.1)   -- WORLD_TILES.IMPASSABLE\nlocal tile2 = converter(0.3)   -- WORLD_TILES.CAVE\nlocal tile3 = converter(0.5)   -- WORLD_TILES.UNDERROCK\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-tile-for-fungus-noise",children:"GetTileForFungusNoise(noise)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts noise values to fungal biome tile types, creating diverse underground fungal terrain."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"noise"})," (number): Noise value between 0 and 1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(WORLD_TILES): Various tile types including ",(0,r.jsx)(n.code,{children:"IMPASSABLE"}),", ",(0,r.jsx)(n.code,{children:"MUD"}),", ",(0,r.jsx)(n.code,{children:"DIRT"}),", ",(0,r.jsx)(n.code,{children:"FUNGUS"}),", and ",(0,r.jsx)(n.code,{children:"UNDERROCK"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Noise Thresholds:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"< 0.25"}),": IMPASSABLE"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.25-0.35"}),": MUD"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.35-0.4"}),": DIRT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.4-0.45"}),": FUNGUS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.45-0.55"}),": DIRT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.55-0.65"}),": UNDERROCK"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">= 0.65"}),": IMPASSABLE"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local converter = noisetilefunctions[WORLD_TILES.FUNGUS_NOISE]\nlocal tile1 = converter(0.3)   -- WORLD_TILES.MUD\nlocal tile2 = converter(0.42)  -- WORLD_TILES.FUNGUS\nlocal tile3 = converter(0.6)   -- WORLD_TILES.UNDERROCK\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-tile-for-meteor-coast-noise",children:"GetTileForMeteorCoastNoise(noise)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts noise values to meteor coast terrain, creating areas with meteor impact sites along coastlines."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"noise"})," (number): Noise value between 0 and 1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(WORLD_TILES): ",(0,r.jsx)(n.code,{children:"WORLD_TILES.PEBBLEBEACH"})," or ",(0,r.jsx)(n.code,{children:"WORLD_TILES.METEOR"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Noise Thresholds:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"< 0.55"}),": PEBBLEBEACH"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.55-0.75"}),": METEOR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">= 0.75"}),": PEBBLEBEACH"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local converter = noisetilefunctions[WORLD_TILES.METEORCOAST_NOISE]\nlocal tile1 = converter(0.3)   -- WORLD_TILES.PEBBLEBEACH\nlocal tile2 = converter(0.6)   -- WORLD_TILES.METEOR\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-tile-for-meteor-mine-noise",children:"GetTileForMeteorMineNoise(noise)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts noise values to meteor mining terrain, creating alternating patterns of rocky and meteor tile areas."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"noise"})," (number): Noise value between 0 and 1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(WORLD_TILES): ",(0,r.jsx)(n.code,{children:"WORLD_TILES.ROCKY"})," or ",(0,r.jsx)(n.code,{children:"WORLD_TILES.METEOR"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Noise Thresholds:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"< 0.4"}),": ROCKY"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.4-0.6"}),": METEOR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.6-0.8"}),": ROCKY"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">= 0.8"}),": METEOR"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local converter = noisetilefunctions[WORLD_TILES.METEORMINE_NOISE]\nlocal tile1 = converter(0.2)   -- WORLD_TILES.ROCKY\nlocal tile2 = converter(0.5)   -- WORLD_TILES.METEOR\nlocal tile3 = converter(0.9)   -- WORLD_TILES.METEOR\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-tile-for-ground-noise",children:"GetTileForGroundNoise(noise)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts noise values to general surface terrain types, creating diverse overworld biomes. This is also used as the default conversion function."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"noise"})," (number): Noise value between 0 and 1"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(WORLD_TILES): Various surface tile types"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Noise Thresholds:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"< 0.25"}),": IMPASSABLE"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.25-0.26"}),": ROAD"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.26-0.35"}),": ROCKY"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.35-0.4"}),": DIRT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.4-0.5"}),": GRASS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0.5-0.75"}),": FOREST"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">= 0.75"}),": MARSH"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local converter = noisetilefunctions[WORLD_TILES.GROUND_NOISE]\n-- or use the default converter\nlocal defaultConverter = noisetilefunctions.default\n\nlocal tile1 = converter(0.1)   -- WORLD_TILES.IMPASSABLE\nlocal tile2 = converter(0.45)  -- WORLD_TILES.GRASS\nlocal tile3 = converter(0.6)   -- WORLD_TILES.FOREST\nlocal tile4 = converter(0.8)   -- WORLD_TILES.MARSH\n"})}),"\n",(0,r.jsx)(n.h2,{id:"module-structure",children:"Module Structure"}),"\n",(0,r.jsxs)(n.p,{children:["The module returns a table that maps ",(0,r.jsx)(n.code,{children:"WORLD_TILES"})," noise constants to their corresponding conversion functions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"{\n    [WORLD_TILES.FUNGUSMOON_NOISE] = GetTileForFungusMoonNoise,\n    [WORLD_TILES.DIRT_NOISE] = GetTileForDirtNoise,\n    [WORLD_TILES.ABYSS_NOISE] = GetTileForAbyssNoise,\n    [WORLD_TILES.CAVE_NOISE] = GetTileForCaveNoise,\n    [WORLD_TILES.FUNGUS_NOISE] = GetTileForFungusNoise,\n    [WORLD_TILES.METEORCOAST_NOISE] = GetTileForMeteorCoastNoise,\n    [WORLD_TILES.METEORMINE_NOISE] = GetTileForMeteorMineNoise,\n    [WORLD_TILES.GROUND_NOISE] = GetTileForGroundNoise,\n    default = GetTileForGroundNoise,\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage-in-world-generation",children:"Usage in World Generation"}),"\n",(0,r.jsx)(n.p,{children:"These functions are typically used in the world generation pipeline where noise maps are converted to actual terrain tiles:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Example world generation usage\nlocal noisetilefunctions = require("noisetilefunctions")\n\nfunction ConvertNoiseToTiles(noise_map, noise_type)\n    local converter = noisetilefunctions[noise_type] or noisetilefunctions.default\n    local tile_map = {}\n    \n    for i, noise_value in ipairs(noise_map) do\n        tile_map[i] = converter(noise_value)\n    end\n    \n    return tile_map\nend\n\n-- Convert fungus moon noise to tiles\nlocal fungus_tiles = ConvertNoiseToTiles(fungus_noise_data, WORLD_TILES.FUNGUSMOON_NOISE)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./constants.md",children:"Constants"}),": Contains ",(0,r.jsx)(n.code,{children:"WORLD_TILES"})," definitions used by these functions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../map/",children:"Map Generation"}),": World generation systems that utilize these noise conversion functions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./config.md",children:"World Settings"}),": Configuration options that may affect terrain generation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);