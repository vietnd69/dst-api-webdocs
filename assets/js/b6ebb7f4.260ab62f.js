"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[77221],{26331:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"game-scripts/core-systems/game-configuration/settings/constants","title":"Constants System","description":"Comprehensive documentation of Don\'t Starve Together global constants and configuration values","source":"@site/docs/game-scripts/core-systems/game-configuration/settings/constants.md","sourceDirName":"game-scripts/core-systems/game-configuration/settings","slug":"/game-scripts/core-systems/game-configuration/settings/constants","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/constants","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"constants","title":"Constants System","description":"Comprehensive documentation of Don\'t Starve Together global constants and configuration values","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Console Screen Settings","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/consolescreensettings"},"next":{"title":"Fire Level","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/firelevel"}}');var t=s(74848),i=s(28453);const r={id:"constants",title:"Constants System",description:"Comprehensive documentation of Don't Starve Together global constants and configuration values",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="Constants System",o={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Core Categories",id:"core-categories",level:2},{value:"Mathematical Constants",id:"mathematical-constants",level:2},{value:"Core Mathematical Values",id:"core-mathematical-values",level:3},{value:"Game Timing Constants",id:"game-timing-constants",level:3},{value:"Screen and Camera Constants",id:"screen-and-camera-constants",level:3},{value:"Direction and Positioning Constants",id:"direction-and-positioning-constants",level:2},{value:"Facing Directions",id:"facing-directions",level:3},{value:"Movement Directions",id:"movement-directions",level:3},{value:"Anchor Points",id:"anchor-points",level:3},{value:"Rendering and Visual Constants",id:"rendering-and-visual-constants",level:2},{value:"Rendering Layers",id:"rendering-layers",level:3},{value:"Scale Modes",id:"scale-modes",level:3},{value:"Animation Orientations",id:"animation-orientations",level:3},{value:"Input and Control Constants",id:"input-and-control-constants",level:2},{value:"Primary Actions",id:"primary-actions",level:3},{value:"Interface Controls",id:"interface-controls",level:3},{value:"Advanced Controls",id:"advanced-controls",level:3},{value:"Keyboard Key Constants",id:"keyboard-key-constants",level:3},{value:"Mouse Button Constants",id:"mouse-button-constants",level:3},{value:"Character System Constants",id:"character-system-constants",level:2},{value:"Playable Characters",id:"playable-characters",level:3},{value:"Character Genders",id:"character-genders",level:3},{value:"Special Character Lists",id:"special-character-lists",level:3},{value:"Item and Equipment Constants",id:"item-and-equipment-constants",level:2},{value:"Equipment Slots",id:"equipment-slots",level:3},{value:"Item Tags",id:"item-tags",level:3},{value:"Maximum Item Slots",id:"maximum-item-slots",level:3},{value:"World and Environment Constants",id:"world-and-environment-constants",level:2},{value:"Ground Types (Legacy)",id:"ground-types-legacy",level:3},{value:"Ocean Depth",id:"ocean-depth",level:3},{value:"Seasons",id:"seasons",level:3},{value:"Technology and Crafting Constants",id:"technology-and-crafting-constants",level:2},{value:"Technology Requirements",id:"technology-requirements",level:3},{value:"Recipe Tabs",id:"recipe-tabs",level:3},{value:"Color Constants",id:"color-constants",level:2},{value:"Standard UI Colors",id:"standard-ui-colors",level:3},{value:"Web Colors",id:"web-colors",level:3},{value:"Player Colors",id:"player-colors",level:3},{value:"Event and Special Content Constants",id:"event-and-special-content-constants",level:2},{value:"Special Events",id:"special-events",level:3},{value:"Festival Events",id:"festival-events",level:3},{value:"Physics and Collision Constants",id:"physics-and-collision-constants",level:2},{value:"Collision Groups",id:"collision-groups",level:3},{value:"Physics Constants",id:"physics-constants",level:3},{value:"Network and Multiplayer Constants",id:"network-and-multiplayer-constants",level:2},{value:"User Flags",id:"user-flags",level:3},{value:"Privacy Types",id:"privacy-types",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Reading Constants",id:"reading-constants",level:3},{value:"Using Control Constants",id:"using-control-constants",level:3},{value:"Working with Character Lists",id:"working-with-character-lists",level:3},{value:"Working with Special Events",id:"working-with-special-events",level:3},{value:"Using Tech Requirements",id:"using-tech-requirements",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"For Mod Development",id:"for-mod-development",level:3},{value:"For System Integration",id:"for-system-integration",level:3},{value:"Related Systems",id:"related-systems",level:2},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Loading and Initialization",id:"loading-and-initialization",level:3},{value:"Engine Integration",id:"engine-integration",level:3},{value:"Special Considerations",id:"special-considerations",level:3},{value:"Beta and Branch Differences",id:"beta-and-branch-differences",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"constants-system",children:"Constants System"})}),"\n",(0,t.jsx)(e.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Build Version"}),(0,t.jsx)(e.th,{children:"Change Date"}),(0,t.jsx)(e.th,{children:"Change Type"}),(0,t.jsx)(e.th,{children:"Description"})]})}),(0,t.jsx)(e.tbody,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"676042"}),(0,t.jsx)(e.td,{children:"2025-06-21"}),(0,t.jsx)(e.td,{children:"stable"}),(0,t.jsx)(e.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(e.h2,{id:"core-categories",children:"Core Categories"}),"\n",(0,t.jsx)(e.p,{children:"The constants system consists of several categories of global values:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Mathematical & Physical Constants"}),": Basic mathematical values and game physics"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Input & Control Constants"}),": Player input mappings and control schemes"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Character & Game Data"}),": Player characters, items, and game entities"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"UI & Rendering Constants"}),": Interface scaling, layers, and visual elements"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Technical Constants"}),": Engine-level values and system configurations"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"mathematical-constants",children:"Mathematical Constants"}),"\n",(0,t.jsx)(e.h3,{id:"core-mathematical-values",children:"Core Mathematical Values"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"PI = math.pi                    -- 3.14159...\nPI2 = PI * 2                   -- 2\u03c0 (6.28...)\nTWOPI = PI2                    -- Alias for PI2\nSQRT2 = math.sqrt(2)           -- \u221a2 (1.414...)\nGOLDENANGLE = PI * (3 - math.sqrt(5))  -- Golden angle in radians\nDEGREES = PI / 180             -- Degree to radian conversion\nRADIANS = 180 / PI             -- Radian to degree conversion\n"})}),"\n",(0,t.jsx)(e.h3,{id:"game-timing-constants",children:"Game Timing Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"FRAMES = 1/30                  -- Time per frame (30 FPS)\nTILE_SCALE = 4                 -- World tile scale factor\nMAXUINT = 4294967295          -- Maximum unsigned integer\n"})}),"\n",(0,t.jsx)(e.h3,{id:"screen-and-camera-constants",children:"Screen and Camera Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"RESOLUTION_X = 1280           -- Default screen width\nRESOLUTION_Y = 720            -- Default screen height\n\n-- Player vision and camera\nPLAYER_REVEAL_RADIUS = 30.0\nPLAYER_REVEAL_RADIUS_SQ = PLAYER_REVEAL_RADIUS * PLAYER_REVEAL_RADIUS\nPLAYER_CAMERA_SEE_DISTANCE = 40.0\nPLAYER_CAMERA_SHOULD_SNAP_DISTANCE = 20.0\n\n-- UI scaling limits\nMAX_FE_SCALE = 3              -- Maximum frontend scale\nMAX_HUD_SCALE = 1.25          -- Maximum HUD scale\n"})}),"\n",(0,t.jsx)(e.h2,{id:"direction-and-positioning-constants",children:"Direction and Positioning Constants"}),"\n",(0,t.jsx)(e.h3,{id:"facing-directions",children:"Facing Directions"}),"\n",(0,t.jsx)(e.p,{children:"Entities can face eight cardinal and ordinal directions plus a neutral state:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"FACING_RIGHT = 0\nFACING_UP = 1\nFACING_LEFT = 2\nFACING_DOWN = 3\nFACING_UPRIGHT = 4\nFACING_UPLEFT = 5\nFACING_DOWNRIGHT = 6\nFACING_DOWNLEFT = 7\nFACING_NONE = 8\n"})}),"\n",(0,t.jsx)(e.h3,{id:"movement-directions",children:"Movement Directions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"MOVE_UP = 1\nMOVE_DOWN = 2\nMOVE_LEFT = 3\nMOVE_RIGHT = 4\n"})}),"\n",(0,t.jsx)(e.h3,{id:"anchor-points",children:"Anchor Points"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"ANCHOR_MIDDLE = 0\nANCHOR_LEFT = 1\nANCHOR_RIGHT = 2\nANCHOR_TOP = 1\nANCHOR_BOTTOM = 2\n"})}),"\n",(0,t.jsx)(e.h2,{id:"rendering-and-visual-constants",children:"Rendering and Visual Constants"}),"\n",(0,t.jsx)(e.h3,{id:"rendering-layers",children:"Rendering Layers"}),"\n",(0,t.jsx)(e.p,{children:"Z-order layers for rendering different elements:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"LAYER_BACKDROP = 0\nLAYER_BELOW_OCEAN = 1\nLAYER_BELOW_GROUND = 2\nLAYER_GROUND = 3\nLAYER_BACKGROUND = 4\nLAYER_WORLD_BACKGROUND = 5\nLAYER_WORLD = 6\nLAYER_WORLD_DEBUG = 7          -- Client-only layers start here\nLAYER_FRONTEND = 8\nLAYER_FRONTEND_DEBUG = 9\n"})}),"\n",(0,t.jsx)(e.h3,{id:"scale-modes",children:"Scale Modes"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"SCALEMODE_NONE = 0\nSCALEMODE_FILLSCREEN = 1       -- Stretch to fit/fill window\nSCALEMODE_PROPORTIONAL = 2     -- Preserve aspect ratio\nSCALEMODE_FIXEDPROPORTIONAL = 3 -- Fixed proportional with safe area\nSCALEMODE_FIXEDSCREEN_NONDYNAMIC = 4 -- Scale with window scaling\n"})}),"\n",(0,t.jsx)(e.h3,{id:"animation-orientations",children:"Animation Orientations"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"ANIM_ORIENTATION = {\n    BillBoard = 0,             -- Always face camera\n    OnGround = 1,              -- Lie flat on ground\n    OnGroundFixed = 2,         -- Fixed ground orientation\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"input-and-control-constants",children:"Input and Control Constants"}),"\n",(0,t.jsx)(e.h3,{id:"primary-actions",children:"Primary Actions"}),"\n",(0,t.jsx)(e.p,{children:"Core player actions mapped to input controls:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Primary actions\nCONTROL_PRIMARY = 0            -- Primary button (left click/A button)\nCONTROL_SECONDARY = 1          -- Secondary button (right click/B button)\nCONTROL_ATTACK = 2             -- Force attack\nCONTROL_INSPECT = 3            -- Examine/inspect\nCONTROL_ACTION = 4             -- Context action\n\n-- Movement controls\nCONTROL_MOVE_UP = 5           -- Move up/north\nCONTROL_MOVE_DOWN = 6         -- Move down/south\nCONTROL_MOVE_LEFT = 7         -- Move left/west\nCONTROL_MOVE_RIGHT = 8        -- Move right/east\n\n-- Camera controls\nCONTROL_ZOOM_IN = 9           -- Zoom camera in\nCONTROL_ZOOM_OUT = 10         -- Zoom camera out\nCONTROL_ROTATE_LEFT = 11      -- Rotate camera left\nCONTROL_ROTATE_RIGHT = 12     -- Rotate camera right\n"})}),"\n",(0,t.jsx)(e.h3,{id:"interface-controls",children:"Interface Controls"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"CONTROL_PAUSE = 13            -- Pause/main menu\nCONTROL_MAP = 14              -- World map\nCONTROL_OPEN_INVENTORY = 45   -- Inventory screen\nCONTROL_OPEN_CRAFTING = 46    -- Crafting menu\n\n-- Inventory slot controls (CONTROL_INV_1 through CONTROL_INV_15)\nCONTROL_INV_1 = 15\nCONTROL_INV_2 = 16\n-- ... continues to CONTROL_INV_15 = 81\n"})}),"\n",(0,t.jsx)(e.h3,{id:"advanced-controls",children:"Advanced Controls"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Force actions\nCONTROL_FORCE_INSPECT = 38\nCONTROL_FORCE_ATTACK = 39\nCONTROL_FORCE_TRADE = 40\nCONTROL_FORCE_STACK = 41\n\n-- Communication\nCONTROL_TOGGLE_SAY = 63       -- Chat\nCONTROL_TOGGLE_WHISPER = 64   -- Whisper\nCONTROL_SHOW_PLAYER_STATUS = 67\n\n-- Special functions\nCONTROL_OPEN_DEBUG_CONSOLE = 42\nCONTROL_TOGGLE_LOG = 43\nCONTROL_TOGGLE_DEBUGRENDER = 44\n"})}),"\n",(0,t.jsx)(e.h3,{id:"keyboard-key-constants",children:"Keyboard Key Constants"}),"\n",(0,t.jsx)(e.p,{children:"All keyboard keys are mapped to constants:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Special keys\nKEY_TAB = 9\nKEY_ENTER = 13\nKEY_ESCAPE = 27\nKEY_SPACE = 32\nKEY_BACKSPACE = 8\n\n-- Letter keys (KEY_A = 97 through KEY_Z = 122)\nKEY_A = 97\nKEY_B = 98\n-- ... continues through alphabet\n\n-- Number keys (KEY_0 = 48 through KEY_9 = 57)\nKEY_0 = 48\nKEY_1 = 49\n-- ... continues through numbers\n\n-- Function keys (KEY_F1 = 282 through KEY_F12 = 293)\nKEY_F1 = 282\nKEY_F2 = 283\n-- ... continues through function keys\n\n-- Arrow keys\nKEY_UP = 273\nKEY_DOWN = 274\nKEY_RIGHT = 275\nKEY_LEFT = 276\n"})}),"\n",(0,t.jsx)(e.h3,{id:"mouse-button-constants",children:"Mouse Button Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"MOUSEBUTTON_LEFT = 1000\nMOUSEBUTTON_RIGHT = 1001\nMOUSEBUTTON_MIDDLE = 1002\nMOUSEBUTTON_SCROLLUP = 1003\nMOUSEBUTTON_SCROLLDOWN = 1004\n"})}),"\n",(0,t.jsx)(e.h2,{id:"character-system-constants",children:"Character System Constants"}),"\n",(0,t.jsx)(e.h3,{id:"playable-characters",children:"Playable Characters"}),"\n",(0,t.jsx)(e.p,{children:"Main list of playable characters in DST:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'DST_CHARACTERLIST = {\n    "wilson",      -- The Scientist\n    "willow",      -- The Firestarter\n    "wolfgang",    -- The Strongman\n    "wendy",       -- The Bereaved\n    "wx78",        -- The Soulless Automaton\n    "wickerbottom", -- The Librarian\n    "woodie",      -- The Lumberjack\n    "wes",         -- The Silent\n    "waxwell",     -- The Puppet Master\n    "wathgrithr",  -- The Valkyrie\n    "webber",      -- The Indigestible\n    "winona",      -- The Handywoman\n    "warly",       -- The Chef\n    "wortox",      -- The Soul Starved\n    "wormwood",    -- The Lonesome\n    "wurt",        -- The Curious\n    "walter",      -- The Fearless\n    "wanda",       -- The Timekeeper\n    "wonkey",      -- Hidden internal character\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"character-genders",children:"Character Genders"}),"\n",(0,t.jsx)(e.p,{children:"Characters categorized by gender for pronoun and dialogue systems:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'CHARACTER_GENDERS = {\n    FEMALE = {\n        "willow", "wendy", "wickerbottom", "wathgrithr",\n        "winona", "wurt", "wanda",\n    },\n    MALE = {\n        "wilson", "woodie", "waxwell", "wolfgang", "wes",\n        "webber", "warly", "wortox", "wormwood", "walter",\n    },\n    ROBOT = {\n        "wx78", "pyro",\n    },\n    NEUTRAL = {},  -- For modders to add to\n    PLURAL = {},   -- For modders to add to\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"special-character-lists",children:"Special Character Lists"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Characters for seamless swapping (internal use)\nSEAMLESSSWAP_CHARACTERLIST = {\n    "wonkey",\n}\n\n-- Legacy character lists (not used in DST)\nMAIN_CHARACTERLIST = { /* Original DS characters */ }\nROG_CHARACTERLIST = { /* Reign of Giants characters */ }\n'})}),"\n",(0,t.jsx)(e.h2,{id:"item-and-equipment-constants",children:"Item and Equipment Constants"}),"\n",(0,t.jsx)(e.h3,{id:"equipment-slots",children:"Equipment Slots"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'EQUIPSLOTS = {\n    HANDS = "hands",   -- Tools and weapons\n    HEAD = "head",     -- Hats and helmets\n    BODY = "body",     -- Armor and clothing\n    BEARD = "beard",   -- WX-78 facial equipment\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"item-tags",children:"Item Tags"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'ITEMTAG = {\n    FOOD = "food",\n    MEAT = "meat",\n    WEAPON = "weapon",\n    TOOL = "tool",\n    TREASURE = "treasure",\n    FUEL = "fuel",\n    FIRE = "fire",\n    STACKABLE = "stackable",\n    FX = "FX",\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"maximum-item-slots",children:"Maximum Item Slots"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"MAXITEMSLOTS = 15  -- Maximum inventory slots\n"})}),"\n",(0,t.jsx)(e.h2,{id:"world-and-environment-constants",children:"World and Environment Constants"}),"\n",(0,t.jsx)(e.h3,{id:"ground-types-legacy",children:"Ground Types (Legacy)"}),"\n",(0,t.jsxs)(e.p,{children:["\u26a0\ufe0f ",(0,t.jsx)(e.strong,{children:"Deprecated"}),": The GROUND table is deprecated and should not be used. Nothing should add to or reference this table."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"GROUND = {\n    INVALID = 65535,\n    IMPASSABLE = 1,\n    ROAD = 2,\n    ROCKY = 3,\n    DIRT = 4,\n    SAVANNA = 5,\n    GRASS = 6,\n    FOREST = 7,\n    -- ... many more ground types (deprecated)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"ocean-depth",children:"Ocean Depth"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"OCEAN_DEPTH = {\n    SHALLOW = 1,\n    NORMAL = 2,\n    DEEP = 3,\n    VERY_DEEP = 4,\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"seasons",children:"Seasons"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'SEASONS = {\n    AUTUMN = "autumn",\n    WINTER = "winter",\n    SPRING = "spring",\n    SUMMER = "summer",\n    CAVES = "caves",\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"technology-and-crafting-constants",children:"Technology and Crafting Constants"}),"\n",(0,t.jsx)(e.h3,{id:"technology-requirements",children:"Technology Requirements"}),"\n",(0,t.jsx)(e.p,{children:"The TECH system defines crafting station requirements:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"TECH = {\n    NONE = TechTree.Create(),\n    \n    -- Science levels\n    SCIENCE_ONE = { SCIENCE = 1 },\n    SCIENCE_TWO = { SCIENCE = 2 },\n    SCIENCE_THREE = { SCIENCE = 3 },\n    \n    -- Magic levels (starts at 2)\n    MAGIC_TWO = { MAGIC = 2 },\n    MAGIC_THREE = { MAGIC = 3 },\n    \n    -- Ancient technology\n    ANCIENT_TWO = { ANCIENT = 2 },\n    ANCIENT_THREE = { ANCIENT = 3 },\n    ANCIENT_FOUR = { ANCIENT = 4 },\n    \n    -- Celestial technology\n    CELESTIAL_ONE = { CELESTIAL = 1 },\n    CELESTIAL_THREE = { CELESTIAL = 3 },\n    \n    -- Other tech trees\n    SHADOW_TWO = { SHADOW = 3 },\n    SEAFARING_ONE = { SEAFARING = 1 },\n    SEAFARING_TWO = { SEAFARING = 2 },\n    -- ... many more technology types\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"recipe-tabs",children:"Recipe Tabs"}),"\n",(0,t.jsx)(e.p,{children:"Crafting menu organization:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'RECIPETABS = {\n    TOOLS =     { str = "TOOLS",     sort = 0, icon = "tab_tool.tex" },\n    LIGHT =     { str = "LIGHT",     sort = 1, icon = "tab_light.tex" },\n    SURVIVAL =  { str = "SURVIVAL",  sort = 2, icon = "tab_trap.tex" },\n    FARM =      { str = "FARM",      sort = 3, icon = "tab_farm.tex" },\n    SCIENCE =   { str = "SCIENCE",   sort = 4, icon = "tab_science.tex" },\n    WAR =       { str = "WAR",       sort = 5, icon = "tab_fight.tex" },\n    TOWN =      { str = "TOWN",      sort = 6, icon = "tab_build.tex" },\n    SEAFARING = { str = "SEAFARING", sort = 7, icon = "tab_seafaring.tex" },\n    REFINE =    { str = "REFINE",    sort = 8, icon = "tab_refine.tex" },\n    MAGIC =     { str = "MAGIC",     sort = 9, icon = "tab_arcane.tex" },\n    DRESS =     { str = "DRESS",     sort = 10, icon = "tab_dress.tex" },\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"color-constants",children:"Color Constants"}),"\n",(0,t.jsx)(e.h3,{id:"standard-ui-colors",children:"Standard UI Colors"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"BGCOLOURS = {\n    RED =    RGB(255, 89,  46),\n    PURPLE = RGB(184, 87,  198),\n    YELLOW = RGB(255, 196, 45),\n    GREY =   RGB(75,  75,  75),\n    HALF =   RGB(128, 128, 128),\n    FULL =   RGB(255, 255, 255),\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"web-colors",children:"Web Colors"}),"\n",(0,t.jsx)(e.p,{children:"Standard HTML color palette:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"WEBCOLOURS = {\n    -- Reds\n    SALMON =    RGB(250, 128, 114),\n    CRIMSON =   RGB(220, 20, 60),\n    FIREBRICK = RGB(178, 34, 34),\n    RED =       RGB(255, 0, 0),\n    \n    -- Blues\n    LIGHTSKYBLUE =   RGB(135, 206, 250),\n    CORNFLOWERBLUE = RGB(100, 149, 237),\n    BLUE =           RGB(0, 0, 255),\n    \n    -- Greens\n    GREEN =       RGB(0, 128, 0),\n    SPRINGGREEN = RGB(0, 255, 127),\n    \n    -- ... many more web colors\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"player-colors",children:"Player Colors"}),"\n",(0,t.jsx)(e.p,{children:"Game-appropriate color palette for players:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"PLAYERCOLOURS = {\n    BLUE =        RGB(149, 191, 242),\n    YELLOW =      RGB(222, 222, 99),\n    GREEN =       RGB(59,  222, 99),\n    CORAL =       RGB(216, 60,  84),\n    TEAL =        RGB(150, 206, 169),\n    LAVENDER =    RGB(206, 145, 192),\n    -- ... more player colors\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"event-and-special-content-constants",children:"Event and Special Content Constants"}),"\n",(0,t.jsx)(e.h3,{id:"special-events",children:"Special Events"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'SPECIAL_EVENTS = {\n    NONE = "none",\n    HALLOWED_NIGHTS = "hallowed_nights",\n    WINTERS_FEAST = "winters_feast",\n    CARNIVAL = "crow_carnival",\n    YOTG = "year_of_the_gobbler",\n    YOTV = "year_of_the_varg",\n    YOTP = "year_of_the_pig",\n    YOTC = "year_of_the_carrat",\n    YOTB = "year_of_the_beefalo",\n    YOT_CATCOON = "year_of_the_catcoon",\n    YOTR = "year_of_the_bunnyman",\n    YOTD = "year_of_the_dragonfly",\n    YOTS = "year_of_the_snake",\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"festival-events",children:"Festival Events"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'FESTIVAL_EVENTS = {\n    NONE = "none",\n    LAVAARENA = "lavaarena",  -- The Forge\n    QUAGMIRE = "quagmire",    -- The Gorge\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"physics-and-collision-constants",children:"Physics and Collision Constants"}),"\n",(0,t.jsx)(e.h3,{id:"collision-groups",children:"Collision Groups"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"COLLISION = {\n    GROUND =           32,\n    BOAT_LIMITS =      64,\n    LAND_OCEAN_LIMITS = 128,\n    LIMITS =           128 + 64,     -- Combined boat and land/ocean limits\n    WORLD =            128 + 64 + 32, -- All world collision\n    ITEMS =            256,\n    OBSTACLES =        512,\n    CHARACTERS =       1024,\n    FLYERS =           2048,\n    SANITY =           4096,\n    SMALLOBSTACLES =   8192,         -- Collide with characters but not giants\n    GIANTS =           16384,        -- Collide with obstacles but not small obstacles\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"physics-constants",children:"Physics Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"MAX_PHYSICS_RADIUS = 4  -- Maximum physics radius (boats are largest)\n"})}),"\n",(0,t.jsx)(e.h2,{id:"network-and-multiplayer-constants",children:"Network and Multiplayer Constants"}),"\n",(0,t.jsx)(e.h3,{id:"user-flags",children:"User Flags"}),"\n",(0,t.jsx)(e.p,{children:"Bit flags for multiplayer player states:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"USERFLAGS = {\n    IS_GHOST =         1,\n    IS_AFK =           2,\n    CHARACTER_STATE_1 = 4,\n    CHARACTER_STATE_2 = 8,\n    IS_LOADING =       16,\n    CHARACTER_STATE_3 = 32,\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"privacy-types",children:"Privacy Types"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"PRIVACY_TYPE = {\n    PUBLIC = 0,\n    FRIENDS = 1,\n    LOCAL = 2,\n    CLAN = 3,\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(e.h3,{id:"reading-constants",children:"Reading Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Use mathematical constants\nlocal circle_area = PI * radius * radius\nlocal angle_in_radians = 45 * DEGREES\n\n-- Check facing direction\nif entity.Transform:GetFacing() == FACING_RIGHT then\n    -- Entity is facing right\nend\n\n-- Get screen dimensions\nlocal screen_width = RESOLUTION_X\nlocal screen_height = RESOLUTION_Y\n\n-- Use frames for timing\nlocal update_frequency = FRAMES -- 1/30 second\n"})}),"\n",(0,t.jsx)(e.h3,{id:"using-control-constants",children:"Using Control Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Check for specific input\nif TheInput:IsControlPressed(CONTROL_ATTACK) then\n    -- Player is trying to attack\nend\n\n-- Map custom controls\nlocal MY_CUSTOM_CONTROL = 999\nTheInput:AddControlMapping(MY_CUSTOM_CONTROL, KEY_F)\n"})}),"\n",(0,t.jsx)(e.h3,{id:"working-with-character-lists",children:"Working with Character Lists"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Check if character is playable\nlocal function IsPlayableCharacter(prefab)\n    for _, character in ipairs(DST_CHARACTERLIST) do\n        if character == prefab then\n            return true\n        end\n    end\n    return false\nend\n\n-- Get character gender\nlocal function GetCharacterGender(prefab)\n    for gender, characters in pairs(CHARACTER_GENDERS) do\n        for _, character in ipairs(characters) do\n            if character == prefab then\n                return gender\n            end\n        end\n    end\n    return "NEUTRAL"\nend\n'})}),"\n",(0,t.jsx)(e.h3,{id:"working-with-special-events",children:"Working with Special Events"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Check if a special event is active\nif IsSpecialEventActive(SPECIAL_EVENTS.WINTERS_FEAST) then\n    -- Winter\'s Feast is currently active\n    print("Ho ho ho!")\nend\n\n-- Check if any special event is active\nif IsAnySpecialEventActive() then\n    local active_event = GetFirstActiveSpecialEvent()\n    print("Active event:", active_event)\nend\n\n-- Check if it\'s a Year of the X event\nif IsAny_YearOfThe_EventActive() then\n    -- Some year-of-the-creature event is active\nend\n'})}),"\n",(0,t.jsx)(e.h3,{id:"using-tech-requirements",children:"Using Tech Requirements"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Check if player can craft item\nlocal function CanCraft(recipe, player)\n    local tech_level = player.components.builder:GetTechLevel()\n    return TechTree.DoesUserKnowRecipe(tech_level, recipe.tech)\nend\n\n-- Add recipe with tech requirement\nAddRecipe("my_item", {\n    Ingredient("log", 2),\n    Ingredient("rope", 1)\n}, RECIPETABS.TOOLS, TECH.SCIENCE_ONE)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(e.h3,{id:"for-mod-development",children:"For Mod Development"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use existing constants"})," instead of hard-coding values:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Good\nif facing == FACING_RIGHT then\n\n-- Bad\nif facing == 0 then\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Add custom constants"})," with unique prefixes:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Good\nMYMOD_SPECIAL_VALUE = 42\n\n-- Bad (might conflict)\nSPECIAL_VALUE = 42\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Reference character lists"})," instead of maintaining your own:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Good\nfor _, character in ipairs(DST_CHARACTERLIST) do\n\n-- Bad\nlocal my_character_list = {"wilson", "willow", ...}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"for-system-integration",children:"For System Integration"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Use layer constants"})," for proper rendering order"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Follow control constants"})," for consistent input handling"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Respect collision groups"})," for physics interactions"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Use color constants"})," for consistent UI appearance"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,t.jsx)(e.p,{children:"The constants system integrates with:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./actions",children:"Actions System"})}),": Uses control constants for input mapping"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./entity",children:"Entity System"})}),": Uses facing and layer constants"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"../components/",children:"Components System"})}),": References various constants for behavior"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./tuning",children:"Tuning System"})}),": Provides game balance values"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"./networking",children:"Networking System"})}),": Uses user flags and privacy constants"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,t.jsx)(e.h3,{id:"loading-and-initialization",children:"Loading and Initialization"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Constants are loaded early in game initialization via ",(0,t.jsx)(e.code,{children:'require "util"'})," and ",(0,t.jsx)(e.code,{children:"TechTree"})]}),"\n",(0,t.jsx)(e.li,{children:"Most constants should not be modified after game start"}),"\n",(0,t.jsx)(e.li,{children:"Some constants are used by the C++ engine and cannot be changed"}),"\n",(0,t.jsx)(e.li,{children:"Event constants are automatically updated based on active events"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"engine-integration",children:"Engine Integration"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Rendering layers must match ",(0,t.jsx)(e.code,{children:"game\\render\\RenderLayer.h"})]}),"\n",(0,t.jsxs)(e.li,{children:["Control constants must match ",(0,t.jsx)(e.code,{children:"DontStarveInputHandler.h"})]}),"\n",(0,t.jsxs)(e.li,{children:["Sort order constants match ",(0,t.jsx)(e.code,{children:"scenegraphnode.h"})]}),"\n",(0,t.jsx)(e.li,{children:"Physics constants sync with C++ collision system"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"special-considerations",children:"Special Considerations"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"GROUND table"}),": Deprecated - do not add to or reference"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Character lists"}),": Must stay synchronized with ",(0,t.jsx)(e.code,{children:"scrapbookpartitions.lua"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Technology constants"}),": Work with TechTree system for crafting requirements"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Special events"}),": Controlled by server configuration and season timing"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"beta-and-branch-differences",children:"Beta and Branch Differences"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"IS_BETA"})," flag affects certain constant values"]}),"\n",(0,t.jsxs)(e.li,{children:["Branch-specific constants may differ between ",(0,t.jsx)(e.code,{children:"dev"}),", ",(0,t.jsx)(e.code,{children:"staging"}),", and ",(0,t.jsx)(e.code,{children:"release"})]}),"\n",(0,t.jsx)(e.li,{children:"Event constants change based on active special events"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>l});var a=s(96540);const t={},i=a.createContext(t);function r(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);