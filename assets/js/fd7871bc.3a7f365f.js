"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9],{4899:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/examples/case-island-adventures","title":"Case Study - Island Adventures Gameplay","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/examples/case-island-adventures.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/case-island-adventures","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-island-adventures","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"case-island-adventures","title":"Case Study - Island Adventures Gameplay","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Case Study - Island Adventures Core","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-ia-core"},"next":{"title":"Island Adventures Case Studies Relationship","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/island-adventures-relationship"}}');var i=a(4848),t=a(8453);const l={id:"case-island-adventures",title:"Case Study - Island Adventures Gameplay",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},r="Case Study: Island Adventures Gameplay",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Gameplay Systems",id:"gameplay-systems",level:2},{value:"Tropical Seasons",id:"tropical-seasons",level:3},{value:"Ocean Navigation",id:"ocean-navigation",level:3},{value:"Poison System",id:"poison-system",level:3},{value:"Treasure Hunting",id:"treasure-hunting",level:3},{value:"Volcano Eruptions",id:"volcano-eruptions",level:3},{value:"Trading System",id:"trading-system",level:3},{value:"Integration with Base Game",id:"integration-with-base-game",level:2},{value:"Player Adaptation",id:"player-adaptation",level:3},{value:"World Integration",id:"world-integration",level:3},{value:"Item Integration",id:"item-integration",level:3},{value:"Gameplay Balance",id:"gameplay-balance",level:2},{value:"Key Lessons",id:"key-lessons",level:2},{value:"1. Comprehensive Gameplay Systems",id:"1-comprehensive-gameplay-systems",level:3},{value:"2. Player Progression",id:"2-player-progression",level:3},{value:"3. Environmental Storytelling",id:"3-environmental-storytelling",level:3},{value:"4. Balancing Challenge and Fun",id:"4-balancing-challenge-and-fun",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"case-study-island-adventures-gameplay",children:"Case Study: Island Adventures Gameplay"})}),"\n",(0,i.jsx)(n.p,{children:"This case study examines the gameplay systems of \"Island Adventures\", a comprehensive mod that ports content from Don't Starve's single-player DLCs (Shipwrecked and Hamlet) to Don't Starve Together. It demonstrates advanced techniques for creating engaging gameplay mechanics that integrate with the base game."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://gitlab.com/IslandAdventures/IslandAdventures/",children:"Gitlab"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://steamcommunity.com/sharedfiles/filedetails/?id=1467214795",children:"Steam Workshop"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Island Adventures transforms Don't Starve Together into a tropical archipelago experience with unique gameplay mechanics. Key gameplay features include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Weather systems including wind, tropical storms, and seasons"}),"\n",(0,i.jsx)(n.li,{children:"Ocean mechanics with waves, boats, and sea traversal"}),"\n",(0,i.jsx)(n.li,{children:"Poison and disease mechanics"}),"\n",(0,i.jsx)(n.li,{children:"Treasure hunting and exploration"}),"\n",(0,i.jsx)(n.li,{children:"Volcano eruptions and natural disasters"}),"\n",(0,i.jsx)(n.li,{children:"New crafting systems and resources"}),"\n",(0,i.jsx)(n.li,{children:"Economy and trading with NPCs"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"gameplay-systems",children:"Gameplay Systems"}),"\n",(0,i.jsx)(n.h3,{id:"tropical-seasons",children:"Tropical Seasons"}),"\n",(0,i.jsx)(n.p,{children:"The mod implements a complete seasonal cycle different from the base game:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Tropical seasons implementation\nlocal function InitSeasons(self)\n    self.seasons = {\n        mild = { name = "mild", temperature = TUNING.MILD_TEMPERATURE },\n        wet = { name = "wet", temperature = TUNING.WET_TEMPERATURE },\n        green = { name = "green", temperature = TUNING.GREEN_TEMPERATURE },\n        dry = { name = "dry", temperature = TUNING.DRY_TEMPERATURE },\n        hurricane = { name = "hurricane", temperature = TUNING.HURRICANE_TEMPERATURE }\n    }\n    \n    -- Default season lengths\n    self.seasonlength = {\n        mild = 15,\n        wet = 20,\n        green = 15,\n        dry = 10,\n        hurricane = 8\n    }\n    \n    -- Set initial season\n    self:SetSeason("mild")\n    \n    -- Register season change callbacks\n    self.onseasonchange = function(self, season)\n        if season == "hurricane" then\n            TheWorld:PushEvent("ms_forceprecipitation", true)\n            TheWorld:PushEvent("ms_stormchanged", true)\n        elseif season == "wet" then\n            TheWorld:PushEvent("ms_forceprecipitation", true)\n        else\n            TheWorld:PushEvent("ms_forceprecipitation", false)\n            if self.prev_season == "hurricane" then\n                TheWorld:PushEvent("ms_stormchanged", false)\n            end\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ocean-navigation",children:"Ocean Navigation"}),"\n",(0,i.jsx)(n.p,{children:"The mod introduces a robust ocean navigation system with boats, sailing mechanics, and wave physics:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Boat physics system\nfunction BoatPhysics:OnUpdate(dt)\n    -- Apply wind forces\n    if TheWorld.components.worldwind ~= nil then\n        local wind_speed = TheWorld.components.worldwind:GetWindSpeed()\n        local wind_direction = TheWorld.components.worldwind:GetWindDirection()\n        \n        -- Calculate wind force based on direction and sail state\n        local sail_force = 0\n        if self.has_sail and self.sail_raised then\n            -- Calculate angle between boat and wind\n            local boat_angle = self.inst.Transform:GetRotation() * DEGREES\n            local angle_diff = math.abs(DiffAngle(boat_angle, wind_direction))\n            \n            if angle_diff < 45 * DEGREES then\n                -- Wind is behind, strong push\n                sail_force = wind_speed * TUNING.BOAT.WIND_FORCE * 1.5\n            elseif angle_diff < 90 * DEGREES then\n                -- Wind is to the side, moderate push\n                sail_force = wind_speed * TUNING.BOAT.WIND_FORCE\n            elseif angle_diff < 135 * DEGREES then\n                -- Wind is at an angle, slight push\n                sail_force = wind_speed * TUNING.BOAT.WIND_FORCE * 0.5\n            else\n                -- Wind is against, minimal push\n                sail_force = wind_speed * TUNING.BOAT.WIND_FORCE * 0.1\n            end\n        end\n        \n        -- Apply force in boat's forward direction\n        local angle = self.inst.Transform:GetRotation() * DEGREES\n        local vx = math.cos(angle) * sail_force\n        local vz = -math.sin(angle) * sail_force\n        \n        self.velocity_x = self.velocity_x + vx * dt\n        self.velocity_z = self.velocity_z + vz * dt\n    end\n    \n    -- Apply wave forces\n    if self.in_wave then\n        local wave_force = TUNING.BOAT.WAVE_FORCE\n        local wave_angle = self.wave_direction\n        \n        local vx = math.cos(wave_angle) * wave_force\n        local vz = -math.sin(wave_angle) * wave_force\n        \n        self.velocity_x = self.velocity_x + vx * dt\n        self.velocity_z = self.velocity_z + vz * dt\n    end\n    \n    -- Apply drag\n    local speed = math.sqrt(self.velocity_x * self.velocity_x + self.velocity_z * self.velocity_z)\n    if speed > 0 then\n        local drag = TUNING.BOAT.DRAG * speed * speed * dt\n        local drag_percent = math.min(drag / speed, 1)\n        \n        self.velocity_x = self.velocity_x * (1 - drag_percent)\n        self.velocity_z = self.velocity_z * (1 - drag_percent)\n    end\n    \n    -- Update position\n    local x, y, z = self.inst.Transform:GetWorldPosition()\n    x = x + self.velocity_x * dt\n    z = z + self.velocity_z * dt\n    \n    -- Check for land collision\n    if not TheWorld.Map:IsOceanAtPoint(x, 0, z) then\n        -- Handle collision with land\n        self.velocity_x = -self.velocity_x * 0.5\n        self.velocity_z = -self.velocity_z * 0.5\n    else\n        -- Update position if still in water\n        self.inst.Transform:SetPosition(x, y, z)\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"poison-system",children:"Poison System"}),"\n",(0,i.jsx)(n.p,{children:"The mod implements a poison system that affects players and creatures:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Poison component implementation\nfunction Poisonable:SetPoisoned(dopoisoned, poisonbuildup)\n    if dopoisoned then\n        if poisonbuildup ~= nil then\n            self.poisonbuildup = poisonbuildup\n        end\n\n        if self.poisonbuildup >= TUNING.POISON_BUILD_UP_THRESHOLD then\n            self.poisoned = true\n            self.poisonbuilduprate = 0\n            self.inst:AddTag("poisoned")\n            self.inst:PushEvent("poisoned")\n\n            -- Start poison damage over time\n            if self.task == nil then\n                self.task = self.inst:DoPeriodicTask(1, function(inst, self)\n                    if inst.components.health ~= nil then\n                        -- Damage scales with poison buildup\n                        local damage = TUNING.POISON_DAMAGE_PER_TICK * (self.poisonbuildup / TUNING.POISON_BUILD_UP_THRESHOLD)\n                        inst.components.health:DoDelta(-damage, nil, "poison")\n                        \n                        -- Visual effects\n                        if inst.components.talker ~= nil then\n                            inst.components.talker:Say(GetString(inst, "ANNOUNCE_POISONED"))\n                        end\n                        \n                        -- Spawn poison FX\n                        SpawnPrefab("poison_fx").entity:SetParent(inst.entity)\n                    end\n                end, 0, self)\n            end\n        end\n    else\n        self.poisoned = false\n        self.poisonbuildup = 0\n        self.inst:RemoveTag("poisoned")\n        self:StopDamage()\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"treasure-hunting",children:"Treasure Hunting"}),"\n",(0,i.jsx)(n.p,{children:"The mod adds a treasure hunting system with buried treasure and treasure maps:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Treasure map system\nfunction TreasureMap:Activate(doer)\n    if self.treasure_prefab ~= nil and doer ~= nil then\n        -- Generate treasure location based on map\n        local x, y, z = doer.Transform:GetWorldPosition()\n        local radius = math.random(30, 50)\n        local angle = math.random() * 2 * PI\n        \n        local treasure_x = x + radius * math.cos(angle)\n        local treasure_z = z + radius * math.sin(angle)\n        \n        -- Find suitable location (must be on land)\n        local max_tries = 30\n        local tries = 0\n        while tries < max_tries do\n            if TheWorld.Map:IsLandAtPoint(treasure_x, 0, treasure_z) then\n                break\n            end\n            \n            angle = angle + PI/8\n            treasure_x = x + radius * math.cos(angle)\n            treasure_z = z + radius * math.sin(angle)\n            tries = tries + 1\n        end\n        \n        if tries < max_tries then\n            -- Create buried treasure\n            local treasure = SpawnPrefab("buried_treasure")\n            treasure.Transform:SetPosition(treasure_x, 0, treasure_z)\n            treasure:SetTreasure(self.treasure_prefab, self.treasure_loot)\n            \n            -- Mark on player\'s map\n            if doer.player_classified ~= nil then\n                doer.player_classified.treasure_map_location:set_local(Vector3(treasure_x, 0, treasure_z))\n                doer.player_classified.has_treasure_map:set(true)\n            end\n            \n            -- Visual effect\n            local effect = SpawnPrefab("sand_puff")\n            effect.Transform:SetPosition(treasure_x, 0, treasure_z)\n            \n            -- Notify player\n            if doer.components.talker ~= nil then\n                doer.components.talker:Say(GetString(doer, "ANNOUNCE_READ_TREASURE_MAP"))\n            end\n            \n            return true\n        end\n    end\n    \n    return false\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"volcano-eruptions",children:"Volcano Eruptions"}),"\n",(0,i.jsx)(n.p,{children:"The mod features a volcano system with eruptions and falling debris:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Volcano eruption system\nfunction VolcanoManager:StartEruption()\n    if not self.erupting then\n        self.erupting = true\n        self.warning_time = TUNING.VOLCANO_WARNING_TIME\n        \n        -- Trigger warning effects\n        TheWorld:PushEvent("volcano_warning")\n        \n        -- Schedule actual eruption\n        self.task = self.inst:DoTaskInTime(self.warning_time, function()\n            self:DoEruption()\n        end)\n    end\nend\n\nfunction VolcanoManager:DoEruption()\n    -- Start eruption sequence\n    self.eruption_time = TUNING.VOLCANO_ERUPTION_TIME\n    self.debris_timer = 0\n    \n    -- Visual and sound effects\n    TheWorld:PushEvent("volcano_erupt")\n    \n    -- Schedule end of eruption\n    self.end_task = self.inst:DoTaskInTime(self.eruption_time, function()\n        self:StopEruption()\n    end)\n    \n    -- Start updating to spawn debris\n    self.inst:StartUpdatingComponent(self)\nend\n\nfunction VolcanoManager:OnUpdate(dt)\n    if self.erupting then\n        self.debris_timer = self.debris_timer - dt\n        \n        if self.debris_timer <= 0 then\n            -- Spawn volcanic debris\n            self:SpawnDebris()\n            \n            -- Reset timer with random interval\n            self.debris_timer = math.random() * TUNING.VOLCANO_DEBRIS_INTERVAL\n        end\n    end\nend\n\nfunction VolcanoManager:SpawnDebris()\n    -- Find all players\n    local players = {}\n    for i, v in ipairs(AllPlayers) do\n        table.insert(players, v)\n    end\n    \n    if #players > 0 then\n        -- Target random player\n        local target = players[math.random(#players)]\n        local x, y, z = target.Transform:GetWorldPosition()\n        \n        -- Add random offset\n        local offset = 15\n        x = x + math.random(-offset, offset)\n        z = z + math.random(-offset, offset)\n        \n        -- Spawn appropriate debris based on location\n        local debris_type = "volcano_rock"\n        if TheWorld.Map:IsOceanAtPoint(x, 0, z) then\n            debris_type = "volcano_rock_water"\n        end\n        \n        -- Create shadow first\n        local shadow = SpawnPrefab("volcano_rock_shadow")\n        shadow.Transform:SetPosition(x, 0, z)\n        \n        -- Create actual debris with delay\n        self.inst:DoTaskInTime(TUNING.VOLCANO_DEBRIS_SHADOW_TIME, function()\n            local debris = SpawnPrefab(debris_type)\n            if debris ~= nil then\n                debris.Transform:SetPosition(x, 20, z)\n                \n                -- Set damage and radius based on difficulty\n                debris.components.areaaware:SetRadius(TUNING.VOLCANO_DEBRIS_RADIUS)\n                debris.components.combat:SetDefaultDamage(TUNING.VOLCANO_DEBRIS_DAMAGE)\n            end\n        end)\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"trading-system",children:"Trading System"}),"\n",(0,i.jsx)(n.p,{children:"The mod includes a trading system with merchants and currency:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Trading component for merchants\nfunction Trader:IsTradingWith(inst)\n    return self.trading and self.trader == inst\nend\n\nfunction Trader:SetPriceForItem(item_name, price)\n    if not self.prices then\n        self.prices = {}\n    end\n    self.prices[item_name] = price\nend\n\nfunction Trader:GetPriceForItem(item)\n    if not self.prices then\n        return nil\n    end\n    return self.prices[item.prefab]\nend\n\nfunction Trader:HasItemForTrade(item_name)\n    if not self.stock then\n        return false\n    end\n    return self.stock[item_name] ~= nil and self.stock[item_name] > 0\nend\n\nfunction Trader:TradeItem(item_name, buyer)\n    if self:HasItemForTrade(item_name) and buyer ~= nil then\n        -- Check if buyer has enough currency\n        local price = self.prices[item_name] or 1\n        local has_currency = false\n        \n        if buyer.components.inventory ~= nil then\n            has_currency = buyer.components.inventory:Has("dubloon", price)\n        end\n        \n        if has_currency then\n            -- Remove currency from buyer\n            for i = 1, price do\n                local coin = buyer.components.inventory:FindItem(function(item) return item.prefab == "dubloon" end)\n                if coin ~= nil then\n                    buyer.components.inventory:RemoveItem(coin, true)\n                    coin:Remove()\n                end\n            end\n            \n            -- Give item to buyer\n            local item = SpawnPrefab(item_name)\n            if item ~= nil then\n                buyer.components.inventory:GiveItem(item)\n                \n                -- Reduce stock\n                self.stock[item_name] = self.stock[item_name] - 1\n                \n                -- Play trade sound\n                self.inst.SoundEmitter:PlaySound("dontstarve/common/coin_drop")\n                \n                return true\n            end\n        else\n            -- Not enough currency\n            if buyer.components.talker ~= nil then\n                buyer.components.talker:Say(GetString(buyer, "ANNOUNCE_TRADE_NOT_ENOUGH_GOLD"))\n            end\n        end\n    end\n    \n    return false\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-base-game",children:"Integration with Base Game"}),"\n",(0,i.jsx)(n.h3,{id:"player-adaptation",children:"Player Adaptation"}),"\n",(0,i.jsx)(n.p,{children:"The mod seamlessly integrates with the base game's player system, adding new capabilities:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Adding swimming capability to players\nAddComponentPostInit("locomotor", function(self)\n    local _oldGetRunSpeed = self.GetRunSpeed\n    function self:GetRunSpeed()\n        local speed = _oldGetRunSpeed(self)\n        \n        -- Apply swimming speed modifiers\n        if self.inst:HasTag("swimming") then\n            speed = speed * TUNING.SWIMMING_SPEED_MULT\n            \n            if self.inst.components.sailor ~= nil and self.inst.components.sailor:IsSailing() then\n                speed = speed * TUNING.SAILBOAT_SPEED\n            end\n            \n            if TheWorld.components.worldwind ~= nil then\n                local wind_speed = TheWorld.components.worldwind:GetWindSpeed()\n                local wind_angle = self:GetWindSailingAngle()\n                \n                if wind_angle < 45 then\n                    -- Sailing with the wind\n                    speed = speed + (wind_speed * TUNING.WIND_SAIL_BOOST)\n                elseif wind_angle > 135 then\n                    -- Sailing against the wind\n                    speed = speed - (wind_speed * TUNING.WIND_SAIL_PENALTY)\n                end\n            end\n        end\n        \n        return speed\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"world-integration",children:"World Integration"}),"\n",(0,i.jsx)(n.p,{children:"The mod integrates with the world generation and management systems:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Integrating with world generation\nAddPrefabPostInit("world", function(inst)\n    -- Add tropical world components\n    if not TheWorld.ismastersim then\n        return\n    end\n    \n    -- Add wind system\n    inst:AddComponent("worldwind")\n    \n    -- Add tide system\n    inst:AddComponent("tidemanager")\n    \n    -- Add volcano manager\n    inst:AddComponent("volcanomanager")\n    \n    -- Add tropical seasons\n    local _SetPhase = inst.SetPhase\n    inst.SetPhase = function(inst, phase)\n        _SetPhase(inst, phase)\n        \n        if inst.state.isday then\n            -- Update island-specific day events\n            if inst.components.volcanomanager ~= nil then\n                inst.components.volcanomanager:OnDayChange()\n            end\n            \n            -- Update tides\n            if inst.components.tidemanager ~= nil then\n                inst.components.tidemanager:OnDayChange()\n            end\n        end\n    end\n    \n    -- Add tropical season states\n    if inst.state ~= nil then\n        inst.state.ismild = false\n        inst.state.iswet = false\n        inst.state.isgreen = false\n        inst.state.isdry = false\n        inst.state.ishurricane = false\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"item-integration",children:"Item Integration"}),"\n",(0,i.jsx)(n.p,{children:"The mod adds new items that work with existing systems:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Integration with existing crafting system\nlocal tech_level = TECH.SCIENCE_TWO\n\n-- Add new recipe tab\nAddRecipeTab(STRINGS.TABS.NAUTICAL, 998, "images/inventoryimages/tab_nautical.tex", "tab_nautical")\n\n-- Add boat recipe\nAddRecipe("boat", \n    {Ingredient("boards", 4), Ingredient("rope", 2)}, \n    RECIPETABS.NAUTICAL, \n    tech_level, \n    nil, -- placer\n    nil, -- min_spacing\n    nil, -- nounlock\n    nil, -- numtogive\n    "images/inventoryimages/boat.tex", -- atlas\n    "boat.tex" -- image\n)\n\n-- Add machete recipe\nAddRecipe("machete", \n    {Ingredient("twigs", 1), Ingredient("flint", 3)}, \n    RECIPETABS.TOOLS, \n    TECH.SCIENCE_ONE, \n    nil, -- placer\n    nil, -- min_spacing\n    nil, -- nounlock\n    nil, -- numtogive\n    "images/inventoryimages/machete.tex", -- atlas\n    "machete.tex" -- image\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"gameplay-balance",children:"Gameplay Balance"}),"\n",(0,i.jsx)(n.p,{children:"The mod carefully balances its new mechanics with the base game:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Tuning values for gameplay balance\nTUNING.BOAT = {\n    HEALTH = 200,\n    MASS = 500,\n    SPEED = 2.5,\n    DRAG = 0.15,\n    WIND_FORCE = 1.2,\n    WAVE_FORCE = 3.0,\n}\n\nTUNING.POISON = {\n    DAMAGE_PER_TICK = 1,\n    BUILD_UP_THRESHOLD = 100,\n    DURATION = 120,\n    ANTIDOTE_HEALING = 50,\n}\n\nTUNING.TROPICAL_SEASONS = {\n    MILD_TEMPERATURE = 35,\n    WET_TEMPERATURE = 30,\n    GREEN_TEMPERATURE = 35,\n    DRY_TEMPERATURE = 45,\n    HURRICANE_TEMPERATURE = 25,\n}\n\nTUNING.VOLCANO = {\n    WARNING_TIME = 60,\n    ERUPTION_TIME = 120,\n    DEBRIS_INTERVAL = 3,\n    DEBRIS_SHADOW_TIME = 2,\n    DEBRIS_RADIUS = 3,\n    DEBRIS_DAMAGE = 75,\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-lessons",children:"Key Lessons"}),"\n",(0,i.jsx)(n.h3,{id:"1-comprehensive-gameplay-systems",children:"1. Comprehensive Gameplay Systems"}),"\n",(0,i.jsx)(n.p,{children:"The mod demonstrates how to create interconnected gameplay systems:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Weather affects sailing which affects travel speed"}),"\n",(0,i.jsx)(n.li,{children:"Seasons affect resource availability and hazards"}),"\n",(0,i.jsx)(n.li,{children:"Treasure hunting creates exploration incentives"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-player-progression",children:"2. Player Progression"}),"\n",(0,i.jsx)(n.p,{children:"The mod implements meaningful progression systems:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"New crafting recipes unlock more efficient travel and resource gathering"}),"\n",(0,i.jsx)(n.li,{children:"Trading system provides goals for resource collection"}),"\n",(0,i.jsx)(n.li,{children:"Treasure hunting rewards exploration"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-environmental-storytelling",children:"3. Environmental Storytelling"}),"\n",(0,i.jsx)(n.p,{children:"The mod uses environmental systems to create narrative:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Volcano eruptions create tension and urgency"}),"\n",(0,i.jsx)(n.li,{children:"Weather patterns affect planning and strategy"}),"\n",(0,i.jsx)(n.li,{children:"Seasonal changes drive different gameplay activities"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-balancing-challenge-and-fun",children:"4. Balancing Challenge and Fun"}),"\n",(0,i.jsx)(n.p,{children:"The mod carefully balances new challenges with player capabilities:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Poison is dangerous but curable"}),"\n",(0,i.jsx)(n.li,{children:"Sailing is efficient but has risks"}),"\n",(0,i.jsx)(n.li,{children:"Volcano eruptions are dangerous but predictable"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Island Adventures demonstrates how to create engaging gameplay systems that extend Don't Starve Together in meaningful ways. By studying its implementation, developers can learn how to design interconnected systems that provide both challenge and enjoyment while maintaining the core feel of the base game."}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-ia-core",children:"Case Study - Island Adventures Core"})," - For technical implementation details"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/component-system",children:"Component System"})," - For understanding how components work"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/event-system",children:"Event System"})," - For event handling as used in this mod"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-weather-effects",children:"Custom Weather Effects"})," - For implementing weather systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-game-mode",children:"Custom Game Mode"})," - For creating alternative game modes"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>r});var s=a(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);