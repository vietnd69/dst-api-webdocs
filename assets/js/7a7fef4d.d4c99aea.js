"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1505],{5362:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/shared-properties/transform","title":"Transform","description":"Transform is a common property that manages an entity\'s position, rotation, and scale in 3D space. It is one of the core building blocks of every entity in Don\'t Starve Together.","source":"@site/docs/api-vanilla/shared-properties/transform.md","sourceDirName":"api-vanilla/shared-properties","slug":"/api-vanilla/shared-properties/transform","permalink":"/dst-api-webdocs/docs/api-vanilla/shared-properties/transform","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"transform","title":"Transform","sidebar_position":3}}');var o=t(4848),a=t(8453);const s={id:"transform",title:"Transform",sidebar_position:3},r="Transform",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Adding Transform to an Entity",id:"adding-transform-to-an-entity",level:2},{value:"Position Management",id:"position-management",level:2},{value:"Setting Position",id:"setting-position",level:3},{value:"Getting Position",id:"getting-position",level:3},{value:"Position Utility Functions",id:"position-utility-functions",level:3},{value:"Rotation Management",id:"rotation-management",level:2},{value:"Setting Rotation",id:"setting-rotation",level:3},{value:"Getting Rotation",id:"getting-rotation",level:3},{value:"Rotation Utility Functions",id:"rotation-utility-functions",level:3},{value:"Scale Management",id:"scale-management",level:2},{value:"Parent-Child Relationships",id:"parent-child-relationships",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Following Another Entity",id:"following-another-entity",level:3},{value:"Moving in a Direction",id:"moving-in-a-direction",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Technical Details",id:"technical-details",level:2},{value:"Example: Creating a Moving Entity",id:"example-creating-a-moving-entity",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"transform",children:"Transform"})}),"\n",(0,o.jsx)(e.p,{children:"Transform is a common property that manages an entity's position, rotation, and scale in 3D space. It is one of the core building blocks of every entity in Don't Starve Together."}),"\n",(0,o.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(e.p,{children:"Every entity in Don't Starve Together requires a Transform component to exist in the game world. The Transform component provides functionality to:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Position entities in the 3D world"}),"\n",(0,o.jsx)(e.li,{children:"Rotate entities around their axis"}),"\n",(0,o.jsx)(e.li,{children:"Scale entities to different sizes"}),"\n",(0,o.jsx)(e.li,{children:"Track and update entity movement"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"adding-transform-to-an-entity",children:"Adding Transform to an Entity"}),"\n",(0,o.jsx)(e.p,{children:"The Transform component is added to an entity during its creation:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"local function CreateMyEntity()\n    local inst = CreateEntity()\n    \n    -- Add the Transform component\n    inst.entity:AddTransform()\n    \n    -- Other components...\n    \n    return inst\nend\n"})}),"\n",(0,o.jsx)(e.h2,{id:"position-management",children:"Position Management"}),"\n",(0,o.jsx)(e.h3,{id:"setting-position",children:"Setting Position"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Set the entity's position in the world\ninst.Transform:SetPosition(x, y, z)\n\n-- Teleport the entity (used with Physics component)\ninst.Physics:Teleport(x, y, z)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"getting-position",children:"Getting Position"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Get the entity's current world position\nlocal x, y, z = inst.Transform:GetWorldPosition()\n\n-- Create a point at the entity's position\nlocal point = Point(inst.Transform:GetWorldPosition())\n\n-- Create a Vector3 at the entity's position\nlocal position = Vector3(inst.Transform:GetWorldPosition())\n"})}),"\n",(0,o.jsx)(e.h3,{id:"position-utility-functions",children:"Position Utility Functions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Get the squared distance between two entities\nlocal distsq = inst:GetDistanceSqToInst(other_entity)\n\n-- Get the squared distance to a point\nlocal distsq = inst:GetDistanceSqToPoint(x, y, z)\n\n-- Check if entity is near a point\nlocal is_near = inst:IsNear(point, radius)\n"})}),"\n",(0,o.jsx)(e.h2,{id:"rotation-management",children:"Rotation Management"}),"\n",(0,o.jsx)(e.h3,{id:"setting-rotation",children:"Setting Rotation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Set rotation in degrees (0-360)\ninst.Transform:SetRotation(degrees)\n\n-- Rotate to face a point\nlocal angle = inst:GetAngleToPoint(x, y, z)\ninst.Transform:SetRotation(angle)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"getting-rotation",children:"Getting Rotation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Get current rotation in degrees\nlocal rotation = inst.Transform:GetRotation()\n\n-- Get rotation as a unit direction vector\nlocal direction = TheCamera:GetRightVec()\n"})}),"\n",(0,o.jsx)(e.h3,{id:"rotation-utility-functions",children:"Rotation Utility Functions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Get angle between entity and a point\nlocal angle = inst:GetAngleToPoint(x, y, z)\n\n-- Get angle between two entities\nlocal angle = inst:GetAngleToInst(other_entity)\n"})}),"\n",(0,o.jsx)(e.h2,{id:"scale-management",children:"Scale Management"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Set uniform scale\ninst.Transform:SetScale(scale)\n\n-- Set different scale for each axis\ninst.Transform:SetScale(x_scale, y_scale, z_scale)\n\n-- Get current scale\nlocal scale = inst.Transform:GetScale()\n"})}),"\n",(0,o.jsx)(e.h2,{id:"parent-child-relationships",children:"Parent-Child Relationships"}),"\n",(0,o.jsx)(e.p,{children:"Entities can be attached to other entities to create hierarchies:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Make child_entity follow parent_entity's transform\nchild_entity.Transform:SetPosition(0, 0, 0)\nchild_entity.entity:SetParent(parent_entity.entity)\n\n-- Detach from parent\nchild_entity.entity:SetParent(nil)\n"})}),"\n",(0,o.jsx)(e.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,o.jsx)(e.h3,{id:"following-another-entity",children:"Following Another Entity"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Make an entity follow another entity\nlocal function OnUpdate(inst)\n    if inst.follow_target and inst.follow_target:IsValid() then\n        local x, y, z = inst.follow_target.Transform:GetWorldPosition()\n        inst.Transform:SetPosition(x, y, z)\n    end\nend\n\ninst:DoPeriodicTask(0, OnUpdate)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"moving-in-a-direction",children:"Moving in a Direction"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Move in the direction the entity is facing\nlocal function MoveForward(inst, speed)\n    local angle_rad = inst.Transform:GetRotation() * DEGREES\n    local dx = math.cos(angle_rad) * speed\n    local dz = -math.sin(angle_rad) * speed\n    \n    local x, y, z = inst.Transform:GetWorldPosition()\n    inst.Transform:SetPosition(x + dx, y, z + dz)\nend\n"})}),"\n",(0,o.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Transform operations are computationally efficient but can impact performance when used extensively"}),"\n",(0,o.jsx)(e.li,{children:"Avoid unnecessary position updates in Update or DoPeriodicTask loops"}),"\n",(0,o.jsx)(e.li,{children:"Batch transform operations when possible"}),"\n",(0,o.jsx)(e.li,{children:"Consider using Physics for complex movement logic"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"technical-details",children:"Technical Details"}),"\n",(0,o.jsx)(e.p,{children:"Transform is implemented at the engine level and is one of the fundamental components in the game's entity system. While most functionality is exposed to Lua, some advanced features may only be accessible through C++ code."}),"\n",(0,o.jsx)(e.h2,{id:"example-creating-a-moving-entity",children:"Example: Creating a Moving Entity"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'local function MoveEntity()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Movement logic\n    inst.speed = 5\n    \n    inst:DoPeriodicTask(FRAMES, function(inst)\n        local x, y, z = inst.Transform:GetWorldPosition()\n        local angle_rad = inst.Transform:GetRotation() * DEGREES\n        local dx = math.cos(angle_rad) * inst.speed * FRAMES\n        local dz = -math.sin(angle_rad) * inst.speed * FRAMES\n        \n        inst.Transform:SetPosition(x + dx, y, z + dz)\n    end)\n    \n    return inst\nend\n\nreturn Prefab("moving_entity", MoveEntity)\n'})})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var i=t(6540);const o={},a=i.createContext(o);function s(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);