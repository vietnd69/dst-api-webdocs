"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[14475],{11918:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"game-scripts/core-systems/user-interface/graphics/shadeeffects","title":"Shade Effects","description":"Visual shade rendering system for environmental lighting effects and canopy shadows","source":"@site/docs/game-scripts/core-systems/user-interface/graphics/shadeeffects.md","sourceDirName":"game-scripts/core-systems/user-interface/graphics","slug":"/game-scripts/core-systems/user-interface/graphics/shadeeffects","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/graphics/shadeeffects","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"shadeeffects","title":"Shade Effects","description":"Visual shade rendering system for environmental lighting effects and canopy shadows","sidebar_position":6,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Post Process Effects","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/graphics/postprocesseffects"},"next":{"title":"Input Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/input/"}}');var i=s(74848),t=s(28453);const r={id:"shadeeffects",title:"Shade Effects",description:"Visual shade rendering system for environmental lighting effects and canopy shadows",sidebar_position:6,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="Shade Effects",l={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Dedicated Server Handling",id:"dedicated-server-handling",level:2},{value:"Shade Types",id:"shade-types",level:2},{value:"ShadeTypes.LeafCanopy",id:"shadetypesleafcanopy",level:3},{value:"Core Functions",id:"core-functions",level:2},{value:"SpawnLeafCanopy(x, z)",id:"spawn-leaf-canopy",level:3},{value:"DespawnLeafCanopy(id)",id:"despawn-leaf-canopy",level:3},{value:"ShadeEffectUpdate(dt)",id:"shade-effect-update",level:3},{value:"EnableShadeRenderer(enable)",id:"enable-shade-renderer",level:3},{value:"Tuning Constants",id:"tuning-constants",level:2},{value:"Canopy Rotation Settings",id:"canopy-rotation-settings",level:3},{value:"Canopy Translation Settings",id:"canopy-translation-settings",level:3},{value:"Canopy Strength Settings",id:"canopy-strength-settings",level:3},{value:"Canopy Scale Settings",id:"canopy-scale-settings",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Shade Management",id:"basic-shade-management",level:3},{value:"Environmental Integration",id:"environmental-integration",level:3},{value:"Performance-Aware Shade Control",id:"performance-aware-shade-control",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"TheNet Integration",id:"thenet-integration",level:3},{value:"TheSim Integration",id:"thesim-integration",level:3},{value:"ShadeRenderer Integration",id:"shaderenderer-integration",level:3},{value:"Technical Notes",id:"technical-notes",level:2},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Visual Quality Features",id:"visual-quality-features",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"shade-effects",children:"Shade Effects"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ShadeEffects"})," module provides visual shade rendering functionality for environmental lighting effects, particularly tree canopy shadows. This system creates dynamic shade effects that respond to ambient lighting conditions and provides realistic shadowing for enhanced visual atmosphere."]}),"\n",(0,i.jsx)(n.h2,{id:"dedicated-server-handling",children:"Dedicated Server Handling"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nThe module automatically disables all shade functionality on dedicated servers to optimize performance, as visual effects are not needed on headless servers."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Dedicated server check\nif TheNet:IsDedicated() then\n    local nullfunc = function() end\n    ShadeEffectUpdate = nullfunc\n    SpawnLeafCanopy = nullfunc\n    DespawnLeafCanopy = nullfunc\n    EnableShadeRenderer = nullfunc\n    return\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"shade-types",children:"Shade Types"}),"\n",(0,i.jsx)(n.h3,{id:"shadetypesleafcanopy",children:"ShadeTypes.LeafCanopy"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nPrimary shade type for rendering tree canopy shadows with dynamic movement and lighting response."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Shade type creation and configuration\nShadeTypes.LeafCanopy = ShadeRenderer:CreateShadeType()\n\n-- Rotation settings\nShadeRenderer:SetShadeMaxRotation(ShadeTypes.LeafCanopy, TUNING.CANOPY_MAX_ROTATION)\nShadeRenderer:SetShadeRotationSpeed(ShadeTypes.LeafCanopy, TUNING.CANOPY_ROTATION_SPEED)\n\n-- Translation settings\nShadeRenderer:SetShadeMaxTranslation(ShadeTypes.LeafCanopy, TUNING.CANOPY_MAX_TRANSLATION)\nShadeRenderer:SetShadeTranslationSpeed(ShadeTypes.LeafCanopy, TUNING.CANOPY_TRANSLATION_SPEED)\n\n-- Texture assignment\nShadeRenderer:SetShadeTexture(ShadeTypes.LeafCanopy, "images/tree.tex")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,i.jsx)(n.h3,{id:"spawn-leaf-canopy",children:"SpawnLeafCanopy(x, z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCreates a new leaf canopy shade effect at the specified world coordinates with randomized rotation and configured scale."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"})," (number): World X coordinate for shade placement"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"z"})," (number): World Z coordinate for shade placement"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Shade ID for managing the created shade effect"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Spawn a canopy shade at specific coordinates\nlocal shade_id = SpawnLeafCanopy(10, 15)\n\n-- Spawn multiple canopy shades for a forest area\nlocal forest_shades = {}\nfor i = 1, 5 do\n    local x = math.random(-20, 20)\n    local z = math.random(-20, 20)\n    table.insert(forest_shades, SpawnLeafCanopy(x, z))\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Technical Details:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Uses ",(0,i.jsx)(n.code,{children:"TUNING.CANOPY_SCALE"})," for consistent sizing"]}),"\n",(0,i.jsx)(n.li,{children:"Applies random rotation (0-360 degrees) for natural variation"}),"\n",(0,i.jsx)(n.li,{children:"Returns unique ID for shade management"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"despawn-leaf-canopy",children:"DespawnLeafCanopy(id)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRemoves a specific leaf canopy shade effect using its unique identifier."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," (number): Shade ID returned from ",(0,i.jsx)(n.code,{children:"SpawnLeafCanopy"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Spawn and later remove a shade\nlocal shade_id = SpawnLeafCanopy(5, 10)\n\n-- Remove the shade when no longer needed\nDespawnLeafCanopy(shade_id)\n\n-- Remove multiple shades\nlocal shade_ids = {1001, 1002, 1003}\nfor _, id in ipairs(shade_ids) do\n    DespawnLeafCanopy(id)\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"shade-effect-update",children:"ShadeEffectUpdate(dt)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nUpdates shade rendering system each frame, adjusting shade strength based on ambient lighting conditions and processing shade animations."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dt"})," (number): Delta time since last update in seconds"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- This function is typically called by the game's main update loop\n-- Manual usage in custom update systems:\nlocal function CustomEnvironmentUpdate(dt)\n    -- Update shade effects\n    ShadeEffectUpdate(dt)\n    \n    -- Other environment updates\n    UpdateWeatherEffects(dt)\n    UpdateTimeOfDay(dt)\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Technical Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"function ShadeEffectUpdate(dt)\n    local r, g, b = TheSim:GetAmbientColour()\n    \n    -- Calculate shade strength based on ambient lighting\n    local light_intensity = ((r + g + b) / 3) / 255\n    local shade_strength = Lerp(TUNING.CANOPY_MIN_STRENGTH, \n                               TUNING.CANOPY_MAX_STRENGTH, \n                               light_intensity)\n    \n    ShadeRenderer:SetShadeStrength(ShadeTypes.LeafCanopy, shade_strength)\n    ShadeRenderer:Update(dt)\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"enable-shade-renderer",children:"EnableShadeRenderer(enable)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nEnables or disables the entire shade rendering system for performance control or visual preference settings."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enable"})," (boolean): ",(0,i.jsx)(n.code,{children:"true"})," to enable shade rendering, ",(0,i.jsx)(n.code,{children:"false"})," to disable"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Enable shade rendering\nEnableShadeRenderer(true)\n\n-- Disable shade rendering for performance\nEnableShadeRenderer(false)\n\n-- Toggle based on graphics settings\nlocal graphics_quality = Profile:GetGraphicsQuality()\nif graphics_quality == "high" then\n    EnableShadeRenderer(true)\nelse\n    EnableShadeRenderer(false)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"tuning-constants",children:"Tuning Constants"}),"\n",(0,i.jsx)(n.h3,{id:"canopy-rotation-settings",children:"Canopy Rotation Settings"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING.CANOPY_MAX_ROTATION"}),": Maximum rotation angle for shade movement"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING.CANOPY_ROTATION_SPEED"}),": Speed of rotational animation"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"canopy-translation-settings",children:"Canopy Translation Settings"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING.CANOPY_MAX_TRANSLATION"}),": Maximum translation distance for shade movement"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING.CANOPY_TRANSLATION_SPEED"}),": Speed of translational movement"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"canopy-strength-settings",children:"Canopy Strength Settings"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING.CANOPY_MIN_STRENGTH"}),": Minimum shade opacity in bright conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING.CANOPY_MAX_STRENGTH"}),": Maximum shade opacity in dark conditions"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"canopy-scale-settings",children:"Canopy Scale Settings"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUNING.CANOPY_SCALE"}),": Default scale factor for canopy shade size"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"basic-shade-management",children:"Basic Shade Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create shade effects for a tree\nlocal function CreateTreeShades(tree_inst)\n    local x, y, z = tree_inst.Transform:GetWorldPosition()\n    \n    -- Create main canopy shade\n    local shade_id = SpawnLeafCanopy(x, z)\n    \n    -- Store shade ID for cleanup\n    tree_inst.shade_id = shade_id\n    \n    -- Remove shade when tree is removed\n    tree_inst:ListenForEvent("onremove", function()\n        if tree_inst.shade_id then\n            DespawnLeafCanopy(tree_inst.shade_id)\n        end\n    end)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"environmental-integration",children:"Environmental Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Integrate shade effects with day/night cycle\nlocal function UpdateEnvironmentalShades(dt)\n    -- Update shade effects based on time and weather\n    ShadeEffectUpdate(dt)\n    \n    -- Adjust shader parameters based on weather\n    if TheWorld.state.israining then\n        -- Increase shade strength during rain\n        ShadeRenderer:SetShadeStrength(ShadeTypes.LeafCanopy, \n                                     TUNING.CANOPY_MAX_STRENGTH * 1.2)\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-aware-shade-control",children:"Performance-Aware Shade Control"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Control shade rendering based on performance settings\nlocal function ApplyGraphicsSettings()\n    local settings = Profile:GetGraphicsSettings()\n    \n    if settings.shade_quality == "disabled" then\n        EnableShadeRenderer(false)\n    elseif settings.shade_quality == "low" then\n        EnableShadeRenderer(true)\n        -- Reduce shade count or quality\n    else\n        EnableShadeRenderer(true)\n        -- Full quality shade rendering\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,i.jsx)(n.h3,{id:"thenet-integration",children:"TheNet Integration"}),"\n",(0,i.jsx)(n.p,{children:"The module checks server type for optimization:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Dedicated server detection\nif TheNet:IsDedicated() then\n    -- Disable all shade functionality\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"thesim-integration",children:"TheSim Integration"}),"\n",(0,i.jsx)(n.p,{children:"Uses simulation services for ambient lighting:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get ambient color for dynamic strength calculation\nlocal r, g, b = TheSim:GetAmbientColour()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"shaderenderer-integration",children:"ShadeRenderer Integration"}),"\n",(0,i.jsx)(n.p,{children:"Core rendering system interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Shade type management\nShadeRenderer:CreateShadeType()\nShadeRenderer:SetShadeTexture()\nShadeRenderer:SpawnShade()\nShadeRenderer:RemoveShade()\nShadeRenderer:Update()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"technical-notes",children:"Technical Notes"}),"\n",(0,i.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automatically disabled on dedicated servers"}),"\n",(0,i.jsx)(n.li,{children:"Shade strength calculated based on ambient lighting reduces GPU load"}),"\n",(0,i.jsx)(n.li,{children:"Dynamic enable/disable support for performance scaling"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"visual-quality-features",children:"Visual Quality Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Random rotation for natural variation"}),"\n",(0,i.jsx)(n.li,{children:"Dynamic strength adjustment based on lighting"}),"\n",(0,i.jsx)(n.li,{children:"Smooth animation updates via delta time"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unique ID system for proper shade lifecycle management"}),"\n",(0,i.jsx)(n.li,{children:"Automatic cleanup support through despawn functions"}),"\n",(0,i.jsx)(n.li,{children:"Integration with game object lifecycle"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../core-systems/index.md#tuning",children:"TUNING"}),": Configuration constants for shade parameters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./playerprofile.md",children:"Profile"}),": Graphics settings and performance preferences"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../core-systems/index.md#thenet",children:"TheNet"}),": Network and server type detection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../core-systems/index.md#thesim",children:"TheSim"}),": Simulation services and ambient lighting"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var a=s(96540);const i={},t=a.createContext(i);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);