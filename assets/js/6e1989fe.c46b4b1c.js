"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[124],{28453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>d});var n=r(96540);const t={},i=n.createContext(t);function l(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(i.Provider,{value:s},e.children)}},78583:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"game-scripts/core-systems/world-systems/generation/custom-presets","title":"Custom Presets","description":"System for creating, managing, and storing custom world generation and settings presets in Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/world-systems/generation/custompresets.md","sourceDirName":"game-scripts/core-systems/world-systems/generation","slug":"/game-scripts/core-systems/world-systems/generation/custom-presets","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/custom-presets","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"custom-presets","title":"Custom Presets","description":"System for creating, managing, and storing custom world generation and settings presets in Don\'t Starve Together","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"World Generation Main","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/worldgen-main"},"next":{"title":"Prefab Swaps","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/prefabswaps"}}');var t=r(74848),i=r(28453);const l={id:"custom-presets",title:"Custom Presets",description:"System for creating, managing, and storing custom world generation and settings presets in Don't Starve Together",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="Custom Presets",c={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"Load()",id:"load",level:3},{value:"LoadCustomPreset(category, presetid)",id:"load-custom-preset",level:3},{value:"IsValidPreset(category, presetid)",id:"is-valid-preset",level:3},{value:"SaveCustomPreset(category, presetid, basepreset, overrides, name, desc)",id:"save-custom-preset",level:3},{value:"MoveCustomPreset(category, oldid, presetid, name, desc)",id:"move-custom-preset",level:3},{value:"DeleteCustomPreset(category, presetid)",id:"delete-custom-preset",level:3},{value:"PresetIDExists(category, presetid)",id:"preset-id-exists",level:3},{value:"IsCustomPreset(category, presetid)",id:"is-custom-preset",level:3},{value:"GetPresetIDs(category)",id:"get-preset-ids",level:3},{value:"Constants",id:"constants",level:2},{value:"File System Constants",id:"file-system-constants",level:3},{value:"Preset Categories",id:"preset-categories",level:3},{value:"Classes",id:"classes",level:2},{value:"CustomPresets",id:"custompresets",level:3},{value:"Preset Structure",id:"preset-structure",level:2},{value:"File Format",id:"file-format",level:3},{value:"Storage Structure",id:"storage-structure",level:3},{value:"Migration System",id:"migration-system",level:2},{value:"Legacy Profile Migration",id:"legacy-profile-migration",level:3},{value:"Related Modules",id:"related-modules",level:2}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"custom-presets",children:"Custom Presets"})}),"\n",(0,t.jsx)(s.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Build Version"}),(0,t.jsx)(s.th,{children:"Change Date"}),(0,t.jsx)(s.th,{children:"Change Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsx)(s.tbody,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"676042"}),(0,t.jsx)(s.td,{children:"2025-06-21"}),(0,t.jsx)(s.td,{children:"stable"}),(0,t.jsx)(s.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CustomPresets"})," system provides functionality for creating, managing, and storing custom world generation and settings presets in Don't Starve Together. This system allows players to save their preferred world configurations and share them with others."]}),"\n",(0,t.jsx)(s.p,{children:"Custom presets enable players to create personalized world configurations by saving custom combinations of world settings and generation parameters, managing preset files with persistent storage, and migrating presets from older profile systems."}),"\n",(0,t.jsx)(s.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'local customPresets = CustomPresets()\ncustomPresets:Load()\n\n-- Create a relaxed gameplay preset\nlocal success = customPresets:SaveCustomPreset(\n    LEVELCATEGORY.SETTINGS,\n    "CUSTOM_RELAXED_SURVIVAL",\n    "SURVIVAL_TOGETHER",\n    {\n        day = "longday",\n        pvp = false,\n        ghost_sanity_drain = false\n    },\n    "Relaxed Survival",\n    "Extended days with reduced penalties"\n)\n\n-- Load and use a preset\nlocal preset = customPresets:LoadCustomPreset(LEVELCATEGORY.SETTINGS, "CUSTOM_RELAXED_SURVIVAL")\nif preset then\n    print("Loaded preset:", preset.name)\nend\n'})}),"\n",(0,t.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(s.h3,{id:"load",children:"Load()"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nInitializes the custom presets system by loading preset IDs and migrating legacy profile presets. Automatically converts presets from the old Profile-based system to the new file-based format."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"None"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Retrieves preset file lists from the simulation"}),"\n",(0,t.jsxs)(s.li,{children:["Migrates presets from ",(0,t.jsx)(s.code,{children:"Profile:GetWorldCustomizationPresets()"})," if present"]}),"\n",(0,t.jsx)(s.li,{children:"Converts legacy customization presets to the new format"}),"\n",(0,t.jsx)(s.li,{children:"Cleans up old profile data after successful migration"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:"local customPresets = CustomPresets()\ncustomPresets:Load()\n"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: File-based storage with legacy migration"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"load-custom-preset",children:"LoadCustomPreset(category, presetid)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nLoads a specific custom preset from persistent storage. Validates preset structure, applies upgrade logic for older versions, and caches loaded presets for performance."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"category"})," (LEVELCATEGORY): Either ",(0,t.jsx)(s.code,{children:"LEVELCATEGORY.SETTINGS"})," or ",(0,t.jsx)(s.code,{children:"LEVELCATEGORY.WORLDGEN"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presetid"})," (string): Preset identifier (must start with ",(0,t.jsx)(s.code,{children:'"CUSTOM_"'}),")"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["(table|nil): Loaded preset data with overrides and metadata, or ",(0,t.jsx)(s.code,{children:"nil"})," if loading fails"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Validates preset ID format and existence"}),"\n",(0,t.jsx)(s.li,{children:"Loads preset data from persistent storage"}),"\n",(0,t.jsx)(s.li,{children:"Applies upgrade logic for older preset versions"}),"\n",(0,t.jsx)(s.li,{children:"Merges custom overrides with base preset data"}),"\n",(0,t.jsx)(s.li,{children:"Caches loaded presets for performance"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'local presetData = customPresets:LoadCustomPreset(LEVELCATEGORY.SETTINGS, "CUSTOM_MY_PRESET")\nif presetData then\n    print("Loaded preset:", presetData.name)\n    print("Base preset:", presetData.baseid)\nend\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: Supports version upgrades and validation"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"is-valid-preset",children:"IsValidPreset(category, presetid)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nValidates whether a custom preset exists and has valid structure. Performs comprehensive validation checks including ID format, existence, and data structure integrity."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"category"})," (LEVELCATEGORY): Preset category to check, or ",(0,t.jsx)(s.code,{children:"LEVELCATEGORY.COMBINED"})," for both"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presetid"})," (string): Preset identifier to validate"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["(boolean): ",(0,t.jsx)(s.code,{children:"true"})," if preset is valid, ",(0,t.jsx)(s.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Validation Checks:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Preset ID format (must start with ",(0,t.jsx)(s.code,{children:'"CUSTOM_"'}),")"]}),"\n",(0,t.jsx)(s.li,{children:"Preset ID exists in the system"}),"\n",(0,t.jsx)(s.li,{children:"Preset file contains valid data structure"}),"\n",(0,t.jsx)(s.li,{children:"Required fields are present (baseid, name, desc, overrides)"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'if customPresets:IsValidPreset(LEVELCATEGORY.SETTINGS, "CUSTOM_SURVIVAL_PLUS") then\n    local preset = customPresets:LoadCustomPreset(LEVELCATEGORY.SETTINGS, "CUSTOM_SURVIVAL_PLUS")\n    -- Use preset safely\nend\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: Comprehensive validation logic"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"save-custom-preset",children:"SaveCustomPreset(category, presetid, basepreset, overrides, name, desc)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nCreates or updates a custom preset with the specified configuration. Validates all input parameters, creates preset data structure with version information, and saves to persistent storage."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"category"})," (LEVELCATEGORY): Preset category"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presetid"})," (string): Unique preset identifier (must start with ",(0,t.jsx)(s.code,{children:'"CUSTOM_"'}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"basepreset"})," (string): Base preset ID to build upon"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"overrides"})," (table): Setting overrides to apply"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"name"})," (string): Display name for the preset"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"desc"})," (string): Description of the preset"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["(boolean): ",(0,t.jsx)(s.code,{children:"true"})," if save was successful, ",(0,t.jsx)(s.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Validates all input parameters"}),"\n",(0,t.jsx)(s.li,{children:"Creates preset data structure with version information"}),"\n",(0,t.jsx)(s.li,{children:"Calculates playstyle for settings presets"}),"\n",(0,t.jsx)(s.li,{children:"Saves preset to persistent storage"}),"\n",(0,t.jsx)(s.li,{children:"Updates internal preset tracking"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'local success = customPresets:SaveCustomPreset(\n    LEVELCATEGORY.SETTINGS,\n    "CUSTOM_PEACEFUL_LONG",\n    "SURVIVAL_TOGETHER",\n    { \n        day = "longday",\n        pvp = false,\n        ghost_sanity_drain = false\n    },\n    "Peaceful Long Days",\n    "Relaxed gameplay with extended daylight"\n)\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: Includes playstyle calculation"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"move-custom-preset",children:"MoveCustomPreset(category, oldid, presetid, name, desc)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nRenames or moves a custom preset to a new identifier. Preserves existing overrides and base preset while updating metadata and maintaining preset order."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"category"})," (LEVELCATEGORY): Preset category"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"oldid"})," (string): Current preset identifier"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presetid"})," (string): New preset identifier"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"name"})," (string): New display name"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"desc"})," (string): New description"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["(table|nil): Updated preset data, or ",(0,t.jsx)(s.code,{children:"nil"})," if operation failed"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'local movedPreset = customPresets:MoveCustomPreset(\n    LEVELCATEGORY.SETTINGS,\n    "CUSTOM_OLD_NAME",\n    "CUSTOM_NEW_NAME",\n    "Updated Preset Name",\n    "Updated description"\n)\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: Supports preset renaming"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"delete-custom-preset",children:"DeleteCustomPreset(category, presetid)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nPermanently removes a custom preset from the system. Removes preset from memory cache, deletes preset file from persistent storage, and updates preset ID tracking lists."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"category"})," (LEVELCATEGORY): Preset category"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presetid"})," (string): Preset identifier to delete"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'customPresets:DeleteCustomPreset(LEVELCATEGORY.SETTINGS, "CUSTOM_UNUSED_PRESET")\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: Complete preset removal"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"preset-id-exists",children:"PresetIDExists(category, presetid)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nChecks whether a preset ID exists in the specified category. Supports checking both individual categories and combined category validation."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"category"})," (LEVELCATEGORY): Preset category, or ",(0,t.jsx)(s.code,{children:"LEVELCATEGORY.COMBINED"})," for both"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presetid"})," (string): Preset identifier to check"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["(boolean): ",(0,t.jsx)(s.code,{children:"true"})," if preset ID exists, ",(0,t.jsx)(s.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'if customPresets:PresetIDExists(LEVELCATEGORY.SETTINGS, "CUSTOM_MY_PRESET") then\n    print("Preset already exists")\nend\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: Supports combined category checking"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"is-custom-preset",children:"IsCustomPreset(category, presetid)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nAlias for ",(0,t.jsx)(s.code,{children:"PresetIDExists()"}),". Checks if a preset is a custom preset."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"category"})," (LEVELCATEGORY): Preset category"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presetid"})," (string): Preset identifier to check"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["(boolean): ",(0,t.jsx)(s.code,{children:"true"})," if it's a custom preset, ",(0,t.jsx)(s.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: Alias for PresetIDExists"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"get-preset-ids",children:"GetPresetIDs(category)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nRetrieves all preset IDs for a specific category, sorted alphabetically."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"category"})," (LEVELCATEGORY): Preset category"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"(table): Array of preset IDs sorted alphabetically"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'local settingsPresets = customPresets:GetPresetIDs(LEVELCATEGORY.SETTINGS)\nfor i, presetid in ipairs(settingsPresets) do\n    print("Available preset:", presetid)\nend\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: Returns sorted preset list"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"constants",children:"Constants"}),"\n",(0,t.jsx)(s.h3,{id:"file-system-constants",children:"File System Constants"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Constant"}),(0,t.jsx)(s.th,{children:"Value"}),(0,t.jsx)(s.th,{children:"Purpose"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"WORLD_PRESETS_FOLDER"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:'"world_presets/"'})}),(0,t.jsx)(s.td,{children:"Storage directory for preset files"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"PRESET_PREFIX"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:'"CUSTOM_"'})}),(0,t.jsx)(s.td,{children:"Required prefix for custom preset IDs"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"EXTENSIONS.SETTINGS"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:'".wsp"'})}),(0,t.jsx)(s.td,{children:"File extension for settings presets"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"EXTENSIONS.WORLDGEN"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:'".wgp"'})}),(0,t.jsx)(s.td,{children:"File extension for worldgen presets"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"preset-categories",children:"Preset Categories"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Category"}),(0,t.jsx)(s.th,{children:"Purpose"}),(0,t.jsx)(s.th,{children:"File Extension"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"LEVELCATEGORY.SETTINGS"})}),(0,t.jsx)(s.td,{children:"Gameplay parameters and player experience"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".wsp"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"LEVELCATEGORY.WORLDGEN"})}),(0,t.jsx)(s.td,{children:"World generation and creation parameters"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:".wgp"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"LEVELCATEGORY.COMBINED"})}),(0,t.jsx)(s.td,{children:"Both categories for validation"}),(0,t.jsx)(s.td,{children:"N/A"})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsx)(s.h3,{id:"custompresets",children:"CustomPresets"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nMain class for managing custom world and settings presets. Provides functionality for loading, saving, validating, and organizing custom presets."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Properties:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presets"})," (table): Table storing loaded preset data by category"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"presetIDs"})," (table): Table storing available preset IDs by category"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Constructor:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:"CustomPresets = Class(function(self)\n    self.presets = {\n        [LEVELCATEGORY.SETTINGS] = {},\n        [LEVELCATEGORY.WORLDGEN] = {},\n    }\n    self.presetIDs = {\n        [LEVELCATEGORY.SETTINGS] = {},\n        [LEVELCATEGORY.WORLDGEN] = {},\n    }\nend)\n"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Current in build 676042: File-based preset management"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"preset-structure",children:"Preset Structure"}),"\n",(0,t.jsx)(s.h3,{id:"file-format",children:"File Format"}),"\n",(0,t.jsxs)(s.p,{children:["Preset files are stored as Lua data structures using ",(0,t.jsx)(s.code,{children:"DataDumper"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'{\n    baseid = "SURVIVAL_TOGETHER",\n    overrides = {\n        day = "longday",\n        pvp = false,\n        ghost_sanity_drain = false\n    },\n    name = "Peaceful Extended Days",\n    desc = "Longer days with reduced difficulty",\n    playstyle = "social", -- calculated for settings presets\n    version = 1\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"storage-structure",children:"Storage Structure"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"world_presets/\n\u251c\u2500\u2500 CUSTOM_PRESET_NAME.wsp    # Settings preset\n\u251c\u2500\u2500 CUSTOM_PRESET_NAME.wgp    # World generation preset\n\u251c\u2500\u2500 CUSTOM_ANOTHER_PRESET.wsp\n\u2514\u2500\u2500 CUSTOM_ANOTHER_PRESET.wgp\n"})}),"\n",(0,t.jsx)(s.h2,{id:"migration-system",children:"Migration System"}),"\n",(0,t.jsx)(s.h3,{id:"legacy-profile-migration",children:"Legacy Profile Migration"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Status:"})," ",(0,t.jsx)(s.code,{children:"stable"})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Description:"}),"\nAutomatic migration from the old Profile-based system to the new file-based format."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Migration Process:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Converts presets from ",(0,t.jsx)(s.code,{children:"Profile:GetWorldCustomizationPresets()"})]}),"\n",(0,t.jsx)(s.li,{children:"Handles both forest and cave location presets"}),"\n",(0,t.jsx)(s.li,{children:"Maintains backward compatibility with existing user presets"}),"\n",(0,t.jsx)(s.li,{children:"Cleans up old profile data after successful migration"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lua",children:'-- Automatic migration during Load()\nlocal profilepresets = Profile:GetWorldCustomizationPresets()\nif profilepresets ~= nil and not IsTableEmpty(profilepresets) then\n    -- Convert each preset to new format\n    for i, level in pairs(profilepresets) do\n        local id = "CUSTOM_" .. (level.id):gsub("_", " ")\n        -- Save as both settings and worldgen presets\n        self:SaveCustomPreset(LEVELCATEGORY.SETTINGS, id, basepreset, settingsoverrides, level.name, level.desc)\n        self:SaveCustomPreset(LEVELCATEGORY.WORLDGEN, id, basepreset, worldgenoverrides, level.name, level.desc)\n    end\n    Profile:SetValue("customizationpresets", nil)\nend\n'})}),"\n",(0,t.jsx)(s.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"mdc:dst-api-webdocs/map/levels.md",children:"Map/Levels"}),": Base preset definitions and level categories"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"mdc:dst-api-webdocs/map/customize.md",children:"Map/Customize"}),": World customization options"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"mdc:dst-api-webdocs/core-systems/savefileupgrades.md",children:"Save File Upgrades"}),": Preset version migration"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"mdc:dst-api-webdocs/core-systems/profile.md",children:"Profile System"}),": Legacy preset storage"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);