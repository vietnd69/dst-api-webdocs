"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6500],{4169:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/node-types/component","title":"Component","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/node-types/component.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/component","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/component","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"component","title":"Component","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z"}}');var o=t(4848),i=t(8453);const l={id:"component",title:"Component",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z")},a="Component",r={},d=[{value:"Component properties and methods",id:"component-properties-and-methods",level:2},{value:"Properties",id:"properties",level:2},{value:"inst: Entity <span>[readonly]</span>",id:"inst-entity-readonly",level:3},{value:"Methods",id:"methods",level:2},{value:"OnSave(): Table",id:"onsave-table",level:3},{value:"OnLoad(data: Table): void",id:"onloaddata-table-void",level:3},{value:"GetDebugString(): String",id:"getdebugstring-string",level:3},{value:"OnRemoveFromEntity(): void",id:"onremovefromentity-void",level:3},{value:"Component Structure",id:"component-structure",level:2},{value:"Adding Components to Entities",id:"adding-components-to-entities",level:2},{value:"Common Components",id:"common-components",level:2},{value:"Component Replication",id:"component-replication",level:2},{value:"Related Systems",id:"related-systems",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"component",children:"Component"})}),"\n",(0,o.jsx)(n.p,{children:"Components are functional modules attached to entities to provide specific behaviors and properties."}),"\n",(0,o.jsx)(n.h2,{id:"component-properties-and-methods",children:"Component properties and methods"}),"\n",(0,o.jsx)(n.p,{children:"Components provide the following key properties and methods:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Properties"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"inst"})," - Reference to the entity this component is attached to"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Methods"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"OnSave()"})," - Called when the game is saving"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"OnLoad()"})," - Called when the game is loading"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"GetDebugString()"})," - Called when debugging information is requested"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"OnRemoveFromEntity()"})," - Called when the component is removed"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(n.h3,{id:"inst-entity-readonly",children:["inst: ",(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"})," ",(0,o.jsx)("span",{style:{color:"#888"},children:"[readonly]"})]}),"\n",(0,o.jsx)(n.p,{children:"A reference to the entity that this component is attached to. This property is set automatically when the component is added to an entity."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function MyComponent:SomeAction()\n    -- Access the entity's position\n    local x, y, z = self.inst.Transform:GetWorldPosition()\n    \n    -- Access other components on the same entity\n    if self.inst.components.health then\n        self.inst.components.health:SetMaxHealth(100)\n    end\nend\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(n.h3,{id:"onsave-table",children:"OnSave(): Table"}),"\n",(0,o.jsx)(n.p,{children:"Called when the game is saving. Return a table containing any data that should be saved."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function MyComponent:OnSave()\n    return {\n        value = self.value,\n        enabled = self.enabled\n    }\nend\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"onloaddata-table-void",children:"OnLoad(data: Table): void"}),"\n",(0,o.jsx)(n.p,{children:"Called when the game is loading. The data parameter contains the table returned by OnSave."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function MyComponent:OnLoad(data)\n    self.value = data.value or self.value\n    self.enabled = data.enabled or self.enabled\nend\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"getdebugstring-string",children:"GetDebugString(): String"}),"\n",(0,o.jsx)(n.p,{children:"Called when debugging information is requested. Return a string containing debug information."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'function MyComponent:GetDebugString()\n    return string.format("Value: %d, Enabled: %s", self.value, tostring(self.enabled))\nend\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"onremovefromentity-void",children:"OnRemoveFromEntity(): void"}),"\n",(0,o.jsx)(n.p,{children:"Called when the component is removed from its entity. Use this to clean up any resources or event listeners."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function MyComponent:OnRemoveFromEntity()\n    -- Clean up event listeners\n    if self.eventtask then\n        self.eventtask:Cancel()\n        self.eventtask = nil\n    end\n    \n    -- Reset entity state if needed\n    self.inst.ispowerful = nil\nend\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"component-structure",children:"Component Structure"}),"\n",(0,o.jsx)(n.p,{children:"A typical component has this structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self.value = 100\n    self.enabled = true\nend)\n\nfunction MyComponent:OnSave()\n    return {\n        value = self.value,\n        enabled = self.enabled\n    }\nend\n\nfunction MyComponent:OnLoad(data)\n    self.value = data.value or self.value\n    self.enabled = data.enabled or self.enabled\nend\n\nfunction MyComponent:GetDebugString()\n    return string.format("Value: %d, Enabled: %s", self.value, tostring(self.enabled))\nend\n\nfunction MyComponent:DoSomething(amount)\n    if self.enabled then\n        self.value = self.value + amount\n        self.inst:PushEvent("valueupdated", {value = self.value})\n    end\nend\n\nreturn MyComponent\n'})}),"\n",(0,o.jsx)(n.h2,{id:"adding-components-to-entities",children:"Adding Components to Entities"}),"\n",(0,o.jsx)(n.p,{children:"Components are added to entities like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Add a component to an entity\nentity:AddComponent("health")\n\n-- Configure the component\nentity.components.health:SetMaxHealth(100)\n\n-- Check if entity has a component\nif entity.components.combat then\n    entity.components.combat:SetDefaultDamage(10)\nend\n\n-- Remove a component\nentity:RemoveComponent("burnable")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"common-components",children:"Common Components"}),"\n",(0,o.jsx)(n.p,{children:"Here are some important components in Don't Starve Together:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"health"}),": Handles entity health and damage"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"hunger"}),": Manages hunger for characters"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"sanity"}),": Controls sanity level for characters"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"inventory"}),": Manages item storage"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"combat"}),": Handles attacking and combat"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"lootdropper"}),": Determines what items an entity drops when killed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"inspectable"}),": Allows an entity to be inspected"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"workable"}),": Makes an entity workable with tools"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"burnable"}),": Makes an entity able to burn"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"propagator"}),": Allows an entity to spread fire"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"stewer"}),": For cooking food items"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"growable"}),": For things that grow over time"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"trader"}),": For entities that can trade"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"locomotor"}),": Handles movement"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"component-replication",children:"Component Replication"}),"\n",(0,o.jsx)(n.p,{children:"For multiplayer, components need to replicate their state between server and clients:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- In component initialization\nif TheWorld.ismastersim then\n    -- Server-only initialization\n    self.netvar = net_bool(self.inst.GUID, "mycomponent.value", "valuedirty")\nend\n\n-- Server setting a value\nfunction MyComponent:SetValue(val)\n    self.value = val\n    self.netvar:set(val)\nend\n\n-- Client listening for changes\nif not TheWorld.ismastersim then\n    inst:ListenForEvent("valuedirty", OnValueChanged)\nend\n'})}),"\n",(0,o.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/entity",children:"Entity"})," - The entity system that components attach to"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/network",children:"Network"})," - Network replication system for multiplayer"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"event.md",children:"Event"})," - Event system for communication between components"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"save-load.md",children:"Save/Load"})," - Save/Load system for persistence"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const o={},i=s.createContext(o);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);