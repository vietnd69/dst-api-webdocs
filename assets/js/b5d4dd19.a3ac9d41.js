"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[62506],{28453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>t});var i=l(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},56370:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"game-scripts/core-systems/development-tools/utilities/strict","title":"Strict","description":"Lua strict mode implementation preventing access to undeclared global variables","source":"@site/docs/game-scripts/core-systems/development-tools/utilities/strict.md","sourceDirName":"game-scripts/core-systems/development-tools/utilities","slug":"/game-scripts/core-systems/development-tools/utilities/strict","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/utilities/strict","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"strict","title":"Strict","description":"Lua strict mode implementation preventing access to undeclared global variables","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Known Errors","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/utilities/knownerrors"},"next":{"title":"Fundamentals Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/"}}');var s=l(74848),r=l(28453);const a={id:"strict",title:"Strict",description:"Lua strict mode implementation preventing access to undeclared global variables",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Strict",d={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Core Functionality",id:"core-functionality",level:2},{value:"Metatable Implementation",id:"metatable-implementation",level:3},{value:"Scope Handling",id:"scope-handling",level:3},{value:"Global Variables",id:"global-variables",level:2},{value:"__STRICT",id:"__strict",level:3},{value:"mt.__declared",id:"mt__declared",level:3},{value:"Core Functions",id:"core-functions",level:2},{value:"global(...)",id:"global",level:3},{value:"Metatable Functions",id:"metatable-functions",level:2},{value:"mt.__newindex(t, n, v)",id:"mt-newindex",level:3},{value:"mt.__index(t, n)",id:"mt-index",level:3},{value:"Pre-declared Variables",id:"pre-declared-variables",level:2},{value:"MAIN",id:"main",level:3},{value:"WORLDGEN_MAIN",id:"worldgen_main",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Debug Information Usage",id:"debug-information-usage",level:3},{value:"Error Messages",id:"error-messages",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Enabling Strict Mode",id:"enabling-strict-mode",level:3},{value:"Working with Strict Mode",id:"working-with-strict-mode",level:3},{value:"Common Patterns",id:"common-patterns",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Errors",id:"common-errors",level:3},{value:"Debugging Tips",id:"debugging-tips",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Global Variable Management",id:"global-variable-management",level:3},{value:"Code Organization",id:"code-organization",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Integration with DST",id:"integration-with-dst",level:2},{value:"Module Loading",id:"module-loading",level:3},{value:"Interaction with Other Systems",id:"interaction-with-other-systems",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Configuration Management",id:"configuration-management",level:3},{value:"State Management",id:"state-management",level:3},{value:"Development Tools",id:"development-tools",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Disabling Strict Mode",id:"disabling-strict-mode",level:3},{value:"Working with Dynamic Code",id:"working-with-dynamic-code",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"strict",children:"Strict"})}),"\n",(0,s.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Build Version"}),(0,s.jsx)(n.th,{children:"Change Date"}),(0,s.jsx)(n.th,{children:"Change Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Strict"})," module implements Lua strict mode functionality that prevents accidental access to undeclared global variables. It uses Lua's metatable mechanism to intercept global variable access and throws errors when code attempts to read or write variables that haven't been explicitly declared."]}),"\n",(0,s.jsx)(n.p,{children:"This is a crucial development tool that helps catch common programming errors such as typos in variable names, uninitialized variables, and accidental global pollution. It's particularly valuable in large codebases where variable scope issues can be difficult to track down."}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Without strict mode, this would silently create a global\nsomeVariable = "value"  -- Error: assign to undeclared variable \'someVariable\'\n\n-- Must explicitly declare globals\nglobal("someVariable")\nsomeVariable = "value"  -- Now this works\n\n-- Reading undeclared variables also errors\nprint(undeclaredVar)  -- Error: variable \'undeclaredVar\' is not declared\n\n-- Multiple declarations at once\nglobal("VAR1", "VAR2", "VAR3")\nVAR1 = "first"\nVAR2 = "second" \nVAR3 = "third"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"core-functionality",children:"Core Functionality"}),"\n",(0,s.jsx)(n.h3,{id:"metatable-implementation",children:"Metatable Implementation"}),"\n",(0,s.jsx)(n.p,{children:"The strict mode system works by:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Installing Metatables"}),": Sets ",(0,s.jsx)(n.code,{children:"__newindex"})," and ",(0,s.jsx)(n.code,{children:"__index"})," metamethods on the global table ",(0,s.jsx)(n.code,{children:"_G"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tracking Declarations"}),": Maintains a registry of declared variables in ",(0,s.jsx)(n.code,{children:"mt.__declared"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Intercepting Access"}),": Catches all global variable read/write operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Reporting"}),": Throws descriptive errors for undeclared variable access"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"scope-handling",children:"Scope Handling"}),"\n",(0,s.jsx)(n.p,{children:"Strict mode distinguishes between different code contexts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Main Chunks"}),": Code running at the top level (allowed to create globals)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C Functions"}),": Native functions (allowed to access globals)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Regular Functions"}),": User-defined functions (strict checking enforced)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"global-variables",children:"Global Variables"}),"\n",(0,s.jsx)(n.h3,{id:"__strict",children:"__STRICT"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nGlobal flag that enables strict mode checking. When ",(0,s.jsx)(n.code,{children:"true"}),", the metamethods enforce strict variable access rules."]}),"\n",(0,s.jsx)(n.h3,{id:"mt__declared",children:"mt.__declared"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"table"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nInternal registry table that tracks which global variables have been explicitly declared. Maps variable names to ",(0,s.jsx)(n.code,{children:"true"})," for declared variables."]}),"\n",(0,s.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,s.jsx)(n.h3,{id:"global",children:"global(...)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nDeclares one or more global variables, allowing them to be accessed without strict mode errors."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"..."})," (string): Variable names to declare as global"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Declare a single global\nglobal("DEBUG_MODE")\nDEBUG_MODE = true\n\n-- Declare multiple globals\nglobal("PLAYER_COUNT", "WORLD_SIZE", "GAME_VERSION")\nPLAYER_COUNT = 4\nWORLD_SIZE = "huge"\nGAME_VERSION = "1.0.0"\n\n-- Can be called multiple times\nglobal("TEMP_VAR")\nTEMP_VAR = "temporary value"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"metatable-functions",children:"Metatable Functions"}),"\n",(0,s.jsx)(n.h3,{id:"mt-newindex",children:"mt.__newindex(t, n, v)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nMetamethod that intercepts attempts to create new global variables. Throws an error if strict mode is enabled and the variable hasn't been declared."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"t"})," (table): The global table ",(0,s.jsx)(n.code,{children:"_G"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," (string): Name of the variable being assigned"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"v"})," (any): Value being assigned to the variable"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error Conditions:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Throws error if ",(0,s.jsx)(n.code,{children:"__STRICT"})," is true and variable ",(0,s.jsx)(n.code,{children:"n"})," is not in ",(0,s.jsx)(n.code,{children:"mt.__declared"})]}),"\n",(0,s.jsx)(n.li,{children:"Exception: Allows assignment from main chunks and C functions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"mt-index",children:"mt.__index(t, n)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nMetamethod that intercepts attempts to read global variables. Throws an error if strict mode is enabled and the variable hasn't been declared."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"t"})," (table): The global table ",(0,s.jsx)(n.code,{children:"_G"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," (string): Name of the variable being accessed"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(any): The value of the variable if it exists and is declared"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error Conditions:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Throws error if variable ",(0,s.jsx)(n.code,{children:"n"})," is not in ",(0,s.jsx)(n.code,{children:"mt.__declared"})]}),"\n",(0,s.jsx)(n.li,{children:"Exception: Allows access from C functions"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pre-declared-variables",children:"Pre-declared Variables"}),"\n",(0,s.jsx)(n.p,{children:"The strict module automatically declares certain essential variables:"}),"\n",(0,s.jsx)(n.h3,{id:"main",children:"MAIN"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nPre-declared global variable typically used to identify main execution context."]}),"\n",(0,s.jsx)(n.h3,{id:"worldgen_main",children:"WORLDGEN_MAIN"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nPre-declared global variable used to identify world generation execution context."]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.h3,{id:"debug-information-usage",children:"Debug Information Usage"}),"\n",(0,s.jsx)(n.p,{children:"The strict mode system uses Lua's debug library to determine the calling context:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local w = debug.getinfo(2, "S").what\n'})}),"\n",(0,s.jsx)(n.p,{children:"This retrieves information about the function that's attempting the global access:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'"main"'}),": Top-level code execution (allowed)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'"C"'}),": C function calls (allowed)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Other"}),": Regular Lua functions (strict checking enforced)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"error-messages",children:"Error Messages"}),"\n",(0,s.jsx)(n.p,{children:"The strict mode provides clear error messages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Write Error"}),": ",(0,s.jsx)(n.code,{children:"\"assign to undeclared variable 'varname'\""})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read Error"}),": ",(0,s.jsx)(n.code,{children:"\"variable 'varname' is not declared\""})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These messages include the line number and source file information automatically provided by Lua's error handling."}),"\n",(0,s.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,s.jsx)(n.h3,{id:"enabling-strict-mode",children:"Enabling Strict Mode"}),"\n",(0,s.jsx)(n.p,{children:"Strict mode is automatically enabled when the module is loaded:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'require("strict")  -- Enables strict mode globally\n'})}),"\n",(0,s.jsx)(n.h3,{id:"working-with-strict-mode",children:"Working with Strict Mode"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Declare Before Use"}),": Always call ",(0,s.jsx)(n.code,{children:"global()"})," before using global variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Group Declarations"}),": Declare related globals together for clarity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Locals"}),": Prefer local variables when possible to avoid global scope"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Configuration variables\nglobal("CONFIG_DEBUG", "CONFIG_VERBOSE", "CONFIG_LOG_LEVEL")\nCONFIG_DEBUG = true\nCONFIG_VERBOSE = false\nCONFIG_LOG_LEVEL = 2\n\n-- System state\nglobal("GAME_STATE", "CURRENT_PLAYER", "WORLD_INSTANCE")\nGAME_STATE = "menu"\nCURRENT_PLAYER = nil\nWORLD_INSTANCE = nil\n\n-- Constants\nglobal("MAX_PLAYERS", "DEFAULT_WORLD_SIZE", "VERSION_STRING")\nMAX_PLAYERS = 6\nDEFAULT_WORLD_SIZE = "medium"\nVERSION_STRING = "1.0.0"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"common-errors",children:"Common Errors"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Undeclared Assignment:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- This will error\nmyVariable = "value"\n-- Error: assign to undeclared variable \'myVariable\'\n\n-- Correct approach\nglobal("myVariable")\nmyVariable = "value"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Undeclared Access:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- This will error if someVar was never declared\nlocal value = someVar\n-- Error: variable \'someVar\' is not declared\n\n-- Correct approach\nglobal("someVar")\nsomeVar = "initial"\nlocal value = someVar\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Typos in Variable Names:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"global(\"playerHealth\")\nplayerHealth = 100\n\n-- This will error due to typo\nplayerHeath = 50  -- Error: assign to undeclared variable 'playerHeath'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check Spelling"}),": Verify variable names are spelled correctly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Verify Declarations"}),": Ensure ",(0,s.jsx)(n.code,{children:"global()"})," was called for the variable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check Scope"}),": Confirm you're not trying to create globals from within functions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Locals"}),": Consider if the variable should be local instead of global"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"global-variable-management",children:"Global Variable Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimize Globals"}),": Use global variables sparingly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Descriptive Names"}),": Use clear, descriptive names for global variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Group Related Globals"}),": Declare related variables together"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document Purpose"}),": Comment the purpose of global variables"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"code-organization",children:"Code Organization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Game configuration globals\nglobal("GAME_MODE", "DIFFICULTY_LEVEL", "DEBUG_ENABLED")\nGAME_MODE = "survival"\nDIFFICULTY_LEVEL = "normal"\nDEBUG_ENABLED = false\n\n-- Player state globals\nglobal("CURRENT_PLAYER", "PLAYER_INVENTORY", "PLAYER_STATS")\nCURRENT_PLAYER = nil\nPLAYER_INVENTORY = {}\nPLAYER_STATS = {}\n\n-- World state globals  \nglobal("WORLD_DAY", "WORLD_SEASON", "WORLD_TEMPERATURE")\nWORLD_DAY = 1\nWORLD_SEASON = "autumn"\nWORLD_TEMPERATURE = 20\n'})}),"\n",(0,s.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimal Overhead"}),": Metatable checks have minimal performance impact"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development Only"}),": Consider disabling in production builds if needed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Declarations"}),": Declare multiple variables at once when possible"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-dst",children:"Integration with DST"}),"\n",(0,s.jsx)(n.h3,{id:"module-loading",children:"Module Loading"}),"\n",(0,s.jsx)(n.p,{children:"The strict module is typically loaded early in the initialization process:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Usually in main.lua or similar entry point\nrequire("strict")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"interaction-with-other-systems",children:"Interaction with Other Systems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compatible with all DST modules"}),": Works transparently with existing code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Debug-friendly"}),": Helps catch errors during development"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production-ready"}),": Can be left enabled in release builds"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- System configuration\nglobal("SIM_TICK_RATE", "NETWORK_TIMEOUT", "MAX_ENTITIES")\nSIM_TICK_RATE = 60\nNETWORK_TIMEOUT = 5.0\nMAX_ENTITIES = 10000\n'})}),"\n",(0,s.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Game state tracking\nglobal("CURRENT_SCREEN", "GAME_PAUSED", "SAVE_REQUIRED")\nCURRENT_SCREEN = "mainmenu"\nGAME_PAUSED = false\nSAVE_REQUIRED = false\n'})}),"\n",(0,s.jsx)(n.h3,{id:"development-tools",children:"Development Tools"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Debug helpers\nglobal("DEBUG_DRAW_ENABLED", "PROFILING_ENABLED", "LOG_LEVEL")\nDEBUG_DRAW_ENABLED = false\nPROFILING_ENABLED = false\nLOG_LEVEL = "info"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"disabling-strict-mode",children:"Disabling Strict Mode"}),"\n",(0,s.jsx)(n.p,{children:"If strict mode needs to be temporarily disabled:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"__STRICT = false  -- Disables strict checking\n-- ... code that needs relaxed checking ...\n__STRICT = true   -- Re-enable strict checking\n"})}),"\n",(0,s.jsx)(n.h3,{id:"working-with-dynamic-code",children:"Working with Dynamic Code"}),"\n",(0,s.jsx)(n.p,{children:"For code that generates variable names dynamically:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Declare variables before dynamic access\nglobal("DYNAMIC_VAR_1", "DYNAMIC_VAR_2", "DYNAMIC_VAR_3")\n\n-- Now dynamic access works\nfor i = 1, 3 do\n    _G["DYNAMIC_VAR_" .. i] = "value" .. i\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./class.md",children:"Class"}),": Object-oriented programming system that works with strict mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./debugtools.md",children:"Debug"}),": Debug utilities that respect strict mode declarations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./modutil.md",children:"ModUtil"}),": Mod utilities that handle global variable management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./main.md",children:"Main"}),": Main game initialization that loads strict mode"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);