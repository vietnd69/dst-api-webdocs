"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[56700],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},81656:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"game-scripts/core-systems/user-interface/graphics/emitters","title":"Emitters","description":"Particle emitter management system and geometric emitter creation functions","source":"@site/docs/game-scripts/core-systems/user-interface/graphics/emitters.md","sourceDirName":"game-scripts/core-systems/user-interface/graphics","slug":"/game-scripts/core-systems/user-interface/graphics/emitters","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/graphics/emitters","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"emitters","title":"Emitters","description":"Particle emitter management system and geometric emitter creation functions","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"CameraShake","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/graphics/camerashake"},"next":{"title":"Falloff Definitions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/graphics/falloffdefs"}}');var r=i(74848),s=i(28453);const a={id:"emitters",title:"Emitters",description:"Particle emitter management system and geometric emitter creation functions",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="Emitters",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"EmitterManagerClass",id:"emittermanagerclass",level:2},{value:"Constructor",id:"constructor",level:3},{value:"EmitterManager Methods",id:"emittermanager-methods",level:2},{value:"EmitterManager(inst, lifetime, updateFunc)",id:"add-emitter",level:3},{value:"EmitterManager(inst)",id:"remove-emitter",level:3},{value:"EmitterManager()",id:"post-update",level:3},{value:"EmitterManager(inst)",id:"hibernate",level:3},{value:"EmitterManager(inst)",id:"wake",level:3},{value:"Global Instance",id:"global-instance",level:2},{value:"EmitterManager",id:"emittermanager",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"UnitRand()",id:"unit-rand",level:3},{value:"Emitter Creation Functions",id:"emitter-creation-functions",level:2},{value:"CreateDiscEmitter(radius)",id:"create-disc-emitter",level:3},{value:"CreateCircleEmitter(radius)",id:"create-circle-emitter",level:3},{value:"CreateRingEmitter(radius)",id:"create-ring-emitter",level:3},{value:"CreateSphereEmitter(radius)",id:"create-sphere-emitter",level:3},{value:"CreateBoxEmitter(x_min, y_min, z_min, x_max, y_max, z_max)",id:"create-box-emitter",level:3},{value:"CreateAreaEmitter(polygon, centroid)",id:"create-area-emitter",level:3},{value:"Create2DTriEmitter(tris, scale)",id:"create-2d-tri-emitter",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Particle Effect Management",id:"particle-effect-management",level:3},{value:"Environmental Effects",id:"environmental-effects",level:3},{value:"Impact Effects",id:"impact-effects",level:3},{value:"Area-Based Spawning",id:"area-based-spawning",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Emitter Lifecycle",id:"emitter-lifecycle",level:3},{value:"Update Function Optimization",id:"update-function-optimization",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"emitters",children:"Emitters"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"emitters"})," module provides a comprehensive particle emitter management system for Don't Starve Together. It includes the ",(0,r.jsx)(n.code,{children:"EmitterManager"})," for managing emitter lifecycles and various geometric emitter creation functions for generating particle positions in different shapes and patterns."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Add an emitter with limited lifetime\nEmitterManager:AddEmitter(emitterInst, 5.0, function()\n    -- Update function called each frame\n    emitterInst:SpawnParticle()\nend)\n\n-- Create a circular emitter pattern\nlocal circleEmitter = CreateCircleEmitter(10)\nlocal x, y = circleEmitter() -- Returns random position within circle\n"})}),"\n",(0,r.jsx)(n.h2,{id:"emittermanagerclass",children:"EmitterManagerClass"}),"\n",(0,r.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates a new emitter manager instance that tracks awake and sleeping emitters with different lifetime categories."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Internal Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"{\n    awakeEmitters = {\n        limitedLifetimes = {},    -- Emitters with finite duration\n        infiniteLifetimes = {}    -- Emitters with infinite duration\n    },\n    sleepingEmitters = {\n        limitedLifetimes = {},    -- Hibernated limited emitters\n        infiniteLifetimes = {}    -- Hibernated infinite emitters\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"emittermanager-methods",children:"EmitterManager Methods"}),"\n",(0,r.jsxs)(n.h3,{id:"add-emitter",children:["EmitterManager",":AddEmitter","(inst, lifetime, updateFunc)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nAdds an emitter instance to the manager for automatic updating and lifetime management."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (Entity): The emitter entity instance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"lifetime"})," (number, optional): Duration in seconds. If nil, emitter has infinite lifetime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"updateFunc"})," (function): Function called each frame to update the emitter"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Limited lifetime emitter (5 seconds)\nEmitterManager:AddEmitter(fireEmitter, 5.0, function()\n    fireEmitter:EmitParticle("fire")\nend)\n\n-- Infinite lifetime emitter\nEmitterManager:AddEmitter(ambientEmitter, nil, function()\n    ambientEmitter:EmitParticle("dust")\nend)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Current: Automatically listens for "onremove" event to clean up'}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"remove-emitter",children:["EmitterManager",":RemoveEmitter","(inst)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRemoves an emitter from all tracking tables in the manager."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (Entity): The emitter entity instance to remove"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Manually remove an emitter\nEmitterManager:RemoveEmitter(myEmitter)\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"post-update",children:["EmitterManager",":PostUpdate","()"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nUpdates all managed emitters. Called automatically by the game loop. Handles lifetime countdown and emitter cleanup."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Skips update if server is paused or error widget is active"}),"\n",(0,r.jsx)(n.li,{children:"Updates awake emitters with limited lifetimes"}),"\n",(0,r.jsx)(n.li,{children:"Updates awake emitters with infinite lifetimes"}),"\n",(0,r.jsx)(n.li,{children:"Updates sleeping emitters (lifetime only, no update function)"}),"\n",(0,r.jsx)(n.li,{children:"Removes emitters when lifetime reaches zero"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Called automatically by game engine\n-- EmitterManager:PostUpdate() -- Do not call manually\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"hibernate",children:["EmitterManager",":Hibernate","(inst)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nMoves an emitter from awake state to sleeping state when entity goes to sleep."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (Entity): The emitter entity instance to hibernate"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Called automatically when entity sleeps\nEmitterManager:Hibernate(dustEmitter)\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"wake",children:["EmitterManager",":Wake","(inst)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nMoves an emitter from sleeping state to awake state when entity wakes up."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (Entity): The emitter entity instance to wake"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Called automatically when entity wakes\nEmitterManager:Wake(dustEmitter)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"global-instance",children:"Global Instance"}),"\n",(0,r.jsx)(n.h3,{id:"emittermanager",children:"EmitterManager"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGlobal singleton instance of ",(0,r.jsx)(n.code,{children:"EmitterManagerClass"})," used throughout the game for managing all emitters."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Access the global emitter manager\nEmitterManager:AddEmitter(myEmitter, 3.0, updateFunction)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,r.jsx)(n.h3,{id:"unit-rand",children:"UnitRand()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGenerates a random number between -1.0 and 1.0."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(number): Random value in range [-1.0, 1.0]"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local randomValue = UnitRand() -- Returns value between -1 and 1\n"})}),"\n",(0,r.jsx)(n.h2,{id:"emitter-creation-functions",children:"Emitter Creation Functions"}),"\n",(0,r.jsx)(n.h3,{id:"create-disc-emitter",children:"CreateDiscEmitter(radius)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates an emitter function that generates random positions within a disc (filled circle) area."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"radius"})," (number): Radius of the disc"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): Emitter function that returns (x, y) coordinates"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local discEmitter = CreateDiscEmitter(5.0)\nlocal x, y = discEmitter() -- Random position within disc of radius 5\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-circle-emitter",children:"CreateCircleEmitter(radius)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates an emitter function that generates uniformly distributed random positions within a circle area using proper circular distribution."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"radius"})," (number): Radius of the circle"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): Emitter function that returns (x, y) coordinates"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local circleEmitter = CreateCircleEmitter(8.0)\nlocal x, y = circleEmitter() -- Uniformly distributed position in circle\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation Notes:"}),"\nUses square root distribution for uniform area coverage."]}),"\n",(0,r.jsx)(n.h3,{id:"create-ring-emitter",children:"CreateRingEmitter(radius)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates an emitter function that generates random positions on the circumference of a circle (ring/perimeter only)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"radius"})," (number): Radius of the ring"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): Emitter function that returns (x, y) coordinates on circle edge"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local ringEmitter = CreateRingEmitter(10.0)\nlocal x, y = ringEmitter() -- Position exactly on circle circumference\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-sphere-emitter",children:"CreateSphereEmitter(radius)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates an emitter function that generates random positions on the surface of a sphere in 3D space."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"radius"})," (number): Radius of the sphere"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): Emitter function that returns (x, y, z) coordinates on sphere surface"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local sphereEmitter = CreateSphereEmitter(6.0)\nlocal x, y, z = sphereEmitter() -- Position on sphere surface\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation Notes:"}),"\nUses uniform spherical distribution algorithm for even surface coverage."]}),"\n",(0,r.jsx)(n.h3,{id:"create-box-emitter",children:"CreateBoxEmitter(x_min, y_min, z_min, x_max, y_max, z_max)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates an emitter function that generates random positions within a 3D box volume."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"x_min"})," (number): Minimum X coordinate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"y_min"})," (number): Minimum Y coordinate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"z_min"})," (number): Minimum Z coordinate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"x_max"})," (number): Maximum X coordinate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"y_max"})," (number): Maximum Y coordinate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"z_max"})," (number): Maximum Z coordinate"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): Emitter function that returns (x, y, z) coordinates within box"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local boxEmitter = CreateBoxEmitter(-5, -5, -5, 5, 5, 5)\nlocal x, y, z = boxEmitter() -- Random position in 10x10x10 cube\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation Notes:"}),"\nCurrent implementation uses UnitRand() which behaves more like center/halfwidth than true min/max."]}),"\n",(0,r.jsx)(n.h3,{id:"create-area-emitter",children:"CreateAreaEmitter(polygon, centroid)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates an emitter function that generates random positions within a polygonal area using triangle decomposition."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"polygon"})," (table): Array of vertex coordinates as ",(0,r.jsx)(n.code,{children:"{x, y}"})," pairs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"centroid"})," (table): Center point as ",(0,r.jsx)(n.code,{children:"{x, y}"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): Emitter function that returns (x, y) coordinates within polygon area"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local polygon = {{0, 0}, {10, 0}, {5, 10}} -- Triangle\nlocal centroid = {5, 3.33}\nlocal areaEmitter = CreateAreaEmitter(polygon, centroid)\nlocal x, y = areaEmitter() -- Position within triangle\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation Notes:"}),"\nUses triangulation from centroid and uniform sampling within triangles."]}),"\n",(0,r.jsx)(n.h3,{id:"create-2d-tri-emitter",children:"Create2DTriEmitter(tris, scale)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates an emitter function for 2D triangle mesh emission with camera-relative positioning."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tris"})," (table): Array of triangles, each with vertices containing x, y coordinates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"scale"})," (number): Scale factor for the emission area"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): Emitter function that takes (camera_right, camera_up) and returns 3D coordinates"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local triangles = {\n    {{x = 0, y = 0}, {x = 1, y = 0}, {x = 0.5, y = 1}}\n}\nlocal triEmitter = Create2DTriEmitter(triangles, 2.0)\n\n-- Usage with camera vectors\nlocal x, y, z = triEmitter(cameraRight, cameraUp)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation Notes:"}),"\nUses barycentric coordinates for uniform triangle sampling and projects to 3D space using camera vectors."]}),"\n",(0,r.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"particle-effect-management",children:"Particle Effect Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Create a fire effect with limited duration\nlocal fireEmitter = SpawnPrefab("fire_emitter")\nEmitterManager:AddEmitter(fireEmitter, 10.0, function()\n    fireEmitter:SpawnFireParticle()\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"environmental-effects",children:"Environmental Effects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Ambient dust particles in an area\nlocal dustArea = CreateCircleEmitter(15.0)\nEmitterManager:AddEmitter(dustEmitter, nil, function()\n    local x, y = dustArea()\n    dustEmitter:EmitParticleAt(x, y)\nend)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"impact-effects",children:"Impact Effects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Explosion debris in all directions\nlocal explosionEmitter = CreateSphereEmitter(8.0)\nfor i = 1, 20 do\n    local x, y, z = explosionEmitter()\n    SpawnDebris(x, y, z)\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"area-based-spawning",children:"Area-Based Spawning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Spawn items within irregular area\nlocal spawnArea = CreateAreaEmitter(areaPolygon, areaCentroid)\nfor i = 1, 5 do\n    local x, y = spawnArea()\n    SpawnPrefab("berry"):SetPosition(x, 0, y)\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"emitter-lifecycle",children:"Emitter Lifecycle"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use limited lifetime emitters when possible to prevent memory leaks"}),"\n",(0,r.jsx)(n.li,{children:"Infinite lifetime emitters continue until manually removed or entity is destroyed"}),"\n",(0,r.jsx)(n.li,{children:"Sleeping emitters have reduced overhead (no update function calls)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"update-function-optimization",children:"Update Function Optimization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Keep emitter update functions lightweight"}),"\n",(0,r.jsx)(n.li,{children:"Avoid heavy calculations in frequently called update functions"}),"\n",(0,r.jsx)(n.li,{children:"Consider using timers for less frequent emission patterns"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Emitters are automatically cleaned up when their entities are removed"}),"\n",(0,r.jsxs)(n.li,{children:["Manual cleanup with ",(0,r.jsx)(n.code,{children:"RemoveEmitter()"})," when emitters are no longer needed"]}),"\n",(0,r.jsx)(n.li,{children:"Manager handles hibernation/wake cycles automatically"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./entityscript.md",children:"EntityScript"}),": Entity lifecycle management for emitters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./scheduler.md",children:"Scheduler"}),": Alternative timing system for particle effects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./class.md",children:"Class"}),": Base class system used by EmitterManagerClass"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./mainfunctions.md",children:"Main Functions"}),": Game loop where PostUpdate is called"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);