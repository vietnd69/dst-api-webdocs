"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[66853],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(96540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},53125:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/utilities/componentutil","title":"Component Utilities","description":"Utility functions and helper systems for common gameplay mechanics and entity management in DST","source":"@site/docs/game-scripts/core-systems/fundamentals/utilities/componentutil.md","sourceDirName":"game-scripts/core-systems/fundamentals/utilities","slug":"/game-scripts/core-systems/fundamentals/utilities/componentutil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/componentutil","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"componentutil","title":"Component Utilities","description":"Utility functions and helper systems for common gameplay mechanics and entity management in DST","sidebar_position":8,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Fundamentals Utilities Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/"},"next":{"title":"File Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/fileutil"}}');var t=i(74848),r=i(28453);const l={id:"componentutil",title:"Component Utilities",description:"Utility functions and helper systems for common gameplay mechanics and entity management in DST",sidebar_position:8,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},c="Component Utilities",d={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Entity State Functions",id:"entity-state-functions",level:2},{value:"IsEntityDead(inst, require_health)",id:"isentitydead",level:3},{value:"IsEntityDeadOrGhost(inst, require_health)",id:"isentitydeadorghost",level:3},{value:"GetStackSize(inst)",id:"getstacksize",level:3},{value:"World Manipulation",id:"world-manipulation",level:2},{value:"HandleDugGround(dug_ground, x, y, z)",id:"handledugground",level:3},{value:"FindVirtualOceanEntity(x, y, z, r)",id:"findvirtualoceanentity",level:3},{value:"Combat Target Classification",id:"combat-target-classification",level:2},{value:"NON_LIFEFORM_TARGET_TAGS",id:"non-lifeform-target-tags",level:3},{value:"SOULLESS_TARGET_TAGS",id:"soulless-target-tags",level:3},{value:"Tile Change Handling",id:"tile-change-handling",level:2},{value:"TempTile_HandleTileChange(x, y, z, tile)",id:"temptile-handletilechange",level:3},{value:"TempTile_HandleTileChange_Ocean(x, y, z)",id:"temptile-handletilechange-ocean",level:3},{value:"TempTile_HandleTileChange_Void(x, y, z)",id:"temptile-handletilechange-void",level:3},{value:"Bridge Construction System",id:"bridge-construction-system",level:2},{value:"Bridge_DeployCheck_Helper(inst, pt, options)",id:"bridge-deploycheck-helper",level:3},{value:"Charlie Residue System",id:"charlie-residue-system",level:2},{value:"MakeRoseTarget_CreateFuel(inst)",id:"makerosetarget-createfuel",level:3},{value:"MakeRoseTarget_CreateFuel_IncreasedHorror(inst)",id:"makerosetarget-createfuel-increasedhorror",level:3},{value:"DecayCharlieResidueAndGoOnCooldownIfItExists(inst)",id:"decaycharlieresidue-cooldown",level:3},{value:"DecayCharlieResidueIfItExists(inst)",id:"decaycharlieresidue",level:3},{value:"Close Inspector Utilities",id:"close-inspector-utilities",level:2},{value:"CLOSEINSPECTORUTIL.IsValidTarget(doer, target)",id:"closeinspector-isvalidtarget",level:3},{value:"CLOSEINSPECTORUTIL.IsValidPos(doer, pos)",id:"closeinspector-isvalidpos",level:3},{value:"CLOSEINSPECTORUTIL.CanCloseInspect(doer, targetorpos)",id:"closeinspector-cancloseinspect",level:3},{value:"Inventory Management",id:"inventory-management",level:2},{value:"SetDesiredMaxTakeCountFunction(prefab, callback)",id:"setdesiredmaxtakecount",level:3},{value:"GetDesiredMaxTakeCountFunction(prefab)",id:"getdesiredmaxtakecount",level:3},{value:"HasMeatInInventoryFor(inst)",id:"hasmeatininventory",level:3},{value:"Food System Utilities",id:"food-system-utilities",level:2},{value:"PICKABLE_FOOD_PRODUCTS",id:"pickable-food-products",level:3},{value:"IsFoodSourcePickable(inst)",id:"isfoodsourcepickable",level:3},{value:"Woby Courier System",id:"woby-courier-system",level:2},{value:"GetWobyCourierChestPosition(inst)",id:"getwobycourrierchestposition",level:3},{value:"Placement System",id:"placement-system",level:2},{value:"UpdateAxisAlignmentValues(intervals)",id:"updateaxisalignmentvalues",level:3},{value:"CycleAxisAlignmentValues()",id:"cycleaxisalignmentvalues",level:3},{value:"Arena Management",id:"arena-management",level:2},{value:"WAGPUNK_ARENA_COLLISION_DATA",id:"wagpunk-arena-collision-data",level:3},{value:"Cleanup Utilities",id:"cleanup-utilities",level:2},{value:"ClearSpotForRequiredPrefabAtXZ(x, z, r)",id:"clearspotforrequiredprefab",level:3},{value:"Constants",id:"constants",level:2},{value:"WOBYCOURIER_NO_CHEST_COORD",id:"wobycourier_no_chest_coord",level:3},{value:"MAX_PHYSICS_RADIUS",id:"max_physics_radius",level:3},{value:"TILE_SCALE",id:"tile_scale",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Entity Searching",id:"entity-searching",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Bridge Construction Optimization",id:"bridge-construction-optimization",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"\u2705 Recommended Usage",id:"-recommended-usage",level:3},{value:"\u274c Usage Warnings",id:"-usage-warnings",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Entity Validation",id:"entity-validation",level:3},{value:"Component Existence Checks",id:"component-existence-checks",level:3},{value:"World State Validation",id:"world-state-validation",level:3},{value:"Related Systems",id:"related-systems",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"component-utilities",children:"Component Utilities"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Component Utilities"})," module (",(0,t.jsx)(n.code,{children:"componentutil.lua"}),") provides a comprehensive collection of helper functions that support various gameplay mechanics and component interactions in Don't Starve Together. These utilities serve as a bridge between low-level engine functionality and high-level gameplay systems, offering standardized solutions for common operations that span across multiple components."]}),"\n",(0,t.jsx)(n.p,{children:"Key features include entity state management, world manipulation, combat targeting, bridge construction, inventory management, and specialized systems for character abilities like Winona's rose glasses and Walter's Woby courier."}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Check if an entity is dead\nif IsEntityDead(target, true) then\n    -- Handle dead entity logic\n    return\nend\n\n-- Get stack size safely\nlocal stack_size = GetStackSize(item)\n\n-- Check for meat in inventory (rabbit king system)\nif HasMeatInInventoryFor(player) then\n    -- Player has meat items\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"entity-state-functions",children:"Entity State Functions"}),"\n",(0,t.jsx)(n.h3,{id:"isentitydead",children:"IsEntityDead(inst, require_health)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if an entity is considered dead based on its health component status."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): The entity to check"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"require_health"})," (boolean): If ",(0,t.jsx)(n.code,{children:"true"}),", entities without health component are considered dead"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): Whether the entity is dead"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if target is dead, requiring health component\nif IsEntityDead(target, true) then\n    print("Target is dead or has no health")\nend\n\n-- Check if target is dead, allowing entities without health\nif IsEntityDead(target, false) then\n    print("Target is dead")\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"isentitydeadorghost",children:"IsEntityDeadOrGhost(inst, require_health)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),'\nExtended death check that also considers ghost players as "dead" for gameplay purposes.']}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): The entity to check"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"require_health"})," (boolean): If ",(0,t.jsx)(n.code,{children:"true"}),", entities without health component are considered dead"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): Whether the entity is dead or a ghost"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if IsEntityDeadOrGhost(player, true) then\n    -- Handle dead or ghost player\n    return\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getstacksize",children:"GetStackSize(inst)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the stack size of an item, defaulting to 1 if the item is not stackable."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): The entity to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Stack size (1 if not stackable)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local stack_size = GetStackSize(item)\nprint("Item stack size:", stack_size)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"world-manipulation",children:"World Manipulation"}),"\n",(0,t.jsx)(n.h3,{id:"handledugground",children:"HandleDugGround(dug_ground, x, y, z)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nHandles the creation of turf items when ground is dug up, including physics and wetness inheritance."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dug_ground"})," (WORLD_TILES): The ground tile type that was dug"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x, y, z"})," (number): World position coordinates"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Handle ground being dug at position\nHandleDugGround(WORLD_TILES.GRASS, x, y, z)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates appropriate turf item based on ground type"}),"\n",(0,t.jsx)(n.li,{children:"Inherits world wetness at the position"}),"\n",(0,t.jsx)(n.li,{children:"Adds realistic physics for natural drop behavior"}),"\n",(0,t.jsx)(n.li,{children:"Falls back to sinkhole effect if no turf available"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"findvirtualoceanentity",children:"FindVirtualOceanEntity(x, y, z, r)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nLocates virtual ocean entities within a specified radius for ocean interaction systems."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x, y, z"})," (number): Search center coordinates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"r"})," (number, optional): Search radius (defaults to MAX_PHYSICS_RADIUS)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["(Entity or nil): Virtual ocean entity if found, ",(0,t.jsx)(n.code,{children:"nil"})," otherwise"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local ocean_entity = FindVirtualOceanEntity(x, y, z, 10)\nif ocean_entity then\n    -- Interact with virtual ocean\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"combat-target-classification",children:"Combat Target Classification"}),"\n",(0,t.jsx)(n.h3,{id:"non-lifeform-target-tags",children:"NON_LIFEFORM_TARGET_TAGS"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nTag collection defining non-living targets that can be attacked but aren't considered alive."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Tags:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"structure"'}),": Buildings and structures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"wall"'}),": Wall structures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"balloon"'}),": Balloon entities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"groundspike"'}),": Ground spike traps"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"smashable"'}),": Smashable objects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"veggie"'}),": Plant-like entities (lureplants, etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"soulless-target-tags",children:"SOULLESS_TARGET_TAGS"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nTag collection for entities without souls, immune to soul-draining effects. Includes shadows, chess pieces, and non-lifeforms."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Additional Tags:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"soulless"'}),": Explicitly soulless entities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"chess"'}),": Chess piece creatures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"shadow"'}),": Shadow creatures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"shadowcreature"'}),": Shadow creature variants"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"shadowminion"'}),": Shadow minions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"shadowchesspiece"'}),": Shadow chess pieces"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local function CanDrainSoul(target)\n    return not target:HasOneOfTags(SOULLESS_TARGET_TAGS)\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"tile-change-handling",children:"Tile Change Handling"}),"\n",(0,t.jsx)(n.h3,{id:"temptile-handletilechange",children:"TempTile_HandleTileChange(x, y, z, tile)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nMain handler for temporary tile changes, routing to appropriate ocean or void handlers."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x, y, z"})," (number): Tile coordinates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tile"})," (WORLD_TILES): New tile type"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Handle tile change at position\nTempTile_HandleTileChange(x, y, z, WORLD_TILES.OCEAN_SHALLOW)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"temptile-handletilechange-ocean",children:"TempTile_HandleTileChange_Ocean(x, y, z)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nHandles entity behavior when tiles change to ocean, including drowning and item handling."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x, y, z"})," (number): Tile coordinates"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Triggers "onsink" event for entities with drownable component'}),"\n",(0,t.jsx)(n.li,{children:"Finds shore points for teleportation"}),"\n",(0,t.jsx)(n.li,{children:"Handles inventory items and destroys invalid entities"}),"\n",(0,t.jsx)(n.li,{children:"Accounts for tile overhang calculations"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"temptile-handletilechange-void",children:"TempTile_HandleTileChange_Void(x, y, z)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nHandles entities falling into void tiles, including teleportation and destruction logic."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x, y, z"})," (number): Tile coordinates"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Triggers "onfallinvoid" event'}),"\n",(0,t.jsx)(n.li,{children:"Supports entities with abyss_fall state"}),"\n",(0,t.jsx)(n.li,{children:"Teleports entities with drownable component"}),"\n",(0,t.jsx)(n.li,{children:"Destroys entities that can't handle void"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"bridge-construction-system",children:"Bridge Construction System"}),"\n",(0,t.jsx)(n.h3,{id:"bridge-deploycheck-helper",children:"Bridge_DeployCheck_Helper(inst, pt, options)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nComprehensive system for validating and calculating bridge placement with geometric optimization."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): The deploying entity/item"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pt"})," (Vector3): Target deployment point"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"})," (table, optional): Configuration options"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Options Table:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"maxlength"})," (number): Maximum bridge length in tiles"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isvalidtileforbridgeatpointfn"})," (function): Custom tile validation function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"candeploybridgeatpointfn"})," (function): Custom deployment validation function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"requiredworldcomponent"})," (string): Required world component name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deployskipfirstlandtile"})," (boolean): Skip first land tile in calculations"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"success"})," (boolean): Whether bridge can be deployed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"spots"})," (array): Calculated placement positions with direction data"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local options = {\n    maxlength = 8,\n    isvalidtileforbridgeatpointfn = MyCustomValidationFunction,\n    candeploybridgeatpointfn = MyCustomDeployFunction\n}\n\nlocal success, spots = Bridge_DeployCheck_Helper(inst, target_point, options)\nif success then\n    for i, spot in ipairs(spots) do\n        -- Deploy bridge segment at spot.x, spot.y, spot.z\n        -- Use spots.direction for bridge orientation\n    end\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Automatic direction detection based on surrounding terrain"}),"\n",(0,t.jsx)(n.li,{children:"Support for different bridge types through callback functions"}),"\n",(0,t.jsx)(n.li,{children:"Geometric optimization for natural bridge placement"}),"\n",(0,t.jsx)(n.li,{children:"Validation of start and end points"}),"\n",(0,t.jsx)(n.li,{children:"Handles overhang calculations and corner cases"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"charlie-residue-system",children:"Charlie Residue System"}),"\n",(0,t.jsx)(n.h3,{id:"makerosetarget-createfuel",children:"MakeRoseTarget_CreateFuel(inst)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates entities that interact with Winona's rose glasses to generate nightmare fuel."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): Entity to make into a rose target"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Make entity create fuel when activated by rose glasses\nMakeRoseTarget_CreateFuel(inst)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"makerosetarget-createfuel-increasedhorror",children:"MakeRoseTarget_CreateFuel_IncreasedHorror(inst)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates rose targets with increased chance to generate horror fuel (upgraded version)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): Entity to make into an enhanced rose target"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"decaycharlieresidue-cooldown",children:"DecayCharlieResidueAndGoOnCooldownIfItExists(inst)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nForces decay of Charlie residue and puts rose glasses on cooldown if the component exists."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): Entity with potential roseinspectableuser component"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Force residue decay and cooldown\nDecayCharlieResidueAndGoOnCooldownIfItExists(player)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"decaycharlieresidue",children:"DecayCharlieResidueIfItExists(inst)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nForces decay of Charlie residue without affecting cooldown state."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): Entity with potential roseinspectableuser component"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"close-inspector-utilities",children:"Close Inspector Utilities"}),"\n",(0,t.jsx)(n.h3,{id:"closeinspector-isvalidtarget",children:"CLOSEINSPECTORUTIL.IsValidTarget(doer, target)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nValidates if a target entity can be closely inspected with rose glasses."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"doer"})," (Entity): The player using rose glasses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"target"})," (Entity): The target entity to inspect"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): Whether target is valid for close inspection"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Exclusions:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Entities with mass (Physics",":GetMass","() ~= 0)"]}),"\n",(0,t.jsx)(n.li,{children:"Entities with locomotor component"}),"\n",(0,t.jsx)(n.li,{children:"Inventory items"}),"\n",(0,t.jsx)(n.li,{children:"Character entities"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"closeinspector-isvalidpos",children:"CLOSEINSPECTORUTIL.IsValidPos(doer, pos)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nValidates if a position can be used for close inspection based on rose point configurations."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"doer"})," (Entity): The player using rose glasses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pos"})," (Vector3): The position to inspect"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): Whether position is valid for close inspection"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"closeinspector-cancloseinspect",children:"CLOSEINSPECTORUTIL.CanCloseInspect(doer, targetorpos)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nComprehensive check for close inspection capability, validating equipment and conditions."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"doer"})," (Entity): The player attempting close inspection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"targetorpos"})," (Entity or Vector3): Target entity or position"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): Whether close inspection is possible"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if CLOSEINSPECTORUTIL.CanCloseInspect(player, target) then\n    -- Perform close inspection\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"inventory-management",children:"Inventory Management"}),"\n",(0,t.jsx)(n.h3,{id:"setdesiredmaxtakecount",children:"SetDesiredMaxTakeCountFunction(prefab, callback)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSets custom pickup logic for specific item types to control quantities taken from containers."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefab"})," (string): Prefab name to set function for"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callback"})," (function): Function that returns desired pickup count"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Set custom pickup logic for specific item\nSetDesiredMaxTakeCountFunction("custom_item", function(item, container, doer)\n    return math.min(10, item.components.stackable:StackSize())\nend)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"getdesiredmaxtakecount",children:"GetDesiredMaxTakeCountFunction(prefab)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the custom pickup function for a specific prefab."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefab"})," (string): Prefab name to get function for"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(function or nil): Custom pickup function if set"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"hasmeatininventory",children:"HasMeatInInventoryFor(inst)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if player has meat items in inventory, used by rabbit king system."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): Player entity to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): Whether player has meat items"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if HasMeatInInventoryFor(player) then\n    -- Player has meat, rabbit king will react\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Excludes small creatures (like rabbits)"}),"\n",(0,t.jsx)(n.li,{children:"Respects equipment that hides meat items"}),"\n",(0,t.jsx)(n.li,{children:"Only counts FOODTYPE.MEAT items"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"food-system-utilities",children:"Food System Utilities"}),"\n",(0,t.jsx)(n.h3,{id:"pickable-food-products",children:"PICKABLE_FOOD_PRODUCTS"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nConstant table defining which pickable items are considered food sources."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Included Products:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ancientfruit_nightvision"}),": Ancient fruit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"berries"}),": Regular berries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"berries_juicy"}),": Juicy berries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"blue_cap"}),", ",(0,t.jsx)(n.code,{children:"green_cap"}),", ",(0,t.jsx)(n.code,{children:"red_cap"}),": Mushrooms"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cactus_meat"}),": Cactus flesh"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"carrot"}),": Carrots"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cave_banana"}),": Cave bananas"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cutlichen"}),": Cut lichen"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"wormlight_lesser"}),": Lesser wormlight"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"isfoodsourcepickable",children:"IsFoodSourcePickable(inst)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDetermines if an entity can be picked for food, supporting AI behavior and automation systems."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): Entity to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): Whether entity is a pickable food source"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if IsFoodSourcePickable(plant) then\n    -- This plant provides food when picked\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"woby-courier-system",children:"Woby Courier System"}),"\n",(0,t.jsx)(n.h3,{id:"getwobycourrierchestposition",children:"GetWobyCourierChestPosition(inst)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the chest position for Walter's Woby courier system."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," (Entity): Walter entity with woby commands"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x, z"})," (number, number): Chest coordinates if valid"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nil, nil"}),": If no valid chest position"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local chest_x, chest_z = GetWobyCourierChestPosition(walter)\nif chest_x then\n    -- Valid chest position found\n    local chest_pos = Vector3(chest_x, 0, chest_z)\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"placement-system",children:"Placement System"}),"\n",(0,t.jsx)(n.h3,{id:"updateaxisalignmentvalues",children:"UpdateAxisAlignmentValues(intervals)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nUpdates axis-aligned placement settings for building alignment, supporting mod compatibility."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"intervals"})," (number): New alignment interval value"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Set alignment to half-tile precision\nUpdateAxisAlignmentValues(0.5)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cycleaxisalignmentvalues",children:"CycleAxisAlignmentValues()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCycles through predefined alignment values for building placement grid."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Alignment Values:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Half wall (2): Largest grid"}),"\n",(0,t.jsx)(n.li,{children:"Wall (1): Default grid"}),"\n",(0,t.jsx)(n.li,{children:"Half tile (0.5): Fine grid"}),"\n",(0,t.jsx)(n.li,{children:"Tile (0.25): Finest grid"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Cycle to next alignment setting\nCycleAxisAlignmentValues()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"arena-management",children:"Arena Management"}),"\n",(0,t.jsx)(n.h3,{id:"wagpunk-arena-collision-data",children:"WAGPUNK_ARENA_COLLISION_DATA"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nPredefined collision barrier positions and configurations for the Wagpunk Arena."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Data Format:"}),"\nEach entry contains: ",(0,t.jsx)(n.code,{children:"{x, z, rotation, sfxlooper}"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x, z"})," (number): Position coordinates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rotation"})," (number): Barrier rotation angle in degrees"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sfxlooper"})," (boolean): Whether barrier should have sound effects"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Access barrier data for arena setup\nfor _, barrier_data in ipairs(WAGPUNK_ARENA_COLLISION_DATA) do\n    local x, z, rotation, has_sfx = unpack(barrier_data)\n    -- Create barrier at position with settings\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"cleanup-utilities",children:"Cleanup Utilities"}),"\n",(0,t.jsx)(n.h3,{id:"clearspotforrequiredprefab",children:"ClearSpotForRequiredPrefabAtXZ(x, z, r)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRemoves entities from a specified area while respecting protected entity tags."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x, z"})," (number): Center coordinates for clearing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"r"})," (number): Radius to clear around the center"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Protected Tags:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"INLIMBO"'}),": Entities not in the world"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"NOCLICK"'}),": Non-interactive entities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"FX"'}),": Visual effects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"irreplaceable"'}),": Important entities that shouldn't be destroyed"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Clear area for structure placement\nClearSpotForRequiredPrefabAtXZ(x, z, 2.0)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Uses physics radius for accurate collision detection"}),"\n",(0,t.jsx)(n.li,{children:"Safely destroys entities within specified area"}),"\n",(0,t.jsx)(n.li,{children:"Prevents destruction of critical game entities"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,t.jsx)(n.h3,{id:"wobycourier_no_chest_coord",children:"WOBYCOURIER_NO_CHEST_COORD"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Value:"})," Coordinate value indicating no chest is set"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Used by Woby courier system to indicate invalid chest coordinates."]}),"\n",(0,t.jsx)(n.h3,{id:"max_physics_radius",children:"MAX_PHYSICS_RADIUS"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Maximum physics radius for entity searches and collision detection."]}),"\n",(0,t.jsx)(n.h3,{id:"tile_scale",children:"TILE_SCALE"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Scale value for tile calculations in bridge construction and world manipulation."]}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"entity-searching",children:"Entity Searching"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Functions use optimized entity finding with appropriate tag filters"}),"\n",(0,t.jsx)(n.li,{children:"Radius-based searches include overhang calculations for accuracy"}),"\n",(0,t.jsx)(n.li,{children:"Cached results where possible to avoid repeated calculations"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Helper functions avoid creating unnecessary temporary objects"}),"\n",(0,t.jsx)(n.li,{children:"Tag collections are defined as constants to reduce allocation"}),"\n",(0,t.jsx)(n.li,{children:"Entity validation prevents processing of invalid entities"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"bridge-construction-optimization",children:"Bridge Construction Optimization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Complex geometric calculations broken into specialized helper functions"}),"\n",(0,t.jsx)(n.li,{children:"Ray-tracing algorithm minimizes redundant tile checks"}),"\n",(0,t.jsx)(n.li,{children:"Direction detection uses efficient mathematical comparisons"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"-recommended-usage",children:"\u2705 Recommended Usage"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use entity state functions for consistent death checking across systems"}),"\n",(0,t.jsx)(n.li,{children:"Leverage bridge construction helpers for custom bridge implementations"}),"\n",(0,t.jsx)(n.li,{children:"Utilize food classification systems for nutrition and AI mechanics"}),"\n",(0,t.jsx)(n.li,{children:"Check entity validity before performing operations"}),"\n",(0,t.jsx)(n.li,{children:"Use appropriate tag collections for combat targeting logic"}),"\n",(0,t.jsx)(n.li,{children:"Validate world components before accessing advanced features"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-usage-warnings",children:"\u274c Usage Warnings"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Don't assume entities have specific components without checking"}),"\n",(0,t.jsxs)(n.li,{children:["Don't ignore the ",(0,t.jsx)(n.code,{children:"require_health"})," parameter in death checking functions"]}),"\n",(0,t.jsx)(n.li,{children:"Don't modify global tag collections directly"}),"\n",(0,t.jsx)(n.li,{children:"Don't skip validation when using bridge construction helpers"}),"\n",(0,t.jsx)(n.li,{children:"Don't assume inventory items are always valid"}),"\n",(0,t.jsx)(n.li,{children:"Don't call tile change handlers directly without proper context validation"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"entity-validation",children:"Entity Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Always check entity validity before operations\nif ent:IsValid() then\n    -- Perform operations safely\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"component-existence-checks",children:"Component Existence Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Verify component exists before accessing\nlocal component = inst.components.targetcomponent\nif component ~= nil then\n    component:DoSomething()\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"world-state-validation",children:"World State Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Validate world components for advanced features\nif TheWorld.components.requiredcomponent then\n    -- Use advanced functionality safely\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./actions.md",children:"Actions"})}),": Action system that utilizes these utility functions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./componentactions.md",children:"ComponentActions"})}),": Component-specific action implementations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./entityscript.md",children:"EntityScript"})}),": Core entity functionality and state management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./bufferedaction.md",children:"BufferedAction"})}),": Action queuing system integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./networking.md",children:"Networking"})}),": Client-server communication for utility functions"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"These utility functions form the foundation for many gameplay mechanics in Don't Starve Together. They provide consistent, reusable solutions for common operations across the game's component systems."})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);