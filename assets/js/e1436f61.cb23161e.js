"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7969],{21184:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"game-scripts/core-systems/data-management/saves/shardsaveindex","title":"Shard Save Index","description":"Multi-shard save slot management system for cluster save organization and data retrieval","source":"@site/docs/game-scripts/core-systems/data-management/saves/shardsaveindex.md","sourceDirName":"game-scripts/core-systems/data-management/saves","slug":"/game-scripts/core-systems/data-management/saves/shardsaveindex","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/shardsaveindex","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"shardsaveindex","title":"Shard Save Index","description":"Multi-shard save slot management system for cluster save organization and data retrieval","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Scrapbook Partitions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/scrapbook-partitions"},"next":{"title":"Data Management Utilities Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/utilities/"}}');var a=s(74848),t=s(28453);const l={id:"shardsaveindex",title:"Shard Save Index",description:"Multi-shard save slot management system for cluster save organization and data retrieval",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="Shard Save Index",i={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Class Structure",id:"class-structure",level:2},{value:"ShardSaveIndex Class",id:"shardsaveindex-class",level:3},{value:"Initialization and Basic Operations",id:"initialization-and-basic-operations",level:2},{value:"ShardSaveIndex()",id:"constructor",level:3},{value:"ShardSaveIndex()",id:"get-shard-save-index-name",level:3},{value:"Shard Index Management",id:"shard-index-management",level:2},{value:"ShardSaveIndex(slot, shard, create_if_missing)",id:"get-shard-index",level:3},{value:"Persistence Operations",id:"persistence-operations",level:2},{value:"ShardSaveIndex(callback)",id:"save",level:3},{value:"ShardSaveIndex(callback)",id:"load",level:3},{value:"Slot Management",id:"slot-management",level:2},{value:"ShardSaveIndex(slot, callback, save_options)",id:"delete-slot",level:3},{value:"ShardSaveIndex()",id:"get-valid-slots",level:3},{value:"ShardSaveIndex(force_slot_type)",id:"get-next-new-slot",level:3},{value:"ShardSaveIndex(slot)",id:"is-slot-empty",level:3},{value:"ShardSaveIndex(slot)",id:"is-slot-multi-level",level:3},{value:"Data Retrieval Methods",id:"data-retrieval-methods",level:2},{value:"ShardSaveIndex(slot)",id:"get-slot-game-mode",level:3},{value:"ShardSaveIndex(slot)",id:"get-slot-server-data",level:3},{value:"ShardSaveIndex(slot, serverdata)",id:"set-slot-server-data",level:3},{value:"ShardSaveIndex(slot, shard)",id:"get-slot-gen-options",level:3},{value:"ShardSaveIndex(slot, shard, options)",id:"set-slot-gen-options",level:3},{value:"Character and World Information",id:"character-and-world-information",level:2},{value:"ShardSaveIndex(slot)",id:"get-slot-character",level:3},{value:"ShardSaveIndex(slot)",id:"get-slot-day-and-season-text",level:3},{value:"ShardSaveIndex(slot)",id:"get-slot-day",level:3},{value:"ShardSaveIndex(slot)",id:"get-slot-preset-text",level:3},{value:"Time and Date Methods",id:"time-and-date-methods",level:2},{value:"ShardSaveIndex(slot)",id:"get-slot-last-time-played",level:3},{value:"ShardSaveIndex(slot)",id:"get-slot-date-created",level:3},{value:"Server Modification Management",id:"server-modification-management",level:2},{value:"ShardSaveIndex(slot)",id:"get-slot-enabled-server-mods",level:3},{value:"ShardSaveIndex(slot)",id:"set-slot-enabled-server-mods",level:3},{value:"ShardSaveIndex(slot)",id:"load-slot-enabled-server-mods",level:3},{value:"Migration and Conversion",id:"migration-and-conversion",level:2},{value:"ShardSaveIndex(slot, skiplegacyconversion)",id:"force-retry-slot-conversion",level:3},{value:"ShardSaveIndex(slot)",id:"force-retry-legacy-path-conversion",level:3},{value:"ShardSaveIndex(slot)",id:"rerun-slot-conversion",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Save Slot Management",id:"basic-save-slot-management",level:3},{value:"Creating New Save Slot",id:"creating-new-save-slot",level:3},{value:"Multi-Level World Management",id:"multi-level-world-management",level:3},{value:"Data Structures",id:"data-structures",level:2},{value:"Slot Cache Structure",id:"slot-cache-structure",level:3},{value:"Slots Structure",id:"slots-structure",level:3},{value:"Failed Conversions Structure",id:"failed-conversions-structure",level:3},{value:"Constants",id:"constants",level:2},{value:"Shard Names",id:"shard-names",level:3},{value:"Version Management",id:"version-management",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"ShardIndex Integration",id:"shardindex-integration",level:3},{value:"TheSim Integration",id:"thesim-integration",level:3},{value:"ModManager Integration",id:"modmanager-integration",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"shard-save-index",children:"Shard Save Index"})}),"\n",(0,a.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Build Version"}),(0,a.jsx)(n.th,{children:"Change Date"}),(0,a.jsx)(n.th,{children:"Change Type"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"676042"}),(0,a.jsx)(n.td,{children:"2025-06-21"}),(0,a.jsx)(n.td,{children:"stable"}),(0,a.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"ShardSaveIndex"})," class provides comprehensive management of multi-shard save slots within cluster environments. This system handles save slot organization, shard index caching, character and world data retrieval, server modification management, and automatic migration from legacy save formats. It serves as the primary interface for save game operations in clustered Don't Starve Together installations."]}),"\n",(0,a.jsx)(n.h2,{id:"class-structure",children:"Class Structure"}),"\n",(0,a.jsx)(n.h3,{id:"shardsaveindex-class",children:"ShardSaveIndex Class"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nPrimary class for managing save slots and their associated shard data across cluster configurations."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Properties:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"version"})," (number): Save index format version for compatibility"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot_cache"})," (table): Cached shard index instances for performance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slots"})," (table): Available save slots and their types"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"failed_slot_conversions"})," (table): Slots that failed migration attempts"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"initialization-and-basic-operations",children:"Initialization and Basic Operations"}),"\n",(0,a.jsx)(n.h3,{id:"constructor",children:"ShardSaveIndex()"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nCreates a new ShardSaveIndex instance with version tracking and empty cache structures."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(ShardSaveIndex): New ShardSaveIndex instance"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Create new shard save index\nlocal shard_save_index = ShardSaveIndex()\n\n-- Load existing save data\nshard_save_index:Load(function(success)\n    if success then\n        print("Shard save index loaded successfully")\n        local slots = shard_save_index:GetValidSlots()\n        print("Available slots:", #slots)\n    end\nend)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-shard-save-index-name",children:["ShardSaveIndex",":GetShardSaveIndexName","()"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns the filename used for storing the shard save index data."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(string): Save index filename"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local filename = shard_save_index:GetShardSaveIndexName()\nprint("Save index file:", filename)\n-- Output: "shardsaveindex"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"shard-index-management",children:"Shard Index Management"}),"\n",(0,a.jsxs)(n.h3,{id:"get-shard-index",children:["ShardSaveIndex",":GetShardIndex","(slot, shard, create_if_missing)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nRetrieves or creates a shard index for the specified slot and shard, with caching for performance optimization."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Save slot number"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"shard"}),' (string): Shard identifier ("Master", "Caves", etc.)']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"create_if_missing"})," (boolean): Whether to create new shard if not found"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(ShardIndex): Shard index instance or nil if not found/invalid"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get master shard for slot 1\nlocal master_shard = shard_save_index:GetShardIndex(1, "Master")\nif master_shard then\n    local server_data = master_shard:GetServerData()\n    print("Server name:", server_data.name)\nend\n\n-- Create caves shard if missing\nlocal caves_shard = shard_save_index:GetShardIndex(1, "Caves", true)\nif caves_shard then\n    print("Caves shard ready")\nend\n\n-- Access cached shard index\nlocal cached_master = shard_save_index:GetShardIndex(1, "Master") -- Uses cache\n'})}),"\n",(0,a.jsx)(n.h2,{id:"persistence-operations",children:"Persistence Operations"}),"\n",(0,a.jsxs)(n.h3,{id:"save",children:["ShardSaveIndex",":Save","(callback)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nSaves the shard save index and all cached shard indices to persistent storage."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (function): Optional callback function called after save completion"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Save all changes\nshard_save_index:Save(function(success)\n    if success then\n        print("Shard save index saved successfully")\n    else\n        print("Failed to save shard save index")\n    end\nend)\n\n-- Save without callback\nshard_save_index:Save()\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"load",children:["ShardSaveIndex",":Load","(callback)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nLoads shard save index data from persistent storage and performs necessary migrations."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (function): Optional callback function called after load completion"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Load save index\nshard_save_index:Load(function(success)\n    if success then\n        print("Loaded save index")\n        \n        -- Process available slots\n        local slots = shard_save_index:GetValidSlots()\n        for _, slot in ipairs(slots) do\n            print("Slot", slot, ":", shard_save_index:GetSlotServerData(slot).name)\n        end\n    else\n        print("Failed to load save index")\n    end\nend)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"slot-management",children:"Slot Management"}),"\n",(0,a.jsxs)(n.h3,{id:"delete-slot",children:["ShardSaveIndex",":DeleteSlot","(slot, callback, save_options)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nDeletes a save slot and optionally preserves configuration settings for reuse."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number to delete"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (function): Optional callback function"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"save_options"})," (boolean): Whether to preserve settings"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Delete slot completely\nshard_save_index:DeleteSlot(3, function(success)\n    print("Slot 3 deleted:", success)\nend, false)\n\n-- Delete slot but keep settings\nshard_save_index:DeleteSlot(3, function(success)\n    print("Slot 3 cleared, settings preserved:", success)\nend, true)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-valid-slots",children:["ShardSaveIndex",":GetValidSlots","()"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns an array of all valid (non-empty) save slot numbers."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(table): Array of valid slot numbers"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get all valid slots\nlocal valid_slots = shard_save_index:GetValidSlots()\nprint("Valid slots:", table.concat(valid_slots, ", "))\n\n-- Process each valid slot\nfor _, slot in ipairs(valid_slots) do\n    local server_data = shard_save_index:GetSlotServerData(slot)\n    local day = shard_save_index:GetSlotDay(slot)\n    print("Slot", slot, "- Day", day, "- Name:", server_data.name)\nend\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-next-new-slot",children:["ShardSaveIndex",":GetNextNewSlot","(force_slot_type)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nFinds the next available slot number for creating new saves."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"force_slot_type"}),' (string): Force slot type ("cloud", "local", or nil)']}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(number): Next available slot number"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get next available slot (respects profile setting)\nlocal next_slot = shard_save_index:GetNextNewSlot()\nprint("Next available slot:", next_slot)\n\n-- Force cloud save slot\nlocal cloud_slot = shard_save_index:GetNextNewSlot("cloud")\nprint("Next cloud slot:", cloud_slot)\n\n-- Force local save slot\nlocal local_slot = shard_save_index:GetNextNewSlot("local")\nprint("Next local slot:", local_slot)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"is-slot-empty",children:["ShardSaveIndex",":IsSlotEmpty","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nChecks if a save slot is empty (has no world session data)."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number to check"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["(boolean): ",(0,a.jsx)(n.code,{children:"true"})," if slot is empty, ",(0,a.jsx)(n.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if slot is empty before using\nif shard_save_index:IsSlotEmpty(5) then\n    print("Slot 5 is available for new save")\n    -- Create new world in slot 5\nelse\n    print("Slot 5 contains existing save")\n    local day = shard_save_index:GetSlotDay(5)\n    print("Existing save on day:", day)\nend\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"is-slot-multi-level",children:["ShardSaveIndex",":IsSlotMultiLevel","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nDetermines if a save slot contains multiple shard levels (e.g., Forest + Caves)."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number to check"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["(boolean): ",(0,a.jsx)(n.code,{children:"true"})," if slot has multiple levels, ",(0,a.jsx)(n.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check slot configuration\nif shard_save_index:IsSlotMultiLevel(1) then\n    print("Slot 1 has Forest + Caves")\n    \n    -- Access both shards\n    local master = shard_save_index:GetShardIndex(1, "Master")\n    local caves = shard_save_index:GetShardIndex(1, "Caves")\nelse\n    print("Slot 1 has Forest only")\n    \n    -- Access master shard only\n    local master = shard_save_index:GetShardIndex(1, "Master")\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"data-retrieval-methods",children:"Data Retrieval Methods"}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-game-mode",children:["ShardSaveIndex",":GetSlotGameMode","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns the game mode for the specified save slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(string): Game mode identifier"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get game mode for slot\nlocal game_mode = shard_save_index:GetSlotGameMode(2)\nprint("Slot 2 game mode:", game_mode)\n\n-- Handle different game modes\nif game_mode == "survival" then\n    print("Standard survival mode")\nelseif game_mode == "wilderness" then\n    print("Wilderness mode")\nelseif game_mode == "endless" then\n    print("Endless mode")\nend\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-server-data",children:["ShardSaveIndex",":GetSlotServerData","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns server configuration data for the specified save slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(table): Server configuration data"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get server data\nlocal server_data = shard_save_index:GetSlotServerData(1)\nprint("Server name:", server_data.name)\nprint("Description:", server_data.description)\nprint("Max players:", server_data.max_players)\nprint("Password protected:", server_data.password ~= nil)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"set-slot-server-data",children:["ShardSaveIndex",":SetSlotServerData","(slot, serverdata)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nUpdates server configuration data for the specified save slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"serverdata"})," (table): New server configuration"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Update server configuration\nlocal new_config = {\n    name = "Updated Server Name",\n    description = "New server description",\n    max_players = 8,\n    pvp = false,\n    password = "secret123"\n}\n\nshard_save_index:SetSlotServerData(1, new_config)\nshard_save_index:Save() -- Save changes\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-gen-options",children:["ShardSaveIndex",":GetSlotGenOptions","(slot, shard)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns world generation options for the specified save slot and shard."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"shard"})," (string): Shard identifier"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(table): World generation options"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get master world options\nlocal world_options = shard_save_index:GetSlotGenOptions(1, "Master")\nif world_options then\n    print("World preset:", world_options.preset)\n    print("Season start:", world_options.overrides.season_start)\n    print("Day length:", world_options.overrides.day)\nend\n\n-- Get caves world options\nlocal caves_options = shard_save_index:GetSlotGenOptions(1, "Caves")\nif caves_options then\n    print("Caves preset:", caves_options.preset)\nend\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"set-slot-gen-options",children:["ShardSaveIndex",":SetSlotGenOptions","(slot, shard, options)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nUpdates world generation options for the specified save slot and shard."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"shard"})," (string): Shard identifier"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"options"})," (table): New world generation options"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Update world generation options\nlocal new_options = {\n    preset = "SURVIVAL_TOGETHER",\n    overrides = {\n        season_start = "winter",\n        day = "longday",\n        deerclops = "often",\n        bearger = "rare"\n    }\n}\n\nshard_save_index:SetSlotGenOptions(1, "Master", new_options)\nshard_save_index:Save()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"character-and-world-information",children:"Character and World Information"}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-character",children:["ShardSaveIndex",":GetSlotCharacter","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the character prefab name for the specified save slot by examining save metadata."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(string): Character prefab name or nil"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get character for slot\nlocal character = shard_save_index:GetSlotCharacter(3)\nif character then\n    print("Slot 3 character:", character)\n    \n    -- Handle different characters\n    if character == "wilson" then\n        print("Playing as Wilson")\n    elseif character == "willow" then\n        print("Playing as Willow")\n    end\nelse\n    print("No character data for slot 3")\nend\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-day-and-season-text",children:["ShardSaveIndex",":GetSlotDayAndSeasonText","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns formatted text showing the current day and season for the save slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(string): Formatted day and season text"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get day and season info\nlocal day_season_text = shard_save_index:GetSlotDayAndSeasonText(1)\nprint("Save progress:", day_season_text)\n-- Output: "Late Summer Day 45" or "Early Spring Day 12"\n\n-- Use in UI display\nlocal function DisplaySaveSlot(slot)\n    local server_data = shard_save_index:GetSlotServerData(slot)\n    local progress = shard_save_index:GetSlotDayAndSeasonText(slot)\n    \n    print("Server: " .. server_data.name)\n    print("Progress: " .. progress)\nend\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-day",children:["ShardSaveIndex",":GetSlotDay","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns the current day number for the specified save slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(number): Current day number"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get day number\nlocal day = shard_save_index:GetSlotDay(2)\nprint("Slot 2 is on day:", day)\n\n-- Sort slots by progression\nlocal slots = shard_save_index:GetValidSlots()\ntable.sort(slots, function(a, b)\n    return shard_save_index:GetSlotDay(a) > shard_save_index:GetSlotDay(b)\nend)\n\nprint("Slots by progression:")\nfor _, slot in ipairs(slots) do\n    print("Slot", slot, "- Day", shard_save_index:GetSlotDay(slot))\nend\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-preset-text",children:["ShardSaveIndex",":GetSlotPresetText","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns descriptive text about the world configuration preset for the save slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(string): Preset description text"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get preset description\nlocal preset_text = shard_save_index:GetSlotPresetText(1)\nprint("Slot 1 configuration:", preset_text)\n-- Output: "Forest Only" or "Forest and Caves"\n\n-- Use for save slot selection UI\nlocal function CreateSlotButton(slot)\n    local server_data = shard_save_index:GetSlotServerData(slot)\n    local preset = shard_save_index:GetSlotPresetText(slot)\n    local day = shard_save_index:GetSlotDay(slot)\n    \n    return {\n        title = server_data.name,\n        subtitle = preset .. " - Day " .. day\n    }\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"time-and-date-methods",children:"Time and Date Methods"}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-last-time-played",children:["ShardSaveIndex",":GetSlotLastTimePlayed","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns the last time the save slot was played as a timestamp."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(number): Unix timestamp of last play time"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get last played time\nlocal last_played = shard_save_index:GetSlotLastTimePlayed(1)\nif last_played then\n    local date_string = os.date("%Y-%m-%d %H:%M:%S", last_played)\n    print("Slot 1 last played:", date_string)\nelse\n    print("No play time data for slot 1")\nend\n\n-- Sort slots by recency\nlocal slots = shard_save_index:GetValidSlots()\ntable.sort(slots, function(a, b)\n    local time_a = shard_save_index:GetSlotLastTimePlayed(a) or 0\n    local time_b = shard_save_index:GetSlotLastTimePlayed(b) or 0\n    return time_a > time_b\nend)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-date-created",children:["ShardSaveIndex",":GetSlotDateCreated","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns the creation date of the save slot as a timestamp."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(number): Unix timestamp of creation date"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get creation date\nlocal created = shard_save_index:GetSlotDateCreated(2)\nif created and created > 0 then\n    local create_date = os.date("%Y-%m-%d", created)\n    print("Slot 2 created on:", create_date)\nelse\n    print("No creation date for slot 2")\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"server-modification-management",children:"Server Modification Management"}),"\n",(0,a.jsxs)(n.h3,{id:"get-slot-enabled-server-mods",children:["ShardSaveIndex",":GetSlotEnabledServerMods","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReturns the enabled server modifications configuration for the specified save slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"(table): Enabled server mods configuration"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get enabled mods for slot\nlocal enabled_mods = shard_save_index:GetSlotEnabledServerMods(1)\nfor mod_name, mod_data in pairs(enabled_mods) do\n    print("Mod:", mod_name)\n    print("Enabled:", mod_data.enabled)\n    \n    if mod_data.configuration_options then\n        print("Configuration options:")\n        for option, value in pairs(mod_data.configuration_options) do\n            print("  " .. option .. " = " .. tostring(value))\n        end\n    end\nend\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"set-slot-enabled-server-mods",children:["ShardSaveIndex",":SetSlotEnabledServerMods","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nUpdates the enabled server modifications for the specified save slot based on current mod configuration."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Update mods for slot based on current settings\nshard_save_index:SetSlotEnabledServerMods(1)\nshard_save_index:Save()\n\n-- Enable specific mods programmatically\nModManager:EnableMod("workshop-123456")\nKnownModIndex:SetConfigurationOption("workshop-123456", "difficulty", "hard")\nshard_save_index:SetSlotEnabledServerMods(1)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"load-slot-enabled-server-mods",children:["ShardSaveIndex",":LoadSlotEnabledServerMods","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nLoads and applies the server modifications configuration from the specified save slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Load mods for a specific slot\nshard_save_index:LoadSlotEnabledServerMods(3)\nprint("Loaded server mods for slot 3")\n\n-- Apply slot mods when hosting server\nlocal function HostServer(slot)\n    -- Load world configuration\n    local server_data = shard_save_index:GetSlotServerData(slot)\n    local world_options = shard_save_index:GetSlotGenOptions(slot, "Master")\n    \n    -- Load mod configuration\n    shard_save_index:LoadSlotEnabledServerMods(slot)\n    \n    -- Start server with configuration\n    StartServer(server_data, world_options)\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"migration-and-conversion",children:"Migration and Conversion"}),"\n",(0,a.jsxs)(n.h3,{id:"force-retry-slot-conversion",children:["ShardSaveIndex",":ForceRetrySlotConversion","(slot, skiplegacyconversion)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nForces retry of save slot conversion from legacy format to shard index format."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number to convert"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"skiplegacyconversion"})," (boolean): Whether to skip legacy path conversion"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Retry failed conversion\nshard_save_index:ForceRetrySlotConversion(5, false)\n\n-- Retry without legacy conversion\nshard_save_index:ForceRetrySlotConversion(5, true)\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"force-retry-legacy-path-conversion",children:["ShardSaveIndex",":ForceRetryLegacyPathConversion","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nForces retry of legacy session path conversion for the specified slot."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Force legacy path conversion\nshard_save_index:ForceRetryLegacyPathConversion(3)\nprint("Retrying legacy path conversion for slot 3")\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"rerun-slot-conversion",children:["ShardSaveIndex",":RerunSlotConversion","(slot)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status:"})," ",(0,a.jsx)(n.code,{children:"stable"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Description:"}),"\nReruns the complete slot conversion process from save index to shard index format."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"slot"})," (number): Slot number to convert"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Rerun conversion for slot\nshard_save_index:RerunSlotConversion(2)\nprint("Rerunning conversion for slot 2")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"basic-save-slot-management",children:"Basic Save Slot Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Initialize and load save index\nlocal save_index = ShardSaveIndex()\nsave_index:Load(function(success)\n    if success then\n        -- List all available saves\n        local slots = save_index:GetValidSlots()\n        print("Available save slots:")\n        \n        for _, slot in ipairs(slots) do\n            local server_data = save_index:GetSlotServerData(slot)\n            local day = save_index:GetSlotDay(slot)\n            local preset = save_index:GetSlotPresetText(slot)\n            \n            print(string.format("Slot %d: %s (Day %d, %s)", \n                slot, server_data.name, day, preset))\n        end\n    end\nend)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"creating-new-save-slot",children:"Creating New Save Slot"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Create new save in next available slot\nlocal function CreateNewSave(server_config, world_config)\n    local slot = save_index:GetNextNewSlot()\n    print("Creating new save in slot:", slot)\n    \n    -- Get or create master shard\n    local master_shard = save_index:GetShardIndex(slot, "Master", true)\n    if master_shard then\n        -- Configure server settings\n        master_shard:SetServerData(server_config)\n        master_shard:SetGenOptions(world_config)\n        \n        -- Update save index\n        save_index:SetSlotServerData(slot, server_config)\n        save_index:SetSlotGenOptions(slot, "Master", world_config)\n        \n        -- Save changes\n        save_index:Save()\n        \n        print("Created new save in slot", slot)\n        return slot\n    end\n    \n    return nil\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"multi-level-world-management",children:"Multi-Level World Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Manage forest + caves configuration\nlocal function SetupMultiLevelWorld(slot)\n    -- Create master shard (forest)\n    local master_config = {\n        preset = "SURVIVAL_TOGETHER",\n        overrides = {season_start = "autumn"}\n    }\n    \n    local master = save_index:GetShardIndex(slot, "Master", true)\n    master:SetGenOptions(master_config)\n    \n    -- Create caves shard\n    local caves_config = {\n        preset = "SURVIVAL_TOGETHER_CAVE",\n        overrides = {cave_spiders = "often"}\n    }\n    \n    local caves = save_index:GetShardIndex(slot, "Caves", true)\n    caves:SetGenOptions(caves_config)\n    \n    -- Mark as multi-level\n    save_index.slots[slot] = true\n    save_index:Save()\n    \n    print("Set up multi-level world in slot", slot)\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,a.jsx)(n.h3,{id:"slot-cache-structure",children:"Slot Cache Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- slot_cache structure\n{\n    [slot_number] = {\n        ["Master"] = ShardIndex_instance,\n        ["Caves"] = ShardIndex_instance,\n        -- Additional shards...\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"slots-structure",children:"Slots Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- slots structure\n{\n    [slot_number] = boolean,  -- true for multi-level, false for single-level\n    -- Additional slots...\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"failed-conversions-structure",children:"Failed Conversions Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- failed_slot_conversions structure\n{\n    [slot_number] = true,  -- Slots that failed conversion\n    -- Additional failed slots...\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,a.jsx)(n.h3,{id:"shard-names",children:"Shard Names"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"Master"'}),": Primary world shard"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"Caves"'}),": Underground cave shard"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"version-management",children:"Version Management"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"SHARDSAVEINDEX_VERSION"}),": Current save index format version (1)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,a.jsx)(n.h3,{id:"shardindex-integration",children:"ShardIndex Integration"}),"\n",(0,a.jsx)(n.p,{children:"Direct management of individual shard data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Access shard indices\nlocal master_shard = save_index:GetShardIndex(slot, "Master")\nlocal caves_shard = save_index:GetShardIndex(slot, "Caves")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"thesim-integration",children:"TheSim Integration"}),"\n",(0,a.jsx)(n.p,{children:"File system operations for save management:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get available save files\nlocal save_files = TheSim:GetSaveFiles()\n\n-- Cluster storage operations\nTheSim:GetPersistentStringInClusterSlot(slot, shard, filename, callback)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"modmanager-integration",children:"ModManager Integration"}),"\n",(0,a.jsx)(n.p,{children:"Server modification management:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get enabled server mods\nlocal server_mods = ModManager:GetEnabledServerModNames()\n\n-- Load mod configurations\nlocal config = KnownModIndex:LoadModConfigurationOptions(modname)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./shardindex.md",children:"ShardIndex"}),": Individual shard data management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./shardnetworking.md",children:"ShardNetworking"}),": Inter-shard communication"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/saveindex",children:"SaveGameIndex"}),": Legacy save game management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../core-systems/index.md#modmanager",children:"ModManager"}),": Server modification management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./modindex.md",children:"KnownModIndex"}),": Mod installation and configuration"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var r=s(96540);const a={},t=r.createContext(a);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);