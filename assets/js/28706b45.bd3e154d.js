"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5057],{5047:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api-vanilla/prefabs/structures","title":"Structure Prefabs","description":"Structure prefabs define the buildings, crafting stations, and other placeable objects that players can construct and interact with in Don\'t Starve Together.","source":"@site/docs/api-vanilla/prefabs/structures.md","sourceDirName":"api-vanilla/prefabs","slug":"/api-vanilla/prefabs/structures","permalink":"/dst-api-webdocs/docs/api-vanilla/prefabs/structures","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"structures","title":"Structure Prefabs","sidebar_position":5},"sidebar":"docs","previous":{"title":"Item Prefabs","permalink":"/dst-api-webdocs/docs/api-vanilla/prefabs/items"},"next":{"title":"Recipes","permalink":"/dst-api-webdocs/docs/category/recipes"}}');var i=t(4848),r=t(8453);const o={id:"structures",title:"Structure Prefabs",sidebar_position:5},a="Structure Prefabs",c={},l=[{value:"Structure Creation",id:"structure-creation",level:2},{value:"Core Structure Components",id:"core-structure-components",level:2},{value:"Structure Categories",id:"structure-categories",level:2},{value:"Crafting Stations",id:"crafting-stations",level:3},{value:"Resource Processors",id:"resource-processors",level:3},{value:"Light Sources",id:"light-sources",level:3},{value:"Storage",id:"storage",level:3},{value:"Placement System",id:"placement-system",level:2},{value:"Building Phases",id:"building-phases",level:2},{value:"Working and Destruction",id:"working-and-destruction",level:2},{value:"Example: Firepit Structure Prefab",id:"example-firepit-structure-prefab",level:2},{value:"Specialized Structure Behaviors",id:"specialized-structure-behaviors",level:2},{value:"Structure Interaction",id:"structure-interaction",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"structure-prefabs",children:"Structure Prefabs"})}),"\n",(0,i.jsx)(n.p,{children:"Structure prefabs define the buildings, crafting stations, and other placeable objects that players can construct and interact with in Don't Starve Together."}),"\n",(0,i.jsx)(n.h2,{id:"structure-creation",children:"Structure Creation"}),"\n",(0,i.jsxs)(n.p,{children:["Structures in Don't Starve Together are defined as prefabs that typically include components like ",(0,i.jsx)(n.code,{children:"workable"}),", ",(0,i.jsx)(n.code,{children:"prototyper"}),", and other specialized components based on the structure's functionality. Here's a typical structure for a structure prefab:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/firepit.zip"),\n    Asset("ANIM", "anim/firepit_fire.zip"),\n    Asset("SOUND", "sound/common.fsb"),\n}\n\nlocal prefabs = {\n    "campfirefire",\n    "collapse_small",\n    "ash",\n}\n\n-- Main creation function\nlocal function fn()\n    local inst = CreateEntity()\n\n    -- Add required engine components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n\n    -- Configure physics\n    MakeObstaclePhysics(inst, .3)\n\n    -- Configure animations\n    inst.AnimState:SetBank("firepit")\n    inst.AnimState:SetBuild("firepit")\n    inst.AnimState:PlayAnimation("idle")\n\n    -- Add tags for identification and optimization\n    inst:AddTag("structure")\n    inst:AddTag("fire")\n    inst:AddTag("campfire")\n\n    -- Network setup\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add game components\n    inst:AddComponent("inspectable")\n    inst:AddComponent("lootdropper")\n    inst:AddComponent("workable")\n    inst:AddComponent("cooker")\n    inst:AddComponent("fueled")\n    inst:AddComponent("heater")\n    inst:AddComponent("light")\n    \n    -- Configure components\n    inst.components.workable:SetWorkAction(ACTIONS.HAMMER)\n    inst.components.workable:SetWorkLeft(4)\n    inst.components.workable:SetOnFinishCallback(onhammered)\n    inst.components.workable:SetOnWorkCallback(onhit)\n    \n    inst.components.fueled:SetSections(4)\n    inst.components.fueled:InitializeFuelLevel(TUNING.FIREPIT_FUEL_MAX)\n    inst.components.fueled:SetTakeFuelFn(ontakefuel)\n    inst.components.fueled:SetUpdateFn(onupdatefueled)\n    inst.components.fueled:SetSectionCallback(onfuelchange)\n    inst.components.fueled:SetDepletedFn(onextinguish)\n    \n    inst.components.heater:SetThermics(true, true)\n    inst.components.heater:SetHeaterRadius(TUNING.FIREPIT_HEAT_RADIUS)\n    \n    -- Add special behaviors\n    MakeHauntableIgnite(inst)\n    \n    return inst\nend\n\nreturn Prefab("firepit", fn, assets, prefabs)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-structure-components",children:"Core Structure Components"}),"\n",(0,i.jsx)(n.p,{children:"Most structures have several common components:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"workable"})}),(0,i.jsx)(n.td,{children:"Allows the structure to be worked on (hammered, mined, etc.)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"inspectable"})}),(0,i.jsx)(n.td,{children:"Allows the structure to be examined by players"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"lootdropper"})}),(0,i.jsx)(n.td,{children:"Controls what items drop when the structure is destroyed"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"savedrotation"})}),(0,i.jsx)(n.td,{children:"Preserves rotation when the game is saved"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"physics"})}),(0,i.jsx)(n.td,{children:"Handles collision with other entities"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"structure-categories",children:"Structure Categories"}),"\n",(0,i.jsx)(n.p,{children:"Structures in Don't Starve Together fall into several categories:"}),"\n",(0,i.jsx)(n.h3,{id:"crafting-stations",children:"Crafting Stations"}),"\n",(0,i.jsx)(n.p,{children:"Structures that allow crafting specific items:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Prototyper component for crafting stations\ninst:AddComponent("prototyper")\ninst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.SCIENCEMACHINE\n'})}),"\n",(0,i.jsx)(n.h3,{id:"resource-processors",children:"Resource Processors"}),"\n",(0,i.jsx)(n.p,{children:"Structures that transform resources:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Stewer component for cooking crockpot recipes\ninst:AddComponent("stewer")\ninst.components.stewer:SetCookingTime(TUNING.CROCKPOT_COOK_TIME)\ninst.components.stewer:SetNumSlots(4)\n\n-- Dryer component for drying meat\ninst:AddComponent("dryer")\ninst.components.dryer:SetDryTime(TUNING.MEAT_DRY_TIME)\ninst.components.dryer:SetStartDryingFn(startdryfn)\ninst.components.dryer:SetDoneDryingFn(donedryfn)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"light-sources",children:"Light Sources"}),"\n",(0,i.jsx)(n.p,{children:"Structures that provide light:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Light component\ninst:AddComponent("light")\ninst.components.light:SetRadius(TUNING.FIREPIT_LIGHT_RADIUS)\ninst.components.light:SetFalloff(TUNING.FIREPIT_LIGHT_FALLOFF)\ninst.components.light:SetIntensity(TUNING.FIREPIT_LIGHT_INTENSITY)\ninst.components.light:SetColour(255/255, 255/255, 192/255)\ninst.components.light:Enable(false)\n\n-- Fueled component for light sources\ninst:AddComponent("fueled")\ninst.components.fueled:SetSections(4)\ninst.components.fueled:InitializeFuelLevel(TUNING.FIREPIT_FUEL_MAX)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"storage",children:"Storage"}),"\n",(0,i.jsx)(n.p,{children:"Structures that store items:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Container component\ninst:AddComponent("container")\ninst.components.container:WidgetSetup("chest")\ninst.components.container.onopenfn = onopen\ninst.components.container.onclosefn = onclose\n'})}),"\n",(0,i.jsx)(n.h2,{id:"placement-system",children:"Placement System"}),"\n",(0,i.jsx)(n.p,{children:"Structures often use the placer system for placement previews:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create a placer prefab\nlocal function placer_postinit_fn(inst)\n    -- Show valid/invalid placement\n    inst.AnimState:SetLightOverride(1)\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add placement test functions\n    inst.components.placer:AddSnapping(function(pt, ...)\n        return FindWalkableOffset(pt, ...)\n    end)\nend\n\n-- Define placer in main prefab\nreturn Prefab("firepit", fn, assets, prefabs),\n       MakePlacer("firepit_placer", "firepit", "firepit", "idle", nil, nil, nil, nil, nil, nil, placer_postinit_fn)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"building-phases",children:"Building Phases"}),"\n",(0,i.jsx)(n.p,{children:"Many structures have construction phases:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define multiple phases\nlocal PHASE_NAMES = { "COMPLETE", "STUFFED", "EMBERS", "ASHES" }\n\n-- Phase transition function\nlocal function OnPhaseChanged(inst, phase)\n    if phase == "COMPLETE" then\n        inst.AnimState:PlayAnimation("idle")\n        inst.components.cooker:Enable(true)\n    elseif phase == "STUFFED" then\n        inst.AnimState:PlayAnimation("stuffed")\n        inst.components.cooker:Enable(false)\n    elseif phase == "EMBERS" then\n        inst.AnimState:PlayAnimation("embers")\n        inst.components.cooker:Enable(false)\n    elseif phase == "ASHES" then\n        inst.AnimState:PlayAnimation("ashes")\n        inst.components.cooker:Enable(false)\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"working-and-destruction",children:"Working and Destruction"}),"\n",(0,i.jsxs)(n.p,{children:["Structures can be worked on (hammered, mined) using the ",(0,i.jsx)(n.code,{children:"workable"})," component:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Configure workable component\ninst:AddComponent("workable")\ninst.components.workable:SetWorkAction(ACTIONS.HAMMER)\ninst.components.workable:SetWorkLeft(4)  -- Number of hits to destroy\ninst.components.workable:SetOnFinishCallback(onhammered)  -- Called when destroyed\ninst.components.workable:SetOnWorkCallback(onhit)  -- Called on each hit\n\n-- Example destruction callback\nlocal function onhammered(inst, worker)\n    inst.components.lootdropper:DropLoot()\n    \n    -- Visual/audio effects\n    local fx = SpawnPrefab("collapse_small")\n    fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n    fx:SetMaterial("wood")\n    \n    inst:Remove()\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example-firepit-structure-prefab",children:"Example: Firepit Structure Prefab"}),"\n",(0,i.jsx)(n.p,{children:"The firepit is a basic structure that demonstrates many common patterns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Light and heat based on fuel level\nlocal function onfuelchange(inst)\n    local fueled = inst.components.fueled\n    local heatpct = fueled:GetPercent()\n    \n    -- Update light radius and intensity\n    inst.components.light:SetRadius(TUNING.FIREPIT_LIGHT_RADIUS * heatpct)\n    inst.components.light:SetIntensity(TUNING.FIREPIT_LIGHT_INTENSITY * heatpct)\n    \n    -- Update heat radius\n    inst.components.heater:SetThermics(true, true)\n    inst.components.heater:SetHeatRadius(TUNING.FIREPIT_HEAT_RADIUS * heatpct)\n    \n    -- Update animation based on fuel level\n    if fueled:IsEmpty() then\n        inst.AnimState:PlayAnimation("dead")\n        inst.components.light:Enable(false)\n    else\n        if fueled:GetPercent() <= 0.25 then\n            inst.AnimState:PlayAnimation("low")\n        elseif fueled:GetPercent() <= 0.5 then\n            inst.AnimState:PlayAnimation("med")\n        else\n            inst.AnimState:PlayAnimation("high")\n        end\n        inst.components.light:Enable(true)\n    end\nend\n\n-- Fuel handling\nlocal function ontakefuel(inst)\n    inst.SoundEmitter:PlaySound("dontstarve/common/fireAddFuel")\n    \n    -- Start a "sizzle" sound when wet ingredients are added\n    if inst.components.fueled.wetness > 0 then\n        inst.SoundEmitter:PlaySound("dontstarve/common/fireWetFuel")\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"specialized-structure-behaviors",children:"Specialized Structure Behaviors"}),"\n",(0,i.jsx)(n.p,{children:"Many structures have unique behaviors implemented through specialized components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Ice Flingomatic for extinguishing fires\ninst:AddComponent("waterprojector")\ninst.components.waterprojector:SetRange(TUNING.ICEHAT_PROJECTILE_RANGE)\n\n-- Lightning Rod for lightning protection\ninst:AddComponent("lightningrod")\ninst.components.lightningrod:SetOnStruckFn(onstruck)\n\n-- Teleporter for moving between locations\ninst:AddComponent("teleporter")\ninst.components.teleporter.targetTeleporter = GetTargetTeleporter\n'})}),"\n",(0,i.jsx)(n.h2,{id:"structure-interaction",children:"Structure Interaction"}),"\n",(0,i.jsx)(n.p,{children:"Structures often have specialized interaction actions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Interactable component for actions\ninst:AddComponent("activatable")\ninst.components.activatable.OnActivate = OnActivate\ninst.components.activatable.ActivateVerb = STRINGS.ACTIONS.ACTIVATE.GENERIC\n\n-- Trading component for structures that accept items\ninst:AddComponent("trader")\ninst.components.trader:SetAcceptTest(ShouldAcceptItem)\ninst.components.trader.onaccept = OnGetItem\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);