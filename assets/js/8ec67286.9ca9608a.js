"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[45080],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(96540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}},37872:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"game-scripts/core-systems/world-systems/generation/plantregistrydata","title":"Plant Registry Data","description":"Data management system for tracking discovered plants, growth stages, fertilizers, and oversized plant pictures in the farming system","source":"@site/docs/game-scripts/core-systems/world-systems/generation/plantregistrydata.md","sourceDirName":"game-scripts/core-systems/world-systems/generation","slug":"/game-scripts/core-systems/world-systems/generation/plantregistrydata","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/plantregistrydata","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"plantregistrydata","title":"Plant Registry Data","description":"Data management system for tracking discovered plants, growth stages, fertilizers, and oversized plant pictures in the farming system","sidebar_position":6,"last_updated":"2025-06-25T00:00:00.000Z","build_version":676312,"change_status":"modified"},"sidebar":"docs","previous":{"title":"Prefab Swaps","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/prefabswaps"},"next":{"title":"RegrowthUtil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/regrowthutil"}}');var t=s(74848),i=s(28453);const l={id:"plantregistrydata",title:"Plant Registry Data",description:"Data management system for tracking discovered plants, growth stages, fertilizers, and oversized plant pictures in the farming system",sidebar_position:6,last_updated:new Date("2025-06-25T00:00:00.000Z"),build_version:676312,change_status:"modified"},a="Plant Registry Data",d={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Class Definition",id:"class-definition",level:2},{value:"PlantRegistryData()",id:"plantregistrydata",level:3},{value:"Plant Knowledge Methods",id:"plant-knowledge-methods",level:2},{value:"GetKnownPlants()",id:"get-known-plants",level:3},{value:"GetKnownPlantStages(plant)",id:"get-known-plant-stages",level:3},{value:"IsAnyPlantStageKnown(plant)",id:"is-any-plant-stage-known",level:3},{value:"KnowsPlantStage(plant, stage)",id:"knows-plant-stage",level:3},{value:"KnowsSeed(plant, plantregistryinfo)",id:"knows-seed",level:3},{value:"KnowsPlantName(plant, plantregistryinfo, research_stage)",id:"knows-plant-name",level:3},{value:"Fertilizer Knowledge Methods",id:"fertilizer-knowledge-methods",level:2},{value:"KnowsFertilizer(fertilizer)",id:"knows-fertilizer",level:3},{value:"LearnFertilizer(fertilizer)",id:"learn-fertilizer",level:3},{value:"Picture Management Methods",id:"picture-management-methods",level:2},{value:"HasOversizedPicture(plant)",id:"has-oversized-picture",level:3},{value:"GetOversizedPictureData(plant)",id:"get-oversized-picture-data",level:3},{value:"TakeOversizedPicture(plant, weight, player, beardskin, beardlength)",id:"take-oversized-picture",level:3},{value:"Progress and Statistics",id:"progress-and-statistics",level:2},{value:"GetPlantPercent(plant, plantregistryinfo)",id:"get-plant-percent",level:3},{value:"LearnPlantStage(plant, stage)",id:"learn-plant-stage",level:3},{value:"UI State Management",id:"ui-state-management",level:2},{value:"ClearFilters()",id:"clear-filters",level:3},{value:"SetFilter(category, value)",id:"set-filter",level:3},{value:"GetFilter(category)",id:"get-filter",level:3},{value:"GetLastSelectedCard(plant)",id:"get-last-selected-card",level:3},{value:"SetLastSelectedCard(plant, card)",id:"set-last-selected-card",level:3},{value:"Data Persistence",id:"data-persistence",level:2},{value:"Save(force_save)",id:"save",level:3},{value:"Load()",id:"load",level:3},{value:"ApplyOnlineProfileData()",id:"apply-online-profile-data",level:3},{value:"Constants and Dependencies",id:"constants-and-dependencies",level:2},{value:"Required Modules",id:"required-modules",level:3},{value:"Platform Settings",id:"platform-settings",level:3},{value:"Data Structure Examples",id:"data-structure-examples",level:2},{value:"Plant Stage Data Structure",id:"plant-stage-data-structure",level:3},{value:"Fertilizer Data Structure",id:"fertilizer-data-structure",level:3},{value:"Picture Data Structure",id:"picture-data-structure",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"With Plant Discovery System",id:"with-plant-discovery-system",level:3},{value:"With Fertilizer System",id:"with-fertilizer-system",level:3},{value:"With Giant Crop System",id:"with-giant-crop-system",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"plant-registry-data",children:"Plant Registry Data"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676312"}),(0,t.jsx)(n.td,{children:"2025-06-25"}),(0,t.jsx)(n.td,{children:"modified"}),(0,t.jsx)(n.td,{children:"Enhanced data loading with better error handling and safety"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Previous version"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"PlantRegistryData"})," class manages persistent data for the farming system's plant discovery mechanics. It tracks which plants and growth stages players have discovered, fertilizer knowledge, and stores oversized plant pictures with associated player data."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Access the global plant registry\nlocal registry = ThePlayer.components.plantregistrydata\n\n-- Learn a plant stage\nregistry:LearnPlantStage("carrot", 3)\n\n-- Check if player knows a fertilizer\nif registry:KnowsFertilizer("fertilizer_basic") then\n    -- Player has discovered this fertilizer\nend\n\n-- Check plant discovery progress\nlocal percent = registry:GetPlantPercent("potato", PLANT_DEFS.potato.plantregistryinfo)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,t.jsx)(n.h3,{id:"plantregistrydata",children:"PlantRegistryData()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nConstructor that initializes a new plant registry data instance with empty plant, fertilizer, and picture collections."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Properties:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plants"})," (table): Maps plant names to their discovered growth stages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fertilizers"})," (table): Maps fertilizer names to discovery status"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pictures"})," (table): Maps plant names to oversized picture data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filters"})," (table): Current filter settings for plant registry UI"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"last_selected_card"})," (table): Last selected card for each plant in UI"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"plant-knowledge-methods",children:"Plant Knowledge Methods"}),"\n",(0,t.jsx)(n.h3,{id:"get-known-plants",children:"GetKnownPlants()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns a table of all plants that have at least one discovered growth stage."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Dictionary of plant names to their stage data"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local known_plants = registry:GetKnownPlants()\nfor plant_name, stages in pairs(known_plants) do\n    print("Player knows plant:", plant_name)\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-known-plant-stages",children:"GetKnownPlantStages(plant)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the discovered growth stages for a specific plant."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Dictionary mapping stage numbers to discovery status"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local carrot_stages = registry:GetKnownPlantStages("carrot")\nfor stage, known in pairs(carrot_stages) do\n    if known then\n        print("Knows carrot stage:", stage)\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"is-any-plant-stage-known",children:"IsAnyPlantStageKnown(plant)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if the player has discovered any growth stage for the specified plant."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if any stage is known, false otherwise"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'if registry:IsAnyPlantStageKnown("potato") then\n    -- Show potato in the plant registry UI\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"knows-plant-stage",children:"KnowsPlantStage(plant, stage)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if a specific growth stage of a plant has been discovered."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stage"})," (number): The growth stage number"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if the stage is known, false otherwise"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'if registry:KnowsPlantStage("carrot", 4) then\n    print("Player has seen fully grown carrots")\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"knows-seed",children:"KnowsSeed(plant, plantregistryinfo)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDetermines if the player knows what seed produces the specified plant by checking if any discovered stage reveals seed information."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plantregistryinfo"})," (table): Plant registry information from plant definition"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if seed information is known"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local plant_def = PLANT_DEFS.carrot\nif registry:KnowsSeed("carrot", plant_def.plantregistryinfo) then\n    -- Show seed information in UI\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"knows-plant-name",children:"KnowsPlantName(plant, plantregistryinfo, research_stage)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if the player knows the name of the plant through discovered stages or a specific research stage."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plantregistryinfo"})," (table): Plant registry information from plant definition"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"research_stage"})," (number): Optional specific stage to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if plant name is known"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local plant_def = PLANT_DEFS.tomato\nif registry:KnowsPlantName("tomato", plant_def.plantregistryinfo) then\n    -- Display the actual plant name instead of "Unknown Plant"\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"fertilizer-knowledge-methods",children:"Fertilizer Knowledge Methods"}),"\n",(0,t.jsx)(n.h3,{id:"knows-fertilizer",children:"KnowsFertilizer(fertilizer)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if the player has discovered the specified fertilizer."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fertilizer"})," (string): The fertilizer prefab name"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if fertilizer is known"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'if registry:KnowsFertilizer("fertilizer_basic") then\n    -- Show fertilizer in plant registry UI\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"learn-fertilizer",children:"LearnFertilizer(fertilizer)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRecords discovery of a new fertilizer and syncs with online inventory if enabled."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fertilizer"})," (string): The fertilizer prefab name"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if this was a new discovery, false if already known"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local was_new = registry:LearnFertilizer("fertilizer_growth_formula")\nif was_new then\n    -- Show discovery notification\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"picture-management-methods",children:"Picture Management Methods"}),"\n",(0,t.jsx)(n.h3,{id:"has-oversized-picture",children:"HasOversizedPicture(plant)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if an oversized picture has been taken for the specified plant."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if picture exists"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'if registry:HasOversizedPicture("giant_potato") then\n    -- Show picture in plant registry\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-oversized-picture-data",children:"GetOversizedPictureData(plant)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the stored data for an oversized plant picture, including weight, player, and clothing information."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Picture data including weight, player, clothing, base skin, mode, and optional beard data"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local picture_data = registry:GetOversizedPictureData("giant_carrot")\nif picture_data then\n    print("Record weight:", picture_data.weight)\n    print("Record holder:", picture_data.player)\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"take-oversized-picture",children:"TakeOversizedPicture(plant, weight, player, beardskin, beardlength)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRecords a new oversized plant picture if the weight exceeds the current record. Captures player appearance including clothing and skins."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"weight"})," (number): The plant's weight"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"player"})," (EntityScript): The player entity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"beardskin"})," (string): Optional beard skin for characters with beards"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"beardlength"})," (number): Optional beard length"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if picture was recorded (new record or first picture)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local success = registry:TakeOversizedPicture("giant_potato", 15.5, ThePlayer)\nif success then\n    -- Show achievement or notification\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"progress-and-statistics",children:"Progress and Statistics"}),"\n",(0,t.jsx)(n.h3,{id:"get-plant-percent",children:"GetPlantPercent(plant, plantregistryinfo)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates the discovery percentage for a plant based on known growth stages and fullgrown variants."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plantregistryinfo"})," (table): Plant registry information from plant definition"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Percentage of plant discovered (0.0 to 1.0)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local plant_def = PLANT_DEFS.carrot\nlocal progress = registry:GetPlantPercent("carrot", plant_def.plantregistryinfo)\nprint("Carrot discovery:", math.floor(progress * 100) .. "%")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"learn-plant-stage",children:"LearnPlantStage(plant, stage)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRecords discovery of a new plant growth stage and updates UI card selection based on completion status."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stage"})," (number): The growth stage number"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if this was a new discovery"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local was_new = registry:LearnPlantStage("potato", 2)\nif was_new then\n    -- Play discovery sound or show notification\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"ui-state-management",children:"UI State Management"}),"\n",(0,t.jsx)(n.h3,{id:"clear-filters",children:"ClearFilters()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nResets all plant registry UI filters to their default state."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"registry:ClearFilters()\n-- All plants will now be visible in the registry UI\n"})}),"\n",(0,t.jsx)(n.h3,{id:"set-filter",children:"SetFilter(category, value)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSets a filter value for the plant registry UI and marks data as dirty for saving."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"category"})," (string): The filter category name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value"})," (any): The filter value"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'registry:SetFilter("season", "summer")\nregistry:SetFilter("discovered", true)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-filter",children:"GetFilter(category)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the current value for a plant registry UI filter."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"category"})," (string): The filter category name"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(any): The current filter value"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local season_filter = registry:GetFilter("season")\nif season_filter == "winter" then\n    -- Show only winter plants\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-last-selected-card",children:"GetLastSelectedCard(plant)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the last selected card (stage or summary) for a plant in the registry UI."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'(string/number): The card identifier (stage number or "summary")'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local last_card = registry:GetLastSelectedCard("carrot")\n-- Restore UI to show the last viewed card\n'})}),"\n",(0,t.jsx)(n.h3,{id:"set-last-selected-card",children:"SetLastSelectedCard(plant, card)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRecords which card was last selected for a plant in the registry UI."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"plant"})," (string): The plant prefab name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"card"}),' (string/number): The card identifier (stage number or "summary")']}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'registry:SetLastSelectedCard("potato", "summary")\n-- UI will remember to show summary card next time\n'})}),"\n",(0,t.jsx)(n.h2,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,t.jsx)(n.h3,{id:"save",children:"Save(force_save)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSaves the plant registry data to persistent storage if enabled and data has been modified."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"force_save"})," (boolean): If true, saves regardless of dirty flag"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"registry:Save(true) -- Force immediate save\n"})}),"\n",(0,t.jsx)(n.h3,{id:"load",children:"Load()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"modified in 676312"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Source:"})," ",(0,t.jsx)(n.a,{href:"mdc:dst-api-webdocs/dst-scripts/plantregistrydata.lua",children:"dst-scripts/plantregistrydata.lua"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nLoads plant registry data from persistent storage asynchronously. Enhanced with improved error handling and data validation. Data is restored to the instance when loading completes. If corrupted data is detected, it will be automatically cleared and resaved."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"registry:Load()\n-- Data will be available after the async operation completes\n-- Corrupted data will be automatically cleaned up\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Modified in build 676312: Enhanced data loading with better error handling and ",(0,t.jsx)(n.code,{children:"RunInSandboxSafe()"})," usage"]}),"\n",(0,t.jsx)(n.li,{children:"Added automatic data clearing when corrupted data is detected"}),"\n",(0,t.jsx)(n.li,{children:"Improved initialization to ensure clean state before loading"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"apply-online-profile-data",children:"ApplyOnlineProfileData()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSynchronizes plant registry data with online inventory when available. Decodes plant stages and oversized picture data from online storage."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if synchronization was successful"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if registry:ApplyOnlineProfileData() then\n    -- Online data has been synchronized\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"constants-and-dependencies",children:"Constants and Dependencies"}),"\n",(0,t.jsx)(n.h3,{id:"required-modules",children:"Required Modules"}),"\n",(0,t.jsx)(n.p,{children:"The module depends on several plant and fertilizer definition files:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefabs/farm_plant_defs"}),": Provides ",(0,t.jsx)(n.code,{children:"PLANT_DEFS"})," for plant configurations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefabs/weed_defs"}),": Provides ",(0,t.jsx)(n.code,{children:"WEED_DEFS"})," for weed configurations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefabs/fertilizer_nutrient_defs"}),": Provides ",(0,t.jsx)(n.code,{children:"FERTILIZER_DEFS"})," for fertilizer data"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"platform-settings",children:"Platform Settings"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local USE_SETTINGS_FILE = PLATFORM ~= "PS4" and PLATFORM ~= "NACL"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Settings file usage is disabled on PS4 and NACL platforms due to platform-specific limitations."}),"\n",(0,t.jsx)(n.h2,{id:"data-structure-examples",children:"Data Structure Examples"}),"\n",(0,t.jsx)(n.h3,{id:"plant-stage-data-structure",children:"Plant Stage Data Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Example of plants table structure\nplants = {\n    carrot = {\n        [1] = true,  -- Stage 1 discovered\n        [2] = true,  -- Stage 2 discovered\n        [4] = true   -- Stage 4 discovered (stage 3 still unknown)\n    },\n    potato = {\n        [1] = true,\n        [2] = true,\n        [3] = true,\n        [4] = true   -- Fully discovered\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"fertilizer-data-structure",children:"Fertilizer Data Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Example of fertilizers table structure\nfertilizers = {\n    fertilizer_basic = true,\n    fertilizer_growth_formula = true,\n    fertilizer_nutrient_formula = true\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"picture-data-structure",children:"Picture Data Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Example of pictures table structure\npictures = {\n    giant_potato = {\n        weight = "15.75",\n        player = "wilson",\n        clothing = {\n            body = "wilson_body_default",\n            hand = "wilson_hand_default", \n            legs = "wilson_legs_default",\n            feet = "wilson_feet_default"\n        },\n        base = "wilson_base_default",\n        mode = "normal_skin"\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,t.jsx)(n.h3,{id:"with-plant-discovery-system",children:"With Plant Discovery System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- When a plant stage is observed\nlocal function OnPlantStageObserved(inst, stage)\n    local registry = ThePlayer.components.plantregistrydata\n    local plant_name = inst.prefab\n    \n    if registry:LearnPlantStage(plant_name, stage) then\n        -- First time seeing this stage\n        ThePlayer.components.talker:Say("I should note this in my plant registry!")\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"with-fertilizer-system",children:"With Fertilizer System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- When using a fertilizer\nlocal function OnFertilizerUsed(fertilizer_name)\n    local registry = ThePlayer.components.plantregistrydata\n    \n    if registry:LearnFertilizer(fertilizer_name) then\n        -- First time using this fertilizer\n        registry:Save(true) -- Force save new discovery\n    end\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-giant-crop-system",children:"With Giant Crop System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- When harvesting an oversized crop\nlocal function OnGiantCropHarvested(inst, harvester, weight)\n    local registry = harvester.components.plantregistrydata\n    \n    if registry:TakeOversizedPicture(inst.prefab, weight, harvester) then\n        -- New record set!\n        harvester.components.talker:Say("This is the biggest one I\'ve ever grown!")\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./farm_plant_defs.md",children:"Farm Plant Definitions"}),": Defines plant growth stages and registry information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./fertilizer_nutrient_defs.md",children:"Fertilizer Definitions"}),": Defines fertilizer types and properties"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./weed_defs.md",children:"Weed Definitions"}),": Defines weed types that can be discovered"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./playerprofile.md",children:"Player Profile"}),": Manages persistent player data including plant registry"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./inventory.md",children:"Inventory System"}),": Handles online synchronization of plant discoveries"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);