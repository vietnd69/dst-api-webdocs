"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[70937],{28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var r=n(96540);const a={},i=r.createContext(a);function t(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(i.Provider,{value:s},e.children)}},79891:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"game-scripts/core-systems/world-systems/generation/prefabswaps","title":"Prefab Swaps","description":"World generation prefab variation system for diversifying game worlds","source":"@site/docs/game-scripts/core-systems/world-systems/generation/prefabswaps.md","sourceDirName":"game-scripts/core-systems/world-systems/generation","slug":"/game-scripts/core-systems/world-systems/generation/prefabswaps","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/prefabswaps","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"prefabswaps","title":"Prefab Swaps","description":"World generation prefab variation system for diversifying game worlds","sidebar_position":7,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Custom Presets","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/custom-presets"},"next":{"title":"Plant Registry Data","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/plantregistrydata"}}');var a=n(74848),i=n(28453);const t={id:"prefabswaps",title:"Prefab Swaps",description:"World generation prefab variation system for diversifying game worlds",sidebar_position:7,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="Prefab Swaps",o={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Core Functions",id:"core-functions",level:2},{value:"PrefabSwaps.AddPrefabSwap(swap_data)",id:"addprefabswap",level:3},{value:"PrefabSwaps.GetBasePrefabSwaps()",id:"getbaseprefabswaps",level:3},{value:"PrefabSwaps.SelectPrefabSwaps(location, world_gen_options, override_sets)",id:"selectprefabswaps",level:3},{value:"PrefabSwaps.IsPrefabInactive(prefab)",id:"isprefabinactive",level:3},{value:"Proxy System",id:"proxy-system",level:2},{value:"PrefabSwaps.AddPrefabProxy(proxy, prefab)",id:"addprefabproxy",level:3},{value:"PrefabSwaps.ResolvePrefabProxy(proxy)",id:"resolveprefabproxy",level:3},{value:"Customization Prefabs",id:"customization-prefabs",level:3},{value:"PrefabSwaps.AddCustomizationPrefab(proxy, prefab)",id:"addcustomizationprefab",level:4},{value:"Randomization Prefabs",id:"randomization-prefabs",level:3},{value:"PrefabSwaps.AddRandomizationPrefab(proxy, prefabs)",id:"addrandomizationprefab",level:4},{value:"Built-in Swap Categories",id:"built-in-swap-categories",level:2},{value:"Grass Swaps",id:"grass-swaps",level:3},{value:"Twig Swaps",id:"twig-swaps",level:3},{value:"Berry Swaps",id:"berry-swaps",level:3},{value:"Weight System",id:"weight-system",level:2},{value:"Location Restrictions",id:"location-restrictions",level:2},{value:"Exclude Locations",id:"exclude-locations",level:3},{value:"Required Locations",id:"required-locations",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Swap Categories",id:"custom-swap-categories",level:3},{value:"Conditional Swaps",id:"conditional-swaps",level:3},{value:"Checking Active Swaps",id:"checking-active-swaps",level:3},{value:"Integration with World Generation",id:"integration-with-world-generation",level:2},{value:"Room Generation",id:"room-generation",level:3},{value:"Set Piece Generation",id:"set-piece-generation",level:3},{value:"Task Generation",id:"task-generation",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"prefab-swaps",children:"Prefab Swaps"})}),"\n",(0,a.jsx)(s.h2,{id:"version-history",children:"Version History"}),"\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Build Version"}),(0,a.jsx)(s.th,{children:"Change Date"}),(0,a.jsx)(s.th,{children:"Change Type"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsx)(s.tbody,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"676042"}),(0,a.jsx)(s.td,{children:"2025-06-21"}),(0,a.jsx)(s.td,{children:"stable"}),(0,a.jsx)(s.td,{children:"Current version"})]})})]}),"\n",(0,a.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"prefabswaps"})," module provides a system for replacing base prefabs with alternative variations during world generation. This allows for diversified game worlds where players might encounter different resource sources like grass gekkos instead of regular grass, or twiggy trees instead of saplings."]}),"\n",(0,a.jsx)(s.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Add a new prefab swap category\nPrefabSwaps.AddPrefabSwap({\n    category = "logs",\n    name = "birch trees",\n    prefabs = { "deciduoustree" },\n    weight = 1,\n    exclude_locations = { "cave" },\n})\n\n-- Select swaps for world generation\nPrefabSwaps.SelectPrefabSwaps("forest", world_gen_options)\n\n-- Check if a prefab is inactive\nif PrefabSwaps.IsPrefabInactive("grassgekko") then\n    -- Regular grass was selected instead\nend\n'})}),"\n",(0,a.jsx)(s.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,a.jsx)(s.h3,{id:"addprefabswap",children:"PrefabSwaps.AddPrefabSwap(swap_data)"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nRegisters a new prefab swap option for world generation."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"swap_data"})," (table): Configuration table defining the swap"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Swap Data Structure:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'{\n    category = "category_name",           -- Swap category identifier\n    name = "display_name",               -- Human-readable name\n    prefabs = { "prefab1", "prefab2" },  -- Prefabs this swap includes\n    weight = 1,                          -- Selection probability weight\n    primary = true,                      -- Is this the default option?\n    exclude_locations = { "cave" },      -- Locations where this swap is not allowed\n    required_locations = { "forest" },   -- Locations where this swap is required\n}\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Add alternative berry source\nPrefabSwaps.AddPrefabSwap({\n    category = "berries",\n    name = "juicy berries",\n    prefabs = { "berrybush_juicy" },\n    weight = 1,\n})\n\n-- Add rare twig alternative  \nPrefabSwaps.AddPrefabSwap({\n    category = "twigs",\n    name = "twiggy trees",\n    prefabs = { "twiggytree", "ground_twigs" },\n    weight = 1,\n})\n'})}),"\n",(0,a.jsx)(s.h3,{id:"getbaseprefabswaps",children:"PrefabSwaps.GetBasePrefabSwaps()"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nReturns the complete table of registered prefab swap categories."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"(table): Table mapping category names to swap option arrays"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'local all_swaps = PrefabSwaps.GetBasePrefabSwaps()\nfor category, swap_list in pairs(all_swaps) do\n    print("Category:", category)\n    for i, swap in ipairs(swap_list) do\n        print("  Swap:", swap.name, "Weight:", swap.weight)\n    end\nend\n'})}),"\n",(0,a.jsx)(s.h3,{id:"selectprefabswaps",children:"PrefabSwaps.SelectPrefabSwaps(location, world_gen_options, override_sets)"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nSelects which prefab swaps to activate for world generation based on location and options."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"location"}),' (string): Generation location ("forest", "cave", etc.)']}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"world_gen_options"})," (table): World generation configuration"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"override_sets"})," (table, optional): Manual swap overrides"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Selection Modes:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Classic Mode:"})," Uses only primary (default) swaps"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Highly Random:"})," Randomly selects from all valid options"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Weighted Random:"})," Uses probability weights for selection"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Classic world generation\nlocal options = { prefabswaps_start = "classic" }\nPrefabSwaps.SelectPrefabSwaps("forest", options)\n\n-- Highly randomized world\nlocal options = { prefabswaps_start = "highly random" }\nPrefabSwaps.SelectPrefabSwaps("forest", options)\n\n-- Manual overrides\nlocal overrides = {\n    grass = "grass gekko",\n    berries = "juicy berries"\n}\nPrefabSwaps.SelectPrefabSwaps("forest", nil, overrides)\n'})}),"\n",(0,a.jsx)(s.h3,{id:"isprefabinactive",children:"PrefabSwaps.IsPrefabInactive(prefab)"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nChecks if a prefab has been deactivated by the swap selection process."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"prefab"})," (string): Prefab name to check"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"(boolean): True if the prefab is inactive, false otherwise"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Check if grass gekkos are active\nif not PrefabSwaps.IsPrefabInactive("grassgekko") then\n    print("Grass gekkos are active in this world")\nelse\n    print("Regular grass is being used")\nend\n'})}),"\n",(0,a.jsx)(s.h2,{id:"proxy-system",children:"Proxy System"}),"\n",(0,a.jsx)(s.p,{children:"The module includes proxy systems for handling special prefab relationships:"}),"\n",(0,a.jsx)(s.h3,{id:"addprefabproxy",children:"PrefabSwaps.AddPrefabProxy(proxy, prefab)"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nMaps temporary prefab names to real prefab names for world generation."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"proxy"})," (string): Temporary proxy name"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"prefab"})," (string): Real prefab name"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Map permanent versions that shouldn\'t be culled\nPrefabSwaps.AddPrefabProxy("perma_grass", "grass")\nPrefabSwaps.AddPrefabProxy("ground_twigs", "twigs")\n'})}),"\n",(0,a.jsx)(s.h3,{id:"resolveprefabproxy",children:"PrefabSwaps.ResolvePrefabProxy(proxy)"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nResolves a proxy name to its real prefab name."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"(string): Real prefab name, or original if no proxy exists"}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"customization-prefabs",children:"Customization Prefabs"}),"\n",(0,a.jsx)(s.h4,{id:"addcustomizationprefab",children:"PrefabSwaps.AddCustomizationPrefab(proxy, prefab)"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nMaps prefabs for customization-specific control during world generation."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Moon island rocks controlled by moon island settings\nPrefabSwaps.AddCustomizationPrefab("lunar_island_rock1", "rock1")\nPrefabSwaps.AddCustomizationPrefab("lunar_island_rock2", "rock2")\n'})}),"\n",(0,a.jsx)(s.h3,{id:"randomization-prefabs",children:"Randomization Prefabs"}),"\n",(0,a.jsx)(s.h4,{id:"addrandomizationprefab",children:"PrefabSwaps.AddRandomizationPrefab(proxy, prefabs)"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nMaps a proxy name to a list of prefabs for random selection."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Random chess piece selection\nPrefabSwaps.AddRandomizationPrefab("worldgen_chesspieces", {"knight", "bishop", "rook"})\n'})}),"\n",(0,a.jsx)(s.h2,{id:"built-in-swap-categories",children:"Built-in Swap Categories"}),"\n",(0,a.jsx)(s.h3,{id:"grass-swaps",children:"Grass Swaps"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Regular grass (default)\n{\n    category = "grass",\n    name = "regular grass", \n    prefabs = { "grass" },\n    weight = 3,\n    primary = true,\n}\n\n-- Grass gekko alternative\n{\n    category = "grass",\n    name = "grass gekko",\n    prefabs = { "grassgekko" },\n    weight = 1,\n    exclude_locations = { "cave" },\n}\n'})}),"\n",(0,a.jsx)(s.h3,{id:"twig-swaps",children:"Twig Swaps"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Regular saplings (default)\n{\n    category = "twigs",\n    name = "regular twigs",\n    prefabs = { "sapling" },\n    weight = 3,\n    primary = true,\n}\n\n-- Twiggy tree alternative\n{\n    category = "twigs", \n    name = "twiggy trees",\n    prefabs = { "twiggytree", "ground_twigs" },\n    weight = 1,\n}\n'})}),"\n",(0,a.jsx)(s.h3,{id:"berry-swaps",children:"Berry Swaps"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Regular berries (default)\n{\n    category = "berries",\n    name = "regular berries",\n    prefabs = { "berrybush" },\n    weight = 3,\n    primary = true,\n}\n\n-- Juicy berry alternative\n{\n    category = "berries",\n    name = "juicy berries", \n    prefabs = { "berrybush_juicy" },\n    weight = 1,\n}\n'})}),"\n",(0,a.jsx)(s.h2,{id:"weight-system",children:"Weight System"}),"\n",(0,a.jsx)(s.p,{children:"The swap system uses weighted random selection:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Higher weights"})," = More likely to be selected"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Primary swaps"})," have precedence in classic mode"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Location restrictions"})," filter available options"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example Weight Distribution:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:"-- 75% chance regular grass, 25% chance grass gekko\nregular_grass.weight = 3   -- 3/(3+1) = 75%\ngrass_gekko.weight = 1     -- 1/(3+1) = 25%\n"})}),"\n",(0,a.jsx)(s.h2,{id:"location-restrictions",children:"Location Restrictions"}),"\n",(0,a.jsx)(s.p,{children:"Swaps can be restricted by world location:"}),"\n",(0,a.jsx)(s.h3,{id:"exclude-locations",children:"Exclude Locations"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'{\n    category = "grass",\n    name = "grass gekko",\n    exclude_locations = { "cave" },  -- Cannot appear in caves\n}\n'})}),"\n",(0,a.jsx)(s.h3,{id:"required-locations",children:"Required Locations"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'{\n    category = "special_resource",\n    name = "surface only",\n    required_locations = { "forest" },  -- Only in forest worlds\n}\n'})}),"\n",(0,a.jsx)(s.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,a.jsx)(s.h3,{id:"custom-swap-categories",children:"Custom Swap Categories"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Add new resource category\nPrefabSwaps.AddPrefabSwap({\n    category = "rocks",\n    name = "gold rocks",\n    prefabs = { "rock_gold" },\n    weight = 1,\n})\n\nPrefabSwaps.AddPrefabSwap({\n    category = "rocks", \n    name = "regular rocks",\n    prefabs = { "rocks" },\n    weight = 5,\n    primary = true,\n})\n'})}),"\n",(0,a.jsx)(s.h3,{id:"conditional-swaps",children:"Conditional Swaps"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Swap that depends on world settings\nlocal function AddConditionalSwap(world_settings)\n    if world_settings.dangerous_world then\n        PrefabSwaps.AddPrefabSwap({\n            category = "grass",\n            name = "spiky grass",\n            prefabs = { "grass_spiky" },\n            weight = 2,\n        })\n    end\nend\n'})}),"\n",(0,a.jsx)(s.h3,{id:"checking-active-swaps",children:"Checking Active Swaps"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Determine what swaps are active after selection\nlocal function GetActiveSwaps()\n    local active = {}\n    local base_swaps = PrefabSwaps.GetBasePrefabSwaps()\n    \n    for category, swaps in pairs(base_swaps) do\n        for i, swap in ipairs(swaps) do\n            if swap.active then\n                active[category] = swap.name\n                break\n            end\n        end\n    end\n    \n    return active\nend\n\n-- Usage after SelectPrefabSwaps\nlocal active_swaps = GetActiveSwaps()\nprint("Active grass type:", active_swaps.grass)\n'})}),"\n",(0,a.jsx)(s.h2,{id:"integration-with-world-generation",children:"Integration with World Generation"}),"\n",(0,a.jsx)(s.p,{children:"The swap system integrates with world generation at multiple levels:"}),"\n",(0,a.jsx)(s.h3,{id:"room-generation",children:"Room Generation"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Rooms reference swap categories instead of specific prefabs\nlocal grass_prefab = GetSwapPrefab("grass")  -- Gets active grass type\n'})}),"\n",(0,a.jsx)(s.h3,{id:"set-piece-generation",children:"Set Piece Generation"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Set pieces adapt to active swaps\nif PrefabSwaps.IsPrefabInactive("sapling") then\n    -- Use twiggy trees in this set piece instead\nend\n'})}),"\n",(0,a.jsx)(s.h3,{id:"task-generation",children:"Task Generation"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Tasks query active swaps for resource placement\nlocal twig_source = GetActivePrefabForCategory("twigs")\n'})}),"\n",(0,a.jsx)(s.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"../map/worldgen.md",children:"World Generation"}),": Main world generation system"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"./prefablist.md",children:"Prefab List"}),": Complete prefab registry"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"../map/setpieces.md",children:"Set Pieces"}),": Pre-built world structures"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"../map/rooms.md",children:"Room Generation"}),": Individual room creation"]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);