"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[88751],{28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var t=n(96540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}},66629:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"game-scripts/core-systems/networking-communication/chat-commands/chathistory","title":"ChatHistory","description":"Chat history management system for storing, synchronizing, and filtering chat messages","source":"@site/docs/game-scripts/core-systems/networking-communication/chat-commands/chathistory.md","sourceDirName":"game-scripts/core-systems/networking-communication/chat-commands","slug":"/game-scripts/core-systems/networking-communication/chat-commands/chathistory","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/chat-commands/chathistory","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"chathistory","title":"ChatHistory","description":"Chat history management system for storing, synchronizing, and filtering chat messages","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Built-in User Commands System","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/chat-commands/builtinusercommands"},"next":{"title":"User Commands System","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/chat-commands/usercommands"}}');var r=n(74848),i=n(28453);const a={id:"chathistory",title:"ChatHistory",description:"Chat history management system for storing, synchronizing, and filtering chat messages",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="ChatHistory",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Constants",id:"constants",level:2},{value:"MAX_CHAT_HISTORY",id:"max_chat_history",level:3},{value:"NPC_CHATTER_MAX_CHAT_NO_DUPES",id:"npc_chatter_max_chat_no_dupes",level:3},{value:"Enumerations",id:"enumerations",level:2},{value:"ChatTypes",id:"chattypes",level:3},{value:"NoWordFilterForChatType",id:"nowordfilterforchattype",level:3},{value:"Classes/Components",id:"classescomponents",level:2},{value:"ChatHistoryManager",id:"chathistorymanager",level:3},{value:"Properties",id:"properties",level:4},{value:"Methods",id:"methods",level:4},{value:"AddToHistory(type, sender_userid, sender_netid, sender_name, message, colour, icondata, whisper, localonly, text_filter_context)",id:"add-to-history",level:5},{value:"GetChatMessageAtIndex(idx)",id:"get-chat-message-at-index",level:5},{value:"GenerateChatMessage(type, sender_userid, sender_netid, sender_name, message, colour, icondata, whisper, localonly, text_filter_context)",id:"generate-chat-message",level:5},{value:"OnSay(guid, userid, netid, name, prefab, message, colour, whisper, isemote, user_vanity)",id:"on-say",level:5},{value:"OnAnnouncement(message, colour, announce_type)",id:"on-announcement",level:5},{value:"OnSystemMessage(message)",id:"on-system-message",level:5},{value:"OnChatterMessage(inst, name_colour, message, colour, user_vanity, user_vanity_bg, priority)",id:"on-chatter-message",level:5},{value:"AddChatHistoryListener(fn)",id:"add-chat-history-listener",level:5},{value:"RemoveChatHistoryListener(fn)",id:"remove-chat-history-listener",level:5},{value:"SendCommandResponse(messages)",id:"send-command-response",level:5},{value:"RequestChatHistory()",id:"request-chat-history",level:5},{value:"SendChatHistory(userid, last_message_hash, first_message_hash)",id:"send-chat-history",level:5},{value:"RecieveChatHistory(chat_history)",id:"receive-chat-history",level:5},{value:"GetChatHistory()",id:"get-chat-history",level:5},{value:"SetChatHistory(history)",id:"set-chat-history",level:5},{value:"HasHistory()",id:"has-history",level:5},{value:"JoinServer()",id:"join-server",level:5},{value:"GetDisplayName(name, prefab)",id:"get-display-name",level:5},{value:"GetLastDeletedChatMessage()",id:"get-last-deleted-chat-message",level:5},{value:"Message Object Structure",id:"message-object-structure",level:2},{value:"Global Instance",id:"global-instance",level:2},{value:"ChatHistory",id:"chathistory-1",level:3},{value:"Common Uses",id:"common-uses",level:2},{value:"Basic Chat System Integration",id:"basic-chat-system-integration",level:3},{value:"NPC Chatter with Filtering",id:"npc-chatter-with-filtering",level:3},{value:"Chat History Display",id:"chat-history-display",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"chathistory",children:"ChatHistory"})}),"\n",(0,r.jsx)(s.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Build Version"}),(0,r.jsx)(s.th,{children:"Change Date"}),(0,r.jsx)(s.th,{children:"Change Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"676042"}),(0,r.jsx)(s.td,{children:"2025-06-21"}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.strong,{children:"ChatHistory"})," system manages chat message storage, synchronization, and filtering in Don't Starve Together. It provides a circular buffer for chat messages with network synchronization between clients and server, word filtering for content moderation, and support for multiple chat types including player messages, emotes, announcements, and NPC chatter."]}),"\n",(0,r.jsx)(s.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Add a system message\nChatHistory:OnSystemMessage("Player Wilson has joined the game")\n\n-- Add chat listener for UI updates\nlocal function UpdateChatUI(chatMessage)\n    if chatMessage.type == ChatTypes.Message then\n        print(string.format("%s says: %s", chatMessage.sender, chatMessage.message))\n    end\nend\nChatHistory:AddChatHistoryListener(UpdateChatUI)\n\n-- Get recent messages\nfor i = 1, 5 do\n    local msg = ChatHistory:GetChatMessageAtIndex(i)\n    if msg then\n        print("Message:", msg.message)\n    end\nend\n'})}),"\n",(0,r.jsx)(s.h2,{id:"constants",children:"Constants"}),"\n",(0,r.jsx)(s.h3,{id:"max_chat_history",children:"MAX_CHAT_HISTORY"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Value:"})," ",(0,r.jsx)(s.code,{children:"100"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"})," Maximum number of chat messages stored in the circular buffer."]}),"\n",(0,r.jsx)(s.h3,{id:"npc_chatter_max_chat_no_dupes",children:"NPC_CHATTER_MAX_CHAT_NO_DUPES"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Value:"})," ",(0,r.jsx)(s.code,{children:"20"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"})," Maximum range for checking duplicate NPC chatter messages to prevent spam."]}),"\n",(0,r.jsx)(s.h2,{id:"enumerations",children:"Enumerations"}),"\n",(0,r.jsx)(s.h3,{id:"chattypes",children:"ChatTypes"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"})," Enumeration defining different types of chat messages."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Values:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ChatTypes.Message"})," (1): Regular player chat messages"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ChatTypes.Emote"})," (2): Player emote actions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ChatTypes.Announcement"})," (3): Server announcements"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ChatTypes.SkinAnnouncement"})," (4): Skin unlock announcements"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ChatTypes.SystemMessage"})," (5): System-generated messages"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ChatTypes.CommandResponse"})," (6): Responses to admin commands"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ChatTypes.ChatterMessage"})," (7): NPC/creature chatter (client-side only)"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'if chatMessage.type == ChatTypes.Announcement then\n    print("Server announcement:", chatMessage.message)\nend\n'})}),"\n",(0,r.jsx)(s.h3,{id:"nowordfilterforchattype",children:"NoWordFilterForChatType"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"})," Table defining which chat types bypass word filtering."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Values:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"[ChatTypes.SkinAnnouncement]"})," = false"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"[ChatTypes.CommandResponse]"})," = true"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"classescomponents",children:"Classes/Components"}),"\n",(0,r.jsx)(s.h3,{id:"chathistorymanager",children:"ChatHistoryManager"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"})," Main class managing chat history storage, network synchronization, and message filtering using a circular buffer system."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"listeners"})," (table): Registered callback functions for message notifications"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"history"})," (table): Circular buffer storing chat messages"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"history_start"})," (number): Current position in circular buffer"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"request_history_start"})," (number): Starting index for history requests"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"join_server"})," (boolean): Flag indicating if player is joining server"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"max_chat_history_plus_one"})," (table): Last overwritten message reference"]}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h5,{id:"add-to-history",children:"AddToHistory(type, sender_userid, sender_netid, sender_name, message, colour, icondata, whisper, localonly, text_filter_context)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nAdds a new chat message to the history buffer with duplicate filtering for NPC chatter and automatic listener notification."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"type"})," (number): Chat type from ChatTypes enumeration"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sender_userid"})," (string): Unique user identifier for the sender"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sender_netid"})," (number): Network entity ID of the sender"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sender_name"})," (string): Display name of the message sender"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"message"})," (string): Chat message content text"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"colour"})," (table): Color data for message display (RGBA format)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"icondata"})," (string/table): Profile icon or vanity data"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"whisper"})," (boolean): Whether message is a private whisper"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"localonly"})," (boolean): Whether message stays on local client only"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"text_filter_context"})," (number): Context for content filtering system"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"(table): Generated chat message object, or nil if filtered out"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Add regular player message\nlocal chatMsg = ChatHistory:AddToHistory(\n    ChatTypes.Message,\n    "player123",\n    456,\n    "Wilson",\n    "Hello everyone!",\n    {1, 1, 1, 1},  -- White color\n    "default",\n    false,  -- Not whisper\n    false,  -- Not local only\n    TEXT_FILTER_CTX_CHAT\n)\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Stable implementation since build 676042"}),"\n"]}),"\n",(0,r.jsx)(s.h5,{id:"get-chat-message-at-index",children:"GetChatMessageAtIndex(idx)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nRetrieves a chat message by its position in history, where index 1 returns the newest message."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"idx"})," (number): History index (1 = newest, MAX_CHAT_HISTORY = oldest)"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"(table): Chat message object, or nil if no message exists at index"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Get most recent message\nlocal latest = ChatHistory:GetChatMessageAtIndex(1)\nif latest then\n    print("Latest message:", latest.message)\nend\n\n-- Display recent chat history\nfor i = 1, 10 do\n    local msg = ChatHistory:GetChatMessageAtIndex(i)\n    if msg then\n        print(string.format("[%d] %s: %s", i, msg.sender or "System", msg.message))\n    end\nend\n'})}),"\n",(0,r.jsx)(s.h5,{id:"generate-chat-message",children:"GenerateChatMessage(type, sender_userid, sender_netid, sender_name, message, colour, icondata, whisper, localonly, text_filter_context)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nCreates a formatted chat message object without adding it to history. Applies word filtering and color formatting."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Same as AddToHistory method"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"(table): Formatted chat message with all display properties"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Generate message object for processing\nlocal msgObj = ChatHistory:GenerateChatMessage(\n    ChatTypes.Announcement,\n    nil, nil, nil,\n    "Server restart in 5 minutes",\n    ANNOUNCEMENT_COLOR,\n    nil, false, false, nil\n)\n'})}),"\n",(0,r.jsx)(s.h5,{id:"on-say",children:"OnSay(guid, userid, netid, name, prefab, message, colour, whisper, isemote, user_vanity)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nHandles regular player chat messages and emotes with distance-based filtering for whispers."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"guid"})," (number): Entity GUID of the speaker"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"userid"})," (string): Player user ID"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"netid"})," (number): Network ID of the player"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"name"})," (string): Player display name"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"prefab"})," (string): Character prefab name"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"message"})," (string): Chat message content"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"colour"})," (table): Message color data"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"whisper"})," (boolean): Is whisper message"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"isemote"})," (boolean): Is emote action"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"user_vanity"})," (table): Vanity items data"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Typically called by network events\nChatHistory:OnSay(\n    player.GUID,\n    player.userid,\n    player.Network:GetNetworkID(),\n    player:GetDisplayName(),\n    player.prefab,\n    "Hello world!",\n    player.chat_colour,\n    false,  -- Not whisper\n    false,  -- Not emote\n    player.vanity_items\n)\n'})}),"\n",(0,r.jsx)(s.h5,{id:"on-announcement",children:"OnAnnouncement(message, colour, announce_type)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nHandles server announcements with special formatting and color coding."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"message"})," (string): Announcement message text"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"colour"})," (table): Message color data"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"announce_type"})," (string): Type of announcement for icon display"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Add server announcement\nChatHistory:OnAnnouncement(\n    "Welcome to the server!",\n    ANNOUNCEMENT_COLOR,\n    ANNOUNCE_TYPE.GENERAL\n)\n'})}),"\n",(0,r.jsx)(s.h5,{id:"on-system-message",children:"OnSystemMessage(message)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nAdds system-generated messages with standard formatting."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"message"})," (string): System message content"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Add system notification\nChatHistory:OnSystemMessage("Player Wilson has joined the game")\n'})}),"\n",(0,r.jsx)(s.h5,{id:"on-chatter-message",children:"OnChatterMessage(inst, name_colour, message, colour, user_vanity, user_vanity_bg, priority)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nHandles NPC and creature chatter with duplicate filtering and priority-based display control."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"inst"})," (Entity): Creature/NPC entity instance"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"name_colour"})," (table): Name display color"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"message"})," (string): Chatter message text"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"colour"})," (table): Message color data"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"user_vanity"})," (string): Icon data for the creature"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"user_vanity_bg"})," (string): Icon background data"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"priority"})," (number): Chat priority level for filtering"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Add creature chatter\nlocal spider = GetClosestInstWithTag("spider", ThePlayer, 10)\nif spider then\n    ChatHistory:OnChatterMessage(\n        spider,\n        MONSTER_NAME_COLOR,\n        "*chittering sounds*",\n        MONSTER_CHAT_COLOR,\n        "spider_icon",\n        "dark_bg",\n        1  -- Low priority\n    )\nend\n'})}),"\n",(0,r.jsx)(s.h5,{id:"add-chat-history-listener",children:"AddChatHistoryListener(fn)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nRegisters a callback function to receive notifications when new chat messages are added."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"fn"})," (function): Callback function that receives chat message objects"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Register UI update listener\nlocal function UpdateChatUI(chatMessage)\n    if chatMessage.type == ChatTypes.Message then\n        print(string.format("%s says: %s", chatMessage.sender, chatMessage.message))\n    end\nend\n\nChatHistory:AddChatHistoryListener(UpdateChatUI)\n'})}),"\n",(0,r.jsx)(s.h5,{id:"remove-chat-history-listener",children:"RemoveChatHistoryListener(fn)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nUnregisters a chat message listener to prevent memory leaks."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"fn"})," (function): Previously registered callback function"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"-- Clean up listener when UI is destroyed\nChatHistory:RemoveChatHistoryListener(UpdateChatUI)\n"})}),"\n",(0,r.jsx)(s.h5,{id:"send-command-response",children:"SendCommandResponse(messages)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nAdds command response messages to chat history, supporting both single strings and arrays."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"messages"})," (string/table): Single message or array of messages"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Single response\nChatHistory:SendCommandResponse("Current day: " .. TheWorld.state.cycles)\n\n-- Multiple responses  \nChatHistory:SendCommandResponse({\n    "Command executed successfully",\n    "Result: 42 items processed"\n})\n'})}),"\n",(0,r.jsx)(s.h5,{id:"request-chat-history",children:"RequestChatHistory()"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nRequests chat history from server when joining a game session for synchronization."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"-- Automatically called when joining server\nChatHistory:RequestChatHistory()\n"})}),"\n",(0,r.jsx)(s.h5,{id:"send-chat-history",children:"SendChatHistory(userid, last_message_hash, first_message_hash)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nSends chat history to a requesting client with hash-based deduplication (server-side)."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"userid"})," (string): Target user ID to send history to"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"last_message_hash"})," (number): Hash of the last message client has"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"first_message_hash"})," (number): Hash of the first message client has"]}),"\n"]}),"\n",(0,r.jsx)(s.h5,{id:"receive-chat-history",children:"RecieveChatHistory(chat_history)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nReceives and processes compressed chat history from server (client-side)."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"chat_history"})," (string): Compressed and encoded chat history data"]}),"\n"]}),"\n",(0,r.jsx)(s.h5,{id:"get-chat-history",children:"GetChatHistory()"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nSerializes current chat history for saving to disk with compression."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"(string): Compressed and encoded chat history data"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"-- Save chat history (typically in save system)\nlocal historyData = ChatHistory:GetChatHistory()\n-- Store historyData in save file\n"})}),"\n",(0,r.jsx)(s.h5,{id:"set-chat-history",children:"SetChatHistory(history)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nLoads chat history from saved data with decompression and validation."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"history"})," (string): Compressed chat history data from save file"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"-- Load chat history on game start\nif savedData.chatHistory then\n    ChatHistory:SetChatHistory(savedData.chatHistory)\nend\n"})}),"\n",(0,r.jsx)(s.h5,{id:"has-history",children:"HasHistory()"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nChecks if any chat messages exist in the history buffer."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"(boolean): True if history contains messages, false otherwise"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"-- Check if chat UI should be visible\nif ChatHistory:HasHistory() then\n    ShowChatPanel()\nend\n"})}),"\n",(0,r.jsx)(s.h5,{id:"join-server",children:"JoinServer()"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nSets flag indicating player is joining server to prevent message processing during synchronization."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"-- Called when starting to join a server\nChatHistory:JoinServer()\n"})}),"\n",(0,r.jsx)(s.h5,{id:"get-display-name",children:"GetDisplayName(name, prefab)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nSanitizes and formats display names for chat, providing fallback for empty names."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"name"})," (string): Player name to sanitize"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"prefab"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"(string): Sanitized display name or fallback text"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"local displayName = ChatHistory:GetDisplayName(player.name, player.prefab)\n"})}),"\n",(0,r.jsx)(s.h5,{id:"get-last-deleted-chat-message",children:"GetLastDeletedChatMessage()"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"}),"\nReturns the message that was overwritten when the circular buffer wrapped around."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"(table): Last overwritten chat message object, or nil"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Check what message was lost due to buffer overflow\nlocal deleted = ChatHistory:GetLastDeletedChatMessage()\nif deleted then\n    print("Oldest message was deleted:", deleted.message)\nend\n'})}),"\n",(0,r.jsx)(s.h2,{id:"message-object-structure",children:"Message Object Structure"}),"\n",(0,r.jsx)(s.p,{children:"Chat message objects contain the following fields:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'{\n    type = ChatTypes.Message,           -- Message type from ChatTypes enum\n    sender = "Wilson",                  -- Sender display name\n    sender_userid = "player123",        -- Sender user ID  \n    sender_netid = 456,                 -- Sender network ID\n    message = "Hello everyone!",        -- Message content\n    s_colour = {1, 1, 1, 1},           -- Sender name color (RGBA)\n    m_colour = {0.8, 0.8, 0.8, 1},     -- Message text color (RGBA)\n    icondata = "default",               -- Profile icon identifier\n    icondatabg = "bg_default",          -- Icon background identifier\n    localonly = false,                  -- Local-only message flag\n    text_filter_context = TEXT_FILTER_CTX_CHAT  -- Word filter context\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"global-instance",children:"Global Instance"}),"\n",(0,r.jsx)(s.h3,{id:"chathistory-1",children:"ChatHistory"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Status:"})," stable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Description:"})," Global singleton instance of ChatHistoryManager available throughout the game."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Global access to chat history system\nChatHistory:OnSystemMessage("Game started")\nlocal recentMessage = ChatHistory:GetChatMessageAtIndex(1)\n'})}),"\n",(0,r.jsx)(s.h2,{id:"common-uses",children:"Common Uses"}),"\n",(0,r.jsx)(s.h3,{id:"basic-chat-system-integration",children:"Basic Chat System Integration"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Initialize chat system with listeners\nlocal function SetupChatSystem()\n    local function OnChatMessage(chatMsg)\n        -- Update UI with new message\n        local chatPanel = ThePlayer.HUD.ChatPanel\n        if chatPanel then\n            chatPanel:AddMessage(chatMsg)\n        end\n        \n        -- Log important messages\n        if chatMsg.type == ChatTypes.Announcement then\n            print("ANNOUNCEMENT:", chatMsg.message)\n        end\n    end\n    \n    ChatHistory:AddChatHistoryListener(OnChatMessage)\nend\n'})}),"\n",(0,r.jsx)(s.h3,{id:"npc-chatter-with-filtering",children:"NPC Chatter with Filtering"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"-- Add creature chatter with proper filtering\nlocal function AddCreatureChatter(creature, message, priority)\n    if not creature or not creature:IsValid() then\n        return\n    end\n    \n    -- Check if chatter is enabled in settings\n    if not Profile:GetNPCChatEnabled() then\n        return\n    end\n    \n    -- Check priority level against user preferences\n    priority = priority or 0\n    if Profile:GetNPCChatLevel() > priority then\n        return\n    end\n    \n    ChatHistory:OnChatterMessage(\n        creature,\n        CREATURE_NAME_COLOR,\n        message,\n        CREATURE_CHAT_COLOR,\n        nil,  -- No vanity icon\n        nil,  -- No background\n        priority\n    )\nend\n"})}),"\n",(0,r.jsx)(s.h3,{id:"chat-history-display",children:"Chat History Display"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Display recent chat messages\nlocal function ShowRecentChat(numMessages)\n    numMessages = numMessages or 10\n    \n    print("=== Recent Chat History ===")\n    for i = 1, numMessages do\n        local msg = ChatHistory:GetChatMessageAtIndex(i)\n        if not msg then break end\n        \n        local sender = msg.sender or "System"\n        local content = msg.message\n        \n        if msg.type == ChatTypes.Emote then\n            print("* " .. content)\n        elseif msg.type == ChatTypes.Announcement then\n            print("[ANNOUNCEMENT] " .. content)\n        else\n            print(sender .. ": " .. content)\n        end\n    end\nend\n'})}),"\n",(0,r.jsx)(s.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"mdc:dst-api-webdocs/docs/game-scripts/core-systems/networking.md",children:"Networking"}),": Message synchronization and RPC calls"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"mdc:dst-api-webdocs/docs/game-scripts/widgets/",children:"UI Widgets"}),": Chat display widgets and panels"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"mdc:dst-api-webdocs/docs/game-scripts/core-systems/text-filtering.md",children:"Text Filtering"}),": Content moderation system"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"mdc:dst-api-webdocs/docs/game-scripts/core-systems/player-management.md",children:"Player Management"}),": Player identification"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"mdc:dst-api-webdocs/docs/game-scripts/core-systems/save-system.md",children:"Save System"}),": Chat history persistence"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);