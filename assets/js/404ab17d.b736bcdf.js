"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4552],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},9054:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"api-vanilla/getting-started/troubleshooting-guide","title":"Troubleshooting Guide","description":"This guide provides solutions for common errors and issues you might encounter when developing mods for Don\'t Starve Together.","source":"@site/docs/api-vanilla/getting-started/troubleshooting-guide.md","sourceDirName":"api-vanilla/getting-started","slug":"/api/troubleshooting-guide","permalink":"/dst-api-webdocs/docs/api/troubleshooting-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"troubleshooting-guide","title":"Troubleshooting Guide","sidebar_position":5,"slug":"/api/troubleshooting-guide"},"sidebar":"docs","previous":{"title":"Debugging and Testing","permalink":"/dst-api-webdocs/docs/api/debugging-and-testing"},"next":{"title":"Core Systems","permalink":"/dst-api-webdocs/docs/category/core-systems"}}');var t=i(4848),s=i(8453);const o={id:"troubleshooting-guide",title:"Troubleshooting Guide",sidebar_position:5,slug:"/api/troubleshooting-guide"},l="Troubleshooting Guide",a={},d=[{value:"Common Errors and Solutions",id:"common-errors-and-solutions",level:2},{value:"Lua Script Errors",id:"lua-script-errors",level:3},{value:"Mod Loading Errors",id:"mod-loading-errors",level:3},{value:"Component-Related Errors",id:"component-related-errors",level:3},{value:"Network Synchronization Issues",id:"network-synchronization-issues",level:3},{value:"Debugging Techniques",id:"debugging-techniques",level:2},{value:"Reading and Understanding Error Messages",id:"reading-and-understanding-error-messages",level:3},{value:"Using Log Files",id:"using-log-files",level:3},{value:"Comprehensive Guide to Reading Logs and Error Messages",id:"comprehensive-guide-to-reading-logs-and-error-messages",level:3},{value:"Understanding DST Log Structure",id:"understanding-dst-log-structure",level:4},{value:"Log File Anatomy",id:"log-file-anatomy",level:5},{value:"Log Entry Format",id:"log-entry-format",level:5},{value:"Common Error Types and How to Interpret Them",id:"common-error-types-and-how-to-interpret-them",level:4},{value:"1. Nil Value Errors",id:"1-nil-value-errors",level:5},{value:"2. Function Call Errors",id:"2-function-call-errors",level:5},{value:"3. Type Errors",id:"3-type-errors",level:5},{value:"4. Stack Overflow Errors",id:"4-stack-overflow-errors",level:5},{value:"5. Network Errors",id:"5-network-errors",level:5},{value:"Advanced Log Analysis Techniques",id:"advanced-log-analysis-techniques",level:4},{value:"Extracting Relevant Information",id:"extracting-relevant-information",level:5},{value:"Creating Timestamped Logs",id:"creating-timestamped-logs",level:5},{value:"Tracking Error Frequency",id:"tracking-error-frequency",level:5},{value:"Analyzing Server Logs",id:"analyzing-server-logs",level:4},{value:"Connection Issues",id:"connection-issues",level:5},{value:"Performance Issues",id:"performance-issues",level:5},{value:"Client Disconnections",id:"client-disconnections",level:5},{value:"Creating Custom Logging Systems",id:"creating-custom-logging-systems",level:4},{value:"Interpreting Common DST-Specific Log Messages",id:"interpreting-common-dst-specific-log-messages",level:4},{value:"Asset Loading Errors",id:"asset-loading-errors",level:5},{value:"Component-Related Errors",id:"component-related-errors-1",level:5},{value:"Event-Related Errors",id:"event-related-errors",level:5},{value:"Practical Log Analysis Examples",id:"practical-log-analysis-examples",level:4},{value:"Example 1: Diagnosing a Nil Component Error",id:"example-1-diagnosing-a-nil-component-error",level:5},{value:"Example 2: Diagnosing a Network Error",id:"example-2-diagnosing-a-network-error",level:5},{value:"Example 3: Diagnosing a Performance Issue",id:"example-3-diagnosing-a-performance-issue",level:5},{value:"Console Commands for Log Analysis",id:"console-commands-for-log-analysis",level:4},{value:"Troubleshooting Workflow Using Logs",id:"troubleshooting-workflow-using-logs",level:4},{value:"Console Commands for Debugging",id:"console-commands-for-debugging",level:3},{value:"Compatibility Issues Between Mods",id:"compatibility-issues-between-mods",level:2},{value:"Identifying Mod Conflicts",id:"identifying-mod-conflicts",level:3},{value:"Resolving Mod Conflicts",id:"resolving-mod-conflicts",level:3},{value:"Advanced Compatibility Strategies",id:"advanced-compatibility-strategies",level:3},{value:"Mod Detection and Adaptation",id:"mod-detection-and-adaptation",level:4},{value:"Shared API System",id:"shared-api-system",level:4},{value:"Conflict Resolution Techniques",id:"conflict-resolution-techniques",level:4},{value:"1. Function Hooking with Priority",id:"1-function-hooking-with-priority",level:5},{value:"2. Safe Component Overriding",id:"2-safe-component-overriding",level:5},{value:"3. Prefab Compatibility Layer",id:"3-prefab-compatibility-layer",level:5},{value:"Handling Specific Compatibility Issues",id:"handling-specific-compatibility-issues",level:4},{value:"Conflicting Key Bindings",id:"conflicting-key-bindings",level:5},{value:"Conflicting Prefab Names",id:"conflicting-prefab-names",level:5},{value:"Conflicting Recipe Names",id:"conflicting-recipe-names",level:5},{value:"Testing for Compatibility",id:"testing-for-compatibility",level:4},{value:"Creating Compatibility Patches",id:"creating-compatibility-patches",level:4},{value:"Step-by-Step Debugging Process",id:"step-by-step-debugging-process",level:2},{value:"Step-by-Step Bug Testing Workflow",id:"step-by-step-bug-testing-workflow",level:2},{value:"1. Preparation Phase",id:"1-preparation-phase",level:3},{value:"Setup a Testing Environment",id:"setup-a-testing-environment",level:4},{value:"Create a Bug Report Template",id:"create-a-bug-report-template",level:4},{value:"2. Identification Phase",id:"2-identification-phase",level:3},{value:"Reproduce the Bug Consistently",id:"reproduce-the-bug-consistently",level:4},{value:"Gather Information",id:"gather-information",level:4},{value:"3. Isolation Phase",id:"3-isolation-phase",level:3},{value:"Narrow Down the Cause",id:"narrow-down-the-cause",level:4},{value:"Check for External Factors",id:"check-for-external-factors",level:4},{value:"4. Analysis Phase",id:"4-analysis-phase",level:3},{value:"Trace the Execution Flow",id:"trace-the-execution-flow",level:4},{value:"Check State Changes",id:"check-state-changes",level:4},{value:"5. Solution Phase",id:"5-solution-phase",level:3},{value:"Implement a Fix",id:"implement-a-fix",level:4},{value:"Test the Fix",id:"test-the-fix",level:4},{value:"6. Verification Phase",id:"6-verification-phase",level:3},{value:"Create Automated Tests",id:"create-automated-tests",level:4},{value:"Document the Bug and Solution",id:"document-the-bug-and-solution",level:4},{value:"7. Prevention Phase",id:"7-prevention-phase",level:3},{value:"Implement Error Prevention Measures",id:"implement-error-prevention-measures",level:4},{value:"Create a Bug Testing Checklist",id:"create-a-bug-testing-checklist",level:4},{value:"8. Continuous Improvement",id:"8-continuous-improvement",level:3},{value:"Implement Monitoring",id:"implement-monitoring",level:4},{value:"Establish a Bug Triage Process",id:"establish-a-bug-triage-process",level:4},{value:"Common Pitfalls and How to Avoid Them",id:"common-pitfalls-and-how-to-avoid-them",level:2},{value:"Server vs. Client Context",id:"server-vs-client-context",level:3},{value:"Memory Leaks",id:"memory-leaks",level:3},{value:"Performance Issues",id:"performance-issues-1",level:3},{value:"Save Data Corruption",id:"save-data-corruption",level:3},{value:"Getting Help",id:"getting-help",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"troubleshooting-guide",children:"Troubleshooting Guide"})}),"\n",(0,t.jsx)(n.p,{children:"This guide provides solutions for common errors and issues you might encounter when developing mods for Don't Starve Together."}),"\n",(0,t.jsx)(n.h2,{id:"common-errors-and-solutions",children:"Common Errors and Solutions"}),"\n",(0,t.jsx)(n.h3,{id:"lua-script-errors",children:"Lua Script Errors"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Solution"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"attempt to index a nil value"})}),(0,t.jsx)(n.td,{children:"Trying to access a property of an object that doesn't exist"}),(0,t.jsxs)(n.td,{children:["Check if the object exists before accessing its properties: ",(0,t.jsx)(n.code,{children:"if obj and obj.property then"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"attempt to call a nil value"})}),(0,t.jsx)(n.td,{children:"Trying to call a function that doesn't exist"}),(0,t.jsx)(n.td,{children:"Verify function names and that required modules are loaded"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"bad argument #X to function"})}),(0,t.jsx)(n.td,{children:"Passing incorrect parameter type"}),(0,t.jsx)(n.td,{children:"Check parameter types and function documentation"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"stack overflow"})}),(0,t.jsx)(n.td,{children:"Infinite recursion in your code"}),(0,t.jsx)(n.td,{children:"Look for circular function calls or unbounded recursive functions"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"attempt to perform arithmetic on X"})}),(0,t.jsx)(n.td,{children:"Using math operations on non-number values"}),(0,t.jsx)(n.td,{children:"Ensure variables are numbers before arithmetic operations"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"attempt to concatenate X"})}),(0,t.jsx)(n.td,{children:"Using string concatenation on incompatible types"}),(0,t.jsxs)(n.td,{children:["Convert values to strings before concatenation: ",(0,t.jsx)(n.code,{children:"tostring(value)"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"unexpected symbol near X"})}),(0,t.jsx)(n.td,{children:"Syntax error in your code"}),(0,t.jsx)(n.td,{children:"Check for missing brackets, commas, or other syntax issues"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"mod-loading-errors",children:"Mod Loading Errors"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error"}),(0,t.jsx)(n.th,{children:"Cause"}),(0,t.jsx)(n.th,{children:"Solution"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mod doesn't appear in mod list"}),(0,t.jsx)(n.td,{children:"Incorrect folder structure or missing modinfo.lua"}),(0,t.jsxs)(n.td,{children:["Verify your folder structure follows ",(0,t.jsx)(n.code,{children:"ModName/modinfo.lua"})," and ",(0,t.jsx)(n.code,{children:"ModName/modmain.lua"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mod crashes on load"}),(0,t.jsx)(n.td,{children:"Error in modmain.lua or required files"}),(0,t.jsx)(n.td,{children:"Check console for error messages and fix the identified issues"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Assets not loading"}),(0,t.jsx)(n.td,{children:"Incorrect path or format"}),(0,t.jsx)(n.td,{children:"Verify asset paths and formats in your modmain.lua"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:'"Error loading mod" message'}),(0,t.jsx)(n.td,{children:"Various issues with mod structure or code"}),(0,t.jsx)(n.td,{children:"Check the log file for detailed error messages"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Mod loads but doesn't work"}),(0,t.jsx)(n.td,{children:"Initialization issues or errors in event handlers"}),(0,t.jsx)(n.td,{children:"Add debug prints to trace execution flow and identify where it fails"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"component-related-errors",children:"Component-Related Errors"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error"}),(0,t.jsx)(n.th,{children:"Cause"}),(0,t.jsx)(n.th,{children:"Solution"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"entity.components.X is nil"})}),(0,t.jsx)(n.td,{children:"Component doesn't exist on the entity"}),(0,t.jsxs)(n.td,{children:["Check if the entity has the component before accessing it: ",(0,t.jsx)(n.code,{children:"if entity.components.health then"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Component functions not working"}),(0,t.jsx)(n.td,{children:"Using server-side components on client"}),(0,t.jsx)(n.td,{children:"Remember that most components only exist on the server side"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Component state not saving"}),(0,t.jsx)(n.td,{children:"Missing OnSave/OnLoad implementation"}),(0,t.jsx)(n.td,{children:"Implement proper serialization with OnSave and OnLoad functions"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Component conflicts"}),(0,t.jsx)(n.td,{children:"Multiple mods modifying the same component"}),(0,t.jsx)(n.td,{children:"Use component postinits instead of replacing components"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"network-synchronization-issues",children:"Network Synchronization Issues"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Issue"}),(0,t.jsx)(n.th,{children:"Cause"}),(0,t.jsx)(n.th,{children:"Solution"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Desync between clients"}),(0,t.jsx)(n.td,{children:"Inconsistent state between server and clients"}),(0,t.jsx)(n.td,{children:"Use proper network variables and RPC calls for synchronization"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Client-side changes not visible to others"}),(0,t.jsx)(n.td,{children:"Not using network variables"}),(0,t.jsx)(n.td,{children:"Use net_* variables for data that needs to be synchronized"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Server-only features not working"}),(0,t.jsx)(n.td,{children:"Accessing server components on client"}),(0,t.jsxs)(n.td,{children:["Check ",(0,t.jsx)(n.code,{children:"TheNet:GetIsServer()"})," before accessing server-only features"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:'"Cannot call RPC from client" error'}),(0,t.jsx)(n.td,{children:"Trying to send an RPC from the wrong side"}),(0,t.jsx)(n.td,{children:"Ensure RPCs are called from the correct context (client or server)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Lag when performing actions"}),(0,t.jsx)(n.td,{children:"Inefficient network code"}),(0,t.jsx)(n.td,{children:"Batch network updates and optimize RPC calls"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"debugging-techniques",children:"Debugging Techniques"}),"\n",(0,t.jsx)(n.h3,{id:"reading-and-understanding-error-messages",children:"Reading and Understanding Error Messages"}),"\n",(0,t.jsx)(n.p,{children:"DST error messages typically follow this format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[00:00:00]: LUA ERROR script/file_name.lua(line_number) some error message\n"})}),"\n",(0,t.jsx)(n.p,{children:"To debug effectively:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Identify the file and line number where the error occurred"}),"\n",(0,t.jsx)(n.li,{children:"Look at the error message to understand what went wrong"}),"\n",(0,t.jsx)(n.li,{children:"Check the surrounding code for issues"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"using-log-files",children:"Using Log Files"}),"\n",(0,t.jsx)(n.p,{children:"The game generates log files that contain valuable debugging information:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Windows"}),": ",(0,t.jsx)(n.code,{children:"%USERPROFILE%\\Documents\\Klei\\DoNotStarveTogether\\client_log.txt"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mac"}),": ",(0,t.jsx)(n.code,{children:"~/Documents/Klei/DoNotStarveTogether/client_log.txt"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Linux"}),": ",(0,t.jsx)(n.code,{children:"~/.klei/DoNotStarveTogether/client_log.txt"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For dedicated servers, check:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"YourDSTServerFolder/Cluster_X/Master/server_log.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"YourDSTServerFolder/Cluster_X/Caves/server_log.txt"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"comprehensive-guide-to-reading-logs-and-error-messages",children:"Comprehensive Guide to Reading Logs and Error Messages"}),"\n",(0,t.jsx)(n.h4,{id:"understanding-dst-log-structure",children:"Understanding DST Log Structure"}),"\n",(0,t.jsx)(n.p,{children:"DST log files contain a wealth of information for debugging. Here's how to effectively read and analyze them:"}),"\n",(0,t.jsx)(n.h5,{id:"log-file-anatomy",children:"Log File Anatomy"}),"\n",(0,t.jsx)(n.p,{children:"A typical DST log file contains several sections:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"System Information"}),": Details about the game version, OS, and hardware"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mod Loading"}),": Information about mods being loaded and initialized"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Game Startup"}),": World generation and game initialization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Runtime Events"}),": Game events, user actions, and errors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Shutdown Information"}),": Clean-up and exit processes"]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"log-entry-format",children:"Log Entry Format"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[HH:MM:SS]: [Category] Message content\n"})}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[12:34:56]: [Workshop] Successfully downloaded mod: 123456789\n[12:35:01]: [Network] Client connected from: 192.168.1.100\n[12:35:10]: LUA ERROR scripts/mymod/modmain.lua(25) attempt to index a nil value\n"})}),"\n",(0,t.jsx)(n.h4,{id:"common-error-types-and-how-to-interpret-them",children:"Common Error Types and How to Interpret Them"}),"\n",(0,t.jsx)(n.h5,{id:"1-nil-value-errors",children:"1. Nil Value Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"LUA ERROR scripts/mymod/modmain.lua(25) attempt to index a nil value\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it means"}),": You're trying to access a property of an object that doesn't exist."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to debug"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check line 25 in modmain.lua"}),"\n",(0,t.jsxs)(n.li,{children:["Look for expressions like ",(0,t.jsx)(n.code,{children:"something.property"})," where ",(0,t.jsx)(n.code,{children:"something"})," might be nil"]}),"\n",(0,t.jsxs)(n.li,{children:["Add a check before accessing properties: ",(0,t.jsx)(n.code,{children:"if something then something.property end"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common causes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Accessing components that don't exist on an entity"}),"\n",(0,t.jsx)(n.li,{children:"Using global variables before they're initialized"}),"\n",(0,t.jsx)(n.li,{children:"Typos in variable or function names"}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"2-function-call-errors",children:"2. Function Call Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"LUA ERROR scripts/mymod/modmain.lua(42) attempt to call a nil value\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it means"}),": You're trying to call a function that doesn't exist."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to debug"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check line 42 in modmain.lua"}),"\n",(0,t.jsxs)(n.li,{children:["Look for function calls like ",(0,t.jsx)(n.code,{children:"something:Function()"})," or ",(0,t.jsx)(n.code,{children:"Function()"})]}),"\n",(0,t.jsx)(n.li,{children:"Verify the function exists and is spelled correctly"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common causes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Calling methods on nil objects"}),"\n",(0,t.jsx)(n.li,{children:"Typos in function names"}),"\n",(0,t.jsx)(n.li,{children:"Using functions from modules that weren't required"}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"3-type-errors",children:"3. Type Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"LUA ERROR scripts/mymod/modmain.lua(67) attempt to perform arithmetic on a string value\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it means"}),": You're trying to perform an operation on a value of the wrong type."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to debug"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check line 67 in modmain.lua"}),"\n",(0,t.jsxs)(n.li,{children:["Look for operations like ",(0,t.jsx)(n.code,{children:"value + 10"})," where ",(0,t.jsx)(n.code,{children:"value"})," might not be a number"]}),"\n",(0,t.jsxs)(n.li,{children:["Add type conversion: ",(0,t.jsx)(n.code,{children:"tonumber(value) + 10"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common causes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Not converting string inputs to numbers"}),"\n",(0,t.jsx)(n.li,{children:"Mixing incompatible types in operations"}),"\n",(0,t.jsx)(n.li,{children:"Using API functions that return unexpected types"}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"4-stack-overflow-errors",children:"4. Stack Overflow Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"LUA ERROR stack overflow\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it means"}),": You have infinite recursion in your code."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to debug"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Look for functions that call themselves directly or indirectly"}),"\n",(0,t.jsx)(n.li,{children:"Check for missing base cases in recursive functions"}),"\n",(0,t.jsx)(n.li,{children:"Look for circular references in event handlers"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common causes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Recursive functions without proper termination conditions"}),"\n",(0,t.jsx)(n.li,{children:"Event handlers that trigger themselves"}),"\n",(0,t.jsx)(n.li,{children:"Circular dependencies between functions"}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"5-network-errors",children:"5. Network Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"LUA ERROR scripts/mymod/modmain.lua(120) Cannot send RPC from client\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it means"}),": You're trying to perform a server-side operation from the client."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to debug"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check line 120 in modmain.lua"}),"\n",(0,t.jsx)(n.li,{children:"Look for RPC calls or server-side operations"}),"\n",(0,t.jsxs)(n.li,{children:["Add a check for server context: ",(0,t.jsx)(n.code,{children:"if TheNet:GetIsServer() then ... end"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Common causes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Attempting to modify server-only data from client"}),"\n",(0,t.jsx)(n.li,{children:"Calling server-only functions from client code"}),"\n",(0,t.jsx)(n.li,{children:"Not properly separating client and server logic"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"advanced-log-analysis-techniques",children:"Advanced Log Analysis Techniques"}),"\n",(0,t.jsx)(n.h5,{id:"extracting-relevant-information",children:"Extracting Relevant Information"}),"\n",(0,t.jsx)(n.p,{children:"When dealing with large log files, use these techniques to find relevant information:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"On Windows"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'findstr "ERROR" client_log.txt\nfindstr "MyModName" client_log.txt\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"On Mac/Linux"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'grep "ERROR" client_log.txt\ngrep "MyModName" client_log.txt\n'})}),"\n",(0,t.jsx)(n.h5,{id:"creating-timestamped-logs",children:"Creating Timestamped Logs"}),"\n",(0,t.jsx)(n.p,{children:"Add timestamps to your debug prints to track sequence of events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'function DebugLog(message)\n    print(string.format("[%s] %s", os.date("%H:%M:%S"), message))\nend\n\n-- Usage\nDebugLog("Player entered cave")\n'})}),"\n",(0,t.jsx)(n.h5,{id:"tracking-error-frequency",children:"Tracking Error Frequency"}),"\n",(0,t.jsx)(n.p,{children:"Track how often specific errors occur:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local error_counts = {}\n\nfunction TrackError(error_type)\n    error_counts[error_type] = (error_counts[error_type] or 0) + 1\n    print(error_type .. " error occurred " .. error_counts[error_type] .. " times")\nend\n\n-- Usage\nTrackError("nil_component")\n'})}),"\n",(0,t.jsx)(n.h4,{id:"analyzing-server-logs",children:"Analyzing Server Logs"}),"\n",(0,t.jsx)(n.p,{children:"Server logs contain additional information useful for debugging multiplayer issues:"}),"\n",(0,t.jsx)(n.h5,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,t.jsx)(n.p,{children:"Look for entries like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[14:23:45]: [Shard] Lost connection to master shard\n[14:23:50]: [Shard] Reconnected to master shard\n"})}),"\n",(0,t.jsx)(n.p,{children:"These indicate network connectivity problems between server shards."}),"\n",(0,t.jsx)(n.h5,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,t.jsx)(n.p,{children:"Look for entries like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[15:34:12]: [Warning] Server tick took 245ms (warning threshold: 200ms)\n"})}),"\n",(0,t.jsx)(n.p,{children:"These indicate server performance problems that might cause lag."}),"\n",(0,t.jsx)(n.h5,{id:"client-disconnections",children:"Client Disconnections"}),"\n",(0,t.jsx)(n.p,{children:"Look for entries like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[16:45:23]: [Network] Client 'PlayerName' disconnected: Connection timed out\n"})}),"\n",(0,t.jsx)(n.p,{children:"These help diagnose player connection issues."}),"\n",(0,t.jsx)(n.h4,{id:"creating-custom-logging-systems",children:"Creating Custom Logging Systems"}),"\n",(0,t.jsx)(n.p,{children:"For complex mods, create a dedicated logging system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- In a separate file like logger.lua\nlocal Logger = {}\n\nLogger.LEVELS = {\n    DEBUG = 1,\n    INFO = 2,\n    WARNING = 3,\n    ERROR = 4\n}\n\nlocal current_level = Logger.LEVELS.INFO\nlocal log_file = "mod_log.txt"\n\nfunction Logger.SetLevel(level)\n    current_level = level\nend\n\nfunction Logger.Log(level, message, ...)\n    if level < current_level then return end\n    \n    local formatted_message = string.format(message, ...)\n    local level_str = "INFO"\n    \n    if level == Logger.LEVELS.DEBUG then level_str = "DEBUG"\n    elseif level == Logger.LEVELS.WARNING then level_str = "WARNING"\n    elseif level == Logger.LEVELS.ERROR then level_str = "ERROR"\n    end\n    \n    local log_entry = string.format("[%s][%s] %s", \n        os.date("%Y-%m-%d %H:%M:%S"),\n        level_str,\n        formatted_message\n    )\n    \n    print(log_entry)\n    \n    -- Optionally write to a file\n    -- (Note: File I/O is limited in DST mods)\nend\n\nfunction Logger.Debug(message, ...) Logger.Log(Logger.LEVELS.DEBUG, message, ...) end\nfunction Logger.Info(message, ...) Logger.Log(Logger.LEVELS.INFO, message, ...) end\nfunction Logger.Warning(message, ...) Logger.Log(Logger.LEVELS.WARNING, message, ...) end\nfunction Logger.Error(message, ...) Logger.Log(Logger.LEVELS.ERROR, message, ...) end\n\nreturn Logger\n\n-- Usage in your mod:\n-- local Logger = require "logger"\n-- Logger.SetLevel(Logger.LEVELS.DEBUG)\n-- Logger.Debug("Player position: %d, %d", x, y)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"interpreting-common-dst-specific-log-messages",children:"Interpreting Common DST-Specific Log Messages"}),"\n",(0,t.jsx)(n.h5,{id:"asset-loading-errors",children:"Asset Loading Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[12:34:56]: [Warning] Asset not found: anim/missing_file.zip\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it means"}),": The game can't find a required asset file."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to debug"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check if the file exists in your mod's files"}),"\n",(0,t.jsx)(n.li,{children:"Verify the path is correct"}),"\n",(0,t.jsx)(n.li,{children:"Make sure the file is properly formatted"}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"component-related-errors-1",children:"Component-Related Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[12:34:56]: LUA ERROR attempt to index field 'components' (a nil value)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it means"}),": You're trying to access components on an entity that doesn't exist."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to debug"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check if the entity exists before accessing components"}),"\n",(0,t.jsx)(n.li,{children:"Verify the entity has been properly initialized"}),"\n",(0,t.jsxs)(n.li,{children:["Use safer access patterns: ",(0,t.jsx)(n.code,{children:"inst and inst.components and inst.components.health"})]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"event-related-errors",children:"Event-Related Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[12:34:56]: LUA ERROR attempt to call method 'PushEvent' (a nil value)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it means"}),": You're trying to trigger an event on an invalid object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to debug"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check if the object exists before pushing events"}),"\n",(0,t.jsx)(n.li,{children:"Verify event names are correct"}),"\n",(0,t.jsx)(n.li,{children:"Make sure you're using the correct object (inst vs. TheWorld)"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"practical-log-analysis-examples",children:"Practical Log Analysis Examples"}),"\n",(0,t.jsx)(n.h5,{id:"example-1-diagnosing-a-nil-component-error",children:"Example 1: Diagnosing a Nil Component Error"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[12:34:56]: LUA ERROR scripts/mymod/modmain.lua(42) attempt to index field 'hunger' of a nil value\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Analysis"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Line 42 is trying to access ",(0,t.jsx)(n.code,{children:"something.hunger"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"something"})," is nil at this point"]}),"\n",(0,t.jsxs)(n.li,{children:["Check what ",(0,t.jsx)(n.code,{children:"something"})," should be and why it might be nil"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Potential fix"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Before\nlocal hunger_value = player.components.hunger.current\n\n-- After\nif player and player.components and player.components.hunger then\n    local hunger_value = player.components.hunger.current\nelse\n    print("Warning: Could not access hunger component")\nend\n'})}),"\n",(0,t.jsx)(n.h5,{id:"example-2-diagnosing-a-network-error",children:"Example 2: Diagnosing a Network Error"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[12:34:56]: LUA ERROR scripts/mymod/modmain.lua(87) Cannot send RPC from client\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Analysis"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Line 87 is trying to send an RPC from the client side"}),"\n",(0,t.jsx)(n.li,{children:"RPCs that modify game state must be sent from the server"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Potential fix"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Before\nSendModRPCToServer(MOD_RPC.MyMod.DoSomething, target_player)\n\n-- After\nif TheNet:GetIsServer() then\n    -- Direct server-side call\n    DoSomethingServerSide(target_player)\nelse\n    -- RPC call from client\n    SendModRPCToServer(MOD_RPC.MyMod.DoSomething, target_player)\nend\n"})}),"\n",(0,t.jsx)(n.h5,{id:"example-3-diagnosing-a-performance-issue",children:"Example 3: Diagnosing a Performance Issue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[12:34:56]: [Warning] Server tick took 245ms (warning threshold: 200ms)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Analysis"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The server is taking too long to process a game tick"}),"\n",(0,t.jsx)(n.li,{children:"This will cause lag for all players"}),"\n",(0,t.jsx)(n.li,{children:"Look for expensive operations in your mod"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Potential fix"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Before\n-- Checking all entities every frame\nAddComponentPostInit("health", function(self)\n    local old_DoDelta = self.DoDelta\n    self.DoDelta = function(self, amount, ...)\n        -- Expensive operation\n        local entities = TheSim:FindEntities(x, y, z, 100)\n        for _, ent in ipairs(entities) do\n            -- Do something with each entity\n        end\n        return old_DoDelta(self, amount, ...)\n    end\nend)\n\n-- After\n-- Use a timer to reduce frequency\nlocal EXPENSIVE_CHECK_INTERVAL = 1 -- Once per second\nlocal last_check_time = 0\n\nAddComponentPostInit("health", function(self)\n    local old_DoDelta = self.DoDelta\n    self.DoDelta = function(self, amount, ...)\n        local current_time = GetTime()\n        if current_time - last_check_time > EXPENSIVE_CHECK_INTERVAL then\n            last_check_time = current_time\n            -- Expensive operation, but less frequent\n            local entities = TheSim:FindEntities(x, y, z, 100)\n            for _, ent in ipairs(entities) do\n                -- Do something with each entity\n            end\n        end\n        return old_DoDelta(self, amount, ...)\n    end\nend)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"console-commands-for-log-analysis",children:"Console Commands for Log Analysis"}),"\n",(0,t.jsx)(n.p,{children:"Use these console commands to help with log analysis:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Enable verbose logging\nc_verboseerrors()\n\n-- Print all entities in the world\nc_listallentities()\n\n-- Print all prefabs in the game\nc_listprefabs()\n\n-- Print all components on the selected entity\nc_select(); c_listcomponents()\n\n-- Print all event listeners on the selected entity\nc_select(); c_listlisteners()\n"})}),"\n",(0,t.jsx)(n.h4,{id:"troubleshooting-workflow-using-logs",children:"Troubleshooting Workflow Using Logs"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identify the error"}),": Find the specific error message in the log"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Locate the source"}),": Note the file and line number"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Understand the context"}),": Check what happened before the error"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reproduce the issue"}),": Try to consistently trigger the error"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add debug prints"}),": Add strategic print statements around the error location"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test incrementally"}),": Make small changes and check logs after each change"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Verify the fix"}),": Ensure the error no longer appears in logs"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"console-commands-for-debugging",children:"Console Commands for Debugging"}),"\n",(0,t.jsx)(n.p,{children:"Use these console commands to help with log analysis:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Enable verbose logging\nc_verboseerrors()\n\n-- Print all entities in the world\nc_listallentities()\n\n-- Print all prefabs in the game\nc_listprefabs()\n\n-- Print all components on the selected entity\nc_select(); c_listcomponents()\n\n-- Print all event listeners on the selected entity\nc_select(); c_listlisteners()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"compatibility-issues-between-mods",children:"Compatibility Issues Between Mods"}),"\n",(0,t.jsx)(n.h3,{id:"identifying-mod-conflicts",children:"Identifying Mod Conflicts"}),"\n",(0,t.jsx)(n.p,{children:"Signs of mod conflicts include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Game crashes when specific combinations of mods are enabled"}),"\n",(0,t.jsx)(n.li,{children:"Features from one mod stop working when another is enabled"}),"\n",(0,t.jsx)(n.li,{children:"Errors mentioning functions or prefabs from other mods"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"resolving-mod-conflicts",children:"Resolving Mod Conflicts"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Load Order"}),": Adjust mod load order in the mod configuration screen"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Shared Prefabs"}),": Use ",(0,t.jsx)(n.code,{children:"AddPrefabPostInit"})," instead of replacing prefabs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component Conflicts"}),": Use component postinits and check if components were already modified"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Global Variable Conflicts"}),": Use namespaces for your global variables"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Asset Conflicts"}),": Use unique names for your assets"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example of safer component modification:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Instead of replacing a component function entirely\nlocal function SafeComponentModification(inst)\n    if inst.components.health then\n        local old_DoDelta = inst.components.health.DoDelta\n        inst.components.health.DoDelta = function(self, amount, ...)\n            print("Health changed by: " .. amount)\n            return old_DoDelta(self, amount, ...)\n        end\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-compatibility-strategies",children:"Advanced Compatibility Strategies"}),"\n",(0,t.jsx)(n.h4,{id:"mod-detection-and-adaptation",children:"Mod Detection and Adaptation"}),"\n",(0,t.jsx)(n.p,{children:"Detect and adapt to other mods being present:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if another mod is enabled\nlocal function IsModEnabled(modname)\n    for _, mod in pairs(ModManager.mods) do\n        if mod.modname == modname and mod.enabled then\n            return true\n        end\n    end\n    return false\nend\n\n-- Adapt your mod based on other mods\nif IsModEnabled("workshop-123456789") then\n    -- Compatibility code for this specific mod\n    print("Detected mod XYZ, enabling compatibility mode")\n    -- Adjust your mod\'s behavior accordingly\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"shared-api-system",children:"Shared API System"}),"\n",(0,t.jsx)(n.p,{children:"Create an API system that other mods can hook into:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- In your modmain.lua\nGLOBAL.YOUR_MOD_API = GLOBAL.YOUR_MOD_API or {}\n\n-- Add functions to your API\nGLOBAL.YOUR_MOD_API.Version = "1.0"\nGLOBAL.YOUR_MOD_API.RegisterItem = function(item_data)\n    -- Process and register items from other mods\nend\n\n-- Document your API for other modders\n'})}),"\n",(0,t.jsx)(n.h4,{id:"conflict-resolution-techniques",children:"Conflict Resolution Techniques"}),"\n",(0,t.jsx)(n.h5,{id:"1-function-hooking-with-priority",children:"1. Function Hooking with Priority"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Create a hook system with priority levels\nlocal hooks = {}\n\nfunction AddHook(event_name, fn, priority)\n    priority = priority or 0\n    hooks[event_name] = hooks[event_name] or {}\n    \n    table.insert(hooks[event_name], {\n        fn = fn,\n        priority = priority\n    })\n    \n    -- Sort hooks by priority (higher numbers run first)\n    table.sort(hooks[event_name], function(a, b)\n        return a.priority > b.priority\n    end)\nend\n\nfunction RunHooks(event_name, ...)\n    if not hooks[event_name] then return end\n    \n    local results = {}\n    for _, hook in ipairs(hooks[event_name]) do\n        local result = hook.fn(...)\n        if result ~= nil then\n            table.insert(results, result)\n        end\n    end\n    \n    return results\nend\n\n-- Usage\nAddHook("player_health_change", function(player, amount)\n    print("Hook executed with priority 10")\n    -- Return true to override default behavior\nend, 10)\n'})}),"\n",(0,t.jsx)(n.h5,{id:"2-safe-component-overriding",children:"2. Safe Component Overriding"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Safe way to override component methods\nfunction SafeOverrideComponentMethod(component_name, method_name, override_fn)\n    -- Store original component constructor\n    local original_component_fn = require("components/" .. component_name)\n    \n    -- Create a new constructor that adds our override\n    local function new_component_fn(...)\n        local component = original_component_fn(...)\n        \n        -- Store the original method\n        local original_method = component[method_name]\n        \n        -- Replace with our override that calls the original\n        component[method_name] = function(self, ...)\n            return override_fn(original_method, self, ...)\n        end\n        \n        return component\n    end\n    \n    -- Replace the component constructor\n    package.loaded["components/" .. component_name] = new_component_fn\nend\n\n-- Example usage\nSafeOverrideComponentMethod("health", "DoDelta", function(original_fn, self, amount, ...)\n    print("Health delta:", amount)\n    \n    -- You can modify the amount or add conditions\n    if amount < 0 then\n        amount = amount * 0.9 -- 10% damage reduction\n    end\n    \n    return original_fn(self, amount, ...)\nend)\n'})}),"\n",(0,t.jsx)(n.h5,{id:"3-prefab-compatibility-layer",children:"3. Prefab Compatibility Layer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Create a system to safely modify prefabs even if other mods change them\nlocal prefab_patches = {}\n\nfunction RegisterPrefabPatch(prefab_name, patch_fn, priority)\n    prefab_patches[prefab_name] = prefab_patches[prefab_name] or {}\n    \n    table.insert(prefab_patches[prefab_name], {\n        fn = patch_fn,\n        priority = priority or 0\n    })\n    \n    -- Sort patches by priority\n    table.sort(prefab_patches[prefab_name], function(a, b)\n        return a.priority > b.priority\n    end)\nend\n\n-- Apply all registered patches to a prefab\nfunction ApplyPrefabPatches(inst)\n    local prefab_name = inst.prefab\n    if not prefab_patches[prefab_name] then return end\n    \n    for _, patch in ipairs(prefab_patches[prefab_name]) do\n        patch.fn(inst)\n    end\nend\n\n-- Register patches for prefabs\nRegisterPrefabPatch("wilson", function(inst)\n    print("Patching Wilson prefab")\n    -- Your modifications here\nend, 10)\n\n-- Apply patches using AddPrefabPostInit\nfor prefab_name, _ in pairs(prefab_patches) do\n    AddPrefabPostInit(prefab_name, ApplyPrefabPatches)\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"handling-specific-compatibility-issues",children:"Handling Specific Compatibility Issues"}),"\n",(0,t.jsx)(n.h5,{id:"conflicting-key-bindings",children:"Conflicting Key Bindings"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if a key is already bound by another mod\nlocal function IsKeyAlreadyBound(key)\n    for _, mod_key in pairs(GLOBAL.TheInput:GetAllBindings()) do\n        if mod_key.key == key then\n            return true, mod_key.name\n        end\n    end\n    return false\nend\n\n-- Find an alternative key if there\'s a conflict\nlocal function FindAlternativeKey(preferred_key)\n    if not IsKeyAlreadyBound(preferred_key) then\n        return preferred_key\n    end\n    \n    -- List of alternative keys to try\n    local alternatives = {"KEY_P", "KEY_O", "KEY_I", "KEY_U"}\n    \n    for _, alt_key in ipairs(alternatives) do\n        if not IsKeyAlreadyBound(alt_key) then\n            print("Using alternative key binding:", alt_key)\n            return alt_key\n        end\n    end\n    \n    -- If all alternatives are taken, use the original but warn the user\n    print("Warning: Could not find free key binding, using", preferred_key)\n    return preferred_key\nend\n\n-- Use the result to configure your key binding\nlocal my_key = FindAlternativeKey("KEY_H")\n'})}),"\n",(0,t.jsx)(n.h5,{id:"conflicting-prefab-names",children:"Conflicting Prefab Names"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Generate a unique prefab name to avoid conflicts\nlocal function GetUniquePrefabName(base_name)\n    local modname = modname:gsub("workshop%-", "")\n    return base_name .. "_" .. modname\nend\n\n-- Use the unique name when registering your prefab\nlocal my_unique_prefab = GetUniquePrefabName("magicstaff")\n'})}),"\n",(0,t.jsx)(n.h5,{id:"conflicting-recipe-names",children:"Conflicting Recipe Names"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if a recipe already exists\nlocal function RecipeExists(name)\n    for _, recipe in ipairs(AllRecipes) do\n        if recipe.name == name then\n            return true\n        end\n    end\n    return false\nend\n\n-- Add a recipe with a fallback name if needed\nlocal function AddSafeRecipe(recipe_data)\n    if RecipeExists(recipe_data.name) then\n        local original_name = recipe_data.name\n        recipe_data.name = GetUniquePrefabName(recipe_data.name)\n        print("Recipe name conflict: renamed", original_name, "to", recipe_data.name)\n    end\n    \n    AddRecipe(recipe_data)\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"testing-for-compatibility",children:"Testing for Compatibility"}),"\n",(0,t.jsx)(n.p,{children:"Create a systematic approach to test mod compatibility:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identify popular mods"})," in the same category as yours"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create a test matrix"})," of mod combinations to test"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document known conflicts"})," and solutions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Provide configuration options"})," to handle specific mod conflicts"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example test protocol:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- In a development testing file\nlocal mods_to_test = {\n    "workshop-123456789", -- Character Framework\n    "workshop-987654321", -- Item Expansion\n    -- Add more mods to test\n}\n\nlocal function TestModCompatibility()\n    print("=== MOD COMPATIBILITY TEST ===")\n    \n    -- Test each mod individually\n    for _, mod_id in ipairs(mods_to_test) do\n        print("Testing with mod:", mod_id)\n        -- Enable just this mod and your mod\n        -- Run through test scenarios\n        -- Document any issues\n    end\n    \n    -- Test common combinations\n    print("Testing mod combinations...")\n    -- Enable specific combinations\n    -- Run through test scenarios\n    \n    print("=== TEST COMPLETE ===")\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"creating-compatibility-patches",children:"Creating Compatibility Patches"}),"\n",(0,t.jsx)(n.p,{children:"For known conflicts, create specific compatibility patches:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Compatibility patch for a specific mod\nlocal function PatchForPopularMod()\n    if not IsModEnabled("workshop-123456789") then return end\n    \n    print("Applying compatibility patch for Popular Mod")\n    \n    -- Override conflicting functions\n    local old_fn = GLOBAL.SomeModFunction\n    GLOBAL.SomeModFunction = function(...)\n        -- Modified version that works with your mod\n        return old_fn(...)\n    end\n    \n    -- Adjust your mod\'s behavior\n    YOUR_MOD_CONFIG.use_alternative_method = true\nend\n\n-- Apply patches during initialization\nAddSimPostInit(function()\n    PatchForPopularMod()\n    -- Other compatibility patches\nend)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step-debugging-process",children:"Step-by-Step Debugging Process"}),"\n",(0,t.jsx)(n.p,{children:"When encountering issues with your mod, follow this systematic approach:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identify the problem"}),": What exactly isn't working? Under what conditions?"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check error logs"}),": Look for error messages in the console and log files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Isolate the issue"}),": Disable other mods to see if it's a compatibility problem"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add debugging code"}),": Insert print statements to trace execution flow"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test incrementally"}),": Make small changes and test after each change"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Verify assumptions"}),": Check that variables contain what you expect them to"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplify"}),": Create a minimal test case that reproduces the issue"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step-bug-testing-workflow",children:"Step-by-Step Bug Testing Workflow"}),"\n",(0,t.jsx)(n.p,{children:"A systematic approach to testing and fixing bugs in DST mods can save time and frustration. Follow this workflow to efficiently identify, isolate, and resolve issues in your mods."}),"\n",(0,t.jsx)(n.h3,{id:"1-preparation-phase",children:"1. Preparation Phase"}),"\n",(0,t.jsx)(n.h4,{id:"setup-a-testing-environment",children:"Setup a Testing Environment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Create a function to reset the test environment\nfunction SetupTestEnvironment()\n    -- Clear the area\n    local x, y, z = ThePlayer.Transform:GetWorldPosition()\n    local ents = TheSim:FindEntities(x, y, z, 20)\n    for _, ent in ipairs(ents) do\n        if ent ~= ThePlayer and ent.prefab ~= "global" then\n            ent:Remove()\n        end\n    end\n    \n    -- Set up ideal testing conditions\n    c_setseasonclock("summer", 0.5)  -- Set season\n    TheWorld.state.isday = true       -- Make it daytime\n    c_speed(0)                        -- Reset game speed\n    \n    -- Give player necessary items\n    c_give("log", 10)\n    c_give("cutgrass", 10)\n    c_give("twigs", 10)\n    \n    -- Reset player state\n    ThePlayer.components.health:SetPercent(1)\n    ThePlayer.components.sanity:SetPercent(1)\n    ThePlayer.components.hunger:SetPercent(1)\n    \n    print("Test environment ready")\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"create-a-bug-report-template",children:"Create a Bug Report Template"}),"\n",(0,t.jsx)(n.p,{children:"Use a consistent format for documenting bugs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"BUG REPORT: [Short description]\nVERSION: [Mod version]\nENVIRONMENT: [Game version, OS, single/multiplayer]\nSTEPS TO REPRODUCE:\n1. [First step]\n2. [Second step]\n3. [Third step]\nEXPECTED BEHAVIOR: [What should happen]\nACTUAL BEHAVIOR: [What actually happens]\nERROR MESSAGES: [Any errors from console/logs]\nFREQUENCY: [Always/Sometimes/Rarely]\nWORKAROUND: [If any]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-identification-phase",children:"2. Identification Phase"}),"\n",(0,t.jsx)(n.h4,{id:"reproduce-the-bug-consistently",children:"Reproduce the Bug Consistently"}),"\n",(0,t.jsx)(n.p,{children:"First, establish a reliable way to reproduce the issue:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start with a clean state"}),": Disable all other mods"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document exact steps"}),": Note the precise sequence of actions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identify triggers"}),": Determine what specific conditions cause the bug"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplify"}),": Remove unnecessary steps until you have the minimal reproduction case"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"gather-information",children:"Gather Information"}),"\n",(0,t.jsx)(n.p,{children:"Collect all relevant information about the bug:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Add this to your mod to collect system information\nfunction GatherSystemInfo()\n    local info = {\n        game_version = TUNING.GAME_VERSION,\n        is_server = TheNet:GetIsServer(),\n        is_dedicated = TheNet:IsDedicated(),\n        is_master_sim = TheWorld.ismastersim,\n        platform = PLATFORM,\n        mod_version = "1.0.0", -- Your mod version\n        mods_enabled = {}\n    }\n    \n    -- Get list of enabled mods\n    for _, mod in pairs(ModManager.mods) do\n        if mod.enabled then\n            table.insert(info.mods_enabled, {\n                name = mod.name,\n                version = mod.version or "unknown"\n            })\n        end\n    end\n    \n    -- Print the information\n    print("=== System Information ===")\n    for k, v in pairs(info) do\n        if type(v) ~= "table" then\n            print(k .. ": " .. tostring(v))\n        else\n            print(k .. ":")\n            for _, item in ipairs(v) do\n                print("  - " .. item.name .. " (" .. item.version .. ")")\n            end\n        end\n    end\n    print("=========================")\n    \n    return info\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-isolation-phase",children:"3. Isolation Phase"}),"\n",(0,t.jsx)(n.h4,{id:"narrow-down-the-cause",children:"Narrow Down the Cause"}),"\n",(0,t.jsx)(n.p,{children:"Systematically eliminate possibilities:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component by component"}),": Disable parts of your mod to identify the problematic component"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Function by function"}),": Add debug prints to track which functions are being called"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Line by line"}),": Use binary search (comment out half the code, then half of the remaining code) to find the exact line causing the issue"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Example of isolating a specific component\nfunction TestComponentInIsolation(component_name)\n    print("Testing " .. component_name .. " in isolation")\n    \n    -- Temporarily disable other components\n    local disabled_components = {}\n    for name, _ in pairs(MYMOD.components) do\n        if name ~= component_name then\n            disabled_components[name] = true\n            MYMOD.components[name].enabled = false\n        end\n    end\n    \n    -- Run your test\n    print("Running test with only " .. component_name .. " enabled")\n    -- Your test code here\n    \n    -- Re-enable components\n    for name, _ in pairs(disabled_components) do\n        MYMOD.components[name].enabled = true\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"check-for-external-factors",children:"Check for External Factors"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes the bug is caused by external factors:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mod conflicts"}),": Test with different combinations of mods"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Game version"}),": Check if the bug appears in different game versions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"World settings"}),": Test with different world generation settings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Character-specific"}),": Test with different characters"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-analysis-phase",children:"4. Analysis Phase"}),"\n",(0,t.jsx)(n.h4,{id:"trace-the-execution-flow",children:"Trace the Execution Flow"}),"\n",(0,t.jsx)(n.p,{children:"Add strategic print statements to trace the execution flow:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Add this to the start of important functions\nfunction TraceFunction(name, ...)\n    local args = {...}\n    local args_str = ""\n    for i, arg in ipairs(args) do\n        args_str = args_str .. tostring(arg)\n        if i < #args then args_str = args_str .. ", " end\n    end\n    \n    print("TRACE: Entering " .. name .. "(" .. args_str .. ")")\n    \n    return function(result)\n        print("TRACE: Exiting " .. name .. " -> " .. tostring(result))\n        return result\n    end\nend\n\n-- Usage\nfunction MyFunction(a, b)\n    local trace_exit = TraceFunction("MyFunction", a, b)\n    \n    -- Function body\n    local result = a + b\n    \n    return trace_exit(result)\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"check-state-changes",children:"Check State Changes"}),"\n",(0,t.jsx)(n.p,{children:"Monitor important state changes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Track changes to a specific value\nfunction TrackValueChanges(obj, property_name)\n    local original_value = obj[property_name]\n    \n    -- Create a proxy with getter and setter\n    local proxy = {}\n    local mt = {\n        __index = function(t, k)\n            if k == property_name then\n                return original_value\n            else\n                return obj[k]\n            end\n        end,\n        __newindex = function(t, k, v)\n            if k == property_name then\n                print("Value changed: " .. property_name .. " = " .. tostring(v) .. " (was " .. tostring(original_value) .. ")")\n                print(debug.traceback("Stack trace:", 2))\n                original_value = v\n            else\n                obj[k] = v\n            end\n        end\n    }\n    \n    setmetatable(proxy, mt)\n    return proxy\nend\n\n-- Usage\nlocal tracked_player = TrackValueChanges(ThePlayer, "health")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-solution-phase",children:"5. Solution Phase"}),"\n",(0,t.jsx)(n.h4,{id:"implement-a-fix",children:"Implement a Fix"}),"\n",(0,t.jsx)(n.p,{children:"Once you've identified the cause, implement a fix:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep it simple"}),": Make the minimal change needed to fix the issue"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consider edge cases"}),": Make sure your fix handles all possible scenarios"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintain compatibility"}),": Ensure your fix doesn't break other functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add safeguards"}),": Add checks to prevent the issue from recurring"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Example of a robust fix with safeguards\nlocal old_function = SomeFunction\nfunction SomeFunction(...)\n    -- Add safeguards\n    if not TheWorld or not TheWorld.ismastersim then\n        return -- Prevent execution in invalid context\n    end\n    \n    -- Add parameter validation\n    local arg1, arg2 = ...\n    if type(arg1) ~= "number" or arg1 <= 0 then\n        print("Warning: SomeFunction received invalid arg1:", arg1)\n        arg1 = 1 -- Use safe default\n    end\n    \n    -- Call original with validated parameters\n    return old_function(arg1, arg2)\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"test-the-fix",children:"Test the Fix"}),"\n",(0,t.jsx)(n.p,{children:"Thoroughly test your fix:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Verify the fix"}),": Confirm the bug no longer occurs in the original reproduction case"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test edge cases"}),": Try extreme values and unusual conditions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check for regressions"}),": Make sure other functionality still works"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test performance"}),": Ensure the fix doesn't cause performance issues"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"6-verification-phase",children:"6. Verification Phase"}),"\n",(0,t.jsx)(n.h4,{id:"create-automated-tests",children:"Create Automated Tests"}),"\n",(0,t.jsx)(n.p,{children:"For complex mods, create automated tests to prevent regression:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Simple test framework\nlocal Tests = {}\n\nfunction Tests.AddTest(name, test_fn)\n    Tests[name] = test_fn\nend\n\nfunction Tests.RunAll()\n    local passed = 0\n    local failed = 0\n    local failed_tests = {}\n    \n    print("Running " .. #Tests .. " tests...")\n    \n    for name, test_fn in pairs(Tests) do\n        if type(test_fn) == "function" then\n            local success, result = pcall(test_fn)\n            if success and result == true then\n                passed = passed + 1\n                print("\u2713 " .. name .. " passed")\n            else\n                failed = failed + 1\n                table.insert(failed_tests, name)\n                print("\u2717 " .. name .. " failed: " .. tostring(result))\n            end\n        end\n    end\n    \n    print("Tests complete: " .. passed .. " passed, " .. failed .. " failed")\n    if failed > 0 then\n        print("Failed tests:")\n        for _, name in ipairs(failed_tests) do\n            print("  - " .. name)\n        end\n    end\nend\n\n-- Example test\nTests.AddTest("InventoryFunctions", function()\n    -- Setup\n    local player = ThePlayer\n    local had_item = player.components.inventory:Has("log", 1)\n    \n    -- Give item if needed\n    if not had_item then\n        player.components.inventory:GiveItem(SpawnPrefab("log"))\n    end\n    \n    -- Test function\n    local result = MyMod.CountPlayerItems(player, "log")\n    \n    -- Cleanup\n    if not had_item then\n        local item = player.components.inventory:FindItem(function(item) return item.prefab == "log" end)\n        if item then\n            item:Remove()\n        end\n    end\n    \n    -- Verify\n    return result > 0\nend)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"document-the-bug-and-solution",children:"Document the Bug and Solution"}),"\n",(0,t.jsx)(n.p,{children:"Create documentation for the bug and its solution:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update your bug tracker"}),": Mark the bug as fixed and document the solution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add comments"}),": Add explanatory comments to the fixed code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update release notes"}),": Include the fix in your mod's release notes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Share knowledge"}),": If appropriate, share the solution with the modding community"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"7-prevention-phase",children:"7. Prevention Phase"}),"\n",(0,t.jsx)(n.h4,{id:"implement-error-prevention-measures",children:"Implement Error Prevention Measures"}),"\n",(0,t.jsx)(n.p,{children:"Add code to prevent similar bugs in the future:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Add validation to critical functions\nfunction ValidateParameters(params, schema)\n    for name, requirements in pairs(schema) do\n        local value = params[name]\n        \n        -- Check required parameters\n        if requirements.required and value == nil then\n            return false, "Missing required parameter: " .. name\n        end\n        \n        -- Skip validation for nil optional parameters\n        if value == nil then\n            goto continue\n        end\n        \n        -- Check type\n        if requirements.type and type(value) ~= requirements.type then\n            return false, "Parameter " .. name .. " should be " .. requirements.type .. ", got " .. type(value)\n        end\n        \n        -- Check range for numbers\n        if requirements.min and value < requirements.min then\n            return false, "Parameter " .. name .. " should be >= " .. requirements.min\n        end\n        if requirements.max and value > requirements.max then\n            return false, "Parameter " .. name .. " should be <= " .. requirements.max\n        end\n        \n        ::continue::\n    end\n    \n    return true\nend\n\n-- Usage\nfunction SpawnItems(params)\n    local valid, error_msg = ValidateParameters(params, {\n        prefab = {required = true, type = "string"},\n        count = {required = true, type = "number", min = 1, max = 100},\n        position = {required = false, type = "table"}\n    })\n    \n    if not valid then\n        print("Error in SpawnItems: " .. error_msg)\n        return false\n    end\n    \n    -- Function implementation\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"create-a-bug-testing-checklist",children:"Create a Bug Testing Checklist"}),"\n",(0,t.jsx)(n.p,{children:"Develop a checklist for testing new features:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"BUG TESTING CHECKLIST:\n\n1. BASIC FUNCTIONALITY\n   [ ] Feature works as expected in single player\n   [ ] Feature works as expected in multiplayer (host)\n   [ ] Feature works as expected in multiplayer (client)\n   \n2. EDGE CASES\n   [ ] Tested with minimum values\n   [ ] Tested with maximum values\n   [ ] Tested with invalid inputs\n   [ ] Tested with empty/nil values\n   \n3. PERFORMANCE\n   [ ] No noticeable lag when using feature\n   [ ] No memory leaks over extended use\n   \n4. COMPATIBILITY\n   [ ] Works with all character mods\n   [ ] Works with popular gameplay mods\n   [ ] Works in all seasons/conditions\n   \n5. ROBUSTNESS\n   [ ] Handles interruptions gracefully\n   [ ] Recovers properly after game save/load\n   [ ] Functions correctly after player death/respawn\n   \n6. USER EXPERIENCE\n   [ ] Clear feedback when feature is used\n   [ ] No visual glitches or artifacts\n   [ ] Intuitive controls and interactions\n"})}),"\n",(0,t.jsx)(n.h3,{id:"8-continuous-improvement",children:"8. Continuous Improvement"}),"\n",(0,t.jsx)(n.h4,{id:"implement-monitoring",children:"Implement Monitoring"}),"\n",(0,t.jsx)(n.p,{children:"For complex mods, add monitoring to catch issues early:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Add performance monitoring\nfunction MonitorPerformance(name, fn)\n    return function(...)\n        local start_time = os.clock()\n        local results = {fn(...)}\n        local end_time = os.clock()\n        local duration = end_time - start_time\n        \n        -- Track performance data\n        MYMOD.performance = MYMOD.performance or {}\n        MYMOD.performance[name] = MYMOD.performance[name] or {count = 0, total_time = 0, max_time = 0}\n        MYMOD.performance[name].count = MYMOD.performance[name].count + 1\n        MYMOD.performance[name].total_time = MYMOD.performance[name].total_time + duration\n        MYMOD.performance[name].max_time = math.max(MYMOD.performance[name].max_time, duration)\n        \n        -- Alert on slow operations\n        if duration > 0.05 then -- 50ms threshold\n            print("Performance warning: " .. name .. " took " .. math.floor(duration * 1000) .. "ms")\n        end\n        \n        return unpack(results)\n    end\nend\n\n-- Usage\nMyMod.ExpensiveFunction = MonitorPerformance("ExpensiveFunction", function(...)\n    -- Original function body\nend)\n\n-- Print performance report\nfunction PrintPerformanceReport()\n    print("=== Performance Report ===")\n    for name, data in pairs(MYMOD.performance) do\n        local avg_time = data.total_time / data.count\n        print(string.format("%s: %d calls, avg %.2fms, max %.2fms", \n            name, data.count, avg_time * 1000, data.max_time * 1000))\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h4,{id:"establish-a-bug-triage-process",children:"Establish a Bug Triage Process"}),"\n",(0,t.jsx)(n.p,{children:"For ongoing mod maintenance, establish a bug triage process:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Categorize bugs"}),": Sort by severity (critical, major, minor, cosmetic)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prioritize fixes"}),": Address critical bugs first"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Track progress"}),": Maintain a list of known issues and their status"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Communicate with users"}),": Keep users informed about known issues and fixes"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By following this comprehensive bug testing workflow, you can efficiently identify, fix, and prevent bugs in your DST mods, resulting in a more stable and enjoyable experience for your users."}),"\n",(0,t.jsx)(n.h2,{id:"common-pitfalls-and-how-to-avoid-them",children:"Common Pitfalls and How to Avoid Them"}),"\n",(0,t.jsx)(n.h3,{id:"server-vs-client-context",children:"Server vs. Client Context"}),"\n",(0,t.jsx)(n.p,{children:"Remember that DST has separate server and client contexts:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Most components only exist on the server"}),"\n",(0,t.jsx)(n.li,{children:"Visual effects should be handled on the client"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"TheNet:GetIsServer()"})," and ",(0,t.jsx)(n.code,{children:"TheNet:GetIsClient()"})," to check context"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"memory-leaks",children:"Memory Leaks"}),"\n",(0,t.jsx)(n.p,{children:"Common causes of memory leaks:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Not removing event listeners when entities are removed"}),"\n",(0,t.jsx)(n.li,{children:"Creating tasks without storing references to cancel them"}),"\n",(0,t.jsx)(n.li,{children:"Accumulating data in tables without clearing old entries"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance-issues-1",children:"Performance Issues"}),"\n",(0,t.jsx)(n.p,{children:"Common performance problems:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Expensive operations in Update functions"}),"\n",(0,t.jsx)(n.li,{children:"Creating many entities or effects"}),"\n",(0,t.jsx)(n.li,{children:"Inefficient loops or table operations"}),"\n",(0,t.jsx)(n.li,{children:"Too many network updates"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"save-data-corruption",children:"Save Data Corruption"}),"\n",(0,t.jsx)(n.p,{children:"To avoid save data issues:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Properly implement OnSave and OnLoad functions"}),"\n",(0,t.jsx)(n.li,{children:"Only save necessary data"}),"\n",(0,t.jsx)(n.li,{children:"Handle missing or corrupt data gracefully"}),"\n",(0,t.jsx)(n.li,{children:"Test save/load cycles thoroughly"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,t.jsx)(n.p,{children:"If you're still stuck after trying the solutions in this guide:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Klei Forums"}),": Post in the ",(0,t.jsx)(n.a,{href:"https://forums.kleientertainment.com/forums/forum/79-dont-starve-together-mods-and-tools/",children:"Mods and Tools section"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discord"}),": Join the ",(0,t.jsx)(n.a,{href:"https://discord.gg/klei",children:"Klei Discord"})," and ask in the modding channels"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Steam Workshop"}),": Look for similar mods and study their code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub"}),": Many modders share their code on GitHub, which can be a valuable learning resource"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"When asking for help, always include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A clear description of the problem"}),"\n",(0,t.jsx)(n.li,{children:"Relevant error messages"}),"\n",(0,t.jsx)(n.li,{children:"The minimal code needed to reproduce the issue"}),"\n",(0,t.jsx)(n.li,{children:"What you've already tried to fix it"}),"\n",(0,t.jsx)(n.li,{children:"What you've already tried to fix it"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);