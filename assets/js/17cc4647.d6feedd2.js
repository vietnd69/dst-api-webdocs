"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6164],{8371:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/components/sanity","title":"Sanity","description":"The Sanity component manages an entity\'s mental state, including sanity level, effects of insanity, and sanity modifiers.","source":"@site/docs/api-vanilla/components/sanity.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/sanity","permalink":"/dst-api-webdocs/docs/api-vanilla/components/sanity","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"sanity","title":"Sanity","sidebar_position":8,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Hunger","permalink":"/dst-api-webdocs/docs/api-vanilla/components/hunger"},"next":{"title":"Burnable Component","permalink":"/dst-api-webdocs/docs/api-vanilla/components/burnable"}}');var s=t(4848),a=t(8453);const r={id:"sanity",title:"Sanity",sidebar_position:8,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},o="Sanity Component",d={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Events",id:"events",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"See also",id:"see-also",level:2},{value:"Example: Creating an Entity with Custom Sanity",id:"example-creating-an-entity-with-custom-sanity",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"sanity-component",children:"Sanity Component"})}),"\n",(0,s.jsx)(e.p,{children:"The Sanity component manages an entity's mental state, including sanity level, effects of insanity, and sanity modifiers."}),"\n",(0,s.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Add a sanity component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("sanity")\n\n-- Configure the sanity component\nlocal sanity = entity.components.sanity\nsanity:SetMax(200)\nsanity:SetPercent(1) -- Start at full sanity\n'})}),"\n",(0,s.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Property"}),(0,s.jsx)(e.th,{children:"Type"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"current"})}),(0,s.jsx)(e.td,{children:"Number"}),(0,s.jsx)(e.td,{children:"Current sanity value"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"max"})}),(0,s.jsx)(e.td,{children:"Number"}),(0,s.jsx)(e.td,{children:"Maximum sanity value"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"rate"})}),(0,s.jsx)(e.td,{children:"Number"}),(0,s.jsx)(e.td,{children:"Rate at which sanity changes over time"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"night_drain_mult"})}),(0,s.jsx)(e.td,{children:"Number"}),(0,s.jsx)(e.td,{children:"Sanity drain multiplier during nighttime"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"neg_aura_mult"})}),(0,s.jsx)(e.td,{children:"Number"}),(0,s.jsx)(e.td,{children:"Multiplier for negative auras"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"pos_aura_mult"})}),(0,s.jsx)(e.td,{children:"Number"}),(0,s.jsx)(e.td,{children:"Multiplier for positive auras"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"inducers"})}),(0,s.jsx)(e.td,{children:"Table"}),(0,s.jsx)(e.td,{children:"List of sources inducing sanity changes"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Set maximum sanity\nsanity:SetMax(200)\n\n-- Add or remove sanity\nsanity:DoDelta(10)  -- Add 10 sanity\nsanity:DoDelta(-10) -- Remove 10 sanity\n\n-- Set sanity as a percentage\nsanity:SetPercent(0.5) -- Set to 50% of max sanity\n\n-- Add a sanity inducer\nsanity:AddSanityAuraImmunity("spiders") -- Immune to spider sanity aura\n\n-- Check if insane\nlocal is_insane = sanity:IsInsane() -- Returns true if below threshold\n'})}),"\n",(0,s.jsx)(e.h2,{id:"events",children:"Events"}),"\n",(0,s.jsx)(e.p,{children:"The Sanity component triggers these events:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"sanitydelta"})," - When sanity value changes"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"goinginsane"})," - When sanity drops below the insanity threshold"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"goingsane"})," - When sanity rises above the insanity threshold"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,s.jsx)(e.p,{children:"The Sanity component often works with:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Inventory"})," - Equipped items can affect sanity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Temperature"})," - Extreme temperatures can affect sanity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Hunger"})," - Hunger state can affect sanity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"State Graph"})," - For playing insanity animations"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/health",children:"Health Component"})," - For another vital stat that works similarly"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/hunger",children:"Hunger Component"})," - For another vital stat that works similarly"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/temperature",children:"Temperature Component"})," - For temperature effects on sanity"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/equippable",children:"Equippable Component"})," - For items that affect sanity when equipped"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/edible",children:"Edible Component"})," - For food that affects sanity when eaten"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"example-creating-an-entity-with-custom-sanity",children:"Example: Creating an Entity with Custom Sanity"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'local function MakeSanityEntity()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Add health component\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(150)\n    \n    -- Configure sanity\n    inst:AddComponent("sanity")\n    local sanity = inst.components.sanity\n    \n    -- Custom sanity settings\n    sanity:SetMax(200)\n    sanity:SetPercent(1.0) -- Start at full sanity\n    sanity.night_drain_mult = 1.5 -- More sanity loss at night\n    sanity.neg_aura_mult = 0.8 -- Less affected by negative auras\n    \n    -- Add custom sanity penalties/bonuses\n    inst:DoPeriodicTask(1, function(inst)\n        if TheWorld.state.isnight and not TheWorld.state.isfullmoon then\n            -- Lose sanity faster at night (except during full moons)\n            inst.components.sanity:DoDelta(-1/60)\n        elseif TheWorld.state.isfullmoon then\n            -- Gain sanity during full moon\n            inst.components.sanity:DoDelta(2/60)\n        end\n    end)\n    \n    -- Listen for sanity changes\n    inst:ListenForEvent("sanitydelta", function(inst, data)\n        if data.newpercent <= 0.3 and data.oldpercent > 0.3 then\n            -- Low sanity effects\n            if inst.components.talker ~= nil then\n                inst.components.talker:Say("The shadows are coming...")\n            end\n            \n            -- Visual effects\n            if inst.SoundEmitter ~= nil then\n                inst.SoundEmitter:PlaySound("dontstarve/sanity/gonecrazy_stinger")\n            end\n        elseif data.newpercent <= 0.15 and data.oldpercent > 0.15 then\n            -- Very low sanity effects\n            if inst.components.talker ~= nil then\n                inst.components.talker:Say("GET OUT OF MY HEAD!")\n            end\n        elseif data.newpercent > 0.7 and data.oldpercent <= 0.7 then\n            -- Recovering sanity\n            if inst.components.talker ~= nil then\n                inst.components.talker:Say("I feel much better now.")\n            end\n        end\n    end)\n    \n    return inst\nend \n'})})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);