"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[93992],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(96540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}},43392:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"game-scripts/core-systems/development-tools/utilities/fix-character-strings","title":"Fix Character Strings","description":"Utility script for alphabetically sorting and standardizing character speech files","source":"@site/docs/game-scripts/core-systems/development-tools/utilities/fix_character_strings.md","sourceDirName":"game-scripts/core-systems/development-tools/utilities","slug":"/game-scripts/core-systems/development-tools/utilities/fix-character-strings","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/utilities/fix-character-strings","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"fix-character-strings","title":"Fix Character Strings","description":"Utility script for alphabetically sorting and standardizing character speech files","sidebar_position":5,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Data Dumper","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/utilities/dumper"},"next":{"title":"Generic Key-Value Store","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/utilities/generickv"}}');var r=i(74848),l=i(28453);const t={id:"fix-character-strings",title:"Fix Character Strings",description:"Utility script for alphabetically sorting and standardizing character speech files",sidebar_position:5,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="Fix Character Strings",d={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Script Parameters",id:"script-parameters",level:2},{value:"Command Line Arguments",id:"command-line-arguments",level:3},{value:"Functions",id:"functions",level:2},{value:"alphatable(in_table, indent)",id:"alphatable",level:3},{value:"Processing Workflow",id:"processing-workflow",level:2},{value:"File Processing Pipeline",id:"file-processing-pipeline",level:3},{value:"Example Transformation",id:"example-transformation",level:3},{value:"Key Features",id:"key-features",level:2},{value:"Alphabetical Sorting",id:"alphabetical-sorting",level:3},{value:"Proper Indentation",id:"proper-indentation",level:3},{value:"Type Handling",id:"type-handling",level:3},{value:"File Safety",id:"file-safety",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Character Speech Standardization",id:"character-speech-standardization",level:3},{value:"Batch Processing Script",id:"batch-processing-script",level:3},{value:"Development Workflow Integration",id:"development-workflow-integration",level:3},{value:"Limitations and Considerations",id:"limitations-and-considerations",level:2},{value:"Supported Data Types",id:"supported-data-types",level:3},{value:"File Requirements",id:"file-requirements",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Integration with Build Process",id:"integration-with-build-process",level:2},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"fix-character-strings",children:"Fix Character Strings"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"fix_character_strings.lua"})," is a standalone utility script designed to run outside of the game environment to standardize character speech files. It reads speech data tables, sorts them alphabetically, and outputs them in a consistent format. This tool is essential for maintaining organized and readable character dialogue files across the DST codebase."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Basic usage - sorts input file and creates .lua output\nlua fix_character_strings.lua speech_wilson\n\n# Specify custom output file\nlua fix_character_strings.lua speech_wilson.lua formatted_wilson.lua\n\n# Process character speech file\nlua fix_character_strings.lua speech_warly speech_warly_sorted.lua\n"})}),"\n",(0,r.jsx)(n.h2,{id:"script-parameters",children:"Script Parameters"}),"\n",(0,r.jsx)(n.h3,{id:"command-line-arguments",children:"Command Line Arguments"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"file_in (arg[1])"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Required:"})," Yes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Path to the input speech file (without .lua extension typically)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"file_out (arg[2])"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optional:"})," Yes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default:"})," ",(0,r.jsx)(n.code,{children:'file_in .. ".lua"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Path for the output file. If not specified, appends ",(0,r.jsx)(n.code,{children:".lua"})," to input filename"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"alphatable",children:"alphatable(in_table, indent)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRecursively sorts a nested table structure alphabetically by keys and formats it as a properly indented Lua table string."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"in_table"})," (table): The input table to sort and format"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"indent"})," (number, optional): Current indentation level for nested formatting (default: 0)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Formatted Lua table string with alphabetically sorted keys"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Algorithm:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Iterates through all key-value pairs in the input table"}),"\n",(0,r.jsx)(n.li,{children:"Formats keys appropriately (numbers get bracket notation)"}),"\n",(0,r.jsx)(n.li,{children:"Handles string values with proper quoting"}),"\n",(0,r.jsx)(n.li,{children:"Recursively processes nested tables"}),"\n",(0,r.jsx)(n.li,{children:"Sorts all items alphabetically"}),"\n",(0,r.jsx)(n.li,{children:"Adds proper indentation and structure"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local sample_data = {\n    c = "Third line",\n    a = "First line", \n    b = {\n        nested_c = "Nested third",\n        nested_a = "Nested first"\n    }\n}\n\nlocal formatted = alphatable(sample_data)\n-- Results in:\n-- {\n--     a = "First line",\n--     b = \n--     {\n--         nested_a = "Nested first",\n--         nested_c = "Nested third",\n--     },\n--     c = "Third line",\n-- }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Details:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Key formatting\nlocal key = tostring(k)\nif type(k) == "number" then\n    key = "["..key.."]"\nend\n\n-- Value formatting\nif type(v) == "string" then\n    table.insert(items, string.format("%s%s = %q,", inner_indentstr, key, v))\nelseif type(v) == "table" then\n    local str = alphatable(v, indent + 1)\n    table.insert(items, string.format("%s%s =\\n%s,", inner_indentstr, key, str))\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"processing-workflow",children:"Processing Workflow"}),"\n",(0,r.jsx)(n.h3,{id:"file-processing-pipeline",children:"File Processing Pipeline"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input Validation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Checks if ",(0,r.jsx)(n.code,{children:"file_in"})," argument is provided"]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"require()"})," to load the input speech data"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Table Sorting"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Calls ",(0,r.jsx)(n.code,{children:"alphatable()"})," on the loaded data"]}),"\n",(0,r.jsx)(n.li,{children:"Recursively sorts all nested structures"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output Generation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Prepends "return " to create valid Lua module'}),"\n",(0,r.jsx)(n.li,{children:"Writes formatted content to output file"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"File Operations"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Opens output file in write mode"}),"\n",(0,r.jsx)(n.li,{children:"Writes formatted string"}),"\n",(0,r.jsx)(n.li,{children:"Closes file handle"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-transformation",children:"Example Transformation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input (unsorted speech file):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'return {\n    ANNOUNCE_DEATH = "Oh no!",\n    ANNOUNCE_ATTACK = "Take this!",\n    ANNOUNCE_HEALTH = {\n        FULL = "I\'m feeling great!",\n        HIGH = "I\'m doing well.",\n        HALF = "I\'ve been better.",\n    },\n    ANNOUNCE_COLD = "Brrr!",\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output (sorted and formatted):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'return {\n    ANNOUNCE_ATTACK = "Take this!",\n    ANNOUNCE_COLD = "Brrr!",\n    ANNOUNCE_DEATH = "Oh no!",\n    ANNOUNCE_HEALTH = \n    {\n        FULL = "I\'m feeling great!",\n        HALF = "I\'ve been better.",\n        HIGH = "I\'m doing well.",\n    },\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsx)(n.h3,{id:"alphabetical-sorting",children:"Alphabetical Sorting"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sorts all table keys alphabetically for consistency"}),"\n",(0,r.jsx)(n.li,{children:"Maintains hierarchical structure while sorting at each level"}),"\n",(0,r.jsx)(n.li,{children:"Handles both string and numeric keys appropriately"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"proper-indentation",children:"Proper Indentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses tab characters for consistent indentation"}),"\n",(0,r.jsx)(n.li,{children:"Maintains readable nested structure"}),"\n",(0,r.jsx)(n.li,{children:"Proper formatting for multi-level tables"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"type-handling",children:"Type Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Strings"}),": Properly quoted with ",(0,r.jsx)(n.code,{children:"%q"})," format specifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Numbers"}),": Formatted with bracket notation ",(0,r.jsx)(n.code,{children:"[123]"})," when used as keys"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tables"}),": Recursively processed and formatted"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Other types"}),": Currently not handled (would need extension)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"file-safety",children:"File Safety"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Creates new output files rather than modifying in place"}),"\n",(0,r.jsx)(n.li,{children:"Handles file I/O operations safely"}),"\n",(0,r.jsx)(n.li,{children:"Provides option for custom output filenames"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"character-speech-standardization",children:"Character Speech Standardization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Standardize all character speech files\nlua fix_character_strings.lua speech_wilson\nlua fix_character_strings.lua speech_wendy  \nlua fix_character_strings.lua speech_warly\nlua fix_character_strings.lua speech_waxwell\n"})}),"\n",(0,r.jsx)(n.h3,{id:"batch-processing-script",children:"Batch Processing Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# Process all speech files in directory\nfor file in speech_*.lua; do\n    base=$(basename "$file" .lua)\n    lua fix_character_strings.lua "$base" "formatted_$file"\ndone\n'})}),"\n",(0,r.jsx)(n.h3,{id:"development-workflow-integration",children:"Development Workflow Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Before committing speech changes\nlua fix_character_strings.lua speech_newcharacter\ngit add speech_newcharacter.lua\ngit commit -m "feat: add standardized speech for new character"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"limitations-and-considerations",children:"Limitations and Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"supported-data-types",children:"Supported Data Types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Supported"}),": strings, tables, numbers (as keys)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not supported"}),": functions, userdata, boolean values, nil values"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"file-requirements",children:"File Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Input files must be valid Lua modules that can be loaded with ",(0,r.jsx)(n.code,{children:"require()"})]}),"\n",(0,r.jsx)(n.li,{children:"Input data must be a table structure"}),"\n",(0,r.jsx)(n.li,{children:"Files should follow standard speech file naming conventions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Recursive algorithm may be slow for very deeply nested structures"}),"\n",(0,r.jsx)(n.li,{children:"Memory usage scales with table size and nesting depth"}),"\n",(0,r.jsx)(n.li,{children:"File I/O is synchronous and blocking"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"The script has minimal error handling:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No validation of input file existence"}),"\n",(0,r.jsx)(n.li,{children:"No error handling for malformed Lua files"}),"\n",(0,r.jsx)(n.li,{children:"No protection against circular references in tables"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Recommended Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check file exists before processing\nif [ -f "speech_character.lua" ]; then\n    lua fix_character_strings.lua speech_character\nelse\n    echo "Speech file not found"\nfi\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-build-process",children:"Integration with Build Process"}),"\n",(0,r.jsx)(n.p,{children:"This script is typically used during development and before commits:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Development Phase"}),": Format speech files for readability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code Review"}),": Ensure consistent formatting across speech files"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI/CD Pipeline"}),": Validate that all speech files are properly formatted"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Release Preparation"}),": Standardize all character dialogue before release"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../characters/speech.md",children:"Speech Files"}),": Character-specific dialogue implementations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./localization.md",children:"Localization"}),": Multi-language string management system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./string-processing.md",children:"String Processing"}),": Text manipulation utilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./fileutil.md",children:"File Utilities"}),": General file management functions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);