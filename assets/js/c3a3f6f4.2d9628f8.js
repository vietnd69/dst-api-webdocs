"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[26367],{6029:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/utilities/vector3","title":"Vector3","description":"Object-oriented 3D vector class with operator overloading and advanced vector operations","source":"@site/docs/game-scripts/core-systems/fundamentals/utilities/vector3.md","sourceDirName":"game-scripts/core-systems/fundamentals/utilities","slug":"/game-scripts/core-systems/fundamentals/utilities/vector3","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vector3","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"vector3","title":"Vector3","description":"Object-oriented 3D vector class with operator overloading and advanced vector operations","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Vec3Util","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vec3util"},"next":{"title":"VecUtil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vecutil"}}');var t=r(74848),l=r(28453);const c={id:"vector3",title:"Vector3",description:"Object-oriented 3D vector class with operator overloading and advanced vector operations",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},i="Vector3",o={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Vector3(x, y, z)",id:"vector3-constructor",level:3},{value:"Properties",id:"properties",level:2},{value:"x, y, z",id:"vector3-properties",level:3},{value:"Operators",id:"operators",level:2},{value:"Vector3:__add(rhs)",id:"vector3-add-operator",level:3},{value:"Vector3:__sub(rhs)",id:"vector3-sub-operator",level:3},{value:"Vector3:__mul(rhs)",id:"vector3-mul-operator",level:3},{value:"Vector3:__div(rhs)",id:"vector3-div-operator",level:3},{value:"Vector3:__unm()",id:"vector3-unm-operator",level:3},{value:"Vector3:__eq(rhs)",id:"vector3-eq-operator",level:3},{value:"Vector3:__tostring()",id:"vector3-tostring-operator",level:3},{value:"Methods",id:"methods",level:2},{value:"Vector3(rhs)",id:"vector3-dot",level:3},{value:"Vector3(rhs)",id:"vector3-cross",level:3},{value:"Vector3(other)",id:"vector3-distsq",level:3},{value:"Vector3(other)",id:"vector3-dist",level:3},{value:"Vector3()",id:"vector3-lengthsq",level:3},{value:"Vector3()",id:"vector3-length",level:3},{value:"Vector3()",id:"vector3-normalize",level:3},{value:"Vector3()",id:"vector3-getnormalized",level:3},{value:"Vector3()",id:"vector3-getnormalizedandlength",level:3},{value:"Vector3()",id:"vector3-get",level:3},{value:"Vector3()",id:"vector3-isvector3",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"ToVector3(obj, y, z)",id:"tovector3",level:3},{value:"Vector3FromTheta(theta, radius)",id:"vector3fromtheta",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Distance-Based Logic",id:"distance-based-logic",level:3},{value:"Direction and Movement",id:"direction-and-movement",level:3},{value:"Circular and Orbital Movement",id:"circular-and-orbital-movement",level:3},{value:"Vector Math for Physics",id:"vector-math-for-physics",level:3},{value:"Interpolation and Animation",id:"interpolation-and-animation",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"vector3",children:"Vector3"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Vector3"})," class provides an object-oriented interface for 3D vector operations with full operator overloading support. It offers a convenient and intuitive way to work with 3D coordinates, directions, and mathematical operations. The class includes advanced features like cross products, normalization, and distance calculations while maintaining a clean, mathematical syntax through operator overloading."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Alias:"})," ",(0,t.jsx)(n.code,{children:"Point"})," - The ",(0,t.jsx)(n.code,{children:"Point"})," alias is available for semantic clarity when representing positions rather than directions."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Create vectors\nlocal pos1 = Vector3(1, 2, 3)\nlocal pos2 = Vector3(4, 5, 6)\n\n-- Use operators for vector math\nlocal sum = pos1 + pos2          -- Vector3(5, 7, 9)\nlocal diff = pos2 - pos1         -- Vector3(3, 3, 3)\nlocal scaled = pos1 * 2          -- Vector3(2, 4, 6)\n\n-- Calculate distance and direction\nlocal distance = pos1:Dist(pos2)\nlocal direction = (pos2 - pos1):GetNormalized()\n\n-- Use as Point alias for clarity\nlocal spawn_point = Point(0, 0, 0)\nlocal player_pos = Point(10, 0, 5)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.h3,{id:"vector3-constructor",children:"Vector3(x, y, z)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates a new Vector3 instance with the specified coordinates."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x"})," (number, optional): X coordinate (default: 0)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"y"})," (number, optional): Y coordinate (default: 0)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"z"})," (number, optional): Z coordinate (default: 0)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): New Vector3 instance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v1 = Vector3()              -- Vector3(0, 0, 0)\nlocal v2 = Vector3(1, 2, 3)       -- Vector3(1, 2, 3)\nlocal v3 = Vector3(5)             -- Vector3(5, 0, 0)\n\n-- Using Point alias\nlocal spawn = Point(0, 0, 0)\nlocal target = Point(10, 0, 5)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"vector3-properties",children:"x, y, z"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDirect access to the vector components."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"number"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local vec = Vector3(1, 2, 3)\nprint(vec.x)  -- 1\nprint(vec.y)  -- 2\nprint(vec.z)  -- 3\n\n-- Modify components\nvec.x = 10\nvec.y = 20\nvec.z = 30\n"})}),"\n",(0,t.jsx)(n.h2,{id:"operators",children:"Operators"}),"\n",(0,t.jsx)(n.h3,{id:"vector3-add-operator",children:"Vector3:__add(rhs)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nAdds two vectors component-wise using the ",(0,t.jsx)(n.code,{children:"+"})," operator."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rhs"})," (Vector3): Right-hand side vector"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): Sum of the two vectors"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v1 = Vector3(1, 2, 3)\nlocal v2 = Vector3(4, 5, 6)\nlocal result = v1 + v2  -- Vector3(5, 7, 9)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"vector3-sub-operator",children:"Vector3:__sub(rhs)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSubtracts the right vector from the left vector using the ",(0,t.jsx)(n.code,{children:"-"})," operator."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rhs"})," (Vector3): Right-hand side vector"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): Difference of the two vectors"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v1 = Vector3(5, 7, 9)\nlocal v2 = Vector3(1, 2, 3)\nlocal result = v1 - v2  -- Vector3(4, 5, 6)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"vector3-mul-operator",children:"Vector3:__mul(rhs)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nScales a vector by a scalar value using the ",(0,t.jsx)(n.code,{children:"*"})," operator."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rhs"})," (number): Scalar multiplier"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): Scaled vector"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(1, 2, 3)\nlocal result = v * 2.5  -- Vector3(2.5, 5, 7.5)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"vector3-div-operator",children:"Vector3:__div(rhs)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDivides a vector by a scalar value using the ",(0,t.jsx)(n.code,{children:"/"})," operator."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rhs"})," (number): Scalar divisor"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): Divided vector"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(10, 20, 30)\nlocal result = v / 2  -- Vector3(5, 10, 15)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"vector3-unm-operator",children:"Vector3:__unm()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nNegates a vector using the unary ",(0,t.jsx)(n.code,{children:"-"})," operator."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): Negated vector"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(1, -2, 3)\nlocal result = -v  -- Vector3(-1, 2, -3)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"vector3-eq-operator",children:"Vector3:__eq(rhs)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCompares two vectors for equality using the ",(0,t.jsx)(n.code,{children:"=="})," operator."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rhs"})," (Vector3): Right-hand side vector"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if vectors are equal"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v1 = Vector3(1, 2, 3)\nlocal v2 = Vector3(1, 2, 3)\nlocal v3 = Vector3(1, 2, 4)\n\nprint(v1 == v2)  -- true\nprint(v1 == v3)  -- false\n"})}),"\n",(0,t.jsx)(n.h3,{id:"vector3-tostring-operator",children:"Vector3:__tostring()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nConverts vector to string representation for debugging and display."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(string): Formatted string representation"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local v = Vector3(1.234, 2.567, 3.890)\nprint(tostring(v))  -- "(1.23, 2.57, 3.89)"\nprint(v)            -- Same as above\n'})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-dot",children:["Vector3",":Dot","(rhs)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates the dot product of two vectors. Useful for determining angles between vectors and projection calculations."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rhs"})," (Vector3): Right-hand side vector"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Dot product result"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v1 = Vector3(1, 0, 0)\nlocal v2 = Vector3(0, 1, 0)\nlocal dot = v1:Dot(v2)  -- 0 (perpendicular vectors)\n\nlocal v3 = Vector3(1, 2, 3)\nlocal v4 = Vector3(4, 5, 6)\nlocal dot2 = v3:Dot(v4)  -- 32 (1*4 + 2*5 + 3*6)\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-cross",children:["Vector3",":Cross","(rhs)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates the cross product of two vectors. The result is a vector perpendicular to both input vectors."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rhs"})," (Vector3): Right-hand side vector"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): Cross product result vector"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v1 = Vector3(1, 0, 0)\nlocal v2 = Vector3(0, 1, 0)\nlocal cross = v1:Cross(v2)  -- Vector3(0, 0, 1) - points up\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-distsq",children:["Vector3",":DistSq","(other)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates the squared distance between two vectors. More efficient than calculating actual distance when comparing distances."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"other"})," (Vector3): Other vector to measure distance to"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Squared distance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local pos1 = Vector3(0, 0, 0)\nlocal pos2 = Vector3(3, 4, 0)\nlocal distSq = pos1:DistSq(pos2)  -- 25 (3\xb2 + 4\xb2 = 25)\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-dist",children:["Vector3",":Dist","(other)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates the actual distance between two vectors."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"other"})," (Vector3): Other vector to measure distance to"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Distance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local pos1 = Vector3(0, 0, 0)\nlocal pos2 = Vector3(3, 4, 0)\nlocal distance = pos1:Dist(pos2)  -- 5\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-lengthsq",children:["Vector3",":LengthSq","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates the squared length (magnitude) of the vector. More efficient than calculating actual length for comparisons."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Squared length"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(3, 4, 5)\nlocal lengthSq = v:LengthSq()  -- 50 (3\xb2 + 4\xb2 + 5\xb2)\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-length",children:["Vector3",":Length","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates the length (magnitude) of the vector."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Length"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(3, 4, 5)\nlocal length = v:Length()  -- 7.071... (\u221a50)\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-normalize",children:["Vector3",":Normalize","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nNormalizes the vector to unit length in-place. Modifies the original vector and returns it for method chaining."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): Self (for method chaining)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(3, 4, 5)\nv:Normalize()  -- v is now a unit vector\nprint(v:Length())  -- 1.0\n\n-- Method chaining\nlocal dir = Vector3(10, 0, 10):Normalize()\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-getnormalized",children:["Vector3",":GetNormalized","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns a new normalized vector without modifying the original."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): New normalized vector"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(3, 4, 5)\nlocal normalized = v:GetNormalized()\n-- v is unchanged, normalized is the unit vector\nprint(v:Length())          -- 7.071...\nprint(normalized:Length()) -- 1.0\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-getnormalizedandlength",children:["Vector3",":GetNormalizedAndLength","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns both a normalized vector and the original length. More efficient than calling both methods separately."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3, number): Normalized vector and original length"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(6, 8, 0)\nlocal normalized, length = v:GetNormalizedAndLength()\n-- normalized = Vector3(0.6, 0.8, 0), length = 10\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-get",children:["Vector3",":Get","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the vector components as separate values."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number, number, number): X, Y, Z components"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local v = Vector3(1, 2, 3)\nlocal x, y, z = v:Get()\n-- x=1, y=2, z=3\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"vector3-isvector3",children:["Vector3",":IsVector3","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns true to identify this object as a Vector3. Used for type checking."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): Always returns true"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local v = Vector3(1, 2, 3)\nif v:IsVector3() then\n    print("This is a Vector3")\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,t.jsx)(n.h3,{id:"tovector3",children:"ToVector3(obj, y, z)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nConverts various input types to a Vector3 object. Handles nil values, existing Vector3 objects, tables, and individual components."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"obj"})," (Vector3|table|number|nil): First input (Vector3, table, or X component)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"y"})," (number, optional): Y component (if obj is a number)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"z"})," (number, optional): Z component (if obj is a number)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3|nil): Converted Vector3 or nil if input was nil"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- From existing Vector3 (returns same object)\nlocal v1 = Vector3(1, 2, 3)\nlocal v2 = ToVector3(v1)  -- v2 is the same as v1\n\n-- From table\nlocal v3 = ToVector3({4, 5, 6})  -- Vector3(4, 5, 6)\n\n-- From individual components\nlocal v4 = ToVector3(7, 8, 9)    -- Vector3(7, 8, 9)\n\n-- Nil input\nlocal v5 = ToVector3(nil)        -- nil\n"})}),"\n",(0,t.jsx)(n.h3,{id:"vector3fromtheta",children:"Vector3FromTheta(theta, radius)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates a Vector3 from an angle (theta) and optional radius. Useful for creating direction vectors or circular positioning."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"theta"})," (number): Angle in radians"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"radius"})," (number, optional): Distance from origin (default: 1)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Vector3): Vector pointing in the specified direction"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Unit vector pointing right (0 radians)\nlocal right = Vector3FromTheta(0)  -- Vector3(1, 0, 0)\n\n-- Unit vector pointing forward (-\u03c0/2 radians)\nlocal forward = Vector3FromTheta(-math.pi / 2)  -- Vector3(0, 0, -1)\n\n-- Vector at distance 5 pointing at 45 degrees\nlocal diagonal = Vector3FromTheta(math.pi / 4, 5)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"distance-based-logic",children:"Distance-Based Logic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Check if player is within interaction range\nlocal player_pos = Vector3(player.Transform:GetWorldPosition())\nlocal item_pos = Vector3(item.Transform:GetWorldPosition())\n\nlocal INTERACT_RANGE = 3\nif player_pos:Dist(item_pos) <= INTERACT_RANGE then\n    -- Player can interact with item\nend\n\n-- Optimized version using squared distance\nlocal INTERACT_RANGE_SQ = INTERACT_RANGE * INTERACT_RANGE\nif player_pos:DistSq(item_pos) <= INTERACT_RANGE_SQ then\n    -- Player can interact with item (more efficient)\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"direction-and-movement",children:"Direction and Movement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Calculate direction from current position to target\nlocal current_pos = Vector3(inst.Transform:GetWorldPosition())\nlocal target_pos = Vector3(target.Transform:GetWorldPosition())\n\nlocal direction = (target_pos - current_pos):GetNormalized()\nlocal speed = 5\n\n-- Move towards target\nlocal new_pos = current_pos + direction * speed * dt\ninst.Transform:SetPosition(new_pos:Get())\n"})}),"\n",(0,t.jsx)(n.h3,{id:"circular-and-orbital-movement",children:"Circular and Orbital Movement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Create circular movement pattern\nlocal center = Vector3(0, 0, 0)\nlocal radius = 10\nlocal time = GetTime()\nlocal speed = 2\n\nlocal offset = Vector3FromTheta(time * speed, radius)\nlocal position = center + offset\ninst.Transform:SetPosition(position:Get())\n"})}),"\n",(0,t.jsx)(n.h3,{id:"vector-math-for-physics",children:"Vector Math for Physics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Calculate reflection vector (like bouncing ball)\nlocal velocity = Vector3(5, 0, 3)\nlocal surface_normal = Vector3(0, 1, 0)  -- Upward normal\n\n-- Reflect velocity off surface\nlocal reflected = velocity - surface_normal * (2 * velocity:Dot(surface_normal))\n"})}),"\n",(0,t.jsx)(n.h3,{id:"interpolation-and-animation",children:"Interpolation and Animation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Smooth movement between two points\nlocal start_pos = Vector3(0, 0, 0)\nlocal end_pos = Vector3(10, 5, 8)\nlocal progress = 0.3  -- 30% of the way\n\nlocal current_pos = start_pos + (end_pos - start_pos) * progress\n-- Or using operator overloading for clarity:\nlocal current_pos2 = start_pos * (1 - progress) + end_pos * progress\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.p,{children:"While Vector3 provides convenient object-oriented operations, consider these performance aspects:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Object Creation"}),": Each operation creates new Vector3 objects. For high-frequency calculations, consider using ",(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vec3util",children:"Vec3Util"})," functions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Allocation"}),": Avoid creating temporary vectors in hot loops when possible"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method Chaining"}),": While convenient, chaining can create intermediate objects"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"High-Performance Alternative:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Instead of this (creates temporary objects):\nlocal result = (pos1 + pos2):GetNormalized() * speed\n\n-- Consider this for hot paths:\nlocal x, y, z = Vec3Util_Add(pos1.x, pos1.y, pos1.z, pos2.x, pos2.y, pos2.z)\nlocal norm_x, norm_y, norm_z = Vec3Util_Normalize(x, y, z)\nlocal final_x, final_y, final_z = Vec3Util_Scale(norm_x, norm_y, norm_z, speed)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vec3util",children:"Vec3Util"}),": High-performance 3D vector utility functions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vecutil",children:"VecUtil"}),": 2D vector utility functions for XZ plane operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./class.md",children:"Class"}),": Base class system used by Vector3"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/mathutil",children:"MathUtil"}),": Additional mathematical utility functions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var s=r(96540);const t={},l=s.createContext(t);function c(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);