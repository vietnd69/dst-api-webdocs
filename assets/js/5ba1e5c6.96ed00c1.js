"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[357],{8122:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api-vanilla/global-objects/theclock","title":"TheClock","description":"TheClock is the global object that provides timing and day/night cycle information in Don\'t Starve Together. It manages the game\'s time system, including day phases, season transitions, and precise time tracking.","source":"@site/docs/api-vanilla/global-objects/theclock.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/theclock","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theclock","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"theclock","title":"TheClock","sidebar_position":10}}');var a=t(4848),i=t(8453);const o={id:"theclock",title:"TheClock",sidebar_position:10},l="TheClock",r={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Day Phase Information",id:"day-phase-information",level:2},{value:"Phase Transitions",id:"phase-transitions",level:2},{value:"Time Manipulation",id:"time-manipulation",level:2},{value:"Moon Phases",id:"moon-phases",level:2},{value:"Season Integration",id:"season-integration",level:2},{value:"Real-Time Conversion",id:"real-time-conversion",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Integration with Other Global Objects",id:"integration-with-other-global-objects",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"theclock",children:"TheClock"})}),"\n",(0,a.jsx)(n.p,{children:"TheClock is the global object that provides timing and day/night cycle information in Don't Starve Together. It manages the game's time system, including day phases, season transitions, and precise time tracking."}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get the current game time (in seconds)\nlocal current_time = TheClock:GetTotalTime()\n\n-- Get the time of the current day (seconds since day began)\nlocal day_time = TheClock:GetTimeOfDay()\n\n-- Get the current day number\nlocal current_day = TheClock:GetNumCycles()\n\n-- Get normalized time of day (0-1 representing progress through day)\nlocal normalized_time = TheClock:GetNormTime()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"day-phase-information",children:"Day Phase Information"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get the current day phase ("day", "dusk", or "night")\nlocal phase = TheClock:GetPhase()\n\n-- Check if it\'s currently a specific phase\nlocal is_day = TheClock:IsDay()\nlocal is_dusk = TheClock:IsDusk()\nlocal is_night = TheClock:IsNight()\n\n-- Get the time remaining in the current phase\nlocal time_left = TheClock:GetTimeInPhase()\n\n-- Get the total length of the current phase\nlocal phase_length = TheClock:GetPhaseLength()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"phase-transitions",children:"Phase Transitions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get time until next phase\nlocal time_until_next = TheClock:GetTimeUntilPhase("day") -- Can be "day", "dusk", or "night"\n\n-- Get a normalized value (0-1) of progress through current phase\nlocal phase_progress = TheClock:GetNormPhase()\n\n-- Add a callback for phase changes\nTheClock:AddPhaseChangeCallback(function(phase)\n    print("Phase changed to: " .. phase)\nend)\n\n-- Check if the upcoming phase is a specific one\nlocal is_next_night = TheClock:IsNextPhaseName("night")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"time-manipulation",children:"Time Manipulation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Set the current time of day\nTheClock:SetTimeOfDay(time) -- time is in seconds\n\n-- Set the current cycle (day) number\nTheClock:SetNumCycles(day_number)\n\n-- Set the length of a particular phase in this world\nTheClock:SetDayLength(day_length) -- in seconds\nTheClock:SetDuskLength(dusk_length) -- in seconds\nTheClock:SetNightLength(night_length) -- in seconds\n\n-- Force an immediate phase change\nTheClock:ForcePhase("night")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"moon-phases",children:"Moon Phases"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get current moon phase\nlocal moon_phase = TheClock:GetMoonPhase()\n-- 0: New Moon\n-- 1: Quarter Moon (waxing)\n-- 2: Half Moon (waxing)\n-- 3: Three Quarter Moon (waxing)\n-- 4: Full Moon\n-- 5: Three Quarter Moon (waning)\n-- 6: Half Moon (waning)\n-- 7: Quarter Moon (waning)\n\n-- Check if tonight is a full moon\nlocal is_full_moon = TheClock:GetMoonPhase() == 4\n\n-- Check if the moon will be visible tonight\nlocal moon_visible = TheClock:IsMoonVisible()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"season-integration",children:"Season Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get remaining time in the current season\nlocal time_left = TheClock:GetSeasonLength()\n\n-- Get elapsed time in the current season\nlocal time_elapsed = TheClock:GetSeasonElapsed()\n\n-- Get a normalized value (0-1) of progress through the current season\nlocal season_progress = TheClock:GetNormSeason()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"real-time-conversion",children:"Real-Time Conversion"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Convert real seconds to game time\nlocal game_time = TheClock:ToGameTime(real_seconds)\n\n-- Convert game time to real seconds\nlocal real_time = TheClock:ToRealTime(game_time)\n\n-- Get the ratio of game time to real time\nlocal time_ratio = TheClock:GetTimeScale()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Server Authority"}),": On multiplayer games, the server has authority over time - client-side changes may not persist"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance Impact"}),": Frequent time queries in tight loops can impact performance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Time Scale"}),": Game time passes much faster than real time (typically about 20x faster)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Event Synchronization"}),": Important time-based events should be synchronized with TheClock phases"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Persistence"}),": Time settings persist with the world save file"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"integration-with-other-global-objects",children:"Integration with Other Global Objects"}),"\n",(0,a.jsx)(n.p,{children:"TheClock often works with other global objects:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theworld",children:"TheWorld"})}),": For world state that depends on time"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/theshard",children:"TheShard"})}),": For synchronizing time across server shards"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/docs/api-vanilla/global-objects/thenet",children:"TheNet"})}),": For network time synchronization"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Day/Night Mechanics"}),": Creating mechanics that depend on the time of day"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Scheduled Events"}),": Triggering events at specific times or phases"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Time-Based Resources"}),": Controlling resource spawns based on day/night"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Moon Phase Effects"}),": Creating effects that depend on the lunar cycle"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Time-Sensitive Creatures"}),": Managing creature behavior based on day/night"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);