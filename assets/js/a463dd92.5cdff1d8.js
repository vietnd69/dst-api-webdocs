"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9380],{7079:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/utils/debug-utils","title":"Debug Utils","description":"Don\'t Starve Together provides a variety of built-in utilities for debugging your mods. This page documents the available debug functions and tools that can help you troubleshoot issues and understand how your mod interacts with the game.","source":"@site/docs/api-vanilla/utils/debug-utils.md","sourceDirName":"api-vanilla/utils","slug":"/api-vanilla/utils/debug-utils","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/debug-utils","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"debug-utils","title":"Debug Utils","sidebar_position":4},"sidebar":"docs","previous":{"title":"Table Utils","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/table-utils"},"next":{"title":"File Utils","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/file-utils"}}');var o=t(4848),r=t(8453);const a={id:"debug-utils",title:"Debug Utils",sidebar_position:4},l="Debug Utils",s={},d=[{value:"Console Commands",id:"console-commands",level:2},{value:"Entity Manipulation",id:"entity-manipulation",level:3},{value:"Player Manipulation",id:"player-manipulation",level:3},{value:"World Manipulation",id:"world-manipulation",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Debug Rendering",id:"debug-rendering",level:2},{value:"Custom Debug Rendering",id:"custom-debug-rendering",level:3},{value:"Print Utilities",id:"print-utilities",level:2},{value:"Debug Watches",id:"debug-watches",level:2},{value:"Entity Debugging",id:"entity-debugging",level:2},{value:"State Graph Debugging",id:"state-graph-debugging",level:2},{value:"Network Debugging",id:"network-debugging",level:2},{value:"Performance Profiling",id:"performance-profiling",level:2},{value:"Memory Debugging",id:"memory-debugging",level:2},{value:"Integration with Mod Configuration",id:"integration-with-mod-configuration",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example: Complete Debug System",id:"example-complete-debug-system",level:2},{value:"Conclusion",id:"conclusion",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"debug-utils",children:"Debug Utils"})}),"\n",(0,o.jsx)(e.p,{children:"Don't Starve Together provides a variety of built-in utilities for debugging your mods. This page documents the available debug functions and tools that can help you troubleshoot issues and understand how your mod interacts with the game."}),"\n",(0,o.jsx)(e.h2,{id:"console-commands",children:"Console Commands"}),"\n",(0,o.jsxs)(e.p,{children:["These commands can be entered in the game console (accessed with the tilde key ",(0,o.jsx)(e.code,{children:"~"}),"):"]}),"\n",(0,o.jsx)(e.h3,{id:"entity-manipulation",children:"Entity Manipulation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'c_select()                      -- Select entity under cursor\nc_sel()                         -- Alias for c_select()\nc_spawn("prefab_name", count)   -- Spawn entity\nc_give("prefab_name", count)    -- Give item to player\nc_remove()                      -- Remove selected entity\nc_goto()                        -- Teleport to cursor position\n'})}),"\n",(0,o.jsx)(e.h3,{id:"player-manipulation",children:"Player Manipulation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"c_godmode()                     -- Toggle god mode\nc_supergodmode()                -- Toggle super god mode (unlimited resources)\nc_speedmult(multiplier)         -- Set player speed multiplier\nc_sethealth(amount)             -- Set player health\nc_sethunger(amount)             -- Set player hunger\nc_setsanity(amount)             -- Set player sanity\n"})}),"\n",(0,o.jsx)(e.h3,{id:"world-manipulation",children:"World Manipulation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'c_season("season_name")         -- Change season (winter, summer, autumn, spring)\nc_skip(days)                    -- Skip forward in time\nc_settime(time)                 -- Set time of day (0-1)\nc_setphase("day"|"dusk"|"night") -- Set time phase\nc_setweather("rain"|"snow"|"none") -- Set weather\nc_reveal()                      -- Reveal map\n'})}),"\n",(0,o.jsx)(e.h3,{id:"debugging",children:"Debugging"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"c_listallplayers()              -- List all players\nc_listprefabs()                 -- List all prefabs\nc_dumptags()                    -- Dump all entity tags\nc_dumpentities()                -- Dump all entities\nc_dumpcomponents(entity)        -- Dump components of an entity\n"})}),"\n",(0,o.jsx)(e.h2,{id:"debug-rendering",children:"Debug Rendering"}),"\n",(0,o.jsx)(e.p,{children:"The game provides functions to visualize debug information:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Enable debug rendering\nTheSim:SetDebugRenderEnabled(true)\n\n-- Physics debug rendering\nTheSim:SetDebugPhysicsRender(true)\n\n-- Debug text rendering\nTheSim:SetDebugTextRender(true)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"custom-debug-rendering",children:"Custom Debug Rendering"}),"\n",(0,o.jsx)(e.p,{children:"You can add your own debug visualizations:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Draw a line\nTheWorld.DebugRender:Line(x1, y1, z1, x2, y2, z2, r, g, b, a)\n\n-- Draw a circle\nTheWorld.DebugRender:Circle(x, y, z, radius, r, g, b, a)\n\n-- Draw a string\nTheWorld.DebugRender:String(x, y, z, text, r, g, b, a)\n\n-- Draw a box\nTheWorld.DebugRender:Box(x, y, z, w, h, d, r, g, b, a)\n"})}),"\n",(0,o.jsx)(e.h2,{id:"print-utilities",children:"Print Utilities"}),"\n",(0,o.jsx)(e.p,{children:"Enhanced printing functions for debugging:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Print a table with formatting\nfunction dumptable(obj, indent)\n    indent = indent or 0\n    local indent_str = string.rep("  ", indent)\n    \n    if type(obj) ~= "table" then\n        print(indent_str..tostring(obj))\n        return\n    end\n    \n    for k, v in pairs(obj) do\n        if type(v) == "table" then\n            print(indent_str..k..":")\n            dumptable(v, indent + 1)\n        else\n            print(indent_str..k..": "..tostring(v))\n        end\n    end\nend\n\n-- Usage\ndumptable(player.components)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"debug-watches",children:"Debug Watches"}),"\n",(0,o.jsx)(e.p,{children:"You can set up watches to monitor values over time:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Create a debug watch\nlocal function CreateWatch(name, fn)\n    if not GLOBAL.DebugWatches then\n        GLOBAL.DebugWatches = {}\n    end\n    \n    GLOBAL.DebugWatches[name] = {\n        fn = fn,\n        history = {},\n        max_history = 100\n    }\nend\n\n-- Update watches\nlocal function UpdateWatches()\n    if not GLOBAL.DebugWatches then return end\n    \n    for name, watch in pairs(GLOBAL.DebugWatches) do\n        local value = watch.fn()\n        table.insert(watch.history, value)\n        if #watch.history > watch.max_history then\n            table.remove(watch.history, 1)\n        end\n    end\nend\n\n-- Print watch values\nlocal function PrintWatch(name)\n    if not GLOBAL.DebugWatches or not GLOBAL.DebugWatches[name] then\n        print("Watch not found:", name)\n        return\n    end\n    \n    local watch = GLOBAL.DebugWatches[name]\n    local current = watch.fn()\n    \n    print("Watch:", name)\n    print("Current value:", current)\n    print("History:", table.concat(watch.history, ", "))\nend\n\n-- Example usage\nCreateWatch("player_health", function()\n    if not ThePlayer or not ThePlayer.components.health then return 0 end\n    return ThePlayer.components.health:GetPercent()\nend)\n\n-- Update watches periodically\nTheWorld:DoPeriodicTask(1, UpdateWatches)\n\n-- Add console command to print watch\nGLOBAL.c_watch = function(name)\n    PrintWatch(name)\nend\n'})}),"\n",(0,o.jsx)(e.h2,{id:"entity-debugging",children:"Entity Debugging"}),"\n",(0,o.jsx)(e.p,{children:"Functions to help debug entities:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Add a debug component to an entity\nlocal function AddDebugComponent(inst)\n    if inst.components.debuggable then return end\n    \n    inst:AddComponent("debuggable")\n    inst.components.debuggable.ondebug = function(inst)\n        print("=== DEBUG INFO FOR", inst.prefab, "===")\n        print("Position:", inst:GetPosition())\n        print("Tags:", table.concat(inst:GetDebugString(), ", "))\n        \n        print("Components:")\n        for k, v in pairs(inst.components) do\n            if type(v.GetDebugString) == "function" then\n                print("  "..k..":", v:GetDebugString())\n            else\n                print("  "..k)\n            end\n        end\n    end\nend\n\n-- Debug an entity with c_debug(entity)\nGLOBAL.c_debug = function(inst)\n    if not inst then\n        inst = GLOBAL.c_select()\n    end\n    \n    if not inst then\n        print("No entity selected")\n        return\n    end\n    \n    if inst.components.debuggable then\n        inst.components.debuggable:Debug()\n    else\n        AddDebugComponent(inst)\n        inst.components.debuggable:Debug()\n    end\nend\n'})}),"\n",(0,o.jsx)(e.h2,{id:"state-graph-debugging",children:"State Graph Debugging"}),"\n",(0,o.jsx)(e.p,{children:"Tools for debugging state graphs:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Monitor state transitions\nlocal function MonitorStateGraph(sg)\n    if sg._debug_hooked then return end\n    \n    local old_gotostate = sg.GoToState\n    sg.GoToState = function(self, statename, ...)\n        local from = self.currentstate and self.currentstate.name or "nil"\n        print("State transition:", from, "->", statename)\n        return old_gotostate(self, statename, ...)\n    end\n    \n    sg._debug_hooked = true\nend\n\n-- Add console command to monitor state graph\nGLOBAL.c_monitorsg = function(inst)\n    if not inst then\n        inst = GLOBAL.c_select()\n    end\n    \n    if not inst or not inst.sg then\n        print("No valid state graph found")\n        return\n    end\n    \n    MonitorStateGraph(inst.sg)\n    print("Monitoring state graph for", inst.prefab)\nend\n'})}),"\n",(0,o.jsx)(e.h2,{id:"network-debugging",children:"Network Debugging"}),"\n",(0,o.jsx)(e.p,{children:"Tools for debugging network synchronization:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Monitor dirty network variables\nlocal function MonitorNetVars(inst)\n    if inst._net_vars_monitored then return end\n    \n    local net_vars = {}\n    \n    -- Find all network variables\n    for k, v in pairs(inst) do\n        if type(v) == "table" and v.is_dirty ~= nil and type(v.is_dirty) == "function" then\n            table.insert(net_vars, {name = k, var = v})\n        end\n    end\n    \n    if #net_vars == 0 then\n        print("No network variables found on", inst.prefab)\n        return\n    end\n    \n    print("Found", #net_vars, "network variables on", inst.prefab)\n    for _, net_var in ipairs(net_vars) do\n        print("  "..net_var.name, "=", net_var.var:value())\n    end\n    \n    -- Monitor changes\n    inst:DoPeriodicTask(0.5, function()\n        for _, net_var in ipairs(net_vars) do\n            if net_var.var:is_dirty() then\n                print("NetVar changed:", net_var.name, "=", net_var.var:value())\n            end\n        end\n    end)\n    \n    inst._net_vars_monitored = true\nend\n\n-- Add console command to monitor network variables\nGLOBAL.c_monitornet = function(inst)\n    if not inst then\n        inst = GLOBAL.c_select()\n    end\n    \n    if not inst then\n        print("No entity selected")\n        return\n    end\n    \n    MonitorNetVars(inst)\nend\n'})}),"\n",(0,o.jsx)(e.h2,{id:"performance-profiling",children:"Performance Profiling"}),"\n",(0,o.jsx)(e.p,{children:"Tools for profiling performance:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Simple function timer\nfunction MeasureTime(fn, ...)\n    local start_time = os.clock()\n    local result = fn(...)\n    local end_time = os.clock()\n    print("Function took", (end_time - start_time) * 1000, "ms")\n    return result\nend\n\n-- Function call counter\nlocal function CreateCallCounter(fn, name)\n    local counter = {\n        calls = 0,\n        total_time = 0,\n        name = name or "function"\n    }\n    \n    local wrapped = function(...)\n        counter.calls = counter.calls + 1\n        local start_time = os.clock()\n        local result = fn(...)\n        local end_time = os.clock()\n        counter.total_time = counter.total_time + (end_time - start_time)\n        return result\n    end\n    \n    counter.report = function()\n        print(counter.name, "called", counter.calls, "times")\n        print("Total time:", counter.total_time * 1000, "ms")\n        print("Average time:", (counter.total_time / counter.calls) * 1000, "ms")\n    end\n    \n    return wrapped, counter\nend\n\n-- Usage\nlocal original_fn = SomeFunction\nlocal wrapped_fn, counter = CreateCallCounter(original_fn, "SomeFunction")\nSomeFunction = wrapped_fn\n\n-- Later, check the stats\ncounter.report()\n'})}),"\n",(0,o.jsx)(e.h2,{id:"memory-debugging",children:"Memory Debugging"}),"\n",(0,o.jsx)(e.p,{children:"Tools for tracking memory usage:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Count entities by prefab\nfunction CountEntities()\n    local counts = {}\n    local total = 0\n    \n    for k, v in pairs(Ents) do\n        if v.prefab then\n            counts[v.prefab] = (counts[v.prefab] or 0) + 1\n            total = total + 1\n        end\n    end\n    \n    print("Total entities:", total)\n    \n    local sorted = {}\n    for prefab, count in pairs(counts) do\n        table.insert(sorted, {prefab = prefab, count = count})\n    end\n    \n    table.sort(sorted, function(a, b) return a.count > b.count end)\n    \n    for i = 1, math.min(20, #sorted) do\n        print(sorted[i].prefab, sorted[i].count)\n    end\nend\n\n-- Add console command\nGLOBAL.c_countentities = CountEntities\n'})}),"\n",(0,o.jsx)(e.h2,{id:"integration-with-mod-configuration",children:"Integration with Mod Configuration"}),"\n",(0,o.jsx)(e.p,{children:"To make debugging easier to toggle:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\nlocal DEBUG_MODE = GetModConfigData("debug_mode") or false\n\n-- Create a debug logger\nlocal function DebugLog(...)\n    if not DEBUG_MODE then return end\n    print("[DEBUG]", ...)\nend\n\n-- Example usage\nDebugLog("Player position:", ThePlayer:GetPosition())\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Use Conditional Debugging"}),": Wrap debug code in conditions to disable in production"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Clean Up Debug Output"}),": Remove or disable debug prints before releasing your mod"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Structured Logging"}),": Use consistent formats for debug messages"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Component Debug Strings"}),": Implement ",(0,o.jsx)(e.code,{children:"GetDebugString()"})," for all custom components"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Separate Debug UI"}),": Create a separate UI for debugging that can be toggled"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Error Handling"}),": Use pcall() to catch and report errors gracefully"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"example-complete-debug-system",children:"Example: Complete Debug System"}),"\n",(0,o.jsx)(e.p,{children:"Here's an example of a more complete debug system for a mod:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Debug configuration\nlocal DebugConfig = {\n    enabled = GetModConfigData("debug_mode") or false,\n    log_level = GetModConfigData("log_level") or "info", -- "debug", "info", "warning", "error"\n    show_ui = GetModConfigData("debug_ui") or false,\n    track_performance = GetModConfigData("track_performance") or false\n}\n\n-- Log levels\nlocal LOG_LEVELS = {\n    debug = 1,\n    info = 2,\n    warning = 3,\n    error = 4\n}\n\n-- Debug module\nlocal Debug = {\n    watches = {},\n    counters = {},\n    timers = {}\n}\n\n-- Logging with levels\nfunction Debug.Log(level, ...)\n    if not DebugConfig.enabled then return end\n    if LOG_LEVELS[level] < LOG_LEVELS[DebugConfig.log_level] then return end\n    \n    local args = {...}\n    local msg = ""\n    for i, v in ipairs(args) do\n        if type(v) == "table" then\n            msg = msg .. " " .. Debug.TableToString(v)\n        else\n            msg = msg .. " " .. tostring(v)\n        end\n    end\n    \n    print("[" .. string.upper(level) .. "]" .. msg)\nend\n\n-- Shorthand logging functions\nfunction Debug.Debug(...) Debug.Log("debug", ...) end\nfunction Debug.Info(...) Debug.Log("info", ...) end\nfunction Debug.Warning(...) Debug.Log("warning", ...) end\nfunction Debug.Error(...) Debug.Log("error", ...) end\n\n-- Table to string conversion\nfunction Debug.TableToString(t, indent)\n    indent = indent or 0\n    local result = ""\n    local indent_str = string.rep("  ", indent)\n    \n    if type(t) ~= "table" then\n        return tostring(t)\n    end\n    \n    result = "{\\n"\n    for k, v in pairs(t) do\n        result = result .. indent_str .. "  " .. tostring(k) .. " = "\n        if type(v) == "table" then\n            result = result .. Debug.TableToString(v, indent + 1)\n        else\n            result = result .. tostring(v)\n        end\n        result = result .. ",\\n"\n    end\n    result = result .. indent_str .. "}"\n    \n    return result\nend\n\n-- Watch a value over time\nfunction Debug.Watch(name, fn)\n    if not DebugConfig.enabled then return end\n    \n    Debug.watches[name] = {\n        fn = fn,\n        history = {},\n        max_history = 100\n    }\nend\n\n-- Update all watches\nfunction Debug.UpdateWatches()\n    if not DebugConfig.enabled then return end\n    \n    for name, watch in pairs(Debug.watches) do\n        local value = watch.fn()\n        table.insert(watch.history, value)\n        if #watch.history > watch.max_history then\n            table.remove(watch.history, 1)\n        end\n    end\nend\n\n-- Performance tracking\nfunction Debug.TimeFunction(fn, name)\n    if not DebugConfig.enabled or not DebugConfig.track_performance then\n        return fn\n    end\n    \n    return function(...)\n        local start_time = os.clock()\n        local result = fn(...)\n        local end_time = os.clock()\n        local time_ms = (end_time - start_time) * 1000\n        \n        Debug.timers[name] = Debug.timers[name] or {\n            total_time = 0,\n            calls = 0,\n            avg_time = 0,\n            max_time = 0\n        }\n        \n        local timer = Debug.timers[name]\n        timer.total_time = timer.total_time + time_ms\n        timer.calls = timer.calls + 1\n        timer.avg_time = timer.total_time / timer.calls\n        timer.max_time = math.max(timer.max_time, time_ms)\n        \n        return result\n    end\nend\n\n-- Report performance stats\nfunction Debug.ReportPerformance()\n    if not DebugConfig.enabled or not DebugConfig.track_performance then return end\n    \n    Debug.Info("Performance Report:")\n    for name, timer in pairs(Debug.timers) do\n        Debug.Info(string.format("  %s: %d calls, %.2f ms total, %.2f ms avg, %.2f ms max",\n            name, timer.calls, timer.total_time, timer.avg_time, timer.max_time))\n    end\nend\n\n-- Initialize debug system\nfunction Debug.Init()\n    if not DebugConfig.enabled then return end\n    \n    Debug.Info("Debug mode enabled")\n    \n    -- Set up periodic tasks\n    TheWorld:DoPeriodicTask(1, Debug.UpdateWatches)\n    TheWorld:DoPeriodicTask(60, Debug.ReportPerformance)\n    \n    -- Add debug commands\n    GLOBAL.c_debugreport = Debug.ReportPerformance\n    \n    -- Set up debug UI if enabled\n    if DebugConfig.show_ui then\n        Debug.InitUI()\n    end\nend\n\n-- Initialize debug UI\nfunction Debug.InitUI()\n    -- Create a simple debug overlay\n    local screen = TheFrontEnd:GetActiveScreen()\n    if not screen then return end\n    \n    local root = screen.root\n    if not root then return end\n    \n    local debug_root = root:AddChild(Widget("debug_root"))\n    debug_root:SetVAnchor(ANCHOR_TOP)\n    debug_root:SetHAnchor(ANCHOR_LEFT)\n    debug_root:SetPosition(10, -10, 0)\n    \n    local debug_text = debug_root:AddChild(Text(NUMBERFONT, 16))\n    debug_text:SetString("Debug Mode")\n    debug_text:SetColour(1, 1, 0, 1)\n    \n    debug_root:SetOnUpdate(function()\n        local text = "DEBUG MODE\\n"\n        text = text .. "FPS: " .. tostring(math.floor(1/TheSim:GetFrameTime())) .. "\\n"\n        \n        if ThePlayer then\n            local x, y, z = ThePlayer.Transform:GetWorldPosition()\n            text = text .. string.format("Pos: %.1f, %.1f, %.1f\\n", x, y, z)\n            \n            if ThePlayer.components.health then\n                text = text .. "Health: " .. tostring(ThePlayer.components.health.currenthealth) .. "\\n"\n            end\n        end\n        \n        debug_text:SetString(text)\n    end)\nend\n\n-- Export the debug module\nreturn Debug\n'})}),"\n",(0,o.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(e.p,{children:"These debug utilities can significantly speed up your mod development process by helping you identify and fix issues more quickly. Remember to disable or remove debug code before releasing your mod to ensure optimal performance for players."})]})}function c(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>l});var i=t(6540);const o={},r=i.createContext(o);function a(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);