"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[924],{6475:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"getting-started","title":"Getting Started with DST Modding","description":"Introduction","source":"@site/docs/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/dst-api-webdocs/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"getting-started","title":"Getting Started with DST Modding","sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"DST Vanilla API v0.5.2","permalink":"/dst-api-webdocs/category/dst-vanilla-api-v052"}}');var i=t(4848),s=t(8453);const o={id:"getting-started",title:"Getting Started with DST Modding",sidebar_position:1},a="Getting Started with DST Modding",l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Setting Up the Development Environment",id:"setting-up-the-development-environment",level:2},{value:"Additional Tools (Optional)",id:"additional-tools-optional",level:3},{value:"Basic Mod Structure",id:"basic-mod-structure",level:2},{value:"Important Files",id:"important-files",level:3},{value:"modinfo.lua",id:"modinfolua",level:4},{value:"modmain.lua",id:"modmainlua",level:4},{value:"Server vs Client in DST Modding",id:"server-vs-client-in-dst-modding",level:2},{value:"Server-Side Code",id:"server-side-code",level:3},{value:"Client-Side Code",id:"client-side-code",level:3},{value:"Types of Mods",id:"types-of-mods",level:2},{value:"Client-Only Mods",id:"client-only-mods",level:3},{value:"Server-Side Mods",id:"server-side-mods",level:3},{value:"Character Mods",id:"character-mods",level:3},{value:"Prefabs, Components, and StateGraphs",id:"prefabs-components-and-stategraphs",level:3},{value:"Creating a New Prefab",id:"creating-a-new-prefab",level:2},{value:"Components in DST",id:"components-in-dst",level:2},{value:"Common Components and Their Functions",id:"common-components-and-their-functions",level:3},{value:"Health Component",id:"health-component",level:4},{value:"Combat Component",id:"combat-component",level:4},{value:"Inventory Component",id:"inventory-component",level:4},{value:"Hunger Component",id:"hunger-component",level:4},{value:"Sanity Component",id:"sanity-component",level:4},{value:"Creating Custom Components",id:"creating-custom-components",level:3},{value:"StateGraphs in DST",id:"stategraphs-in-dst",level:2},{value:"Basic Structure of a StateGraph",id:"basic-structure-of-a-stategraph",level:3},{value:"Applying a StateGraph to an Entity",id:"applying-a-stategraph-to-an-entity",level:3},{value:"Remote Procedure Calls (RPCs)",id:"remote-procedure-calls-rpcs",level:2},{value:"Debugging and Testing",id:"debugging-and-testing",level:2},{value:"Publishing Your Mod",id:"publishing-your-mod",level:2},{value:"References",id:"references",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"getting-started-with-dst-modding",children:"Getting Started with DST Modding"})}),"\n",(0,i.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(e.p,{children:"Don't Starve Together (DST) is a survival game designed to be easily modded. The game uses Lua as its primary programming language, allowing you to customize and extend almost every aspect of the game. This guide will help you understand the basic structure of a DST mod and how to get started with mod development."}),"\n",(0,i.jsx)(e.h2,{id:"setting-up-the-development-environment",children:"Setting Up the Development Environment"}),"\n",(0,i.jsx)(e.p,{children:"Before starting mod development, you need to install the following tools:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Don't Starve Mod Tools"}),": Can be installed through Steam (Library > Tools > Don't Starve Mod Tools)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Text Editor or IDE"}),": Any editor that supports Lua such as VS Code, Sublime Text, or Notepad++"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Image Editor"}),": Such as GIMP, Photoshop, or Aseprite for editing textures"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Spriter"}),": Animation software that comes with Don't Starve Mod Tools, used to view and edit animations"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"additional-tools-optional",children:"Additional Tools (Optional)"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"TexTools"}),": Tool for converting between .tex and .png formats"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"KTools"}),": Toolkit to help work with game animation files"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"BuildRenamer"}),": Tool to rename build files"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"basic-mod-structure",children:"Basic Mod Structure"}),"\n",(0,i.jsx)(e.p,{children:"A basic DST mod includes the following files and directories:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"modname/\r\n\u251c\u2500\u2500 modinfo.lua       # Metadata about your mod\r\n\u251c\u2500\u2500 modmain.lua       # Main entry point for the mod\r\n\u251c\u2500\u2500 modworldgenmain.lua  # (Optional) For mods that modify world generation\r\n\u251c\u2500\u2500 scripts/          # Additional Lua scripts for the mod\r\n\u2502   \u2514\u2500\u2500 prefabs/      # Usually contains new prefabs (characters, items, ...)\r\n\u251c\u2500\u2500 anim/             # (Optional) Custom animations\r\n\u251c\u2500\u2500 images/           # (Optional) Images and icons\r\n\u2502   \u2514\u2500\u2500 inventoryimages/  # Icons displayed in inventory\r\n\u251c\u2500\u2500 sound/            # (Optional) Custom sound files\r\n\u2514\u2500\u2500 exported/         # (Optional) Exported art assets\n"})}),"\n",(0,i.jsx)(e.h3,{id:"important-files",children:"Important Files"}),"\n",(0,i.jsx)(e.h4,{id:"modinfolua",children:"modinfo.lua"}),"\n",(0,i.jsx)(e.p,{children:"This file contains metadata about your mod, including:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'name = "My First Mod"\r\ndescription = "This is my first DST mod"\r\nauthor = "Your Name"\r\nversion = "1.0.0"\r\n\r\n-- DST compatibility\r\ndst_compatible = true\r\n-- Not compatible with single-player Don\'t Starve\r\ndont_starve_compatible = false\r\n-- Not compatible with Reign of Giants DLC\r\nreign_of_giants_compatible = false\r\n\r\n-- Character mods need to set this to true\r\nall_clients_require_mod = true\r\n\r\n-- For mods that only modify client experience\r\nclient_only_mod = false\r\n\r\n-- Icon displayed in the server list\r\nicon_atlas = "modicon.xml"\r\nicon = "modicon.tex"\r\n\r\n-- Tags for server filtering\r\nserver_filter_tags = {"gameplay", "item"}\r\n\r\n-- Configuration options\r\nconfiguration_options = {\r\n    {\r\n        name = "difficulty",\r\n        label = "Difficulty",\r\n        options = {\r\n            {description = "Easy", data = "easy"},\r\n            {description = "Normal", data = "normal"},\r\n            {description = "Hard", data = "hard"}\r\n        },\r\n        default = "normal"\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"modmainlua",children:"modmain.lua"}),"\n",(0,i.jsx)(e.p,{children:"The main entry point for your mod's code. This is where you add hooks into the game's systems:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Import utilities provided by the engine\r\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\r\nlocal require = GLOBAL.require\r\n\r\n-- Hook into the game systems\r\nAddPrefabPostInit("wilson", function(inst)\r\n    -- This code runs after Wilson (or any character) is initialized\r\n    -- You can modify character stats here\r\n    if GLOBAL.TheWorld.ismastersim then\r\n        inst.components.health.maxhealth = 150\r\n    end\r\nend)\r\n\r\n-- Add a new crafting recipe\r\nAddRecipe("super_axe", \r\n    {Ingredient("twigs", 2), Ingredient("flint", 2)}, \r\n    RECIPETABS.TOOLS, \r\n    TECH.SCIENCE_ONE, \r\n    nil, nil, nil, nil, nil, \r\n    "images/inventoryimages/super_axe.xml", \r\n    "super_axe.tex")\n'})}),"\n",(0,i.jsx)(e.h2,{id:"server-vs-client-in-dst-modding",children:"Server vs Client in DST Modding"}),"\n",(0,i.jsx)(e.p,{children:"When developing mods for DST, it's important to understand the difference between server and client:"}),"\n",(0,i.jsx)(e.h3,{id:"server-side-code",children:"Server-Side Code"}),"\n",(0,i.jsx)(e.p,{children:"The server is responsible for:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Calculating game logic"}),"\n",(0,i.jsx)(e.li,{children:"Processing AI"}),"\n",(0,i.jsx)(e.li,{children:"Managing health, hunger, sanity, and other components"}),"\n",(0,i.jsx)(e.li,{children:"Controlling the world and entities"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Every component must include code to check ",(0,i.jsx)(e.code,{children:"TheWorld.ismastersim"})," before executing code related to game logic:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"if not TheWorld.ismastersim then\r\n    return inst\r\nend\r\n\r\n-- Server-side code here\r\ninst.components.health:SetMaxHealth(100)\n"})}),"\n",(0,i.jsx)(e.h3,{id:"client-side-code",children:"Client-Side Code"}),"\n",(0,i.jsx)(e.p,{children:"The client is responsible for:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Displaying images and sounds"}),"\n",(0,i.jsx)(e.li,{children:"Processing player input"}),"\n",(0,i.jsx)(e.li,{children:"UI and effects"}),"\n",(0,i.jsx)(e.li,{children:"Replicas (client versions of components)"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"types-of-mods",children:"Types of Mods"}),"\n",(0,i.jsx)(e.h3,{id:"client-only-mods",children:"Client-Only Mods"}),"\n",(0,i.jsx)(e.p,{children:"These mods only affect the client experience and don't change gameplay for other players. Examples include UI improvements and visual changes."}),"\n",(0,i.jsx)(e.p,{children:"To mark your mod as client-only:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- In modinfo.lua\r\nclient_only_mod = true\r\nall_clients_require_mod = false\n"})}),"\n",(0,i.jsx)(e.h3,{id:"server-side-mods",children:"Server-Side Mods"}),"\n",(0,i.jsx)(e.p,{children:"These mods change gameplay mechanics and typically need to be installed on the server. Sometimes clients also need to have them."}),"\n",(0,i.jsx)(e.p,{children:"To mark your mod as requiring all clients to have it:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- In modinfo.lua\r\nclient_only_mod = false\r\nall_clients_require_mod = true\n"})}),"\n",(0,i.jsx)(e.h3,{id:"character-mods",children:"Character Mods"}),"\n",(0,i.jsx)(e.p,{children:"Adding new characters requires special consideration. You'll need to create:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["Character prefab (in ",(0,i.jsx)(e.code,{children:"scripts/prefabs/"}),")"]}),"\n",(0,i.jsx)(e.li,{children:"Character stats and abilities"}),"\n",(0,i.jsx)(e.li,{children:"Custom animations"}),"\n",(0,i.jsx)(e.li,{children:"Speech files"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Character mods always require ",(0,i.jsx)(e.code,{children:"all_clients_require_mod = true"}),"."]}),"\n",(0,i.jsx)(e.h3,{id:"prefabs-components-and-stategraphs",children:"Prefabs, Components, and StateGraphs"}),"\n",(0,i.jsx)(e.p,{children:"Understanding these three concepts is foundational for developing mods in DST:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Prefabs"}),': These are "blueprints" for all entities in the game. Each item, character, monster is a prefab.']}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Components"}),": These define the behavior of prefabs. Examples: health, combat, inventory."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"StateGraphs"}),": These control animation and states of entities."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"creating-a-new-prefab",children:"Creating a New Prefab"}),"\n",(0,i.jsxs)(e.p,{children:["To create a new item, you need to create a prefab in the ",(0,i.jsx)(e.code,{children:"scripts/prefabs/"})," directory:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- scripts/prefabs/super_axe.lua\r\nlocal assets = {\r\n    Asset("ANIM", "anim/super_axe.zip"),\r\n    Asset("ATLAS", "images/inventoryimages/super_axe.xml"),\r\n    Asset("IMAGE", "images/inventoryimages/super_axe.tex")\r\n}\r\n\r\nlocal function fn()\r\n    local inst = CreateEntity()\r\n    \r\n    inst.entity:AddTransform()\r\n    inst.entity:AddAnimState()\r\n    inst.entity:AddNetwork()\r\n    \r\n    MakeInventoryPhysics(inst)\r\n    \r\n    inst.AnimState:SetBank("super_axe")\r\n    inst.AnimState:SetBuild("super_axe")\r\n    inst.AnimState:PlayAnimation("idle")\r\n    \r\n    inst:AddTag("sharp")\r\n    \r\n    if not TheWorld.ismastersim then\r\n        return inst\r\n    end\r\n    \r\n    inst.entity:SetPristine()\r\n    \r\n    inst:AddComponent("inventoryitem")\r\n    inst:AddComponent("tool")\r\n    inst.components.tool:SetAction(ACTIONS.CHOP, 2) -- Chop twice as fast\r\n    \r\n    inst:AddComponent("finiteuses")\r\n    inst.components.finiteuses:SetMaxUses(200)\r\n    inst.components.finiteuses:SetUses(200)\r\n    inst.components.finiteuses:SetOnFinished(inst.Remove)\r\n    \r\n    inst:AddComponent("inspectable")\r\n    \r\n    return inst\r\nend\r\n\r\nreturn Prefab("super_axe", fn, assets)\n'})}),"\n",(0,i.jsx)(e.p,{children:"Register the prefab in modmain.lua:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'PrefabFiles = {\r\n    "super_axe"\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"components-in-dst",children:"Components in DST"}),"\n",(0,i.jsx)(e.p,{children:"Components are one of the most important concepts in DST modding. They function as feature modules that can be attached to entities to provide specific functionality."}),"\n",(0,i.jsx)(e.h3,{id:"common-components-and-their-functions",children:"Common Components and Their Functions"}),"\n",(0,i.jsx)(e.p,{children:"Below are some common components and their functions:"}),"\n",(0,i.jsx)(e.h4,{id:"health-component",children:"Health Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("health")\r\ninst.components.health:SetMaxHealth(100)\r\ninst.components.health:SetInvincible(false)\r\ninst.components.health.ondeath = function(inst)\r\n    -- Code to execute when entity dies\r\nend\n'})}),"\n",(0,i.jsx)(e.h4,{id:"combat-component",children:"Combat Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("combat")\r\ninst.components.combat:SetDefaultDamage(20)\r\ninst.components.combat:SetAttackPeriod(2) -- Attack every 2 seconds\r\ninst.components.combat:SetRange(3) -- Attack range\n'})}),"\n",(0,i.jsx)(e.h4,{id:"inventory-component",children:"Inventory Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("inventory")\r\ninst.components.inventory.maxslots = 16\n'})}),"\n",(0,i.jsx)(e.h4,{id:"hunger-component",children:"Hunger Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("hunger")\r\ninst.components.hunger:SetMax(150)\r\ninst.components.hunger:SetRate(1) -- Rate at which hunger decreases\n'})}),"\n",(0,i.jsx)(e.h4,{id:"sanity-component",children:"Sanity Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'inst:AddComponent("sanity")\r\ninst.components.sanity:SetMax(200)\r\ninst.components.sanity.night_drain_mult = 0.5 -- Less sanity drain at night\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-custom-components",children:"Creating Custom Components"}),"\n",(0,i.jsx)(e.p,{children:"You can create custom components for your mod:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- scripts/components/mycomponent.lua\r\nlocal MyComponent = Class(function(self, inst)\r\n    self.inst = inst\r\n    self.value = 0\r\nend)\r\n\r\nfunction MyComponent:SetValue(val)\r\n    self.value = val\r\nend\r\n\r\nfunction MyComponent:GetValue()\r\n    return self.value\r\nend\r\n\r\nreturn MyComponent\n"})}),"\n",(0,i.jsx)(e.p,{children:"Register the component in modmain.lua:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Register custom component\r\nlocal require = GLOBAL.require\r\nlocal MyComponent = require("components/mycomponent")\r\nGLOBAL.AddComponentPostInit("mycomponent", MyComponent)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"stategraphs-in-dst",children:"StateGraphs in DST"}),"\n",(0,i.jsx)(e.p,{children:"StateGraphs control how entities move and interact with the world. They define states and transitions between states."}),"\n",(0,i.jsx)(e.h3,{id:"basic-structure-of-a-stategraph",children:"Basic Structure of a StateGraph"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local states = {\r\n    State{\r\n        name = "idle",\r\n        tags = {"idle"},\r\n        onenter = function(inst)\r\n            inst.AnimState:PlayAnimation("idle_loop", true)\r\n        end,\r\n    },\r\n    \r\n    State{\r\n        name = "walk",\r\n        tags = {"moving"},\r\n        onenter = function(inst)\r\n            inst.AnimState:PlayAnimation("walk_loop", true)\r\n        end,\r\n    },\r\n    \r\n    State{\r\n        name = "attack",\r\n        tags = {"attack", "busy"},\r\n        onenter = function(inst)\r\n            inst.AnimState:PlayAnimation("attack")\r\n        end,\r\n        \r\n        timeline = {\r\n            TimeEvent(10*FRAMES, function(inst) \r\n                inst.components.combat:DoAttack() \r\n            end),\r\n        },\r\n        \r\n        events = {\r\n            EventHandler("animover", function(inst) \r\n                inst.sg:GoToState("idle") \r\n            end),\r\n        },\r\n    },\r\n}\r\n\r\nlocal function CreateStategraph()\r\n    local sg = StateGraph("myentity")\r\n    sg:AddStates(states)\r\n    \r\n    sg.states.idle.events = {\r\n        EventHandler("attacked", function(inst) \r\n            inst.sg:GoToState("hit") \r\n        end),\r\n    }\r\n    \r\n    sg:SetInitialState("idle")\r\n    \r\n    return sg\r\nend\r\n\r\nreturn CreateStategraph()\n'})}),"\n",(0,i.jsx)(e.h3,{id:"applying-a-stategraph-to-an-entity",children:"Applying a StateGraph to an Entity"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- In the prefab file\r\ninst:SetStateGraph("SGmyentity")\n'})}),"\n",(0,i.jsx)(e.h2,{id:"remote-procedure-calls-rpcs",children:"Remote Procedure Calls (RPCs)"}),"\n",(0,i.jsx)(e.p,{children:"RPCs allow communication between server and client. They are necessary for mods that change gameplay:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Register RPC in modmain.lua\r\nAddModRPCHandler("MyMod", "MyAction", function(player, target)\r\n    if player and player.components.inventory and target and target:HasTag("mytag") then\r\n        -- Perform action on server\r\n    end\r\nend)\r\n\r\n-- Call RPC from client\r\nSendModRPCToServer(MOD_RPC["MyMod"]["MyAction"], target)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"debugging-and-testing",children:"Debugging and Testing"}),"\n",(0,i.jsx)(e.p,{children:"DST provides some tools for debugging mods:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Print debug info to console\r\nprint("Debug info:", variable)\r\n\r\n-- Check if prefab is working\r\nc_spawn("my_prefab") -- Spawn prefab to test in game\r\n\r\n-- Refresh mod while playing\r\nc_reset() -- Reset and reload all mods\n'})}),"\n",(0,i.jsx)(e.h2,{id:"publishing-your-mod",children:"Publishing Your Mod"}),"\n",(0,i.jsx)(e.p,{children:"When your mod is ready to share:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Open Don't Starve Mod Tools"}),"\n",(0,i.jsx)(e.li,{children:'Select "Upload Mod"'}),"\n",(0,i.jsx)(e.li,{children:"Enter information about your mod"}),"\n",(0,i.jsx)(e.li,{children:"Add a preview image (size 512x512 pixels)"}),"\n",(0,i.jsx)(e.li,{children:"Upload to Steam Workshop"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Remember to update your mod regularly and respond to user feedback to improve your mod."}),"\n",(0,i.jsx)(e.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://forums.kleientertainment.com/",children:"Don't Starve Forums"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://dontstarveapi.com/",children:"Don't Starve Modding Wiki"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://forums.kleientertainment.com/files/file/83-dont-starve-mod-tools/",children:"Don't Starve Mod Tools Documentation"})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Good luck with your modding project! Don't hesitate to join the DST modding community to learn and share ideas."})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);