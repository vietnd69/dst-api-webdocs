"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6257],{1711:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/core/mod-structure","title":"Mod Structure and Server Integration","description":"This document describes the structure of Don\'t Starve Together mods and how they integrate with the server environment.","source":"@site/docs/api-vanilla/core/mod-structure.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/mod-structure","permalink":"/dst-api-webdocs/docs/api-vanilla/core/mod-structure","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"mod-structure","title":"Mod Structure and Server Integration","sidebar_position":8},"sidebar":"docs","previous":{"title":"Remote Procedure Call System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/rpc-system"},"next":{"title":"modoverrides.lua Configuration","permalink":"/dst-api-webdocs/docs/api-vanilla/core/modoverrides"}}');var s=r(4848),t=r(8453);const d={id:"mod-structure",title:"Mod Structure and Server Integration",sidebar_position:8},o="Mod Structure and Server Integration",a={},l=[{value:"Mod Directory Structure",id:"mod-directory-structure",level:2},{value:"Server-Side Mod Files",id:"server-side-mod-files",level:2},{value:"dedicated_server_mods_setup.lua",id:"dedicated_server_mods_setuplua",level:3},{value:"modinfo.lua Server Fields",id:"modinfolua-server-fields",level:3},{value:"Server-Side Mod Integration",id:"server-side-mod-integration",level:2},{value:"Master Shard vs. Caves Shard",id:"master-shard-vs-caves-shard",level:3},{value:"Server Authority Checking",id:"server-authority-checking",level:3},{value:"Server-Client Communication",id:"server-client-communication",level:2},{value:"Networked Variables",id:"networked-variables",level:3},{value:"RPC (Remote Procedure Calls)",id:"rpc-remote-procedure-calls",level:3},{value:"Server Performance Considerations",id:"server-performance-considerations",level:2},{value:"Optimization Tips",id:"optimization-tips",level:3},{value:"Server-Safe Modding",id:"server-safe-modding",level:2},{value:"Thread Safety",id:"thread-safety",level:3},{value:"Resource Management",id:"resource-management",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mod-structure-and-server-integration",children:"Mod Structure and Server Integration"})}),"\n",(0,s.jsx)(n.p,{children:"This document describes the structure of Don't Starve Together mods and how they integrate with the server environment."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:'flowchart TD\n    subgraph "Mod Structure"\n    M1[modinfo.lua] --\x3e M2[modmain.lua]\n    M2 --\x3e M3["prefabs/*.lua"]\n    M2 --\x3e M4["components/*.lua"]\n    M2 --\x3e M5["stategraphs/*.lua"]\n    M1 --\x3e M6[dedicated_server_mods_setup.lua]\n    M1 --\x3e M7[modworldgenmain.lua]\n    end\n    \n    subgraph "Server Integration"\n    S1[Dedicated Server] --\x3e S2[dedicated_server_mods_setup.lua]\n    S2 --\x3e |"ServerModSetup()"| S3[Download Mods]\n    S3 --\x3e S4[Master/modoverrides.lua]\n    S3 --\x3e S5[Caves/modoverrides.lua]\n    S4 --\x3e |"enabled = true"| S6[Load mod in Master]\n    S5 --\x3e |"enabled = true"| S7[Load mod in Caves]\n    end\n    \n    subgraph "Runtime Flow"\n    R1[Client connects] --\x3e R2[Verify required mods]\n    R2 --\x3e R3[Server runs modmain.lua]\n    R3 --\x3e R4[Server runs prefab code]\n    R4 --\x3e |"if TheWorld.ismastersim"| R5[Server-side logic]\n    R4 --\x3e |"Network replication"| R6[Client-side display]\n    end\n    \n    M6 -.-> S2\n    M1 -.-> R2\n    M2 -.-> R3\n    M3 -.-> R4\n'})}),"\n",(0,s.jsx)(n.h2,{id:"mod-directory-structure",children:"Mod Directory Structure"}),"\n",(0,s.jsx)(n.p,{children:"A typical DST mod follows this directory structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"modname/\n\u251c\u2500\u2500 modinfo.lua            # Mod metadata and configuration options\n\u251c\u2500\u2500 modmain.lua            # Main entry point for the mod\n\u251c\u2500\u2500 modworldgenmain.lua    # (Optional) For world generation modifications\n\u251c\u2500\u2500 dedicated_server_mods_setup.lua  # (Optional) Included for server setup convenience\n\u251c\u2500\u2500 scripts/               # Custom scripts\n\u2502   \u251c\u2500\u2500 prefabs/           # Custom entity definitions\n\u2502   \u251c\u2500\u2500 components/        # Custom components\n\u2502   \u2514\u2500\u2500 stategraphs/       # Custom state graphs\n\u251c\u2500\u2500 anim/                  # Custom animations\n\u251c\u2500\u2500 images/                # Images and icons\n\u2502   \u2514\u2500\u2500 inventoryimages/   # Inventory icons\n\u251c\u2500\u2500 sound/                 # Custom sound files\n\u251c\u2500\u2500 languages/             # Localization files\n\u251c\u2500\u2500 lib/                   # (Optional) External libraries\n\u2514\u2500\u2500 exported/              # (Optional) Raw exported assets\n"})}),"\n",(0,s.jsx)(n.h2,{id:"server-side-mod-files",children:"Server-Side Mod Files"}),"\n",(0,s.jsx)(n.p,{children:"These files are particularly important for server integration:"}),"\n",(0,s.jsx)(n.h3,{id:"dedicated_server_mods_setuplua",children:"dedicated_server_mods_setup.lua"}),"\n",(0,s.jsx)(n.p,{children:"When included in a mod, this helps server administrators by providing a template for downloading the mod and its dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- This file can be bundled with your mod to help server owners\n-- Copy the lines below to the main dedicated_server_mods_setup.lua\n\n-- Main mod\nServerModSetup("workshop-YOUR_MOD_ID")\n\n-- Dependencies (if any)\nServerModSetup("workshop-DEPENDENCY_ID_1")\nServerModSetup("workshop-DEPENDENCY_ID_2")\n'})}),"\n",(0,s.jsx)(n.p,{children:"The actual working copy is found in the server's root directory, not within individual mod folders."}),"\n",(0,s.jsx)(n.h3,{id:"modinfolua-server-fields",children:"modinfo.lua Server Fields"}),"\n",(0,s.jsxs)(n.p,{children:["These fields in ",(0,s.jsx)(n.code,{children:"modinfo.lua"})," affect server behavior:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Is this mod compatible with DST?\ndst_compatible = true\n\n-- Does every client need this mod to connect?\nall_clients_require_mod = true\n\n-- Is this a client-only mod (no server components)?\nclient_only_mod = false\n\n-- What version does this mod work with?\napi_version = 10\n\n-- For showing in the server browser\nserver_filter_tags = {\n    "gameplay",\n    "item"\n}\n\n-- For server admins to find related mods\nmod_dependencies = {\n    -- ModID of a dependency\n    ["workshop-DEPENDENCY_ID"] = {\n        enabled = true,\n        -- Is this dependency critical?\n        is_required = true\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"server-side-mod-integration",children:"Server-Side Mod Integration"}),"\n",(0,s.jsx)(n.h3,{id:"master-shard-vs-caves-shard",children:"Master Shard vs. Caves Shard"}),"\n",(0,s.jsx)(n.p,{children:"Understanding how mods integrate with different shards:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\n-- This code will run in both Master and Caves shards\nAddPrefabPostInit("world", function(inst)\n    if inst:HasTag("cave") then\n        -- This code only runs in the Caves shard\n        print("This is a cave world!")\n    else\n        -- This code only runs in the Master shard\n        print("This is an overworld!")\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"server-authority-checking",children:"Server Authority Checking"}),"\n",(0,s.jsx)(n.p,{children:"Proper server-side code should always check for server authority:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In a prefab file\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- [Client-side entity setup]\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Network initialization\n    inst.entity:SetPristine()\n    \n    -- Early return for clients\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Server-only components and logic\n    inst:AddComponent("health")\n    inst:AddComponent("combat")\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"server-client-communication",children:"Server-Client Communication"}),"\n",(0,s.jsx)(n.h3,{id:"networked-variables",children:"Networked Variables"}),"\n",(0,s.jsx)(n.p,{children:"For transmitting data between server and clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua or a prefab file\n-- On the server\ninst.mynetvar = net_bool(inst.GUID, "mymod:myvar", "myvardirty")\ninst.mynetvar:set(true)\n\n-- Listening on the client\ninst:ListenForEvent("myvardirty", function()\n    local value = inst.mynetvar:value()\n    print("Received value from server:", value)\nend)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Available networked variable types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_byte"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_shortint"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_int"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_uint"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_float"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_string"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_bool"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_hash"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"net_entity"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rpc-remote-procedure-calls",children:"RPC (Remote Procedure Calls)"}),"\n",(0,s.jsx)(n.p,{children:"For executing functions across the network:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\n-- Define RPC\nAddModRPCHandler("MyMod", "MyAction", function(player, target, value)\n    if not TheWorld.ismastersim then return end\n    \n    -- This executes on the server when the RPC is received\n    print(player, "triggered MyAction on", target, "with value", value)\nend)\n\n-- Send RPC from client\nSendModRPCToServer(MOD_RPC.MyMod.MyAction, ThePlayer, targetEntity, 42)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"server-performance-considerations",children:"Server Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"optimization-tips",children:"Optimization Tips"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Minimize Update Functions"}),": Use event listeners instead of per-tick updates when possible"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Avoid this when possible\ninst:DoPeriodicTask(0, function() -- runs every frame\n    -- Heavy logic\nend)\n\n-- Better approach\ninst:ListenForEvent("specific_event", function()\n    -- Only runs when needed\nend)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Batch Operations"}),": Group similar operations together"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Instead of updating positions individually\nfor i=1,100 do\n    entities[i].Transform:SetPosition(x[i], y[i], z[i])\nend\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Throttling"}),": Spread intensive operations over time"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local function ProcessEntity(i)\n    if i <= #entities then\n        -- Process entities[i]\n        inst:DoTaskInTime(0.1, function() ProcessEntity(i+1) end)\n    end\nend\nProcessEntity(1)\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Efficient Component Use"}),": Only add components that are necessary"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Only add expensive components when needed\nif ShouldHaveAdvancedBehavior(inst) then\n    inst:AddComponent("complexbehavior")\nelse\n    inst:AddComponent("simplebehavior")\nend\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"server-safe-modding",children:"Server-Safe Modding"}),"\n",(0,s.jsx)(n.h3,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,s.jsx)(n.p,{children:"DST runs server logic on a separate thread. Avoid using operating system functions that might block:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- DON\'T DO THIS on the server\nlocal file = io.open("myfile.txt", "w")\nfile:write("This will cause issues!")\nfile:close()\n\n-- Instead, use DST\'s built-in methods when needed\nTheSim:GetPersistentString("mykey", function(success, data)\n    if success then\n        print("Retrieved:", data)\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,s.jsx)(n.p,{children:"Be mindful of resource usage, especially on dedicated servers:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Texture Memory"}),": Reduce texture sizes and atlas usage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity Count"}),": Minimize the number of active entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update Frequency"}),": Reduce update frequency for distant or inactive objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Traffic"}),": Only send necessary data between server and clients"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>o});var i=r(6540);const s={},t=i.createContext(s);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);