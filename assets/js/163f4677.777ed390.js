"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4453],{5174:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/components/stackable","title":"Stackable","description":"The Stackable component allows items to be stacked together, combining multiple identical items into a single inventory slot. It manages stack sizes, item splitting, and stack interactions.","source":"@site/docs/api-vanilla/components/stackable.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/stackable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/stackable","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":25,"frontMatter":{"id":"stackable","title":"Stackable","sidebar_position":25},"sidebar":"docs","previous":{"title":"LootDropper","permalink":"/dst-api-webdocs/docs/api-vanilla/components/lootdropper"},"next":{"title":"Trader","permalink":"/dst-api-webdocs/docs/api-vanilla/components/trader"}}');var i=t(4848),a=t(8453);const c={id:"stackable",title:"Stackable",sidebar_position:25},l="Stackable Component",o={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Stack Management",id:"stack-management",level:3},{value:"Stack Splitting",id:"stack-splitting",level:3},{value:"Stack Events",id:"stack-events",level:3},{value:"Stack Size Calculations",id:"stack-size-calculations",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"See also",id:"see-also",level:2},{value:"Example: Creating a Stackable Resource",id:"example-creating-a-stackable-resource",level:2}];function r(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"stackable-component",children:"Stackable Component"})}),"\n",(0,i.jsx)(n.p,{children:"The Stackable component allows items to be stacked together, combining multiple identical items into a single inventory slot. It manages stack sizes, item splitting, and stack interactions."}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Add a stackable component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("stackable")\n\n-- Configure the stackable component\nlocal stackable = entity.components.stackable\nstackable:SetStackSize(20)\nstackable:SetMaxSize(40)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"stacksize"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Current number of items in the stack"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"maxsize"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Maximum possible stack size"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"forcedropsingle"})}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"Whether dropping always drops single items"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onstacksizelimitfn"})}),(0,i.jsx)(n.td,{children:"Function"}),(0,i.jsx)(n.td,{children:"Called when stack size limit is reached"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ondestack"})}),(0,i.jsx)(n.td,{children:"Function"}),(0,i.jsx)(n.td,{children:"Called when items are removed from the stack"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(n.h3,{id:"stack-management",children:"Stack Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Set current stack size\nstackable:SetStackSize(10)\n\n-- Set maximum stack size\nstackable:SetMaxSize(20)\n\n-- Get current stack size\nlocal size = stackable:StackSize()\n\n-- Check if stack is full\nlocal is_full = stackable:IsFull()\n\n-- Add items to the stack\nstackable:SetStackSize(stackable:StackSize() + 5)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"stack-splitting",children:"Stack Splitting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Split a stack, returning a new item with specified count\nlocal split_stack = stackable:Get(5) -- Get 5 items from the stack\n\n-- Try stacking with another stackable\nlocal stacked = stackable:Put(another_stackable_item)\n\n-- Put a single item into this stack\nstackable:PutOneItem(single_item)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"stack-events",children:"Stack Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set callback for when stack size changes\nstackable:SetOnStackSizeChange(function(inst, data)\n    -- Do something when stack size changes\n    print("New stack size: " .. data.stacksize)\nend)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"stack-size-calculations",children:"Stack Size Calculations"}),"\n",(0,i.jsx)(n.p,{children:"When stacking items:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Items can only stack with others of the same prefab"}),"\n",(0,i.jsxs)(n.li,{children:["Stack size is limited by ",(0,i.jsx)(n.code,{children:"maxsize"})," property"]}),"\n",(0,i.jsx)(n.li,{children:"When a stack is split, a new entity is created with the same prefab"}),"\n",(0,i.jsx)(n.li,{children:"Some components may be transferred or modified when stacking/splitting"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.p,{children:"The Stackable component often works with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Inventoryitem"})," - For inventory management of stacks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Perishable"})," - Stacking may average perish times"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Edible"})," - For stacking food items"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Container"})," - For managing stacks in containers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Inspectable"})," - To show stack size in inspection"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/inventory",children:"Inventory Component"})," - For managing stacked items"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/perishable",children:"Perishable Component"})," - For food spoilage in stacks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/edible",children:"Edible Component"})," - For stacking food items"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/container",children:"Container Component"})," - For storing stacks in containers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/other-components",children:"Inventoryitem Component"})," - For items that can be stacked"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-creating-a-stackable-resource",children:"Example: Creating a Stackable Resource"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function MakeResource()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Make it an inventory item\n    inst:AddComponent("inventoryitem")\n    \n    -- Make it stackable\n    inst:AddComponent("stackable")\n    inst.components.stackable:SetStackSize(1)\n    inst.components.stackable:SetMaxSize(20)\n    \n    -- Update visual based on stack size\n    inst.components.stackable:SetOnStackSizeChange(function(inst, data)\n        if data.stacksize <= 5 then\n            inst.AnimState:PlayAnimation("idle_small")\n        elseif data.stacksize <= 15 then\n            inst.AnimState:PlayAnimation("idle_medium")\n        else\n            inst.AnimState:PlayAnimation("idle_full")\n        end\n    end)\n    \n    -- Make it inspectable with stack info\n    inst:AddComponent("inspectable")\n    inst.components.inspectable.getspecialdescription = function(inst, viewer)\n        return "Stack size: " .. inst.components.stackable:StackSize()\n    end\n    \n    return inst\nend\n\n-- Example of stackable food with perishable component\nlocal function MakeStackableFood()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Make it an inventory item\n    inst:AddComponent("inventoryitem")\n    \n    -- Make it stackable\n    inst:AddComponent("stackable")\n    inst.components.stackable:SetStackSize(1)\n    inst.components.stackable:SetMaxSize(20)\n    \n    -- Make it perishable\n    inst:AddComponent("perishable")\n    inst.components.perishable:SetPerishTime(TUNING.PERISH_MED)\n    inst.components.perishable:StartPerishing()\n    \n    -- Make it edible\n    inst:AddComponent("edible")\n    inst.components.edible:SetHealth(1)\n    inst.components.edible:SetHunger(12.5)\n    \n    return inst\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var s=t(6540);const i={},a=s.createContext(i);function c(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);