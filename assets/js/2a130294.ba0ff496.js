"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[40541],{27332:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"game-scripts/core-systems/networking-communication/networking/shardnetworking","title":"Shard Networking","description":"Inter-shard communication and synchronization system for cluster management and portal connectivity","source":"@site/docs/game-scripts/core-systems/networking-communication/networking/shardnetworking.md","sourceDirName":"game-scripts/core-systems/networking-communication/networking","slug":"/game-scripts/core-systems/networking-communication/networking/shardnetworking","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardnetworking","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"shardnetworking","title":"Shard Networking","description":"Inter-shard communication and synchronization system for cluster management and portal connectivity","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Shard Index","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardindex"},"next":{"title":"System Core Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/"}}');var i=s(74848),d=s(28453);const t={id:"shardnetworking",title:"Shard Networking",description:"Inter-shard communication and synchronization system for cluster management and portal connectivity",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="Shard Networking",l={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Global Data Structures",id:"global-data-structures",level:2},{value:"ShardPortals",id:"shardportals",level:3},{value:"ShardList",id:"shardlist",level:3},{value:"ShardConnected",id:"shardconnected",level:3},{value:"Core Shard Management Functions",id:"core-shard-management-functions",level:2},{value:"Shard_IsMaster()",id:"shard-is-master",level:3},{value:"Shard_IsWorldAvailable(world_id)",id:"shard-is-world-available",level:3},{value:"Shard_IsWorldFull(world_id)",id:"shard-is-world-full",level:3},{value:"World Settings Synchronization",id:"world-settings-synchronization",level:2},{value:"Shard_SyncWorldSettings(world_id, is_resync)",id:"shard-sync-world-settings",level:3},{value:"Shard Connection Management",id:"shard-connection-management",level:2},{value:"Shard_OnShardConnected(world_id, tags, world_data)",id:"shard-on-shard-connected",level:3},{value:"Shard_UpdateWorldState(world_id, state, tags, world_data)",id:"shard-update-world-state",level:3},{value:"Shard_UpdatePortalState(inst)",id:"shard-update-portal-state",level:3},{value:"Shard_GetConnectedShards()",id:"shard-get-connected-shards",level:3},{value:"Session and State Management",id:"session-and-state-management",level:2},{value:"Shard_UpdateMasterSessionId(session_id)",id:"shard-update-master-session-id",level:3},{value:"Shard_WorldSave()",id:"shard-world-save",level:3},{value:"Voting System Functions",id:"voting-system-functions",level:2},{value:"Shard_StartVote(command_id, starter_id, target_id)",id:"shard-start-vote",level:3},{value:"Shard_StopVote()",id:"shard-stop-vote",level:3},{value:"Shard_ReceiveVote(selection, user_id)",id:"shard-receive-vote",level:3},{value:"Dice Roll System",id:"dice-roll-system",level:2},{value:"Shard_OnDiceRollRequest(user_id)",id:"shard-on-dice-roll-request",level:3},{value:"Boss and Event Synchronization",id:"boss-and-event-synchronization",level:2},{value:"Shard_SyncBossDefeated(bossprefab, shardid)",id:"shard-sync-boss-defeated",level:3},{value:"Merm King Synchronization Functions",id:"merm-king-synchronization-functions",level:2},{value:"Shard_SyncMermKingExists(exists, shardid)",id:"shard-sync-merm-king-exists",level:3},{value:"Shard_SyncMermKingTrident(exists, shardid)",id:"shard-sync-merm-king-trident",level:3},{value:"Shard_SyncMermKingCrown(exists, shardid)",id:"shard-sync-merm-king-crown",level:3},{value:"Shard_SyncMermKingPauldron(exists, shardid)",id:"shard-sync-merm-king-pauldron",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Shard Connection Management",id:"basic-shard-connection-management",level:3},{value:"Portal Management Integration",id:"portal-management-integration",level:3},{value:"Event Synchronization System",id:"event-synchronization-system",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"TheShard Integration",id:"theshard-integration",level:3},{value:"TheNet Integration",id:"thenet-integration",level:3},{value:"RPC System Integration",id:"rpc-system-integration",level:3},{value:"Customize System Integration",id:"customize-system-integration",level:3},{value:"Constants and Configuration",id:"constants-and-configuration",level:2},{value:"Shard States",id:"shard-states",level:3},{value:"Shard Identifiers",id:"shard-identifiers",level:3},{value:"Timing Constants",id:"timing-constants",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"shard-networking",children:"Shard Networking"})}),"\n",(0,i.jsx)(e.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Build Version"}),(0,i.jsx)(e.th,{children:"Change Date"}),(0,i.jsx)(e.th,{children:"Change Type"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsx)(e.tbody,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"676042"}),(0,i.jsx)(e.td,{children:"2025-06-21"}),(0,i.jsx)(e.td,{children:"stable"}),(0,i.jsx)(e.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"ShardNetworking"})," module provides inter-shard communication and synchronization capabilities for cluster-based multiplayer environments. This system manages portal connections, world state synchronization, boss defeat tracking, voting systems, and various cross-shard data sharing mechanisms essential for maintaining consistency across multiple game worlds."]}),"\n",(0,i.jsx)(e.h2,{id:"global-data-structures",children:"Global Data Structures"}),"\n",(0,i.jsx)(e.h3,{id:"shardportals",children:"ShardPortals"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nGlobal table tracking all portal entities that can connect between shards."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Structure:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- ShardPortals table format\nShardPortals = {\n    [portal_id] = portal_entity,  -- Portal instances indexed by ID\n    -- Additional portals...\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"shardlist",children:"ShardList"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nGlobal table tracking all known available shards in the cluster."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Structure:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- ShardList table format\nShardList = {\n    [world_id] = true,  -- Boolean flag indicating shard availability\n    -- Additional shards...\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"shardconnected",children:"ShardConnected"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nPrivate table tracking detailed connection information for each shard."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Structure:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- ShardConnected table format (internal)\nShardConnected = {\n    [world_id] = {\n        ready = true,           -- Connection status\n        tags = {"caves", "secondary"},  -- Shard tags\n        world = world_data      -- World-specific data\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"core-shard-management-functions",children:"Core Shard Management Functions"}),"\n",(0,i.jsx)(e.h3,{id:"shard-is-master",children:"Shard_IsMaster()"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nDetermines if the current shard is the master shard in the cluster configuration."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["(boolean): ",(0,i.jsx)(e.code,{children:"true"})," if current shard is master, ",(0,i.jsx)(e.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Check if current shard is master\nif Shard_IsMaster() then\n    print("This is the master shard")\n    -- Perform master-only operations\n    Shard_SyncWorldSettings("Caves")\nelse\n    print("This is a secondary shard")\n    -- Request settings from master\n    SendRPCToShard(SHARD_RPC.ResyncWorldSettings, SHARDID.MASTER)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-is-world-available",children:"Shard_IsWorldAvailable(world_id)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nChecks if a specific world/shard is currently available for connection or migration."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"world_id"})," (string): World identifier to check"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["(boolean): ",(0,i.jsx)(e.code,{children:"true"})," if world is available, ",(0,i.jsx)(e.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Check if caves are available before migration\nif Shard_IsWorldAvailable("Caves") then\n    print("Caves shard is available")\n    -- Enable cave portal\n    EnablePortalToCaves()\nelse\n    print("Caves shard is not available")\n    -- Disable cave portal\n    DisablePortalToCaves()\nend\n\n-- Check current shard availability\nlocal current_shard = TheShard:GetShardId()\nprint("Current shard available:", Shard_IsWorldAvailable(current_shard))\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-is-world-full",children:"Shard_IsWorldFull(world_id)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nChecks if a specific world has reached its player capacity limit."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"world_id"})," (string): World identifier to check"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["(boolean): ",(0,i.jsx)(e.code,{children:"true"})," if world is full, ",(0,i.jsx)(e.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Check if target world can accept more players\nif not Shard_IsWorldFull("Caves") then\n    print("Caves shard has space for more players")\n    -- Allow migration\n    AllowMigrationToCaves()\nelse\n    print("Caves shard is full")\n    -- Block migration\n    BlockMigrationToCaves()\nend\n'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Technical Notes:"}),"\nCurrently marked as TODO in the source code implementation."]}),"\n",(0,i.jsx)(e.h2,{id:"world-settings-synchronization",children:"World Settings Synchronization"}),"\n",(0,i.jsx)(e.h3,{id:"shard-sync-world-settings",children:"Shard_SyncWorldSettings(world_id, is_resync)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nSynchronizes world generation settings from master shard to secondary shards, ensuring consistent world parameters across the cluster."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"world_id"})," (string): Target world identifier for synchronization"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"is_resync"})," (boolean): Whether this is a resynchronization operation"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Initial sync to all secondary shards\nShard_SyncWorldSettings("Caves", false)\n\n-- Resync after settings change\nShard_SyncWorldSettings("Caves", true)\n\n-- Master shard syncing settings on startup\nif Shard_IsMaster() then\n    for world_id in pairs(ShardList) do\n        if world_id ~= TheShard:GetShardId() then\n            Shard_SyncWorldSettings(world_id, false)\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Technical Implementation:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Settings synchronization process\nlocal sync_options = Customize.GetSyncOptions()\nlocal worldoptions = ShardGameIndex:GetGenOptions()\n\nlocal sync_settings = {}\nfor option, value in pairs(worldoptions.overrides) do\n    if sync_options[option] then\n        sync_settings[option] = value\n    end\nend\n\nif not IsTableEmpty(sync_settings) then\n    SendRPCToShard(SHARD_RPC.SyncWorldSettings, world_id, DataDumper(sync_settings))\nend\n"})}),"\n",(0,i.jsx)(e.h2,{id:"shard-connection-management",children:"Shard Connection Management"}),"\n",(0,i.jsx)(e.h3,{id:"shard-on-shard-connected",children:"Shard_OnShardConnected(world_id, tags, world_data)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nHandles the connection event when a shard becomes available, performing necessary initialization and synchronization."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"world_id"})," (string): Connected world identifier"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"tags"})," (table): Array of shard tags"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"world_data"})," (table): World-specific configuration data"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- This function is typically called internally by the networking system\n-- Example of manual invocation for testing:\nlocal world_tags = {"caves", "secondary"}\nlocal world_config = {\n    preset = "SURVIVAL_TOGETHER_CAVE",\n    difficulty = "normal"\n}\n\nShard_OnShardConnected("Caves", world_tags, world_config)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-update-world-state",children:"Shard_UpdateWorldState(world_id, state, tags, world_data)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nUpdates the connection state of a shard and manages portal connections accordingly."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"world_id"})," (string): World identifier"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"state"})," (number): Connection state (REMOTESHARDSTATE enum)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"tags"})," (table): Array of shard tags"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"world_data"})," (string): Encoded world configuration data"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Connect a caves shard\nShard_UpdateWorldState("Caves", REMOTESHARDSTATE.READY, {"caves"}, encoded_world_data)\n\n-- Disconnect a shard\nShard_UpdateWorldState("Caves", REMOTESHARDSTATE.DISCONNECTED, nil, nil)\n\n-- Check results\nlocal connected_shards = Shard_GetConnectedShards()\nfor world_id, shard_info in pairs(connected_shards) do\n    print("Shard:", world_id, "Ready:", shard_info.ready)\nend\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Technical Implementation:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Decodes and validates world data"}),"\n",(0,i.jsx)(e.li,{children:"Updates internal connection tracking"}),"\n",(0,i.jsx)(e.li,{children:"Manages portal bindings automatically"}),"\n",(0,i.jsx)(e.li,{children:"Updates server tags and world generation data"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"shard-update-portal-state",children:"Shard_UpdatePortalState(inst)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nUpdates portal connection state and automatically links unbound portals to available shards."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"inst"})," (Entity): Portal entity instance"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Called automatically when portals are spawned\nlocal portal = SpawnPrefab("cave_entrance")\nShard_UpdatePortalState(portal)\n\n-- Manual portal state update\nfor portal_id, portal in pairs(ShardPortals) do\n    Shard_UpdatePortalState(portal)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-get-connected-shards",children:"Shard_GetConnectedShards()"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nReturns a deep copy of all currently connected shards information for debugging and monitoring purposes."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"(table): Deep copy of connected shards data"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Get connected shards for debugging\nlocal shards = Shard_GetConnectedShards()\nfor world_id, shard_info in pairs(shards) do\n    print("World:", world_id)\n    print("Ready:", shard_info.ready)\n    print("Tags:", table.concat(shard_info.tags, ", "))\n    \n    if shard_info.world and shard_info.world.preset then\n        print("Preset:", shard_info.world.preset)\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"session-and-state-management",children:"Session and State Management"}),"\n",(0,i.jsx)(e.h3,{id:"shard-update-master-session-id",children:"Shard_UpdateMasterSessionId(session_id)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nUpdates the master shard session identifier and notifies the world of the change."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"session_id"})," (string): New master session identifier"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Update master session ID\nlocal new_session = GenerateNewSessionId()\nShard_UpdateMasterSessionId(new_session)\n\n-- Listen for session changes\nTheWorld:ListenForEvent("ms_newmastersessionid", function(world, session_id)\n    print("Master session updated to:", session_id)\nend)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-world-save",children:"Shard_WorldSave()"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nTriggers a world save event on the master shard."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Trigger world save\nShard_WorldSave()\n\n-- Listen for save events\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("ms_save", function()\n        print("World save triggered")\n        -- Perform save operations\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"voting-system-functions",children:"Voting System Functions"}),"\n",(0,i.jsx)(e.h3,{id:"shard-start-vote",children:"Shard_StartVote(command_id, starter_id, target_id)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nInitiates a voting process on the master shard with specified parameters."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"command_id"})," (number): Command hash identifier for the vote"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"starter_id"})," (string): User ID of the vote initiator"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"target_id"})," (string): User ID of the vote target (if applicable)"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Start a kick vote\nlocal command_hash = GetCommandHash("kick")\nlocal initiator = "player1_userid"\nlocal target = "player2_userid"\n\nShard_StartVote(command_hash, initiator, target)\n\n-- Listen for vote start events on master\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("ms_startvote", function(world, data)\n        print("Vote started by:", data.starteruserid)\n        print("Target:", data.targetuserid)\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-stop-vote",children:"Shard_StopVote()"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nStops the current voting process on the master shard."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Stop current vote\nShard_StopVote()\n\n-- Listen for vote stop events\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("ms_stopvote", function()\n        print("Voting stopped")\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-receive-vote",children:"Shard_ReceiveVote(selection, user_id)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nProcesses a vote selection from a player on the master shard."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"selection"})," (boolean): Vote choice (true for yes, false for no)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"user_id"})," (string): User ID of the voter"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Submit a vote\nShard_ReceiveVote(true, "player1_userid")  -- Vote yes\nShard_ReceiveVote(false, "player2_userid") -- Vote no\n\n-- Listen for vote submissions on master\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("ms_receivevote", function(world, data)\n        print("Vote received from:", data.userid)\n        print("Selection:", data.selection and "Yes" or "No")\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"dice-roll-system",children:"Dice Roll System"}),"\n",(0,i.jsx)(e.h3,{id:"shard-on-dice-roll-request",children:"Shard_OnDiceRollRequest(user_id)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nHandles dice roll requests with cooldown management to prevent spam."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"user_id"})," (string): User ID requesting the dice roll"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["(boolean): ",(0,i.jsx)(e.code,{children:"true"})," if request is allowed, ",(0,i.jsx)(e.code,{children:"false"})," if on cooldown"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Process dice roll request\nlocal user = "player1_userid"\nlocal allowed = Shard_OnDiceRollRequest(user)\n\nif allowed then\n    print("Dice roll allowed for user:", user)\n    -- Perform dice roll\n    local result = math.random(1, 6)\n    NotifyDiceRoll(user, result)\nelse\n    print("Dice roll on cooldown for user:", user)\n    -- Notify user of cooldown\n    NotifyDiceRollCooldown(user)\nend\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Technical Notes:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Uses ",(0,i.jsx)(e.code,{children:"TUNING.DICE_ROLL_COOLDOWN"})," for cooldown duration"]}),"\n",(0,i.jsx)(e.li,{children:"Only functions on master shard"}),"\n",(0,i.jsx)(e.li,{children:"Automatically cleans up expired cooldown entries"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"boss-and-event-synchronization",children:"Boss and Event Synchronization"}),"\n",(0,i.jsx)(e.h3,{id:"shard-sync-boss-defeated",children:"Shard_SyncBossDefeated(bossprefab, shardid)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nSynchronizes boss defeat events across shards to maintain consistent world state."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"bossprefab"})," (string): Prefab name of the defeated boss"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"shardid"})," (string): Optional shard identifier where boss was defeated"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Sync boss defeat from caves\nShard_SyncBossDefeated("dragonfly", "Caves")\n\n-- Sync boss defeat from current shard\nShard_SyncBossDefeated("bearger")\n\n-- Listen for boss defeats on master\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("master_shardbossdefeated", function(world, data)\n        print("Boss defeated:", data.bossprefab)\n        print("On shard:", data.shardid)\n        -- Update world progression\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"merm-king-synchronization-functions",children:"Merm King Synchronization Functions"}),"\n",(0,i.jsx)(e.h3,{id:"shard-sync-merm-king-exists",children:"Shard_SyncMermKingExists(exists, shardid)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nSynchronizes Merm King existence status across shards for quest progression tracking."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"exists"})," (boolean): Whether Merm King exists"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"shardid"})," (string): Optional shard identifier"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Notify that Merm King spawned\nShard_SyncMermKingExists(true, "Forest")\n\n-- Notify that Merm King was defeated\nShard_SyncMermKingExists(false, "Forest")\n\n-- Listen for Merm King status changes\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("master_shardmermkingexists", function(world, data)\n        print("Merm King exists:", data.exists)\n        print("On shard:", data.shardid)\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-sync-merm-king-trident",children:"Shard_SyncMermKingTrident(exists, shardid)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nSynchronizes Merm King Trident pickup status across shards for buff management."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"exists"})," (boolean): Whether trident was picked up"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"shardid"})," (string): Optional shard identifier"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Sync trident pickup\nShard_SyncMermKingTrident(true, "Caves")\n\n-- Listen for trident status updates\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("master_shardmermkingtrident", function(world, data)\n        print("Merm King Trident picked up:", data.pickedup)\n        print("On shard:", data.shardid)\n        -- Apply global buff\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-sync-merm-king-crown",children:"Shard_SyncMermKingCrown(exists, shardid)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nSynchronizes Merm King Crown pickup status across shards for buff management."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"exists"})," (boolean): Whether crown was picked up"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"shardid"})," (string): Optional shard identifier"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Sync crown pickup\nShard_SyncMermKingCrown(true)\n\n-- Listen for crown status updates\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("master_shardmermkingcrown", function(world, data)\n        print("Merm King Crown picked up:", data.pickedup)\n        -- Apply global buff\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"shard-sync-merm-king-pauldron",children:"Shard_SyncMermKingPauldron(exists, shardid)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Status:"})," ",(0,i.jsx)(e.code,{children:"stable"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Description:"}),"\nSynchronizes Merm King Pauldron pickup status across shards for buff management."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"exists"})," (boolean): Whether pauldron was picked up"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"shardid"})," (string): Optional shard identifier"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Sync pauldron pickup\nShard_SyncMermKingPauldron(true)\n\n-- Listen for pauldron status updates\nif TheWorld and TheWorld.ismastershard then\n    TheWorld:ListenForEvent("master_shardmermkingpauldron", function(world, data)\n        print("Merm King Pauldron picked up:", data.pickedup)\n        -- Apply global buff\n    end)\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,i.jsx)(e.h3,{id:"basic-shard-connection-management",children:"Basic Shard Connection Management"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Initialize shard networking\nlocal function InitializeShardNetworking()\n    -- Check if this is master shard\n    if Shard_IsMaster() then\n        print("Initializing master shard")\n        \n        -- Set up world settings sync\n        TheWorld:ListenForEvent("shardconnected", function(world, data)\n            Shard_SyncWorldSettings(data.world_id, false)\n        end)\n    else\n        print("Initializing secondary shard")\n        \n        -- Request settings from master\n        TheWorld:DoTaskInTime(1, function()\n            SendRPCToShard(SHARD_RPC.ResyncWorldSettings, SHARDID.MASTER)\n        end)\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"portal-management-integration",children:"Portal Management Integration"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Manage portal connections\nlocal function ManagePortalConnections()\n    -- Update all portal states when shard list changes\n    for portal_id, portal in pairs(ShardPortals) do\n        if portal:IsValid() then\n            Shard_UpdatePortalState(portal)\n        else\n            -- Clean up invalid portals\n            ShardPortals[portal_id] = nil\n        end\n    end\n    \n    -- Log current connections\n    local connected = Shard_GetConnectedShards()\n    for world_id, info in pairs(connected) do\n        print("Portal target available:", world_id)\n    end\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"event-synchronization-system",children:"Event Synchronization System"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Set up cross-shard event synchronization\nlocal function SetupEventSync()\n    -- Boss defeat tracking\n    inst:ListenForEvent("entity_death", function(inst, data)\n        if data.inst:HasTag("epic") then\n            local boss_prefab = data.inst.prefab\n            Shard_SyncBossDefeated(boss_prefab)\n        end\n    end, TheWorld)\n    \n    -- Merm King item tracking\n    inst:ListenForEvent("ms_playerjoined", function(world, player)\n        local inventory = player.components.inventory\n        if inventory then\n            -- Check for Merm King items\n            if inventory:Has("mermking_trident", 1) then\n                Shard_SyncMermKingTrident(true)\n            end\n        end\n    end, TheWorld)\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,i.jsx)(e.h3,{id:"theshard-integration",children:"TheShard Integration"}),"\n",(0,i.jsx)(e.p,{children:"Shard identification and status:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Shard identification\nlocal shard_id = TheShard:GetShardId()\nlocal is_master = TheShard:IsMaster()\nlocal is_secondary = TheShard:IsSecondary()\n"})}),"\n",(0,i.jsx)(e.h3,{id:"thenet-integration",children:"TheNet Integration"}),"\n",(0,i.jsx)(e.p,{children:"Network communication and simulation:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Network simulation checks\nlocal is_master_sim = TheNet:GetIsMasterSimulation()\nlocal is_dedicated = TheNet:IsDedicated()\n"})}),"\n",(0,i.jsx)(e.h3,{id:"rpc-system-integration",children:"RPC System Integration"}),"\n",(0,i.jsx)(e.p,{children:"Remote procedure calls between shards:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Send RPC to specific shard\nSendRPCToShard(SHARD_RPC.SyncWorldSettings, target_shard, data)\n\n-- Common RPC types\nSHARD_RPC.SyncWorldSettings\nSHARD_RPC.ResyncWorldSettings\nSHARD_RPC.SyncBossDefeated\nSHARD_RPC.SyncMermKingExists\n"})}),"\n",(0,i.jsx)(e.h3,{id:"customize-system-integration",children:"Customize System Integration"}),"\n",(0,i.jsx)(e.p,{children:"World settings synchronization:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- Get synchronizable options\nlocal sync_options = Customize.GetSyncOptions()\nlocal world_options = ShardGameIndex:GetGenOptions()\n"})}),"\n",(0,i.jsx)(e.h2,{id:"constants-and-configuration",children:"Constants and Configuration"}),"\n",(0,i.jsx)(e.h3,{id:"shard-states",children:"Shard States"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"REMOTESHARDSTATE.READY"}),": Shard is connected and ready"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"REMOTESHARDSTATE.DISCONNECTED"}),": Shard is disconnected"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"shard-identifiers",children:"Shard Identifiers"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"SHARDID.MASTER"}),": Master shard identifier"]}),"\n",(0,i.jsx)(e.li,{children:"Custom shard IDs for caves and other worlds"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"timing-constants",children:"Timing Constants"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"TUNING.DICE_ROLL_COOLDOWN"}),": Cooldown time for dice roll requests"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardindex",children:"ShardIndex"}),": Individual shard data management"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"./shardsaveindex.md",children:"ShardSaveIndex"}),": Multi-shard save slot management"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"../core-systems/index.md#thenet",children:"TheNet"}),": Network communication services"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"../core-systems/index.md#theshard",children:"TheShard"}),": Shard identification and state"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"../map/index.md#customize",children:"Customize"}),": World generation customization system"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>a});var r=s(96540);const i={},d=r.createContext(i);function t(n){const e=r.useContext(d);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),r.createElement(d.Provider,{value:e},n.children)}}}]);