"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8860],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},9275:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api-vanilla/global-objects/input","title":"Input System","description":"The input system in Don\'t Starve Together allows mods to interact with keyboard, mouse, gamepad, and touch inputs. At the core of this system is the global TheInput object, which provides methods for registering event handlers, checking input states, and managing input configurations.","source":"@site/docs/api-vanilla/global-objects/theinput.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/input","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/input","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"input","title":"Input System","sidebar_position":10}}');var i=t(4848),r=t(8453);const l={id:"input",title:"Input System",sidebar_position:10},o="Input System",d={},a=[{value:"TheInput Overview",id:"theinput-overview",level:2},{value:"Key Input Handlers",id:"key-input-handlers",level:2},{value:"Handler Processing Order",id:"handler-processing-order",level:3},{value:"Mouse Input Handling",id:"mouse-input-handling",level:2},{value:"Controller Support",id:"controller-support",level:2},{value:"Key and Control Constants",id:"key-and-control-constants",level:2},{value:"Screen Resize Handling",id:"screen-resize-handling",level:2},{value:"Input Debugging",id:"input-debugging",level:2},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Toggle Mod Feature With Hotkey",id:"toggle-mod-feature-with-hotkey",level:3},{value:"Custom Action Menu",id:"custom-action-menu",level:3},{value:"Draggable UI Element",id:"draggable-ui-element",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"input-system",children:"Input System"})}),"\n",(0,i.jsxs)(n.p,{children:["The input system in Don't Starve Together allows mods to interact with keyboard, mouse, gamepad, and touch inputs. At the core of this system is the global ",(0,i.jsx)(n.code,{children:"TheInput"})," object, which provides methods for registering event handlers, checking input states, and managing input configurations."]}),"\n",(0,i.jsx)(n.h2,{id:"theinput-overview",children:"TheInput Overview"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TheInput"})," is a global singleton that manages all input handling in the game. It provides methods for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Registering handlers for keyboard, mouse, and controller inputs"}),"\n",(0,i.jsx)(n.li,{children:"Getting the current state of keys and buttons"}),"\n",(0,i.jsx)(n.li,{children:"Converting between screen and world coordinates"}),"\n",(0,i.jsx)(n.li,{children:"Managing focus for UI elements"}),"\n",(0,i.jsx)(n.li,{children:"Enabling or disabling specific input features"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"key-input-handlers",children:"Key Input Handlers"}),"\n",(0,i.jsx)(n.p,{children:"There are several methods for registering input handlers, each with a different scope:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Handle specific key presses\nlocal key_handler = TheInput:AddKeyHandler(function(key, down)\n    if key == KEY_F and down then\n        print("F key pressed down!")\n        return true -- Return true to consume the input\n    end\n    return false -- Return false to allow other handlers to process this input\nend)\n\n-- Handle key presses only when key is released\nlocal key_up_handler = TheInput:AddKeyUpHandler(KEY_G, function()\n    print("G key released!")\nend)\n\n-- Handle key presses only when key is pressed\nlocal key_down_handler = TheInput:AddKeyDownHandler(KEY_H, function()\n    print("H key pressed!")\nend)\n\n-- Handle all input events (keys, controller buttons, etc.)\nlocal general_handler = TheInput:AddGeneralHandler(function(key, down)\n    if key == KEY_ESCAPE and not down then\n        print("Escape key released!")\n        return true\n    end\n    return false\nend)\n\n-- Clean up handlers when not needed\nTheInput:RemoveHandler(key_handler)\nTheInput:RemoveHandler(key_up_handler)\nTheInput:RemoveHandler(key_down_handler)\nTheInput:RemoveHandler(general_handler)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"handler-processing-order",children:"Handler Processing Order"}),"\n",(0,i.jsx)(n.p,{children:"Input handlers are processed in a specific order:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Focused UI widgets and their children"}),"\n",(0,i.jsx)(n.li,{children:"Global input handlers (registered with TheInput methods)"}),"\n",(0,i.jsx)(n.li,{children:"Default game controls"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This means UI elements with focus will get first chance to handle input events."}),"\n",(0,i.jsx)(n.h2,{id:"mouse-input-handling",children:"Mouse Input Handling"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TheInput"})," provides methods for handling mouse input:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Handle mouse movement\nlocal mouse_move_handler = TheInput:AddMouseMoveHandler(function(x, y)\n    -- x, y are screen coordinates\n    print("Mouse moved to:", x, y)\nend)\n\n-- Get current mouse position in screen coordinates\nlocal screen_pos = TheInput:GetScreenPosition()\nprint("Mouse screen position:", screen_pos.x, screen_pos.y)\n\n-- Convert screen position to world position\nlocal world_pos = TheInput:GetWorldPosition()\nprint("Mouse world position:", world_pos.x, world_pos.y, world_pos.z)\n\n-- Check if mouse is over a world entity\nlocal entity = TheInput:GetWorldEntityUnderMouse()\nif entity then\n    print("Mouse is over:", entity.prefab)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"controller-support",children:"Controller Support"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TheInput"})," also handles controller input:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Check if a controller is connected\nif TheInput:ControllerAttached() then\n    print("Controller is connected")\nend\n\n-- Check controller button state (for direct polling)\nif TheInput:IsControlPressed(CONTROL_MOVE_UP) then\n    print("Moving up with controller")\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"key-and-control-constants",children:"Key and Control Constants"}),"\n",(0,i.jsx)(n.p,{children:"Don't Starve Together provides constants for all keys and controls:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Keyboard key constants\nlocal KEY_CONSTANTS = {\n    KEY_A = 65,     -- ASCII value for 'A'\n    KEY_SPACE = 32, -- ASCII value for space\n    KEY_F1 = 282,   -- Function key F1\n    KEY_ESCAPE = 27,\n    -- Many more defined in the game\n}\n\n-- Control constants (abstract controls that can be mapped to keys or controller buttons)\nlocal CONTROL_CONSTANTS = {\n    CONTROL_MOVE_UP = 0,\n    CONTROL_MOVE_DOWN = 1,\n    CONTROL_MOVE_LEFT = 2,\n    CONTROL_MOVE_RIGHT = 3,\n    CONTROL_ATTACK = 4,\n    CONTROL_ACTION = 5,\n    -- Many more defined in the game\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"screen-resize-handling",children:"Screen Resize Handling"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TheInput"})," can notify your mod when the screen is resized:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Register a handler for screen resize events\nlocal resize_handler = TheInput:AddResizeHandler(function(new_width, new_height)\n    print("Screen resized to:", new_width, "x", new_height)\n    -- Reposition UI elements based on new dimensions\nend)\n\n-- Clean up when no longer needed\nTheInput:RemoveHandler(resize_handler)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"input-debugging",children:"Input Debugging"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TheInput"})," includes some debugging utilities:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Enable debug toggle (F8 key)\nTheInput:EnableDebugToggle(true)\n\n-- Enable input debugging to print input events\nTheInput:EnableInputDebugging()\n\n-- Get all current key/controller bindings\nlocal bindings = TheInput:GetAllBindings()\nfor control_id, key in pairs(bindings) do\n    print(control_id, "is bound to", key)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,i.jsx)(n.h3,{id:"toggle-mod-feature-with-hotkey",children:"Toggle Mod Feature With Hotkey"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Toggle a mod feature with the F key\nlocal MOD_ENABLED = false\n\nAddPrefabPostInit("world", function()\n    TheInput:AddKeyUpHandler(KEY_F, function()\n        MOD_ENABLED = not MOD_ENABLED\n        print("Mod is now:", MOD_ENABLED and "ENABLED" or "DISABLED")\n    end)\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-action-menu",children:"Custom Action Menu"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Show a custom action menu when the player holds Shift and right-clicks\nlocal function OnRawKey(key, down)\n    if key == KEY_SHIFT and down and TheInput:IsKeyDown(KEY_MOUSE_RIGHT) then\n        -- Get world position of mouse\n        local pos = TheInput:GetWorldPosition()\n        \n        -- Get entity under mouse\n        local ent = TheInput:GetWorldEntityUnderMouse()\n        \n        -- Show custom action menu for this entity at this position\n        ShowCustomActionMenu(ent, pos)\n        return true -- Consume the input\n    end\n    return false\nend\n\nlocal raw_key_handler = TheInput:AddKeyHandler(OnRawKey)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"draggable-ui-element",children:"Draggable UI Element"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"function MakeDraggable(widget)\n    widget.dragging = false\n    widget.drag_offset = Vector3(0, 0, 0)\n    \n    widget:SetClickable(true)\n    \n    function widget:OnMouseButton(button, down, x, y)\n        if button == MOUSEBUTTON_LEFT then\n            if down then\n                -- Start dragging\n                local wx, wy = self:GetWorldPosition():Get()\n                self.drag_offset = Vector3(wx - x, wy - y, 0)\n                self.dragging = true\n                self:StartUpdating()\n                return true\n            else\n                -- Stop dragging\n                self.dragging = false\n                self:StopUpdating()\n                return true\n            end\n        end\n        return false\n    end\n    \n    function widget:OnUpdate(dt)\n        if self.dragging then\n            local pos = TheInput:GetScreenPosition()\n            local new_pos = pos + self.drag_offset\n            self:SetPosition(new_pos)\n        end\n    end\n    \n    return widget\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always Clean Up Handlers"}),": Use ",(0,i.jsx)(n.code,{children:"TheInput:RemoveHandler()"})," when your mod is disabled or unloaded"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Return true When Handled"}),": Return ",(0,i.jsx)(n.code,{children:"true"})," from handlers when you've consumed the input"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Support Both Control Methods"}),": Design your mod to work with both keyboard/mouse and controllers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Input Buffering"}),": For actions that require timing, consider implementing input buffering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Don't Block Critical Controls"}),": Be careful not to interfere with essential game controls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Context"}),": Make sure the input handling is appropriate for the current game state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Throttle Input Processing"}),": For continuous input (like mouse movement), consider throttling updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Provide Visual Feedback"}),": Always give visual feedback when processing input"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle Multiple Input Methods"}),": Support both direct key checks and abstract controls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Wrap callbacks in pcall to prevent crashes from user input"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api-vanilla/core/ui-events",children:"UI Events"})," - Event handling for UI widgets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api-vanilla/core/ui-system",children:"UI System"})," - Overview of the UI system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api-vanilla/examples/case-geometric",children:"Geometric Placement Case Study"})," - Real-world example of input handling in mods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api-vanilla/examples/custom-ui-elements",children:"Custom UI Elements"})," - Examples of creating UI elements that respond to input"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);