"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7506],{3376:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/node-types/network","title":"Network","description":"Network nodes handle the synchronization of game state between server and clients in Don\'t Starve Together\'s multiplayer environment.","source":"@site/docs/api-vanilla/node-types/network.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/network","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/network","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"network","title":"Network","sidebar_position":8},"sidebar":"docs","previous":{"title":"Widget","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/widget"},"next":{"title":"Data Types","permalink":"/dst-api-webdocs/docs/category/data-types"}}');var s=t(4848),r=t(8453);const l={id:"network",title:"Network",sidebar_position:8},a="Network",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Network Components",id:"network-components",level:2},{value:"NetVars (Network Variables)",id:"netvars-network-variables",level:3},{value:"Listening for Network Events",id:"listening-for-network-events",level:3},{value:"Replication",id:"replication",level:2},{value:"RPC (Remote Procedure Calls)",id:"rpc-remote-procedure-calls",level:2},{value:"Network Tags",id:"network-tags",level:2},{value:"Master Simulation",id:"master-simulation",level:2},{value:"Related Systems",id:"related-systems",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"network",children:"Network"})}),"\n",(0,s.jsx)(n.p,{children:"Network nodes handle the synchronization of game state between server and clients in Don't Starve Together's multiplayer environment."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Network nodes enable multiplayer functionality by serializing and deserializing game state data, handling replication of entities and their properties, and managing client-server communication."}),"\n",(0,s.jsx)(n.h2,{id:"network-components",children:"Network Components"}),"\n",(0,s.jsx)(n.h3,{id:"netvars-network-variables",children:"NetVars (Network Variables)"}),"\n",(0,s.jsx)(n.p,{children:"NetVars are variables that are automatically synchronized between server and clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Defining network variables\nself.isopen = net_bool(self.inst.GUID, "chest.isopen", "isopendirty")\nself.health = net_float(self.inst.GUID, "health.current", "healthdirty")\nself.playername = net_string(self.inst.GUID, "player.name", "namedirty")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Common NetVar types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_bool"}),": Boolean values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_byte"}),": Small integer values (0-255)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_shortint"}),": Short integer values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_int"}),": Integer values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_float"}),": Floating point values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_string"}),": String values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_entity"}),": Entity references"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_hash"}),": Hash values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"net_smallbyte"}),": Very small integer values (0-15)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"listening-for-network-events",children:"Listening for Network Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- On server side\nself.isopen:set(true)\n\n-- On client side\nself.inst:ListenForEvent("isopendirty", function()\n    local isopen = self.isopen:value()\n    -- Update client-side presentation based on isopen value\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"replication",children:"Replication"}),"\n",(0,s.jsx)(n.p,{children:"Replication is the process of synchronizing entity state between server and clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Common pattern for component replication\nlocal function OnHealthDelta(inst)\n    if not inst.components.health:IsDead() then\n        inst.AnimState:SetPercent("hit", 1 - inst.components.health:GetPercent())\n    end\nend\n\nlocal function OnIsOpen(inst)\n    if inst.isopen:value() then\n        inst.AnimState:PlayAnimation("open")\n    else\n        inst.AnimState:PlayAnimation("close")\n    end\nend\n\n-- Create client-side representation\nlocal function ClientInit(inst)\n    inst:ListenForEvent("healthdirty", OnHealthDelta)\n    inst:ListenForEvent("isopendirty", OnIsOpen)\nend\n\n-- Create server-side representation\nlocal function MasterInit(inst)\n    -- Server-side initialization\nend\n\n-- Common initialization\nlocal function SharedInit(inst)\n    -- Shared initialization\nend\n\nreturn function(inst)\n    SharedInit(inst)\n    \n    if TheWorld.ismastersim then\n        MasterInit(inst)\n    else\n        ClientInit(inst)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"rpc-remote-procedure-calls",children:"RPC (Remote Procedure Calls)"}),"\n",(0,s.jsx)(n.p,{children:"RPCs allow executing functions remotely:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define an RPC\nAddClientModRPCHandler("MyMod", "DoSomething", function(player, arg1, arg2)\n    -- Handle the RPC on receiving side\nend)\n\n-- Send an RPC\nSendModRPCToServer("MyMod", "DoSomething", arg1, arg2)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"network-tags",children:"Network Tags"}),"\n",(0,s.jsx)(n.p,{children:"Some special tags affect network behavior:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_master"}),": Entity exists on server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_replica"}),": Entity's client replica"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"networker"}),": Entity handles network communication"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"master-simulation",children:"Master Simulation"}),"\n",(0,s.jsx)(n.p,{children:"The server is responsible for running the master simulation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"if TheWorld.ismastersim then\n    -- Server-only code\nelse\n    -- Client-only code\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Entity replication system"}),"\n",(0,s.jsx)(n.li,{children:"Event system"}),"\n",(0,s.jsx)(n.li,{children:"Mod RPC system"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);