"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[39454],{15146:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"game-scripts/core-systems/mod-support/dlc/dlcsupport-worldgen","title":"DLC Support Worldgen","description":"DLC support system specialized for world generation with parameter-based DLC state management","source":"@site/docs/game-scripts/core-systems/mod-support/dlc/dlcsupport_worldgen.md","sourceDirName":"game-scripts/core-systems/mod-support/dlc","slug":"/game-scripts/core-systems/mod-support/dlc/dlcsupport-worldgen","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/dlc/dlcsupport-worldgen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"dlcsupport-worldgen","title":"DLC Support Worldgen","description":"DLC support system specialized for world generation with parameter-based DLC state management","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"DLC Support Strings","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/dlc/dlcsupport-strings"},"next":{"title":"DLC Support","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/dlc/dlcsupport"}}');var l=s(74848),i=s(28453);const t={id:"dlcsupport-worldgen",title:"DLC Support Worldgen",description:"DLC support system specialized for world generation with parameter-based DLC state management",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="DLC Support Worldgen",a={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Constants",id:"constants",level:2},{value:"DLC Identifiers",id:"dlc-identifiers",level:3},{value:"MAIN_GAME",id:"main_game",level:4},{value:"REIGN_OF_GIANTS",id:"reign_of_giants",level:4},{value:"DLC Configuration Tables",id:"dlc-configuration-tables",level:3},{value:"NO_DLC_TABLE",id:"no_dlc_table",level:4},{value:"ALL_DLC_TABLE",id:"all_dlc_table",level:4},{value:"DLC_LIST",id:"dlc_list",level:4},{value:"Functions",id:"functions",level:2},{value:"IsDLCEnabled(index)",id:"isdlcenabled",level:3},{value:"SetDLCEnabled(tbl)",id:"setdlcenabled",level:3},{value:"Global Variables",id:"global-variables",level:2},{value:"GEN_PARAMETERS",id:"gen_parameters",level:3},{value:"Initialization",id:"initialization",level:2},{value:"Internal Variables",id:"internal-variables",level:2},{value:"__DLCEnabledTable",id:"__dlcenabledtable",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"JSON Parameter Integration",id:"json-parameter-integration",level:2},{value:"Worldgen-Specific Considerations",id:"worldgen-specific-considerations",level:2},{value:"Differences from Main DLC Support",id:"differences-from-main-dlc-support",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"dlc-support-worldgen",children:"DLC Support Worldgen"})}),"\n",(0,l.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Build Version"}),(0,l.jsx)(n.th,{children:"Change Date"}),(0,l.jsx)(n.th,{children:"Change Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"676042"}),(0,l.jsx)(n.td,{children:"2025-06-21"}),(0,l.jsx)(n.td,{children:"stable"}),(0,l.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"dlcsupport_worldgen"})," module provides a specialized DLC support system for world generation contexts. It uses JSON parameters to configure DLC states and provides simplified DLC checking functionality during the world generation process."]}),"\n",(0,l.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Check if Reign of Giants is enabled during worldgen\nif IsDLCEnabled(REIGN_OF_GIANTS) then\n    -- Include RoG-specific world generation features\n    AddRogBiomes()\nend\n\n-- Set DLC state from parameters\nSetDLCEnabled({REIGN_OF_GIANTS = true})\n"})}),"\n",(0,l.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,l.jsx)(n.h3,{id:"dlc-identifiers",children:"DLC Identifiers"}),"\n",(0,l.jsx)(n.h4,{id:"main_game",children:"MAIN_GAME"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Value:"})," ",(0,l.jsx)(n.code,{children:"0"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nIdentifier for the base game (no DLC)."]}),"\n",(0,l.jsx)(n.h4,{id:"reign_of_giants",children:"REIGN_OF_GIANTS"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Value:"})," ",(0,l.jsx)(n.code,{children:"1"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nIdentifier for the Reign of Giants DLC."]}),"\n",(0,l.jsx)(n.h3,{id:"dlc-configuration-tables",children:"DLC Configuration Tables"}),"\n",(0,l.jsx)(n.h4,{id:"no_dlc_table",children:"NO_DLC_TABLE"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Value:"})," ",(0,l.jsx)(n.code,{children:"{REIGN_OF_GIANTS=false}"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nTable representing no DLC enabled state for world generation."]}),"\n",(0,l.jsx)(n.h4,{id:"all_dlc_table",children:"ALL_DLC_TABLE"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Value:"})," ",(0,l.jsx)(n.code,{children:"{REIGN_OF_GIANTS=true}"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nTable representing all DLC enabled state for world generation."]}),"\n",(0,l.jsx)(n.h4,{id:"dlc_list",children:"DLC_LIST"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Value:"})," ",(0,l.jsx)(n.code,{children:"{REIGN_OF_GIANTS}"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nArray of all available DLC identifiers for world generation."]}),"\n",(0,l.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,l.jsx)(n.h3,{id:"isdlcenabled",children:"IsDLCEnabled(index)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nChecks if a specific DLC is enabled in the current world generation context."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"index"})," (number): DLC index to check"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(boolean): true if DLC is enabled, false if disabled or not set"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Check DLC state during world generation\nif IsDLCEnabled(REIGN_OF_GIANTS) then\n    print("Generating world with Reign of Giants content")\n    -- Add seasonal giants\n    AddSeasonalGiants()\n    -- Include additional biomes\n    AddDesertBiome()\nelse\n    print("Generating base game world")\nend\n'})}),"\n",(0,l.jsx)(n.h3,{id:"setdlcenabled",children:"SetDLCEnabled(tbl)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nSets the DLC enabled state table for world generation. Accepts a table mapping DLC indices to boolean values."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"tbl"})," (table): Table mapping DLC indices to enabled states (defaults to empty table)"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Enable Reign of Giants for world generation\nSetDLCEnabled({\n    [REIGN_OF_GIANTS] = true\n})\n\n-- Disable all DLC\nSetDLCEnabled({})\n\n-- Or explicitly disable\nSetDLCEnabled({\n    [REIGN_OF_GIANTS] = false\n})\n"})}),"\n",(0,l.jsx)(n.h2,{id:"global-variables",children:"Global Variables"}),"\n",(0,l.jsx)(n.h3,{id:"gen_parameters",children:"GEN_PARAMETERS"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"string"})," (JSON)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nJSON string containing world generation parameters, including DLC enabled states. This is typically set by the world generation system."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n    "DLCEnabled": {\n        "1": true\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,l.jsxs)(n.p,{children:["The module automatically initializes DLC state from the ",(0,l.jsx)(n.code,{children:"GEN_PARAMETERS"})," global:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local parameters = json.decode(GEN_PARAMETERS or {})\nSetDLCEnabled(parameters.DLCEnabled)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"internal-variables",children:"Internal Variables"}),"\n",(0,l.jsx)(n.h3,{id:"__dlcenabledtable",children:"__DLCEnabledTable"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})," (internal)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nInternal table storing the current DLC enabled states. Modified by ",(0,l.jsx)(n.code,{children:"SetDLCEnabled()"})," and read by ",(0,l.jsx)(n.code,{children:"IsDLCEnabled()"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- World generation with DLC support\nprint("Starting world generation...")\n\n-- Check initial DLC state\nprint("DLC enabled:", IsDLCEnabled(REIGN_OF_GIANTS))\n\n-- Example world generation logic\nfunction GenerateWorld()\n    local world_config = {\n        biomes = {"forest", "grassland", "savanna"},\n        creatures = {"rabbit", "beefalo", "spider"},\n        resources = {"flint", "gold", "logs"}\n    }\n    \n    -- Add DLC content if enabled\n    if IsDLCEnabled(REIGN_OF_GIANTS) then\n        print("Adding Reign of Giants content to world...")\n        \n        -- Add DLC biomes\n        table.insert(world_config.biomes, "desert")\n        table.insert(world_config.biomes, "deciduous")\n        \n        -- Add DLC creatures\n        table.insert(world_config.creatures, "volt_goat")\n        table.insert(world_config.creatures, "catcoon")\n        \n        -- Add DLC resources\n        table.insert(world_config.resources, "cactus")\n        table.insert(world_config.resources, "tumbleweeds")\n        \n        -- Add seasonal giants\n        world_config.giants = {\n            autumn = "bearger",\n            winter = "deerclops", \n            spring = "moose_goose",\n            summer = "dragonfly"\n        }\n    else\n        print("Generating base game world only")\n        \n        -- Base game giants only\n        world_config.giants = {\n            winter = "deerclops"\n        }\n    end\n    \n    return world_config\nend\n\n-- Generate world with current DLC settings\nlocal world = GenerateWorld()\n\n-- Example of dynamic DLC configuration\nfunction ConfigureWorldDLC(enable_rog)\n    local dlc_config = {}\n    if enable_rog then\n        dlc_config[REIGN_OF_GIANTS] = true\n    else\n        dlc_config[REIGN_OF_GIANTS] = false\n    end\n    \n    SetDLCEnabled(dlc_config)\n    print("DLC configuration updated. RoG enabled:", IsDLCEnabled(REIGN_OF_GIANTS))\nend\n\n-- Test different configurations\nConfigureWorldDLC(true)   -- Enable RoG\nlocal rog_world = GenerateWorld()\n\nConfigureWorldDLC(false)  -- Disable RoG  \nlocal base_world = GenerateWorld()\n\nprint("Base world biomes:", #base_world.biomes)\nprint("RoG world biomes:", #rog_world.biomes)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"json-parameter-integration",children:"JSON Parameter Integration"}),"\n",(0,l.jsx)(n.p,{children:"The module integrates with the world generation parameter system:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Example GEN_PARAMETERS JSON structure\nGEN_PARAMETERS = [[{\n    "DLCEnabled": {\n        "1": true\n    },\n    "world_size": "default",\n    "season_length": "default",\n    "day_length": "default"\n}]]\n\n-- The module automatically parses this on load\nlocal parameters = json.decode(GEN_PARAMETERS or {})\nSetDLCEnabled(parameters.DLCEnabled)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"worldgen-specific-considerations",children:"Worldgen-Specific Considerations"}),"\n",(0,l.jsx)(n.p,{children:"This module is specifically designed for world generation contexts:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Simplified State Management"}),": Uses a simple boolean table instead of full DLC registration"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Parameter-Driven"}),": DLC state comes from world generation parameters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"JSON Integration"}),": Seamlessly integrates with JSON-based parameter systems"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Lightweight"}),": Minimal overhead for world generation performance"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"differences-from-main-dlc-support",children:"Differences from Main DLC Support"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Feature"}),(0,l.jsx)(n.th,{children:"dlcsupport.lua"}),(0,l.jsx)(n.th,{children:"dlcsupport_worldgen.lua"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"DLC Registration"}),(0,l.jsx)(n.td,{children:"Full registration system"}),(0,l.jsx)(n.td,{children:"Parameter-based only"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Character Lists"}),(0,l.jsx)(n.td,{children:"Multiple character list functions"}),(0,l.jsx)(n.td,{children:"Not applicable"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Prefab Loading"}),(0,l.jsx)(n.td,{children:"Automatic prefab registration"}),(0,l.jsx)(n.td,{children:"Not included"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"State Persistence"}),(0,l.jsx)(n.td,{children:"Uses game systems"}),(0,l.jsx)(n.td,{children:"Uses parameter table"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Initialization"}),(0,l.jsx)(n.td,{children:"Complex setup functions"}),(0,l.jsx)(n.td,{children:"Simple JSON parsing"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/dlc/dlcsupport",children:"DLC Support"}),": Main DLC management system"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/dlc/dlcsupport-strings",children:"DLC Support Strings"}),": DLC string support"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./json.md",children:"JSON"}),": JSON parsing utilities"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"../map/",children:"Map Generation"}),": World generation systems"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var r=s(96540);const l={},i=r.createContext(l);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);