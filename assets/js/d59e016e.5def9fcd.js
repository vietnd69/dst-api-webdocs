"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6878],{6902:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/examples/case-global-position","title":"Case Study - Global Position CompleteSync Mod","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/examples/case-global-position.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/case-global-position","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-global-position","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"case-global-position","title":"Case Study - Global Position CompleteSync Mod","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Case Study - Re-Gorge-itated Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-regorgeitaled"},"next":{"title":"Custom Tool Set Project","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/project-tools"}}');var t=i(4848),o=i(8453);const a={id:"case-global-position",title:"Case Study - Global Position CompleteSync Mod",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Case Study: Global Position CompleteSync Mod",r={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Components",id:"key-components",level:2},{value:"Component Architecture",id:"component-architecture",level:3},{value:"UI Elements",id:"ui-elements",level:3},{value:"Network Architecture",id:"network-architecture",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Map Data Synchronization",id:"map-data-synchronization",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Ping System",id:"ping-system",level:3},{value:"Integration with Game Systems",id:"integration-with-game-systems",level:2},{value:"Entity Component System",id:"entity-component-system",level:3},{value:"Minimap Integration",id:"minimap-integration",level:3},{value:"Cross-Shard Communication",id:"cross-shard-communication",level:3},{value:"Learning Points",id:"learning-points",level:2},{value:"Effective Uses of Components",id:"effective-uses-of-components",level:3},{value:"Network Optimization",id:"network-optimization",level:3},{value:"UI Implementation",id:"ui-implementation",level:3},{value:"See Also",id:"see-also",level:2},{value:"Further Reading",id:"further-reading",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"case-study-global-position-completesync-mod",children:"Case Study: Global Position CompleteSync Mod"})}),"\n",(0,t.jsx)(n.p,{children:"This case study examines the implementation of the Global Position CompleteSync mod, which enhances multiplayer gameplay in Don't Starve Together by providing complete map synchronization and player position tracking."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/hellohawaii2/Global-Position-CompleteSync",children:"Github"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://steamcommunity.com/sharedfiles/filedetails/?id=3138571948",children:"Steam Workshop"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Global Position CompleteSync mod extends the original Global Positions functionality with comprehensive map synchronization between players. Unlike the basic position sharing, this mod ensures that:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"New players joining a server can see areas previously explored by other players"}),"\n",(0,t.jsx)(n.li,{children:"Players moving between cave and surface worlds can see areas explored by others before they arrived"}),"\n",(0,t.jsx)(n.li,{children:"Map discoveries from special events (like reading a Message in a Bottle) are shared with all players"}),"\n",(0,t.jsx)(n.li,{children:"Players can place ping markers on the map for communication"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,t.jsx)(n.h3,{id:"component-architecture",children:"Component Architecture"}),"\n",(0,t.jsx)(n.p,{children:"The mod uses several key components to manage position tracking and map synchronization:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Component"}),(0,t.jsx)(n.th,{children:"Purpose"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"globalposition"})}),(0,t.jsx)(n.td,{children:"Manages individual entity positions on the map"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"globalpositions"})}),(0,t.jsx)(n.td,{children:"Central system that tracks all entities with position data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"shard_isgpsnewlyadded"})}),(0,t.jsx)(n.td,{children:"Handles cross-shard (world) communication for map updates"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"smokeemitter"})}),(0,t.jsx)(n.td,{children:"Visual effect for entities visible on the map"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"ui-elements",children:"UI Elements"}),"\n",(0,t.jsx)(n.p,{children:"The mod implements several custom UI widgets:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pingwheel"}),": Radial menu for selecting ping types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pingbadge"}),": Visual representation of pings on the map"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"maphoverer"}),": Tooltip system for map elements"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"network-architecture",children:"Network Architecture"}),"\n",(0,t.jsx)(n.p,{children:"The implementation uses classified objects for network synchronization, with carefully managed authority:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function GlobalPosition:OnUpdate(dt)\n    local pos = self.inst:GetPosition()\n    if self._x ~= pos.x or self._z ~= pos.z then\n        self._x = pos.x\n        self._z = pos.z\n        self.classified.Transform:SetPosition(pos:Get())\n    end\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.h3,{id:"map-data-synchronization",children:"Map Data Synchronization"}),"\n",(0,t.jsx)(n.p,{children:"The mod's core functionality is complete map synchronization across players and shards. This is achieved through:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"A map buffer system that stores exploration data"}),"\n",(0,t.jsx)(n.li,{children:"Cross-shard RPC handlers for map data transfer"}),"\n",(0,t.jsx)(n.li,{children:"Player-join detection to trigger map synchronization for new players"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local function player2player_via_buffer(world, player_from, player_to)\n    save_to_buffer(world, player_from)\n    learn_from_buffer(world, player_to)\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(n.p,{children:"The mod includes optimizations to prevent lag when traversing between shards:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local STOPSAVEMAPEXPLORER = GetModConfigData("STOPSAVEMAPEXPLORER") and is_dedicated\nif STOPSAVEMAPEXPLORER then\n    -- Custom implementation of SerializeUserSession to avoid saving map data redundantly\n    GLOBAL.SerializeUserSession = function (player, isnewspawn)\n        -- Implementation details...\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"ping-system",children:"Ping System"}),"\n",(0,t.jsx)(n.p,{children:"The ping system allows players to mark locations on the map with different meanings:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Generic ping (rally point)"}),"\n",(0,t.jsx)(n.li,{children:'"Go here" ping'}),"\n",(0,t.jsx)(n.li,{children:'"Explore" ping'}),"\n",(0,t.jsx)(n.li,{children:'"Danger" ping'}),"\n",(0,t.jsx)(n.li,{children:'"On my way" ping'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Each ping type has custom visuals and can be placed using a radial menu accessible by Alt+clicking on the map."}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-game-systems",children:"Integration with Game Systems"}),"\n",(0,t.jsx)(n.h3,{id:"entity-component-system",children:"Entity Component System"}),"\n",(0,t.jsx)(n.p,{children:"The mod leverages Don't Starve Together's entity component system by:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Adding components to entities that need position tracking"}),"\n",(0,t.jsx)(n.li,{children:"Using prefabs for visual representations on the map"}),"\n",(0,t.jsx)(n.li,{children:"Hooking into the game's event system for updates"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"minimap-integration",children:"Minimap Integration"}),"\n",(0,t.jsx)(n.p,{children:"Integration with the game's minimap is achieved through:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'function AddGlobalIcon(inst, isplayer, classified)\n    if not (_GLOBALPOSITIONS_MAP_ICONS[inst.prefab] or inst.MiniMapEntity) then return end\n    classified.icon = SpawnPrefab("globalmapicon_noproxy")\n    classified.icon.MiniMapEntity:SetPriority(10)\n    classified.icon.MiniMapEntity:SetRestriction("player")\n    -- Additional configuration...\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"cross-shard-communication",children:"Cross-Shard Communication"}),"\n",(0,t.jsx)(n.p,{children:"The mod handles communication between different world shards (surface/caves) using:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'AddShardModRPCHandler(modname, "ShardIncreaseCounter", function()\n    if GLOBAL.TheWorld.ismastershard then\n        GLOBAL.TheWorld.shard.components.shard_isgpsnewlyadded:IncreaseCounter()\n    else\n        return\n    end\nend)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"learning-points",children:"Learning Points"}),"\n",(0,t.jsx)(n.h3,{id:"effective-uses-of-components",children:"Effective Uses of Components"}),"\n",(0,t.jsx)(n.p,{children:"The mod demonstrates how to create and use components for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Tracking entity positions (",(0,t.jsx)(n.code,{children:"globalposition"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Managing shared state (",(0,t.jsx)(n.code,{children:"globalpositions"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Cross-shard communication (",(0,t.jsx)(n.code,{children:"shard_isgpsnewlyadded"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"network-optimization",children:"Network Optimization"}),"\n",(0,t.jsx)(n.p,{children:"The mod employs several techniques for network efficiency:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Using classified entities for network variables"}),"\n",(0,t.jsx)(n.li,{children:"Buffering map data to minimize network traffic"}),"\n",(0,t.jsx)(n.li,{children:"Conditional updates that only send data when needed"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"ui-implementation",children:"UI Implementation"}),"\n",(0,t.jsx)(n.p,{children:"The custom UI elements showcase:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Creating interactive widgets (the ping wheel)"}),"\n",(0,t.jsx)(n.li,{children:"Following input from different control schemes (mouse/controller)"}),"\n",(0,t.jsx)(n.li,{children:"Creating tooltips and informational UI elements"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/component-system",children:"Component System"})," - For understanding how components work"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-system",children:"Network System"})," - For details on network synchronization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/client-server-synchronization",children:"Client-Server Synchronization"})," - For best practices in networking"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/world/map",children:"Map API"})," - For map-related functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/ui-system",children:"UI System"})," - For creating UI elements"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/event-system",children:"Event System"})," - For understanding event handling used in the mod"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/entity-framework/entityscript",children:"EntityScript"})," - For entity manipulation techniques"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-ui-elements",children:"Custom UI Elements"})," - For more examples of UI implementation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(6540);const t={},o=s.createContext(t);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);