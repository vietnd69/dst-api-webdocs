"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9401],{6541:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/getting-started/deprecated-features","title":"Deprecated Features and Alternatives","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/getting-started/deprecated-features.md","sourceDirName":"api-vanilla/getting-started","slug":"/api-vanilla/getting-started/deprecated-features","permalink":"/dst-api-webdocs/docs/api-vanilla/getting-started/deprecated-features","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"deprecated-features","title":"Deprecated Features and Alternatives","sidebar_position":8,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Updating Mods for API Changes","permalink":"/dst-api-webdocs/docs/api-vanilla/getting-started/mod-updating-guide"},"next":{"title":"Backwards Compatibility","permalink":"/dst-api-webdocs/docs/api-vanilla/getting-started/backwards-compatibility"}}');var a=t(4848),s=t(8453);const r={id:"deprecated-features",title:"Deprecated Features and Alternatives",sidebar_position:8,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Deprecated Features and Alternatives",d={},c=[{value:"What is Deprecation?",id:"what-is-deprecation",level:2},{value:"Global Functions",id:"global-functions",level:2},{value:"GetPlayer()",id:"getplayer",level:3},{value:"GetWorld()",id:"getworld",level:3},{value:"GetClock()",id:"getclock",level:3},{value:"Component Properties",id:"component-properties",level:2},{value:"health.maxhealth (direct access)",id:"healthmaxhealth-direct-access",level:3},{value:"combat.damage (direct access)",id:"combatdamage-direct-access",level:3},{value:"sleeper.hibernate",id:"sleeperhibernate",level:3},{value:"Component Methods",id:"component-methods",level:2},{value:"container() (without parameters)",id:"container-without-parameters",level:3},{value:"inventory() (without slot parameter)",id:"inventory-without-slot-parameter",level:3},{value:"Events",id:"events",level:2},{value:"&quot;daycomplete&quot;",id:"daycomplete",level:3},{value:"Network Variables",id:"network-variables",level:2},{value:"net_string (direct access)",id:"net_string-direct-access",level:3},{value:"Animation Functions",id:"animation-functions",level:2},{value:"AnimState() and AnimState() (separate calls)",id:"animstate-and-animstate-separate-calls",level:3},{value:"Prefab Functions",id:"prefab-functions",level:2},{value:"MakePlacer (old signature)",id:"makeplacer-old-signature",level:3},{value:"Minimap Icons",id:"minimap-icons",level:2},{value:"minimap.MiniMapEntity()",id:"minimapminimapentity",level:3},{value:"UI Functions",id:"ui-functions",level:2},{value:"Widget() with separate x,y,z",id:"widget-with-separate-xyz",level:3},{value:"Migration Strategies",id:"migration-strategies",level:2},{value:"Feature Detection",id:"feature-detection",level:3},{value:"Wrapper Functions",id:"wrapper-functions",level:3},{value:"Conditional Execution",id:"conditional-execution",level:3},{value:"Testing for Deprecated Features",id:"testing-for-deprecated-features",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"deprecated-features-and-alternatives",children:"Deprecated Features and Alternatives"})}),"\n",(0,a.jsx)(n.p,{children:"This document catalogs deprecated features in the Don't Starve Together API and provides recommended alternatives. Using these alternatives will help ensure your mods remain compatible with future game updates."}),"\n",(0,a.jsx)(n.h2,{id:"what-is-deprecation",children:"What is Deprecation?"}),"\n",(0,a.jsx)(n.p,{children:'When a feature is marked as "deprecated," it means:'}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"The feature still works in the current version"}),"\n",(0,a.jsx)(n.li,{children:"The feature may be removed or significantly changed in future versions"}),"\n",(0,a.jsx)(n.li,{children:"There is usually a newer, preferred alternative"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Using deprecated features in your mods may cause them to break when the game updates."}),"\n",(0,a.jsx)(n.h2,{id:"global-functions",children:"Global Functions"}),"\n",(0,a.jsx)(n.h3,{id:"getplayer",children:"GetPlayer()"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated since the introduction of multiplayer"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"ThePlayer"})," global variable or iterate through ",(0,a.jsx)(n.code,{children:"AllPlayers"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deprecated\nlocal player = GetPlayer()\n\n-- Preferred (for local client's player)\nlocal player = ThePlayer\n\n-- Preferred (for all players)\nfor i, player in ipairs(AllPlayers) do\n    -- Do something with each player\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"getworld",children:"GetWorld()"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated since the introduction of sharded worlds"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"TheWorld"})," global variable"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deprecated\nlocal world = GetWorld()\n\n-- Preferred\nlocal world = TheWorld\n"})}),"\n",(0,a.jsx)(n.h3,{id:"getclock",children:"GetClock()"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated since the state system was introduced"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"TheWorld.state"})," properties"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Deprecated\nlocal time = GetClock():GetTotalTime()\n\n-- Preferred\nlocal time = TheWorld.state.time\nlocal phase = TheWorld.state.phase -- "day", "dusk", or "night"\nlocal cycles = TheWorld.state.cycles -- day count\n'})}),"\n",(0,a.jsx)(n.h2,{id:"component-properties",children:"Component Properties"}),"\n",(0,a.jsx)(n.h3,{id:"healthmaxhealth-direct-access",children:"health.maxhealth (direct access)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of getter/setter methods"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"GetMaxHealth()"})," and ",(0,a.jsx)(n.code,{children:"SetMaxHealth()"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deprecated\nlocal max_health = inst.components.health.maxhealth\ninst.components.health.maxhealth = 150\n\n-- Preferred\nlocal max_health = inst.components.health:GetMaxHealth()\ninst.components.health:SetMaxHealth(150)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"combatdamage-direct-access",children:"combat.damage (direct access)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of getter/setter methods"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"GetDefaultDamage()"})," and ",(0,a.jsx)(n.code,{children:"SetDefaultDamage()"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deprecated\nlocal damage = inst.components.combat.damage\ninst.components.combat.damage = 20\n\n-- Preferred\nlocal damage = inst.components.combat:GetDefaultDamage()\ninst.components.combat:SetDefaultDamage(20)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"sleeperhibernate",children:"sleeper.hibernate"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Removed in recent versions"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"SetHibernate()"})," method"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deprecated\ninst.components.sleeper.hibernate = true\n\n-- Preferred\ninst.components.sleeper:SetHibernate(true)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"component-methods",children:"Component Methods"}),"\n",(0,a.jsxs)(n.h3,{id:"container-without-parameters",children:["container",":Open","() (without parameters)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of specifying the opener"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"container:Open(opener)"})," with the opener entity"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deprecated\ninst.components.container:Open()\n\n-- Preferred\ninst.components.container:Open(doer)\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"inventory-without-slot-parameter",children:["inventory",":GiveItem","() (without slot parameter)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of specifying slot or drop position"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"inventory:GiveItem(item, slot, pos)"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deprecated\ninst.components.inventory:GiveItem(item)\n\n-- Preferred (specific slot)\ninst.components.inventory:GiveItem(item, nil) -- nil means any slot\n\n-- Preferred (with drop position if inventory is full)\ninst.components.inventory:GiveItem(item, nil, inst:GetPosition())\n"})}),"\n",(0,a.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,a.jsx)(n.h3,{id:"daycomplete",children:'"daycomplete"'}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of more specific events"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),': Use "cycleschanged" or "phasechanged" events']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Deprecated\ninst:ListenForEvent("daycomplete", OnDayComplete)\n\n-- Preferred\ninst:ListenForEvent("cycleschanged", OnNewDay)\ninst:ListenForEvent("phasechanged", OnPhaseChanged)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"network-variables",children:"Network Variables"}),"\n",(0,a.jsxs)(n.h3,{id:"net_string-direct-access",children:["net_string",":value"," (direct access)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of getter/setter methods"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"Get()"})," and ",(0,a.jsx)(n.code,{children:"Set()"})," methods"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Deprecated\nlocal value = net_var:value\nnet_var:value = "new_value"\n\n-- Preferred\nlocal value = net_var:Get()\nnet_var:Set("new_value")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"animation-functions",children:"Animation Functions"}),"\n",(0,a.jsxs)(n.h3,{id:"animstate-and-animstate-separate-calls",children:["AnimState",":SetBank","() and AnimState",":SetBuild","() (separate calls)"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Not officially deprecated, but less efficient"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"AnimState:SetBankAndBuild()"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Less efficient\ninst.AnimState:SetBank("wilson")\ninst.AnimState:SetBuild("wilson")\n\n-- More efficient\ninst.AnimState:SetBankAndBuild("wilson", "wilson")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"prefab-functions",children:"Prefab Functions"}),"\n",(0,a.jsx)(n.h3,{id:"makeplacer-old-signature",children:"MakePlacer (old signature)"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of new signature with more options"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use updated MakePlacer with additional parameters"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Deprecated\nMakePlacer("placer_name", "bank", "build", "anim")\n\n-- Preferred\nMakePlacer("placer_name", "bank", "build", "anim", nil, nil, nil, nil, nil, nil, nil, nil, nil)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"minimap-icons",children:"Minimap Icons"}),"\n",(0,a.jsxs)(n.h3,{id:"minimapminimapentity",children:["minimap.MiniMapEntity",":SetIcon","()"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of atlas-based system"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"minimap.MiniMapEntity:SetPriority()"})," and atlas system"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Deprecated\ninst.MiniMapEntity:SetIcon("mini_icon.tex")\n\n-- Preferred\ninst.MiniMapEntity:SetIcon("mini_icon.tex")\ninst.MiniMapEntity:SetPriority(5)\nAddMinimapAtlas("images/map_icons/mini_icon.xml")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"ui-functions",children:"UI Functions"}),"\n",(0,a.jsxs)(n.h3,{id:"widget-with-separate-xyz",children:["Widget",":SetPosition","() with separate x,y,z"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Deprecated in favor of Vector3"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,a.jsx)(n.code,{children:"Widget:SetPosition()"})," with Vector3"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deprecated\nwidget:SetPosition(100, 200, 0)\n\n-- Preferred\nwidget:SetPosition(Vector3(100, 200, 0))\n"})}),"\n",(0,a.jsx)(n.h2,{id:"migration-strategies",children:"Migration Strategies"}),"\n",(0,a.jsx)(n.p,{children:"When dealing with deprecated features, consider these strategies:"}),"\n",(0,a.jsx)(n.h3,{id:"feature-detection",children:"Feature Detection"}),"\n",(0,a.jsx)(n.p,{children:"Check if the newer alternative exists before using it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"if inst.components.sleeper.SetHibernate ~= nil then\n    -- New method exists\n    inst.components.sleeper:SetHibernate(true)\nelse\n    -- Fall back to old property\n    inst.components.sleeper.hibernate = true\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"wrapper-functions",children:"Wrapper Functions"}),"\n",(0,a.jsx)(n.p,{children:"Create functions that abstract away API differences:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local function SetHibernate(sleeper, value)\n    if sleeper.SetHibernate ~= nil then\n        sleeper:SetHibernate(value)\n    else\n        sleeper.hibernate = value\n    end\nend\n\n-- Usage\nSetHibernate(inst.components.sleeper, true)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"conditional-execution",children:"Conditional Execution"}),"\n",(0,a.jsx)(n.p,{children:"Only use certain features if they're available:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Check if feature exists before using\nif TheWorld.state ~= nil then\n    -- Use new state system\n    local is_day = TheWorld.state.isday\nelse\n    -- Use old clock system\n    local is_day = GetClock():IsDay()\nend\n"})}),"\n",(0,a.jsx)(n.h2,{id:"testing-for-deprecated-features",children:"Testing for Deprecated Features"}),"\n",(0,a.jsx)(n.p,{children:"To identify deprecated features in your mod:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Check Console Warnings"}),": The game often logs warnings when deprecated features are used"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Review Release Notes"}),": Klei sometimes mentions deprecations in update notes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test on Beta Branches"}),": Test your mod on beta branches to catch deprecations early"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Community Resources"}),": Check forums and Discord for community-identified deprecations"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"Staying aware of deprecated features and updating your mods to use the recommended alternatives will help ensure your mods remain compatible with future game updates. When in doubt, prefer newer API methods and always implement fallback behavior when possible."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);