"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3705],{6064:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api-vanilla/components/temperature","title":"Temperature Component","description":"The Temperature component manages an entity\'s temperature state, including warming, cooling, freezing, and overheating effects. It\'s a key component for survival mechanics in Don\'t Starve Together.","source":"@site/docs/api-vanilla/components/temperature.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/temperature","permalink":"/dst-api-webdocs/docs/api-vanilla/components/temperature","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"temperature","title":"Temperature Component","sidebar_position":6},"sidebar":"docs","previous":{"title":"Weapon Component","permalink":"/dst-api-webdocs/docs/api-vanilla/components/weapon"},"next":{"title":"Hunger Component","permalink":"/dst-api-webdocs/docs/api-vanilla/components/hunger"}}');var i=t(4848),s=t(8453);const a={id:"temperature",title:"Temperature Component",sidebar_position:6},o="Temperature Component",d={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Temperature Management",id:"temperature-management",level:3},{value:"Modifiers and Insulation",id:"modifiers-and-insulation",level:3},{value:"Heat Sources",id:"heat-sources",level:3},{value:"Temperature System",id:"temperature-system",level:2},{value:"Events",id:"events",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"temperature-component",children:"Temperature Component"})}),"\n",(0,i.jsx)(n.p,{children:"The Temperature component manages an entity's temperature state, including warming, cooling, freezing, and overheating effects. It's a key component for survival mechanics in Don't Starve Together."}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Add a temperature component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("temperature")\n\n-- Configure the temperature component\nlocal temperature = entity.components.temperature\ntemperature:SetTemp(20) -- Set temperature to 20\xb0C\n'})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"current"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Current temperature value in degrees"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"maxtemp"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Maximum possible temperature (default: 90)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"mintemp"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Minimum possible temperature (default: -20)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"overheattemp"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Temperature threshold for overheating (default: 70)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"hurtrate"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Health damage rate when freezing"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"overheathurtrate"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Health damage rate when overheating"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"inherentinsulation"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Built-in insulation against cold"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"inherentsummerinsulation"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Built-in insulation against heat"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"shelterinsulation"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Additional insulation when sheltered"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sheltered"})}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"Whether entity is currently sheltered"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sheltered_level"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Level of shelter protection (1-3)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"maxmoisturepenalty"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Maximum cooling effect from moisture"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(n.h3,{id:"temperature-management",children:"Temperature Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Set temperature directly\ntemperature:SetTemperature(25)\n\n-- Change temperature by a delta\ntemperature:DoDelta(5) -- Increase by 5 degrees\n\n-- Set a temporary temperature modifier from food\ntemperature:SetTemperatureInBelly(10, 60) -- +10 degrees for 60 seconds\n\n-- Get current temperature\nlocal current_temp = temperature:GetCurrent()\n\n-- Check temperature states\nlocal is_freezing = temperature:IsFreezing()\nlocal is_overheating = temperature:IsOverheating()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"modifiers-and-insulation",children:"Modifiers and Insulation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Add a temperature modifier (from an item, buff, etc.)\ntemperature:SetModifier("winterhat", 120) -- +120 insulation from winter hat\n\n-- Remove a modifier\ntemperature:RemoveModifier("winterhat")\n\n-- Get current insulation values\nlocal winter_insulation, summer_insulation = temperature:GetInsulation()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"heat-sources",children:"Heat Sources"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Configure heat source detection\ntemperature:IgnoreTags("INLIMBO", "player", "FX") -- Ignore these tags when finding heaters\n\n-- Set up a campfire as a heat source (on the campfire entity)\ncampfire:AddComponent("heater")\ncampfire.components.heater:SetThermics(true, false) -- Warms in winter, doesn\'t cool in summer\ncampfire.components.heater:SetHeat(10) -- Heat output amount\n'})}),"\n",(0,i.jsx)(n.h2,{id:"temperature-system",children:"Temperature System"}),"\n",(0,i.jsx)(n.p,{children:"The temperature system works by:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Starting at ",(0,i.jsx)(n.code,{children:"TUNING.STARTING_TEMP"})," (usually 25\xb0C)"]}),"\n",(0,i.jsx)(n.li,{children:"Moving toward the ambient world temperature"}),"\n",(0,i.jsxs)(n.li,{children:["Being influenced by modifiers like:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Insulating clothing"}),"\n",(0,i.jsx)(n.li,{children:"Heat sources nearby"}),"\n",(0,i.jsx)(n.li,{children:"Weather conditions"}),"\n",(0,i.jsx)(n.li,{children:"Food consumption"}),"\n",(0,i.jsx)(n.li,{children:"Moisture level"}),"\n",(0,i.jsx)(n.li,{children:"Shelter status"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Temperature boundaries:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Below 0\xb0C: Freezing damage begins"}),"\n",(0,i.jsxs)(n.li,{children:["Above ",(0,i.jsx)(n.code,{children:"overheattemp"})," (usually 70\xb0C): Overheating damage begins"]}),"\n",(0,i.jsxs)(n.li,{children:["Temperature is clamped between ",(0,i.jsx)(n.code,{children:"mintemp"})," and ",(0,i.jsx)(n.code,{children:"maxtemp"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,i.jsx)(n.p,{children:"The Temperature component responds to and triggers various events:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"temperaturedelta"})," - Triggered when temperature changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"startfreezing"})," - Triggered when entity starts freezing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stopfreezing"})," - Triggered when entity stops freezing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"startoverheating"})," - Triggered when entity starts overheating"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stopoverheating"})," - Triggered when entity stops overheating"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sheltered"})," - Listened for when entity becomes sheltered"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.p,{children:"The Temperature component often works with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Health"})," - For temperature-related damage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Heater"})," - For sources of heat or cooling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Moisture"})," - For wetness effects on temperature"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Insulator"})," - For items that provide insulation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create a basic entity with temperature\nlocal function MakeTemperatureEntity()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst:AddComponent("temperature")\n    \n    -- Configure temperature\n    local temperature = inst.components.temperature\n    temperature:SetTemp(TUNING.STARTING_TEMP)\n    temperature:SetFreezingHurtRate(TUNING.WILSON_HEALTH / TUNING.FREEZING_KILL_TIME)\n    temperature:SetOverheatHurtRate(TUNING.WILSON_HEALTH / TUNING.OVERHEATING_KILL_TIME)\n    \n    -- Add event handling for temperature changes\n    inst:ListenForEvent("temperaturedelta", function(inst, data)\n        if data.new < 0 and data.last >= 0 then\n            -- Started freezing, play animation or sound\n        elseif data.new > temperature.overheattemp and data.last <= temperature.overheattemp then\n            -- Started overheating, play animation or sound\n        end\n    end)\n    \n    return inst\nend\n\n-- Create an insulating item (like clothing)\nlocal function MakeWinterHat()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst:AddComponent("insulator")\n    inst:AddComponent("inventoryitem")\n    inst:AddComponent("equippable")\n    \n    -- Configure insulation\n    inst.components.insulator:SetInsulation(TUNING.INSULATION_LARGE)\n    inst.components.insulator:SetSummer(false) -- Not for summer insulation\n    \n    -- Configure equipment\n    inst.components.equippable.equipslot = EQUIPSLOTS.HEAD\n    \n    -- Add callback when equipped\n    inst.components.equippable:SetOnEquip(function(inst, owner)\n        if owner.components.temperature ~= nil then\n            owner.components.temperature:SetModifier("winterhat", TUNING.INSULATION_LARGE)\n        end\n    end)\n    \n    -- Add callback when unequipped\n    inst.components.equippable:SetOnUnequip(function(inst, owner)\n        if owner.components.temperature ~= nil then\n            owner.components.temperature:RemoveModifier("winterhat")\n        end\n    end)\n    \n    return inst\nend\n\n-- Create a heat source (like a campfire)\nlocal function MakeCampfire()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst:AddComponent("heater")\n    \n    -- Configure heat source\n    local heater = inst.components.heater\n    heater:SetThermics(true, false) -- Warms in winter, doesn\'t cool in summer\n    heater:SetHeat(10)\n    heater:SetRange(10) -- Heat effect radius\n    \n    return inst\nend \n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);