"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9720],{2191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/examples/custom-biomes","title":"Creating Custom Biomes","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/examples/custom-biomes.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/custom-biomes","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-biomes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"id":"custom-biomes","title":"Creating Custom Biomes","sidebar_position":12,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Custom World Generation","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-world-generation"},"next":{"title":"Creating Custom Creatures","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-creatures"}}');var i=t(4848),r=t(8453);const o={id:"custom-biomes",title:"Creating Custom Biomes",sidebar_position:12,last_updated:new Date("2023-07-06T00:00:00.000Z")},a="Creating Custom Biomes",l={},d=[{value:"What Makes a Biome?",id:"what-makes-a-biome",level:2},{value:"Ground Type Creation",id:"ground-type-creation",level:2},{value:"Ground Texture Requirements",id:"ground-texture-requirements",level:3},{value:"Ground Properties",id:"ground-properties",level:3},{value:"Biome Room Creation",id:"biome-room-creation",level:2},{value:"Room Variations",id:"room-variations",level:3},{value:"Biome Task Creation",id:"biome-task-creation",level:2},{value:"Task Properties",id:"task-properties",level:3},{value:"Biome Integration",id:"biome-integration",level:2},{value:"Biome Placement Strategies",id:"biome-placement-strategies",level:3},{value:"Custom Vegetation",id:"custom-vegetation",level:2},{value:"Vegetation Considerations",id:"vegetation-considerations",level:3},{value:"Custom Resources",id:"custom-resources",level:2},{value:"Resource Integration",id:"resource-integration",level:3},{value:"Custom Creatures",id:"custom-creatures",level:2},{value:"Creature Considerations",id:"creature-considerations",level:3},{value:"Weather Effects",id:"weather-effects",level:2},{value:"Weather Types",id:"weather-types",level:3},{value:"Visual Effects",id:"visual-effects",level:2},{value:"Visual Effect Types",id:"visual-effect-types",level:3},{value:"Testing and Debugging",id:"testing-and-debugging",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Advanced Techniques",id:"advanced-techniques",level:2},{value:"Biome Transitions",id:"biome-transitions",level:3},{value:"Seasonal Changes",id:"seasonal-changes",level:3},{value:"Interactive Elements",id:"interactive-elements",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"creating-custom-biomes",children:"Creating Custom Biomes"})}),"\n",(0,i.jsx)(n.p,{children:"This guide focuses specifically on creating custom biomes in Don't Starve Together. While custom biomes are part of world generation, they have unique requirements and considerations that deserve special attention."}),"\n",(0,i.jsx)(n.h2,{id:"what-makes-a-biome",children:"What Makes a Biome?"}),"\n",(0,i.jsx)(n.p,{children:"A biome in Don't Starve Together consists of several key elements:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ground Type"}),": The unique terrain texture and properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Vegetation"}),": Trees, plants, and other flora specific to the biome"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resources"}),": Rocks, minerals, and harvestable items"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Creatures"}),": Animals and monsters that inhabit the biome"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Weather Effects"}),": Special weather conditions that occur in the biome"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Effects"}),": Lighting, particles, and other visual elements"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"ground-type-creation",children:"Ground Type Creation"}),"\n",(0,i.jsx)(n.p,{children:"The foundation of any biome is its ground type. Here's how to create a custom ground type:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nlocal GROUND = GLOBAL.GROUND\nlocal GROUND_NAMES = GLOBAL.STRINGS.NAMES.GROUND\nlocal GROUND_TILES = GLOBAL.GROUND_TILES\n\n-- Register new ground type\nGROUND.MYBIOME = #GROUND_TILES + 1\nGROUND_NAMES.MYBIOME = "My Custom Biome"\nGROUND_TILES[GROUND.MYBIOME] = "mybiome"\n\n-- Add the ground assets\nAddGamePostInit(function()\n    local GroundAtlas = GLOBAL.resolvefilepath("levels/textures/ground_noise.xml")\n    local GroundImage = GLOBAL.resolvefilepath("levels/textures/ground_noise.tex")\n    \n    -- Add our custom ground\n    GLOBAL.TheWorld.components.groundcreep:AddGroundDef(\n        GROUND.MYBIOME,\n        GroundAtlas,\n        GroundImage,\n        "levels/textures/mybiome_noise.tex",\n        "mybiome"\n    )\nend)\n\n-- Set ground properties\nAddSimPostInit(function()\n    for k, v in pairs(GLOBAL.GROUND_FLOORING) do\n        if v == GROUND.MYBIOME then\n            -- Fertility affects plant growth\n            GLOBAL.SetGroundFertility(v, 0.3)\n            \n            -- Ground class affects sound and visual effects\n            GLOBAL.SetGroundClass(v, "forest")\n            \n            -- Speed multiplier affects movement speed\n            GLOBAL.SetGroundSpeedMultiplier(v, 1.0)\n        end\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ground-texture-requirements",children:"Ground Texture Requirements"}),"\n",(0,i.jsx)(n.p,{children:"For a complete custom ground, you'll need to create these texture files:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"levels/tiles/mybiome.tex"})," - The base texture for the ground"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"levels/textures/mybiome_noise.tex"})," - The noise texture for variation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minimap/mybiome.tex"})," - The minimap representation"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ground-properties",children:"Ground Properties"}),"\n",(0,i.jsx)(n.p,{children:"Ground properties affect how the biome behaves:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Common Values"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Fertility"}),(0,i.jsx)(n.td,{children:"Affects plant growth rate"}),(0,i.jsx)(n.td,{children:"0.0 (barren) to 1.0 (fertile)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Ground Class"}),(0,i.jsx)(n.td,{children:"Affects sounds and effects"}),(0,i.jsx)(n.td,{children:'"forest", "rocky", "savanna", "marsh"'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Speed Multiplier"}),(0,i.jsx)(n.td,{children:"Affects movement speed"}),(0,i.jsx)(n.td,{children:"0.8 (slow) to 1.2 (fast)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Damage Per Second"}),(0,i.jsx)(n.td,{children:"Damage dealt to players"}),(0,i.jsx)(n.td,{children:"0 (safe) to 10+ (dangerous)"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"biome-room-creation",children:"Biome Room Creation"}),"\n",(0,i.jsx)(n.p,{children:"Once you have your ground type, you need to create rooms that use it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In scripts/map/rooms/mybiome.lua\nAddRoom("MyBiome_Clearing", {\n    colour = {r=0.5, g=0.6, b=0.5, a=0.3},\n    value = WORLD_TILES.MYBIOME,\n    tags = {"ExitPiece", "MyBiome"},\n    contents = {\n        distributepercent = 0.15,\n        distributeprefabs = {\n            custom_tree = 0.3,\n            custom_rock = 0.2,\n            grass = 0.1,\n            sapling = 0.1,\n            flower = 0.05,\n            flint = 0.05,\n            custom_creature = 0.01,\n        }\n    }\n})\n\nAddRoom("MyBiome_Dense", {\n    colour = {r=0.4, g=0.5, b=0.4, a=0.3},\n    value = WORLD_TILES.MYBIOME,\n    tags = {"MyBiome"},\n    contents = {\n        distributepercent = 0.25,\n        distributeprefabs = {\n            custom_tree = 0.5,\n            custom_rock = 0.3,\n            grass = 0.05,\n            sapling = 0.05,\n            flint = 0.03,\n            custom_creature = 0.02,\n        }\n    }\n})\n\n-- Background room for empty areas\nAddRoom("BGMyBiome", {\n    colour = {r=0.5, g=0.6, b=0.5, a=0.3},\n    value = WORLD_TILES.MYBIOME,\n    tags = {"MyBiome", "RoadPoison"},\n    contents = {\n        distributepercent = 0.07,\n        distributeprefabs = {\n            custom_tree = 0.1,\n            custom_rock = 0.1,\n            grass = 0.05,\n            sapling = 0.05,\n        }\n    }\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"room-variations",children:"Room Variations"}),"\n",(0,i.jsx)(n.p,{children:"Creating multiple room types for your biome adds variety:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clearings"}),": Open areas with sparse vegetation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dense Areas"}),": Heavily populated with trees and resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Special Areas"}),": Unique features like ponds, caves, or structures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Background"}),": Default room type for empty areas"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"biome-task-creation",children:"Biome Task Creation"}),"\n",(0,i.jsx)(n.p,{children:"Tasks group rooms together to form a coherent biome area:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In scripts/map/tasks/mybiome_task.lua\nAddTask("mybiome_task", {\n    locks = {LOCKS.NONE},\n    keys_given = {KEYS.TIER1},\n    room_choices = {\n        ["MyBiome_Clearing"] = 2,\n        ["MyBiome_Dense"] = {2, 3},\n        ["MyBiome_Special"] = 1,\n    },\n    room_bg = WORLD_TILES.MYBIOME,\n    background_room = "BGMyBiome",\n    colour = {r=0.5, g=0.6, b=0.5, a=0.9}\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"task-properties",children:"Task Properties"}),"\n",(0,i.jsx)(n.p,{children:"Task properties control how your biome integrates with the world:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"locks"}),(0,i.jsx)(n.td,{children:"Requirements to access this biome"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"keys_given"}),(0,i.jsx)(n.td,{children:"Resources or capabilities provided by this biome"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"room_choices"}),(0,i.jsx)(n.td,{children:"Rooms to include (with counts)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"room_bg"}),(0,i.jsx)(n.td,{children:"Default terrain type"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"background_room"}),(0,i.jsx)(n.td,{children:"Room type for empty areas"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"biome-integration",children:"Biome Integration"}),"\n",(0,i.jsx)(n.p,{children:"To add your biome to the world generation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAddLevelPreInitAny(function(level)\n    if level.location == "forest" then\n        -- Add our task to the level\n        table.insert(level.tasks, "mybiome_task")\n        \n        -- Control biome placement\n        level.overrides = level.overrides or {}\n        level.overrides.task_distribute = level.overrides.task_distribute or {}\n        level.overrides.task_distribute.mybiome_task = 1.0 -- Normal weight\n        \n        -- Add special setpieces\n        if level.random_set_pieces then\n            table.insert(level.random_set_pieces, "MyBiomeSetpiece")\n        end\n    end\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"biome-placement-strategies",children:"Biome Placement Strategies"}),"\n",(0,i.jsx)(n.p,{children:"Different strategies for placing your biome in the world:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Random Placement"}),": Let the world generator decide (default)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Placement"}),": Force the biome to generate near the edge of the map"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Center Placement"}),": Force the biome to generate near the center"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Story Placement"}),": Use ordered_story_setpieces for specific day placement"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- For edge placement\nlevel.overrides.task_distribute.mybiome_task = 0.5 -- Lower weight\nlevel.ordered_story_setpieces = level.ordered_story_setpieces or {}\ntable.insert(level.ordered_story_setpieces, {"MyBiomeSetpiece", "Day 25"})\n\n-- For center placement\nlevel.overrides.task_distribute.mybiome_task = 1.5 -- Higher weight\nlevel.ordered_story_setpieces = level.ordered_story_setpieces or {}\ntable.insert(level.ordered_story_setpieces, {"MyBiomeSetpiece", "Day 10"})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"custom-vegetation",children:"Custom Vegetation"}),"\n",(0,i.jsx)(n.p,{children:"Creating unique vegetation for your biome:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In scripts/prefabs/custom_tree.lua\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Standard entity setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    inst.entity:AddMiniMapEntity()\n    \n    -- Set minimap icon\n    inst.MiniMapEntity:SetIcon("custom_tree.tex")\n    \n    -- Set physics\n    MakeObstaclePhysics(inst, 0.25)\n    \n    -- Set animations\n    inst.AnimState:SetBank("custom_tree")\n    inst.AnimState:SetBuild("custom_tree")\n    inst.AnimState:PlayAnimation("idle", true)\n    \n    -- Add tags\n    inst:AddTag("tree")\n    inst:AddTag("mybiome_object")\n    inst:AddTag("workable")\n    \n    -- Server-only components\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add components\n    inst:AddComponent("inspectable")\n    \n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.CHOP)\n    inst.components.workable:SetWorkLeft(3)\n    inst.components.workable:SetOnFinishCallback(OnChopDown)\n    inst.components.workable:SetOnWorkCallback(OnChop)\n    \n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("custom_resource", 1.0)\n    inst.components.lootdropper:AddRandomLoot("log", 0.5)\n    \n    return inst\nend\n\nreturn Prefab("custom_tree", fn, assets, prefabs)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"vegetation-considerations",children:"Vegetation Considerations"}),"\n",(0,i.jsx)(n.p,{children:"When creating vegetation:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Distinctiveness"}),": Make it visually distinct from existing vegetation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Balance"}),": Consider what resources it provides and their rarity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Seasonal Changes"}),": Add seasonal variations if appropriate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Special Effects"}),": Consider adding unique effects like light or particles"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"custom-resources",children:"Custom Resources"}),"\n",(0,i.jsx)(n.p,{children:"Resources unique to your biome:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In scripts/prefabs/custom_resource.lua\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Standard entity setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Set physics\n    MakeInventoryPhysics(inst)\n    \n    -- Set animations\n    inst.AnimState:SetBank("custom_resource")\n    inst.AnimState:SetBuild("custom_resource")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add tags\n    inst:AddTag("molebait")\n    inst:AddTag("mybiome_resource")\n    \n    -- Server-only components\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add components\n    inst:AddComponent("inspectable")\n    \n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/custom_resource.xml"\n    \n    inst:AddComponent("stackable")\n    inst.components.stackable.maxsize = 40\n    \n    -- Add unique properties\n    inst:AddComponent("fuel")\n    inst.components.fuel.fuelvalue = TUNING.MED_FUEL\n    inst.components.fuel.fueltype = "CUSTOM"\n    \n    return inst\nend\n\nreturn Prefab("custom_resource", fn, assets, prefabs)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"resource-integration",children:"Resource Integration"}),"\n",(0,i.jsx)(n.p,{children:"Make your resources useful:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Crafting Recipes"}),": Add recipes that use your resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fuel Properties"}),": Make them usable as fuel with special properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Food Values"}),": If edible, set appropriate food values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Special Uses"}),": Add unique interactions with other game systems"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"custom-creatures",children:"Custom Creatures"}),"\n",(0,i.jsx)(n.p,{children:"Adding unique creatures to your biome:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In scripts/prefabs/custom_creature.lua\nlocal brain = require "brains/custom_creature_brain"\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Standard entity setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n    \n    -- Set physics\n    MakeCharacterPhysics(inst, 100, 0.5)\n    \n    -- Set animations\n    inst.AnimState:SetBank("custom_creature")\n    inst.AnimState:SetBuild("custom_creature")\n    inst.AnimState:PlayAnimation("idle", true)\n    \n    -- Add tags\n    inst:AddTag("animal")\n    inst:AddTag("mybiome_creature")\n    \n    -- Server-only components\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add components\n    inst:AddComponent("inspectable")\n    \n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(100)\n    \n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(10)\n    inst.components.combat:SetAttackPeriod(2)\n    \n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("meat", 0.5)\n    inst.components.lootdropper:AddRandomLoot("custom_resource", 1.0)\n    \n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 4\n    inst.components.locomotor.runspeed = 7\n    \n    -- Set AI\n    inst:SetStateGraph("SGcustom_creature")\n    inst:SetBrain(brain)\n    \n    return inst\nend\n\nreturn Prefab("custom_creature", fn, assets, prefabs)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"creature-considerations",children:"Creature Considerations"}),"\n",(0,i.jsx)(n.p,{children:"When creating creatures:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ecological Role"}),": Consider how they fit into the biome ecosystem"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty Balance"}),": Balance their strength and aggression"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unique Behaviors"}),": Add special behaviors that make them interesting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Drops"}),": Consider what resources they provide when killed"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"weather-effects",children:"Weather Effects"}),"\n",(0,i.jsx)(n.p,{children:"Adding special weather to your biome:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        -- Check for players in the biome periodically\n        inst:DoPeriodicTask(10, function()\n            for _, player in ipairs(GLOBAL.AllPlayers) do\n                local x, y, z = player.Transform:GetWorldPosition()\n                local tile = GLOBAL.TheWorld.Map:GetTileAtPoint(x, y, z)\n                \n                if tile == GROUND.MYBIOME then\n                    -- Player is in our biome, start special weather\n                    StartSpecialWeather(player)\n                end\n            end\n        end)\n    end\nend)\n\nfunction StartSpecialWeather(player)\n    -- Create weather effects\n    local fx = SpawnPrefab("custom_weather_fx")\n    if fx then\n        fx.Transform:SetPosition(player.Transform:GetWorldPosition())\n        \n        -- Add gameplay effects\n        player:DoPeriodicTask(5, function()\n            -- For example, spawn resources or apply status effects\n        end, 0, 5)\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"weather-types",children:"Weather Types"}),"\n",(0,i.jsx)(n.p,{children:"Different weather effects you can create:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Precipitation"}),": Rain, snow, or custom particles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sky Effects"}),": Aurora, strange colors, or darkness"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ground Effects"}),": Glowing ground, mist, or puddles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sound Effects"}),": Unique ambient sounds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Gameplay Effects"}),": Status effects, resource spawning, or damage"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"visual-effects",children:"Visual Effects"}),"\n",(0,i.jsx)(n.p,{children:"Enhancing your biome with visual effects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\n-- Add post-processing effects when in the biome\nAddPlayerPostInit(function(player)\n    -- Track current biome\n    player.current_biome = nil\n    \n    -- Check biome periodically\n    player:DoPeriodicTask(0.5, function()\n        local x, y, z = player.Transform:GetWorldPosition()\n        local tile = GLOBAL.TheWorld.Map:GetTileAtPoint(x, y, z)\n        \n        if tile == GROUND.MYBIOME and player.current_biome ~= "mybiome" then\n            -- Player entered our biome\n            player.current_biome = "mybiome"\n            ApplyBiomeEffects(player, true)\n        elseif tile ~= GROUND.MYBIOME and player.current_biome == "mybiome" then\n            -- Player left our biome\n            player.current_biome = nil\n            ApplyBiomeEffects(player, false)\n        end\n    end)\nend)\n\nfunction ApplyBiomeEffects(player, entering)\n    if entering then\n        -- Apply visual effects when entering\n        GLOBAL.TheWorld:PushEvent("screenflash", 0.5)\n        \n        -- Add ambient sounds\n        player.SoundEmitter:PlaySound("dontstarve/common/specialbiome_ambience", "mybiome_ambience")\n        \n        -- Add screen overlay\n        player.components.playervision:SetCustomCCTable({\n            brightness = 0,\n            contrast = 0.05,\n            saturation = 0.2,\n            tint = {x=0.9, y=1.0, z=1.1}\n        })\n    else\n        -- Remove effects when leaving\n        player.SoundEmitter:KillSound("mybiome_ambience")\n        player.components.playervision:SetCustomCCTable(nil)\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"visual-effect-types",children:"Visual Effect Types"}),"\n",(0,i.jsx)(n.p,{children:"Types of visual effects to consider:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lighting"}),": Custom light colors and intensities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Particles"}),": Floating particles or ground effects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Screen Effects"}),": Color correction or post-processing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sound Design"}),": Ambient sounds and music"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Animation"}),": Special animations for players or objects"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing-and-debugging",children:"Testing and Debugging"}),"\n",(0,i.jsx)(n.p,{children:"Tips for testing your custom biome:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Console Commands"}),": Use ",(0,i.jsx)(n.code,{children:"c_regenerateworld()"})," to quickly regenerate the world"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debug Mode"}),": Enable debug mode with ",(0,i.jsx)(n.code,{children:"TheInput:EnableDebugToggle(true)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Map Reveal"}),": Use ",(0,i.jsx)(n.code,{children:"minimap:ShowArea(0, 0, 0, 10000)"})," to reveal the map"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teleportation"}),": Use ",(0,i.jsx)(n.code,{children:"c_goto(x, y, z)"})," to teleport to specific coordinates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Entity Search"}),": Use ",(0,i.jsx)(n.code,{children:'c_findnext("mybiome_object")'})," to find your custom entities"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(n.p,{children:"Solutions to common biome creation problems:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Biome Not Generating"}),": Check task integration and room definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing Textures"}),": Verify texture paths and formats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Creature AI Issues"}),": Debug brain logic and state graphs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Problems"}),": Optimize weather and visual effects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compatibility Issues"}),": Ensure compatibility with other mods"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-techniques",children:"Advanced Techniques"}),"\n",(0,i.jsx)(n.p,{children:"For more complex biome creation:"}),"\n",(0,i.jsx)(n.h3,{id:"biome-transitions",children:"Biome Transitions"}),"\n",(0,i.jsx)(n.p,{children:"Creating smooth transitions between biomes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In scripts/map/rooms/transition_rooms.lua\nAddRoom("MyBiome_ForestTransition", {\n    colour = {r=0.5, g=0.6, b=0.5, a=0.3},\n    tags = {"ExitPiece", "MyBiome", "Forest"},\n    contents = {\n        distributepercent = 0.15,\n        distributeprefabs = {\n            custom_tree = 0.2,\n            evergreen = 0.2,\n            grass = 0.1,\n            sapling = 0.1,\n        }\n    },\n    ground_types = {WORLD_TILES.MYBIOME, WORLD_TILES.FOREST},\n    ground_distribution = {\n        [WORLD_TILES.MYBIOME] = 6,\n        [WORLD_TILES.FOREST] = 4,\n    },\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"seasonal-changes",children:"Seasonal Changes"}),"\n",(0,i.jsx)(n.p,{children:"Making your biome respond to seasons:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        inst:WatchWorldState("season", function(inst, season)\n            -- Update biome based on season\n            UpdateBiomeForSeason(season)\n        end)\n    end\nend)\n\nfunction UpdateBiomeForSeason(season)\n    -- Find all biome-specific objects\n    local biome_objects = GLOBAL.TheSim:FindEntities(0, 0, 0, 10000, {"mybiome_object"})\n    \n    for _, obj in ipairs(biome_objects) do\n        if season == "winter" then\n            -- Winter appearance\n            obj.AnimState:SetMultColor(0.8, 0.8, 1, 1)\n        elseif season == "summer" then\n            -- Summer appearance\n            obj.AnimState:SetMultColor(1, 0.9, 0.8, 1)\n        else\n            -- Default appearance\n            obj.AnimState:SetMultColor(1, 1, 1, 1)\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"interactive-elements",children:"Interactive Elements"}),"\n",(0,i.jsx)(n.p,{children:"Adding interactive elements to your biome:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In scripts/prefabs/biome_portal.lua\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Standard entity setup\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    -- Set animations\n    inst.AnimState:SetBank("biome_portal")\n    inst.AnimState:SetBuild("biome_portal")\n    inst.AnimState:PlayAnimation("idle", true)\n    \n    -- Add tags\n    inst:AddTag("structure")\n    inst:AddTag("mybiome_object")\n    \n    -- Server-only components\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add components\n    inst:AddComponent("inspectable")\n    \n    -- Add interaction\n    inst:AddComponent("activatable")\n    inst.components.activatable.OnActivate = function(inst, doer)\n        -- Teleport player to another location\n        if doer and doer.Physics then\n            -- Find destination\n            local dest_x, dest_y, dest_z = FindTeleportDestination()\n            if dest_x then\n                doer.Physics:Teleport(dest_x, dest_y, dest_z)\n                return true\n            end\n        end\n        return false\n    end\n    \n    return inst\nend\n\nreturn Prefab("biome_portal", fn, assets, prefabs)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Creating a custom biome is one of the most comprehensive modding challenges in Don't Starve Together. It combines many aspects of modding:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"World generation"}),"\n",(0,i.jsx)(n.li,{children:"Custom prefabs and components"}),"\n",(0,i.jsx)(n.li,{children:"Visual and audio design"}),"\n",(0,i.jsx)(n.li,{children:"Game mechanics and balancing"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By following this guide, you should be able to create a unique biome that seamlessly integrates with the game world while providing players with new experiences and challenges."}),"\n",(0,i.jsxs)(n.p,{children:["For more detailed examples, check out the ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/worldgen-mod",children:"Crystal Plains Biome"})," and ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/project-biome",children:"Crystal Forest Project"})," tutorials."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);