"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4466],{7051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/core/network-system","title":"Network System","description":"The Don\'t Starve Together network system enables multiplayer functionality by managing communication between server and clients. This document covers the core networking concepts, synchronization mechanisms, and implementation details.","source":"@site/docs/api-vanilla/core/network-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/network-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/network-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"network-system","title":"Network System","sidebar_position":4},"sidebar":"docs","previous":{"title":"WorldState API","permalink":"/dst-api-webdocs/docs/api-vanilla/core/worldstate"},"next":{"title":"Remote Procedure Call System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/rpc-system"}}');var s=t(4848),r=t(8453);const a={id:"network-system",title:"Network System",sidebar_position:4},l="Network System",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Server Authority Model",id:"server-authority-model",level:2},{value:"Network Variables",id:"network-variables",level:2},{value:"Creating Network Variables",id:"creating-network-variables",level:3},{value:"Using Network Variables",id:"using-network-variables",level:3},{value:"Replicated Components",id:"replicated-components",level:2},{value:"Creating a Component with Replica",id:"creating-a-component-with-replica",level:3},{value:"Registering and Using Replicas",id:"registering-and-using-replicas",level:3},{value:"Remote Procedure Calls (RPCs)",id:"remote-procedure-calls-rpcs",level:2},{value:"RPC Types",id:"rpc-types",level:3},{value:"Defining RPC Messages",id:"defining-rpc-messages",level:3},{value:"Sending RPC Messages",id:"sending-rpc-messages",level:3},{value:"Handling RPC Messages",id:"handling-rpc-messages",level:3},{value:"Entity Synchronization",id:"entity-synchronization",level:2},{value:"Entity Setup for Networking",id:"entity-setup-for-networking",level:3},{value:"Entity Ownership",id:"entity-ownership",level:3},{value:"Optimizing Network Usage",id:"optimizing-network-usage",level:2},{value:"Batch Updates",id:"batch-updates",level:3},{value:"Priority Systems",id:"priority-systems",level:3},{value:"Relevance Checking",id:"relevance-checking",level:3},{value:"Advanced Networking Techniques",id:"advanced-networking-techniques",level:2},{value:"Client Prediction",id:"client-prediction",level:3},{value:"Server Reconciliation",id:"server-reconciliation",level:3},{value:"Network Debugging",id:"network-debugging",level:3},{value:"Example: Synchronized Item Chest",id:"example-synchronized-item-chest",level:2},{value:"Network Limitations and Best Practices",id:"network-limitations-and-best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"network-system",children:"Network System"})}),"\n",(0,s.jsx)(n.p,{children:"The Don't Starve Together network system enables multiplayer functionality by managing communication between server and clients. This document covers the core networking concepts, synchronization mechanisms, and implementation details."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together uses a client-server architecture where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The server holds the authoritative game state"}),"\n",(0,s.jsx)(n.li,{children:"Clients receive updates from the server"}),"\n",(0,s.jsx)(n.li,{children:"Clients send input actions to the server"}),"\n",(0,s.jsx)(n.li,{children:"The server processes these actions and broadcasts the results"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Server \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 Client \u2502\n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Client \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h2,{id:"server-authority-model",children:"Server Authority Model"}),"\n",(0,s.jsx)(n.p,{children:"DST follows a strict server authority model where:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'All game state is owned by the server (the "master simulation" or "mastersim")'}),"\n",(0,s.jsx)(n.li,{children:"Clients only render and predict the game state"}),"\n",(0,s.jsx)(n.li,{children:"Clients cannot modify the game state directly"}),"\n",(0,s.jsx)(n.li,{children:"Clients request changes via actions, which the server validates and executes"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Example of checking for server authority\nif TheWorld.ismastersim then\n    -- Server-only code\n    inst.components.health:SetMaxHealth(100)\nelse\n    -- Client-only code\n    -- Cannot modify server components directly\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"network-variables",children:"Network Variables"}),"\n",(0,s.jsx)(n.p,{children:"Network variables (netvars) are special variables that automatically sync between server and clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic netvar types\nlocal net_string = require "net_string"\nlocal net_float = require "net_float"\nlocal net_int = require "net_int"\nlocal net_byte = require "net_byte"\nlocal net_bool = require "net_bool"\nlocal net_tinybyte = require "net_tinybyte"\nlocal net_smallbyte = require "net_smallbyte"\nlocal net_hash = require "net_hash"\nlocal net_entity = require "net_entity"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-network-variables",children:"Creating Network Variables"}),"\n",(0,s.jsx)(n.p,{children:"Network variables are initialized with:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"An entity GUID (to identify the owner)"}),"\n",(0,s.jsx)(n.li,{children:"A variable path (for dirty event naming)"}),"\n",(0,s.jsx)(n.li,{children:"An optional dirty event name"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'function MyComponent:ctor(inst)\n    self.inst = inst\n    \n    -- Network variable with custom dirty event\n    self.health = net_float(inst.GUID, "health.current", "healthdirty")\n    \n    -- Network variable with default dirty event\n    self.level = net_int(inst.GUID, "level.value")\n    \n    -- Listen for dirty events on clients\n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("healthdirty", function()\n            -- Health value changed\n            print("Health changed to: " .. self.health:value())\n        end)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using-network-variables",children:"Using Network Variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Setting a network variable (server only)\nif TheWorld.ismastersim then\n    self.health:set(100)\nend\n\n-- Reading a network variable (server and client)\nlocal current_health = self.health:value()\n\n-- Setting with a dirty callback parameter\nself.health:set_local(50) -- Set without triggering dirty events\nself.health:set(75, true) -- Force dirty event even if value hasn't changed\n"})}),"\n",(0,s.jsx)(n.h2,{id:"replicated-components",children:"Replicated Components"}),"\n",(0,s.jsx)(n.p,{children:"Components in DST exist in two forms:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server Components"}),": Full implementation with game logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client Replicas"}),": Simplified versions containing only data needed by clients"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-component-with-replica",children:"Creating a Component with Replica"}),"\n",(0,s.jsx)(n.p,{children:"Server component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- components/mycomponent.lua\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self.value = 10\n    -- Server-only functionality\nend)\n\nfunction MyComponent:SetValue(val)\n    self.value = val\n    self.inst:PushEvent("valuechanged", {value = val})\nend\n\nfunction MyComponent:GetValue()\n    return self.value\nend\n\nreturn MyComponent\n'})}),"\n",(0,s.jsx)(n.p,{children:"Client replica:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- components/mycomponent_replica.lua\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    -- Network variable for synchronization\n    self._value = net_int(inst.GUID, "mycomponent.value", "valuedirty")\n    \n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("valuedirty", function()\n            inst:PushEvent("valuechanged", {value = self:GetValue()})\n        end)\n    end\nend)\n\nfunction MyComponent:SetValue(val)\n    if TheWorld.ismastersim then\n        self._value:set(val)\n    end\nend\n\nfunction MyComponent:GetValue()\n    return self._value:value()\nend\n\nreturn MyComponent\n'})}),"\n",(0,s.jsx)(n.h3,{id:"registering-and-using-replicas",children:"Registering and Using Replicas"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAddReplicableComponent("mycomponent")\n\n-- In prefab definition\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Setup for both server and client\n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    -- Mark entity as having completed client setup\n    inst.entity:SetPristine()\n    \n    -- Client setup is complete\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Server-only components\n    inst:AddComponent("mycomponent")\n    inst.components.mycomponent:SetValue(100)\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"remote-procedure-calls-rpcs",children:"Remote Procedure Calls (RPCs)"}),"\n",(0,s.jsx)(n.p,{children:"RPCs allow executing functions remotely between server and clients."}),"\n",(0,s.jsx)(n.h3,{id:"rpc-types",children:"RPC Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- RPC directions\nRPC = {\n    -- Server to clients\n    Broadcast = 0, -- Send to all clients\n    Target = 1,    -- Send to a specific client\n    \n    -- Client to server\n    ToServer = 2   -- Send from client to server\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defining-rpc-messages",children:"Defining RPC Messages"}),"\n",(0,s.jsx)(n.p,{children:"RPCs are defined with unique identifiers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- In modmain.lua\nMOD_RPC = {\n    MyMod = {\n        ExampleRPC = 0,\n        AnotherRPC = 1\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sending-rpc-messages",children:"Sending RPC Messages"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Client sending to server\nSendModRPCToServer(MOD_RPC.MyMod.ExampleRPC, param1, param2)\n\n-- Server broadcasting to all clients\nSendModRPCToClient(MOD_RPC.MyMod.AnotherRPC, client, param1)\n\n-- Server sending to all clients\nSendModRPCToClients(MOD_RPC.MyMod.AnotherRPC, param1)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"handling-rpc-messages",children:"Handling RPC Messages"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\n-- Register handler for client-to-server RPC\nAddModRPCHandler("MyMod", "ExampleRPC", function(player, param1, param2)\n    -- Handle the RPC from client\n    print(player:GetDisplayName() .. " sent RPC with " .. param1)\nend)\n\n-- Register handler for server-to-client RPC\nAddClientModRPCHandler("MyMod", "AnotherRPC", function(param1)\n    -- Handle the RPC from server\n    print("Server sent RPC with " .. param1)\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"entity-synchronization",children:"Entity Synchronization"}),"\n",(0,s.jsx)(n.p,{children:"Entities synchronize between server and client through several mechanisms:"}),"\n",(0,s.jsx)(n.h3,{id:"entity-setup-for-networking",children:"Entity Setup for Networking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function CreateNetworkedEntity()\n    local inst = CreateEntity()\n    \n    -- Essential for networking\n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    -- Tag for classification\n    inst:AddTag("networked")\n    \n    -- Network variables visible to clients\n    inst.displayname = net_string(inst.GUID, "displayname", "displaynamedirty")\n    \n    -- Mark entity setup as complete for clients\n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        -- Client-only code\n        inst:ListenForEvent("displaynamedirty", OnNameChanged)\n        return inst\n    end\n    \n    -- Server-only components and setup\n    inst.components.named:SetName("EntityName")\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"entity-ownership",children:"Entity Ownership"}),"\n",(0,s.jsx)(n.p,{children:'Some entities can be "owned" by clients for more responsive interaction:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Give client authority over an entity\ninst.Network:SetClassifiedTarget(client)\n\n-- Give server back authority\ninst.Network:SetClassifiedTarget(nil)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"optimizing-network-usage",children:"Optimizing Network Usage"}),"\n",(0,s.jsx)(n.p,{children:"DST provides several methods to optimize network traffic:"}),"\n",(0,s.jsx)(n.h3,{id:"batch-updates",children:"Batch Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Group multiple updates to reduce network messages\ninst.components.container:StartUpdating()\n-- Make multiple changes\ninst.components.container:GiveItem(item1)\ninst.components.container:GiveItem(item2)\ninst.components.container:GiveItem(item3)\n-- Send a single update\ninst.components.container:StopUpdating()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"priority-systems",children:"Priority Systems"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Network priority levels\nNETWORK_PRIORITY = {\n    CRITICAL = 0,  -- Must be delivered immediately\n    HIGH = 1,      -- Important for gameplay\n    MEDIUM = 2,    -- Standard priority\n    LOW = 3        -- Can be delayed if needed\n}\n\n-- Set entity network priority\ninst.entity:SetPriority(NETWORK_PRIORITY.HIGH)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"relevance-checking",children:"Relevance Checking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Only sync with nearby players\nlocal x, y, z = inst.Transform:GetWorldPosition()\nlocal players = FindPlayersInRange(x, y, z, TUNING.MAX_SYNC_DISTANCE)\nfor _, player in ipairs(players) do\n    SendModRPCToClient(MOD_RPC.MyMod.AnotherRPC, player.userid, param1)\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-networking-techniques",children:"Advanced Networking Techniques"}),"\n",(0,s.jsx)(n.h3,{id:"client-prediction",children:"Client Prediction"}),"\n",(0,s.jsx)(n.p,{children:"Client prediction helps reduce perceived latency:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- In locomotor component\nif TheWorld.ismastersim then\n    -- Server: Set actual position\n    self.inst.Transform:SetPosition(x, y, z)\nelse\n    -- Client: Predict position based on input\n    local predicted_x = start_x + (speed * dt * direction_x)\n    local predicted_z = start_z + (speed * dt * direction_z)\n    self.inst.Transform:SetPosition(predicted_x, y, predicted_z)\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"server-reconciliation",children:"Server Reconciliation"}),"\n",(0,s.jsx)(n.p,{children:"When server corrections arrive, clients must reconcile differences:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Listen for position correction from server\ninst:ListenForEvent("onpositionupdate", function(inst, data)\n    -- Smoothly move to correct position\n    inst:DoTaskInTime(0.1, function()\n        inst.Transform:SetPosition(data.x, data.y, data.z)\n    end)\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"network-debugging",children:"Network Debugging"}),"\n",(0,s.jsx)(n.p,{children:"Tools for diagnosing network issues:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Print network statistics\nprint("Network Statistics:")\nprint("Bandwidth In: " .. TheSim:GetBandwidthIn())\nprint("Bandwidth Out: " .. TheSim:GetBandwidthOut())\nprint("Packet Loss: " .. TheSim:GetPacketLoss())\n\n-- Show network entities\nc_countallnetwork() -- Console command\n\n-- Track bandwidth usage\nc_bandwidth() -- Console command\n'})}),"\n",(0,s.jsx)(n.h2,{id:"example-synchronized-item-chest",children:"Example: Synchronized Item Chest"}),"\n",(0,s.jsx)(n.p,{children:"Complete example of a chest with synchronized inventory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function MakeNetworkedChest()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Visual setup\n    inst.AnimState:SetBank("chest")\n    inst.AnimState:SetBuild("treasure_chest")\n    inst.AnimState:PlayAnimation("closed")\n    \n    -- Tags for identification\n    inst:AddTag("chest")\n    inst:AddTag("structure")\n    \n    -- Network variables for UI\n    inst.openlid = net_bool(inst.GUID, "chest.openlid", "openlidchest")\n    \n    inst.entity:SetPristine()\n    \n    -- Client-side handlers\n    if not TheWorld.ismastersim then\n        -- Handle lid animation on clients\n        inst:ListenForEvent("openlidchest", function()\n            if inst.openlid:value() then\n                inst.AnimState:PlayAnimation("open")\n            else\n                inst.AnimState:PlayAnimation("closed")\n            end\n        end)\n        return inst\n    end\n    \n    -- Server-side components\n    inst:AddComponent("container")\n    inst.components.container:SetNumSlots(9)\n    \n    -- UI configuration\n    inst.components.container.widgetslotpos = {}\n    for y = 0, 2 do\n        for x = 0, 2 do\n            table.insert(inst.components.container.widgetslotpos, \n                Vector3(80*x-80*2/2, 80*y-80*2/2, 0))\n        end\n    end\n    inst.components.container.widgetanimbank = "ui_chest_3x3"\n    inst.components.container.widgetanimbuild = "ui_chest_3x3"\n    \n    -- Connect container events to network variables\n    inst:ListenForEvent("onopen", function()\n        inst.openlid:set(true)\n    end)\n    \n    inst:ListenForEvent("onclose", function()\n        inst.openlid:set(false)\n    end)\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"network-limitations-and-best-practices",children:"Network Limitations and Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimize Synchronization"}),": Only sync what clients absolutely need"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Appropriate Data Types"}),": Smaller data types use less bandwidth"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Updates"}),": Group related changes together"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prioritize Critical Data"}),": Use network priorities appropriately"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consider Latency"}),": Design systems that are resilient to latency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avoid Client Authority"}),": Remember the server is always authoritative"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test with Artificial Latency"}),": Use network condition simulators"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);