"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5221],{5437:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api-vanilla/components/workable","title":"Workable Component","description":"The Workable component allows entities to be worked on with tools, such as chopping trees, mining rocks, or hammering structures.","source":"@site/docs/api-vanilla/components/workable.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/workable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/workable","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"id":"workable","title":"Workable Component","sidebar_position":11}}');var r=t(4848),i=t(8453);const s={id:"workable",title:"Workable Component",sidebar_position:11},l="Workable Component",d={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Work Actions",id:"work-actions",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Example: Creating a Workable Tree",id:"example-creating-a-workable-tree",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"workable-component",children:"Workable Component"})}),"\n",(0,r.jsx)(n.p,{children:"The Workable component allows entities to be worked on with tools, such as chopping trees, mining rocks, or hammering structures."}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add a workable component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("workable")\n\n-- Configure the workable component\nlocal workable = entity.components.workable\nworkable:SetWorkAction(ACTIONS.CHOP)\nworkable:SetWorkLeft(10)\nworkable:SetOnFinishCallback(OnChopped)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"action"})}),(0,r.jsx)(n.td,{children:"Action"}),(0,r.jsx)(n.td,{children:"The action type required to work this entity (CHOP, MINE, DIG, etc.)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"workleft"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Amount of work remaining before the work is complete"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"maxwork"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Maximum amount of work required to complete"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"savestate"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Whether to save work progress when the game is saved"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onwork"})}),(0,r.jsx)(n.td,{children:"Function"}),(0,r.jsx)(n.td,{children:"Callback when the entity is worked on"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onfinish"})}),(0,r.jsx)(n.td,{children:"Function"}),(0,r.jsx)(n.td,{children:"Callback when the work is completed"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Set the action required to work on this entity\nworkable:SetWorkAction(ACTIONS.MINE)\n\n-- Set how much work is required to complete\nworkable:SetWorkLeft(20)\n\n-- Set whether this entity makes sound when worked on\nworkable:SetOnWorkCallback(function(inst, worker, workleft)\n    -- Play sound effect when worked on\n    inst.SoundEmitter:PlaySound("dontstarve/wilson/use_axe_tree")\nend)\n\n-- Set what happens when work is completed\nworkable:SetOnFinishCallback(function(inst, worker)\n    -- Drop loot, play effects, etc.\n    inst:Remove()\nend)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"work-actions",children:"Work Actions"}),"\n",(0,r.jsx)(n.p,{children:"Common work actions include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ACTIONS.CHOP"})," - For trees and wooden objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ACTIONS.MINE"})," - For rocks and mineral deposits"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ACTIONS.DIG"})," - For digging up plants or buried objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ACTIONS.HAMMER"})," - For breaking down structures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ACTIONS.HACK"})," - For hacking through vegetation"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,r.jsx)(n.p,{children:"The Workable component often works with:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Lootdropper"})," - For dropping items when work is completed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Growable"})," - For regrowth after being worked on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Health"})," - For damage when being worked on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Combat"})," - For entities that attack when worked on"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-creating-a-workable-tree",children:"Example: Creating a Workable Tree"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function MakeTree()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    \n    -- Make it workable\n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.CHOP)\n    inst.components.workable:SetWorkLeft(10)\n    inst.components.workable:SetOnWorkCallback(function(inst)\n        inst.SoundEmitter:PlaySound("dontstarve/wilson/use_axe_tree")\n    end)\n    inst.components.workable:SetOnFinishCallback(function(inst, worker)\n        inst.SoundEmitter:PlaySound("dontstarve/forest/treefall")\n        inst:Remove()\n    end)\n    \n    return inst\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);