"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5221],{5437:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api-vanilla/components/workable","title":"Workable Component","description":"The Workable component allows entities to be affected by tools such as axes, pickaxes, hammers, and other work tools. It manages resource collection, destruction, and work-based interactions.","source":"@site/docs/api-vanilla/components/workable.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/workable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/workable","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"id":"workable","title":"Workable Component","sidebar_position":11,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Cookable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/cookable"},"next":{"title":"Growable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/growable"}}');var r=o(4848),s=o(8453);const i={id:"workable",title:"Workable Component",sidebar_position:11,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},l="Workable Component",a={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Common Work Actions",id:"common-work-actions",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"See also",id:"see-also",level:2},{value:"Example: Creating a Basic Workable Tree",id:"example-creating-a-basic-workable-tree",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"workable-component",children:"Workable Component"})}),"\n",(0,r.jsx)(n.p,{children:"The Workable component allows entities to be affected by tools such as axes, pickaxes, hammers, and other work tools. It manages resource collection, destruction, and work-based interactions."}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add a workable component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("workable")\n\n-- Configure the workable component\nlocal workable = entity.components.workable\nworkable:SetWorkAction(ACTIONS.CHOP)\nworkable:SetWorkLeft(10)\nworkable:SetOnFinishCallback(OnFinished)\nworkable:SetOnWorkCallback(OnWorked)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"action"})}),(0,r.jsx)(n.td,{children:"ACTIONS"}),(0,r.jsx)(n.td,{children:"The type of action that can work on this entity (CHOP, MINE, HAMMER, etc.)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"workleft"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"How much work is required to complete the action"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"maxwork"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"The maximum amount of work (for resetting)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"savestate"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Whether to save the work state"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onwork"})}),(0,r.jsx)(n.td,{children:"Function"}),(0,r.jsx)(n.td,{children:"Called when the entity is worked on"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onfinish"})}),(0,r.jsx)(n.td,{children:"Function"}),(0,r.jsx)(n.td,{children:"Called when the work is completed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"workable"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Whether the entity can currently be worked on"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"workmultiplier"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Multiplier for work effectiveness"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Set the action type\nworkable:SetWorkAction(ACTIONS.MINE)\n\n-- Set how much work is required\nworkable:SetWorkLeft(5)\n\n-- Set work callbacks\nworkable:SetOnWorkCallback(function(inst, worker, workleft)\n    -- Do something when worked on\n    inst.AnimState:PlayAnimation("hit")\n    inst.SoundEmitter:PlaySound("dontstarve/common/destroy_stone")\nend)\n\nworkable:SetOnFinishCallback(function(inst, worker)\n    -- Do something when work is finished\n    local loot = SpawnPrefab("rocks")\n    loot.Transform:SetPosition(inst.Transform:GetWorldPosition())\n    inst:Remove()\nend)\n\n-- Work on the entity\nworkable:WorkedBy(worker, work_effectiveness)\n\n-- Make the entity unworkable\nworkable:SetWorkable(false)\n\n-- Reset the work required\nworkable:SetWorkLeft(workable.maxwork)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-work-actions",children:"Common Work Actions"}),"\n",(0,r.jsx)(n.p,{children:"The Workable component supports different action types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ACTIONS.CHOP"})," - For trees and other wood sources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ACTIONS.MINE"})," - For rocks and minerals"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ACTIONS.HAMMER"})," - For structures that can be demolished"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ACTIONS.DIG"})," - For diggable objects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ACTIONS.NET"})," - For catching creatures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ACTIONS.HARVEST"})," - For harvesting resources"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,r.jsx)(n.p,{children:"The Workable component often works with:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"LootDropper"})," - For dropping resources when work is complete"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Growable"})," - For renewable resources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Health"})," - For entities that can be damaged by work"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Combat"})," - For entities that fight back when worked on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"StaticGrid"})," - For placing on the world grid"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,r.jsx)(n.p,{children:"For practical implementations of the Workable component in mods, see these case studies:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-geometric",children:"Geometric Placement Mod"})})," - Shows how workable entities integrate with grid-based placement systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-island-adventures",children:"Island Adventures Gameplay"})})," - Demonstrates specialized workable resources like bamboo and tropical trees"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/lootdropper",children:"LootDropper Component"})," - For resource drops when work is completed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/health",children:"Health Component"})," - For damage from working"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/growable",children:"Growable Component"})," - For renewable workable resources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/other-components",children:"Pickable Component"})," - For resources that can be picked without tools"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../core/actions.md",children:"Tool-Related Actions"})," - For actions related to tools"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-creating-a-basic-workable-tree",children:"Example: Creating a Basic Workable Tree"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function MakeTree()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    \n    -- Configure animation\n    inst.AnimState:SetBank("tree")\n    inst.AnimState:SetBuild("tree_normal")\n    inst.AnimState:PlayAnimation("sway1_loop", true)\n    \n    -- Make it workable\n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.CHOP)\n    inst.components.workable:SetWorkLeft(10)\n    \n    -- Set callbacks\n    inst.components.workable:SetOnWorkCallback(function(inst, worker, workleft)\n        inst.AnimState:PlayAnimation("chop")\n        inst.AnimState:PushAnimation("sway1_loop", true)\n        \n        -- Play sound effect\n        inst.SoundEmitter:PlaySound("dontstarve/wilson/use_axe_tree")\n    end)\n    \n    inst.components.workable:SetOnFinishCallback(function(inst, worker)\n        -- Change to stump\n        inst.AnimState:PlayAnimation("fall")\n        \n        -- Play sound effects\n        inst.SoundEmitter:PlaySound("dontstarve/forest/treefall")\n        \n        -- Spawn resources\n        local pt = inst:GetPosition()\n        local log = SpawnPrefab("log")\n        local pinecone = SpawnPrefab("pinecone")\n        \n        if log then\n            log.Transform:SetPosition(pt.x, pt.y, pt.z)\n        end\n        \n        if pinecone then\n            pinecone.Transform:SetPosition(pt.x, pt.y, pt.z)\n        end\n        \n        -- Remove the tree\n        inst:DoTaskInTime(0.5, function() \n            inst:Remove() \n        end)\n    end)\n    \n    return inst\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var t=o(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);