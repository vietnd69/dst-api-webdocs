"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7368],{7926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>v,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api-vanilla/core/event-system","title":"Event System","description":"Don\'t Starve Together uses an event system to manage and react to game state changes. This system allows entities to register listeners and respond to events from other entities.","source":"@site/docs/api-vanilla/core/event-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/event-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/event-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"event-system","title":"Event System","sidebar_position":2},"sidebar":"docs","previous":{"title":"EntityScript","permalink":"/dst-api-webdocs/docs/api-vanilla/core/entityscript"},"next":{"title":"Constants","permalink":"/dst-api-webdocs/docs/api-vanilla/core/constants"}}');var i=t(4848),a=t(8453);const r={id:"event-system",title:"Event System",sidebar_position:2},l="Event System",o={},c=[{value:"Registering and Firing Events",id:"registering-and-firing-events",level:2},{value:"Unregistering Events",id:"unregistering-events",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Listening to events from the entity itself",id:"listening-to-events-from-the-entity-itself",level:3},{value:"Listening to events from another entity",id:"listening-to-events-from-another-entity",level:3},{value:"Firing events with data",id:"firing-events-with-data",level:3},{value:"Common Events",id:"common-events",level:2},{value:"Combat Events",id:"combat-events",level:3},{value:"Character Events",id:"character-events",level:3},{value:"World Events",id:"world-events",level:3},{value:"Entity Lifecycle Events",id:"entity-lifecycle-events",level:3},{value:"Network Events",id:"network-events",level:2},{value:"Creating Custom Events in Mods",id:"creating-custom-events-in-mods",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"event-system",children:"Event System"})}),"\n",(0,i.jsx)(n.p,{children:"Don't Starve Together uses an event system to manage and react to game state changes. This system allows entities to register listeners and respond to events from other entities."}),"\n",(0,i.jsx)(n.h2,{id:"registering-and-firing-events",children:"Registering and Firing Events"}),"\n",(0,i.jsx)(n.p,{children:"Two main methods in the event system:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Register event listener\ninst:ListenForEvent(event_name, fn, source)\n\n-- Fire event\ninst:PushEvent(event_name, data)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Where:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"event_name"}),": Name of the event (string)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fn"}),": Callback function called when the event occurs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"source"}),": (Optional) Source entity firing the event, if not specified, listens from all sources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data"}),": (Optional) Data sent with the event, usually a table"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"unregistering-events",children:"Unregistering Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Unregister event listener\ninst:RemoveEventCallback(event_name, fn, source)\n\n-- Unregister all event listeners\ninst:RemoveAllEventCallbacks()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.h3,{id:"listening-to-events-from-the-entity-itself",children:"Listening to events from the entity itself"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Entity listens to "attacked" event from itself\ninst:ListenForEvent("attacked", function(inst, data)\n    print("Attacked by: " .. tostring(data.attacker))\n    print("Damage: " .. tostring(data.damage))\nend)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"listening-to-events-from-another-entity",children:"Listening to events from another entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Entity listens to "death" event from target\ninst:ListenForEvent("death", function(target)\n    print(target.prefab .. " has died!")\nend, target)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"firing-events-with-data",children:"Firing events with data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Fire "customaction" event with data\ninst:PushEvent("customaction", { target = target_entity, value = 10 })\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-events",children:"Common Events"}),"\n",(0,i.jsx)(n.p,{children:"Here are some common events in Don't Starve Together:"}),"\n",(0,i.jsx)(n.h3,{id:"combat-events",children:"Combat Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- When entity is attacked\n-- data: { attacker, damage, damageresolved, original_damage, weapon, stimuli, spdamage, redirected, noimpactsound }\ninst:ListenForEvent("attacked", OnAttacked)\n\n-- When entity dies\ninst:ListenForEvent("death", OnDeath)\n\n-- When entity damages another entity\ninst:ListenForEvent("onhitother", OnHitOther)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"character-events",children:"Character Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- When character\'s hunger changes\ninst:ListenForEvent("hungerdelta", OnHungerDelta)\n\n-- When character\'s health changes\ninst:ListenForEvent("healthdelta", OnHealthDelta)\n\n-- When character\'s sanity changes\ninst:ListenForEvent("sanitydelta", OnSanityDelta)\n\n-- When character equips item\ninst:ListenForEvent("equip", OnEquip)\n\n-- When character unequips item\ninst:ListenForEvent("unequip", OnUnequip)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"world-events",children:"World Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- When season changes\nTheWorld:ListenForEvent("seasonchange", OnSeasonChange)\n\n-- When day/night phase changes\nTheWorld:ListenForEvent("phasechanged", OnPhaseChanged)\n\n-- When rain starts/stops\nTheWorld:ListenForEvent("rainstart", OnRainStart)\nTheWorld:ListenForEvent("rainstop", OnRainStop)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"entity-lifecycle-events",children:"Entity Lifecycle Events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- When animation ends\ninst:ListenForEvent("animover", OnAnimOver)\n\n-- When entity is burnt\ninst:ListenForEvent("burnt", OnBurnt)\n\n-- When entity is destroyed\ninst:ListenForEvent("onremove", OnRemove)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"network-events",children:"Network Events"}),"\n",(0,i.jsx)(n.p,{children:"In multiplayer environments, events are also used to synchronize between server and clients:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Event when network value changes\ninst.mynetval = net_bool(inst.GUID, "mynetval", "mynetvaldirty")\ninst.mynetval:set(true) -- Will send "mynetvaldirty" event to clients\n\n-- Listen for changes (client-side)\ninst:ListenForEvent("mynetvaldirty", function()\n    local current_value = inst.mynetval:value()\n    -- Handle value change\nend)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-custom-events-in-mods",children:"Creating Custom Events in Mods"}),"\n",(0,i.jsx)(n.p,{children:"You can create and use custom events in your mod:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nlocal MY_EVENTS = {\n    "mycustomevent1",\n    "mycustomevent2",\n}\n\n-- In prefab or component\ninst:PushEvent("mycustomevent1", { custom_data = 123 })\n\n-- Listen for custom event\ninst:ListenForEvent("mycustomevent1", function(inst, data)\n    print("Custom event data: " .. tostring(data.custom_data))\nend)\n'})})]})}function v(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);