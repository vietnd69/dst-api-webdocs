"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[64801],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},89184:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"game-scripts/getting-started/index","title":"Getting Started with DST Lua API","description":"Complete guide to Don\'t Starve Together modding and API usage","source":"@site/docs/game-scripts/getting-started/index.md","sourceDirName":"game-scripts/getting-started","slug":"/game-scripts/getting-started/","permalink":"/dst-api-webdocs/docs/game-scripts/getting-started/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Getting Started with DST Lua API","description":"Complete guide to Don\'t Starve Together modding and API usage","sidebar_position":1,"last_updated":"2023-06-15T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","next":{"title":"Getting Started with DST Lua API","permalink":"/dst-api-webdocs/docs/game-scripts/getting-started/"}}');var s=i(74848),o=i(28453);const r={title:"Getting Started with DST Lua API",description:"Complete guide to Don't Starve Together modding and API usage",sidebar_position:1,last_updated:new Date("2023-06-15T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="Getting Started with DST Lua API",d={},l=[{value:"Version History",id:"version-history",level:2},{value:"Introduction to DST Modding",id:"introduction-to-dst-modding",level:2},{value:"What is the DST Lua API?",id:"what-is-the-dst-lua-api",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setting Up Your Modding Environment",id:"setting-up-your-modding-environment",level:2},{value:"Find Your Mods Directory",id:"find-your-mods-directory",level:3},{value:"Basic Mod Structure",id:"basic-mod-structure",level:3},{value:"Understanding the Core Systems",id:"understanding-the-core-systems",level:2},{value:"Entity-Component System",id:"entity-component-system",level:3},{value:"Script Organization",id:"script-organization",level:3},{value:"Your First Mod: Complete Tutorial",id:"your-first-mod-complete-tutorial",level:2},{value:"Step 1: Create Mod Directory Structure",id:"step-1-create-mod-directory-structure",level:3},{value:"Step 2: Create modinfo.lua",id:"step-2-create-modinfolua",level:3},{value:"Step 3: Create modmain.lua",id:"step-3-create-modmainlua",level:3},{value:"Step 4: Create Custom Item Prefab",id:"step-4-create-custom-item-prefab",level:3},{value:"Step 5: Testing Your Mod",id:"step-5-testing-your-mod",level:3},{value:"Step 6: Common Debugging Commands",id:"step-6-common-debugging-commands",level:3},{value:"Common Modding Scenarios",id:"common-modding-scenarios",level:2},{value:"Scenario 1: Creating a Custom Character",id:"scenario-1-creating-a-custom-character",level:3},{value:"Scenario 2: Adding Custom Recipes and Crafting",id:"scenario-2-adding-custom-recipes-and-crafting",level:3},{value:"Scenario 3: World Generation Modifications",id:"scenario-3-world-generation-modifications",level:3},{value:"Scenario 4: Custom Components and Behaviors",id:"scenario-4-custom-components-and-behaviors",level:3},{value:"Steam Workshop Integration",id:"steam-workshop-integration",level:2},{value:"Preparing Your Mod for Workshop",id:"preparing-your-mod-for-workshop",level:3},{value:"Mod Validation Checklist",id:"mod-validation-checklist",level:4},{value:"Workshop Upload Process",id:"workshop-upload-process",level:4},{value:"Workshop Best Practices",id:"workshop-best-practices",level:3},{value:"Naming Conventions",id:"naming-conventions",level:4},{value:"Debugging and Troubleshooting",id:"debugging-and-troubleshooting",level:2},{value:"Essential Debugging Tools",id:"essential-debugging-tools",level:3},{value:"Console Commands for Mod Development",id:"console-commands-for-mod-development",level:4},{value:"Mod-Specific Debug Functions",id:"mod-specific-debug-functions",level:4},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Issue 1: Mod Not Loading",id:"issue-1-mod-not-loading",level:4},{value:"Issue 2: Items Not Working",id:"issue-2-items-not-working",level:4},{value:"Issue 3: Multiplayer Problems",id:"issue-3-multiplayer-problems",level:4},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Efficient Entity Management",id:"efficient-entity-management",level:3},{value:"Memory-Efficient Data Structures",id:"memory-efficient-data-structures",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Resources and Community",id:"resources-and-community",level:2},{value:"API Documentation Structure",id:"api-documentation-structure",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"getting-started-with-dst-lua-api",children:"Getting Started with DST Lua API"})}),"\n",(0,s.jsx)(n.p,{children:"Welcome to the Don't Starve Together (DST) Lua API documentation! This comprehensive guide will take you from basic API understanding to creating advanced mods for the game."}),"\n",(0,s.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Date"}),(0,s.jsx)(n.th,{children:"Build"}),(0,s.jsx)(n.th,{children:"Changes"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2023-06-15"}),(0,s.jsx)(n.td,{children:"675312"}),(0,s.jsx)(n.td,{children:"Initial documentation"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"introduction-to-dst-modding",children:"Introduction to DST Modding"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together is a multiplayer survival game developed by Klei Entertainment. The game is highly moddable, allowing players and developers to create custom content and modify gameplay through Lua scripting."}),"\n",(0,s.jsx)(n.h3,{id:"what-is-the-dst-lua-api",children:"What is the DST Lua API?"}),"\n",(0,s.jsx)(n.p,{children:"The DST Lua API is a comprehensive set of functions, components, and systems that allow modders to interact with the game's core functionality. Through this API, you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create new items, characters, creatures, and structures"}),"\n",(0,s.jsx)(n.li,{children:"Modify existing game mechanics and behaviors"}),"\n",(0,s.jsx)(n.li,{children:"Add new gameplay features and systems"}),"\n",(0,s.jsx)(n.li,{children:"Create custom UI elements and screens"}),"\n",(0,s.jsx)(n.li,{children:"Change world generation and environmental features"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Before diving into DST modding, you should have:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Basic programming knowledge"}),"\n",(0,s.jsx)(n.li,{children:"Familiarity with Lua programming language"}),"\n",(0,s.jsx)(n.li,{children:"Understanding of Don't Starve Together gameplay mechanics"}),"\n",(0,s.jsx)(n.li,{children:"A copy of Don't Starve Together on Steam"}),"\n",(0,s.jsx)(n.li,{children:"Text editor for code development"}),"\n",(0,s.jsx)(n.li,{children:"Steam Workshop access for distribution"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-your-modding-environment",children:"Setting Up Your Modding Environment"}),"\n",(0,s.jsx)(n.h3,{id:"find-your-mods-directory",children:"Find Your Mods Directory"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Windows"}),": ",(0,s.jsx)(n.code,{children:"C:\\Users\\[YourUsername]\\Documents\\Klei\\DoNotStarveTogether\\mods\\"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mac"}),": ",(0,s.jsx)(n.code,{children:"~/Documents/Klei/DoNotStarveTogether/mods/"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Linux"}),": ",(0,s.jsx)(n.code,{children:"~/.klei/DoNotStarveTogether/mods/"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-mod-structure",children:"Basic Mod Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my_first_mod/\n\u251c\u2500\u2500 modinfo.lua       # Mod metadata and configuration\n\u251c\u2500\u2500 modmain.lua       # Main entry point for your mod\n\u251c\u2500\u2500 scripts/          # Custom scripts folder\n\u2502   \u251c\u2500\u2500 prefabs/      # Custom entity definitions\n\u2502   \u2514\u2500\u2500 components/   # Custom component definitions\n\u251c\u2500\u2500 anim/             # Custom animations\n\u2514\u2500\u2500 images/           # Images and icons\n    \u2514\u2500\u2500 inventoryimages/  # Item icons\n"})}),"\n",(0,s.jsx)(n.h2,{id:"understanding-the-core-systems",children:"Understanding the Core Systems"}),"\n",(0,s.jsx)(n.p,{children:"DST's codebase is organized around several core systems:"}),"\n",(0,s.jsx)(n.h3,{id:"entity-component-system",children:"Entity-Component System"}),"\n",(0,s.jsx)(n.p,{children:"The game uses an entity-component architecture:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entities"}),": Base objects in the world (players, creatures, items)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Components"}),": Modular pieces of functionality attached to entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prefabs"}),": Templates for creating entities with predefined components"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"script-organization",children:"Script Organization"}),"\n",(0,s.jsx)(n.p,{children:"The API scripts are organized in several key directories:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"actions.lua"}),": Defines player actions like chopping, mining, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"behaviours/"}),": AI behavior scripts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"brains/"}),": AI decision-making scripts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"components/"}),": Entity component definitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"prefabs/"}),": Entity template definitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"stategraphs/"}),": State machine definitions for entities"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"your-first-mod-complete-tutorial",children:"Your First Mod: Complete Tutorial"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-create-mod-directory-structure",children:"Step 1: Create Mod Directory Structure"}),"\n",(0,s.jsx)(n.p,{children:"Create your mod folder structure in the game's mods directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mods/\n\u2514\u2500\u2500 your_first_mod/\n    \u251c\u2500\u2500 modinfo.lua          # Mod metadata and configuration\n    \u251c\u2500\u2500 modmain.lua          # Main mod entry point\n    \u251c\u2500\u2500 scripts/\n    \u2502   \u2514\u2500\u2500 prefabs/\n    \u2502       \u2514\u2500\u2500 myitem.lua   # Custom item definition\n    \u2514\u2500\u2500 images/\n        \u2514\u2500\u2500 inventoryimages/\n            \u2514\u2500\u2500 myitem.tex   # Item icon\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-create-modinfolua",children:"Step 2: Create modinfo.lua"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- modinfo.lua - Mod metadata and configuration\nname = "My First Mod"\ndescription = "A simple example mod for learning DST modding"\nauthor = "Your Name"\nversion = "1.0.0"\n\nforumthread = ""\napi_version = 10\n\ndst_compatible = true\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\nall_clients_require_mod = true\nclient_only_mod = false\n\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Mod configuration options\nconfiguration_options = {\n    {\n        name = "item_durability",\n        label = "Item Durability",\n        options = {\n            {description = "Low", data = 50},\n            {description = "Normal", data = 100},\n            {description = "High", data = 150},\n        },\n        default = 100,\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-create-modmainlua",children:"Step 3: Create modmain.lua"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- modmain.lua - Main mod entry point\n-- This file is executed when the mod loads\n\n-- Add your custom item to the prefab files list\nPrefabFiles = {\n    "myitem",\n}\n\n-- Add item to inventory images\nAssets = {\n    Asset("ATLAS", "images/inventoryimages/myitem.xml"),\n    Asset("IMAGE", "images/inventoryimages/myitem.tex"),\n}\n\n-- Add recipe for your item\nAddRecipe2("myitem", \n    {Ingredient("twigs", 2), Ingredient("flint", 1)}, \n    TECH.NONE, \n    {\n        placer = "myitem_placer",\n        min_spacing = 0,\n        atlas = "images/inventoryimages/myitem.xml",\n        image = "myitem.tex",\n    }\n)\n\n-- Example of using mod configuration\nlocal config_durability = GetModConfigData("item_durability") or 100\nTUNING.MYITEM_DURABILITY = config_durability\n\n-- Debug print to confirm mod loading\nmodprint("My First Mod loaded successfully!")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-create-custom-item-prefab",children:"Step 4: Create Custom Item Prefab"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- scripts/prefabs/myitem.lua - Custom item definition\nlocal assets = {\n    Asset("ANIM", "anim/myitem.zip"),\n    Asset("ATLAS", "images/inventoryimages/myitem.xml"),\n    Asset("IMAGE", "images/inventoryimages/myitem.tex"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Add standard entity components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Set up visual appearance\n    inst.AnimState:SetBank("myitem")\n    inst.AnimState:SetBuild("myitem")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add to inventory item group\n    MakeInventoryPhysics(inst)\n    \n    -- Network entity setup\n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add inventory item component\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "myitem"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/myitem.xml"\n    \n    -- Add inspectable component\n    inst:AddComponent("inspectable")\n    \n    -- Add tool functionality (example: axe)\n    inst:AddComponent("tool")\n    inst.components.tool:SetAction(ACTIONS.CHOP)\n    \n    -- Add finite uses\n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(TUNING.MYITEM_DURABILITY or 100)\n    inst.components.finiteuses:SetUses(TUNING.MYITEM_DURABILITY or 100)\n    inst.components.finiteuses:SetOnFinished(inst.Remove)\n    \n    return inst\nend\n\nreturn Prefab("myitem", fn, assets)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-5-testing-your-mod",children:"Step 5: Testing Your Mod"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enable Debug Mode"}),": Set ",(0,s.jsx)(n.code,{children:"CHEATS_ENABLED = true"})," in settings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load the Game"}),": Start DST and enable your mod"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spawn Test Item"}),": Use console command ",(0,s.jsx)(n.code,{children:'c_give("myitem", 1)'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Functionality"}),": Verify the item works as expected"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"step-6-common-debugging-commands",children:"Step 6: Common Debugging Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Console commands for mod debugging\nc_give("myitem", 1)                    -- Give yourself the item\nc_spawn("myitem", 5)                   -- Spawn items on ground\nc_find("myitem")                       -- Find instances in world\nprint(TUNING.MYITEM_DURABILITY)       -- Check configuration values\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-modding-scenarios",children:"Common Modding Scenarios"}),"\n",(0,s.jsx)(n.h3,{id:"scenario-1-creating-a-custom-character",children:"Scenario 1: Creating a Custom Character"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- modmain.lua for character mod\nlocal require = GLOBAL.require\nlocal STRINGS = GLOBAL.STRINGS\n\n-- Character assets\nAssets = {\n    Asset("ANIM", "anim/mycharacter.zip"),\n    Asset("ANIM", "anim/ghost_mycharacter_build.zip"),\n}\n\n-- Add character to game\nAddModCharacter("mycharacter", "FEMALE", {\n    { type = "normal_skin", play_emotes = true },\n    { type = "ghost_skin", anim_bank = "ghost", idle_anim = "idle" }\n})\n\n-- Character strings\nSTRINGS.CHARACTER_NAMES.mycharacter = "My Character"\nSTRINGS.CHARACTER_DESCRIPTIONS.mycharacter = "A unique character with special abilities"\nSTRINGS.CHARACTER_QUOTES.mycharacter = "\\"I have my own way of doing things.\\""\n\n-- Character-specific stats\nAddPlayerPostInit(function(inst)\n    if inst.prefab == "mycharacter" then\n        -- Custom starting items\n        inst.components.inventory:GiveItem(SpawnPrefab("mystartingitem"))\n        \n        -- Custom stats\n        inst.components.health:SetMaxHealth(120)\n        inst.components.sanity:SetMax(180)\n        inst.components.hunger:SetMax(140)\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"scenario-2-adding-custom-recipes-and-crafting",children:"Scenario 2: Adding Custom Recipes and Crafting"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Custom crafting station\nAddRecipe2("mycraftingstation",\n    {Ingredient("boards", 4), Ingredient("rope", 2)},\n    TECH.SCIENCE_ONE,\n    {\n        placer = "mycraftingstation_placer",\n        atlas = "images/inventoryimages/mycraftingstation.xml",\n        image = "mycraftingstation.tex",\n    },\n    {"STRUCTURES", "CRAFTING"}\n)\n\n-- Recipe that requires custom station\nAddRecipe2("advanceditem",\n    {Ingredient("gold", 2), Ingredient("gears", 1)},\n    TECH.MYCUSTOMTECH,\n    {\n        builder_tag = "mycraftingstation",  -- Requires being near custom station\n        atlas = "images/inventoryimages/advanceditem.xml",\n        image = "advanceditem.tex",\n    }\n)\n\n-- Add new tech level\nTECH.MYCUSTOMTECH = {MYCUSTOMTECH = 1}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"scenario-3-world-generation-modifications",children:"Scenario 3: World Generation Modifications"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add custom world generation content\nAddRoomPreInit("Forest", function(room)\n    -- Add custom prefab to forest rooms\n    room.contents.distributeprefabs = room.contents.distributeprefabs or {}\n    table.insert(room.contents.distributeprefabs, "mycustomprefab")\nend)\n\n-- Add custom biome\nAddLevel({\n    id = "MYCUSTOMLEVEL",\n    name = "My Custom World",\n    desc = "A world with custom features",\n    location = "forest",\n    version = 2,\n    overrides = {\n        {"world_size", "default"},\n        {"season_start", "autumn"},\n        {"mycustomsetting", "enabled"}\n    }\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"scenario-4-custom-components-and-behaviors",children:"Scenario 4: Custom Components and Behaviors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- scripts/components/mycustomcomponent.lua\nlocal MyCustomComponent = Class(function(self, inst)\n    self.inst = inst\n    self.value = 0\n    self.max_value = 100\nend)\n\nfunction MyCustomComponent:SetValue(value)\n    self.value = math.max(0, math.min(value, self.max_value))\n    self.inst:PushEvent("valuechanged", {value = self.value})\nend\n\nfunction MyCustomComponent:OnSave()\n    return {value = self.value}\nend\n\nfunction MyCustomComponent:OnLoad(data)\n    if data and data.value then\n        self.value = data.value\n    end\nend\n\nreturn MyCustomComponent\n\n-- Using the component in modmain.lua\nAddComponentPostInit("inventoryitem", function(self)\n    -- Add custom functionality to all inventory items\n    if self.inst.prefab == "myspecialitem" then\n        self.inst:AddComponent("mycustomcomponent")\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"steam-workshop-integration",children:"Steam Workshop Integration"}),"\n",(0,s.jsx)(n.h3,{id:"preparing-your-mod-for-workshop",children:"Preparing Your Mod for Workshop"}),"\n",(0,s.jsx)(n.h4,{id:"mod-validation-checklist",children:"Mod Validation Checklist"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"modinfo.lua complete"}),": All required fields filled correctly"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Assets optimized"}),": Images compressed, animations efficient"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Code tested"}),": No error messages in console"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Compatibility verified"}),": Works with base game and common mods"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Description written"}),": Clear explanation of mod features"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"workshop-upload-process",children:"Workshop Upload Process"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"In-Game Upload"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Main Menu \u2192 Workshop \u2192 Upload Mod \u2192 Select your mod folder\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Steam Workshop Page"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add detailed description"}),"\n",(0,s.jsx)(n.li,{children:"Include screenshots/videos"}),"\n",(0,s.jsx)(n.li,{children:"Set appropriate tags"}),"\n",(0,s.jsx)(n.li,{children:"Choose visibility settings"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"workshop-best-practices",children:"Workshop Best Practices"}),"\n",(0,s.jsx)(n.h4,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Clear, descriptive mod names\nname = "Enhanced Farming Tools"  -- Good\nname = "AwesomeMod123"          -- Avoid\n\n-- Consistent prefab naming\n"enhanced_hoe"     -- Mod-specific prefix\n"enhanced_watering_can"\n"enhanced_fertilizer"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"debugging-and-troubleshooting",children:"Debugging and Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"essential-debugging-tools",children:"Essential Debugging Tools"}),"\n",(0,s.jsx)(n.h4,{id:"console-commands-for-mod-development",children:"Console Commands for Mod Development"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic mod debugging commands\nc_give("myitem", 1)                    -- Give item to player\nc_spawn("myitem", 10)                  -- Spawn items at cursor\nc_find("myitem")                       -- Find all instances in world\nc_sel()                                -- Select entity under mouse\nc_reset()                              -- Reset selected entity\n\n-- Advanced debugging\nc_findnext("myitem")                   -- Find next instance\nc_gonext("myitem")                     -- Teleport to next instance\nc_regenerateworld()                    -- Regenerate world with mods\nc_dumptable(inst.components)           -- Dump component data\n'})}),"\n",(0,s.jsx)(n.h4,{id:"mod-specific-debug-functions",children:"Mod-Specific Debug Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Error handling and debug output\nmodprint("Debug message:", variable)   -- Debug-only print\nmoderror("Error occurred!")            -- Mod error reporting\nmodassert(condition, "Must be true")   -- Mod assertion\n\n-- Configuration debugging\nlocal config = GetModConfigData("setting_name")\nprint("Config value:", config)\n\n-- Component inspection\nlocal function DebugEntity(inst)\n    print("Entity:", inst.prefab)\n    print("Valid:", inst:IsValid())\n    print("Components:", table.concat(inst.components, ", "))\n    \n    if inst.components.health then\n        print("Health:", inst.components.health.currenthealth)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsx)(n.h4,{id:"issue-1-mod-not-loading",children:"Issue 1: Mod Not Loading"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Symptoms:"})," Mod doesn't appear in mod list, no debug output"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Fix modinfo.lua syntax - ensure all required fields are present"}),"\n",(0,s.jsx)(n.li,{children:"Check file permissions - ensure mod files are readable"}),"\n",(0,s.jsx)(n.li,{children:"Verify directory structure - follow exact naming conventions"}),"\n",(0,s.jsx)(n.li,{children:"Review console errors - look for Lua syntax errors"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"issue-2-items-not-working",children:"Issue 2: Items Not Working"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Symptoms:"})," c_give() fails, items have no functionality, recipes don't work"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Verify prefab files are in PrefabFiles list"}),"\n",(0,s.jsx)(n.li,{children:"Check component setup - validate all required components"}),"\n",(0,s.jsx)(n.li,{children:"Test recipe ingredients - ensure all exist and are available"}),"\n",(0,s.jsx)(n.li,{children:"Review asset paths - verify all references are correct"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"issue-3-multiplayer-problems",children:"Issue 3: Multiplayer Problems"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Symptoms:"})," Works in single-player but not multiplayer"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Proper network setup - use inst.entity",":SetPristine","() correctly"]}),"\n",(0,s.jsx)(n.li,{children:"Server-client separation - check TheWorld.ismastersim appropriately"}),"\n",(0,s.jsx)(n.li,{children:"RPC implementation - use proper mod RPC handlers for custom data"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"efficient-entity-management",children:"Efficient Entity Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Pool pattern for frequently spawned/removed entities\nlocal entity_pool = {}\n\nlocal function GetPooledEntity(prefab)\n    if entity_pool[prefab] and #entity_pool[prefab] > 0 then\n        return table.remove(entity_pool[prefab])\n    else\n        return SpawnPrefab(prefab)\n    end\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"memory-efficient-data-structures",children:"Memory-Efficient Data Structures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Use weak references for temporary data\nlocal temporary_data = setmetatable({}, {__mode = "k"})\n\n-- Efficient caching with limits\nlocal cache = {}\nlocal cache_limit = 100\n\nlocal function CacheData(key, data)\n    if #cache >= cache_limit then\n        table.remove(cache, 1)\n    end\n    cache[key] = data\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you understand the basics, you can explore:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/",children:"Core Systems"}),": Learn about the fundamental systems that power DST"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/mod-support/",children:"Mod Support"}),": Advanced mod infrastructure and tools"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/components/",children:"Components"}),": Study the component system for adding behaviors to entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../game-mechanics/index.md",children:"Game Mechanics"}),": Understand how key game systems function"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resources-and-community",children:"Resources and Community"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://forums.kleientertainment.com/forums/forum/26-dont-starve-together-mods-and-tools/",children:"Klei Forums"}),": Official forums for DST modding"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://dontstarvemodding.fandom.com/wiki/Don%27t_Starve_Modding_Wiki",children:"DST Modding Wiki"}),": Community-maintained wiki with modding resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://steamcommunity.com/app/322330/workshop/",children:"Steam Workshop"}),": Browse existing mods for inspiration"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"api-documentation-structure",children:"API Documentation Structure"}),"\n",(0,s.jsx)(n.p,{children:"This documentation is organized by system and functionality:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Getting Started"}),": Introduction, setup guides, and comprehensive tutorials"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Core Systems"}),": Fundamental game systems including mod support infrastructure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Components"}),": Entity components and their functionality"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Game Mechanics"}),": Key gameplay systems like health, hunger, and sanity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"World Management"}),": World generation, seasons, and environment"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Use the sidebar navigation to explore the different sections of the API documentation."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);