"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3025],{7737:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/examples/project-biome","title":"New Biome Project","description":"This tutorial guides you through creating a complete mod that adds a new biome to Don\'t Starve Together. We\'ll create a Crystal Forest biome with unique terrain, vegetation, resources, and creatures.","source":"@site/docs/api-vanilla/examples/project-biome.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/project-biome","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/project-biome","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"id":"project-biome","title":"New Biome Project","sidebar_position":15,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Custom Tool Set Project","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/project-tools"},"next":{"title":"Custom Boss Project","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/project-boss"}}');var r=t(4848),i=t(8453);const a={id:"project-biome",title:"New Biome Project",sidebar_position:15,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="New Biome Project",l={},d=[{value:"Project Overview",id:"project-overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Step 1: Setting Up the Mod",id:"step-1-setting-up-the-mod",level:2},{value:"modinfo.lua",id:"modinfolua",level:3},{value:"modmain.lua",id:"modmainlua",level:3},{value:"Step 2: Creating the Biome Rooms",id:"step-2-creating-the-biome-rooms",level:2},{value:"scripts/map/rooms/crystal_forest.lua",id:"scriptsmaproomscrystal_forestlua",level:3},{value:"Step 3: Creating the Biome Task",id:"step-3-creating-the-biome-task",level:2},{value:"scripts/map/tasks/crystal_forest_task.lua",id:"scriptsmaptaskscrystal_forest_tasklua",level:3},{value:"Step 4: Creating Custom Prefabs",id:"step-4-creating-custom-prefabs",level:2},{value:"scripts/prefabs/crystal_tree.lua",id:"scriptsprefabscrystal_treelua",level:3},{value:"scripts/prefabs/crystal_rock.lua",id:"scriptsprefabscrystal_rocklua",level:3},{value:"scripts/prefabs/crystal_deer.lua",id:"scriptsprefabscrystal_deerlua",level:3},{value:"Step 5: Creating the Crystal Shard Item",id:"step-5-creating-the-crystal-shard-item",level:2},{value:"scripts/prefabs/crystal_shard.lua",id:"scriptsprefabscrystal_shardlua",level:3},{value:"Step 6: Creating the Ground Textures",id:"step-6-creating-the-ground-textures",level:2},{value:"Step 7: Creating the Crystal Deer Brain",id:"step-7-creating-the-crystal-deer-brain",level:2},{value:"scripts/brains/crystal_deer_brain.lua",id:"scriptsbrainscrystal_deer_brainlua",level:3},{value:"Step 8: Adding Recipes for Crystal Items",id:"step-8-adding-recipes-for-crystal-items",level:2},{value:"Add to modmain.lua",id:"add-to-modmainlua",level:3},{value:"Step 9: Testing and Debugging",id:"step-9-testing-and-debugging",level:2},{value:"Common Issues and Solutions:",id:"common-issues-and-solutions",level:3},{value:"Step 10: Publishing Your Mod",id:"step-10-publishing-your-mod",level:2},{value:"Extending the Mod",id:"extending-the-mod",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"new-biome-project",children:"New Biome Project"})}),"\n",(0,r.jsx)(e.p,{children:"This tutorial guides you through creating a complete mod that adds a new biome to Don't Starve Together. We'll create a Crystal Forest biome with unique terrain, vegetation, resources, and creatures."}),"\n",(0,r.jsx)(e.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,r.jsx)(e.p,{children:"By the end of this tutorial, you'll have created:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"A custom biome with unique ground textures"}),"\n",(0,r.jsx)(e.li,{children:"Special vegetation and resources that spawn in the biome"}),"\n",(0,r.jsx)(e.li,{children:"Custom creatures that inhabit the biome"}),"\n",(0,r.jsx)(e.li,{children:"Integration with the existing world generation system"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Intermediate understanding of Lua programming"}),"\n",(0,r.jsx)(e.li,{children:"Familiarity with Don't Starve Together modding"}),"\n",(0,r.jsx)(e.li,{children:"Basic knowledge of world generation"}),"\n",(0,r.jsx)(e.li,{children:"Understanding of prefabs and components"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"CrystalForestMod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 map/\n\u2502   \u2502   \u251c\u2500\u2500 rooms/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 crystal_forest.lua\n\u2502   \u2502   \u2514\u2500\u2500 tasks/\n\u2502   \u2502       \u2514\u2500\u2500 crystal_forest_task.lua\n\u2502   \u2514\u2500\u2500 prefabs/\n\u2502       \u251c\u2500\u2500 crystal_tree.lua\n\u2502       \u251c\u2500\u2500 crystal_rock.lua\n\u2502       \u2514\u2500\u2500 crystal_deer.lua\n\u2514\u2500\u2500 anim/\n    \u251c\u2500\u2500 crystal_ground.zip\n    \u251c\u2500\u2500 crystal_tree.zip\n    \u2514\u2500\u2500 crystal_deer.zip\n"})}),"\n",(0,r.jsx)(e.h2,{id:"step-1-setting-up-the-mod",children:"Step 1: Setting Up the Mod"}),"\n",(0,r.jsx)(e.p,{children:"First, let's create the basic mod structure and files:"}),"\n",(0,r.jsx)(e.h3,{id:"modinfolua",children:"modinfo.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'name = "Crystal Forest Biome"\ndescription = "Adds a beautiful Crystal Forest biome with unique resources and creatures."\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\n-- Tags to help users find the mod\nall_clients_require_mod = true\nclient_only_mod = false\n\n-- Icon and priority\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Mod configuration options\nconfiguration_options = {\n    {\n        name = "BIOME_SIZE",\n        label = "Biome Size",\n        options = {\n            {description = "Small", data = 0.5},\n            {description = "Medium", data = 1.0},\n            {description = "Large", data = 1.5}\n        },\n        default = 1.0\n    },\n    {\n        name = "CRYSTAL_ABUNDANCE",\n        label = "Crystal Abundance",\n        options = {\n            {description = "Sparse", data = 0.5},\n            {description = "Normal", data = 1.0},\n            {description = "Abundant", data = 1.5}\n        },\n        default = 1.0\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"modmainlua",children:"modmain.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Assets to preload\nAssets = {\n    -- Ground textures\n    Asset("IMAGE", "levels/textures/crystal_ground.tex"),\n    Asset("IMAGE", "levels/textures/crystal_noise.tex"),\n    \n    -- Minimap icons\n    Asset("IMAGE", "minimap/crystal_tree.tex"),\n    Asset("ATLAS", "minimap/crystal_tree.xml"),\n    Asset("IMAGE", "minimap/crystal_rock.tex"),\n    Asset("ATLAS", "minimap/crystal_rock.xml"),\n}\n\n-- Prefabs to register\nPrefabFiles = {\n    "crystal_tree",\n    "crystal_rock",\n    "crystal_deer",\n}\n\n-- Configuration\nlocal BIOME_SIZE = GetModConfigData("BIOME_SIZE")\nlocal CRYSTAL_ABUNDANCE = GetModConfigData("CRYSTAL_ABUNDANCE")\n\n-- Add the new ground type\nlocal GROUND = GLOBAL.GROUND\nlocal GROUND_NAMES = GLOBAL.STRINGS.NAMES.GROUND\nlocal GROUND_TILES = GLOBAL.GROUND_TILES\n\n-- Register new ground type\nGROUND.CRYSTAL = #GROUND_TILES + 1\nGROUND_NAMES.CRYSTAL = "Crystal Ground"\nGROUND_TILES[GROUND.CRYSTAL] = "crystal_ground"\n\n-- Add the ground assets\nAddGamePostInit(function()\n    local GroundAtlas = GLOBAL.resolvefilepath("levels/textures/ground_noise.xml")\n    local GroundImage = GLOBAL.resolvefilepath("levels/textures/ground_noise.tex")\n    \n    -- Add our custom ground\n    GLOBAL.TheWorld.components.groundcreep:AddGroundDef(\n        GROUND.CRYSTAL,\n        GroundAtlas,\n        GroundImage,\n        "levels/textures/crystal_noise.tex",\n        "crystal_ground"\n    )\nend)\n\n-- Add the custom rooms and tasks to world generation\nmodimport("scripts/map/rooms/crystal_forest.lua")\nmodimport("scripts/map/tasks/crystal_forest_task.lua")\n\n-- Register our custom task with the world generation\nAddLevelPreInitAny(function(level)\n    if level.location == "forest" then\n        -- Add our task to the level\n        table.insert(level.tasks, "crystal_forest_task")\n        \n        -- Adjust task distribution based on mod config\n        level.overrides = level.overrides or {}\n        level.overrides.task_distribute = level.overrides.task_distribute or {}\n        level.overrides.task_distribute.crystal_forest_task = BIOME_SIZE\n        \n        -- Adjust resource distribution\n        level.overrides.crystal_tree = CRYSTAL_ABUNDANCE\n        level.overrides.crystal_rock = CRYSTAL_ABUNDANCE\n    end\nend)\n\n-- Add our custom ground to the tile physics\nAddSimPostInit(function()\n    for k, v in pairs(GLOBAL.GROUND_FLOORING) do\n        if v == GROUND.CRYSTAL then\n            GLOBAL.SetGroundFertility(v, 0)\n            GLOBAL.SetGroundClass(v, "rocky")\n            GLOBAL.SetGroundSpeedMultiplier(v, 1.2)\n        end\n    end\nend)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"step-2-creating-the-biome-rooms",children:"Step 2: Creating the Biome Rooms"}),"\n",(0,r.jsx)(e.p,{children:"Now let's define the rooms that will make up our Crystal Forest biome:"}),"\n",(0,r.jsx)(e.h3,{id:"scriptsmaproomscrystal_forestlua",children:"scripts/map/rooms/crystal_forest.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'require "map/room_functions"\n\n-- Define the Crystal Forest clearing room\nAddRoom("CrystalForest_Clearing", {\n    colour = {r=0.5, g=0.7, b=0.9, a=0.9},\n    value = WORLD_TILES.CRYSTAL,\n    tags = {"ExitPiece", "Crystal"},\n    contents = {\n        distributepercent = 0.12,\n        distributeprefabs = {\n            crystal_tree = 0.3,\n            crystal_rock = 0.2,\n            flint = 0.05,\n            rocks = 0.05,\n            evergreen = 0.1,\n            grass = 0.05,\n            sapling = 0.1,\n            flower = 0.05,\n        }\n    }\n})\n\n-- Define the Crystal Forest dense room\nAddRoom("CrystalForest_Dense", {\n    colour = {r=0.4, g=0.6, b=0.8, a=0.9},\n    value = WORLD_TILES.CRYSTAL,\n    tags = {"Crystal"},\n    contents = {\n        distributepercent = 0.25,\n        distributeprefabs = {\n            crystal_tree = 0.5,\n            crystal_rock = 0.3,\n            flint = 0.03,\n            rocks = 0.03,\n            evergreen = 0.05,\n            grass = 0.03,\n            sapling = 0.05,\n        }\n    }\n})\n\n-- Define the Crystal Forest glade room\nAddRoom("CrystalForest_Glade", {\n    colour = {r=0.6, g=0.8, b=1.0, a=0.9},\n    value = WORLD_TILES.CRYSTAL,\n    tags = {"Crystal"},\n    contents = {\n        distributepercent = 0.07,\n        distributeprefabs = {\n            crystal_tree = 0.1,\n            crystal_rock = 0.1,\n            flower = 0.2,\n            grass = 0.1,\n            sapling = 0.1,\n            carrot_planted = 0.05,\n            crystal_deer = 0.03,\n        }\n    }\n})\n'})}),"\n",(0,r.jsx)(e.h2,{id:"step-3-creating-the-biome-task",children:"Step 3: Creating the Biome Task"}),"\n",(0,r.jsx)(e.p,{children:"Now let's define the task that will incorporate our rooms into the world generation:"}),"\n",(0,r.jsx)(e.h3,{id:"scriptsmaptaskscrystal_forest_tasklua",children:"scripts/map/tasks/crystal_forest_task.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'require "map/tasks"\n\n-- Create a new task for the Crystal Forest biome\nAddTask("crystal_forest_task", {\n    locks = {LOCKS.NONE},\n    keys_given = {KEYS.TIER1},\n    room_choices = {\n        ["CrystalForest_Clearing"] = 2,\n        ["CrystalForest_Dense"] = {2, 3},\n        ["CrystalForest_Glade"] = {1, 2},\n    },\n    room_bg = WORLD_TILES.CRYSTAL,\n    background_room = "BGCrystal",\n    colour = {r=0.5, g=0.7, b=0.9, a=0.9}\n})\n\n-- Create a background room for the biome\nAddRoom("BGCrystal", {\n    colour = {r=0.5, g=0.7, b=0.9, a=0.9},\n    value = WORLD_TILES.CRYSTAL,\n    tags = {"Crystal", "RoadPoison"},\n    contents = {\n        distributepercent = 0.05,\n        distributeprefabs = {\n            crystal_tree = 0.3,\n            crystal_rock = 0.2,\n            flint = 0.05,\n            rocks = 0.05,\n            grass = 0.05,\n            sapling = 0.05,\n        }\n    }\n})\n'})}),"\n",(0,r.jsx)(e.h2,{id:"step-4-creating-custom-prefabs",children:"Step 4: Creating Custom Prefabs"}),"\n",(0,r.jsx)(e.p,{children:"Now let's create the custom prefabs for our biome:"}),"\n",(0,r.jsx)(e.h3,{id:"scriptsprefabscrystal_treelua",children:"scripts/prefabs/crystal_tree.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/crystal_tree.zip"),\n    Asset("MINIMAP_IMAGE", "crystal_tree"),\n}\n\nlocal prefabs = {\n    "crystal_shard",\n    "twigs",\n    "log",\n}\n\nlocal function OnChopDown(inst, chopper)\n    inst.SoundEmitter:PlaySound("dontstarve/wilson/use_axe_tree")\n    inst.AnimState:PlayAnimation("fall")\n    \n    inst:ListenForEvent("animover", function()\n        local crystal = SpawnPrefab("crystal_shard")\n        crystal.Transform:SetPosition(inst.Transform:GetWorldPosition())\n        \n        inst:Remove()\n    end)\nend\n\nlocal function OnChop(inst, chopper, chops)\n    inst.AnimState:PlayAnimation("chop")\n    inst.AnimState:PushAnimation("idle", true)\n    inst.SoundEmitter:PlaySound("dontstarve/wilson/use_axe_tree")\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    inst.entity:AddMiniMapEntity()\n\n    inst.MiniMapEntity:SetIcon("crystal_tree.tex")\n\n    MakeObstaclePhysics(inst, 0.25)\n\n    inst.AnimState:SetBank("crystal_tree")\n    inst.AnimState:SetBuild("crystal_tree")\n    inst.AnimState:PlayAnimation("idle", true)\n    \n    inst:AddTag("tree")\n    inst:AddTag("crystal")\n    inst:AddTag("workable")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    inst:AddComponent("inspectable")\n    \n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.CHOP)\n    inst.components.workable:SetWorkLeft(3)\n    inst.components.workable:SetOnFinishCallback(OnChopDown)\n    inst.components.workable:SetOnWorkCallback(OnChop)\n\n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("crystal_shard", 1.0)\n    inst.components.lootdropper:AddRandomLoot("twigs", 0.5)\n    inst.components.lootdropper:AddRandomLoot("log", 0.25)\n    inst.components.lootdropper:SetLootSetupFn(function(inst)\n        inst.components.lootdropper.numrandomloot = math.random(1, 3)\n    end)\n\n    MakeHauntableWorkAndIgnite(inst)\n\n    -- Add light\n    inst:AddComponent("lighttweener")\n    inst.components.lighttweener:StartTween(\n        inst.entity:AddLight(),\n        0, -- start_radius\n        0.8, -- end_radius\n        nil, -- start_intensity\n        0.6, -- end_intensity\n        nil, -- start_falloff\n        nil, -- end_falloff\n        nil, -- duration\n        {1/255*130, 1/255*200, 1/255*255} -- color\n    )\n\n    return inst\nend\n\nreturn Prefab("crystal_tree", fn, assets, prefabs)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"scriptsprefabscrystal_rocklua",children:"scripts/prefabs/crystal_rock.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/crystal_rock.zip"),\n    Asset("MINIMAP_IMAGE", "crystal_rock"),\n}\n\nlocal prefabs = {\n    "crystal_shard",\n    "rocks",\n}\n\nlocal function OnMined(inst, worker, workleft)\n    if workleft <= 0 then\n        inst.components.lootdropper:DropLoot()\n        SpawnPrefab("rock_break_fx").Transform:SetPosition(inst.Transform:GetWorldPosition())\n        inst:Remove()\n    else\n        inst.AnimState:PlayAnimation("hit")\n        inst.AnimState:PushAnimation("idle")\n    end\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    inst.entity:AddMiniMapEntity()\n\n    inst.MiniMapEntity:SetIcon("crystal_rock.tex")\n\n    MakeObstaclePhysics(inst, 0.5)\n\n    inst.AnimState:SetBank("crystal_rock")\n    inst.AnimState:SetBuild("crystal_rock")\n    inst.AnimState:PlayAnimation("idle")\n    \n    inst:AddTag("boulder")\n    inst:AddTag("crystal")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    inst:AddComponent("inspectable")\n    \n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.MINE)\n    inst.components.workable:SetWorkLeft(3)\n    inst.components.workable:SetOnWorkCallback(OnMined)\n\n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("crystal_shard", 1.0)\n    inst.components.lootdropper:AddRandomLoot("rocks", 0.5)\n    inst.components.lootdropper:SetLootSetupFn(function(inst)\n        inst.components.lootdropper.numrandomloot = math.random(1, 3)\n    end)\n\n    MakeHauntableWorkAndIgnite(inst)\n\n    -- Add light\n    inst:AddComponent("lighttweener")\n    inst.components.lighttweener:StartTween(\n        inst.entity:AddLight(),\n        0, -- start_radius\n        0.6, -- end_radius\n        nil, -- start_intensity\n        0.5, -- end_intensity\n        nil, -- start_falloff\n        nil, -- end_falloff\n        nil, -- duration\n        {1/255*130, 1/255*200, 1/255*255} -- color\n    )\n\n    return inst\nend\n\nreturn Prefab("crystal_rock", fn, assets, prefabs)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"scriptsprefabscrystal_deerlua",children:"scripts/prefabs/crystal_deer.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/crystal_deer.zip"),\n}\n\nlocal prefabs = {\n    "crystal_shard",\n    "meat",\n}\n\nlocal brain = require "brains/crystal_deer_brain"\n\nlocal function OnAttacked(inst, data)\n    inst.components.combat:SetTarget(data.attacker)\n    inst.components.combat:ShareTarget(data.attacker, 30, function(dude)\n        return dude:HasTag("crystal_deer") and not dude:HasTag("player")\n    end, 5)\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n\n    MakeCharacterPhysics(inst, 100, 0.5)\n\n    inst.DynamicShadow:SetSize(1.5, 0.75)\n    inst.Transform:SetSixFaced()\n\n    inst.AnimState:SetBank("crystal_deer")\n    inst.AnimState:SetBuild("crystal_deer")\n    inst.AnimState:PlayAnimation("idle", true)\n    \n    inst:AddTag("animal")\n    inst:AddTag("crystal_deer")\n    inst:AddTag("crystal")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    inst:AddComponent("inspectable")\n    \n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(150)\n\n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(20)\n    inst.components.combat:SetAttackPeriod(2)\n    inst.components.combat:SetRetargetFunction(3, function(inst)\n        return FindEntity(\n            inst,\n            20,\n            function(guy)\n                return inst.components.combat:CanTarget(guy)\n            end,\n            nil,\n            nil,\n            {"crystal", "wall"}\n        )\n    end)\n\n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("meat", 1.0)\n    inst.components.lootdropper:AddRandomLoot("crystal_shard", 1.0)\n    inst.components.lootdropper:SetLootSetupFn(function(inst)\n        inst.components.lootdropper.numrandomloot = math.random(1, 3)\n    end)\n\n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 4\n    inst.components.locomotor.runspeed = 7\n\n    inst:SetStateGraph("SGdeer")\n    inst:SetBrain(brain)\n\n    inst:ListenForEvent("attacked", OnAttacked)\n\n    -- Add light\n    inst:AddComponent("lighttweener")\n    inst.components.lighttweener:StartTween(\n        inst.entity:AddLight(),\n        0, -- start_radius\n        0.7, -- end_radius\n        nil, -- start_intensity\n        0.5, -- end_intensity\n        nil, -- start_falloff\n        nil, -- end_falloff\n        nil, -- duration\n        {1/255*130, 1/255*200, 1/255*255} -- color\n    )\n\n    MakeHauntablePanic(inst)\n\n    return inst\nend\n\nreturn Prefab("crystal_deer", fn, assets, prefabs)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"step-5-creating-the-crystal-shard-item",children:"Step 5: Creating the Crystal Shard Item"}),"\n",(0,r.jsx)(e.p,{children:"Now let's create the crystal shard item that will be harvested from our biome:"}),"\n",(0,r.jsx)(e.h3,{id:"scriptsprefabscrystal_shardlua",children:"scripts/prefabs/crystal_shard.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/crystal_shard.zip"),\n    Asset("ATLAS", "images/inventoryimages/crystal_shard.xml"),\n    Asset("IMAGE", "images/inventoryimages/crystal_shard.tex"),\n}\n\nlocal function light_on(inst)\n    if not inst.components.inventoryitem:IsHeld() then\n        inst.components.lighttweener:StartTween(\n            inst.entity:AddLight(),\n            0, -- start_radius\n            0.5, -- end_radius\n            nil, -- start_intensity\n            0.5, -- end_intensity\n            nil, -- start_falloff\n            nil, -- end_falloff\n            nil, -- duration\n            {1/255*130, 1/255*200, 1/255*255} -- color\n        )\n    end\nend\n\nlocal function light_off(inst)\n    inst.components.lighttweener:StartTween(\n        inst.entity:AddLight(),\n        0.5, -- start_radius\n        0, -- end_radius\n        0.5, -- start_intensity\n        0, -- end_intensity\n        nil, -- start_falloff\n        nil, -- end_falloff\n        nil, -- duration\n        {1/255*130, 1/255*200, 1/255*255} -- color\n    )\nend\n\nlocal function OnDropped(inst)\n    light_on(inst)\nend\n\nlocal function OnPickup(inst)\n    light_off(inst)\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    MakeInventoryPhysics(inst)\n\n    inst.AnimState:SetBank("crystal_shard")\n    inst.AnimState:SetBuild("crystal_shard")\n    inst.AnimState:PlayAnimation("idle")\n    \n    inst:AddTag("crystal")\n    inst:AddTag("molebait")\n    inst:AddTag("shiny")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    inst:AddComponent("inspectable")\n    \n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/crystal_shard.xml"\n    inst.components.inventoryitem:SetOnDroppedFn(OnDropped)\n    inst.components.inventoryitem:SetOnPickupFn(OnPickup)\n\n    inst:AddComponent("stackable")\n    inst.components.stackable.maxsize = 40\n\n    inst:AddComponent("lighttweener")\n    light_on(inst)\n\n    -- Add recipe for crystal tools\n    MakeHauntableLaunch(inst)\n\n    return inst\nend\n\nreturn Prefab("crystal_shard", fn, assets)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"step-6-creating-the-ground-textures",children:"Step 6: Creating the Ground Textures"}),"\n",(0,r.jsx)(e.p,{children:"For the biome to have a unique appearance, we need to create custom ground textures:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Create ",(0,r.jsx)(e.code,{children:"levels/textures/crystal_ground.tex"})," - This is the base texture for the ground"]}),"\n",(0,r.jsxs)(e.li,{children:["Create ",(0,r.jsx)(e.code,{children:"levels/textures/crystal_noise.tex"})," - This is the noise texture that adds variation"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"You'll need to use an image editor to create these textures, then convert them to the game's format using the Don't Starve Tools."}),"\n",(0,r.jsx)(e.h2,{id:"step-7-creating-the-crystal-deer-brain",children:"Step 7: Creating the Crystal Deer Brain"}),"\n",(0,r.jsx)(e.p,{children:"Let's create a simple AI for our crystal deer:"}),"\n",(0,r.jsx)(e.h3,{id:"scriptsbrainscrystal_deer_brainlua",children:"scripts/brains/crystal_deer_brain.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'require "behaviours/wander"\nrequire "behaviours/runaway"\nrequire "behaviours/doaction"\nrequire "behaviours/panic"\n\nlocal CrystalDeerBrain = Class(Brain, function(self, inst)\n    Brain._ctor(self, inst)\nend)\n\nlocal MIN_FOLLOW_DIST = 5\nlocal TARGET_FOLLOW_DIST = 7\nlocal MAX_FOLLOW_DIST = 10\nlocal WANDER_DIST = 20\n\nlocal function GetFaceTargetFn(inst)\n    return inst.components.combat.target\nend\n\nlocal function KeepFaceTargetFn(inst, target)\n    return inst.components.combat:TargetIs(target) and \n           inst.components.combat:InCooldown()\nend\n\nfunction CrystalDeerBrain:OnStart()\n    local root = PriorityNode(\n    {\n        WhileNode(function() return self.inst.components.health.takingfiredamage end, "OnFire", Panic(self.inst)),\n        \n        ChaseAndAttack(self.inst, 10),\n        \n        RunAway(self.inst, "player", MIN_FOLLOW_DIST, TARGET_FOLLOW_DIST, function(hunter) \n            return hunter:HasTag("player") and not hunter:HasTag("notarget") \n        end, nil, true),\n        \n        FaceEntity(self.inst, GetFaceTargetFn, KeepFaceTargetFn),\n        \n        Wander(self.inst, function() \n            local pos = self.inst:GetPosition()\n            return pos\n        end, WANDER_DIST)\n    }, .25)\n    \n    self.bt = BT(self.inst, root)\nend\n\nreturn CrystalDeerBrain\n'})}),"\n",(0,r.jsx)(e.h2,{id:"step-8-adding-recipes-for-crystal-items",children:"Step 8: Adding Recipes for Crystal Items"}),"\n",(0,r.jsx)(e.p,{children:"Let's add some recipes to make use of the crystal shards:"}),"\n",(0,r.jsx)(e.h3,{id:"add-to-modmainlua",children:"Add to modmain.lua"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Add recipes for crystal items\nlocal crystal_axe = Recipe("crystal_axe", \n    {Ingredient("twigs", 2), Ingredient("crystal_shard", 3)}, \n    RECIPETABS.TOOLS, \n    TECH.SCIENCE_ONE)\ncrystal_axe.atlas = "images/inventoryimages/crystal_axe.xml"\n\nlocal crystal_pickaxe = Recipe("crystal_pickaxe", \n    {Ingredient("twigs", 2), Ingredient("crystal_shard", 3)}, \n    RECIPETABS.TOOLS, \n    TECH.SCIENCE_ONE)\ncrystal_pickaxe.atlas = "images/inventoryimages/crystal_pickaxe.xml"\n\nlocal crystal_spear = Recipe("crystal_spear", \n    {Ingredient("twigs", 2), Ingredient("crystal_shard", 2), Ingredient("rope", 1)}, \n    RECIPETABS.WAR, \n    TECH.SCIENCE_ONE)\ncrystal_spear.atlas = "images/inventoryimages/crystal_spear.xml"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"step-9-testing-and-debugging",children:"Step 9: Testing and Debugging"}),"\n",(0,r.jsx)(e.p,{children:"To test your mod:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Place your mod folder in the Don't Starve Together mods directory"}),"\n",(0,r.jsx)(e.li,{children:"Enable the mod in the game's mod menu"}),"\n",(0,r.jsx)(e.li,{children:"Start a new game and explore to find your Crystal Forest biome"}),"\n",(0,r.jsx)(e.li,{children:"Test the various features of your biome"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Biome Not Generating"}),": Check your task and room definitions"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Missing Textures"}),": Ensure all texture files are in the correct format and location"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Prefab Errors"}),": Check for syntax errors in your prefab definitions"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"AI Issues"}),": Debug your brain logic if creatures behave unexpectedly"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"step-10-publishing-your-mod",children:"Step 10: Publishing Your Mod"}),"\n",(0,r.jsx)(e.p,{children:"Once your mod is working correctly, you can publish it to the Steam Workshop:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Create a ",(0,r.jsx)(e.code,{children:"modicon.tex"})," and ",(0,r.jsx)(e.code,{children:"modicon.xml"})," (512x512 pixels) for your mod"]}),"\n",(0,r.jsx)(e.li,{children:"Update your modinfo.lua with a detailed description"}),"\n",(0,r.jsx)(e.li,{children:"Use the in-game mod uploader or the Don't Starve Mod Tools on Steam"}),"\n",(0,r.jsx)(e.li,{children:"Provide clear instructions and screenshots in your Workshop description"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"extending-the-mod",children:"Extending the Mod"}),"\n",(0,r.jsx)(e.p,{children:"Here are some ideas for extending this mod:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Add more crystal-themed creatures"}),"\n",(0,r.jsx)(e.li,{children:"Create special weather effects in the biome"}),"\n",(0,r.jsx)(e.li,{children:"Add unique gameplay mechanics tied to the crystal theme"}),"\n",(0,r.jsx)(e.li,{children:"Create a crystal-themed boss"}),"\n",(0,r.jsx)(e.li,{children:"Add special events that only occur in the Crystal Forest"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(e.p,{children:"Congratulations! You've created a complete mod that adds a new biome to Don't Starve Together. This project demonstrates many important modding concepts:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"World generation and room creation"}),"\n",(0,r.jsx)(e.li,{children:"Custom ground textures"}),"\n",(0,r.jsx)(e.li,{children:"Creating unique resources and creatures"}),"\n",(0,r.jsx)(e.li,{children:"AI programming"}),"\n",(0,r.jsx)(e.li,{children:"Integrating with the existing game systems"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Use what you've learned here as a foundation for creating more complex world modifications in the future!"})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);