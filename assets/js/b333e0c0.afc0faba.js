"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8810],{8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var i=t(6540);const a={},s=i.createContext(a);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),i.createElement(s.Provider,{value:e},n.children)}},8682:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/examples/snippets/prefab-snippets","title":"Prefab Snippets","description":"This page provides reusable code snippets for creating and customizing prefabs in Don\'t Starve Together mods.","source":"@site/docs/api-vanilla/examples/snippets/prefab-snippets.md","sourceDirName":"api-vanilla/examples/snippets","slug":"/api-vanilla/examples/snippets/prefab-snippets","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/prefab-snippets","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"prefab-snippets","title":"Prefab Snippets","sidebar_position":7},"sidebar":"docs","previous":{"title":"Animation Snippets","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/animation-snippets"}}');var a=t(4848),s=t(8453);const o={id:"prefab-snippets",title:"Prefab Snippets",sidebar_position:7},r="Prefab Snippets",c={},d=[{value:"Basic Prefab Structure",id:"basic-prefab-structure",level:2},{value:"Simple Item Prefab",id:"simple-item-prefab",level:3},{value:"Character Prefab",id:"character-prefab",level:3},{value:"Specialized Prefab Types",id:"specialized-prefab-types",level:2},{value:"Tool Prefab",id:"tool-prefab",level:3},{value:"Food Prefab",id:"food-prefab",level:3},{value:"Structure Prefab",id:"structure-prefab",level:3},{value:"Advanced Prefab Techniques",id:"advanced-prefab-techniques",level:2},{value:"Prefab with Custom Actions",id:"prefab-with-custom-actions",level:3},{value:"Prefab with State Graph",id:"prefab-with-state-graph",level:3},{value:"Prefab with Network Replication",id:"prefab-with-network-replication",level:3}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"prefab-snippets",children:"Prefab Snippets"})}),"\n",(0,a.jsx)(e.p,{children:"This page provides reusable code snippets for creating and customizing prefabs in Don't Starve Together mods."}),"\n",(0,a.jsx)(e.h2,{id:"basic-prefab-structure",children:"Basic Prefab Structure"}),"\n",(0,a.jsx)(e.h3,{id:"simple-item-prefab",children:"Simple Item Prefab"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Define a simple item prefab\nlocal assets = {\n    Asset("ANIM", "anim/my_item.zip"),\n}\n\nlocal function fn()\n    -- Create the entity\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Set up visuals\n    MakeInventoryPhysics(inst)\n    \n    inst.AnimState:SetBank("my_item")\n    inst.AnimState:SetBuild("my_item")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add tags\n    inst:AddTag("item")\n    \n    -- Make it inspectable\n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Server-only components\n    inst:AddComponent("inspectable")\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "my_item"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/my_item.xml"\n    \n    -- Make it stackable\n    inst:AddComponent("stackable")\n    inst.components.stackable.maxsize = 20\n    \n    -- Add other components as needed\n    \n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("my_item", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"character-prefab",children:"Character Prefab"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Define a character prefab\nlocal assets = {\n    Asset("ANIM", "anim/my_character.zip"),\n    Asset("ANIM", "anim/ghost_my_character_build.zip"),\n}\n\nlocal prefabs = {\n    "my_character_none",\n}\n\n-- Custom starting inventory\nlocal start_inv = {\n    "flint",\n    "flint",\n    "twigs",\n    "twigs",\n}\n\n-- Custom stats\nlocal stats = {\n    health = 150,\n    hunger = 150,\n    sanity = 200,\n}\n\nlocal function common_postinit(inst)\n    -- Minimap icon\n    inst.MiniMapEntity:SetIcon("my_character.tex")\n    \n    -- Tags\n    inst:AddTag("my_character_tag")\n    \n    -- Voice\n    inst.soundsname = "wilson"\nend\n\nlocal function master_postinit(inst)\n    -- Choose character starting items\n    inst.starting_inventory = start_inv\n    \n    -- Set custom stats\n    inst.components.health:SetMaxHealth(stats.health)\n    inst.components.hunger:SetMax(stats.hunger)\n    inst.components.sanity:SetMax(stats.sanity)\n    \n    -- Set character-specific component values\n    inst.components.combat.damagemultiplier = 1.0\n    inst.components.locomotor.walkspeed = 4\n    inst.components.locomotor.runspeed = 6\n    \n    -- Add custom component\n    inst:AddComponent("my_special_component")\n    \n    -- Set up character-specific abilities\n    inst:ListenForEvent("ms_becameghost", function(inst)\n        -- Do something when character dies\n    end)\nend\n\n-- Register the character prefab\nreturn MakePlayerCharacter("my_character", prefabs, assets, common_postinit, master_postinit)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"specialized-prefab-types",children:"Specialized Prefab Types"}),"\n",(0,a.jsx)(e.h3,{id:"tool-prefab",children:"Tool Prefab"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Define a tool prefab\nlocal assets = {\n    Asset("ANIM", "anim/my_tool.zip"),\n    Asset("ANIM", "anim/swap_my_tool.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    MakeInventoryPhysics(inst)\n    \n    inst.AnimState:SetBank("my_tool")\n    inst.AnimState:SetBuild("my_tool")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add tool tag for actions\n    inst:AddTag("tool")\n    \n    -- If it can chop trees\n    inst:AddTag("CHOP_tool")\n    \n    -- If it can mine rocks\n    inst:AddTag("MINE_tool")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Basic components\n    inst:AddComponent("inspectable")\n    inst:AddComponent("inventoryitem")\n    \n    -- Make it equippable\n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(function(inst, owner)\n        owner.AnimState:OverrideSymbol("swap_object", "swap_my_tool", "swap_my_tool")\n        owner.AnimState:Show("ARM_carry")\n        owner.AnimState:Hide("ARM_normal")\n    end)\n    \n    inst.components.equippable:SetOnUnequip(function(inst, owner)\n        owner.AnimState:Hide("ARM_carry")\n        owner.AnimState:Show("ARM_normal")\n    end)\n    \n    -- Add tool component\n    inst:AddComponent("tool")\n    inst.components.tool:SetAction(ACTIONS.CHOP, 1.5) -- 1.5x chop efficiency\n    inst.components.tool:SetAction(ACTIONS.MINE, 1.2) -- 1.2x mine efficiency\n    \n    -- Add weapon component\n    inst:AddComponent("weapon")\n    inst.components.weapon:SetDamage(TUNING.AXE_DAMAGE)\n    \n    -- Add finite uses\n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(100)\n    inst.components.finiteuses:SetUses(100)\n    inst.components.finiteuses:SetOnFinished(function(inst)\n        inst:Remove()\n    end)\n    \n    -- Connect tool actions to durability loss\n    inst.components.finiteuses:SetConsumption(ACTIONS.CHOP, 1)\n    inst.components.finiteuses:SetConsumption(ACTIONS.MINE, 1.25)\n    \n    return inst\nend\n\nreturn Prefab("my_tool", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"food-prefab",children:"Food Prefab"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Define a food prefab\nlocal assets = {\n    Asset("ANIM", "anim/my_food.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    MakeInventoryPhysics(inst)\n    \n    inst.AnimState:SetBank("my_food")\n    inst.AnimState:SetBuild("my_food")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add food tag\n    inst:AddTag("preparedfood")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Basic components\n    inst:AddComponent("inspectable")\n    inst:AddComponent("inventoryitem")\n    \n    -- Make it edible\n    inst:AddComponent("edible")\n    inst.components.edible.healthvalue = 20\n    inst.components.edible.hungervalue = 37.5\n    inst.components.edible.sanityvalue = 15\n    inst.components.edible.foodtype = FOODTYPE.VEGGIE\n    \n    -- Special effect when eaten\n    inst.components.edible:SetOnEatenFn(function(inst, eater)\n        if eater.components.temperature ~= nil then\n            -- Cool down the eater\n            eater.components.temperature:SetTemperature(eater.components.temperature:GetCurrent() - 10)\n        end\n    end)\n    \n    -- Make it perishable\n    inst:AddComponent("perishable")\n    inst.components.perishable:SetPerishTime(TUNING.PERISH_MED)\n    inst.components.perishable:StartPerishing()\n    inst.components.perishable.onperishreplacement = "spoiled_food"\n    \n    -- Make it stackable\n    inst:AddComponent("stackable")\n    inst.components.stackable.maxsize = 10\n    \n    return inst\nend\n\nreturn Prefab("my_food", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"structure-prefab",children:"Structure Prefab"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Define a structure prefab\nlocal assets = {\n    Asset("ANIM", "anim/my_structure.zip"),\n}\n\nlocal prefabs = {\n    "collapse_small",\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    -- Make it a structure\n    inst:AddTag("structure")\n    \n    -- Set up visuals\n    inst.AnimState:SetBank("my_structure")\n    inst.AnimState:SetBuild("my_structure")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add minimap icon\n    inst.entity:AddMiniMapEntity()\n    inst.MiniMapEntity:SetIcon("my_structure.tex")\n    \n    -- Make it collidable\n    MakeObstaclePhysics(inst, 0.5)\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Basic components\n    inst:AddComponent("inspectable")\n    \n    -- Make it workable (can be hammered)\n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.HAMMER)\n    inst.components.workable:SetWorkLeft(4)\n    inst.components.workable:SetOnFinishCallback(function(inst, worker)\n        -- Play destruction effects\n        inst.components.lootdropper:DropLoot()\n        \n        local fx = SpawnPrefab("collapse_small")\n        fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n        fx:SetMaterial("wood")\n        \n        inst:Remove()\n    end)\n    \n    -- Make it drop loot when destroyed\n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:SetLoot({"boards", "boards", "twigs"})\n    \n    -- Make it burnable\n    MakeSmallBurnable(inst, TUNING.MED_BURNTIME)\n    MakeSmallPropagator(inst)\n    \n    -- Make it saveable\n    inst:AddComponent("hauntable")\n    inst.components.hauntable:SetHauntValue(TUNING.HAUNT_TINY)\n    \n    return inst\nend\n\nreturn Prefab("my_structure", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"advanced-prefab-techniques",children:"Advanced Prefab Techniques"}),"\n",(0,a.jsx)(e.h3,{id:"prefab-with-custom-actions",children:"Prefab with Custom Actions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Define a prefab with custom actions\nlocal assets = {\n    Asset("ANIM", "anim/my_special_item.zip"),\n}\n\n-- Define the custom action in modmain.lua\n--[[\nlocal MYACTION = Action({priority=10, mount_valid=true})\nMYACTION.str = "Activate"\nMYACTION.id = "MYACTION"\nMYACTION.fn = function(act)\n    if act.target and act.target.components.myactionable then\n        return act.target.components.myactionable:DoMyAction(act.doer)\n    end\n    return false\nend\n\n-- Add the action to the component action handler\nAddComponentAction("SCENE", "myactionable", function(inst, doer, actions, right)\n    if right and inst:HasTag("myactionable") then\n        table.insert(actions, ACTIONS.MYACTION)\n    end\nend)\n]]--\n\n-- Create a component for the action\nlocal MyActionable = Class(function(self, inst)\n    self.inst = inst\n    self.uses = 10\n    \n    -- Add tag for action filtering\n    inst:AddTag("myactionable")\nend)\n\nfunction MyActionable:DoMyAction(doer)\n    if self.uses <= 0 then\n        return false\n    end\n    \n    -- Do something when action is performed\n    self.uses = self.uses - 1\n    \n    -- Create some effect\n    local fx = SpawnPrefab("sparkle")\n    fx.Transform:SetPosition(self.inst.Transform:GetWorldPosition())\n    \n    -- Maybe give the user something\n    if doer.components.inventory then\n        local reward = SpawnPrefab("goldnugget")\n        doer.components.inventory:GiveItem(reward)\n    end\n    \n    -- Remove the item when uses are depleted\n    if self.uses <= 0 then\n        self.inst:Remove()\n    end\n    \n    return true\nend\n\n-- Save/load\nfunction MyActionable:OnSave()\n    return {uses = self.uses}\nend\n\nfunction MyActionable:OnLoad(data)\n    if data and data.uses then\n        self.uses = data.uses\n    end\nend\n\n-- Prefab function\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    MakeInventoryPhysics(inst)\n    \n    inst.AnimState:SetBank("my_special_item")\n    inst.AnimState:SetBuild("my_special_item")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add tag for the action\n    inst:AddTag("myactionable")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Basic components\n    inst:AddComponent("inspectable")\n    inst:AddComponent("inventoryitem")\n    \n    -- Add our custom component\n    inst:AddComponent("myactionable")\n    \n    return inst\nend\n\nreturn Prefab("my_special_item", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"prefab-with-state-graph",children:"Prefab with State Graph"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Define a prefab with a state graph\nlocal assets = {\n    Asset("ANIM", "anim/my_creature.zip"),\n}\n\nlocal prefabs = {\n    "meat",\n}\n\n-- Create a brain for AI behavior\nlocal brain = require "brains/my_creature_brain"\n\n-- Create state graph for the creature\nlocal states = {\n    State {\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle_loop", true)\n            inst.Physics:Stop()\n        end,\n    },\n    \n    State {\n        name = "walk",\n        tags = {"moving", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("walk_loop", true)\n        end,\n    },\n    \n    State {\n        name = "attack",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("attack")\n            inst.components.combat:StartAttack()\n        end,\n        \n        timeline = {\n            TimeEvent(15*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/my_creature/attack")\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n    \n    -- Set up physics\n    MakeCharacterPhysics(inst, 50, 0.5)\n    \n    -- Set up animations\n    inst.AnimState:SetBank("my_creature")\n    inst.AnimState:SetBuild("my_creature")\n    inst.AnimState:PlayAnimation("idle_loop", true)\n    \n    -- Add tags\n    inst:AddTag("monster")\n    inst:AddTag("hostile")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add components\n    inst:AddComponent("inspectable")\n    \n    -- Add locomotion\n    inst:AddComponent("locomotor")\n    inst.components.locomotor.walkspeed = 3\n    inst.components.locomotor.runspeed = 5\n    \n    -- Add combat\n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(20)\n    inst.components.combat:SetAttackPeriod(2)\n    inst.components.combat:SetRange(2, 3)\n    \n    -- Add health\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(200)\n    \n    -- Add loot\n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:SetLoot({"meat", "meat"})\n    \n    -- Set up state graph\n    inst:SetStateGraph("SGmy_creature")\n    \n    -- Set up AI brain\n    inst:SetBrain(brain)\n    \n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("my_creature", fn, assets, prefabs)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"prefab-with-network-replication",children:"Prefab with Network Replication"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Define a prefab with network replication\nlocal assets = {\n    Asset("ANIM", "anim/my_networked_item.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    MakeInventoryPhysics(inst)\n    \n    inst.AnimState:SetBank("my_networked_item")\n    inst.AnimState:SetBuild("my_networked_item")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add network variables\n    inst.charge_level = net_byte(inst.GUID, "my_networked_item.charge", "chargedirty")\n    inst.active = net_bool(inst.GUID, "my_networked_item.active", "activedirty")\n    \n    -- Initialize network values\n    inst.charge_level:set(5)\n    inst.active:set(false)\n    \n    -- Add client-side handlers\n    inst:ListenForEvent("chargedirty", function()\n        -- Update visual based on charge level\n        local charge = inst.charge_level:value()\n        inst.AnimState:OverrideSymbol("meter", "my_networked_item", "meter_" .. charge)\n    end)\n    \n    inst:ListenForEvent("activedirty", function()\n        -- Update visual based on active state\n        if inst.active:value() then\n            inst.AnimState:PlayAnimation("active_loop", true)\n        else\n            inst.AnimState:PlayAnimation("idle")\n        end\n    end)\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Server-side components\n    inst:AddComponent("inspectable")\n    inst:AddComponent("inventoryitem")\n    \n    -- Add custom component to manage charge\n    inst:AddComponent("mychargeableitem")\n    inst.components.mychargeableitem.onchargechanged = function(charge)\n        inst.charge_level:set(charge)\n    end\n    \n    inst.components.mychargeableitem.onactivated = function(active)\n        inst.active:set(active)\n    end\n    \n    return inst\nend\n\nreturn Prefab("my_networked_item", fn, assets)\n'})}),"\n",(0,a.jsx)(e.p,{children:"These snippets demonstrate various prefab creation techniques for Don't Starve Together modding. Adapt them to your specific needs when creating custom items, characters, creatures, or structures."})]})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}}}]);