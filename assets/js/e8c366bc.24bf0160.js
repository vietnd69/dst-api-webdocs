"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2043],{16763:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"game-scripts/core-systems/development-tools/utilities/dumper","title":"Data Dumper","description":"Advanced Lua data serialization utility for converting complex data structures to executable Lua code","source":"@site/docs/game-scripts/core-systems/development-tools/utilities/dumper.md","sourceDirName":"game-scripts/core-systems/development-tools/utilities","slug":"/game-scripts/core-systems/development-tools/utilities/dumper","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/utilities/dumper","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"dumper","title":"Data Dumper","description":"Advanced Lua data serialization utility for converting complex data structures to executable Lua code","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Development Utilities Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/utilities/"},"next":{"title":"Fix Character Strings","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/utilities/fix-character-strings"}}');var i=r(74848),l=r(28453);const s={id:"dumper",title:"Data Dumper",description:"Advanced Lua data serialization utility for converting complex data structures to executable Lua code",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Data Dumper",d={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Core Functions",id:"core-functions",level:2},{value:"DataDumper(value, varname, fastmode, ident)",id:"datadumper",level:3},{value:"Configuration Variables",id:"configuration-variables",level:2},{value:"USE_SAVEBUFFER",id:"use_savebuffer",level:3},{value:"Internal Data Structures",id:"internal-data-structures",level:2},{value:"lua_reserved_keywords",id:"lua_reserved_keywords",level:3},{value:"c_functions",id:"c_functions",level:3},{value:"Data Type Handlers",id:"data-type-handlers",level:2},{value:"String Handler",id:"string-handler",level:3},{value:"Number Handler",id:"number-handler",level:3},{value:"Boolean Handler",id:"boolean-handler",level:3},{value:"Function Handler",id:"function-handler",level:3},{value:"Table Handler",id:"table-handler",level:3},{value:"Userdata Handler",id:"userdata-handler",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Closure Serialization",id:"closure-serialization",level:3},{value:"Metatable Preservation",id:"metatable-preservation",level:3},{value:"Circular Reference Handling",id:"circular-reference-handling",level:3},{value:"Performance Modes",id:"performance-modes",level:2},{value:"Fast Mode (<code>fastmode = true</code>)",id:"fast-mode-fastmode--true",level:3},{value:"Normal Mode (<code>fastmode = false</code>)",id:"normal-mode-fastmode--false",level:3},{value:"Memory Optimization",id:"memory-optimization",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Integration with Save System",id:"integration-with-save-system",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"data-dumper",children:"Data Dumper"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"dumper"})," module provides advanced Lua data serialization capabilities, converting complex data structures into executable Lua code. It supports all Lua data types, handles circular references, preserves metatables, and includes optimizations for memory usage and performance."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Simple data dumping\nlocal data = {name = "Wilson", health = 100, items = {"axe", "torch"}}\nlocal lua_code = DataDumper(data, "player_data")\n\n-- Fast mode for performance\nlocal fast_dump = DataDumper(large_table, "big_data", true)\n\n-- Load dumped data\nlocal restored_data = loadstring(lua_code)()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,i.jsx)(n.h3,{id:"datadumper",children:"DataDumper(value, varname, fastmode, ident)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSerializes a Lua value into executable Lua code that can recreate the original data structure."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," (any): The value to serialize"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"varname"}),' (string): Variable name for the output (defaults to "return ")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fastmode"})," (boolean): Enable fast mode for better performance (optional)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ident"})," (number): Initial indentation level (optional, defaults to 0)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(string): Executable Lua code that recreates the original value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Features:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Supports all Lua data types"}),"\n",(0,i.jsx)(n.li,{children:"Handles circular references"}),"\n",(0,i.jsx)(n.li,{children:"Preserves metatables (in normal mode)"}),"\n",(0,i.jsx)(n.li,{children:"Optimized memory usage with save buffer"}),"\n",(0,i.jsx)(n.li,{children:"Function serialization with closures"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Basic usage\nlocal simple_data = {x = 10, y = 20}\nlocal code = DataDumper(simple_data, "position")\nprint(code)\n-- Output: position = {x=10,y=20}\n\n-- Complex nested structure\nlocal complex_data = {\n    player = {\n        name = "Wilson",\n        stats = {health = 100, hunger = 75},\n        inventory = {"axe", "torch", "berries"}\n    },\n    world = {\n        day = 15,\n        season = "autumn"\n    }\n}\n\nlocal serialized = DataDumper(complex_data, "game_state")\nlocal restored = loadstring(serialized)()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-variables",children:"Configuration Variables"}),"\n",(0,i.jsx)(n.h3,{id:"use_savebuffer",children:"USE_SAVEBUFFER"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," ",(0,i.jsx)(n.code,{children:"boolean"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nControls whether to use the save buffer system for memory optimization. Automatically enabled when ",(0,i.jsx)(n.code,{children:"MAIN == 1"})," or ",(0,i.jsx)(n.code,{children:"WORLDGEN_MAIN == 1"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reduces memory spikes during serialization"}),"\n",(0,i.jsxs)(n.li,{children:["Uses ",(0,i.jsx)(n.code,{children:"TheSim"})," or ",(0,i.jsx)(n.code,{children:"WorldSim"})," buffer functions"]}),"\n",(0,i.jsx)(n.li,{children:"Only active in fast mode"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"internal-data-structures",children:"Internal Data Structures"}),"\n",(0,i.jsx)(n.h3,{id:"lua_reserved_keywords",children:"lua_reserved_keywords"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," ",(0,i.jsx)(n.code,{children:"table"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nArray of Lua reserved keywords that require special handling during key serialization."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Contents:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"{'and', 'break', 'do', 'else', 'elseif', 'end', 'false', 'for',\n'function', 'if', 'in', 'local', 'nil', 'not', 'or', 'repeat',\n'return', 'then', 'true', 'until', 'while'}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"c_functions",children:"c_functions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," ",(0,i.jsx)(n.code,{children:"table"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nLookup table mapping C functions to their string representations for proper serialization."]}),"\n",(0,i.jsx)(n.h2,{id:"data-type-handlers",children:"Data Type Handlers"}),"\n",(0,i.jsx)(n.p,{children:"The module includes specialized handlers for each Lua data type:"}),"\n",(0,i.jsx)(n.h3,{id:"string-handler",children:"String Handler"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"string = function(value) \n    return string.format('%q', value) \nend\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Properly escapes special characters"}),"\n",(0,i.jsx)(n.li,{children:"Handles multi-line strings"}),"\n",(0,i.jsx)(n.li,{children:"Unicode support"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"number-handler",children:"Number Handler"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"number = function(value) \n    return value \nend\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Direct numeric representation"}),"\n",(0,i.jsx)(n.li,{children:"Preserves precision"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"boolean-handler",children:"Boolean Handler"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"boolean = function(value) \n    return tostring(value) \nend\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Converts to "true" or "false" strings'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"function-handler",children:"Function Handler"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Normal Mode"}),": Handles closures with upvalues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Mode"}),": Simple ",(0,i.jsx)(n.code,{children:"loadstring"})," serialization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"C Functions"}),": Uses predefined string representations"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"table-handler",children:"Table Handler"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Circular Reference Detection"}),": Prevents infinite loops"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metatable Preservation"}),": Includes ",(0,i.jsx)(n.code,{children:"setmetatable"})," calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimized Key Handling"}),": Efficient numeric vs string keys"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pretty Printing"}),": Configurable formatting based on content size"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"userdata-handler",children:"Userdata Handler"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'userdata = function(value)\n    error("Cannot dump userdata (" .. tostring(value) .. ")")\nend\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Userdata cannot be serialized"}),"\n",(0,i.jsx)(n.li,{children:"Provides error with context information"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(n.h3,{id:"closure-serialization",children:"Closure Serialization"}),"\n",(0,i.jsx)(n.p,{children:"The module can serialize functions with their upvalues:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function CreateCounter(start)\n    local count = start\n    return function()\n        count = count + 1\n        return count\n    end\nend\n\nlocal counter = CreateCounter(10)\nlocal serialized = DataDumper(counter, "my_counter")\n-- Includes closure restoration code\n'})}),"\n",(0,i.jsx)(n.h3,{id:"metatable-preservation",children:"Metatable Preservation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local mt = {__tostring = function(t) return "Custom:" .. t.value end}\nlocal obj = setmetatable({value = 42}, mt)\n\nlocal code = DataDumper(obj, "custom_obj")\n-- Output includes setmetatable call to restore behavior\n'})}),"\n",(0,i.jsx)(n.h3,{id:"circular-reference-handling",children:"Circular Reference Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local a = {}\nlocal b = {ref_to_a = a}\na.ref_to_b = b\n\nlocal serialized = DataDumper(a, "circular_data")\n-- Properly handles the circular reference\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-modes",children:"Performance Modes"}),"\n",(0,i.jsxs)(n.h3,{id:"fast-mode-fastmode--true",children:["Fast Mode (",(0,i.jsx)(n.code,{children:"fastmode = true"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimized for Speed"}),": Minimal formatting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Efficient"}),": Uses save buffer when available"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simple Functions"}),": Basic function serialization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compact Output"}),": No pretty printing"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"normal-mode-fastmode--false",children:["Normal Mode (",(0,i.jsx)(n.code,{children:"fastmode = false"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Full Features"}),": Complete metatable and closure support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pretty Printing"}),": Readable output with proper indentation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Circular References"}),": Advanced reference tracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debug Support"}),": Better error reporting"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"memory-optimization",children:"Memory Optimization"}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:"USE_SAVEBUFFER"})," is enabled:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Instead of building large strings in memory\nlocal huge_data = GenerateHugeDataSet()\nlocal code = DataDumper(huge_data, "data", true)\n-- Uses incremental buffer writing to reduce memory spikes\n'})}),"\n",(0,i.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Example: Serializing game state\nlocal game_state = {\n    world = {\n        day = 25,\n        season = "winter",\n        temperature = -10,\n        entities = {}\n    },\n    players = {\n        {\n            name = "Wilson",\n            health = 85,\n            hunger = 60,\n            position = {x = 100, y = 0, z = 200},\n            inventory = {\n                {item = "axe", durability = 0.8},\n                {item = "torch", fuel = 0.5},\n                {item = "berries", quantity = 15}\n            }\n        }\n    },\n    settings = {\n        difficulty = "normal",\n        pvp_enabled = false\n    }\n}\n\n-- Add some circular references\ngame_state.world.main_player = game_state.players[1]\ngame_state.players[1].world_ref = game_state.world\n\n-- Serialize with different modes\nprint("=== Fast Mode ===")\nlocal fast_serialized = DataDumper(game_state, "game_state", true)\nprint(fast_serialized)\n\nprint("\\n=== Normal Mode ===")\nlocal normal_serialized = DataDumper(game_state, "game_state", false)\nprint(normal_serialized)\n\n-- Restore and verify\nlocal restored_state = loadstring(normal_serialized)()\nprint("\\nVerification:")\nprint("Original player name:", game_state.players[1].name)\nprint("Restored player name:", restored_state.players[1].name)\nprint("Circular reference intact:", \n      restored_state.world.main_player == restored_state.players[1])\n\n-- Function serialization example\nlocal function CreateValidator(min_value)\n    return function(value)\n        return value >= min_value\n    end\nend\n\nlocal health_validator = CreateValidator(0)\nlocal validator_code = DataDumper(health_validator, "health_check")\nprint("\\nFunction with closure:")\nprint(validator_code)\n\n-- Load and test the function\nlocal restored_validator = loadstring(validator_code)()\nprint("Validator test (-10):", restored_validator(-10))  -- false\nprint("Validator test (50):", restored_validator(50))    -- true\n'})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The module provides specific error handling for unsupported data types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Userdata error with context\nlocal userdata_obj = newproxy()\n-- DataDumper(userdata_obj) -- Error: "Cannot dump userdata"\n\n-- Thread error\nlocal co = coroutine.create(function() end)\n-- DataDumper(co) -- Error: "Cannot dump threads"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-save-system",children:"Integration with Save System"}),"\n",(0,i.jsx)(n.p,{children:"The module integrates with DST's save system through the save buffer:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- When USE_SAVEBUFFER is true and TheSim/WorldSim available\nif USE_SAVEBUFFER and TheSim then\n    -- Uses TheSim:AppendSaveString() for memory efficiency\n    -- Reduces memory allocation during large data serialization\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Mode"}),": Use for large datasets where speed is critical"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Save Buffer"}),": Automatically used when available to reduce memory usage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Circular References"}),": Normal mode handles these but adds overhead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Function Closures"}),": Complex functions increase serialization time"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Userdata"}),": Cannot serialize userdata objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Threads"}),": Coroutines cannot be serialized"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"C Functions"}),": Limited to predefined function mappings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File Handles"}),": IO objects cannot be serialized"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./debugtools.md",children:"Debug Tools"}),": Table inspection utilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./saveindex.md",children:"Save Index"}),": Game save/load system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./json.md",children:"JSON"}),": Alternative serialization format"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../util/",children:"Util"}),": General utility functions"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>t});var a=r(96540);const i={},l=a.createContext(i);function s(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);