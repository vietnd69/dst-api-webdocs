"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[84938],{21310:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"game-scripts/core-systems/game-configuration/settings/game-configuration-settings-overview","title":"Game Configuration Settings Overview","description":"Overview of core configuration systems, global constants, and platform-specific settings in DST API","source":"@site/docs/game-scripts/core-systems/game-configuration/settings/index.md","sourceDirName":"game-scripts/core-systems/game-configuration/settings","slug":"/game-scripts/core-systems/game-configuration/settings/","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"id":"game-configuration-settings-overview","title":"Game Configuration Settings Overview","description":"Overview of core configuration systems, global constants, and platform-specific settings in DST API","sidebar_position":0,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable","category_type":"infrastructure-system","system_scope":"configuration management and global settings"},"sidebar":"docs","previous":{"title":"Game Modes","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/modes/gamemodes"},"next":{"title":"Game Configuration Settings Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/"}}');var t=i(74848),r=i(28453);const a={id:"game-configuration-settings-overview",title:"Game Configuration Settings Overview",description:"Overview of core configuration systems, global constants, and platform-specific settings in DST API",sidebar_position:0,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable",category_type:"infrastructure-system",system_scope:"configuration management and global settings"},o="Game Configuration Settings Overview",l={},c=[{value:"Build Information",id:"build-information",level:2},{value:"System Purpose",id:"system-purpose",level:2},{value:"Key Responsibilities",id:"key-responsibilities",level:3},{value:"System Scope",id:"system-scope",level:3},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"System Components",id:"system-components",level:3},{value:"Data Flow",id:"data-flow",level:3},{value:"Integration Points",id:"integration-points",level:3},{value:"Recent Changes",id:"recent-changes",level:2},{value:"Core Infrastructure Modules",id:"core-infrastructure-modules",level:2},{value:"Platform Configuration",id:"platform-configuration",level:3},{value:"Global Constants",id:"global-constants",level:3},{value:"Game Balance",id:"game-balance",level:3},{value:"Override Systems",id:"override-systems",level:3},{value:"User Settings",id:"user-settings",level:3},{value:"Environmental Configuration",id:"environmental-configuration",level:3},{value:"Global Variable Overrides",id:"global-variable-overrides",level:3},{value:"Common Infrastructure Patterns",id:"common-infrastructure-patterns",level:2},{value:"Platform Configuration Access",id:"platform-configuration-access",level:3},{value:"Tuning System Usage",id:"tuning-system-usage",level:3},{value:"Constants System Integration",id:"constants-system-integration",level:3},{value:"Override System Application",id:"override-system-application",level:3},{value:"Infrastructure Dependencies",id:"infrastructure-dependencies",level:2},{value:"Required Systems",id:"required-systems",level:3},{value:"Optional Systems",id:"optional-systems",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"System Performance",id:"system-performance",level:3},{value:"Resource Usage",id:"resource-usage",level:3},{value:"Scaling Characteristics",id:"scaling-characteristics",level:3},{value:"Development Guidelines",id:"development-guidelines",level:2},{value:"Best Practices",id:"best-practices",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:3},{value:"Testing Strategies",id:"testing-strategies",level:3},{value:"System Integration Patterns",id:"system-integration-patterns",level:2},{value:"With Core Game Systems",id:"with-core-game-systems",level:3},{value:"With Development Workflow",id:"with-development-workflow",level:3},{value:"With User Experience",id:"with-user-experience",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:2},{value:"Key Metrics",id:"key-metrics",level:3},{value:"Optimization Strategies",id:"optimization-strategies",level:3},{value:"Troubleshooting Infrastructure Issues",id:"troubleshooting-infrastructure-issues",level:2},{value:"Common Configuration Problems",id:"common-configuration-problems",level:3},{value:"Debugging Infrastructure",id:"debugging-infrastructure",level:3},{value:"Advanced Infrastructure Features",id:"advanced-infrastructure-features",level:2},{value:"Custom Configuration Development",id:"custom-configuration-development",level:3},{value:"Configuration Migration",id:"configuration-migration",level:3},{value:"Testing and Development Support",id:"testing-and-development-support",level:3},{value:"Future Development Considerations",id:"future-development-considerations",level:2},{value:"Extensibility Design",id:"extensibility-design",level:3},{value:"Integration Planning",id:"integration-planning",level:3},{value:"Related Systems",id:"related-systems",level:2},{value:"Contributing to Infrastructure",id:"contributing-to-infrastructure",level:2},{value:"Adding New Configuration Categories",id:"adding-new-configuration-categories",level:3},{value:"Extending Platform Support",id:"extending-platform-support",level:3},{value:"Modifying Core Constants",id:"modifying-core-constants",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"game-configuration-settings-overview",children:"Game Configuration Settings Overview"})}),"\n",(0,t.jsx)(n.h2,{id:"build-information",children:"Build Information"}),"\n",(0,t.jsxs)(n.p,{children:["Current documentation based on build version: ",(0,t.jsx)(n.strong,{children:"676042"}),"\nLast updated: ",(0,t.jsx)(n.strong,{children:"2025-06-21"})]}),"\n",(0,t.jsx)(n.h2,{id:"system-purpose",children:"System Purpose"}),"\n",(0,t.jsx)(n.p,{children:"The Game Configuration Settings category provides the foundational infrastructure for managing all configuration aspects of Don't Starve Together. These systems establish global constants, handle platform-specific configurations, manage game balance parameters, and provide override mechanisms for testing and customization. They form the technical backbone that enables consistent game behavior across different platforms and deployment scenarios."}),"\n",(0,t.jsx)(n.h3,{id:"key-responsibilities",children:"Key Responsibilities"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Define and manage global game constants and configuration values"}),"\n",(0,t.jsx)(n.li,{children:"Provide platform-specific configuration management and overrides"}),"\n",(0,t.jsx)(n.li,{children:"Handle game balance parameters through the central tuning system"}),"\n",(0,t.jsx)(n.li,{children:"Support testing and debugging through configuration override mechanisms"}),"\n",(0,t.jsx)(n.li,{children:"Manage console settings and user preference persistence"}),"\n",(0,t.jsx)(n.li,{children:"Control fire mechanics and environmental systems configuration"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"system-scope",children:"System Scope"}),"\n",(0,t.jsx)(n.p,{children:"This category includes all configuration infrastructure but excludes high-level game mode management (handled by Game Configuration Modes) and runtime gameplay mechanics (handled by Game Mechanics)."}),"\n",(0,t.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,t.jsx)(n.h3,{id:"system-components",children:"System Components"}),"\n",(0,t.jsx)(n.p,{children:"Game Configuration Settings are implemented as low-level infrastructure services that provide the foundation for all other game systems. The configuration architecture supports layered overrides, platform-specific customization, and runtime modification capabilities."}),"\n",(0,t.jsx)(n.h3,{id:"data-flow",children:"Data Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Platform Detection \u2192 Base Configuration \u2192 Override Application \u2192 Global Constants \u2192 System Initialization\n        \u2193                    \u2193                    \u2193                   \u2193                    \u2193\n    Config Selection \u2192 Default Values \u2192 Platform Specific \u2192 Tuning Values \u2192 Game Systems Ready\n"})}),"\n",(0,t.jsx)(n.h3,{id:"integration-points",children:"Integration Points"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"All Game Systems"}),": Every system depends on configuration values and constants"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Platform Layer"}),": Platform-specific overrides affect configuration behavior"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing Framework"}),": Override systems enable isolated testing environments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Game Balance"}),": Tuning systems control all gameplay parameters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Preferences"}),": Settings persistence affects user experience"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"recent-changes",children:"Recent Changes"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build"}),(0,t.jsx)(n.th,{children:"Date"}),(0,t.jsx)(n.th,{children:"Component"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/config",children:"Config"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Platform configuration management system"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/constants",children:"Constants"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Global constants and configuration values"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/tuning",children:"Tuning"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Central game balance and configuration system"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"core-infrastructure-modules",children:"Core Infrastructure Modules"}),"\n",(0,t.jsx)(n.h3,{id:"platform-configuration",children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/config",children:"Platform Configuration"})}),"\n",(0,t.jsx)(n.p,{children:"Platform-aware configuration management with automatic override application."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Module"}),(0,t.jsx)(n.th,{children:"Status"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Key Features"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/config",children:"Config"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Platform configuration management"}),(0,t.jsx)(n.td,{children:"Platform detection, override application, configuration persistence"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"global-constants",children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/constants",children:"Global Constants"})}),"\n",(0,t.jsx)(n.p,{children:"Comprehensive system defining all global constants and enumerations."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Module"}),(0,t.jsx)(n.th,{children:"Status"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Key Features"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/constants",children:"Constants"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Global constants and configuration values"}),(0,t.jsx)(n.td,{children:"Mathematical constants, input mappings, character data, rendering layers"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"game-balance",children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/tuning",children:"Game Balance"})}),"\n",(0,t.jsx)(n.p,{children:"Central system controlling all gameplay balance parameters."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Module"}),(0,t.jsx)(n.th,{children:"Status"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Key Features"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/tuning",children:"Tuning"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Game balance and configuration system"}),(0,t.jsx)(n.td,{children:"Numeric balance values, modifier functions, multiplayer adjustments"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"override-systems",children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/tuning-override",children:"Override Systems"})}),"\n",(0,t.jsx)(n.p,{children:"Testing and debugging configuration override mechanisms."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Module"}),(0,t.jsx)(n.th,{children:"Status"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Key Features"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/tuning-override",children:"Tuning Override"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"System for overriding game mechanics"}),(0,t.jsx)(n.td,{children:"Function replacement, mechanic disabling, testing support"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"user-settings",children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/consolescreensettings",children:"User Settings"})}),"\n",(0,t.jsx)(n.p,{children:"Persistent user preference and console history management."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Module"}),(0,t.jsx)(n.th,{children:"Status"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Key Features"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/consolescreensettings",children:"Console Screen Settings"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Console history and settings persistence"}),(0,t.jsx)(n.td,{children:"Command history, UI state, automatic save/load"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"environmental-configuration",children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/firelevel",children:"Environmental Configuration"})}),"\n",(0,t.jsx)(n.p,{children:"Specialized configuration for environmental systems."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Module"}),(0,t.jsx)(n.th,{children:"Status"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Key Features"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/firelevel",children:"Fire Level"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Fire intensity and behavior configuration"}),(0,t.jsx)(n.td,{children:"Fire progression, visual effects, heat distribution"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"global-variable-overrides",children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/globalvariableoverrides",children:"Global Variable Overrides"})}),"\n",(0,t.jsx)(n.p,{children:"System for global variable configuration and environment-specific overrides."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Module"}),(0,t.jsx)(n.th,{children:"Status"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Key Features"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/globalvariableoverrides",children:"Base Overrides"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Base configuration template"}),(0,t.jsx)(n.td,{children:"Clean foundation, documentation"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/globalvariableoverrides-clean",children:"Clean Overrides"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Empty configuration for testing"}),(0,t.jsx)(n.td,{children:"Zero modifications, baseline environment"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/globalvariableoverrides-monkey",children:"Monkey Overrides"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Mod testing configuration"}),(0,t.jsx)(n.td,{children:"Mod support, warning suppression"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/globalvariableoverrides-pax-server",children:"PAX Server Overrides"})}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Event server configuration"}),(0,t.jsx)(n.td,{children:"Timed sessions, public demonstrations"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"common-infrastructure-patterns",children:"Common Infrastructure Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"platform-configuration-access",children:"Platform Configuration Access"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check platform-specific configuration\nif TheConfig:IsEnabled("hide_vignette") then\n    -- Mobile optimization: remove performance-heavy vignette\n    HideVignetteEffects()\nend\n\nif TheConfig:IsEnabled("force_netbookmode") then\n    -- Use compact layout for smaller screens\n    SetCompactUIMode()\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"tuning-system-usage",children:"Tuning System Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Access game balance values\nlocal player_health = TUNING.WILSON_HEALTH  -- 150\nlocal spear_damage = TUNING.SPEAR_DAMAGE    -- 34\nlocal day_length = TUNING.TOTAL_DAY_TIME    -- 480 seconds\n\n-- Use tuning values in component setup\ninst.components.health:SetMaxHealth(TUNING.WILSON_HEALTH)\ninst.components.weapon:SetDamage(TUNING.SPEAR_DAMAGE)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"constants-system-integration",children:"Constants System Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Use global constants for consistency\nif entity.Transform:GetFacing() == FACING_RIGHT then\n    -- Entity is facing right\nend\n\n-- Check for specific input\nif TheInput:IsControlPressed(CONTROL_ATTACK) then\n    -- Player is trying to attack\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"override-system-application",children:"Override System Application"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Disable specific mechanics for testing\nlocal overrides = require("tuning_override")\nHoundAttackManager.StartAttack = overrides.hounds  -- Disable hound attacks\nEarthquakeManager.StartQuake = overrides.earthquakes  -- Disable earthquakes\n'})}),"\n",(0,t.jsx)(n.h2,{id:"infrastructure-dependencies",children:"Infrastructure Dependencies"}),"\n",(0,t.jsx)(n.h3,{id:"required-systems",children:"Required Systems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../system-core/index.md",children:"System Core"}),": Engine integration and platform detection services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../data-management/index.md",children:"Data Management"}),": Configuration persistence and file operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../fundamentals/index.md",children:"Fundamentals"}),": Basic class and utility frameworks"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"optional-systems",children:"Optional Systems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../development-tools/index.md",children:"Development Tools"}),": Debug configuration and override tools"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../user-interface/index.md",children:"User Interface"}),": Configuration UI and settings screens"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../networking-communication/index.md",children:"Networking"}),": Network-specific configuration handling"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"system-performance",children:"System Performance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configuration values are resolved at startup for optimal runtime performance"}),"\n",(0,t.jsx)(n.li,{children:"Platform detection occurs once during initialization"}),"\n",(0,t.jsx)(n.li,{children:"Tuning values use direct table access for O(1) lookup performance"}),"\n",(0,t.jsx)(n.li,{children:"Override functions have minimal call overhead"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"resource-usage",children:"Resource Usage"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configuration data is cached in memory for fast access"}),"\n",(0,t.jsx)(n.li,{children:"Constants are stored as immutable values requiring minimal memory"}),"\n",(0,t.jsx)(n.li,{children:"Override systems share common dummy functions to reduce memory usage"}),"\n",(0,t.jsx)(n.li,{children:"Settings persistence uses efficient JSON serialization"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"scaling-characteristics",children:"Scaling Characteristics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configuration systems handle unlimited custom values through extensible design"}),"\n",(0,t.jsx)(n.li,{children:"Platform-specific overrides scale efficiently with new platform additions"}),"\n",(0,t.jsx)(n.li,{children:"Tuning modifiers support complex calculations without performance degradation"}),"\n",(0,t.jsx)(n.li,{children:"Settings systems accommodate growing user preference requirements"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development-guidelines",children:"Development Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always use existing constants instead of hard-coding values"}),"\n",(0,t.jsx)(n.li,{children:"Apply platform-specific configuration through the Config system"}),"\n",(0,t.jsx)(n.li,{children:"Use tuning values for all gameplay balance parameters"}),"\n",(0,t.jsx)(n.li,{children:"Test configuration changes across all supported platforms"}),"\n",(0,t.jsx)(n.li,{children:"Document all custom configuration additions and their purposes"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Hard-coding values instead of using constants or tuning parameters"}),"\n",(0,t.jsx)(n.li,{children:"Not considering platform differences when implementing features"}),"\n",(0,t.jsx)(n.li,{children:"Modifying configuration values without understanding their system-wide impact"}),"\n",(0,t.jsx)(n.li,{children:"Bypassing the configuration system for direct global variable access"}),"\n",(0,t.jsx)(n.li,{children:"Not testing configuration changes in multiplayer environments"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-strategies",children:"Testing Strategies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use clean override configurations for baseline testing"}),"\n",(0,t.jsx)(n.li,{children:"Test platform-specific configurations on target platforms"}),"\n",(0,t.jsx)(n.li,{children:"Verify tuning value changes don't break game balance"}),"\n",(0,t.jsx)(n.li,{children:"Test override systems for proper mechanic disabling"}),"\n",(0,t.jsx)(n.li,{children:"Validate settings persistence across save/load cycles"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"system-integration-patterns",children:"System Integration Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"with-core-game-systems",children:"With Core Game Systems"}),"\n",(0,t.jsx)(n.p,{children:"Configuration settings provide the foundation for all game functionality:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Constants define the behavioral parameters for all systems"}),"\n",(0,t.jsx)(n.li,{children:"Tuning values control the balance and feel of gameplay mechanics"}),"\n",(0,t.jsx)(n.li,{children:"Platform configuration ensures consistent behavior across deployment targets"}),"\n",(0,t.jsx)(n.li,{children:"Override systems enable isolated testing of individual components"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"with-development-workflow",children:"With Development Workflow"}),"\n",(0,t.jsx)(n.p,{children:"Settings infrastructure supports efficient development processes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Override systems allow selective feature disabling for focused testing"}),"\n",(0,t.jsx)(n.li,{children:"Platform configuration enables cross-platform development and testing"}),"\n",(0,t.jsx)(n.li,{children:"Tuning system supports rapid balance iteration and experimentation"}),"\n",(0,t.jsx)(n.li,{children:"Settings persistence maintains developer preferences across sessions"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"with-user-experience",children:"With User Experience"}),"\n",(0,t.jsx)(n.p,{children:"Configuration systems directly impact player experience:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Platform-specific optimizations ensure optimal performance on each target"}),"\n",(0,t.jsx)(n.li,{children:"Tuning values create consistent and balanced gameplay"}),"\n",(0,t.jsx)(n.li,{children:"Settings persistence maintains user preferences and customizations"}),"\n",(0,t.jsx)(n.li,{children:"Configuration flexibility supports modding and customization"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,t.jsx)(n.h3,{id:"key-metrics",children:"Key Metrics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configuration lookup time and frequency"}),"\n",(0,t.jsx)(n.li,{children:"Platform detection and override application duration"}),"\n",(0,t.jsx)(n.li,{children:"Tuning value access patterns and performance"}),"\n",(0,t.jsx)(n.li,{children:"Settings persistence operation performance"}),"\n",(0,t.jsx)(n.li,{children:"Memory usage of configuration data structures"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"optimization-strategies",children:"Optimization Strategies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cache frequently accessed configuration values"}),"\n",(0,t.jsx)(n.li,{children:"Minimize runtime configuration lookups through startup resolution"}),"\n",(0,t.jsx)(n.li,{children:"Use efficient data structures for configuration storage"}),"\n",(0,t.jsx)(n.li,{children:"Optimize settings persistence for minimal I/O operations"}),"\n",(0,t.jsx)(n.li,{children:"Monitor and limit configuration-related memory usage"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting-infrastructure-issues",children:"Troubleshooting Infrastructure Issues"}),"\n",(0,t.jsx)(n.h3,{id:"common-configuration-problems",children:"Common Configuration Problems"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Issue"}),(0,t.jsx)(n.th,{children:"Symptoms"}),(0,t.jsx)(n.th,{children:"Solution"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Platform overrides not applying"}),(0,t.jsx)(n.td,{children:"Features behave incorrectly on specific platforms"}),(0,t.jsx)(n.td,{children:"Check platform detection and override logic"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Tuning values not taking effect"}),(0,t.jsx)(n.td,{children:"Gameplay balance feels wrong"}),(0,t.jsx)(n.td,{children:"Verify tuning value loading and application"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Settings not persisting"}),(0,t.jsx)(n.td,{children:"User preferences reset on restart"}),(0,t.jsx)(n.td,{children:"Check settings save/load operations"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Constants not available"}),(0,t.jsx)(n.td,{children:"Compilation or runtime errors"}),(0,t.jsx)(n.td,{children:"Verify constants loading order and dependencies"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"debugging-infrastructure",children:"Debugging Infrastructure"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use configuration debug commands to inspect current settings"}),"\n",(0,t.jsx)(n.li,{children:"Monitor platform detection and override application"}),"\n",(0,t.jsx)(n.li,{children:"Check tuning value resolution and modifier application"}),"\n",(0,t.jsx)(n.li,{children:"Validate settings persistence operations and file integrity"}),"\n",(0,t.jsx)(n.li,{children:"Review configuration loading order and dependency resolution"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advanced-infrastructure-features",children:"Advanced Infrastructure Features"}),"\n",(0,t.jsx)(n.h3,{id:"custom-configuration-development",children:"Custom Configuration Development"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Framework for creating custom configuration categories"}),"\n",(0,t.jsx)(n.li,{children:"Extension points for platform-specific configuration needs"}),"\n",(0,t.jsx)(n.li,{children:"Integration patterns for configuration UI development"}),"\n",(0,t.jsx)(n.li,{children:"Best practices for configuration validation and error handling"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-migration",children:"Configuration Migration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Support for configuration format upgrades across game versions"}),"\n",(0,t.jsx)(n.li,{children:"Migration strategies for settings compatibility"}),"\n",(0,t.jsx)(n.li,{children:"Backward compatibility considerations for configuration changes"}),"\n",(0,t.jsx)(n.li,{children:"Version-aware configuration loading and fallback mechanisms"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-and-development-support",children:"Testing and Development Support"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Comprehensive override system for feature isolation"}),"\n",(0,t.jsx)(n.li,{children:"Configuration validation tools for development workflows"}),"\n",(0,t.jsx)(n.li,{children:"Testing frameworks that leverage configuration flexibility"}),"\n",(0,t.jsx)(n.li,{children:"Performance measurement tools for configuration impact assessment"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"future-development-considerations",children:"Future Development Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"extensibility-design",children:"Extensibility Design"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configuration systems support unlimited custom additions"}),"\n",(0,t.jsx)(n.li,{children:"Platform configuration framework accommodates new deployment targets"}),"\n",(0,t.jsx)(n.li,{children:"Tuning system designed for complex balance calculations and modifiers"}),"\n",(0,t.jsx)(n.li,{children:"Override mechanisms support advanced testing and debugging scenarios"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"integration-planning",children:"Integration Planning"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"New features should leverage existing configuration infrastructure"}),"\n",(0,t.jsx)(n.li,{children:"Consider platform implications for all configuration changes"}),"\n",(0,t.jsx)(n.li,{children:"Design for backward compatibility with existing configuration data"}),"\n",(0,t.jsx)(n.li,{children:"Plan for configuration UI and user experience implications"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"System"}),(0,t.jsx)(n.th,{children:"Relationship"}),(0,t.jsx)(n.th,{children:"Integration Points"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/modes/",children:"Game Configuration Modes"})}),(0,t.jsx)(n.td,{children:"Uses settings infrastructure"}),(0,t.jsx)(n.td,{children:"Mode-specific configuration application"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../character-systems/index.md",children:"Character Systems"})}),(0,t.jsx)(n.td,{children:"Depends on tuning values"}),(0,t.jsx)(n.td,{children:"Character stat and behavior configuration"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../game-mechanics/index.md",children:"Game Mechanics"})}),(0,t.jsx)(n.td,{children:"Uses balance parameters"}),(0,t.jsx)(n.td,{children:"Recipe costs, damage values, timing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../world-systems/index.md",children:"World Systems"})}),(0,t.jsx)(n.td,{children:"Uses generation parameters"}),(0,t.jsx)(n.td,{children:"World creation and environmental settings"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"../development-tools/index.md",children:"Development Tools"})}),(0,t.jsx)(n.td,{children:"Uses override systems"}),(0,t.jsx)(n.td,{children:"Testing and debugging configuration"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"contributing-to-infrastructure",children:"Contributing to Infrastructure"}),"\n",(0,t.jsx)(n.h3,{id:"adding-new-configuration-categories",children:"Adding New Configuration Categories"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Follow established patterns for configuration organization"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper validation and error handling"}),"\n",(0,t.jsx)(n.li,{children:"Consider platform-specific requirements and overrides"}),"\n",(0,t.jsx)(n.li,{children:"Document configuration impact and usage guidelines"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"extending-platform-support",children:"Extending Platform Support"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Understand current platform detection mechanisms"}),"\n",(0,t.jsx)(n.li,{children:"Implement appropriate configuration overrides for new platforms"}),"\n",(0,t.jsx)(n.li,{children:"Test configuration behavior across all supported platforms"}),"\n",(0,t.jsx)(n.li,{children:"Update documentation for platform-specific considerations"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"modifying-core-constants",children:"Modifying Core Constants"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Understand system-wide impact of constant changes"}),"\n",(0,t.jsx)(n.li,{children:"Maintain backward compatibility where possible"}),"\n",(0,t.jsx)(n.li,{children:"Test changes across all game systems and features"}),"\n",(0,t.jsx)(n.li,{children:"Document changes and their implications for dependent systems"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(96540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);