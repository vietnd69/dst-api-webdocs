"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[38282],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var r=i(96540);const s={},d=r.createContext(s);function o(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(d.Provider,{value:n},e.children)}},87988:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"game-scripts/core-systems/game-mechanics/cooking/cooking","title":"Cooking","description":"Cooking system for ingredient processing and recipe management in Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/game-mechanics/cooking/cooking.md","sourceDirName":"game-scripts/core-systems/game-mechanics/cooking","slug":"/game-scripts/core-systems/game-mechanics/cooking/","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/cooking/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"cooking","title":"Cooking","description":"Cooking system for ingredient processing and recipe management in Don\'t Starve Together","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"}}');var s=i(74848),d=i(28453);const o={id:"cooking",title:"Cooking",description:"Cooking system for ingredient processing and recipe management in Don't Starve Together",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},c="Cooking \ud83d\udfe2",t={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Overview",id:"overview-1",level:2},{value:"Functions",id:"functions",level:2},{value:"AddCookerRecipe(cooker, recipe, is_mod_food)",id:"add-cooker-recipe",level:3},{value:"AddIngredientValues(names, tags, cancook, candry)",id:"add-ingredient-values",level:3},{value:"CalculateRecipe(cooker, names)",id:"calculate-recipe",level:3},{value:"IsCookingIngredient(prefabname)",id:"is-cooking-ingredient",level:3},{value:"GetCandidateRecipes(cooker, ingdata)",id:"get-candidate-recipes",level:3},{value:"IsModCookingProduct(cooker, name)",id:"is-mod-cooking-product",level:3},{value:"HasModCookerFood()",id:"has-mod-cooker-food",level:3},{value:"IsModCookerFood(prefab)",id:"is-mod-cooker-food",level:3},{value:"AddRecipeCard(cooker, recipe)",id:"add-recipe-card",level:3},{value:"Ingredient Tag System",id:"ingredient-tag-system",level:2},{value:"Available Tags",id:"available-tags",level:3},{value:"Special Tags",id:"special-tags",level:3},{value:"Recipe Definition Structure",id:"recipe-definition-structure",level:2},{value:"Cooker Types",id:"cooker-types",level:2},{value:"Standard Cook Pots",id:"standard-cook-pots",level:3},{value:"Portable Cook Pot (Warly Exclusive)",id:"portable-cook-pot-warly-exclusive",level:3},{value:"Portable Spicer",id:"portable-spicer",level:3},{value:"Recipe Selection Algorithm",id:"recipe-selection-algorithm",level:2},{value:"Example Recipe Tests",id:"example-recipe-tests",level:2},{value:"Basic Meat Recipe",id:"basic-meat-recipe",level:3},{value:"Complex Requirements",id:"complex-requirements",level:3},{value:"Ingredient-Specific Recipe",id:"ingredient-specific-recipe",level:3},{value:"Ingredient Examples",id:"ingredient-examples",level:2},{value:"Fruits",id:"fruits",level:3},{value:"Vegetables",id:"vegetables",level:3},{value:"Meats",id:"meats",level:3},{value:"Ocean Fish Integration",id:"ocean-fish-integration",level:3},{value:"Cookbook System",id:"cookbook-system",level:2},{value:"Recipe Categories",id:"recipe-categories",level:3},{value:"Recipe Cards",id:"recipe-cards",level:3},{value:"Mod Integration",id:"mod-integration",level:2},{value:"Adding Custom Recipes",id:"adding-custom-recipes",level:3},{value:"Adding Custom Ingredients",id:"adding-custom-ingredients",level:3},{value:"Mod Detection",id:"mod-detection",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Ingredient Aliases",id:"ingredient-aliases",level:3},{value:"Dynamic Recipe Testing",id:"dynamic-recipe-testing",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Container Integration",id:"container-integration",level:3},{value:"Prefab Integration",id:"prefab-integration",level:3},{value:"Constants",id:"constants",level:2},{value:"MOD_COOKBOOK_CATEGORY",id:"mod_cookbook_category",level:3},{value:"Official Foods Table",id:"official-foods-table",level:3},{value:"Module Exports",id:"module-exports",level:2},{value:"Exported Properties",id:"exported-properties",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Technical Notes",id:"technical-notes",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"cooking-",children:"Cooking \ud83d\udfe2"})}),"\n",(0,s.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Build Version"}),(0,s.jsx)(n.th,{children:"Change Date"}),(0,s.jsx)(n.th,{children:"Change Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current stable implementation with mod integration"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The cooking system manages ingredient processing, recipe calculation, and prepared food creation in Don't Starve Together. It provides the foundation for all cooking mechanics including crock pots, spice stations, and custom cooking devices."}),"\n",(0,s.jsx)(n.h2,{id:"overview-1",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The cooking module provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ingredient System"}),": Tag-based classification of cooking ingredients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Recipe Management"}),": Dynamic recipe calculation and validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cooker Support"}),": Multiple cooking device types with shared logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cookbook Integration"}),": Recipe display and categorization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mod Support"}),": Extensible framework for custom recipes and ingredients"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h3,{id:"add-cooker-recipe",children:"AddCookerRecipe(cooker, recipe, is_mod_food)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRegisters a recipe for a specific cooking device type."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cooker"})," - Cooker type identifier (",(0,s.jsx)(n.code,{children:'"cookpot"'}),", ",(0,s.jsx)(n.code,{children:'"portablecookpot"'}),", ",(0,s.jsx)(n.code,{children:'"portablespicer"'}),", etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recipe"})," - Recipe definition table"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"is_mod_food"})," - Boolean indicating if this is a mod-added recipe"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Register a recipe for cook pots\nlocal my_recipe = {\n    name = "meatballs",\n    test = function(cooker, names, tags)\n        return tags.meat and not tags.inedible\n    end,\n    priority = -1,\n    weight = 1,\n    cooktime = 1,\n}\n\nAddCookerRecipe("cookpot", my_recipe)\n\n-- Register for multiple cooker types\nAddCookerRecipe("cookpot", my_recipe)\nAddCookerRecipe("portablecookpot", my_recipe)\nAddCookerRecipe("archive_cookpot", my_recipe)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"add-ingredient-values",children:"AddIngredientValues(names, tags, cancook, candry)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nDefines cooking properties for ingredient items."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"names"})," - Array of prefab names to assign values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tags"})," - Table of tag-value pairs for cooking classification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cancook"})," - Whether to create cooked variants with same values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"candry"})," - Whether to create dried variants with same values"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add vegetable properties\nAddIngredientValues(\n    {"carrot", "corn", "pumpkin"},\n    {veggie = 1},\n    true,  -- Create cooked versions\n    false  -- Don\'t create dried versions\n)\n\n-- Add meat with multiple tags\nAddIngredientValues(\n    {"monstermeat"},\n    {meat = 1, monster = 1},\n    true,  -- Create monstermeat_cooked\n    true   -- Create monstermeat_dried\n)\n\n-- Add complex ingredient\nAddIngredientValues(\n    {"fishmeat"},\n    {meat = 1, fish = 1},\n    true\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"calculate-recipe",children:"CalculateRecipe(cooker, names)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nDetermines which recipe to produce from given ingredients."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cooker"})," - Cooker type identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"names"})," - Array of ingredient prefab names"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recipe_name"})," - Name of the recipe to produce"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cooktime"})," - Cooking time multiplier"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Calculate recipe from ingredients\nlocal recipe_name, cooktime = CalculateRecipe("cookpot", \n    {"meat", "meat", "berries", "twigs"})\n-- Returns: "meatballs", 1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"is-cooking-ingredient",children:"IsCookingIngredient(prefabname)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nChecks if an item can be used in cooking."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prefabname"})," - Item prefab name to check"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Boolean indicating if item is a valid cooking ingredient"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'if IsCookingIngredient("meat") then\n    print("Meat can be used in cooking")\nend\n\nif IsCookingIngredient("log") then\n    print("This won\'t print - logs aren\'t ingredients")\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"get-candidate-recipes",children:"GetCandidateRecipes(cooker, ingdata)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nFinds and prioritizes all recipes that match the given ingredients."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cooker"})," (string): Cooker type identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ingdata"})," (table): Processed ingredient data with names and tags"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(table): Array of recipe candidates sorted by priority"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local ingdata = GetIngredientValues({"meat", "meat", "berries", "twigs"})\nlocal candidates = GetCandidateRecipes("cookpot", ingdata)\nfor _, recipe in ipairs(candidates) do\n    print("Recipe:", recipe.name, "Priority:", recipe.priority or 0)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"is-mod-cooking-product",children:"IsModCookingProduct(cooker, name)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nChecks if a recipe name is provided by an enabled mod for a specific cooker type."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cooker"})," (string): Cooker type identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," (string): Recipe name to check"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(boolean): True if recipe is from an enabled mod"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"has-mod-cooker-food",children:"HasModCookerFood()"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nChecks if any mod-added recipes are currently available in the cookbook."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(boolean): True if mod recipes exist in cookbook"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"is-mod-cooker-food",children:"IsModCookerFood(prefab)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nDetermines if a food item is from a mod rather than the base game."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prefab"})," (string): Food prefab name"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(boolean): True if food is mod-added"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"add-recipe-card",children:"AddRecipeCard(cooker, recipe)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRegisters a recipe card for cookbook display. Used internally when recipes have card_def defined."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cooker"})," (string): Cooker type identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recipe"})," (table): Recipe definition with card_def"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Automatically called for recipes with card_def\nlocal recipe = {\n    name = "meatballs",\n    card_def = {\n        ingredients = {{"meat", 2}, {"berries", 1}}\n    },\n    -- ... other properties\n}\nAddCookerRecipe("cookpot", recipe)\n-- AddRecipeCard is called automatically if card_def exists\n'})}),"\n",(0,s.jsx)(n.h2,{id:"ingredient-tag-system",children:"Ingredient Tag System"}),"\n",(0,s.jsx)(n.h3,{id:"available-tags",children:"Available Tags"}),"\n",(0,s.jsx)(n.p,{children:"The cooking system uses these ingredient tags for recipe matching:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Tag"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Example Items"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"meat"})}),(0,s.jsx)(n.td,{children:"Meat value"}),(0,s.jsx)(n.td,{children:"meat, monstermeat, fishmeat"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fish"})}),(0,s.jsx)(n.td,{children:"Fish value"}),(0,s.jsx)(n.td,{children:"fish, eel, oceanfish variants"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"veggie"})}),(0,s.jsx)(n.td,{children:"Vegetable value"}),(0,s.jsx)(n.td,{children:"carrot, corn, mushrooms"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fruit"})}),(0,s.jsx)(n.td,{children:"Fruit value"}),(0,s.jsx)(n.td,{children:"berries, dragonfruit, pomegranate"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"egg"})}),(0,s.jsx)(n.td,{children:"Egg value"}),(0,s.jsx)(n.td,{children:"egg, tallbirdegg, bird_egg"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sweetener"})}),(0,s.jsx)(n.td,{children:"Sweetener value"}),(0,s.jsx)(n.td,{children:"honey, honeycomb, royal_jelly"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"dairy"})}),(0,s.jsx)(n.td,{children:"Dairy value"}),(0,s.jsx)(n.td,{children:"butter, goatmilk, milkywhites"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fat"})}),(0,s.jsx)(n.td,{children:"Fat value"}),(0,s.jsx)(n.td,{children:"butter (combined with dairy)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"decoration"})}),(0,s.jsx)(n.td,{children:"Decoration value"}),(0,s.jsx)(n.td,{children:"butterflywings, refined_dust"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"inedible"})}),(0,s.jsx)(n.td,{children:"Inedible value"}),(0,s.jsx)(n.td,{children:"twigs, lightninggoathorn"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"frozen"})}),(0,s.jsx)(n.td,{children:"Frozen value"}),(0,s.jsx)(n.td,{children:"ice"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"seed"})}),(0,s.jsx)(n.td,{children:"Seed value"}),(0,s.jsx)(n.td,{children:"acorn"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"magic"})}),(0,s.jsx)(n.td,{children:"Magic value"}),(0,s.jsx)(n.td,{children:"mandrake, nightmarefuel"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"monster"})}),(0,s.jsx)(n.td,{children:"Monster value"}),(0,s.jsx)(n.td,{children:"monstermeat, durian"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"special-tags",children:"Special Tags"}),"\n",(0,s.jsx)(n.p,{children:"Processed ingredients gain additional tags:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Cooked variants get "precook" tag\ningredients["meat_cooked"].tags.precook = 1\n\n-- Dried variants get "dried" tag  \ningredients["meat_dried"].tags.dried = 1\n'})}),"\n",(0,s.jsx)(n.h2,{id:"recipe-definition-structure",children:"Recipe Definition Structure"}),"\n",(0,s.jsx)(n.p,{children:"Recipes are defined as tables with specific properties:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local recipe = {\n    name = "recipe_name",\n    \n    -- Test function determines if ingredients match\n    test = function(cooker, names, tags)\n        -- names: table of ingredient prefab names and counts\n        -- tags: table of tag totals from all ingredients\n        return boolean\n    end,\n    \n    -- Recipe selection priority (higher = tested first)\n    priority = 0,\n    \n    -- Weight for random selection among same priority\n    weight = 1,\n    \n    -- Cooking time multiplier\n    cooktime = 1,\n    \n    -- Optional cookbook category\n    cookbook_category = "main",\n    \n    -- Cookbook card definition\n    card_def = {\n        ingredients = {\n            {"ingredient1", quantity},\n            {"ingredient2", quantity},\n        }\n    },\n    \n    -- Exclude from cookbook\n    no_cookbook = false,\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"cooker-types",children:"Cooker Types"}),"\n",(0,s.jsx)(n.h3,{id:"standard-cook-pots",children:"Standard Cook Pots"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Supported Cookers:"})," ",(0,s.jsx)(n.code,{children:"cookpot"}),", ",(0,s.jsx)(n.code,{children:"portablecookpot"}),", ",(0,s.jsx)(n.code,{children:"archive_cookpot"})]}),"\n",(0,s.jsxs)(n.p,{children:["These share the same recipe pool from ",(0,s.jsx)(n.code,{children:"preparedfoods.lua"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Recipes are added to all standard cook pot types\nlocal foods = require("preparedfoods")\nfor k, recipe in pairs(foods) do\n    AddCookerRecipe("cookpot", recipe)\n    AddCookerRecipe("portablecookpot", recipe)\n    AddCookerRecipe("archive_cookpot", recipe)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"portable-cook-pot-warly-exclusive",children:"Portable Cook Pot (Warly Exclusive)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cooker:"})," ",(0,s.jsx)(n.code,{children:"portablecookpot"})]}),"\n",(0,s.jsxs)(n.p,{children:["Gets additional exclusive recipes from ",(0,s.jsx)(n.code,{children:"preparedfoods_warly.lua"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Warly\'s special recipes\nlocal portable_foods = require("preparedfoods_warly")\nfor k, recipe in pairs(portable_foods) do\n    AddCookerRecipe("portablecookpot", recipe)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"portable-spicer",children:"Portable Spicer"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cooker:"})," ",(0,s.jsx)(n.code,{children:"portablespicer"})]}),"\n",(0,s.jsxs)(n.p,{children:["Uses spice recipes from ",(0,s.jsx)(n.code,{children:"spicedfoods.lua"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Spice recipes for enhancing prepared foods\nlocal spicedfoods = require("spicedfoods")\nfor k, recipe in pairs(spicedfoods) do\n    AddCookerRecipe("portablespicer", recipe)\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"recipe-selection-algorithm",children:"Recipe Selection Algorithm"}),"\n",(0,s.jsx)(n.p,{children:"The cooking system follows this priority order for recipe selection:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Collect Ingredients"}),": Process ingredient list into name counts and tag totals"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Recipes"}),": Run each recipe's test function against ingredients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filter by Priority"}),": Group recipes by priority level (higher first)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Weighted Selection"}),": Among same priority, randomly select based on weight"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"function GetCandidateRecipes(cooker, ingdata)\n    local recipes = cookerrecipes[cooker] or {}\n    local candidates = {}\n\n    -- Find all potentially valid recipes\n    for k, v in pairs(recipes) do\n        if v.test(cooker, ingdata.names, ingdata.tags) then\n            table.insert(candidates, v)\n        end\n    end\n\n    -- Sort by priority (highest first)\n    table.sort(candidates, function(a, b) \n        return (a.priority or 0) > (b.priority or 0) \n    end)\n    \n    return candidates\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"example-recipe-tests",children:"Example Recipe Tests"}),"\n",(0,s.jsx)(n.h3,{id:"basic-meat-recipe",children:"Basic Meat Recipe"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Meatballs - fallback meat recipe\nmeatballs = {\n    name = "meatballs",\n    test = function(cooker, names, tags)\n        return tags.meat and not tags.inedible\n    end,\n    priority = -1, -- Low priority fallback\n    weight = 1,\n    cooktime = 1,\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"complex-requirements",children:"Complex Requirements"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Honey Ham - requires specific amounts\nhoneyed_ham = {\n    name = "honeyed_ham",\n    test = function(cooker, names, tags)\n        return names.honey and tags.meat and tags.meat >= 2 and not tags.inedible\n    end,\n    priority = 2,\n    weight = 1,\n    cooktime = 1,\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"ingredient-specific-recipe",children:"Ingredient-Specific Recipe"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Dragonpie - requires specific fruit, excludes meat\ndragonpie = {\n    name = "dragonpie", \n    test = function(cooker, names, tags)\n        return (names.dragonfruit or names.dragonfruit_cooked) and not tags.meat\n    end,\n    priority = 1,\n    weight = 1,\n    cooktime = 1,\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"ingredient-examples",children:"Ingredient Examples"}),"\n",(0,s.jsx)(n.h3,{id:"fruits",children:"Fruits"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Standard fruits\nlocal fruits = {"pomegranate", "dragonfruit", "cave_banana"}\nAddIngredientValues(fruits, {fruit = 1}, true)\n\n-- Berries (half fruit value)\nAddIngredientValues({"berries"}, {fruit = 0.5}, true)\nAddIngredientValues({"berries_juicy"}, {fruit = 0.5}, true)\n\n-- Monster fruit\nAddIngredientValues({"durian"}, {fruit = 1, monster = 1}, true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"vegetables",children:"Vegetables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Standard vegetables  \nlocal veggies = {"carrot", "corn", "pumpkin", "eggplant", "onion", "garlic"}\nAddIngredientValues(veggies, {veggie = 1}, true)\n\n-- Mushrooms (half veggie value)\nlocal mushrooms = {"red_cap", "green_cap", "blue_cap", "moon_cap"}\nAddIngredientValues(mushrooms, {veggie = 0.5}, true)\n\n-- Special vegetables\nAddIngredientValues({"mandrake"}, {veggie = 1, magic = 1}, true)\nAddIngredientValues({"kelp"}, {veggie = 0.5}, true, true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"meats",children:"Meats"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Standard meat\nAddIngredientValues({"meat"}, {meat = 1}, true, true)\n\n-- Monster meat\nAddIngredientValues({"monstermeat"}, {meat = 1, monster = 1}, true, true)\n\n-- Small meats\nAddIngredientValues({"smallmeat", "batnose"}, {meat = 0.5}, true, true)\nAddIngredientValues({"froglegs", "drumstick", "batwing"}, {meat = 0.5}, true)\n\n-- Fish meats\nAddIngredientValues({"fish"}, {meat = 1, fish = 1}, true)\nAddIngredientValues({"eel"}, {meat = 0.5, fish = 1}, true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"ocean-fish-integration",children:"Ocean Fish Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Ocean fish use dynamic ingredient values\nlocal oceanfishdefs = require("prefabs/oceanfishdef")\nfor _, fish_def in pairs(oceanfishdefs.fish) do\n    if fish_def.cooker_ingredient_value ~= nil then\n        AddIngredientValues({fish_def.prefab.."_inv"}, \n                          fish_def.cooker_ingredient_value, false)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"cookbook-system",children:"Cookbook System"}),"\n",(0,s.jsx)(n.h3,{id:"recipe-categories",children:"Recipe Categories"}),"\n",(0,s.jsx)(n.p,{children:"Recipes are organized into cookbook categories:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Official recipes get default category\nif not is_mod_food then\n    official_foods[recipe.name] = true\n    recipe.cookbook_atlas = "images/cookbook_"..recipe.name..".xml"\nend\n\n-- Mod recipes get special category\nif is_mod_food then\n    recipe.cookbook_category = MOD_COOKBOOK_CATEGORY\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"recipe-cards",children:"Recipe Cards"}),"\n",(0,s.jsx)(n.p,{children:"Cookbook entries require card definitions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add recipe card for cookbook display\nfunction AddRecipeCard(cooker, recipe)\n    table.insert(recipe_cards, {\n        recipe_name = recipe.name, \n        cooker_name = cooker\n    })\nend\n\n-- Recipe must define card_def for cookbook\nrecipe.card_def = {\n    ingredients = {\n        {"meat", 2},\n        {"honey", 1},\n        {"berries", 1},\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"mod-integration",children:"Mod Integration"}),"\n",(0,s.jsx)(n.h3,{id:"adding-custom-recipes",children:"Adding Custom Recipes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define custom recipe\nlocal my_recipe = {\n    name = "my_custom_food",\n    test = function(cooker, names, tags)\n        return tags.meat >= 2 and tags.veggie >= 1 and not tags.monster\n    end,\n    priority = 5,\n    weight = 1,\n    cooktime = 2,\n    card_def = {\n        ingredients = {{"meat", 2}, {"carrot", 1}}\n    }\n}\n\n-- Register as mod food\nAddCookerRecipe("cookpot", my_recipe, true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"adding-custom-ingredients",children:"Adding Custom Ingredients"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add new ingredient type\nAddIngredientValues({"my_custom_ingredient"}, {\n    veggie = 1,\n    magic = 0.5,\n    decoration = 1\n}, true, false)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mod-detection",children:"Mod Detection"}),"\n",(0,s.jsx)(n.p,{children:"The system tracks mod-added content:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Check if recipe is from mod\nlocal function IsModCookerFood(prefab)\n    return not official_foods[prefab]\nend\n\n-- Check if any mod foods exist\nlocal function HasModCookerFood()\n    return cookbook_recipes[MOD_COOKBOOK_CATEGORY] ~= nil\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"ingredient-aliases",children:"Ingredient Aliases"}),"\n",(0,s.jsx)(n.p,{children:"The system supports ingredient name aliases:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local aliases = {\n    cookedsmallmeat = "smallmeat_cooked",\n    cookedmonstermeat = "monstermeat_cooked", \n    cookedmeat = "meat_cooked",\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-recipe-testing",children:"Dynamic Recipe Testing"}),"\n",(0,s.jsx)(n.p,{children:"Recipe tests receive full ingredient context:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"function(cooker, names, tags)\n    -- names: {meat = 2, berries = 1, twigs = 1}\n    -- tags: {meat = 2, fruit = 0.5, inedible = 1}\n    \n    -- Check specific ingredients\n    if names.honey then\n        return tags.meat >= 2\n    end\n    \n    -- Check tag totals\n    if tags.veggie and tags.veggie >= 3 then\n        return not tags.meat\n    end\n    \n    return false\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,s.jsx)(n.h3,{id:"container-integration",children:"Container Integration"}),"\n",(0,s.jsx)(n.p,{children:"The cooking system works with container validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In containers.lua\nfunction params.cookpot.itemtestfn(container, item, slot)\n    return cooking.IsCookingIngredient(item.prefab) and not container.inst:HasTag("burnt")\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"prefab-integration",children:"Prefab Integration"}),"\n",(0,s.jsx)(n.p,{children:"Cooking recipes define the products created:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Recipe references prefab name\nlocal recipe = {\n    name = "meatballs", -- Must match prefab name\n    -- ... other properties\n}\n\n-- Prefab must exist in prefabs/meatballs.lua\n'})}),"\n",(0,s.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,s.jsx)(n.h3,{id:"mod_cookbook_category",children:"MOD_COOKBOOK_CATEGORY"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Value:"})," ",(0,s.jsx)(n.code,{children:'"mod"'})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Category identifier for mod-added recipes in the cookbook system."]}),"\n",(0,s.jsx)(n.h3,{id:"official-foods-table",children:"Official Foods Table"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Internal table tracking official (non-mod) food recipes for cookbook categorization and online synchronization."]}),"\n",(0,s.jsx)(n.h2,{id:"module-exports",children:"Module Exports"}),"\n",(0,s.jsx)(n.p,{children:"The cooking module returns a table with the following API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"return {\n    CalculateRecipe = CalculateRecipe,\n    IsCookingIngredient = IsCookingIngredient,\n    recipes = cookerrecipes,\n    ingredients = ingredients,\n    GetRecipe = GetRecipe,\n    cookbook_recipes = cookbook_recipes,\n    recipe_cards = recipe_cards,\n    HasModCookerFood = HasModCookerFood,\n    IsModCookerFood = IsModCookerFood\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"exported-properties",children:"Exported Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"recipes"})}),(0,s.jsx)(n.td,{children:"table"}),(0,s.jsx)(n.td,{children:"All cooker recipe tables indexed by cooker type"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ingredients"})}),(0,s.jsx)(n.td,{children:"table"}),(0,s.jsx)(n.td,{children:"All ingredient definitions with tags and properties"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"cookbook_recipes"})}),(0,s.jsx)(n.td,{children:"table"}),(0,s.jsx)(n.td,{children:"Cookbook-visible recipes organized by category"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"recipe_cards"})}),(0,s.jsx)(n.td,{children:"table"}),(0,s.jsx)(n.td,{children:"Recipe card definitions for cookbook display"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./containers.md",children:"Containers"})})," - Cooking container configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./prefabs.md",children:"Prefabs"})})," - Prepared food prefab definitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./components/",children:"Components"})})," - Cookable and stewer components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./tuning.md",children:"Tuning"})})," - Cooking time and spoilage constants"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"technical-notes",children:"Technical Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Core cooking functions provide stable API across game updates"}),"\n",(0,s.jsx)(n.li,{children:"Recipe priority system prevents conflicts with base game recipes"}),"\n",(0,s.jsx)(n.li,{children:"Extensive mod support through ingredient and recipe registration"}),"\n",(0,s.jsx)(n.li,{children:"Recipe calculation optimized for real-time cooking decisions"}),"\n",(0,s.jsx)(n.li,{children:"Ingredient aliases handle naming convention inconsistencies"}),"\n",(0,s.jsx)(n.li,{children:"Ocean fish integration uses dynamic ingredient value system"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This documentation covers the Cooking module as of build 676042. The cooking system provides comprehensive ingredient processing and recipe management for all cooking mechanics."})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);