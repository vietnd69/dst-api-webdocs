"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[41941],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var r=s(96540);const d={},a=r.createContext(d);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},88870:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"game-scripts/core-systems/networking-communication/networking/shardindex","title":"Shard Index","description":"Cluster shard management system for server data persistence and world generation configuration","source":"@site/docs/game-scripts/core-systems/networking-communication/networking/shardindex.md","sourceDirName":"game-scripts/core-systems/networking-communication/networking","slug":"/game-scripts/core-systems/networking-communication/networking/shardindex","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardindex","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"shardindex","title":"Shard Index","description":"Cluster shard management system for server data persistence and world generation configuration","sidebar_position":5,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Network Variables (NetVars)","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/netvars"},"next":{"title":"Shard Networking","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardnetworking"}}');var d=s(74848),a=s(28453);const i={id:"shardindex",title:"Shard Index",description:"Cluster shard management system for server data persistence and world generation configuration",sidebar_position:5,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Shard Index",l={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Class Structure",id:"class-structure",level:2},{value:"ShardIndex Class",id:"shardindex-class",level:3},{value:"Initialization and Basic Management",id:"initialization-and-basic-management",level:2},{value:"ShardIndex()",id:"constructor",level:3},{value:"ShardIndex()",id:"get-shard-index-name",level:3},{value:"Persistence Operations",id:"persistence-operations",level:2},{value:"ShardIndex(callback)",id:"save",level:3},{value:"ShardIndex(callback)",id:"load",level:3},{value:"ShardIndex(slot, shard, callback)",id:"load-shard-in-slot",level:3},{value:"Session and Save Data Management",id:"session-and-save-data-management",level:2},{value:"ShardIndex(callback)",id:"get-save-data",level:3},{value:"ShardIndex(onsavedcb, isshutdown)",id:"save-current",level:3},{value:"ShardIndex(savedata, metadataStr, session_identifier, callback)",id:"on-generate-new-world",level:3},{value:"Cluster and Shard Management",id:"cluster-and-shard-management",level:2},{value:"ShardIndex(slot, shard)",id:"new-shard-in-slot",level:3},{value:"ShardIndex(callback, save_options)",id:"delete",level:3},{value:"World Configuration Management",id:"world-configuration-management",level:2},{value:"ShardIndex(customoptions, serverdata, onsavedcb)",id:"set-server-shard-data",level:3},{value:"Data Access Methods",id:"data-access-methods",level:2},{value:"ShardIndex()",id:"get-server-data",level:3},{value:"ShardIndex()",id:"get-gen-options",level:3},{value:"ShardIndex()",id:"get-session",level:3},{value:"ShardIndex()",id:"get-game-mode",level:3},{value:"Mod Management",id:"mod-management",level:2},{value:"ShardIndex()",id:"get-enabled-server-mods",level:3},{value:"ShardIndex()",id:"load-enabled-server-mods",level:3},{value:"ShardIndex(enabled_mods)",id:"set-enabled-server-mods",level:3},{value:"Utility Methods",id:"utility-methods",level:2},{value:"ShardIndex()",id:"is-master-shard-index",level:3},{value:"ShardIndex()",id:"get-slot",level:3},{value:"ShardIndex()",id:"get-shard",level:3},{value:"ShardIndex()",id:"mark-dirty",level:3},{value:"ShardIndex()",id:"is-valid",level:3},{value:"ShardIndex()",id:"is-empty",level:3},{value:"ShardIndex()",id:"check-world-file",level:3},{value:"Data Structure Examples",id:"data-structure-examples",level:2},{value:"World Options Structure",id:"world-options-structure",level:3},{value:"Server Data Structure",id:"server-data-structure",level:3},{value:"Enabled Mods Structure",id:"enabled-mods-structure",level:3},{value:"Save Format Upgrades",id:"save-format-upgrades",level:2},{value:"Version Management",id:"version-management",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Shard Setup",id:"basic-shard-setup",level:3},{value:"Cluster Management",id:"cluster-management",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"TheNet Integration",id:"thenet-integration",level:3},{value:"TheSim Integration",id:"thesim-integration",level:3},{value:"KnownModIndex Integration",id:"knownmodindex-integration",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"shard-index",children:"Shard Index"})}),"\n",(0,d.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Build Version"}),(0,d.jsx)(n.th,{children:"Change Date"}),(0,d.jsx)(n.th,{children:"Change Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsx)(n.tbody,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"676042"}),(0,d.jsx)(n.td,{children:"2025-06-21"}),(0,d.jsx)(n.td,{children:"stable"}),(0,d.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,d.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"ShardIndex"})," class provides comprehensive management of cluster shard data, including world generation options, server configuration, session management, and mod settings. This system enables persistent storage and retrieval of shard-specific information across game sessions and handles data migration between different save format versions."]}),"\n",(0,d.jsx)(n.h2,{id:"class-structure",children:"Class Structure"}),"\n",(0,d.jsx)(n.h3,{id:"shardindex-class",children:"ShardIndex Class"}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nCore class for managing shard data within a cluster environment, supporting both master and non-master shards."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Properties:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"ismaster"})," (boolean): Whether this shard is the master shard"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"slot"})," (number): Cluster slot number for save file organization"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"shard"}),' (string): Shard identifier (e.g., "Master", "Caves")']}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"version"})," (number): Save data format version for compatibility"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"world"})," (table): World generation options and settings"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"server"})," (table): Server configuration data"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"session_id"})," (string): Current session identifier"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"enabled_mods"})," (table): Enabled server modifications"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"initialization-and-basic-management",children:"Initialization and Basic Management"}),"\n",(0,d.jsx)(n.h3,{id:"constructor",children:"ShardIndex()"}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nCreates a new ShardIndex instance with default values and initializes data structures."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(ShardIndex): New ShardIndex instance"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Create new shard index\nlocal shard_index = ShardIndex()\n\n-- Check if it\'s a master shard\nif shard_index:IsMasterShardIndex() then\n    print("This is the master shard")\nend\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"get-shard-index-name",children:["ShardIndex",":GetShardIndexName","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nReturns the filename used for storing shard index data."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(string): Filename for shard index storage"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'local filename = shard_index:GetShardIndexName()\nprint("Shard data stored in:", filename)\n-- Output: "shardindex"\n'})}),"\n",(0,d.jsx)(n.h2,{id:"persistence-operations",children:"Persistence Operations"}),"\n",(0,d.jsxs)(n.h3,{id:"save",children:["ShardIndex",":Save","(callback)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nSaves current shard data to persistent storage, encoding all world options, server settings, and mod configurations."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"callback"})," (function): Optional callback function called after save completion"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Save shard data with callback\nshard_index:Save(function(success)\n    if success then\n        print("Shard data saved successfully")\n    else\n        print("Failed to save shard data")\n    end\nend)\n\n-- Save without callback\nshard_index:Save()\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"load",children:["ShardIndex",":Load","(callback)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nLoads shard data from persistent storage, handling different server types and validating data integrity."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"callback"})," (function): Optional callback function called after load completion"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Load shard data\nshard_index:Load(function(success)\n    if success then\n        print("Shard data loaded successfully")\n        local world_options = shard_index:GetGenOptions()\n        print("World preset:", world_options.preset)\n    else\n        print("Failed to load shard data")\n    end\nend)\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"load-shard-in-slot",children:["ShardIndex",":LoadShardInSlot","(slot, shard, callback)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nLoads specific shard data from a designated cluster slot and shard identifier."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"slot"})," (number): Cluster slot number"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"shard"})," (string): Shard identifier"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"callback"})," (function): Optional callback function"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Load caves shard from slot 1\nshard_index:LoadShardInSlot(1, "Caves", function(success)\n    if success then\n        print("Caves shard loaded from slot 1")\n    end\nend)\n\n-- Load master shard from specific slot\nshard_index:LoadShardInSlot(3, "Master", function(success)\n    print("Master shard load result:", success)\nend)\n'})}),"\n",(0,d.jsx)(n.h2,{id:"session-and-save-data-management",children:"Session and Save Data Management"}),"\n",(0,d.jsxs)(n.h3,{id:"get-save-data",children:["ShardIndex",":GetSaveData","(callback)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nRetrieves world save data for the current session, handling both cluster and legacy save paths."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"callback"})," (function): Callback function receiving save data"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Get current save data\nshard_index:GetSaveData(function(savedata)\n    if savedata then\n        print("World version:", savedata.version)\n        print("Entity count:", #savedata.ents)\n    else\n        print("No save data found")\n    end\nend)\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"save-current",children:["ShardIndex",":SaveCurrent","(onsavedcb, isshutdown)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nSaves the current world state and updates session information. Only available on server instances."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"onsavedcb"})," (function): Optional callback function called after save completion"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"isshutdown"})," (boolean): Whether this save is part of server shutdown"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Regular world save\nshard_index:SaveCurrent(function(success)\n    print("World save completed:", success)\nend, false)\n\n-- Shutdown save\nshard_index:SaveCurrent(function(success)\n    print("Shutdown save completed:", success)\n    -- Can safely exit now\nend, true)\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"on-generate-new-world",children:["ShardIndex",":OnGenerateNewWorld","(savedata, metadataStr, session_identifier, callback)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nHandles initial world generation and serializes new world data with session information."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"savedata"})," (table): Generated world data"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"metadataStr"})," (string): World metadata information"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"session_identifier"})," (string): Unique session identifier"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"callback"})," (function): Optional callback function"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Generate new world with custom settings\nlocal world_data = GenerateWorld(world_options)\nlocal metadata = CreateWorldMetadata(world_options)\nlocal session_id = CreateSessionIdentifier()\n\nshard_index:OnGenerateNewWorld(world_data, metadata, session_id, function(success)\n    if success then\n        print("New world generated and saved")\n    end\nend)\n'})}),"\n",(0,d.jsx)(n.h2,{id:"cluster-and-shard-management",children:"Cluster and Shard Management"}),"\n",(0,d.jsxs)(n.h3,{id:"new-shard-in-slot",children:["ShardIndex",":NewShardInSlot","(slot, shard)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nInitializes a new shard configuration in the specified cluster slot."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"slot"})," (number): Cluster slot number"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"shard"})," (string): Shard identifier"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Create new master shard in slot 1\nshard_index:NewShardInSlot(1, "Master")\n\n-- Create new caves shard in slot 2\nshard_index:NewShardInSlot(2, "Caves")\n\n-- Verify shard creation\nprint("Is master:", shard_index:IsMasterShardIndex())\nprint("Slot:", shard_index:GetSlot())\nprint("Shard:", shard_index:GetShard())\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"delete",children:["ShardIndex",":Delete","(callback, save_options)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nDeletes shard data while optionally preserving configuration settings for reuse."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"callback"})," (function): Optional callback function"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"save_options"})," (boolean): Whether to preserve settings for future use"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Delete shard but keep settings\nshard_index:Delete(function(success)\n    print("Shard deleted, settings preserved")\nend, true)\n\n-- Complete deletion\nshard_index:Delete(function(success)\n    print("Shard completely deleted")\nend, false)\n'})}),"\n",(0,d.jsx)(n.h2,{id:"world-configuration-management",children:"World Configuration Management"}),"\n",(0,d.jsxs)(n.h3,{id:"set-server-shard-data",children:["ShardIndex",":SetServerShardData","(customoptions, serverdata, onsavedcb)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nConfigures shard with world generation options and server settings, applying overrides and validating configuration."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"customoptions"})," (table): Custom world generation options"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"serverdata"})," (table): Server configuration data"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"onsavedcb"})," (function): Optional callback function"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Configure world with custom settings\nlocal world_options = {\n    preset = "SURVIVAL_TOGETHER",\n    overrides = {\n        season_start = "autumn",\n        day = "longday",\n        deerclops = "often"\n    }\n}\n\nlocal server_config = {\n    name = "My DST Server",\n    description = "Custom configured server",\n    game_mode = "survival",\n    max_players = 6\n}\n\nshard_index:SetServerShardData(world_options, server_config, function(success)\n    if success then\n        print("Shard configured successfully")\n    end\nend)\n'})}),"\n",(0,d.jsx)(n.h2,{id:"data-access-methods",children:"Data Access Methods"}),"\n",(0,d.jsxs)(n.h3,{id:"get-server-data",children:["ShardIndex",":GetServerData","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nReturns current server configuration data."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(table): Server configuration data"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'local server_info = shard_index:GetServerData()\nprint("Server name:", server_info.name)\nprint("Max players:", server_info.max_players)\nprint("Game mode:", server_info.game_mode)\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"get-gen-options",children:["ShardIndex",":GetGenOptions","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nReturns current world generation options and settings."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(table): World generation options"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'local world_options = shard_index:GetGenOptions()\nprint("World preset:", world_options.preset)\nprint("Season start:", world_options.overrides.season_start)\n\n-- Check specific world settings\nif world_options.overrides.deerclops == "often" then\n    print("Deerclops spawns frequently")\nend\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"get-session",children:["ShardIndex",":GetSession","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nReturns the current session identifier."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(string): Session identifier"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'local session = shard_index:GetSession()\nif session then\n    print("Current session:", session)\nelse\n    print("No active session")\nend\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"get-game-mode",children:["ShardIndex",":GetGameMode","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nReturns the current game mode setting."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(string): Game mode identifier"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'local game_mode = shard_index:GetGameMode()\nprint("Game mode:", game_mode)\n\n-- Handle different game modes\nif game_mode == "survival" then\n    print("Standard survival mode")\nelseif game_mode == "wilderness" then\n    print("Wilderness mode")\nend\n'})}),"\n",(0,d.jsx)(n.h2,{id:"mod-management",children:"Mod Management"}),"\n",(0,d.jsxs)(n.h3,{id:"get-enabled-server-mods",children:["ShardIndex",":GetEnabledServerMods","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nReturns enabled server modifications for master shards."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(table): Enabled server mods configuration"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'local enabled_mods = shard_index:GetEnabledServerMods()\nfor mod_name, mod_data in pairs(enabled_mods) do\n    print("Mod:", mod_name)\n    print("Enabled:", mod_data.enabled)\n    if mod_data.config_data then\n        print("Has custom configuration")\n    end\nend\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"load-enabled-server-mods",children:["ShardIndex",":LoadEnabledServerMods","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nLoads and applies enabled server modifications to the current session."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Load mods during server startup\nif shard_index:IsMasterShardIndex() then\n    shard_index:LoadEnabledServerMods()\n    print("Server mods loaded")\nend\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"set-enabled-server-mods",children:["ShardIndex",":SetEnabledServerMods","(enabled_mods)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nUpdates the enabled server modifications configuration for master shards."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"enabled_mods"})," (table): New mod configuration"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Enable specific mods with configuration\nlocal mod_config = {\n    ["workshop-123456"] = {\n        enabled = true,\n        config_data = {\n            setting1 = "value1",\n            setting2 = "value2"\n        }\n    },\n    ["workshop-789012"] = {\n        enabled = true,\n        config_data = {}\n    }\n}\n\nshard_index:SetEnabledServerMods(mod_config)\n'})}),"\n",(0,d.jsx)(n.h2,{id:"utility-methods",children:"Utility Methods"}),"\n",(0,d.jsxs)(n.h3,{id:"is-master-shard-index",children:["ShardIndex",":IsMasterShardIndex","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nChecks if this shard index represents the master shard."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["(boolean): ",(0,d.jsx)(n.code,{children:"true"})," if master shard, ",(0,d.jsx)(n.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:"if shard_index:IsMasterShardIndex() then\n    -- Only master shard can manage mods\n    shard_index:LoadEnabledServerMods()\nend\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"get-slot",children:["ShardIndex",":GetSlot","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nReturns the cluster slot number."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(number): Cluster slot number"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'local slot = shard_index:GetSlot()\nprint("Using cluster slot:", slot)\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"get-shard",children:["ShardIndex",":GetShard","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nReturns the shard identifier."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"(string): Shard identifier"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'local shard = shard_index:GetShard()\nprint("Shard identifier:", shard)\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"mark-dirty",children:["ShardIndex",":MarkDirty","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nMarks the shard data as dirty, requiring a save operation."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:"-- Mark data as dirty after modifications\nshard_index:MarkDirty()\n\n-- Save will be performed on next save cycle\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"is-valid",children:["ShardIndex",":IsValid","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nChecks if the shard index has valid data."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["(boolean): ",(0,d.jsx)(n.code,{children:"true"})," if valid, ",(0,d.jsx)(n.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'if shard_index:IsValid() then\n    print("Shard data is valid")\n    local options = shard_index:GetGenOptions()\nelse\n    print("Shard data is invalid")\nend\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"is-empty",children:["ShardIndex",":IsEmpty","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nChecks if the shard has no active session."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["(boolean): ",(0,d.jsx)(n.code,{children:"true"})," if empty, ",(0,d.jsx)(n.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'if shard_index:IsEmpty() then\n    print("No active world session")\nelse\n    print("World session active")\nend\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"check-world-file",children:["ShardIndex",":CheckWorldFile","()"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Status:"})," ",(0,d.jsx)(n.code,{children:"stable"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Description:"}),"\nVerifies if a world save file exists for the current session."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["(boolean): ",(0,d.jsx)(n.code,{children:"true"})," if world file exists, ",(0,d.jsx)(n.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Example:"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'if shard_index:CheckWorldFile() then\n    print("World save file found")\nelse\n    print("No world save file")\nend\n'})}),"\n",(0,d.jsx)(n.h2,{id:"data-structure-examples",children:"Data Structure Examples"}),"\n",(0,d.jsx)(n.h3,{id:"world-options-structure",children:"World Options Structure"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Example world.options structure\n{\n    preset = "SURVIVAL_TOGETHER",\n    overrides = {\n        season_start = "autumn",\n        day = "longday",\n        deerclops = "often",\n        weather = "dynamic",\n        temperature = "default"\n    },\n    playstyle = "survival"\n}\n'})}),"\n",(0,d.jsx)(n.h3,{id:"server-data-structure",children:"Server Data Structure"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Example server structure\n{\n    name = "My Server",\n    description = "Custom DST server",\n    game_mode = "survival",\n    max_players = 6,\n    pvp = false,\n    pause_when_empty = true,\n    encode_user_path = true\n}\n'})}),"\n",(0,d.jsx)(n.h3,{id:"enabled-mods-structure",children:"Enabled Mods Structure"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Example enabled_mods structure\n{\n    ["workshop-123456"] = {\n        enabled = true,\n        config_data = {\n            option1 = "value1",\n            option2 = 50\n        }\n    },\n    ["workshop-789012"] = {\n        enabled = false,\n        config_data = {}\n    }\n}\n'})}),"\n",(0,d.jsx)(n.h2,{id:"save-format-upgrades",children:"Save Format Upgrades"}),"\n",(0,d.jsx)(n.h3,{id:"version-management",children:"Version Management"}),"\n",(0,d.jsx)(n.p,{children:"The system includes automatic save format upgrades:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:"-- Version upgrade system\nlocal SHARDINDEX_VERSION = 5\n\n-- Automatic upgrades from older versions\n-- V1 \u2192 V2: Basic structure improvements\n-- V2 \u2192 V3: Mod configuration enhancements\n-- V3 \u2192 V4: Session management updates\n-- V4 \u2192 V5: Playstyle calculation additions\n"})}),"\n",(0,d.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,d.jsx)(n.h3,{id:"basic-shard-setup",children:"Basic Shard Setup"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Initialize and configure a new shard\nlocal shard_index = ShardIndex()\n\n-- Load existing data or create new\nshard_index:Load(function(success)\n    if success then\n        print("Existing shard loaded")\n    else\n        -- Create new shard\n        shard_index:NewShardInSlot(1, "Master")\n        \n        -- Configure world settings\n        local world_options = GetDefaultWorldOptions()\n        local server_config = GetDefaultServerConfig()\n        \n        shard_index:SetServerShardData(world_options, server_config)\n    end\nend)\n'})}),"\n",(0,d.jsx)(n.h3,{id:"cluster-management",children:"Cluster Management"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:'-- Manage multiple shards in a cluster\nlocal master_shard = ShardIndex()\nlocal caves_shard = ShardIndex()\n\n-- Load master shard\nmaster_shard:LoadShardInSlot(1, "Master", function(success)\n    if success and master_shard:IsMasterShardIndex() then\n        -- Load enabled mods\n        master_shard:LoadEnabledServerMods()\n        \n        -- Load caves shard\n        caves_shard:LoadShardInSlot(1, "Caves", function(caves_success)\n            if caves_success then\n                print("Cluster loaded successfully")\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,d.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,d.jsx)(n.h3,{id:"thenet-integration",children:"TheNet Integration"}),"\n",(0,d.jsx)(n.p,{children:"Network service integration for server management:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:"-- Session identifier management\nlocal session_id = TheNet:GetSessionIdentifier()\nshard_index.session_id = session_id\n"})}),"\n",(0,d.jsx)(n.h3,{id:"thesim-integration",children:"TheSim Integration"}),"\n",(0,d.jsx)(n.p,{children:"Persistent storage integration:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:"-- Cluster slot storage\nTheSim:SetPersistentStringInClusterSlot(slot, shard, filename, data)\nTheSim:GetPersistentStringInClusterSlot(slot, shard, filename, callback)\n"})}),"\n",(0,d.jsx)(n.h3,{id:"knownmodindex-integration",children:"KnownModIndex Integration"}),"\n",(0,d.jsx)(n.p,{children:"Mod management integration:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-lua",children:"-- Mod configuration management\nKnownModIndex:Enable(modname)\nKnownModIndex:SetConfigurationOption(modname, option, value)\n"})}),"\n",(0,d.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"./saveindex.md",children:"SaveGameIndex"}),": Individual save game management"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"./modindex.md",children:"KnownModIndex"}),": Mod installation and configuration"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"../core-systems/index.md#thenet",children:"TheNet"}),": Network and session services"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"../core-systems/index.md#thesim",children:"TheSim"}),": Simulation and persistence services"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.a,{href:"./savefileupgrades.md",children:"SaveFileUpgrades"}),": Save data format migration system"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}}}]);