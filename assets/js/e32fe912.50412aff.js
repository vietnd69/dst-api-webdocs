"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5644],{8451:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"api-vanilla/core/component-system","title":"Component System","description":"Don\'t Starve Together uses a Component System to add functionality and behaviors to entities. Each component represents a specific feature that an entity can possess.","source":"@site/docs/api-vanilla/core/component-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/component-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/component-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"component-system","title":"Component System","sidebar_position":2,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Entity System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/entity-system"},"next":{"title":"Component Interactions and Data Flow","permalink":"/dst-api-webdocs/docs/api-vanilla/core/component-interactions"}}');var s=t(4848),a=t(8453);const i={id:"component-system",title:"Component System",sidebar_position:2,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Component System",c={},d=[{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Adding and Using Components",id:"adding-and-using-components",level:2},{value:"Components and Replicas",id:"components-and-replicas",level:2},{value:"Common Components",id:"common-components",level:2},{value:"Character Components",id:"character-components",level:3},{value:"Item Components",id:"item-components",level:3},{value:"Structure Components",id:"structure-components",level:3},{value:"Creating Custom Components",id:"creating-custom-components",level:2},{value:"Advanced Component Usage",id:"advanced-component-usage",level:2},{value:"Creating Replicas for Components",id:"creating-replicas-for-components",level:2},{value:"Component Serialization",id:"component-serialization",level:2},{value:"Component Network Synchronization",id:"component-network-synchronization",level:2}];function r(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"component-system",children:"Component System"})}),"\n",(0,s.jsx)(e.p,{children:"Don't Starve Together uses a Component System to add functionality and behaviors to entities. Each component represents a specific feature that an entity can possess."}),"\n",(0,s.jsx)(e.h2,{id:"basic-concepts",children:"Basic Concepts"}),"\n",(0,s.jsx)(e.p,{children:"The Component System in DST allows:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Code reuse between different entities"}),"\n",(0,s.jsx)(e.li,{children:"Flexible addition/removal of features"}),"\n",(0,s.jsx)(e.li,{children:"Clear separation of code responsibilities"}),"\n",(0,s.jsx)(e.li,{children:"Easy extension through mods"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"adding-and-using-components",children:"Adding and Using Components"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Add components to entity\ninst:AddComponent("health")\ninst:AddComponent("combat")\ninst:AddComponent("inventory")\n\n-- Configure components\ninst.components.health:SetMaxHealth(150)\ninst.components.health:SetPercent(0.5)\n\ninst.components.combat:SetDefaultDamage(20)\ninst.components.combat:SetAttackPeriod(2)\n\n-- Call component methods\ninst.components.health:DoDelta(10) -- Increase HP\ninst.components.inventory:GiveItem(item)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"components-and-replicas",children:"Components and Replicas"}),"\n",(0,s.jsx)(e.p,{children:"In a multiplayer environment, DST uses two types of components:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Server Components"})," - Execute logic on the server"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Replica Components"})," - Simplified versions for clients"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In a prefab\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Add components for both client and server\n    MakeInventoryPhysics(inst)\n    \n    -- Define that entity has finished replication setup\n    inst.entity:SetPristine()\n    \n    -- Clients don\'t need server components\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add server components\n    inst:AddComponent("inventoryitem")\n    inst:AddComponent("stackable")\n    inst:AddComponent("edible")\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"common-components",children:"Common Components"}),"\n",(0,s.jsx)(e.h3,{id:"character-components",children:"Character Components"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Basic character components\ninst:AddComponent("health")       -- Health\ninst:AddComponent("hunger")       -- Hunger\ninst:AddComponent("sanity")       -- Sanity\ninst:AddComponent("inventory")    -- Inventory\ninst:AddComponent("locomotor")    -- Movement\ninst:AddComponent("combat")       -- Combat\ninst:AddComponent("temperature")  -- Temperature\ninst:AddComponent("moisture")     -- Moisture\n'})}),"\n",(0,s.jsx)(e.h3,{id:"item-components",children:"Item Components"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Common item components\ninst:AddComponent("inventoryitem")    -- Can be put in inventory\ninst:AddComponent("stackable")        -- Can be stacked\ninst:AddComponent("equippable")       -- Can be equipped\ninst:AddComponent("weapon")           -- Weapon\ninst:AddComponent("armor")            -- Armor\ninst:AddComponent("edible")           -- Can be eaten\ninst:AddComponent("fuel")             -- Fuel\ninst:AddComponent("tool")             -- Tool\ninst:AddComponent("finiteuses")       -- Limited durability\n'})}),"\n",(0,s.jsx)(e.h3,{id:"structure-components",children:"Structure Components"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Components for structures\ninst:AddComponent("workable")         -- Can be interacted with (mine, chop, etc.)\ninst:AddComponent("container")        -- Stores items\ninst:AddComponent("burnable")         -- Can burn\ninst:AddComponent("freezable")        -- Can freeze\ninst:AddComponent("grogginess")       -- Stun effect\ninst:AddComponent("childspawner")     -- Spawns child entities\ninst:AddComponent("perishable")       -- Deteriorates over time\n'})}),"\n",(0,s.jsx)(e.h2,{id:"creating-custom-components",children:"Creating Custom Components"}),"\n",(0,s.jsx)(e.p,{children:"To create a new component in a mod:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In components/mycomponent.lua\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self.value = 10\n    self.active = true\nend)\n\nfunction MyComponent:SetValue(val)\n    self.value = val\n    self.inst:PushEvent("valuechanged", {value = val})\nend\n\nfunction MyComponent:GetValue()\n    return self.value\nend\n\nfunction MyComponent:Activate()\n    self.active = true\nend\n\nfunction MyComponent:Deactivate()\n    self.active = false\nend\n\nfunction MyComponent:OnSave()\n    return {\n        value = self.value,\n        active = self.active\n    }\nend\n\nfunction MyComponent:OnLoad(data)\n    self.value = data.value or self.value\n    self.active = data.active or self.active\nend\n\nreturn MyComponent\n'})}),"\n",(0,s.jsx)(e.p,{children:"Register and use the component:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\nlocal MyComponent = require "components/mycomponent"\nAddComponentPostInit("mycomponent", function(self, inst)\n    -- Modify existing component (optional)\nend)\n\n-- In prefab\nAddPrefabPostInit("myprefab", function(inst)\n    if not TheWorld.ismastersim then return end\n    \n    inst:AddComponent("mycomponent")\n    inst.components.mycomponent:SetValue(20)\nend)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"advanced-component-usage",children:"Advanced Component Usage"}),"\n",(0,s.jsx)(e.p,{children:"See these case studies for examples of advanced component usage:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-forge",children:"Case Study - The Forge Mod"})," - A complete game mode with custom components"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-component",children:"Custom Component Example"})," - Creating and using custom components"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"creating-replicas-for-components",children:"Creating Replicas for Components"}),"\n",(0,s.jsx)(e.p,{children:"To make a component work on clients:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In components/mycomponent_replica.lua\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self._value = net_int(inst.GUID, "mycomponent.value", "valuedirty")\n    \n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("valuedirty", function()\n            inst:PushEvent("valuechanged", {value = self:GetValue()})\n        end)\n    end\nend)\n\nfunction MyComponent:SetValue(val)\n    if TheWorld.ismastersim then\n        self._value:set(val)\n    end\nend\n\nfunction MyComponent:GetValue()\n    return self._value:value()\nend\n\nreturn MyComponent\n'})}),"\n",(0,s.jsx)(e.p,{children:"Register the replica:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\nlocal MyComponent = require "components/mycomponent"\nlocal MyComponentReplica = require "components/mycomponent_replica"\n\n-- Register replica when component is added to entity\nAddReplicableComponent("mycomponent")\n'})}),"\n",(0,s.jsx)(e.h2,{id:"component-serialization",children:"Component Serialization"}),"\n",(0,s.jsx)(e.p,{children:"Components support saving and loading data:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Save component data\nfunction MyComponent:OnSave()\n    return {\n        value = self.value,\n        items = self.items,\n        timestamp = self.timestamp\n    }\nend\n\n-- Load component data\nfunction MyComponent:OnLoad(data)\n    if data then\n        self.value = data.value or self.value\n        self.items = data.items or {}\n        self.timestamp = data.timestamp or 0\n    end\nend\n"})}),"\n",(0,s.jsxs)(e.p,{children:["For a real-world example of component serialization, see the ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-wormhole",children:"Wormhole Marks case study"}),", which demonstrates saving and restoring wormhole pair associations across game sessions. This case study showcases how to create custom components that track relationships between entities and persist that data between game sessions."]}),"\n",(0,s.jsx)(e.h2,{id:"component-network-synchronization",children:"Component Network Synchronization"}),"\n",(0,s.jsx)(e.p,{children:"Synchronize data between server and clients:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In component\nfunction MyComponent:ctor(inst)\n    self.inst = inst\n    -- Network variables defined with GUID, path, and event name\n    self.value = net_int(inst.GUID, "mycomponent.value", "mycomponent.valuedirty")\n    self.active = net_bool(inst.GUID, "mycomponent.active", "mycomponent.activedirty")\nend\n\nfunction MyComponent:SetValue(val)\n    self.value:set(val) -- Set value and send event to clients\nend\n\n-- In prefab\ninst:ListenForEvent("mycomponent.valuedirty", function()\n    local val = inst.components.mycomponent.value:value()\n    -- Handle value change\nend)\n'})})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(r,{...n})}):r(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>l});var o=t(6540);const s={},a=o.createContext(s);function i(n){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),o.createElement(a.Provider,{value:e},n.children)}}}]);