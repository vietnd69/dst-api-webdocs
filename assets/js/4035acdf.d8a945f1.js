"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2569],{1104:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api-vanilla/utils/file-utils","title":"File Utils","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/utils/file-utils.md","sourceDirName":"api-vanilla/utils","slug":"/api-vanilla/utils/file-utils","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/file-utils","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"file-utils","title":"File Utils","sidebar_position":5,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Debug Utils","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/debug-utils"},"next":{"title":"Vector Utilities","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/vector"}}');var a=n(4848),l=n(8453);const t={id:"file-utils",title:"File Utils",sidebar_position:5,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},r="File Utils",d={},o=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Core File Operations",id:"core-file-operations",level:2},{value:"Multi-Shard File Operations",id:"multi-shard-file-operations",level:2},{value:"File System Paths",id:"file-system-paths",level:2},{value:"Data Serialization",id:"data-serialization",level:2},{value:"File Verification",id:"file-verification",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Mod Configuration",id:"mod-configuration",level:3},{value:"Player Data Management",id:"player-data-management",level:3},{value:"Hot Reloading for Development",id:"hot-reloading-for-development",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Integration with Other Systems",id:"integration-with-other-systems",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.p,{children:(0,a.jsx)(i.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"file-utils",children:"File Utils"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.em,{children:"API Version: 619045"})}),"\n",(0,a.jsx)(i.p,{children:"File Utils provide functionality for reading, writing, and managing files in Don't Starve Together mods. These utilities allow mods to persistently store configuration data, save game state, and access file system resources."}),"\n",(0,a.jsx)(i.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-lua",children:'-- Save data to a file\nTheSim:SetPersistentString("mymod_config", json.encode({\n    enabled = true,\n    difficulty = "hard",\n    custom_options = {\n        spawn_rate = 0.5,\n        damage_multiplier = 1.2\n    }\n}), false)\n\n-- Load data from a file\nTheSim:GetPersistentString("mymod_config", function(success, data)\n    if success then\n        local config = json.decode(data)\n        print("Mod enabled: " .. tostring(config.enabled))\n        print("Difficulty: " .. config.difficulty)\n    else\n        print("Failed to load configuration")\n    end\nend)\n'})}),"\n",(0,a.jsx)(i.h2,{id:"core-file-operations",children:"Core File Operations"}),"\n",(0,a.jsxs)(i.table,{children:[(0,a.jsx)(i.thead,{children:(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.th,{children:"Function"}),(0,a.jsx)(i.th,{children:"Description"})]})}),(0,a.jsxs)(i.tbody,{children:[(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:(0,a.jsx)(i.code,{children:"TheSim:GetPersistentString(filename, callback)"})}),(0,a.jsx)(i.td,{children:"Reads data from a file with callback"})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:(0,a.jsx)(i.code,{children:"TheSim:SetPersistentString(filename, data, compress, callback)"})}),(0,a.jsx)(i.td,{children:"Writes data to a file"})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:(0,a.jsx)(i.code,{children:"TheSim:ErasePersistentString(filename, callback)"})}),(0,a.jsx)(i.td,{children:"Deletes a file"})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:(0,a.jsx)(i.code,{children:"TheSim:GetFileList(directory)"})}),(0,a.jsx)(i.td,{children:"Gets a list of files in a directory"})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:(0,a.jsx)(i.code,{children:"TheSim:GetFileModificationTime(filename)"})}),(0,a.jsx)(i.td,{children:"Gets last modification time of a file"})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:(0,a.jsx)(i.code,{children:"TheSim:OnAssetPathResolve(assetfile, resolvedpath)"})}),(0,a.jsx)(i.td,{children:"Resolves an asset path"})]})]})]}),"\n",(0,a.jsx)(i.h2,{id:"multi-shard-file-operations",children:"Multi-Shard File Operations"}),"\n",(0,a.jsx)(i.p,{children:"For clusters with multiple shards (servers):"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-lua",children:"-- Save data in a specific cluster slot\nTheSim:SetPersistentStringInClusterSlot(slot_number, shard_id, filename, data, compress, callback)\n\n-- Load data from a specific cluster slot\nTheSim:GetPersistentStringInClusterSlot(slot_number, shard_id, filename, callback)\n"})}),"\n",(0,a.jsx)(i.h2,{id:"file-system-paths",children:"File System Paths"}),"\n",(0,a.jsx)(i.p,{children:"Don't Starve Together organizes files in specific locations:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Mod Configuration"}),": Files in the mod's directory"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Save Data"}),": Stored in the game's save directory"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Cluster Data"}),": Server-specific data stored in cluster folders"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Asset Data"}),": Game assets like textures, animations, and sounds"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"data-serialization",children:"Data Serialization"}),"\n",(0,a.jsx)(i.p,{children:"Data is typically serialized before saving to files:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-lua",children:'-- Save complex data structure using json encoding\nlocal data = {\n    player_stats = {\n        health = 100,\n        hunger = 75,\n        sanity = 50\n    },\n    world_state = {\n        day = 10,\n        season = "summer"\n    }\n}\n\nTheSim:SetPersistentString("gamestate", json.encode(data), false)\n\n-- Alternative serialization using DataDumper\nlocal serialized = DataDumper(data)\nTheSim:SetPersistentString("gamestate_lua", serialized, false)\n'})}),"\n",(0,a.jsx)(i.h2,{id:"file-verification",children:"File Verification"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-lua",children:'-- Check if files exist (batch operation)\nTheSim:StartFileExistsAsync()\nTheSim:AddBatchVerifyFileExists("path/to/file1.lua")\nTheSim:AddBatchVerifyFileExists("path/to/file2.lua")\n\n-- For KLUMP encrypted files\nlocal data = TheSim:LoadKlumpFile("encrypted_file.lua", cipher)\nlocal string_data = TheSim:LoadKlumpString("encrypted_file.lua", cipher)\n'})}),"\n",(0,a.jsx)(i.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsx)(i.h3,{id:"mod-configuration",children:"Mod Configuration"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-lua",children:'-- Save mod configuration\nlocal function SaveModConfig(config)\n    TheSim:SetPersistentString("mymod_config", json.encode(config), false, function()\n        print("Configuration saved successfully")\n    end)\nend\n\n-- Load mod configuration\nlocal function LoadModConfig(callback)\n    TheSim:GetPersistentString("mymod_config", function(success, data)\n        if success then\n            local config = json.decode(data)\n            callback(config)\n        else\n            -- Create default configuration if none exists\n            local default_config = { enabled = true, value = 100 }\n            SaveModConfig(default_config)\n            callback(default_config)\n        end\n    end)\nend\n'})}),"\n",(0,a.jsx)(i.h3,{id:"player-data-management",children:"Player Data Management"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-lua",children:'-- Save player-specific data\nlocal function SavePlayerData(userid, data)\n    local filename = "player_data_" .. userid\n    TheSim:SetPersistentString(filename, json.encode(data), false)\nend\n\n-- Load player-specific data\nlocal function LoadPlayerData(userid, callback)\n    local filename = "player_data_" .. userid\n    TheSim:GetPersistentString(filename, function(success, data)\n        if success then\n            callback(json.decode(data))\n        else\n            callback({ visits = 1, last_login = os.time() })\n        end\n    end)\nend\n'})}),"\n",(0,a.jsx)(i.h3,{id:"hot-reloading-for-development",children:"Hot Reloading for Development"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-lua",children:'-- Check if a file was modified since last check\nlocal file_cache = {}\n\nlocal function CheckForFileChanges(filename)\n    local current_time = TheSim:GetFileModificationTime(filename)\n    \n    if file_cache[filename] ~= nil and file_cache[filename] ~= current_time then\n        print("File changed: " .. filename)\n        -- Reload the file...\n    end\n    \n    file_cache[filename] = current_time\nend\n\n-- Usage in development environment\nlocal function CheckModFiles()\n    CheckForFileChanges("mymod/scripts/myfile.lua")\nend\n\ninst:DoPeriodicTask(5, CheckModFiles) -- Check every 5 seconds\n'})}),"\n",(0,a.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Error Handling"}),": Always check for success in file callbacks"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Compression"}),": Use compression for large data files"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Serialization"}),": Use json.encode/decode for complex data structures"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Backward Compatibility"}),": Include version information in saved data"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Performance"}),": Avoid excessive file operations, especially in render loops"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Debugging"}),": Use print statements to verify file operations"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"integration-with-other-systems",children:"Integration with Other Systems"}),"\n",(0,a.jsx)(i.p,{children:"File Utils work closely with:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"PlayerProfile"}),": For player-specific settings"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"ModIndex"}),": For mod information and settings"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"SaveIndex"}),": For game save management"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Asset System"}),": For loading game assets"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"see-also",children:"See also"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.a,{href:"/dst-api-webdocs/docs/api-vanilla/global-objects/thesim",children:"TheSim"})," - Global simulation object with file functions"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/mod-structure",children:"Modding System"})," - For mod structure and configuration"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/entity-system",children:"Asset System"})," - For game asset management"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/snippets/saving-loading",children:"Saving and Loading"})," - For save game examples"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.a,{href:"/dst-api-webdocs/docs/api-vanilla/utils/debug-utils",children:"Debug Utils"})," - For debugging file operations"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>r});var s=n(6540);const a={},l=s.createContext(a);function t(e){const i=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(l.Provider,{value:i},e.children)}}}]);