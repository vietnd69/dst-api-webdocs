"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3250],{1158:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/examples/custom-weather-effects","title":"Creating Custom Weather Effects","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/examples/custom-weather-effects.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/custom-weather-effects","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-weather-effects","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"id":"custom-weather-effects","title":"Creating Custom Weather Effects","sidebar_position":13,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Creating Custom Game Modes","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-game-mode"},"next":{"title":"Performance Optimization","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/optimization"}}');var s=t(4848),r=t(8453);const a={id:"custom-weather-effects",title:"Creating Custom Weather Effects",sidebar_position:13,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="Creating Custom Weather Effects",l={},c=[{value:"Understanding Weather in DST",id:"understanding-weather-in-dst",level:2},{value:"Basic Weather Effect Structure",id:"basic-weather-effect-structure",level:2},{value:"Creating a Simple Rain Effect",id:"creating-a-simple-rain-effect",level:2},{value:"Weather Controller",id:"weather-controller",level:2},{value:"Advanced Precipitation Effects",id:"advanced-precipitation-effects",level:2},{value:"Custom Snow Effect",id:"custom-snow-effect",level:3},{value:"Acid Rain Effect",id:"acid-rain-effect",level:3},{value:"Visual Weather Effects",id:"visual-weather-effects",level:2},{value:"Fog Effect",id:"fog-effect",level:3},{value:"Lightning Effect",id:"lightning-effect",level:3},{value:"Screen Effects",id:"screen-effects",level:2},{value:"Sandstorm Effect",id:"sandstorm-effect",level:3},{value:"Integrating Weather with Seasons",id:"integrating-weather-with-seasons",level:2},{value:"Biome-Specific Weather",id:"biome-specific-weather",level:2},{value:"Weather with Gameplay Impact",id:"weather-with-gameplay-impact",level:2},{value:"Meteor Shower",id:"meteor-shower",level:3},{value:"Client-Server Weather Synchronization",id:"client-server-weather-synchronization",level:2},{value:"Weather Particle Systems",id:"weather-particle-systems",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debugging Tips",id:"debugging-tips",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"creating-custom-weather-effects",children:"Creating Custom Weather Effects"})}),"\n",(0,s.jsx)(e.p,{children:"This guide focuses on creating custom weather effects in Don't Starve Together. Weather effects can add immersion, gameplay challenges, and unique visual elements to your mod."}),"\n",(0,s.jsx)(e.h2,{id:"understanding-weather-in-dst",children:"Understanding Weather in DST"}),"\n",(0,s.jsx)(e.p,{children:"Don't Starve Together's weather system consists of several components:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Precipitation"}),": Rain, snow, and other falling particles"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Visual Effects"}),": Fog, lightning, screen overlays"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Sound Effects"}),": Thunder, wind, ambient sounds"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Gameplay Effects"}),": Temperature changes, wetness, lightning strikes"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"World State"}),": Season-dependent weather conditions"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"basic-weather-effect-structure",children:"Basic Weather Effect Structure"}),"\n",(0,s.jsx)(e.p,{children:"A custom weather effect typically requires:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"A prefab for the weather controller"}),"\n",(0,s.jsx)(e.li,{children:"Visual effects (particles, screen shaders)"}),"\n",(0,s.jsx)(e.li,{children:"Sound effects"}),"\n",(0,s.jsx)(e.li,{children:"Integration with the world state"}),"\n",(0,s.jsx)(e.li,{children:"Gameplay impact (optional)"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"creating-a-simple-rain-effect",children:"Creating a Simple Rain Effect"}),"\n",(0,s.jsx)(e.p,{children:"Let's create a custom colored rain effect as a basic example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/colored_rain.lua\nlocal assets = {\n    Asset("ANIM", "anim/rain.zip"),\n    Asset("ANIM", "anim/splash_ripple.zip"),\n    Asset("ANIM", "anim/splash_sink.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    -- Add the precipitation component\n    if not TheNet:IsDedicated() then\n        inst:AddComponent("precipitation")\n        \n        -- Set custom rain color (purple rain in this example)\n        inst.components.precipitation.tint = Vector3(0.8, 0.5, 1.0)\n        inst.components.precipitation:SetLevel(1)\n    end\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("colored_rain", fn, assets)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"weather-controller",children:"Weather Controller"}),"\n",(0,s.jsx)(e.p,{children:"To manage your custom weather, create a weather controller:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/custom_weather_controller.lua\nlocal function OnUpdate(inst)\n    -- Update weather conditions periodically\n    if TheWorld.state.isday then\n        -- Daytime weather behavior\n        if math.random() < 0.1 then\n            -- 10% chance to start rain during day\n            inst:StartRain()\n        end\n    else\n        -- Nighttime weather behavior\n        if math.random() < 0.2 then\n            -- 20% chance to start rain during night\n            inst:StartRain()\n        end\n    end\nend\n\nlocal function StartRain(inst)\n    if not inst.is_raining then\n        inst.is_raining = true\n        \n        -- Spawn the rain effect\n        if inst.rain_fx == nil then\n            inst.rain_fx = SpawnPrefab("colored_rain")\n        end\n        \n        -- Play rain sound\n        if not inst.sound_playing then\n            inst.SoundEmitter:PlaySound("dontstarve/rain/rain", "rain")\n            inst.sound_playing = true\n        end\n        \n        -- Notify world of rain state\n        TheWorld:PushEvent("customrainstatechanged", { raining = true })\n        \n        -- Schedule rain to stop after some time\n        inst.rain_task = inst:DoTaskInTime(10 + math.random() * 30, function()\n            inst:StopRain()\n        end)\n    end\nend\n\nlocal function StopRain(inst)\n    if inst.is_raining then\n        inst.is_raining = false\n        \n        -- Remove rain effect\n        if inst.rain_fx ~= nil then\n            inst.rain_fx:Remove()\n            inst.rain_fx = nil\n        end\n        \n        -- Stop rain sound\n        if inst.sound_playing then\n            inst.SoundEmitter:KillSound("rain")\n            inst.sound_playing = false\n        end\n        \n        -- Notify world of rain state\n        TheWorld:PushEvent("customrainstatechanged", { raining = false })\n        \n        -- Cancel any pending rain task\n        if inst.rain_task ~= nil then\n            inst.rain_task:Cancel()\n            inst.rain_task = nil\n        end\n    end\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("CLASSIFIED")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    inst.is_raining = false\n    inst.sound_playing = false\n    \n    -- Add methods\n    inst.StartRain = StartRain\n    inst.StopRain = StopRain\n    \n    -- Start periodic updates\n    inst:DoPeriodicTask(60, OnUpdate) -- Check weather changes every minute\n    \n    -- Respond to season changes\n    inst:WatchWorldState("season", function(inst, season)\n        if season == "winter" then\n            -- No rain in winter\n            inst:StopRain()\n        elseif season == "spring" then\n            -- More frequent rain in spring\n            if math.random() < 0.5 then\n                inst:StartRain()\n            end\n        end\n    end)\n    \n    return inst\nend\n\nreturn Prefab("custom_weather_controller", fn)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"advanced-precipitation-effects",children:"Advanced Precipitation Effects"}),"\n",(0,s.jsx)(e.h3,{id:"custom-snow-effect",children:"Custom Snow Effect"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/custom_snow.lua\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    if not TheNet:IsDedicated() then\n        inst:AddComponent("precipitation")\n        \n        -- Configure as snow\n        inst.components.precipitation.type = "snow"\n        inst.components.precipitation:SetLevel(1)\n        \n        -- Custom snow color (blue tint)\n        inst.components.precipitation.tint = Vector3(0.7, 0.8, 1.0)\n    end\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("custom_snow", fn)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"acid-rain-effect",children:"Acid Rain Effect"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/acid_rain.lua\nlocal function OnRainImpact(inst, x, y, z)\n    -- Spawn acid splash effect\n    local splash = SpawnPrefab("acid_splash")\n    if splash then\n        splash.Transform:SetPosition(x, 0, z)\n    end\n    \n    -- Damage entities in the area\n    local ents = TheSim:FindEntities(x, 0, z, 1, nil, {"FX", "NOCLICK", "DECOR", "INLIMBO"})\n    for _, ent in ipairs(ents) do\n        if ent.components.health ~= nil and not ent:HasTag("acidproof") then\n            ent.components.health:DoDelta(-1) -- Small damage from acid rain\n        end\n    end\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    if not TheNet:IsDedicated() then\n        inst:AddComponent("precipitation")\n        \n        -- Set acid rain color (greenish)\n        inst.components.precipitation.tint = Vector3(0.7, 1.0, 0.3)\n        inst.components.precipitation:SetLevel(1)\n        \n        -- Add impact callback\n        inst.components.precipitation.OnRainImpact = OnRainImpact\n    end\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("acid_rain", fn)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"visual-weather-effects",children:"Visual Weather Effects"}),"\n",(0,s.jsx)(e.h3,{id:"fog-effect",children:"Fog Effect"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/custom_fog.lua\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    -- Add fog component\n    if not TheNet:IsDedicated() then\n        inst:AddComponent("fogmanager")\n        inst.components.fogmanager:SetFogColor(0.8, 0.8, 0.9) -- Light gray fog\n        inst.components.fogmanager:SetFogScale(0.5) -- Medium density\n        inst.components.fogmanager:StartFog()\n    end\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("custom_fog", fn)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"lightning-effect",children:"Lightning Effect"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/custom_lightning.lua\nlocal function DoLightningStrike(inst, x, z)\n    -- Create visual effect\n    local fx = SpawnPrefab("lightning")\n    if fx ~= nil then\n        fx.Transform:SetPosition(x, 0, z)\n    end\n    \n    -- Create thunder sound\n    inst.SoundEmitter:PlaySound("dontstarve/rain/thunder_close")\n    \n    -- Damage nearby entities\n    local ents = TheSim:FindEntities(x, 0, z, 4, nil, {"FX", "NOCLICK", "DECOR", "INLIMBO"})\n    for _, ent in ipairs(ents) do\n        if ent.components.health ~= nil and not ent:HasTag("lightningproof") then\n            ent.components.health:DoDelta(-TUNING.LIGHTNING_DAMAGE)\n        end\n        \n        -- Set things on fire\n        if ent.components.burnable ~= nil then\n            ent.components.burnable:Ignite()\n        end\n    end\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Periodically spawn lightning\n    inst:DoPeriodicTask(5 + math.random() * 10, function()\n        -- Find a valid position\n        local x, z\n        if ThePlayer ~= nil then\n            local px, py, pz = ThePlayer.Transform:GetWorldPosition()\n            local angle = math.random() * 2 * PI\n            local dist = 10 + math.random() * 20\n            x = px + math.cos(angle) * dist\n            z = pz + math.sin(angle) * dist\n        else\n            x, z = 0, 0\n        end\n        \n        -- Do the lightning strike\n        DoLightningStrike(inst, x, z)\n    end)\n    \n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("custom_lightning", fn)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"screen-effects",children:"Screen Effects"}),"\n",(0,s.jsx)(e.h3,{id:"sandstorm-effect",children:"Sandstorm Effect"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/sandstorm_effect.lua\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    if not TheNet:IsDedicated() then\n        -- Add screen flash component for the sandstorm effect\n        inst:AddComponent("screenflash")\n        inst.components.screenflash:SetColor(0.9, 0.7, 0.3) -- Sandy color\n        inst.components.screenflash:SetIntensity(0.2) -- Subtle effect\n        inst.components.screenflash:StartFlash()\n        \n        -- Add ambient sound\n        inst.entity:AddSoundEmitter()\n        inst.SoundEmitter:PlaySound("dontstarve/common/sandstorm", "sandstorm")\n    end\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add gameplay effects\n    inst:DoPeriodicTask(1, function()\n        -- Affect players in the world\n        for _, player in ipairs(AllPlayers) do\n            -- Reduce visibility\n            if player.components.playervision ~= nil then\n                player.components.playervision:SetCustomCCTable({\n                    brightness = 0,\n                    contrast = 0,\n                    saturation = -0.3,\n                    tint = {r = 0.9, g = 0.8, b = 0.6}\n                })\n            end\n            \n            -- Slow movement\n            if player.components.locomotor ~= nil then\n                player.components.locomotor:SetExternalSpeedMultiplier(inst, "sandstorm", 0.7)\n            end\n        end\n    end)\n    \n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("sandstorm_effect", fn)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"integrating-weather-with-seasons",children:"Integrating Weather with Seasons"}),"\n",(0,s.jsx)(e.p,{children:"To make your weather effects respond to seasons:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\nAddPrefabPostInit("world", function(inst)\n    if TheWorld.ismastersim then\n        -- Spawn our weather controller\n        local weather_controller = SpawnPrefab("custom_weather_controller")\n        \n        -- Track seasons\n        inst:WatchWorldState("season", function(inst, season)\n            if season == "winter" then\n                -- Winter weather\n                if weather_controller.current_effect ~= nil then\n                    weather_controller.current_effect:Remove()\n                end\n                weather_controller.current_effect = SpawnPrefab("custom_snow")\n            elseif season == "summer" then\n                -- Summer weather\n                if weather_controller.current_effect ~= nil then\n                    weather_controller.current_effect:Remove()\n                end\n                weather_controller.current_effect = SpawnPrefab("sandstorm_effect")\n            elseif season == "spring" then\n                -- Spring weather (more rain)\n                if weather_controller.current_effect ~= nil then\n                    weather_controller.current_effect:Remove()\n                end\n                weather_controller.current_effect = SpawnPrefab("colored_rain")\n            else\n                -- Default weather\n                if weather_controller.current_effect ~= nil then\n                    weather_controller.current_effect:Remove()\n                    weather_controller.current_effect = nil\n                end\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"biome-specific-weather",children:"Biome-Specific Weather"}),"\n",(0,s.jsx)(e.p,{children:"To create weather that only occurs in specific biomes:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\nAddPrefabPostInit("world", function(inst)\n    if TheWorld.ismastersim then\n        -- Check for players in specific biomes periodically\n        inst:DoPeriodicTask(10, function()\n            for _, player in ipairs(AllPlayers) do\n                local x, y, z = player.Transform:GetWorldPosition()\n                local tile = TheWorld.Map:GetTileAtPoint(x, y, z)\n                \n                if tile == GROUND.MARSH then\n                    -- Special weather in marsh biome\n                    local fx = SpawnPrefab("marsh_fog")\n                    fx.Transform:SetPosition(x, 0, z)\n                elseif tile == GROUND.DESERT then\n                    -- Special weather in desert biome\n                    local fx = SpawnPrefab("sandstorm_effect")\n                    fx.Transform:SetPosition(x, 0, z)\n                end\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"weather-with-gameplay-impact",children:"Weather with Gameplay Impact"}),"\n",(0,s.jsx)(e.h3,{id:"meteor-shower",children:"Meteor Shower"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/meteor_shower.lua\nlocal function SpawnMeteor(inst)\n    -- Find a valid position\n    local x, z\n    if ThePlayer ~= nil then\n        local px, py, pz = ThePlayer.Transform:GetWorldPosition()\n        local angle = math.random() * 2 * PI\n        local dist = 5 + math.random() * 15\n        x = px + math.cos(angle) * dist\n        z = pz + math.sin(angle) * dist\n    else\n        x, z = 0, 0\n    end\n    \n    -- Spawn warning effect\n    local warning = SpawnPrefab("meteor_shadow")\n    warning.Transform:SetPosition(x, 0, z)\n    \n    -- Spawn actual meteor after delay\n    inst:DoTaskInTime(2, function()\n        local meteor = SpawnPrefab("meteor")\n        meteor.Transform:SetPosition(x, 20, z)\n        \n        -- Apply velocity for falling effect\n        meteor.Physics:SetVel(0, -15, 0)\n        \n        -- Set up impact\n        meteor:DoTaskInTime(1, function()\n            -- Create explosion\n            local explosion = SpawnPrefab("explode_small")\n            explosion.Transform:SetPosition(x, 0, z)\n            \n            -- Damage nearby entities\n            local ents = TheSim:FindEntities(x, 0, z, 3, nil, {"FX", "NOCLICK", "DECOR", "INLIMBO"})\n            for _, ent in ipairs(ents) do\n                if ent.components.health ~= nil then\n                    ent.components.health:DoDelta(-20)\n                end\n                \n                if ent.components.burnable ~= nil then\n                    ent.components.burnable:Ignite()\n                end\n            end\n            \n            -- Spawn resources\n            local rocks = math.random(1, 3)\n            for i = 1, rocks do\n                local rock = SpawnPrefab("rocks")\n                rock.Transform:SetPosition(x + math.random(-1, 1), 0, z + math.random(-1, 1))\n            end\n            \n            -- Sometimes spawn rare resources\n            if math.random() < 0.2 then\n                local goldnugget = SpawnPrefab("goldnugget")\n                goldnugget.Transform:SetPosition(x, 0, z)\n            end\n            \n            -- Remove meteor\n            meteor:Remove()\n        end)\n    end)\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Spawn meteors periodically\n    inst:DoPeriodicTask(5 + math.random() * 5, function()\n        SpawnMeteor(inst)\n    end)\n    \n    -- Play ambient sound\n    inst.SoundEmitter:PlaySound("dontstarve/common/meteor_shower", "meteor_shower")\n    \n    -- Auto-remove after some time\n    inst:DoTaskInTime(60 + math.random() * 60, function()\n        inst:Remove()\n    end)\n    \n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("meteor_shower", fn)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"client-server-weather-synchronization",children:"Client-Server Weather Synchronization"}),"\n",(0,s.jsx)(e.p,{children:"For multiplayer compatibility, ensure weather effects are properly synchronized:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\n-- Define network variables\nAddModRPCHandler("CustomWeather", "SyncWeather", function(player, weather_type, intensity)\n    -- Server received weather sync request\n    if TheWorld.ismastersim then\n        -- Broadcast to all clients\n        for _, p in ipairs(AllPlayers) do\n            if p ~= player then\n                SendModRPCToClient(GetClientModRPC("CustomWeather", "ApplyWeather"), p.userid, weather_type, intensity)\n            end\n        end\n        \n        -- Apply weather on server\n        local weather = SpawnPrefab(weather_type)\n        if weather ~= nil and weather.components.precipitation ~= nil then\n            weather.components.precipitation:SetLevel(intensity)\n        end\n    end\nend)\n\nAddModRPCHandler("CustomWeather", "ApplyWeather", function(player, weather_type, intensity)\n    -- Client received weather sync\n    if not TheWorld.ismastersim then\n        local weather = SpawnPrefab(weather_type)\n        if weather ~= nil and weather.components.precipitation ~= nil then\n            weather.components.precipitation:SetLevel(intensity)\n        end\n    end\nend)\n\n-- Weather controller with network sync\nAddPrefabPostInit("custom_weather_controller", function(inst)\n    if TheWorld.ismastersim then\n        -- Add method to sync weather\n        inst.SyncWeatherToClients = function(weather_type, intensity)\n            for _, player in ipairs(AllPlayers) do\n                SendModRPCToClient(GetClientModRPC("CustomWeather", "ApplyWeather"), player.userid, weather_type, intensity)\n            end\n        end\n        \n        -- Use this method when changing weather\n        local old_start_rain = inst.StartRain\n        inst.StartRain = function(inst)\n            old_start_rain(inst)\n            inst:SyncWeatherToClients("colored_rain", 1)\n        end\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"weather-particle-systems",children:"Weather Particle Systems"}),"\n",(0,s.jsx)(e.p,{children:"For custom weather particles:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In scripts/prefabs/leaf_storm.lua\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    -- Add particle emitter\n    inst:AddComponent("particleemitter")\n    inst.components.particleemitter:SetParticleTexture("fx/leaf.tex")\n    inst.components.particleemitter:SetSpawnRate(20)\n    inst.components.particleemitter:SetMaxLifetime(5)\n    inst.components.particleemitter:SetMaxParticles(100)\n    inst.components.particleemitter:SetRotationStatus(true)\n    inst.components.particleemitter:SetColourEnvelope(\n        Colour(1, 1, 1, 0.5),  -- Start color\n        Colour(1, 1, 1, 0)     -- End color\n    )\n    inst.components.particleemitter:SetScaleEnvelope(\n        Vector3(0.5, 0.5, 0.5),  -- Start scale\n        Vector3(0.2, 0.2, 0.2)   -- End scale\n    )\n    inst.components.particleemitter:SetAcceleration(Vector3(1, -0.1, 1))  -- Wind direction\n    inst.components.particleemitter:SetSortOrder(3)\n    inst.components.particleemitter:EnableDepthTest(true)\n    inst.components.particleemitter:Start()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("leaf_storm", fn)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Performance"}),": Weather effects can be resource-intensive. Use particle systems efficiently and consider reducing effects for players with lower-end hardware."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Multiplayer Compatibility"}),": Always synchronize weather effects between server and clients using network variables or RPCs."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Seasonal Integration"}),": Make your weather effects respond to the game's seasons for a more integrated experience."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Biome Specificity"}),": Consider making weather effects specific to certain biomes for more variety."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Gameplay Impact"}),": Balance any gameplay effects from weather to ensure they're challenging but not frustrating."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Sound Design"}),": Include appropriate sound effects to enhance immersion."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Visual Clarity"}),": Ensure weather effects don't obscure important gameplay elements or make the game unplayable."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Weather not appearing"}),": Check that your prefabs are properly registered and spawned."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Client-server desync"}),": Ensure you're properly synchronizing weather states between server and clients."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Performance issues"}),": Reduce particle count or effect complexity if players experience lag."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Weather persisting after reload"}),": Make sure to set ",(0,s.jsx)(e.code,{children:"inst.persists = false"})," for weather effect entities."]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Weather not responding to seasons"}),": Verify your season watchers are properly set up."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Add debug commands to test weather\nGLOBAL.TheInput:AddKeyDownHandler(GLOBAL.KEY_F9, function()\n    if GLOBAL.TheWorld.ismastersim then\n        print("Spawning test weather")\n        local weather = SpawnPrefab("colored_rain")\n        if weather ~= nil and weather.components.precipitation ~= nil then\n            weather.components.precipitation:SetLevel(1)\n        end\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(e.p,{children:"Creating custom weather effects allows you to add unique atmosphere and gameplay elements to your Don't Starve Together mods. By combining visual effects, sounds, and gameplay impacts, you can create immersive weather systems that enhance the player experience."}),"\n",(0,s.jsx)(e.p,{children:"For more advanced weather integration, consider combining these techniques with custom biomes or seasons to create a fully realized environmental experience."}),"\n",(0,s.jsx)(e.p,{children:"See also:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-biomes",children:"Custom Biomes"})," - For creating custom environments"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-world-generation",children:"Custom World Generation"})," - For integrating weather with world generation"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/particle-effects",children:"Particle Effects"})," - For more details on particle systems"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-bandwidth-optimization",children:"Network Bandwidth Optimization"})," - For optimizing networked weather effects"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);