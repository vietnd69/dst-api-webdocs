"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5221],{5437:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"api-vanilla/components/workable","title":"Workable","description":"The Workable component allows entities to be worked on with tools, such as chopping trees, mining rocks, or hammering structures.","source":"@site/docs/api-vanilla/components/workable.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/workable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/workable","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"id":"workable","title":"Workable","sidebar_position":15,"version":619045},"sidebar":"docs","previous":{"title":"Cookable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/cookable"},"next":{"title":"Growable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/growable"}}');var i=t(4848),r=t(8453);const s={id:"workable",title:"Workable",sidebar_position:15,version:619045},a="Workable Component",l={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"SetWorkAction",id:"setworkaction",level:3},{value:"SetWorkLeft",id:"setworkleft",level:3},{value:"SetOnWorkCallback",id:"setonworkcallback",level:3},{value:"SetOnFinishCallback",id:"setonfinishcallback",level:3},{value:"Work Actions",id:"work-actions",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"See also",id:"see-also",level:2},{value:"Example: Creating a Complex Workable Entity",id:"example-creating-a-complex-workable-entity",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"workable-component",children:"Workable Component"})}),"\n",(0,i.jsx)(n.p,{children:"The Workable component allows entities to be worked on with tools, such as chopping trees, mining rocks, or hammering structures."}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Add a workable component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("workable")\n\n-- Configure the workable component\nlocal workable = entity.components.workable\nworkable:SetWorkAction(ACTIONS.CHOP)\nworkable:SetWorkLeft(10)\nworkable:SetOnFinishCallback(OnChopped)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"action"})}),(0,i.jsx)(n.td,{children:"Action"}),(0,i.jsx)(n.td,{children:"The action type required to work this entity (CHOP, MINE, DIG, etc.)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"workleft"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Amount of work remaining before the work is complete"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"maxwork"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Maximum amount of work required to complete"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"savestate"})}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"Whether to save work progress when the game is saved"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onwork"})}),(0,i.jsx)(n.td,{children:"Function"}),(0,i.jsx)(n.td,{children:"Callback when the entity is worked on"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onfinish"})}),(0,i.jsx)(n.td,{children:"Function"}),(0,i.jsx)(n.td,{children:"Callback when the work is completed"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(n.h3,{id:"setworkaction",children:"SetWorkAction"}),"\n",(0,i.jsx)(n.p,{children:"Sets the action required to work on this entity."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set the action required to work on this entity\nworkable:SetWorkAction(ACTIONS.MINE)\n\n-- Example of a boulder that requires mining\nfunction MakeBoulder()\n    local inst = CreateEntity()\n    \n    -- Basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    \n    -- Add workable component with mining action\n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.MINE)\n    inst.components.workable:SetWorkLeft(15)\n    \n    return inst\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"setworkleft",children:"SetWorkLeft"}),"\n",(0,i.jsx)(n.p,{children:"Sets the amount of work remaining before the entity is completely worked."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Set how much work is required to complete\nworkable:SetWorkLeft(20)\n\n-- Example of a tree with different work requirements based on growth stage\nfunction SetTreeWorkAmount(inst)\n    local workable = inst.components.workable\n    local growthStage = inst.components.growable:GetStage()\n    \n    if growthStage == 1 then        -- Sapling\n        workable:SetWorkLeft(3)\n    elseif growthStage == 2 then    -- Medium tree\n        workable:SetWorkLeft(8)\n    elseif growthStage == 3 then    -- Full tree\n        workable:SetWorkLeft(15)\n    end\n    \n    -- Display a visual indicator of how much work is left\n    inst.AnimState:SetMultColor(1, 1, 1, 1)\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"setonworkcallback",children:"SetOnWorkCallback"}),"\n",(0,i.jsx)(n.p,{children:"Sets the callback function called each time the entity is worked on."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set whether this entity makes sound when worked on\nworkable:SetOnWorkCallback(function(inst, worker, workleft)\n    -- Play sound effect when worked on\n    inst.SoundEmitter:PlaySound("dontstarve/wilson/use_axe_tree")\nend)\n\n-- Example of a rock with progressive visual damage\nfunction ConfigureRockWork(inst)\n    inst:AddComponent("workable")\n    local workable = inst.components.workable\n    workable:SetWorkAction(ACTIONS.MINE)\n    workable:SetWorkLeft(20)\n    \n    -- Setup progressive damage visuals\n    workable:SetOnWorkCallback(function(inst, worker, workleft)\n        -- Play mining sound\n        inst.SoundEmitter:PlaySound("dontstarve/common/destroy_stone")\n        \n        -- Show visual damage based on work progress\n        if workleft <= 5 then\n            inst.AnimState:PlayAnimation("low")\n        elseif workleft <= 10 then\n            inst.AnimState:PlayAnimation("med")\n        elseif workleft <= 15 then\n            inst.AnimState:PlayAnimation("high")\n        end\n        \n        -- Chance to spawn small rocks when hit\n        if math.random() < 0.3 then\n            local rock = SpawnPrefab("rocks")\n            rock.Transform:SetPosition(inst.Transform:GetWorldPosition())\n            Launch(rock, inst, 2)\n        end\n    end)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"setonfinishcallback",children:"SetOnFinishCallback"}),"\n",(0,i.jsx)(n.p,{children:"Sets the callback function called when the entity is fully worked."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set what happens when work is completed\nworkable:SetOnFinishCallback(function(inst, worker)\n    -- Drop loot, play effects, etc.\n    inst:Remove()\nend)\n\n-- Example of a stump that can be dug up after a tree is chopped\nfunction SetupStumpAfterChop(inst)\n    -- Called when tree is fully chopped\n    inst.components.workable:SetOnFinishCallback(function(inst, worker)\n        -- Play fall sound and animation\n        inst.SoundEmitter:PlaySound("dontstarve/forest/treefall")\n        inst.AnimState:PlayAnimation("falling", false)\n        \n        -- Schedule stump creation after animation\n        inst:DoTaskInTime(0.4, function(inst)\n            -- Create stump\n            local stump = SpawnPrefab("stump")\n            stump.Transform:SetPosition(inst.Transform:GetWorldPosition())\n            \n            -- Create loot\n            local loot = inst.components.lootdropper:DropLoot()\n            \n            -- Add stump workability for digging\n            stump:AddComponent("workable")\n            stump.components.workable:SetWorkAction(ACTIONS.DIG)\n            stump.components.workable:SetWorkLeft(2)\n            stump.components.workable:SetOnFinishCallback(function(stump_inst, digger)\n                stump_inst.components.lootdropper:SpawnLootPrefab("twigs")\n                stump_inst:Remove()\n            end)\n            \n            -- Remove the original tree\n            inst:Remove()\n        end)\n    end)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"work-actions",children:"Work Actions"}),"\n",(0,i.jsx)(n.p,{children:"Common work actions include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTIONS.CHOP"})," - For trees and wooden objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTIONS.MINE"})," - For rocks and mineral deposits"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTIONS.DIG"})," - For digging up plants or buried objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTIONS.HAMMER"})," - For breaking down structures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ACTIONS.HACK"})," - For hacking through vegetation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.p,{children:"The Workable component often works with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Lootdropper"})," - For dropping items when work is completed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Growable"})," - For regrowth after being worked on"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Health"})," - For damage when being worked on"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Combat"})," - For entities that attack when worked on"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/lootdropper",children:"LootDropper Component"})," - For dropping items when work is completed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/growable",children:"Growable Component"})," - For regrowth after being worked on"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/health",children:"Health Component"})," - For damage when being worked on"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/combat",children:"Combat Component"})," - For entities that attack when worked on"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/inventory",children:"Inventory Component"})," - For storing harvested resources"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-creating-a-complex-workable-entity",children:"Example: Creating a Complex Workable Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function MakeInteractiveStructure()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    -- Add loot dropper for rewards\n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:SetLoot({"boards", "boards", "cutstone"})\n    \n    -- Add workable component for hammering\n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.HAMMER)\n    inst.components.workable:SetWorkLeft(6)\n    \n    -- Progressive damage visuals and effects\n    inst.components.workable:SetOnWorkCallback(function(inst, worker, workleft)\n        -- Play sound\n        inst.SoundEmitter:PlaySound("dontstarve/common/destroy_wood")\n        \n        -- Shake the screen a bit\n        worker.components.playercontroller:ShakeCamera(inst, "VERTICAL", 0.1, 0.02, 0.15, 15)\n        \n        -- Show different damage states\n        if workleft <= 2 then\n            inst.AnimState:PlayAnimation("hit_high")\n            inst.AnimState:PushAnimation("idle_high")\n        elseif workleft <= 4 then\n            inst.AnimState:PlayAnimation("hit_med")\n            inst.AnimState:PushAnimation("idle_med")\n        else\n            inst.AnimState:PlayAnimation("hit_low")\n            inst.AnimState:PushAnimation("idle_low")\n        end\n    end)\n    \n    -- Final destruction\n    inst.components.workable:SetOnFinishCallback(function(inst, worker)\n        -- Play destruction effect\n        SpawnPrefab("collapse_small").Transform:SetPosition(inst.Transform:GetWorldPosition())\n        inst.SoundEmitter:PlaySound("dontstarve/common/destroy_wood")\n        \n        -- Drop loot\n        inst.components.lootdropper:DropLoot()\n        \n        -- Remove the structure\n        inst:Remove()\n    end)\n    \n    return inst\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);