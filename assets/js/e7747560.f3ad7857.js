"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[46220],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},55585:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/utilities/stringutil","title":"String Utilities","description":"Utility functions for string manipulation, character speech, and text formatting in Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/fundamentals/utilities/stringutil.md","sourceDirName":"game-scripts/core-systems/fundamentals/utilities","slug":"/game-scripts/core-systems/fundamentals/utilities/stringutil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/stringutil","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"stringutil","title":"String Utilities","description":"Utility functions for string manipulation, character speech, and text formatting in Don\'t Starve Together","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Simulation Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/simutil"},"next":{"title":"Utility Functions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/util"}}');var r=i(74848),t=i(28453);const l={id:"stringutil",title:"String Utilities",description:"Utility functions for string manipulation, character speech, and text formatting in Don't Starve Together",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="String Utilities",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Character Speech Functions",id:"character-speech-functions",level:2},{value:"GetString(inst, stringtype, modifier, nil_missing)",id:"get-string",level:3},{value:"GetDescription(inst, item, modifier)",id:"get-description",level:3},{value:"GetCharacterDescription(herocharacter)",id:"get-character-description",level:3},{value:"GetActionFailString(inst, action, reason)",id:"get-action-fail-string",level:3},{value:"GetSpecialCharacterString(character)",id:"get-special-character-string",level:3},{value:"Speech Generation Functions",id:"speech-generation-functions",level:2},{value:"CraftOooh()",id:"craft-oooh",level:3},{value:"CraftGiberish()",id:"craft-giberish",level:3},{value:"CraftMonkeySpeech()",id:"craft-monkey-speech",level:3},{value:"Umlautify(string)",id:"umlautify",level:3},{value:"String Manipulation Functions",id:"string-manipulation-functions",level:2},{value:"FirstToUpper(str)",id:"first-to-upper",level:3},{value:"TrimString(s)",id:"trim-string",level:3},{value:"subfmt(s, tab)",id:"subfmt",level:3},{value:"Time and Date Formatting",id:"time-and-date-formatting",level:2},{value:"str_seconds(time)",id:"str-seconds",level:3},{value:"str_date(os_time)",id:"str-date",level:3},{value:"str_play_time(time)",id:"str-play-time",level:3},{value:"Search and Comparison Functions",id:"search-and-comparison-functions",level:2},{value:"DamLevDist(a, b, limit)",id:"dam-lev-dist",level:3},{value:"GetMortalityStringFor(target)",id:"get-mortality-string-for",level:3},{value:"Internal Helper Functions",id:"internal-helper-functions",level:2},{value:"getmodifiedstring(topic_tab, modifier)",id:"getmodifiedstring",level:3},{value:"getcharacterstring(tab, item, modifier)",id:"getcharacterstring",level:3},{value:"GetDescription_AddSpecialCases(ret, charactertable, inst, item, modifier)",id:"get-description-add-special-cases",level:3},{value:"Integration with Game Systems",id:"integration-with-game-systems",level:2},{value:"Character Speech Proxy Support",id:"character-speech-proxy-support",level:3},{value:"Special Character Detection",id:"special-character-detection",level:3},{value:"Game Mode Integration",id:"game-mode-integration",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Safe String Retrieval",id:"safe-string-retrieval",level:3},{value:"Character-Specific Dialogue",id:"character-specific-dialogue",level:3},{value:"Formatted Time Display",id:"formatted-time-display",level:3},{value:"Dynamic Speech Generation",id:"dynamic-speech-generation",level:3},{value:"Version History",id:"version-history-1",level:2},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"string-utilities",children:"String Utilities"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"stringutil"})," module provides a comprehensive set of utility functions for string manipulation, character speech generation, and text formatting in Don't Starve Together. This module handles character-specific dialogue, special speech effects, string formatting operations, and text searching capabilities. It serves as the bridge between the raw string data and the dynamic speech system used throughout the game."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get character-specific string\nlocal dialogue = GetString(inst, "DESCRIBE", "TREE")\n\n-- Get character description with localization\nlocal desc = GetCharacterDescription("wilson")\n\n-- Format time display\nlocal time_str = str_seconds(125) -- "2:05"\n\n-- Create ghost speech\nlocal ghost_speech = CraftOooh() -- "Oooooh... Oooohh!"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"character-speech-functions",children:"Character Speech Functions"}),"\n",(0,r.jsx)(n.h3,{id:"get-string",children:"GetString(inst, stringtype, modifier, nil_missing)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRetrieves character-specific strings with fallback support. This is the primary function for getting dialogue text based on character, string type, and optional modifiers."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (table|string): Character instance or prefab name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stringtype"}),' (string): Type of string to retrieve (e.g., "DESCRIBE", "ACTIONFAIL")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modifier"})," (string|table|nil): Optional modifier for specific variants"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nil_missing"})," (boolean|nil): If true, returns nil for missing strings instead of error message"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string|nil): The requested string or fallback text"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get Wilson\'s description of a tree\nlocal tree_desc = GetString("wilson", "DESCRIBE", "TREE")\n\n-- Get generic action failure\nlocal fail_msg = GetString(inst, "ACTIONFAIL", "GENERIC")\n\n-- Handle special characters (ghost, mime)\nlocal ghost_msg = GetString(ghost_player, "DESCRIBE", "FLOWER") -- Returns "Oooooh..."\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-description",children:"GetDescription(inst, item, modifier)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets character-specific examination text for items with additional context like repair status and food memory."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (table|string): Character instance or prefab name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," (table): Item being examined"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modifier"})," (string|table|nil): Optional modifier for variants"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Description text or fallback"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get item description\nlocal desc = GetDescription(wilson_player, axe_item)\n\n-- Description with modifier\nlocal desc = GetDescription(inst, item, "BURNT")\n\n-- Includes special cases like repair status\nlocal broken_desc = GetDescription(inst, broken_item) -- Adds repair notification\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-character-description",children:"GetCharacterDescription(herocharacter)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRetrieves character description with game mode and localization support."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"herocharacter"})," (string): Character prefab name"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Character description text"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Basic character description\nlocal wilson_desc = GetCharacterDescription("wilson")\n\n-- Handles special cases for Woodie based on country\nlocal woodie_desc = GetCharacterDescription("woodie") -- "woodie_canada" or "woodie_us"\n\n-- Game mode specific descriptions\nlocal arena_desc = GetCharacterDescription("wilson") -- Uses LAVAARENA_CHARACTER_DESCRIPTIONS if in Lava Arena\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-action-fail-string",children:"GetActionFailString(inst, action, reason)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets character-specific messages when actions fail."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (table|string): Character instance or prefab name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"})," (string): Action that failed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"reason"})," (string): Reason for failure"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Action failure message"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get action failure message\nlocal fail_msg = GetActionFailString(inst, "CHOP", "TOOFAR")\n\n-- Generic failure\nlocal generic_fail = GetActionFailString(inst, "GENERIC", "WRONGTOOL")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-special-character-string",children:"GetSpecialCharacterString(character)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGenerates special speech for specific character types like ghosts, mimes, and monkeys."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"character"}),' (string): Special character type ("ghost", "mime", "wonkey", "wilton")']}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string|nil): Generated speech or nil if not a special character"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Ghost speech\nlocal ghost_speech = GetSpecialCharacterString("ghost") -- "Oooooooh... Oooohh!"\n\n-- Mime speech (empty)\nlocal mime_speech = GetSpecialCharacterString("mime") -- ""\n\n-- Monkey speech\nlocal monkey_speech = GetSpecialCharacterString("wonkey") -- "Ook ook ooook!"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"speech-generation-functions",children:"Speech Generation Functions"}),"\n",(0,r.jsx)(n.h3,{id:"craft-oooh",children:"CraftOooh()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),'\nGenerates randomized ghost speech using "Oooh" variations with random punctuation and spacing.']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Generated ghost speech"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local ghost_speech = CraftOooh()\n-- Possible outputs:\n-- "Oooooh... Oooohh!"\n-- "Ooooo. Oooooh?"\n-- "Ooooooh, oooh!"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"craft-giberish",children:"CraftGiberish()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates randomized gibberish speech using predefined syllable components."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Generated gibberish text"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local gibberish = CraftGiberish()\n-- Uses STRINGS.GIBERISH_PRE and STRINGS.GIBERISH_PST arrays\n-- Example output: "Blort fleep grargh!"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"craft-monkey-speech",children:"CraftMonkeySpeech()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGenerates monkey-style speech for cursed characters, but only if the current player is not already a monkey."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string|nil): Generated monkey speech or nil if player is a monkey"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local monkey_speech = CraftMonkeySpeech()\n-- Uses STRINGS.MONKEY_SPEECH_PRE and STRINGS.MONKEY_SPEECH_PST\n-- Example output: "Ook ook ooook!"\n-- Returns nil if ThePlayer:HasTag("wonkey")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"umlautify",children:"Umlautify(string)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nConverts 'o' characters to '\xf6' for Wigfrid's speech pattern if the Wathgrithr font is enabled."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"string"})," (string): Input string to convert"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): String with umlauts applied or original string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local wigfrid_text = Umlautify("I love food!")\n-- Output: "I l\xf6ve f\xf6od!" (if Wigfrid font enabled)\n-- Output: "I love food!" (if font disabled)\n\n-- Prevents consecutive umlauts\nlocal text = Umlautify("good") -- "g\xf6od" not "g\xf6od"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"string-manipulation-functions",children:"String Manipulation Functions"}),"\n",(0,r.jsx)(n.h3,{id:"first-to-upper",children:"FirstToUpper(str)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCapitalizes the first letter of a string."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"str"})," (string): Input string"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): String with first letter capitalized"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local capitalized = FirstToUpper("hello world") -- "Hello world"\nlocal already_cap = FirstToUpper("Already") -- "Already"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"trim-string",children:"TrimString(s)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRemoves leading and trailing whitespace from a string."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"s"})," (string): Input string to trim"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Trimmed string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local trimmed = TrimString("  hello world  ") -- "hello world"\nlocal empty = TrimString("   ") -- ""\n'})}),"\n",(0,r.jsx)(n.h3,{id:"subfmt",children:"subfmt(s, tab)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nPerforms template substitution using curly brace placeholders."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"s"})," (string): Template string with ",(0,r.jsx)(n.code,{children:"{key}"})," placeholders"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tab"})," (table): Table of key-value pairs for substitution"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): String with substitutions applied"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local template = "Hello {name}, you have {count} items!"\nlocal result = subfmt(template, {name = "Wilson", count = "5"})\n-- Output: "Hello Wilson, you have 5 items!"\n\n-- Unmatched placeholders remain unchanged\nlocal partial = subfmt("Hello {name} and {unknown}", {name = "Willow"})\n-- Output: "Hello Willow and {unknown}"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"time-and-date-formatting",children:"Time and Date Formatting"}),"\n",(0,r.jsx)(n.h3,{id:"str-seconds",children:"str_seconds(time)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nFormats time in seconds to MM",":SS"," or HH:MM",":SS"," format."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"time"})," (number): Time in seconds"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Formatted time string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local short_time = str_seconds(125) -- "02:05"\nlocal long_time = str_seconds(3665) -- "1:01:05"\nlocal zero_time = str_seconds(5) -- "00:05"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"str-date",children:"str_date(os_time)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nFormats OS timestamp to readable date string."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"os_time"})," (number): OS timestamp"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Formatted date string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local date_str = str_date(os.time())\n-- Output format: "Dec 25, 2023" (uses STRINGS.UI.DATE_FORMAT.MDY)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"str-play-time",children:"str_play_time(time)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nFormats playtime in minutes to human-readable format with days, hours, and minutes."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"time"})," (number): Playtime in minutes"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Formatted playtime string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local short_play = str_play_time(45) -- "45m"\nlocal medium_play = str_play_time(150) -- "2h 30m"\nlocal long_play = str_play_time(2000) -- "1d 9h 20m"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"search-and-comparison-functions",children:"Search and Comparison Functions"}),"\n",(0,r.jsx)(n.h3,{id:"dam-lev-dist",children:"DamLevDist(a, b, limit)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCalculates Damerau-Levenshtein distance between two strings with an optimization limit."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a"})," (string): First string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"b"})," (string): Second string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limit"})," (number): Maximum distance to calculate before early return"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(number): Edit distance between strings"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local distance = DamLevDist("kitten", "sitting", 5) -- 3\nlocal too_far = DamLevDist("cat", "elephant", 2) -- Returns early > 2\n\n-- Used for fuzzy string matching\nlocal close = DamLevDist("wilson", "wilsn", 2) -- 1 (one deletion)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-mortality-string-for",children:"GetMortalityStringFor(target)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets mortality-related strings for specific targets."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target"})," (table|nil): Target entity"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Mortality string or default"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local mortality = GetMortalityStringFor(player_entity)\n-- Returns specific string from STRINGS.UI.MORTALITYSTRINGS based on prefab\n-- Falls back to STRINGS.UI.MORTALITYSTRINGS.DEFAULT\n"})}),"\n",(0,r.jsx)(n.h2,{id:"internal-helper-functions",children:"Internal Helper Functions"}),"\n",(0,r.jsx)(n.h3,{id:"getmodifiedstring",children:"getmodifiedstring(topic_tab, modifier)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInternal function that handles string retrieval with modifiers, supporting both string and table modifiers."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic_tab"})," (table): Table containing strings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modifier"})," (string|table|nil): Modifier to apply"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string|nil): Modified string or nil"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"getcharacterstring",children:"getcharacterstring(tab, item, modifier)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInternal function for retrieving character-specific strings with case normalization."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tab"})," (table): Character string table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," (string): String key to look up"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modifier"})," (string|table|nil): Optional modifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string|nil): Character string or nil"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-description-add-special-cases",children:"GetDescription_AddSpecialCases(ret, charactertable, inst, item, modifier)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInternal function that adds special case annotations to item descriptions (repair status, food memory, shadow magic compatibility)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ret"})," (string|nil): Existing description string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"charactertable"})," (table): Character's string table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (table): Character instance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," (table): Item being described"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modifier"})," (string|table|nil): Optional modifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string|nil): Description with special cases added"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-game-systems",children:"Integration with Game Systems"}),"\n",(0,r.jsx)(n.h3,{id:"character-speech-proxy-support",children:"Character Speech Proxy Support"}),"\n",(0,r.jsx)(n.p,{children:"The module supports speech proxy systems where characters can use different speech sets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Character using speech proxy\nif inst.components.talker and inst.components.talker.speechproxy then\n    character = inst.components.talker.speechproxy\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"special-character-detection",children:"Special Character Detection"}),"\n",(0,r.jsx)(n.p,{children:"Automatic detection and handling of special character states:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Detects ghost, mime, and other special states\nlocal specialcharacter =\n    type(inst) == "table"\n    and ((inst:HasTag("mime") and "mime") or\n        (inst:HasTag("playerghost") and "ghost"))\n    or character\n'})}),"\n",(0,r.jsx)(n.h3,{id:"game-mode-integration",children:"Game Mode Integration"}),"\n",(0,r.jsx)(n.p,{children:"Character descriptions adapt to current game mode:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Different descriptions for different game modes\nif TheNet:GetServerGameMode() == "lavaarena" then\n    return STRINGS.LAVAARENA_CHARACTER_DESCRIPTIONS[herocharacter]\nelseif TheNet:GetServerGameMode() == "quagmire" then\n    return STRINGS.QUAGMIRE_CHARACTER_DESCRIPTIONS[herocharacter]\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"safe-string-retrieval",children:"Safe String Retrieval"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get string with fallback\nlocal function GetSafeCharacterString(character, stringtype, modifier)\n    return GetString(character, stringtype, modifier, true) \n           or "Default message"\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"character-specific-dialogue",children:"Character-Specific Dialogue"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get character reaction to item\nlocal function GetCharacterReaction(character_inst, item)\n    return GetDescription(character_inst, item) \n           or "I don\'t know what to make of this."\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"formatted-time-display",children:"Formatted Time Display"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Display game time\nlocal function DisplayGameTime(seconds)\n    if seconds > 3600 then\n        return str_seconds(seconds) -- Shows hours\n    else\n        return str_seconds(seconds) -- Shows minutes:seconds\n    end\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-speech-generation",children:"Dynamic Speech Generation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Generate appropriate speech for character state\nlocal function GenerateCharacterSpeech(inst)\n    if inst:HasTag("playerghost") then\n        return CraftOooh()\n    elseif inst:HasTag("mime") then\n        return "" -- Mimes don\'t speak\n    elseif inst:HasTag("wonkey") then\n        return CraftMonkeySpeech()\n    else\n        return GetString(inst, "GENERIC", nil)\n    end\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"version-history-1",children:"Version History"}),"\n",(0,r.jsx)(n.p,{children:"The stringutil module has evolved to support:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Character-specific dialogue systems"}),"\n",(0,r.jsx)(n.li,{children:"Special character speech effects"}),"\n",(0,r.jsx)(n.li,{children:"Multi-language string handling"}),"\n",(0,r.jsx)(n.li,{children:"Game mode adaptations"}),"\n",(0,r.jsx)(n.li,{children:"Advanced string search capabilities"}),"\n",(0,r.jsx)(n.li,{children:"Time and date formatting utilities"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./strings.md",children:"Strings"}),": Provides the raw string data used by these utilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../components/talker.md",children:"Talker Component"}),": Uses these functions for character speech"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../languages/index.md",children:"Speech Files"}),": Character-specific dialogue definitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../screens/index.md",children:"UI System"}),": Uses formatting functions for display text"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);