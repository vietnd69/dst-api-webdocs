"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4358],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var i=s(96540);const r={},d=i.createContext(r);function l(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(d.Provider,{value:n},e.children)}},85395:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"game-scripts/core-systems/game-configuration/modes/gamemodes","title":"Game Modes","description":"System for managing different game modes and their configurations in Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/game-configuration/modes/gamemodes.md","sourceDirName":"game-scripts/core-systems/game-configuration/modes","slug":"/game-scripts/core-systems/game-configuration/modes/gamemodes","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/modes/gamemodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"gamemodes","title":"Game Modes","description":"System for managing different game modes and their configurations in Don\'t Starve Together","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Game Logic","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/modes/gamelogic"},"next":{"title":"Game Configuration Settings Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/"}}');var r=s(74848),d=s(28453);const l={id:"gamemodes",title:"Game Modes",description:"System for managing different game modes and their configurations in Don't Starve Together",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Game Modes",a={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Constants",id:"constants",level:2},{value:"DEFAULT_GAME_MODE",id:"default_game_mode",level:3},{value:"GAME_MODES",id:"game_modes",level:3},{value:"GAME_MODES_ORDER",id:"game_modes_order",level:3},{value:"Game Mode Properties",id:"game-mode-properties",level:2},{value:"Specialized Properties",id:"specialized-properties",level:3},{value:"Functions",id:"functions",level:2},{value:"AddGameMode(game_mode, game_mode_text)",id:"add-game-mode",level:3},{value:"GetGameModeProperty(property)",id:"get-game-mode-property",level:3},{value:"GetGameModesSpinnerData(enabled_mods)",id:"get-game-modes-spinner-data",level:3},{value:"GetGameModeTag(game_mode)",id:"get-game-mode-tag",level:3},{value:"GetGameModeString(game_mode)",id:"get-game-mode-string",level:3},{value:"GetGameModeDescriptionString(game_mode)",id:"get-game-mode-description-string",level:3},{value:"GetIsModGameMode(game_mode)",id:"get-is-mod-game-mode",level:3},{value:"Game Mode Query Functions",id:"game-mode-query-functions",level:2},{value:"GetGhostSanityDrain()",id:"get-ghost-sanity-drain",level:3},{value:"GetIsSpawnModeFixed()",id:"get-is-spawn-mode-fixed",level:3},{value:"GetSpawnMode()",id:"get-spawn-mode",level:3},{value:"GetHasResourceRenewal()",id:"get-has-resource-renewal",level:3},{value:"GetGhostEnabled()",id:"get-ghost-enabled",level:3},{value:"GetPortalRez()",id:"get-portal-rez",level:3},{value:"GetResetTime()",id:"get-reset-time",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"IsRecipeValidInGameMode(game_mode, recipe_name)",id:"is-recipe-valid-in-game-mode",level:3},{value:"GetLevelType(game_mode)",id:"get-level-type",level:3},{value:"GetMaxItemSlots(game_mode)",id:"get-max-item-slots",level:3},{value:"GetFarmTillSpacing(game_mode)",id:"get-farm-till-spacing",level:3},{value:"GetGameModeMaxPlayers(game_mode)",id:"get-game-mode-max-players",level:3},{value:"Internal Functions",id:"internal-functions",level:2},{value:"GetWorldSetting(setting, default)",id:"getworldsettingsetting-default",level:3},{value:"GameModeError(game_mode)",id:"gamemodeerrorgame_mode",level:3},{value:"GetGameMode(game_mode)",id:"getgamemodegame_mode",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Checking Game Mode Features",id:"checking-game-mode-features",level:3},{value:"Validating Recipes",id:"validating-recipes",level:3},{value:"Adding Custom Game Modes",id:"adding-custom-game-modes",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"game-modes",children:"Game Modes"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"gamemodes.lua"})," module defines and manages different game modes in Don't Starve Together. It provides configuration settings for survival mechanics, spawning behavior, resource management, and specialized event modes like Lava Arena and Quagmire."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get current game mode properties\nlocal ghost_enabled = GetGhostEnabled()\nlocal spawn_mode = GetSpawnMode()\nlocal has_renewal = GetHasResourceRenewal()\n\n-- Check if a recipe is valid in current game mode\nlocal is_valid = IsRecipeValidInGameMode("survival", "resurrectionstatue")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,r.jsx)(n.h3,{id:"default_game_mode",children:"DEFAULT_GAME_MODE"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Value:"})," ",(0,r.jsx)(n.code,{children:'"survival"'})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Default game mode used when the actual game mode cannot be determined from saved server slot."]}),"\n",(0,r.jsx)(n.h3,{id:"game_modes",children:"GAME_MODES"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Table containing all available game mode configurations."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Available Game Modes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"survival"}),": Standard Don't Starve Together gameplay"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"lavaarena"}),": Lava Arena event mode (internal)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"quagmire"}),": Quagmire event mode (internal)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"game_modes_order",children:"GAME_MODES_ORDER"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Table defining the display order of game modes in UI spinners."]}),"\n",(0,r.jsx)(n.h2,{id:"game-mode-properties",children:"Game Mode Properties"}),"\n",(0,r.jsxs)(n.p,{children:["Each game mode in ",(0,r.jsx)(n.code,{children:"GAME_MODES"})," contains the following properties:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"text"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Display text for the game mode"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"description"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Detailed description of the game mode"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"level_type"})}),(0,r.jsx)(n.td,{children:"LEVELTYPE"}),(0,r.jsx)(n.td,{children:"Type of level (SURVIVAL, LAVAARENA, QUAGMIRE)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mod_game_mode"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Whether this is a modded game mode"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"spawn_mode"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:'Spawning behavior ("fixed" or "scatter")'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"resource_renewal"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Whether resources regenerate over time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ghost_sanity_drain"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Whether ghosts drain sanity from living players"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ghost_enabled"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Whether ghost mode is available"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"portal_rez"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Whether portal resurrection is enabled"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"reset_time"})}),(0,r.jsx)(n.td,{children:"table/nil"}),(0,r.jsx)(n.td,{children:"Reset timing configuration"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"invalid_recipes"})}),(0,r.jsx)(n.td,{children:"table/nil"}),(0,r.jsx)(n.td,{children:"List of recipes disabled in this mode"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"specialized-properties",children:"Specialized Properties"}),"\n",(0,r.jsx)(n.p,{children:"Some game modes have additional properties:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"internal"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Internal game mode not shown in normal UI"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max_players"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"Maximum number of players allowed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"override_item_slots"})}),(0,r.jsx)(n.td,{children:"number"}),(0,r.jsx)(n.td,{children:"Override default inventory slots"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"drop_everything_on_despawn"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Drop all items when player despawns"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"no_crafting"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Disable crafting system"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"no_minimap"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Disable minimap display"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"no_hunger"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Disable hunger mechanics"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"no_sanity"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"Disable sanity mechanics"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"skin_tag"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:'Skin tag for cosmetic items ("LAVA", "VICTORIAN")'})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"add-game-mode",children:"AddGameMode(game_mode, game_mode_text)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nAdds a new modded game mode to the available game modes list."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Unique identifier for the new game mode"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode_text"})," (string): Display text for the game mode"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): The created game mode configuration table"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local custom_mode = AddGameMode("hardcore", "Hardcore Mode")\n-- Creates a new game mode with default survival settings\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-game-mode-property",children:"GetGameModeProperty(property)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets a specific property from the current game mode, with world settings override support."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"property"})," (string): Name of the property to retrieve"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(any): The property value from world settings or game mode configuration"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local ghost_drain = GetGameModeProperty("ghost_sanity_drain")\nlocal spawn_mode = GetGameModeProperty("spawn_mode")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-game-modes-spinner-data",children:"GetGameModesSpinnerData(enabled_mods)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nReturns formatted data for UI spinners showing available game modes, including modded ones."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"enabled_mods"})," (table): List of enabled mod names to include their game modes"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(table): Array of spinner data with ",(0,r.jsx)(n.code,{children:"text"})," and ",(0,r.jsx)(n.code,{children:"data"})," fields"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local mods = {"mod1", "mod2"}\nlocal spinner_data = GetGameModesSpinnerData(mods)\n-- Returns: {{text="Survival", data="survival"}, ...}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-game-mode-tag",children:"GetGameModeTag(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the localized tag string for a game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode identifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string/nil): Localized tag string or nil if invalid"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local tag = GetGameModeTag("survival")\n-- Returns localized tag from STRINGS.TAGS.GAMEMODE\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-game-mode-string",children:"GetGameModeString(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the display string for a game mode. Used by C side code."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode identifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Localized display string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local display_name = GetGameModeString("survival")\n-- Returns "Survival" or localized equivalent\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-game-mode-description-string",children:"GetGameModeDescriptionString(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the description string for a game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode identifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(string): Localized description string"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local description = GetGameModeDescriptionString("survival")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-is-mod-game-mode",children:"GetIsModGameMode(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nChecks if a game mode is from a mod."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode identifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if the game mode is modded"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local is_modded = GetIsModGameMode("survival") -- false\nlocal is_modded = GetIsModGameMode("custom_mode") -- true\n'})}),"\n",(0,r.jsx)(n.h2,{id:"game-mode-query-functions",children:"Game Mode Query Functions"}),"\n",(0,r.jsx)(n.h3,{id:"get-ghost-sanity-drain",children:"GetGhostSanityDrain()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nChecks if ghosts drain sanity from living players in the current game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if ghost sanity drain is enabled"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-is-spawn-mode-fixed",children:"GetIsSpawnModeFixed()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nChecks if the current game mode uses fixed spawn points."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'(boolean): True if spawn mode is "fixed"'}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-spawn-mode",children:"GetSpawnMode()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the current spawn mode setting."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'(string): Spawn mode ("fixed" or "scatter")'}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-has-resource-renewal",children:"GetHasResourceRenewal()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nChecks if resource renewal is enabled in the current game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if resources regenerate over time"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-ghost-enabled",children:"GetGhostEnabled()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nChecks if ghost mode is enabled, considering both world settings and revivable corpse mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if ghost mode is available"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-portal-rez",children:"GetPortalRez()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nChecks if portal resurrection is enabled."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if portal resurrection is available"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-reset-time",children:"GetResetTime()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the reset time configuration for the current game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["(table): Reset time configuration with ",(0,r.jsx)(n.code,{children:"time"})," and ",(0,r.jsx)(n.code,{children:"loadingtime"})," fields"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local reset_config = GetResetTime()\n-- Returns: {time = 120, loadingtime = 180}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,r.jsx)(n.h3,{id:"is-recipe-valid-in-game-mode",children:"IsRecipeValidInGameMode(game_mode, recipe_name)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nChecks if a recipe is valid/allowed in a specific game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode to check"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"recipe_name"})," (string): Name of the recipe to validate"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(boolean): True if the recipe is allowed in the game mode"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local valid = IsRecipeValidInGameMode("survival", "resurrectionstatue") -- true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get-level-type",children:"GetLevelType(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the level type for a specific game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode identifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(LEVELTYPE): Level type constant"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-max-item-slots",children:"GetMaxItemSlots(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the maximum inventory slots for a game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode identifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(number): Maximum item slots (uses MAXITEMSLOTS if not overridden)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-farm-till-spacing",children:"GetFarmTillSpacing(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the farm till spacing for a game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode identifier (optional, uses current if not provided)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(number): Farm till spacing value"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get-game-mode-max-players",children:"GetGameModeMaxPlayers(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nGets the maximum player limit for a specific game mode."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"game_mode"})," (string): Game mode identifier"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(number/nil): Maximum players or nil if no limit specified"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"internal-functions",children:"Internal Functions"}),"\n",(0,r.jsx)(n.h3,{id:"getworldsettingsetting-default",children:"GetWorldSetting(setting, default)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInternal function to get world settings with fallback to default values."]}),"\n",(0,r.jsx)(n.h3,{id:"gamemodeerrorgame_mode",children:"GameModeError(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInternal error handling for invalid game modes, with special handling for deprecated modes."]}),"\n",(0,r.jsx)(n.h3,{id:"getgamemodegame_mode",children:"GetGameMode(game_mode)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nInternal function to safely get game mode configuration with error handling."]}),"\n",(0,r.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"checking-game-mode-features",children:"Checking Game Mode Features"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Check if current game mode supports ghosts\nif GetGhostEnabled() then\n    -- Enable ghost-related functionality\nend\n\n-- Check resource renewal\nif GetHasResourceRenewal() then\n    -- Enable resource regeneration systems\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"validating-recipes",children:"Validating Recipes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Check if a recipe is valid before allowing crafting\nlocal current_mode = TheNet:GetServerGameMode()\nif IsRecipeValidInGameMode(current_mode, recipe_name) then\n    -- Allow crafting\nelse\n    -- Show disabled message\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"adding-custom-game-modes",children:"Adding Custom Game Modes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- In mod code\nlocal custom_mode = AddGameMode("mymod_hardcore", "Hardcore Mode")\ncustom_mode.ghost_enabled = false\ncustom_mode.resource_renewal = false\ncustom_mode.invalid_recipes = {"resurrectionstatue", "lifeamulet"}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./constants.md",children:"Constants"}),": Game mode related constants and tuning values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./worldsettings.md",children:"World Settings"}),": World-specific setting overrides"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./recipes.md",children:"Recipes"}),": Recipe validation and game mode restrictions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);