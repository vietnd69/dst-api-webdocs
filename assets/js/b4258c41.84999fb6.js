"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[46219],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>t});var l=s(96540);const i={},o=l.createContext(i);function r(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(o.Provider,{value:n},e.children)}},62816:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"game-scripts/core-systems/system-core/engine/maputil","title":"Map Utilities","description":"Map topology utilities for pathfinding, node manipulation, convex hull calculations, and map visualization","source":"@site/docs/game-scripts/core-systems/system-core/engine/maputil.md","sourceDirName":"game-scripts/core-systems/system-core/engine","slug":"/game-scripts/core-systems/system-core/engine/maputil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/engine/maputil","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"maputil","title":"Map Utilities","description":"Map topology utilities for pathfinding, node manipulation, convex hull calculations, and map visualization","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Main Functions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/engine/mainfunctions"},"next":{"title":"Physics System","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/engine/physics"}}');var i=s(74848),o=s(28453);const r={id:"maputil",title:"Map Utilities",description:"Map topology utilities for pathfinding, node manipulation, convex hull calculations, and map visualization",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Map Utilities",d={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Node Finding Functions",id:"node-finding-functions",level:2},{value:"GetClosestNode(x, y)",id:"get-closest-node",level:3},{value:"GetClosestNodeToPlayer()",id:"get-closest-node-to-player",level:3},{value:"ShowClosestNodeToPlayer()",id:"show-closest-node-to-player",level:3},{value:"Geometry Functions",id:"geometry-functions",level:2},{value:"cross(o, a, b)",id:"cross",level:3},{value:"convexHull(points)",id:"convex-hull",level:3},{value:"Graph Manipulation Functions",id:"graph-manipulation-functions",level:2},{value:"GrabSubGraphAroundNode(node, numnodes)",id:"grab-sub-graph-around-node",level:3},{value:"PlayerSub(count)",id:"player-sub",level:3},{value:"Map Visualization Functions",id:"map-visualization-functions",level:2},{value:"MapHideAll()",id:"map-hide-all",level:3},{value:"DrawWalkableGrid(graph)",id:"draw-walkable-grid",level:3},{value:"ShowWalkableGrid(graph)",id:"show-walkable-grid",level:3},{value:"Topology Reconstruction",id:"topology-reconstruction",level:2},{value:"ReconstructTopology(graph)",id:"reconstruct-topology",level:3},{value:"Internal Utility Functions",id:"internal-utility-functions",level:2},{value:"RemoveEdge(nodes, edgeIndex)",id:"remove-edge",level:3},{value:"Data Structures",id:"data-structures",level:2},{value:"Topology Node Structure",id:"topology-node-structure",level:3},{value:"Graph Structure",id:"graph-structure",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Pathfinding Analysis",id:"pathfinding-analysis",level:3},{value:"Map Generation Debugging",id:"map-generation-debugging",level:3},{value:"World Modification",id:"world-modification",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"map-utilities",children:"Map Utilities"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"maputil.lua"})," script provides essential utilities for working with map topology, including pathfinding operations, node manipulation, graph reconstruction, and visualization tools. These functions are used for world generation analysis, debugging, and runtime pathfinding operations."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Find the closest node to player\nlocal closest_node = GetClosestNodeToPlayer()\nprint("Player is near node:", closest_node.id)\n\n-- Show area around player\nShowClosestNodeToPlayer()\n\n-- Create a convex hull from points\nlocal points = {{0,0}, {1,0}, {1,1}, {0,1}}\nlocal hull = convexHull(points)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"node-finding-functions",children:"Node Finding Functions"}),"\n",(0,i.jsx)(n.h3,{id:"get-closest-node",children:"GetClosestNode(x, y)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nFinds the closest topology node to the specified world coordinates."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"})," (number): World X coordinate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"y"})," (number): World Y coordinate (Z coordinate in 3D space)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): The closest topology node, or nil if no valid nodes exist"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Find closest node to a specific position\nlocal node = GetClosestNode(100, 200)\nif node then\n    print("Found node at:", node.x, node.y)\n    print("Node has", #node.neighbours, "neighbours")\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"get-closest-node-to-player",children:"GetClosestNodeToPlayer()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nFinds the closest topology node to the current player's position."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): The closest topology node to the player"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local player_node = GetClosestNodeToPlayer()\nif player_node then\n    print("Player is in node:", player_node.id)\n    print("Node center:", player_node.x, player_node.y)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"show-closest-node-to-player",children:"ShowClosestNodeToPlayer()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nReveals the closest node to the player on the minimap for debugging purposes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Debug: Show player's current node on minimap\nShowClosestNodeToPlayer()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"geometry-functions",children:"Geometry Functions"}),"\n",(0,i.jsx)(n.h3,{id:"cross",children:"cross(o, a, b)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the cross product of vectors for geometric calculations."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"o"})," (table): Origin point ",(0,i.jsx)(n.code,{children:"{x, y}"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"a"})," (table): First point ",(0,i.jsx)(n.code,{children:"{x, y}"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"b"})," (table): Second point ",(0,i.jsx)(n.code,{children:"{x, y}"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Cross product value"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"convex-hull",children:"convexHull(points)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nComputes the convex hull of a set of 2D points using Andrew's algorithm."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"points"})," (table): Array of point coordinates ",(0,i.jsx)(n.code,{children:"{{x1, y1}, {x2, y2}, ...}"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): Array of points forming the convex hull"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create convex hull from a set of points\nlocal points = {\n    {0, 0}, {2, 0}, {1, 1}, {2, 2}, {0, 2}\n}\nlocal hull = convexHull(points)\n\n-- Hull will contain the outer boundary points\nfor i, point in ipairs(hull) do\n    print("Hull point", i, ":", point[1], point[2])\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"graph-manipulation-functions",children:"Graph Manipulation Functions"}),"\n",(0,i.jsx)(n.h3,{id:"grab-sub-graph-around-node",children:"GrabSubGraphAroundNode(node, numnodes)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nExtracts a connected subgraph around a starting node by randomly walking through neighboring nodes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"node"})," (table): Starting topology node"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"numnodes"})," (number): Number of nodes to include in the subgraph"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): Array of selected nodes forming the subgraph"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Get a subgraph of 10 nodes around the player\nlocal start_node = GetClosestNodeToPlayer()\nlocal subgraph = GrabSubGraphAroundNode(start_node, 10)\n\nprint("Selected", #subgraph, "nodes in subgraph")\nfor i, node in ipairs(subgraph) do\n    print("Node", i, "at", node.x, node.y)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"player-sub",children:"PlayerSub(count)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCreates a subgraph around the player's position and visualizes its convex hull on the minimap."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"count"})," (number): Number of nodes to include (default: 5)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Visualize a 7-node subgraph around player\nPlayerSub(7)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"map-visualization-functions",children:"Map Visualization Functions"}),"\n",(0,i.jsx)(n.h3,{id:"map-hide-all",children:"MapHideAll()"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nClears all revealed areas from the minimap."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Reset minimap to unexplored state\nMapHideAll()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"draw-walkable-grid",children:"DrawWalkableGrid(graph)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCreates debug visualization showing walkable connections between topology nodes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"graph"})," (table): Optional topology graph (uses TheWorld.topology by default)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Show debug visualization of walkable areas\nDrawWalkableGrid()\n\n-- Use custom graph\nDrawWalkableGrid(custom_topology)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"show-walkable-grid",children:"ShowWalkableGrid(graph)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nReveals walkable connections on the minimap by showing traversable paths between nodes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"graph"})," (table): Optional topology graph (uses TheWorld.topology by default)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Reveal all walkable paths on minimap\nShowWalkableGrid()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"topology-reconstruction",children:"Topology Reconstruction"}),"\n",(0,i.jsx)(n.h3,{id:"reconstruct-topology",children:"ReconstructTopology(graph)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRebuilds the topology graph by validating node connections and removing invalid pathways. This is a complex operation that reconstructs the entire pathfinding graph."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"graph"})," (table): Optional topology graph (uses TheWorld.topology by default)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Process:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Point Flattening:"})," Consolidates duplicate vertices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Sorting:"})," Identifies shared edges between nodes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node Connection:"})," Maps nodes to their shared edges"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Path Validation:"})," Checks if connections are actually traversable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Neighbor Assignment:"})," Updates node neighbor lists"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Rebuild topology after world changes\nReconstructTopology()\n\n-- Rebuild custom topology\nReconstructTopology(custom_graph)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Performance Note:"}),"\nThis is an expensive operation that should only be called when the world topology has been significantly modified."]}),"\n",(0,i.jsx)(n.h2,{id:"internal-utility-functions",children:"Internal Utility Functions"}),"\n",(0,i.jsx)(n.h3,{id:"remove-edge",children:"RemoveEdge(nodes, edgeIndex)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nInternal function that removes an edge index from all nodes' valid edge lists."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"nodes"})," (table): Array of topology nodes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"edgeIndex"})," (number): Edge index to remove"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,i.jsx)(n.h3,{id:"topology-node-structure",children:"Topology Node Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local node = {\n    id = 1,                    -- Node identifier\n    x = 100,                   -- World X coordinate\n    y = 200,                   -- World Y coordinate (Z in 3D)\n    poly = {{x1,y1}, {x2,y2}}, -- Polygon vertices\n    neighbours = {2, 3, 5},    -- Connected node IDs\n    validedges = {1, 4, 7},    -- Valid edge indices\n    -- Additional node properties...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"graph-structure",children:"Graph Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local topology = {\n    nodes = {},              -- Array of topology nodes\n    flattenedPoints = {},    -- Consolidated vertex list\n    flattenedEdges = {},     -- Edge definitions {{p1, p2}, ...}\n    edgeToNodes = {},        -- Edge to node mapping\n    -- Additional graph properties...\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"pathfinding-analysis",children:"Pathfinding Analysis"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Analyze connectivity around player\nlocal player_node = GetClosestNodeToPlayer()\nprint("Player has", #player_node.neighbours, "paths available")\n\n-- Check if two positions are in connected nodes\nlocal node1 = GetClosestNode(x1, y1)\nlocal node2 = GetClosestNode(x2, y2)\nlocal connected = table.contains(node1.neighbours, node2.id)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"map-generation-debugging",children:"Map Generation Debugging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Visualize topology structure\nDrawWalkableGrid()\nShowWalkableGrid()\n\n-- Test subgraph extraction\nlocal test_node = GetClosestNodeToPlayer()\nlocal subgraph = GrabSubGraphAroundNode(test_node, 8)\nPlayerSub(8) -- Visualize the result\n"})}),"\n",(0,i.jsx)(n.h3,{id:"world-modification",children:"World Modification"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- After making world changes that affect pathfinding\nReconstructTopology()\n\n-- Verify the reconstruction worked\nlocal node = GetClosestNodeToPlayer()\nprint("Node has", #node.neighbours, "valid connections")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GetClosestNode:"})," O(n) operation that checks all nodes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"convexHull:"})," O(n log n) due to sorting step"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ReconstructTopology:"})," Expensive O(n\xb2) operation for large graphs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GrabSubGraphAroundNode:"})," O(k) where k is the requested node count"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./mathutil.md",children:"MathUtil"}),": Mathematical utilities for calculations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/engine/physics",children:"Physics"}),": Physics and collision systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../map/worldgen.md",children:"WorldGen"}),": World generation systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../navigation/pathfinder.md",children:"Pathfinder"}),": Pathfinding algorithms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./debughelpers.md",children:"DebugHelpers"}),": Debug visualization tools"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);