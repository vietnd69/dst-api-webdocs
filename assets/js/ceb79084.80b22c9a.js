"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6609],{5230:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"api-vanilla/prefabs/characters","title":"Character Prefabs","description":"Character prefabs define the playable characters in Don\'t Starve Together. Each character has unique abilities, stats, and gameplay mechanics that differentiate them from one another.","source":"@site/docs/api-vanilla/prefabs/characters.md","sourceDirName":"api-vanilla/prefabs","slug":"/api-vanilla/prefabs/characters","permalink":"/dst-api-webdocs/docs/api-vanilla/prefabs/characters","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"characters","title":"Character Prefabs","sidebar_position":2},"sidebar":"docs","previous":{"title":"Prefabs Overview","permalink":"/dst-api-webdocs/docs/api/prefabs"},"next":{"title":"Creature Prefabs","permalink":"/dst-api-webdocs/docs/api-vanilla/prefabs/creatures"}}');var r=a(4848),i=a(8453);const s={id:"characters",title:"Character Prefabs",sidebar_position:2},c="Character Prefabs",l={},o=[{value:"Character Creation",id:"character-creation",level:2},{value:"Core Character Properties",id:"core-character-properties",level:2},{value:"Unique Character Mechanics",id:"unique-character-mechanics",level:2},{value:"Character Animation",id:"character-animation",level:2},{value:"Character-specific Events",id:"character-specific-events",level:2},{value:"Skill Trees",id:"skill-trees",level:2},{value:"Starting Items",id:"starting-items",level:2},{value:"Example: Wilson&#39;s Character Prefab",id:"example-wilsons-character-prefab",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"character-prefabs",children:"Character Prefabs"})}),"\n",(0,r.jsx)(n.p,{children:"Character prefabs define the playable characters in Don't Starve Together. Each character has unique abilities, stats, and gameplay mechanics that differentiate them from one another."}),"\n",(0,r.jsx)(n.h2,{id:"character-creation",children:"Character Creation"}),"\n",(0,r.jsxs)(n.p,{children:["All playable characters are created using the ",(0,r.jsx)(n.code,{children:"MakePlayerCharacter"})," function from the ",(0,r.jsx)(n.code,{children:"player_common.lua"})," module. This function handles the common setup for all player characters, while allowing each character to define their unique aspects."]}),"\n",(0,r.jsx)(n.p,{children:"A typical character prefab structure looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local MakePlayerCharacter = require("prefabs/player_common")\n\nlocal assets = {\n    -- Character-specific assets\n    Asset("ANIM", "anim/player_basic.zip"),\n    Asset("ANIM", "anim/player_idles_wilson.zip"),\n    -- Other assets...\n}\n\nlocal prefabs = {\n    -- Character-specific prefabs\n    "beardhair",  -- Wilson-specific\n}\n\n-- Items the character starts with\nlocal start_inv = {}\nfor k, v in pairs(TUNING.GAMEMODE_STARTING_ITEMS) do\n    start_inv[string.lower(k)] = v.WILSON  -- Replace WILSON with the character name\nend\n\n-- Common initialization (runs on both client and server)\nlocal function common_postinit(inst)\n    -- Add character-specific tags\n    inst:AddTag("bearded")     -- Wilson-specific\n    \n    -- Set up character-specific network variables and client-side behaviors\n    -- This runs on both client and server\n}\n\n-- Master (server-side) initialization\nlocal function master_postinit(inst)\n    -- Set starting inventory\n    inst.starting_inventory = start_inv[TheNet:GetServerGameMode()]\n    \n    -- Add and configure character-specific components\n    inst:AddComponent("beard")\n    \n    -- Set up character-specific stats\n    inst.components.health:SetMaxHealth(150)\n    inst.components.hunger:SetMax(150)\n    inst.components.sanity:SetMax(200)\n    \n    -- Add special abilities and behaviors\n}\n\n-- Return the character prefab\nreturn MakePlayerCharacter("wilson", prefabs, assets, common_postinit, master_postinit)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"core-character-properties",children:"Core Character Properties"}),"\n",(0,r.jsx)(n.p,{children:"All characters have these base properties:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Health"}),(0,r.jsx)(n.td,{children:"The character's maximum health points"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Hunger"}),(0,r.jsx)(n.td,{children:"The character's maximum hunger points"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Sanity"}),(0,r.jsx)(n.td,{children:"The character's maximum sanity points"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Damage Multiplier"}),(0,r.jsx)(n.td,{children:"Affects damage dealt by the character"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Hunger Rate"}),(0,r.jsx)(n.td,{children:"How quickly the character gets hungry"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Night Vision"}),(0,r.jsx)(n.td,{children:"Whether the character can see better at night"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Diet"}),(0,r.jsx)(n.td,{children:"What types of food the character can eat"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"unique-character-mechanics",children:"Unique Character Mechanics"}),"\n",(0,r.jsx)(n.p,{children:"Characters often have unique components, tags, or mechanics that define their gameplay:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Wilson\'s beard mechanics\ninst:AddComponent("beard")\ninst.components.beard.insulation_factor = TUNING.WILSON_BEARD_INSULATION_FACTOR\ninst.components.beard:AddCallback(BEARD_DAYS[1], OnGrowShortBeard)\ninst.components.beard:AddCallback(BEARD_DAYS[2], OnGrowMediumBeard)\ninst.components.beard:AddCallback(BEARD_DAYS[3], OnGrowLongBeard)\n\n-- Willow\'s fire immunity\ninst.components.health.fire_damage_scale = 0\ninst:AddComponent("pyromaniac")\n\n-- Wolfgang\'s mighty form\ninst:AddComponent("strongman")\ninst.components.strongman:SetStrengthMultiplier(1.5)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"character-animation",children:"Character Animation"}),"\n",(0,r.jsx)(n.p,{children:"Characters use various animation states to represent their actions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Set up character animation\ninst.AnimState:SetBank("wilson")\ninst.AnimState:SetBuild("wilson")\ninst.AnimState:PlayAnimation("idle")\n\n-- Custom idle animations\ninst.AnimState:AddOverrideBuild("player_idles_wilson")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"character-specific-events",children:"Character-specific Events"}),"\n",(0,r.jsx)(n.p,{children:"Characters often have event handlers for unique gameplay mechanics:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Listen for events\ninst:ListenForEvent("startfiredamage", OnStartFireDamage)\ninst:ListenForEvent("stopfiredamage", OnStopFireDamage)\ninst:ListenForEvent("hungerdelta", OnHungerDelta)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"skill-trees",children:"Skill Trees"}),"\n",(0,r.jsx)(n.p,{children:"In newer updates, characters have skill trees that provide progression paths:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Initialize skill tree\ninst:AddComponent("skilltreeupdater")\ninst.components.skilltreeupdater:SetSkillTreeFn("wilson")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"starting-items",children:"Starting Items"}),"\n",(0,r.jsx)(n.p,{children:"Characters usually have default starting items defined in their prefab:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Default starting items for all game modes\nlocal start_inv = {\n    default = {\n        "flint",\n        "flint",\n        "twigs",\n        "twigs",\n    },\n    -- Game mode specific items\n    survival = {\n        "flint",\n        "flint",\n        "twigs",\n        "twigs",\n    },\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-wilsons-character-prefab",children:"Example: Wilson's Character Prefab"}),"\n",(0,r.jsx)(n.p,{children:"Wilson is the default character and has a beard mechanic that provides insulation against cold:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function master_postinit(inst)\n    -- Starting items\n    inst.starting_inventory = start_inv[TheNet:GetServerGameMode()]\n\n    -- Custom idle animation\n    inst.customidleanim = "idle_wilson"\n\n    -- Food affinity (bonus from specific foods)\n    inst.components.foodaffinity:AddPrefabAffinity("baconeggs", TUNING.AFFINITY_15_CALORIES_HUGE)\n\n    -- Beard mechanic\n    inst:AddComponent("beard")\n    inst.components.beard.onreset = OnResetBeard\n    inst.components.beard.prize = "beardhair"\n    inst.components.beard.is_skinnable = true\n    inst.components.beard:AddCallback(BEARD_DAYS[1], OnGrowShortBeard)\n    inst.components.beard:AddCallback(BEARD_DAYS[2], OnGrowMediumBeard)\n    inst.components.beard:AddCallback(BEARD_DAYS[3], OnGrowLongBeard)\n\n    -- Drop beard contents on death\n    inst.EmptyBeard = EmptyBeard\n    inst:ListenForEvent("death", EmptyBeard)\n\n    -- Handle when beard is shaved\n    inst:ListenForEvent("shaved", OnShaved)\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(6540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);