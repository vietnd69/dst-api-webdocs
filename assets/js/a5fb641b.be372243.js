"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1846],{6216:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api-vanilla/examples/snippets/ui-snippets","title":"UI Snippets","description":"This page provides reusable code snippets for creating and manipulating UI elements in Don\'t Starve Together mods.","source":"@site/docs/api-vanilla/examples/snippets/ui-snippets.md","sourceDirName":"api-vanilla/examples/snippets","slug":"/api-vanilla/examples/snippets/ui-snippets","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/ui-snippets","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"ui-snippets","title":"UI Snippets","sidebar_position":4},"sidebar":"docs","previous":{"title":"Saving and Loading Snippets","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/saving-loading"},"next":{"title":"Networking Snippets","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/networking-snippets"}}');var i=t(4848),l=t(8453);const a={id:"ui-snippets",title:"UI Snippets",sidebar_position:4},d="UI Snippets",s={},c=[{value:"Basic UI Elements",id:"basic-ui-elements",level:2},{value:"Creating a Simple Screen",id:"creating-a-simple-screen",level:3},{value:"Creating a Button",id:"creating-a-button",level:3},{value:"Creating a Checkbox",id:"creating-a-checkbox",level:3},{value:"Creating a Slider",id:"creating-a-slider",level:3},{value:"Creating a Text Input Field",id:"creating-a-text-input-field",level:3},{value:"Advanced UI Components",id:"advanced-ui-components",level:2},{value:"Creating a Dropdown Menu",id:"creating-a-dropdown-menu",level:3},{value:"Creating a Tab System",id:"creating-a-tab-system",level:3},{value:"UI Integration with Game Systems",id:"ui-integration-with-game-systems",level:2},{value:"Creating a Mod Configuration Screen",id:"creating-a-mod-configuration-screen",level:3},{value:"Creating an In-Game HUD Element",id:"creating-an-in-game-hud-element",level:3},{value:"UI Animation and Styling",id:"ui-animation-and-styling",level:2},{value:"Creating Animated UI Elements",id:"creating-animated-ui-elements",level:3},{value:"Creating Styled UI Elements",id:"creating-styled-ui-elements",level:3}];function r(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"ui-snippets",children:"UI Snippets"})}),"\n",(0,i.jsx)(e.p,{children:"This page provides reusable code snippets for creating and manipulating UI elements in Don't Starve Together mods."}),"\n",(0,i.jsx)(e.h2,{id:"basic-ui-elements",children:"Basic UI Elements"}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-simple-screen",children:"Creating a Simple Screen"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Define a simple screen\nlocal MyScreen = Class(Screen, function(self, title)\n    Screen._ctor(self, "MyScreen")\n    self.title = title or "My Screen"\n    \n    -- Create root widget\n    self.root = self:AddChild(Widget("ROOT"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetPosition(0, 0, 0)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add background\n    self.bg = self.root:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n    self.bg:SetSize(400, 300)\n    self.bg:SetTint(1, 1, 1, 0.8)\n    \n    -- Add title text\n    self.title_text = self.root:AddChild(Text(TITLEFONT, 30))\n    self.title_text:SetPosition(0, 120, 0)\n    self.title_text:SetString(self.title)\n    \n    -- Add close button\n    self.close_button = self.root:AddChild(TextButton())\n    self.close_button:SetPosition(0, -120, 0)\n    self.close_button:SetText("Close")\n    self.close_button:SetOnClick(function() self:Close() end)\n    self.close_button:SetFont(BUTTONFONT)\n    self.close_button:SetTextSize(30)\nend)\n\n-- Handle closing the screen\nfunction MyScreen:Close()\n    TheFrontEnd:PopScreen(self)\nend\n\n-- Handle input\nfunction MyScreen:OnControl(control, down)\n    if MyScreen._base.OnControl(self, control, down) then return true end\n    \n    if not down and control == CONTROL_CANCEL then\n        self:Close()\n        return true\n    end\n    \n    return false\nend\n\n-- Usage:\n-- TheFrontEnd:PushScreen(MyScreen("Example Title"))\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-button",children:"Creating a Button"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Function to create a button\nlocal function MakeButton(parent, text, position, onclick)\n    local button = parent:AddChild(TextButton())\n    button:SetPosition(position:Get())\n    button:SetText(text)\n    button:SetOnClick(onclick)\n    button:SetFont(BUTTONFONT)\n    button:SetTextSize(30)\n    \n    return button\nend\n\n-- Usage:\n-- local my_button = MakeButton(self.root, "Click Me", Vector3(0, -50, 0), function() print("Button clicked!") end)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-checkbox",children:"Creating a Checkbox"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Function to create a checkbox\nlocal function MakeCheckbox(parent, text, position, initial_value, onchange)\n    local checkbox_root = parent:AddChild(Widget("checkbox_root"))\n    checkbox_root:SetPosition(position:Get())\n    \n    -- Add checkbox\n    local checkbox = checkbox_root:AddChild(ImageButton("images/ui.xml", "checkbox_off.tex", "checkbox_on.tex", "checkbox_disabled.tex"))\n    checkbox:SetPosition(-10, 0, 0)\n    checkbox.checked = initial_value or false\n    checkbox:SetOnClick(function()\n        checkbox.checked = not checkbox.checked\n        checkbox:SetImageNormal(checkbox.checked and "checkbox_on.tex" or "checkbox_off.tex")\n        if onchange then\n            onchange(checkbox.checked)\n        end\n    end)\n    \n    -- Set initial state\n    checkbox:SetImageNormal(checkbox.checked and "checkbox_on.tex" or "checkbox_off.tex")\n    \n    -- Add label\n    local label = checkbox_root:AddChild(Text(BUTTONFONT, 25))\n    label:SetPosition(80, 0, 0)\n    label:SetString(text)\n    label:SetHAlign(ANCHOR_LEFT)\n    \n    return checkbox\nend\n\n-- Usage:\n-- local my_checkbox = MakeCheckbox(self.root, "Enable Feature", Vector3(0, 0, 0), false, function(checked) \n--     print("Checkbox state: " .. tostring(checked)) \n-- end)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-slider",children:"Creating a Slider"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Function to create a slider\nlocal function MakeSlider(parent, text, position, min_val, max_val, initial_val, onchange)\n    local slider_root = parent:AddChild(Widget("slider_root"))\n    slider_root:SetPosition(position:Get())\n    \n    -- Add label\n    local label = slider_root:AddChild(Text(BUTTONFONT, 25))\n    label:SetPosition(0, 30, 0)\n    label:SetString(text)\n    \n    -- Add slider\n    local slider = slider_root:AddChild(Slider("small", 200, min_val, max_val, initial_val))\n    slider:SetPosition(0, 0, 0)\n    \n    -- Add value text\n    local value_text = slider_root:AddChild(Text(NUMBERFONT, 25))\n    value_text:SetPosition(0, -30, 0)\n    value_text:SetString(tostring(initial_val))\n    \n    -- Set callback\n    slider.OnChanged = function(_, value)\n        local rounded_value = math.floor(value * 100) / 100 -- Round to 2 decimal places\n        value_text:SetString(tostring(rounded_value))\n        \n        if onchange then\n            onchange(rounded_value)\n        end\n    end\n    \n    return slider\nend\n\n-- Usage:\n-- local my_slider = MakeSlider(self.root, "Volume", Vector3(0, 0, 0), 0, 1, 0.5, function(value) \n--     print("Slider value: " .. tostring(value)) \n-- end)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-text-input-field",children:"Creating a Text Input Field"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Function to create a text input field\nlocal function MakeTextInput(parent, text, position, initial_text, onchange, max_length)\n    local input_root = parent:AddChild(Widget("input_root"))\n    input_root:SetPosition(position:Get())\n    \n    -- Add label\n    local label = input_root:AddChild(Text(BUTTONFONT, 25))\n    label:SetPosition(0, 30, 0)\n    label:SetString(text)\n    \n    -- Add text edit box\n    local text_edit = input_root:AddChild(TextEdit(CHATFONT, 25, initial_text or ""))\n    text_edit:SetPosition(0, 0, 0)\n    text_edit:SetRegionSize(200, 40)\n    text_edit:SetHAlign(ANCHOR_LEFT)\n    text_edit:SetFocusedImage("images/textboxes.xml", "textbox_long.tex", "textbox_long_over.tex")\n    text_edit:SetUnfocusedImage("images/textboxes.xml", "textbox_long.tex", "textbox_long_over.tex")\n    text_edit:SetTextLengthLimit(max_length or 50)\n    text_edit:SetForceEdit(true)\n    \n    -- Set callback\n    text_edit.OnTextEntered = function()\n        if onchange then\n            onchange(text_edit:GetString())\n        end\n    end\n    \n    -- Add background for better visibility\n    local bg = input_root:AddChild(Image("images/textboxes.xml", "textbox_long.tex"))\n    bg:SetPosition(0, 0, 0)\n    bg:SetSize(200, 40)\n    bg:MoveToBack()\n    \n    return text_edit\nend\n\n-- Usage:\n-- local my_input = MakeTextInput(self.root, "Name", Vector3(0, 0, 0), "Player", function(text) \n--     print("Input text: " .. text) \n-- end, 20)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"advanced-ui-components",children:"Advanced UI Components"}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-dropdown-menu",children:"Creating a Dropdown Menu"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Function to create a dropdown menu\nlocal function MakeDropdown(parent, text, position, options, initial_selection, onselect)\n    local dropdown_root = parent:AddChild(Widget("dropdown_root"))\n    dropdown_root:SetPosition(position:Get())\n    \n    -- Add label\n    local label = dropdown_root:AddChild(Text(BUTTONFONT, 25))\n    label:SetPosition(0, 30, 0)\n    label:SetString(text)\n    \n    -- Create dropdown button\n    local dropdown_button = dropdown_root:AddChild(TextButton())\n    dropdown_button:SetPosition(0, 0, 0)\n    dropdown_button:SetText(options[initial_selection] or "Select...")\n    dropdown_button:SetFont(BUTTONFONT)\n    dropdown_button:SetTextSize(25)\n    dropdown_button:SetSize(200, 40)\n    \n    -- Variables for dropdown state\n    local is_open = false\n    local selection = initial_selection\n    local dropdown_items = {}\n    local dropdown_menu = nil\n    \n    -- Function to close dropdown\n    local function CloseDropdown()\n        if dropdown_menu then\n            dropdown_menu:Kill()\n            dropdown_menu = nil\n        end\n        is_open = false\n    end\n    \n    -- Function to open dropdown\n    local function OpenDropdown()\n        if is_open then\n            CloseDropdown()\n            return\n        end\n        \n        is_open = true\n        \n        -- Create dropdown menu\n        dropdown_menu = dropdown_root:AddChild(Widget("dropdown_menu"))\n        dropdown_menu:SetPosition(0, -20 - (#options * 20), 0)\n        \n        -- Add background\n        local menu_bg = dropdown_menu:AddChild(Image("images/ui.xml", "single_option_bg.tex"))\n        menu_bg:SetSize(200, #options * 40)\n        menu_bg:SetTint(0.1, 0.1, 0.1, 0.9)\n        \n        -- Add options\n        for i, option_text in ipairs(options) do\n            local option = dropdown_menu:AddChild(TextButton())\n            option:SetPosition(0, (#options - i) * 40, 0)\n            option:SetText(option_text)\n            option:SetFont(BUTTONFONT)\n            option:SetTextSize(25)\n            option:SetSize(200, 40)\n            \n            option:SetOnClick(function()\n                selection = i\n                dropdown_button:SetText(option_text)\n                CloseDropdown()\n                \n                if onselect then\n                    onselect(i, option_text)\n                end\n            end)\n            \n            table.insert(dropdown_items, option)\n        end\n    end\n    \n    -- Set click handler for dropdown button\n    dropdown_button:SetOnClick(function()\n        OpenDropdown()\n    end)\n    \n    -- Add method to get current selection\n    dropdown_root.GetSelectedIndex = function()\n        return selection\n    end\n    \n    dropdown_root.GetSelectedText = function()\n        return options[selection]\n    end\n    \n    return dropdown_root\nend\n\n-- Usage:\n-- local options = {"Option 1", "Option 2", "Option 3"}\n-- local my_dropdown = MakeDropdown(self.root, "Select Option", Vector3(0, 0, 0), options, 1, function(index, text) \n--     print("Selected: " .. text .. " (index: " .. index .. ")") \n-- end)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-tab-system",children:"Creating a Tab System"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Function to create a tab system\nlocal function MakeTabSystem(parent, position, width, height, tabs)\n    local tab_root = parent:AddChild(Widget("tab_root"))\n    tab_root:SetPosition(position:Get())\n    \n    -- Create tab buttons container\n    local tab_buttons = tab_root:AddChild(Widget("tab_buttons"))\n    tab_buttons:SetPosition(0, height/2 + 20, 0)\n    \n    -- Create content area\n    local content_area = tab_root:AddChild(Widget("content_area"))\n    content_area:SetPosition(0, 0, 0)\n    \n    -- Add background for content\n    local content_bg = content_area:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n    content_bg:SetSize(width, height)\n    content_bg:SetTint(0.2, 0.2, 0.2, 0.8)\n    \n    -- Tab content widgets\n    local tab_contents = {}\n    local active_tab = 1\n    \n    -- Function to switch tabs\n    local function SwitchToTab(index)\n        -- Hide all tab contents\n        for i, content in ipairs(tab_contents) do\n            content:Hide()\n        end\n        \n        -- Show selected tab content\n        if tab_contents[index] then\n            tab_contents[index]:Show()\n            active_tab = index\n        end\n    end\n    \n    -- Create tabs\n    local tab_width = width / #tabs\n    for i, tab_info in ipairs(tabs) do\n        -- Create tab button\n        local tab_button = tab_buttons:AddChild(TextButton())\n        tab_button:SetPosition((i - (#tabs/2)) * tab_width + tab_width/2, 0, 0)\n        tab_button:SetText(tab_info.title)\n        tab_button:SetFont(BUTTONFONT)\n        tab_button:SetTextSize(25)\n        tab_button:SetSize(tab_width - 10, 40)\n        \n        -- Create tab content\n        local tab_content = content_area:AddChild(Widget("tab_" .. i))\n        tab_content:SetPosition(0, 0, 0)\n        \n        -- Add content creation function\n        if tab_info.build_fn then\n            tab_info.build_fn(tab_content)\n        end\n        \n        -- Store content widget\n        table.insert(tab_contents, tab_content)\n        \n        -- Set click handler\n        tab_button:SetOnClick(function()\n            SwitchToTab(i)\n        end)\n    end\n    \n    -- Initialize with first tab active\n    SwitchToTab(1)\n    \n    -- Add method to switch tabs programmatically\n    tab_root.SwitchToTab = SwitchToTab\n    tab_root.GetActiveTab = function() return active_tab end\n    \n    return tab_root\nend\n\n-- Usage:\n-- local tabs = {\n--     {title = "General", build_fn = function(parent) \n--         -- Add content for General tab\n--         parent:AddChild(Text(BUTTONFONT, 30)):SetString("General Settings")\n--     end},\n--     {title = "Audio", build_fn = function(parent)\n--         -- Add content for Audio tab\n--         parent:AddChild(Text(BUTTONFONT, 30)):SetString("Audio Settings")\n--     end},\n--     {title = "Controls", build_fn = function(parent)\n--         -- Add content for Controls tab\n--         parent:AddChild(Text(BUTTONFONT, 30)):SetString("Control Settings")\n--     end}\n-- }\n-- local my_tabs = MakeTabSystem(self.root, Vector3(0, 0, 0), 400, 300, tabs)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"ui-integration-with-game-systems",children:"UI Integration with Game Systems"}),"\n",(0,i.jsx)(e.h3,{id:"creating-a-mod-configuration-screen",children:"Creating a Mod Configuration Screen"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Define a mod configuration screen\nlocal ModConfigScreen = Class(Screen, function(self, modname, options)\n    Screen._ctor(self, "ModConfigScreen")\n    self.modname = modname or "My Mod"\n    self.options = options or {}\n    \n    -- Create root widget\n    self.root = self:AddChild(Widget("ROOT"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetPosition(0, 0, 0)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    -- Add background\n    self.bg = self.root:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n    self.bg:SetSize(500, 450)\n    self.bg:SetTint(0.1, 0.1, 0.1, 0.8)\n    \n    -- Add title\n    self.title = self.root:AddChild(Text(TITLEFONT, 40))\n    self.title:SetPosition(0, 180, 0)\n    self.title:SetString(self.modname .. " Settings")\n    \n    -- Add content container\n    self.content = self.root:AddChild(Widget("content"))\n    self.content:SetPosition(0, 0, 0)\n    \n    -- Add options based on provided configuration\n    self:BuildOptions()\n    \n    -- Add buttons\n    self.save_button = self.root:AddChild(TextButton())\n    self.save_button:SetPosition(-100, -180, 0)\n    self.save_button:SetText("Save")\n    self.save_button:SetOnClick(function() self:Save() end)\n    self.save_button:SetFont(BUTTONFONT)\n    self.save_button:SetTextSize(30)\n    \n    self.cancel_button = self.root:AddChild(TextButton())\n    self.cancel_button:SetPosition(100, -180, 0)\n    self.cancel_button:SetText("Cancel")\n    self.cancel_button:SetOnClick(function() self:Cancel() end)\n    self.cancel_button:SetFont(BUTTONFONT)\n    self.cancel_button:SetTextSize(30)\nend)\n\n-- Build UI elements for each option\nfunction ModConfigScreen:BuildOptions()\n    local y_offset = 100\n    local y_step = 60\n    \n    for i, option in ipairs(self.options) do\n        local y_pos = y_offset - (i-1) * y_step\n        \n        if option.type == "checkbox" then\n            -- Create checkbox option\n            local checkbox = self.content:AddChild(ImageButton("images/ui.xml", "checkbox_off.tex", "checkbox_on.tex", "checkbox_disabled.tex"))\n            checkbox:SetPosition(-180, y_pos, 0)\n            checkbox.checked = option.value or false\n            checkbox:SetImageNormal(checkbox.checked and "checkbox_on.tex" or "checkbox_off.tex")\n            checkbox:SetOnClick(function()\n                checkbox.checked = not checkbox.checked\n                checkbox:SetImageNormal(checkbox.checked and "checkbox_on.tex" or "checkbox_off.tex")\n                option.value = checkbox.checked\n                if option.callback then\n                    option.callback(checkbox.checked)\n                end\n            end)\n            \n            -- Add label\n            local label = self.content:AddChild(Text(BUTTONFONT, 25))\n            label:SetPosition(0, y_pos, 0)\n            label:SetString(option.name)\n            label:SetHAlign(ANCHOR_LEFT)\n            \n        elseif option.type == "slider" then\n            -- Create slider option\n            local label = self.content:AddChild(Text(BUTTONFONT, 25))\n            label:SetPosition(-180, y_pos, 0)\n            label:SetString(option.name)\n            label:SetHAlign(ANCHOR_LEFT)\n            \n            local slider = self.content:AddChild(Slider("small", 200, option.min or 0, option.max or 1, option.value or 0))\n            slider:SetPosition(70, y_pos, 0)\n            \n            local value_text = self.content:AddChild(Text(NUMBERFONT, 25))\n            value_text:SetPosition(180, y_pos, 0)\n            value_text:SetString(tostring(option.value))\n            \n            slider.OnChanged = function(_, value)\n                local rounded_value = math.floor(value * 100) / 100\n                value_text:SetString(tostring(rounded_value))\n                option.value = rounded_value\n                if option.callback then\n                    option.callback(rounded_value)\n                end\n            end\n            \n        elseif option.type == "dropdown" then\n            -- Create dropdown option\n            local label = self.content:AddChild(Text(BUTTONFONT, 25))\n            label:SetPosition(-180, y_pos, 0)\n            label:SetString(option.name)\n            label:SetHAlign(ANCHOR_LEFT)\n            \n            local dropdown_button = self.content:AddChild(TextButton())\n            dropdown_button:SetPosition(70, y_pos, 0)\n            dropdown_button:SetText(option.options[option.selected or 1] or "Select...")\n            dropdown_button:SetFont(BUTTONFONT)\n            dropdown_button:SetTextSize(25)\n            dropdown_button:SetSize(200, 40)\n            \n            -- Variables for dropdown state\n            option.dropdown_open = false\n            \n            dropdown_button:SetOnClick(function()\n                if option.dropdown_menu then\n                    option.dropdown_menu:Kill()\n                    option.dropdown_menu = nil\n                    option.dropdown_open = false\n                    return\n                end\n                \n                option.dropdown_open = true\n                option.dropdown_menu = self.content:AddChild(Widget("dropdown_menu"))\n                option.dropdown_menu:SetPosition(70, y_pos - 20 - (#option.options * 20), 0)\n                \n                -- Add background\n                local menu_bg = option.dropdown_menu:AddChild(Image("images/ui.xml", "single_option_bg.tex"))\n                menu_bg:SetSize(200, #option.options * 40)\n                menu_bg:SetTint(0.1, 0.1, 0.1, 0.9)\n                \n                -- Add options\n                for j, option_text in ipairs(option.options) do\n                    local opt = option.dropdown_menu:AddChild(TextButton())\n                    opt:SetPosition(0, (#option.options - j) * 40, 0)\n                    opt:SetText(option_text)\n                    opt:SetFont(BUTTONFONT)\n                    opt:SetTextSize(25)\n                    opt:SetSize(200, 40)\n                    \n                    opt:SetOnClick(function()\n                        option.selected = j\n                        dropdown_button:SetText(option_text)\n                        option.dropdown_menu:Kill()\n                        option.dropdown_menu = nil\n                        option.dropdown_open = false\n                        \n                        if option.callback then\n                            option.callback(j, option_text)\n                        end\n                    end)\n                end\n            end)\n        end\n    end\nend\n\n-- Save configuration\nfunction ModConfigScreen:Save()\n    -- Here you would typically save to mod settings\n    -- For example using TheSim:SetPersistentString\n    \n    -- Example:\n    local config_data = {}\n    for _, option in ipairs(self.options) do\n        config_data[option.id] = option.value\n    end\n    \n    local config_str = json.encode(config_data)\n    TheSim:SetPersistentString(self.modname .. "_config", config_str, false)\n    \n    -- Close screen\n    TheFrontEnd:PopScreen(self)\n    \n    -- Notify that settings were saved\n    if self.onsave then\n        self.onsave(config_data)\n    end\nend\n\n-- Cancel and close\nfunction ModConfigScreen:Cancel()\n    TheFrontEnd:PopScreen(self)\nend\n\n-- Handle input\nfunction ModConfigScreen:OnControl(control, down)\n    if ModConfigScreen._base.OnControl(self, control, down) then return true end\n    \n    if not down and control == CONTROL_CANCEL then\n        self:Cancel()\n        return true\n    end\n    \n    return false\nend\n\n-- Usage:\n-- local options = {\n--     {id = "enable_feature", name = "Enable Feature", type = "checkbox", value = true},\n--     {id = "difficulty", name = "Difficulty", type = "slider", min = 0, max = 1, value = 0.5},\n--     {id = "character", name = "Character", type = "dropdown", options = {"Wilson", "Willow", "Wolfgang"}, selected = 1}\n-- }\n-- \n-- local config_screen = ModConfigScreen("My Cool Mod", options)\n-- config_screen.onsave = function(data)\n--     print("Settings saved!")\n-- end\n-- \n-- TheFrontEnd:PushScreen(config_screen)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-an-in-game-hud-element",children:"Creating an In-Game HUD Element"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Define a custom HUD element\nlocal CustomHUD = Class(Widget, function(self)\n    Widget._ctor(self, "CustomHUD")\n    \n    -- Set anchor to top-right corner\n    self:SetVAnchor(ANCHOR_TOP)\n    self:SetHAnchor(ANCHOR_RIGHT)\n    self:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    self:SetPosition(-150, -100, 0)\n    \n    -- Create background\n    self.bg = self:AddChild(Image("images/ui.xml", "single_option_bg.tex"))\n    self.bg:SetSize(250, 120)\n    self.bg:SetTint(0.1, 0.1, 0.1, 0.7)\n    \n    -- Add title\n    self.title = self:AddChild(Text(BUTTONFONT, 30))\n    self.title:SetPosition(0, 40, 0)\n    self.title:SetString("Custom HUD")\n    \n    -- Add value display\n    self.value_text = self:AddChild(Text(NUMBERFONT, 40))\n    self.value_text:SetPosition(0, 0, 0)\n    self.value_text:SetString("0")\n    \n    -- Add button\n    self.button = self:AddChild(TextButton())\n    self.button:SetPosition(0, -40, 0)\n    self.button:SetText("Action")\n    self.button:SetOnClick(function() self:DoAction() end)\n    self.button:SetFont(BUTTONFONT)\n    self.button:SetTextSize(25)\n    \n    -- Initialize value\n    self.value = 0\n    \n    -- Start update task\n    self:StartUpdating()\nend)\n\n-- Update function called every frame\nfunction CustomHUD:OnUpdate(dt)\n    -- Example: Update based on player state\n    local player = ThePlayer\n    if player and player.components.health then\n        local health_percent = player.components.health:GetPercent()\n        self.value_text:SetString(string.format("%.0f%%", health_percent * 100))\n        \n        -- Change color based on health\n        if health_percent < 0.25 then\n            self.value_text:SetColour(1, 0, 0, 1) -- Red for low health\n        elseif health_percent < 0.5 then\n            self.value_text:SetColour(1, 1, 0, 1) -- Yellow for medium health\n        else\n            self.value_text:SetColour(0, 1, 0, 1) -- Green for high health\n        end\n    end\nend\n\n-- Custom action function\nfunction CustomHUD:DoAction()\n    local player = ThePlayer\n    if player then\n        -- Example action: Heal player a bit\n        if player.components.health then\n            player.components.health:DoDelta(10)\n        end\n    end\nend\n\n-- Show the HUD\nfunction CustomHUD:Show()\n    self:StartUpdating()\n    self:SetClickable(true)\n    self:Show()\nend\n\n-- Hide the HUD\nfunction CustomHUD:Hide()\n    self:StopUpdating()\n    self:SetClickable(false)\n    self:Hide()\nend\n\n-- Usage in a mod:\n-- local function AddCustomHUD()\n--     local hud = CustomHUD()\n--     TheFrontEnd:GetHUD():AddChild(hud)\n--     return hud\n-- end\n-- \n-- -- Add when player spawns\n-- AddPlayerPostInit(function(player)\n--     if player == ThePlayer then\n--         player:DoTaskInTime(1, function()\n--             AddCustomHUD()\n--         end)\n--     end\n-- end)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"ui-animation-and-styling",children:"UI Animation and Styling"}),"\n",(0,i.jsx)(e.h3,{id:"creating-animated-ui-elements",children:"Creating Animated UI Elements"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Function to create a pulsing icon\nlocal function MakePulsingIcon(parent, atlas, texture, position, size)\n    local icon = parent:AddChild(Image(atlas, texture))\n    icon:SetPosition(position:Get())\n    icon:SetSize(size, size)\n    \n    -- Animation variables\n    icon.pulse_time = 0\n    icon.pulse_speed = 1\n    icon.pulse_min = 0.8\n    icon.pulse_max = 1.2\n    \n    -- Start updating for animation\n    icon:StartUpdating()\n    \n    -- Update function for pulsing effect\n    icon.OnUpdate = function(self, dt)\n        self.pulse_time = self.pulse_time + dt * self.pulse_speed\n        local scale = self.pulse_min + (math.sin(self.pulse_time) + 1) * 0.5 * (self.pulse_max - self.pulse_min)\n        self:SetScale(scale, scale, 1)\n    end\n    \n    return icon\nend\n\n-- Function to create a spinning icon\nlocal function MakeSpinningIcon(parent, atlas, texture, position, size)\n    local icon = parent:AddChild(Image(atlas, texture))\n    icon:SetPosition(position:Get())\n    icon:SetSize(size, size)\n    \n    -- Animation variables\n    icon.spin_time = 0\n    icon.spin_speed = 1 -- rotations per second\n    \n    -- Start updating for animation\n    icon:StartUpdating()\n    \n    -- Update function for spinning effect\n    icon.OnUpdate = function(self, dt)\n        self.spin_time = self.spin_time + dt * self.spin_speed\n        local angle = self.spin_time * 360 % 360\n        self:SetRotation(angle)\n    end\n    \n    return icon\nend\n\n-- Function to create a fading icon\nlocal function MakeFadingIcon(parent, atlas, texture, position, size)\n    local icon = parent:AddChild(Image(atlas, texture))\n    icon:SetPosition(position:Get())\n    icon:SetSize(size, size)\n    \n    -- Animation variables\n    icon.fade_time = 0\n    icon.fade_speed = 0.5\n    icon.fade_min = 0.3\n    icon.fade_max = 1.0\n    \n    -- Start updating for animation\n    icon:StartUpdating()\n    \n    -- Update function for fading effect\n    icon.OnUpdate = function(self, dt)\n        self.fade_time = self.fade_time + dt * self.fade_speed\n        local alpha = self.fade_min + (math.sin(self.fade_time) + 1) * 0.5 * (self.fade_max - self.fade_min)\n        self:SetTint(1, 1, 1, alpha)\n    end\n    \n    return icon\nend\n\n-- Usage:\n-- local pulsing_icon = MakePulsingIcon(self.root, "images/inventoryimages.xml", "hammer.tex", Vector3(0, 0, 0), 64)\n-- local spinning_icon = MakeSpinningIcon(self.root, "images/inventoryimages.xml", "compass.tex", Vector3(100, 0, 0), 64)\n-- local fading_icon = MakeFadingIcon(self.root, "images/inventoryimages.xml", "torch.tex", Vector3(-100, 0, 0), 64)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"creating-styled-ui-elements",children:"Creating Styled UI Elements"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Function to create a styled button\nlocal function MakeStyledButton(parent, text, position, onclick, style)\n    style = style or "default"\n    \n    local button = parent:AddChild(Widget("styled_button"))\n    button:SetPosition(position:Get())\n    \n    -- Add background based on style\n    local bg = nil\n    if style == "default" then\n        bg = button:AddChild(Image("images/ui.xml", "button.tex"))\n        bg:SetSize(200, 60)\n        bg:SetTint(0.7, 0.7, 0.7, 1)\n    elseif style == "red" then\n        bg = button:AddChild(Image("images/ui.xml", "button.tex"))\n        bg:SetSize(200, 60)\n        bg:SetTint(0.8, 0.3, 0.3, 1)\n    elseif style == "green" then\n        bg = button:AddChild(Image("images/ui.xml", "button.tex"))\n        bg:SetSize(200, 60)\n        bg:SetTint(0.3, 0.8, 0.3, 1)\n    elseif style == "blue" then\n        bg = button:AddChild(Image("images/ui.xml", "button.tex"))\n        bg:SetSize(200, 60)\n        bg:SetTint(0.3, 0.3, 0.8, 1)\n    elseif style == "gold" then\n        bg = button:AddChild(Image("images/ui.xml", "button.tex"))\n        bg:SetSize(200, 60)\n        bg:SetTint(0.8, 0.8, 0.2, 1)\n    end\n    \n    -- Add text\n    local label = button:AddChild(Text(BUTTONFONT, 30))\n    label:SetPosition(0, 0, 0)\n    label:SetString(text)\n    \n    -- Add hover effect\n    button.OnGainFocus = function()\n        bg:SetScale(1.1, 1.1, 1)\n        label:SetScale(1.1, 1.1, 1)\n    end\n    \n    button.OnLoseFocus = function()\n        bg:SetScale(1, 1, 1)\n        label:SetScale(1, 1, 1)\n    end\n    \n    -- Make clickable\n    button:SetOnClick(onclick)\n    \n    return button\nend\n\n-- Function to create a panel with border\nlocal function MakeBorderedPanel(parent, position, width, height, title)\n    local panel = parent:AddChild(Widget("bordered_panel"))\n    panel:SetPosition(position:Get())\n    \n    -- Add background\n    local bg = panel:AddChild(Image("images/ui.xml", "bg_plain.tex"))\n    bg:SetSize(width, height)\n    bg:SetTint(0.2, 0.2, 0.2, 0.8)\n    \n    -- Add border\n    local border_size = 4\n    \n    -- Top border\n    local top_border = panel:AddChild(Image("images/ui.xml", "white.tex"))\n    top_border:SetSize(width, border_size)\n    top_border:SetPosition(0, height/2 - border_size/2, 0)\n    top_border:SetTint(0.8, 0.8, 0.8, 1)\n    \n    -- Bottom border\n    local bottom_border = panel:AddChild(Image("images/ui.xml", "white.tex"))\n    bottom_border:SetSize(width, border_size)\n    bottom_border:SetPosition(0, -height/2 + border_size/2, 0)\n    bottom_border:SetTint(0.8, 0.8, 0.8, 1)\n    \n    -- Left border\n    local left_border = panel:AddChild(Image("images/ui.xml", "white.tex"))\n    left_border:SetSize(border_size, height)\n    left_border:SetPosition(-width/2 + border_size/2, 0, 0)\n    left_border:SetTint(0.8, 0.8, 0.8, 1)\n    \n    -- Right border\n    local right_border = panel:AddChild(Image("images/ui.xml", "white.tex"))\n    right_border:SetSize(border_size, height)\n    right_border:SetPosition(width/2 - border_size/2, 0, 0)\n    right_border:SetTint(0.8, 0.8, 0.8, 1)\n    \n    -- Add title if provided\n    if title then\n        local title_bg = panel:AddChild(Image("images/ui.xml", "single_option_bg.tex"))\n        title_bg:SetSize(width * 0.6, 40)\n        title_bg:SetPosition(0, height/2 + 20, 0)\n        title_bg:SetTint(0.3, 0.3, 0.3, 0.9)\n        \n        local title_text = panel:AddChild(Text(TITLEFONT, 30))\n        title_text:SetPosition(0, height/2 + 20, 0)\n        title_text:SetString(title)\n    end\n    \n    -- Add content container\n    panel.content = panel:AddChild(Widget("content"))\n    panel.content:SetPosition(0, 0, 0)\n    \n    return panel\nend\n\n-- Function to create a tooltip\nlocal function MakeTooltip(text, position)\n    local tooltip = Widget("tooltip")\n    tooltip:SetPosition(position:Get())\n    \n    -- Add background\n    local bg = tooltip:AddChild(Image("images/ui.xml", "single_option_bg.tex"))\n    \n    -- Add text\n    local tooltip_text = tooltip:AddChild(Text(BODYTEXTFONT, 20))\n    tooltip_text:SetPosition(0, 0, 0)\n    tooltip_text:SetString(text)\n    tooltip_text:SetVAlign(ANCHOR_MIDDLE)\n    tooltip_text:SetHAlign(ANCHOR_MIDDLE)\n    tooltip_text:SetRegionSize(300, 100)\n    \n    -- Size background based on text\n    local w, h = tooltip_text:GetRegionSize()\n    bg:SetSize(w + 20, h + 20)\n    \n    return tooltip\nend\n\n-- Function to add a tooltip to a widget\nlocal function AddTooltipToWidget(widget, tooltip_text)\n    widget.tooltip = nil\n    \n    widget.OnGainFocus = function(self)\n        if self.tooltip then\n            self.tooltip:Kill()\n        end\n        \n        self.tooltip = self:AddChild(MakeTooltip(tooltip_text, Vector3(0, -50, 0)))\n    end\n    \n    widget.OnLoseFocus = function(self)\n        if self.tooltip then\n            self.tooltip:Kill()\n            self.tooltip = nil\n        end\n    end\nend\n\n-- Usage:\n-- local styled_button = MakeStyledButton(self.root, "Click Me", Vector3(0, 0, 0), function() print("Clicked!") end, "green")\n-- local panel = MakeBorderedPanel(self.root, Vector3(0, 0, 0), 300, 200, "My Panel")\n-- AddTooltipToWidget(styled_button, "This is a helpful tooltip that explains what this button does")\n'})})]})}function p(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(r,{...n})}):r(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>d});var o=t(6540);const i={},l=o.createContext(i);function a(n){const e=o.useContext(l);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),o.createElement(l.Provider,{value:e},n.children)}}}]);