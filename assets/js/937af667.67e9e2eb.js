"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[16438],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var l=s(96540);const i={},r=l.createContext(i);function t(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),l.createElement(r.Provider,{value:n},e.children)}},47866:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/utilities/vecutil","title":"VecUtil","description":"Utility functions for 2D vector operations on the XZ plane","source":"@site/docs/game-scripts/core-systems/fundamentals/utilities/vecutil.md","sourceDirName":"game-scripts/core-systems/fundamentals/utilities","slug":"/game-scripts/core-systems/fundamentals/utilities/vecutil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vecutil","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"vecutil","title":"VecUtil","description":"Utility functions for 2D vector operations on the XZ plane","sidebar_position":5,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Vector3","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vector3"},"next":{"title":"AI Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/ai-systems/"}}');var i=s(74848),r=s(28453);const t={id:"vecutil",title:"VecUtil",description:"Utility functions for 2D vector operations on the XZ plane",sidebar_position:5,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},c="VecUtil",o={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"VecUtil_Add(p1_x, p1_z, p2_x, p2_z)",id:"vecutil-add",level:3},{value:"VecUtil_Sub(p1_x, p1_z, p2_x, p2_z)",id:"vecutil-sub",level:3},{value:"VecUtil_Scale(p1_x, p1_z, scale)",id:"vecutil-scale",level:3},{value:"VecUtil_LengthSq(p1_x, p1_z)",id:"vecutil-lengthsq",level:3},{value:"VecUtil_Length(p1_x, p1_z)",id:"vecutil-length",level:3},{value:"VecUtil_DistSq(p1_x, p1_z, p2_x, p2_z)",id:"vecutil-distsq",level:3},{value:"VecUtil_Dist(p1_x, p1_z, p2_x, p2_z)",id:"vecutil-dist",level:3},{value:"VecUtil_Dot(p1_x, p1_z, p2_x, p2_z)",id:"vecutil-dot",level:3},{value:"VecUtil_Lerp(p1_x, p1_z, p2_x, p2_z, percent)",id:"vecutil-lerp",level:3},{value:"VecUtil_NormalizeNoNaN(p1_x, p1_z)",id:"vecutil-normalizenonan",level:3},{value:"VecUtil_Normalize(p1_x, p1_z)",id:"vecutil-normalize",level:3},{value:"VecUtil_NormalAndLength(p1_x, p1_z)",id:"vecutil-normalandlength",level:3},{value:"VecUtil_GetAngleInDegrees(p1_x, p1_z)",id:"vecutil-getangleindegrees",level:3},{value:"VecUtil_GetAngleInRads(p1_x, p1_z)",id:"vecutil-getangleinrads",level:3},{value:"VecUtil_Slerp(p1_x, p1_z, p2_x, p2_z, percent)",id:"vecutil-slerp",level:3},{value:"VecUtil_RotateAroundPoint(a_x, a_z, b_x, b_z, theta)",id:"vecutil-rotatearoundpoint",level:3},{value:"VecUtil_RotateDir(dir_x, dir_z, theta)",id:"vecutil-rotatedir",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Entity Movement and Pathfinding",id:"entity-movement-and-pathfinding",level:3},{value:"Range Checking",id:"range-checking",level:3},{value:"Angle-Based AI Behaviors",id:"angle-based-ai-behaviors",level:3},{value:"Circular Movement Patterns",id:"circular-movement-patterns",level:3},{value:"Related Modules",id:"related-modules",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"vecutil",children:"VecUtil"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"vecutil.lua"})," module provides high-performance utility functions for 2D vector operations on the XZ plane. These functions are optimized for Don't Starve Together's primary gameplay coordinate system where Y represents height and XZ represents the ground plane. All functions operate directly on coordinate parameters without requiring object instantiation."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Basic 2D vector operations on XZ plane\nlocal x1, z1 = 1, 3\nlocal x2, z2 = 4, 6\n\n-- Add two vectors\nlocal result_x, result_z = VecUtil_Add(x1, z1, x2, z2)\n-- result: 5, 9\n\n-- Calculate distance between points\nlocal distance = VecUtil_Dist(x1, z1, x2, z2)\n\n-- Get normalized direction vector\nlocal dir_x, dir_z = VecUtil_NormalizeNoNaN(x2 - x1, z2 - z1)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-add",children:"VecUtil_Add(p1_x, p1_z, p2_x, p2_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nAdds two 2D vectors component-wise on the XZ plane."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of first vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of first vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_x"})," (number): X component of second vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_z"})," (number): Z component of second vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The sum vector components (x, z)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local x, z = VecUtil_Add(1, 3, 4, 6)\n-- Result: x=5, z=9\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-sub",children:"VecUtil_Sub(p1_x, p1_z, p2_x, p2_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSubtracts the second 2D vector from the first vector component-wise."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of first vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of first vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_x"})," (number): X component of second vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_z"})," (number): Z component of second vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The difference vector components (x, z)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local x, z = VecUtil_Sub(5, 9, 1, 3)\n-- Result: x=4, z=6\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-scale",children:"VecUtil_Scale(p1_x, p1_z, scale)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nScales a 2D vector by a scalar value."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"scale"})," (number): Scalar multiplier"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The scaled vector components (x, z)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local x, z = VecUtil_Scale(2, 4, 1.5)\n-- Result: x=3, z=6\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-lengthsq",children:"VecUtil_LengthSq(p1_x, p1_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the squared length (magnitude) of a 2D vector. This is more efficient than calculating the actual length when comparing distances."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): The squared length of the vector"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local lengthSq = VecUtil_LengthSq(3, 4)\n-- Result: 25 (3\xb2 + 4\xb2 = 9 + 16 = 25)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-length",children:"VecUtil_Length(p1_x, p1_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the length (magnitude) of a 2D vector."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): The length of the vector"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local length = VecUtil_Length(3, 4)\n-- Result: 5 (\u221a25)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-distsq",children:"VecUtil_DistSq(p1_x, p1_z, p2_x, p2_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the squared distance between two 2D points. More efficient than calculating actual distance for comparison purposes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X coordinate of first point"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z coordinate of first point"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_x"})," (number): X coordinate of second point"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_z"})," (number): Z coordinate of second point"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): The squared distance between the points"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local distSq = VecUtil_DistSq(0, 0, 3, 4)\n-- Result: 25\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-dist",children:"VecUtil_Dist(p1_x, p1_z, p2_x, p2_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the actual distance between two 2D points."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X coordinate of first point"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z coordinate of first point"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_x"})," (number): X coordinate of second point"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_z"})," (number): Z coordinate of second point"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): The distance between the points"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local distance = VecUtil_Dist(0, 0, 3, 4)\n-- Result: 5\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-dot",children:"VecUtil_Dot(p1_x, p1_z, p2_x, p2_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the dot product of two 2D vectors. Useful for determining angles between vectors and for projection calculations."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of first vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of first vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_x"})," (number): X component of second vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_z"})," (number): Z component of second vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): The dot product of the two vectors"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local dot = VecUtil_Dot(1, 0, 0, 1)\n-- Result: 0 (perpendicular vectors)\n\nlocal dot2 = VecUtil_Dot(2, 3, 4, 5)\n-- Result: 23 (2*4 + 3*5 = 8 + 15 = 23)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-lerp",children:"VecUtil_Lerp(p1_x, p1_z, p2_x, p2_z, percent)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nPerforms linear interpolation between two 2D vectors."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of start vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of start vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_x"})," (number): X component of end vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_z"})," (number): Z component of end vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"percent"})," (number): Interpolation factor (0.0 to 1.0)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The interpolated vector components (x, z)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Interpolate halfway between two points\nlocal x, z = VecUtil_Lerp(0, 0, 10, 20, 0.5)\n-- Result: x=5, z=10\n\n-- Get 25% of the way from start to end\nlocal x2, z2 = VecUtil_Lerp(0, 0, 10, 20, 0.25)\n-- Result: x2=2.5, z2=5\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-normalizenonan",children:"VecUtil_NormalizeNoNaN(p1_x, p1_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nNormalizes a 2D vector to unit length, returning (0, 0) if the input vector has zero length. This prevents NaN results that could occur with zero-length vectors."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The normalized vector components (x, z) or (0, 0) if input was zero-length"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local x, z = VecUtil_NormalizeNoNaN(3, 4)\n-- Result: x=0.6, z=0.8 (unit vector)\n\nlocal x2, z2 = VecUtil_NormalizeNoNaN(0, 0)\n-- Result: x2=0, z2=0 (safe handling of zero vector)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-normalize",children:"VecUtil_Normalize(p1_x, p1_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nNormalizes a 2D vector to unit length. Note: This function does not handle zero-length vectors safely - use VecUtil_NormalizeNoNaN for safer normalization."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The normalized vector components (x, z)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local x, z = VecUtil_Normalize(6, 8)\n-- Result: x=0.6, z=0.8 (unit vector in same direction)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-normalandlength",children:"VecUtil_NormalAndLength(p1_x, p1_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nNormalizes a 2D vector and returns both the normalized vector and its original length. More efficient than calling normalize and length separately."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number, number): The normalized vector components (x, z) and the original length"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local norm_x, norm_z, length = VecUtil_NormalAndLength(6, 8)\n-- Result: norm_x=0.6, norm_z=0.8, length=10\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-getangleindegrees",children:"VecUtil_GetAngleInDegrees(p1_x, p1_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the angle of a 2D vector in degrees (0-360). The angle is measured from the positive X-axis."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): The angle in degrees (0-360)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local angle = VecUtil_GetAngleInDegrees(1, 0)\n-- Result: 0 (pointing along positive X-axis)\n\nlocal angle2 = VecUtil_GetAngleInDegrees(0, 1)\n-- Result: 90 (pointing along positive Z-axis)\n\nlocal angle3 = VecUtil_GetAngleInDegrees(-1, 0)\n-- Result: 180 (pointing along negative X-axis)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-getangleinrads",children:"VecUtil_GetAngleInRads(p1_x, p1_z)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the angle of a 2D vector in radians (0-2\u03c0). The angle is measured from the positive X-axis."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of vector"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): The angle in radians (0-2\u03c0)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local angle = VecUtil_GetAngleInRads(1, 0)\n-- Result: 0 (pointing along positive X-axis)\n\nlocal angle2 = VecUtil_GetAngleInRads(0, 1)\n-- Result: \u03c0/2 (pointing along positive Z-axis)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-slerp",children:"VecUtil_Slerp(p1_x, p1_z, p2_x, p2_z, percent)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nPerforms spherical linear interpolation between two 2D vectors. This interpolates the angle between the vectors, maintaining unit length throughout the interpolation."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_x"})," (number): X component of start vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1_z"})," (number): Z component of start vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_x"})," (number): X component of end vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2_z"})," (number): Z component of end vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"percent"})," (number): Interpolation factor (0.0 to 1.0)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The interpolated unit vector components (x, z)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Slerp between two unit vectors\nlocal x, z = VecUtil_Slerp(1, 0, 0, 1, 0.5)\n-- Result: x\u22480.707, z\u22480.707 (45-degree angle)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-rotatearoundpoint",children:"VecUtil_RotateAroundPoint(a_x, a_z, b_x, b_z, theta)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRotates point B around point A by a given angle in radians."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"a_x"})," (number): X coordinate of rotation center (point A)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"a_z"})," (number): Z coordinate of rotation center (point A)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"b_x"})," (number): X coordinate of point to rotate (point B)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"b_z"})," (number): Z coordinate of point to rotate (point B)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"theta"})," (number): Rotation angle in radians"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The rotated point coordinates (x, z)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Rotate point (1, 0) around origin by 90 degrees (\u03c0/2 radians)\nlocal x, z = VecUtil_RotateAroundPoint(0, 0, 1, 0, math.pi / 2)\n-- Result: x\u22480, z\u22481\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vecutil-rotatedir",children:"VecUtil_RotateDir(dir_x, dir_z, theta)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRotates a direction vector by a given angle in radians."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dir_x"})," (number): X component of direction vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dir_z"})," (number): Z component of direction vector"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"theta"})," (number): Rotation angle in radians"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number, number): The rotated direction vector components (x, z)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Rotate direction vector (1, 0) by 45 degrees\nlocal x, z = VecUtil_RotateDir(1, 0, math.pi / 4)\n-- Result: x\u22480.707, z\u22480.707\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.p,{children:"VecUtil functions are optimized for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"High-frequency pathfinding and movement calculations"}),"\n",(0,i.jsx)(n.li,{children:"Distance checking for AI behaviors"}),"\n",(0,i.jsx)(n.li,{children:"Collision detection on the ground plane"}),"\n",(0,i.jsx)(n.li,{children:"Entity positioning and orientation"}),"\n",(0,i.jsx)(n.li,{children:"Minimal memory allocation overhead"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"entity-movement-and-pathfinding",children:"Entity Movement and Pathfinding"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Calculate direction to target\nlocal dir_x, dir_z = VecUtil_Sub(target_x, target_z, current_x, current_z)\nlocal norm_x, norm_z = VecUtil_NormalizeNoNaN(dir_x, dir_z)\n\n-- Move towards target with speed\nlocal speed = 5\nlocal new_x = current_x + norm_x * speed * dt\nlocal new_z = current_z + norm_z * speed * dt\n"})}),"\n",(0,i.jsx)(n.h3,{id:"range-checking",children:"Range Checking"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check if entity is within interaction range\nlocal INTERACT_RANGE = 3\nlocal INTERACT_RANGE_SQ = INTERACT_RANGE * INTERACT_RANGE\n\nif VecUtil_DistSq(player_x, player_z, entity_x, entity_z) <= INTERACT_RANGE_SQ then\n    -- Entity is in range\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"angle-based-ai-behaviors",children:"Angle-Based AI Behaviors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Calculate angle to target for AI facing\nlocal angle_to_target = VecUtil_GetAngleInDegrees(target_x - self_x, target_z - self_z)\n\n-- Smooth rotation towards target\nlocal current_angle = self:GetAngleToPoint(Vector3(target_x, 0, target_z))\nlocal rotated_x, rotated_z = VecUtil_RotateDir(1, 0, math.rad(current_angle))\n"})}),"\n",(0,i.jsx)(n.h3,{id:"circular-movement-patterns",children:"Circular Movement Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Create circular patrol pattern\nlocal time = GetTime()\nlocal radius = 10\nlocal speed = 0.5\nlocal center_x, center_z = 0, 0\n\nlocal x = center_x + radius * math.cos(time * speed)\nlocal z = center_z + radius * math.sin(time * speed)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vec3util",children:"Vec3Util"}),": 3D vector utility functions for full XYZ operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vector3",children:"Vector3"}),": Object-oriented 3D vector class"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/mathutil",children:"MathUtil"}),": Additional mathematical utility functions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./constants.md",children:"Constants"}),": Mathematical constants like PI and RADIANS"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);