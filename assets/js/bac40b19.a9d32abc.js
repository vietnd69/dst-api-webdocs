"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7881],{4219:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/components/inventory","title":"Inventory","description":"The Inventory component manages item storage, equipment slots, and item manipulation for entities that can carry items (such as players and some creatures).","source":"@site/docs/api-vanilla/components/inventory.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/inventory","permalink":"/dst-api-webdocs/docs/api-vanilla/components/inventory","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"inventory","title":"Inventory","sidebar_position":4},"sidebar":"docs","previous":{"title":"Health","permalink":"/dst-api-webdocs/docs/api-vanilla/components/health"},"next":{"title":"Weapon","permalink":"/dst-api-webdocs/docs/api-vanilla/components/weapon"}}');var r=t(4848),s=t(8453);const o={id:"inventory",title:"Inventory",sidebar_position:4},a="Inventory Component",l={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Basic Inventory Operations",id:"basic-inventory-operations",level:3},{value:"Equipment Management",id:"equipment-management",level:3},{value:"Active Item Management",id:"active-item-management",level:3},{value:"Item Finding",id:"item-finding",level:3},{value:"Containers",id:"containers",level:3},{value:"Events",id:"events",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"inventory-component",children:"Inventory Component"})}),"\n",(0,r.jsx)(n.p,{children:"The Inventory component manages item storage, equipment slots, and item manipulation for entities that can carry items (such as players and some creatures)."}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add an inventory component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("inventory")\n\n-- Configure the inventory component\nlocal inventory = entity.components.inventory\ninventory.maxslots = 16 -- Set maximum inventory slots\n'})}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"maxslots"})}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Maximum number of item slots in the inventory"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"itemslots"})}),(0,r.jsx)(n.td,{children:"Table"}),(0,r.jsx)(n.td,{children:"Table of items currently in inventory slots"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"equipslots"})}),(0,r.jsx)(n.td,{children:"Table"}),(0,r.jsx)(n.td,{children:"Table of items currently equipped in equipment slots"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"activeitem"})}),(0,r.jsx)(n.td,{children:"Entity"}),(0,r.jsx)(n.td,{children:"The currently active item (being held/manipulated)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"acceptsstacks"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Whether inventory accepts stacked items"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"heavylifting"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Whether the entity is currently carrying a heavy object"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"isopen"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Whether the inventory UI is open"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"isvisible"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Whether the inventory is visible"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dropondeath"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Whether items are dropped on death"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,r.jsx)(n.h3,{id:"basic-inventory-operations",children:"Basic Inventory Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Give an item to the inventory\ninventory:GiveItem(item)\n\n-- Get an item by slot number\nlocal item = inventory:GetItemInSlot(1)\n\n-- Get the slot number of a specific item\nlocal slot = inventory:GetItemSlot(item)\n\n-- Remove an item from a specific slot\nlocal item = inventory:RemoveItemBySlot(1)\n\n-- Check if inventory is full\nlocal is_full = inventory:IsFull()\n\n-- Count items in inventory\nlocal count = inventory:NumItems()\n\n-- Count all items including stacked items\nlocal total = inventory:NumStackedItems()\n\n-- Drop everything in the inventory\ninventory:DropEverything(drop_active_item)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"equipment-management",children:"Equipment Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Equip an item\ninventory:Equip(item)\n\n-- Unequip an item from a specific slot\nlocal item = inventory:Unequip(EQUIPSLOTS.HANDS)\n\n-- Check if a slot has an item equipped\nlocal is_equipped = inventory:IsEquipped(item)\n\n-- Get item in a specific equipment slot\nlocal weapon = inventory:GetEquippedItem(EQUIPSLOTS.HANDS)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"active-item-management",children:"Active Item Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Set the active item\ninventory:GiveActiveItem(item)\n\n-- Get the currently active item\nlocal active_item = inventory:GetActiveItem()\n\n-- Drop the active item\nlocal item = inventory:DropActiveItem()\n\n-- Check if an item is the active item\nlocal is_active = inventory:IsActiveItem(item)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"item-finding",children:"Item Finding"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Find an item by prefab name\nlocal berries = inventory:FindItem(function(item) return item.prefab == "berries" end)\n\n-- Count items by prefab\nlocal count = inventory:CountItems("log")\n\n-- Check if has at least one of an item\nlocal has_item = inventory:Has("flint", 1)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"containers",children:"Containers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Open a container\ninventory:OpenContainer(container)\n\n-- Close a container\ninventory:CloseContainer(container)\n\n-- Check if a container is open\nlocal is_open = inventory:IsContainerOpen(container)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,r.jsx)(n.p,{children:"The Inventory component responds to and triggers various events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemget"})," - Triggered when an item is added to the inventory"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemlose"})," - Triggered when an item is removed from the inventory"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"equip"})," - Triggered when an item is equipped"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"unequip"})," - Triggered when an item is unequipped"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"activeitem"})," - Triggered when the active item changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"death"})," - Listens for death to drop items (if dropondeath is true)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,r.jsx)(n.p,{children:"The Inventory component often works with:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ItemSlot"})," - For managing item slots and organization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Container"})," - For storing items in containers like chests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Equippable"})," - For items that can be equipped"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Combat"})," - For equipping weapons"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Health"})," - For using healing items"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Create a basic entity with inventory\nlocal function MakeInventoryEntity()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst:AddComponent("inventory")\n    \n    -- Configure inventory\n    local inventory = inst.components.inventory\n    inventory.maxslots = 20\n    \n    -- Add callback for when items are added\n    inst:ListenForEvent("itemget", function(inst, data)\n        print("Got item:", data.item.prefab)\n    end)\n    \n    return inst\nend\n\n-- Example of using inventory to craft an item\nlocal function CraftItem(inventory, recipe)\n    -- Check if inventory has all ingredients\n    local has_ingredients = true\n    for _, ingredient in ipairs(recipe.ingredients) do\n        if not inventory:Has(ingredient.type, ingredient.amount) then\n            has_ingredients = false\n            break\n        end\n    end\n    \n    if has_ingredients then\n        -- Remove ingredients\n        for _, ingredient in ipairs(recipe.ingredients) do\n            for i = 1, ingredient.amount do\n                local item = inventory:FindItem(function(item) \n                    return item.prefab == ingredient.type \n                end)\n                inventory:RemoveItem(item, true)\n            end\n        end\n        \n        -- Give crafted item\n        local crafted_item = SpawnPrefab(recipe.product)\n        inventory:GiveItem(crafted_item)\n        return true\n    end\n    \n    return false\nend \n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);