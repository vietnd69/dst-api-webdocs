"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7701],{7182:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api-vanilla/node-types/stategraph","title":"Stategraph","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/node-types/stategraph.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/stategraph","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/stategraph","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"stategraph","title":"Stategraph","sidebar_position":6,"last_updated":"2023-07-06T00:00:00.000Z","version":624447}}');var a=n(4848),i=n(8453);const r={id:"stategraph",title:"Stategraph",sidebar_position:6,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:624447},o="Stategraph",d={},l=[{value:"Stategraph properties and methods",id:"stategraph-properties-and-methods",level:2},{value:"Overview",id:"overview",level:2},{value:"Common Stategraph Structure",id:"common-stategraph-structure",level:2},{value:"Methods",id:"methods",level:2},{value:"GoToState(statename: <code>string</code>, params: <code>table</code>): <code>void</code>",id:"gotostatestatename-string-params-table-void",level:3},{value:"HasStateTag(tag: <code>string</code>): <code>boolean</code>",id:"hasstatetagtag-string-boolean",level:3},{value:"AddStateTag(tag: <code>string</code>): <code>void</code>",id:"addstatetagtag-string-void",level:3},{value:"RemoveStateTag(tag: <code>string</code>): <code>void</code>",id:"removestatetagtag-string-void",level:3},{value:"State Properties",id:"state-properties",level:2},{value:"Common State Tags",id:"common-state-tags",level:2},{value:"Timeline Example",id:"timeline-example",level:2},{value:"Global Events",id:"global-events",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:(0,a.jsx)(t.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"stategraph",children:"Stategraph"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.em,{children:"API Version: 624447"})}),"\n",(0,a.jsx)(t.p,{children:"Stategraphs control entity animations, sounds, and state-based behaviors in Don't Starve Together. They provide a framework for defining states and transitions between them."}),"\n",(0,a.jsx)(t.h2,{id:"stategraph-properties-and-methods",children:"Stategraph properties and methods"}),"\n",(0,a.jsx)(t.p,{children:"Stategraph provides the following key properties and methods:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Properties"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"states"})," - Collection of defined states with their behaviors"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"events"})," - Collection of global event handlers"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"defaultstate"})," - State the stategraph starts in"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"currentstate"})," - The state the stategraph is currently in"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Methods"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"GoToState()"})," - Transitions to a specified state"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"HasStateTag()"})," - Checks if the current state has a specific tag"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"AddStateTag()"})," - Adds a tag to the current state"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"RemoveStateTag()"})," - Removes a tag from the current state"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(t.p,{children:"A stategraph is a finite state machine that defines:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"States: Different modes an entity can be in (idle, walking, attacking)"}),"\n",(0,a.jsx)(t.li,{children:"Events: Triggers that cause state transitions"}),"\n",(0,a.jsx)(t.li,{children:"Handlers: Functions that handle specific events in specific states"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"common-stategraph-structure",children:"Common Stategraph Structure"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'local states = \n{\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n        \n        events = \n        {\n            EventHandler("animover", function(inst) \n                return inst.sg:GoToState("idle") \n            end),\n            EventHandler("attacked", function(inst) \n                return inst.sg:GoToState("hit") \n            end),\n        },\n    },\n    \n    State{\n        name = "walk",\n        tags = {"moving", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("walk_loop", true)\n            inst.components.locomotor:WalkForward()\n        end,\n        \n        onexit = function(inst)\n            inst.components.locomotor:StopMoving()\n        end,\n    },\n}\n\nlocal events = \n{\n    EventHandler("locomote", function(inst, data)\n        if inst.sg:HasStateTag("moving") then\n            if not data.moving then\n                inst.sg:GoToState("idle")\n            end\n        elseif data.moving then\n            inst.sg:GoToState("walk")\n        end\n    end),\n}\n\nreturn StateGraph("entityname", states, events)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsxs)(t.h3,{id:"gotostatestatename-string-params-table-void",children:["GoToState(statename: ",(0,a.jsx)(t.code,{children:"string"}),", params: ",(0,a.jsx)(t.code,{children:"table"}),"): ",(0,a.jsx)(t.code,{children:"void"})]}),"\n",(0,a.jsx)(t.p,{children:"Transitions the stategraph to the specified state, optionally passing parameters."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'-- Transition to a different state\ninst.sg:GoToState("attack")\n\n-- Transition with parameters\ninst.sg:GoToState("attack", {target = enemy})\n'})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.h3,{id:"hasstatetagtag-string-boolean",children:["HasStateTag(tag: ",(0,a.jsx)(t.code,{children:"string"}),"): ",(0,a.jsx)(t.code,{children:"boolean"})]}),"\n",(0,a.jsx)(t.p,{children:"Checks if the current state has the specified tag."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'-- Check if the current state has a specific tag\nif inst.sg:HasStateTag("busy") then\n    -- Entity is busy, can\'t perform actions\n    return false\nend\n'})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.h3,{id:"addstatetagtag-string-void",children:["AddStateTag(tag: ",(0,a.jsx)(t.code,{children:"string"}),"): ",(0,a.jsx)(t.code,{children:"void"})]}),"\n",(0,a.jsx)(t.p,{children:"Adds a tag to the current state."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'-- Add a tag to the current state\ninst.sg:AddStateTag("busy")\n'})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.h3,{id:"removestatetagtag-string-void",children:["RemoveStateTag(tag: ",(0,a.jsx)(t.code,{children:"string"}),"): ",(0,a.jsx)(t.code,{children:"void"})]}),"\n",(0,a.jsx)(t.p,{children:"Removes a tag from the current state."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'-- Remove a tag from the current state\ninst.sg:RemoveStateTag("busy")\n'})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"state-properties",children:"State Properties"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"name"}),": Unique identifier for the state"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"tags"}),": List of tags used to identify characteristics of the state"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"onenter"}),": Function called when entering the state"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"onexit"}),": Function called when exiting the state"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"onupdate"}),": Function called every frame while in the state"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"timeline"}),": Timeline for triggering actions at specific animation frames"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"events"}),": Event handlers specific to this state"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"common-state-tags",children:"Common State Tags"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"idle"}),": Entity is not performing any action"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"moving"}),": Entity is moving"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"busy"}),": Entity cannot perform other actions"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"attack"}),": Entity is attacking"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"canrotate"}),": Entity can change facing direction"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"timeline-example",children:"Timeline Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'timeline = \n{\n    TimeEvent(10*FRAMES, function(inst) \n        inst.SoundEmitter:PlaySound("dontstarve/creatures/monster/growl") \n    end),\n    TimeEvent(20*FRAMES, function(inst) \n        inst.components.combat:DoAttack() \n    end),\n},\n'})}),"\n",(0,a.jsx)(t.h2,{id:"global-events",children:"Global Events"}),"\n",(0,a.jsx)(t.p,{children:"Events defined at the stategraph level apply to all states unless overridden within a specific state."}),"\n",(0,a.jsx)(t.h2,{id:"see-also",children:"See also"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"mdc:dst-api-webdocs/docs/api-vanilla/node-types/entity.md",children:"Entity"})," - Entity that stategraphs control"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"mdc:dst-api-webdocs/docs/api-vanilla/components/animstate.md",children:"AnimState"})," - Animation component used by stategraphs"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"mdc:dst-api-webdocs/docs/api-vanilla/node-types/component.md",children:"Component"})," - Components that interact with stategraphs"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);