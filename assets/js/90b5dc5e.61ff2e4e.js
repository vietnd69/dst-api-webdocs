"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6306],{3681:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api-vanilla/stategraphs/examples","title":"Stategraph Examples","description":"This page provides practical examples of stategraphs for different types of entities in Don\'t Starve Together. These examples demonstrate how to implement various behaviors and can serve as a starting point for your own creations.","source":"@site/docs/api-vanilla/stategraphs/examples.md","sourceDirName":"api-vanilla/stategraphs","slug":"/api-vanilla/stategraphs/examples","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/examples","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"examples","title":"Stategraph Examples","sidebar_position":6},"sidebar":"docs","previous":{"title":"Common States","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/commonstates"},"next":{"title":"Shared Properties","permalink":"/dst-api-webdocs/docs/category/shared-properties"}}');var s=e(4848),o=e(8453);const i={id:"examples",title:"Stategraph Examples",sidebar_position:6},r="Stategraph Examples",d={},c=[{value:"Basic Creature Stategraph",id:"basic-creature-stategraph",level:2},{value:"Player-Like Entity",id:"player-like-entity",level:2},{value:"Static Structure with Animation",id:"static-structure-with-animation",level:2},{value:"Boss Monster with Phases",id:"boss-monster-with-phases",level:2}];function l(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"stategraph-examples",children:"Stategraph Examples"})}),"\n",(0,s.jsx)(t.p,{children:"This page provides practical examples of stategraphs for different types of entities in Don't Starve Together. These examples demonstrate how to implement various behaviors and can serve as a starting point for your own creations."}),"\n",(0,s.jsx)(t.h2,{id:"basic-creature-stategraph",children:"Basic Creature Stategraph"}),"\n",(0,s.jsx)(t.p,{children:"This example shows a simple creature with basic movement, attacking, and taking damage:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\nlocal states = {\n    -- Basic states from CommonStates\n    CommonStates.AddIdle(),\n    CommonStates.AddWalk(),\n    CommonStates.AddRun(),\n    CommonStates.AddFrozen(),\n    CommonStates.AddHitState(),\n    CommonStates.AddDeathState(),\n    \n    -- Custom attack state\n    State{\n        name = "attack",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack")\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/attack")\n        end,\n        \n        timeline = {\n            TimeEvent(10*FRAMES, function(inst) \n                inst.components.combat:DoAttack()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/attackimpact")\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst) \n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    -- Standard event handlers\n    CommonHandlers.OnLocomote(true, true),\n    CommonHandlers.OnAttack(),\n    CommonHandlers.OnAttacked(),\n    CommonHandlers.OnDeath(),\n    CommonHandlers.OnFreeze(),\n    \n    -- Custom event for special behavior\n    EventHandler("special", function(inst)\n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("special_ability")\n        end\n    end),\n}\n\nlocal actionhandlers = {\n    ActionHandler(ACTIONS.EAT, function(inst, action)\n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("eat", action.target)\n            return true\n        end\n        return false\n    end),\n}\n\nreturn StateGraph("mycreature", states, events, "idle", actionhandlers)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"player-like-entity",children:"Player-Like Entity"}),"\n",(0,s.jsx)(t.p,{children:"This example shows a stategraph for an entity that has player-like behaviors:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\nlocal states = {\n    -- Basic movement states\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n    },\n    \n    State{\n        name = "walk_start",\n        tags = {"moving", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:WalkForward()\n            inst.AnimState:PlayAnimation("walk_pre")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("walk")\n            end),\n        },\n    },\n    \n    State{\n        name = "walk",\n        tags = {"moving", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:WalkForward()\n            inst.AnimState:PlayAnimation("walk_loop", true)\n        end,\n        \n        timeline = {\n            TimeEvent(5*FRAMES, function(inst)\n                inst.SoundEmitter:PlaySound("dontstarve/movement/walk_dirt")\n            end),\n            TimeEvent(15*FRAMES, function(inst)\n                inst.SoundEmitter:PlaySound("dontstarve/movement/walk_dirt")\n            end),\n        },\n    },\n    \n    State{\n        name = "walk_stop",\n        tags = {"canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("walk_pst")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    -- Tool usage states\n    State{\n        name = "chop",\n        tags = {"busy", "chopping"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("chop_pre")\n            inst.AnimState:PushAnimation("chop_loop", false)\n            inst.AnimState:PushAnimation("chop_pst", false)\n        end,\n        \n        timeline = {\n            TimeEvent(13*FRAMES, function(inst)\n                inst:PerformBufferedAction()\n                inst.SoundEmitter:PlaySound("dontstarve/wilson/use_axe_tree")\n            end),\n        },\n        \n        events = {\n            EventHandler("animqueueover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    EventHandler("locomote", function(inst)\n        local is_moving = inst.sg:HasStateTag("moving")\n        local wants_to_move = inst.components.locomotor:WantsToMoveForward()\n        \n        if is_moving and not wants_to_move then\n            inst.sg:GoToState("walk_stop")\n        elseif not is_moving and wants_to_move then\n            inst.sg:GoToState("walk_start")\n        end\n    end),\n    \n    EventHandler("attacked", function(inst, data)\n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("hit")\n        end\n    end),\n    \n    EventHandler("death", function(inst)\n        inst.sg:GoToState("death")\n    end),\n}\n\nlocal actionhandlers = {\n    ActionHandler(ACTIONS.CHOP, function(inst, action)\n        if not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("chop")\n            return true\n        end\n        return false\n    end),\n    \n    ActionHandler(ACTIONS.MINE, function(inst, action)\n        if not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("mine")\n            return true\n        end\n        return false\n    end),\n}\n\nreturn StateGraph("mycharacter", states, events, "idle", actionhandlers)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"static-structure-with-animation",children:"Static Structure with Animation"}),"\n",(0,s.jsx)(t.p,{children:"This example shows a stategraph for a static structure that has different visual states:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local states = {\n    State{\n        name = "idle",\n        tags = {"idle"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle")\n        end,\n    },\n    \n    State{\n        name = "open",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("open")\n            inst.SoundEmitter:PlaySound("dontstarve/common/chest_open")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("open_idle")\n            end),\n        },\n    },\n    \n    State{\n        name = "open_idle",\n        tags = {"idle", "open"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("open_idle")\n        end,\n    },\n    \n    State{\n        name = "close",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("close")\n            inst.SoundEmitter:PlaySound("dontstarve/common/chest_close")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    EventHandler("open", function(inst)\n        if not inst.sg:HasStateTag("open") then\n            inst.sg:GoToState("open")\n        end\n    end),\n    \n    EventHandler("close", function(inst)\n        if inst.sg:HasStateTag("open") then\n            inst.sg:GoToState("close")\n        end\n    end),\n}\n\nreturn StateGraph("mystructure", states, events, "idle")\n'})}),"\n",(0,s.jsx)(t.h2,{id:"boss-monster-with-phases",children:"Boss Monster with Phases"}),"\n",(0,s.jsx)(t.p,{children:"This example shows a stategraph for a boss monster with different combat phases:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\nlocal phases = {\n    NORMAL = 1,\n    ENRAGED = 2,\n    DEFENSIVE = 3,\n}\n\nlocal states = {\n    -- Basic states\n    CommonStates.AddIdle(),\n    CommonStates.AddWalk(),\n    CommonStates.AddFrozen(),\n    \n    -- Phase transition states\n    State{\n        name = "phase_transition",\n        tags = {"busy", "noattack", "canmove"},\n        \n        onenter = function(inst, data)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("transform")\n            \n            if data and data.phase then\n                inst.sg.statemem.next_phase = data.phase\n            else\n                inst.sg.statemem.next_phase = phases.ENRAGED\n            end\n            \n            inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/transform")\n        end,\n        \n        timeline = {\n            TimeEvent(15*FRAMES, function(inst)\n                local fx = SpawnPrefab("statue_transition")\n                fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n            end),\n            \n            TimeEvent(30*FRAMES, function(inst)\n                inst.current_phase = inst.sg.statemem.next_phase\n                if inst.current_phase == phases.ENRAGED then\n                    inst.components.combat.damagemultiplier = 2\n                    inst.components.locomotor.walkspeed = inst.components.locomotor.walkspeed * 1.5\n                elseif inst.current_phase == phases.DEFENSIVE then\n                    inst.components.health:SetAbsorptionAmount(0.5)\n                    inst.components.combat.damagemultiplier = 0.75\n                end\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    -- Combat states specific to each phase\n    State{\n        name = "attack_normal",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack1")\n        end,\n        \n        timeline = {\n            TimeEvent(20*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/attack")\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    State{\n        name = "attack_enraged",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack2")\n        end,\n        \n        timeline = {\n            TimeEvent(15*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/attack_enraged")\n            end),\n            TimeEvent(25*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n            end),\n            TimeEvent(35*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    State{\n        name = "attack_defensive",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack3")\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/attack_defensive_pre")\n        end,\n        \n        timeline = {\n            TimeEvent(10*FRAMES, function(inst)\n                SpawnPrefab("groundpound_fx").Transform:SetPosition(inst.Transform:GetWorldPosition())\n                inst.components.groundpounder:GroundPound()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/groundpound")\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    CommonHandlers.OnLocomote(true, false),\n    CommonHandlers.OnFreeze(),\n    \n    EventHandler("doattack", function(inst, data)\n        if not inst.components.health:IsDead() then\n            if inst.current_phase == phases.NORMAL then\n                inst.sg:GoToState("attack_normal")\n            elseif inst.current_phase == phases.ENRAGED then\n                inst.sg:GoToState("attack_enraged")\n            elseif inst.current_phase == phases.DEFENSIVE then\n                inst.sg:GoToState("attack_defensive")\n            end\n        end\n    end),\n    \n    EventHandler("attacked", function(inst, data)\n        if not inst.components.health:IsDead() and not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("hit")\n        end\n    end),\n    \n    EventHandler("death", function(inst)\n        inst.sg:GoToState("death")\n    end),\n    \n    EventHandler("phasechange", function(inst, data)\n        if not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("phase_transition", data)\n        end\n    end),\n}\n\nreturn StateGraph("bossentity", states, events, "idle")\n'})}),"\n",(0,s.jsx)(t.p,{children:"These examples demonstrate how to implement different types of entities with stategraphs. You can use them as a starting point and customize them to fit your specific needs."})]})}function m(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>i,x:()=>r});var a=e(6540);const s={},o=a.createContext(s);function i(n){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(o.Provider,{value:t},n.children)}}}]);