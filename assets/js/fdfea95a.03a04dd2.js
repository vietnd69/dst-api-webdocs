"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1870],{8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(a.Provider,{value:e},n.children)}},9690:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/examples/worldgen-mod","title":"World Generation","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/examples/worldgen-mod.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/worldgen-mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/worldgen-mod","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"worldgen-mod","title":"World Generation","sidebar_position":8,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"State Graph Integration","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/stategraph-mod"},"next":{"title":"Custom World Generation","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-world-generation"}}');var s=t(4848),a=t(8453);const r={id:"worldgen-mod",title:"World Generation",sidebar_position:8,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="Modifying World Generation",l={},d=[{value:"Project Overview",id:"project-overview",level:2},{value:"Step 1: Set Up the Mod Structure",id:"step-1-set-up-the-mod-structure",level:2},{value:"Step 2: Create the modinfo.lua File",id:"step-2-create-the-modinfolua-file",level:2},{value:"Step 3: Create the Crystal Turf Prefab",id:"step-3-create-the-crystal-turf-prefab",level:2},{value:"Step 4: Create the Crystal Formation Prefab",id:"step-4-create-the-crystal-formation-prefab",level:2},{value:"Step 5: Create the Room Definition",id:"step-5-create-the-room-definition",level:2},{value:"Step 6: Create the Task Definition",id:"step-6-create-the-task-definition",level:2},{value:"Step 7: Create the modmain.lua File",id:"step-7-create-the-modmainlua-file",level:2},{value:"Step 8: Create Static Layouts",id:"step-8-create-static-layouts",level:2},{value:"Step 9: Create Texture Assets",id:"step-9-create-texture-assets",level:2},{value:"Step 10: Testing Your World Generation Mod",id:"step-10-testing-your-world-generation-mod",level:2},{value:"Understanding World Generation",id:"understanding-world-generation",level:2},{value:"Tiles",id:"tiles",level:3},{value:"Rooms",id:"rooms",level:3},{value:"Tasks",id:"tasks",level:3},{value:"Level",id:"level",level:3},{value:"Customization Options",id:"customization-options",level:2},{value:"Add Season-Specific Features",id:"add-season-specific-features",level:3},{value:"Add Unique Creatures",id:"add-unique-creatures",level:3},{value:"Add Weather Effects",id:"add-weather-effects",level:3},{value:"Add Special Resources",id:"add-special-resources",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Problem: Biome not appearing in world",id:"problem-biome-not-appearing-in-world",level:3},{value:"Problem: Custom tile showing as default ground",id:"problem-custom-tile-showing-as-default-ground",level:3},{value:"Problem: Objects not spawning in the biome",id:"problem-objects-not-spawning-in-the-biome",level:3},{value:"Problem: Setpieces not appearing",id:"problem-setpieces-not-appearing",level:3},{value:"Problem: Compatibility with other mods",id:"problem-compatibility-with-other-mods",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"modifying-world-generation",children:"Modifying World Generation"})}),"\n",(0,s.jsx)(e.p,{children:"This tutorial walks through the process of modifying world generation in Don't Starve Together. We'll create a mod that adds a custom biome and modifies the world layout."}),"\n",(0,s.jsx)(e.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,s.jsx)(e.p,{children:"We'll create a mod that:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:'Adds a new "Crystal Plains" biome with unique features'}),"\n",(0,s.jsx)(e.li,{children:"Modifies the world generation parameters"}),"\n",(0,s.jsx)(e.li,{children:"Adds custom decorations and set pieces to the world"}),"\n",(0,s.jsx)(e.li,{children:"Ensures compatibility with existing world generation"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"step-1-set-up-the-mod-structure",children:"Step 1: Set Up the Mod Structure"}),"\n",(0,s.jsx)(e.p,{children:"Create these folders and files:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"worldgen_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 map/\n\u2502   \u2502   \u251c\u2500\u2500 rooms/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 crystal_plains.lua\n\u2502   \u2502   \u2514\u2500\u2500 tasks/\n\u2502   \u2502       \u2514\u2500\u2500 crystal_plains_task.lua\n\u2502   \u2514\u2500\u2500 prefabs/\n\u2502       \u251c\u2500\u2500 crystal_formation.lua\n\u2502       \u2514\u2500\u2500 crystal_turf.lua\n\u2514\u2500\u2500 anim/\n    \u2514\u2500\u2500 crystal_formations.zip\n"})}),"\n",(0,s.jsx)(e.h2,{id:"step-2-create-the-modinfolua-file",children:"Step 2: Create the modinfo.lua File"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'name = "Crystal Plains Biome"\ndescription = "Adds a new Crystal Plains biome to the world"\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\n\n-- Not compatible with Don\'t Starve\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\n-- This mod is required on the server\nall_clients_require_mod = true\n\n-- This mod is not a client-only mod\nclient_only_mod = false\n\n-- Icon displayed in the server list\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Tags that describe your mod\nserver_filter_tags = {\n    "world generation",\n    "biome"\n}\n\n-- Configuration options\nconfiguration_options = {\n    {\n        name = "biome_size",\n        label = "Biome Size",\n        options = {\n            {description = "Small", data = "small"},\n            {description = "Medium", data = "medium"},\n            {description = "Large", data = "large"}\n        },\n        default = "medium"\n    },\n    {\n        name = "crystal_density",\n        label = "Crystal Density",\n        options = {\n            {description = "Low", data = 1},\n            {description = "Medium", data = 2},\n            {description = "High", data = 3}\n        },\n        default = 2\n    },\n    {\n        name = "biome_placement",\n        label = "Biome Placement",\n        options = {\n            {description = "Near Center", data = "center"},\n            {description = "Near Edge", data = "edge"},\n            {description = "Random", data = "random"}\n        },\n        default = "random"\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"step-3-create-the-crystal-turf-prefab",children:"Step 3: Create the Crystal Turf Prefab"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:"scripts/prefabs/crystal_turf.lua"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/crystal_turf.zip"),\n}\n\n-- Function to create a custom turf tile\nlocal function MakeTurf(name)\n    local function fn()\n        local inst = CreateEntity()\n\n        inst.entity:AddTransform()\n        inst.entity:AddAnimState()\n        inst.entity:AddNetwork()\n\n        inst.AnimState:SetBank("turf")\n        inst.AnimState:SetBuild("crystal_turf")\n        inst.AnimState:PlayAnimation("crystal_turf")\n\n        inst:AddTag("groundtile")\n        inst:AddTag("molebait")\n\n        inst.entity:SetPristine()\n        if not TheWorld.ismastersim then\n            return inst\n        end\n\n        inst:AddComponent("inventoryitem")\n        inst.components.inventoryitem.atlasname = "images/inventoryimages/turf_crystal.xml"\n        inst.components.inventoryitem.imagename = "turf_crystal"\n\n        inst:AddComponent("stackable")\n        inst.components.stackable.maxsize = TUNING.STACK_SIZE_LARGEITEM\n\n        inst:AddComponent("fuel")\n        inst.components.fuel.fuelvalue = TUNING.LARGE_FUEL\n        \n        inst:AddComponent("inspectable")\n\n        inst:AddComponent("terraformer")\n        inst.components.terraformer.tile = "CRYSTALPLAINS"\n        inst.components.terraformer.tile_effect = "crystal_sparkle"\n        \n        MakeHauntableLaunch(inst)\n\n        return inst\n    end\n\n    return Prefab("turf_" .. name, fn, assets)\nend\n\n-- Create the crystal turf\nreturn MakeTurf("crystal")\n'})}),"\n",(0,s.jsx)(e.h2,{id:"step-4-create-the-crystal-formation-prefab",children:"Step 4: Create the Crystal Formation Prefab"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:"scripts/prefabs/crystal_formation.lua"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/crystal_formations.zip"),\n}\n\nlocal prefabs = {\n    "bluegem",\n    "purplegem",\n    "redgem",\n}\n\n-- Crystal colors and their corresponding gems\nlocal crystal_types = {\n    blue = {\n        anim = "blue",\n        loot = "bluegem",\n        fx = "crystalshatter_blue",\n    },\n    purple = {\n        anim = "purple",\n        loot = "purplegem",\n        fx = "crystalshatter_purple",\n    },\n    red = {\n        anim = "red",\n        loot = "redgem",\n        fx = "crystalshatter_red",\n    },\n}\n\n-- Function to create a crystal formation\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddMiniMapEntity()\n    inst.entity:AddNetwork()\n\n    MakeObstaclePhysics(inst, .5)\n\n    inst.MiniMapEntity:SetIcon("crystal_formation.tex")\n\n    inst.AnimState:SetBank("crystal_formations")\n    inst.AnimState:SetBuild("crystal_formations")\n\n    -- Randomly select a crystal type\n    local crystal_type = weighted_random_choice({\n        blue = 0.5,\n        purple = 0.3,\n        red = 0.2,\n    })\n    \n    inst.crystal_type = crystal_type\n    inst.AnimState:PlayAnimation(crystal_types[crystal_type].anim)\n\n    inst:AddTag("crystal")\n    inst:AddTag("structure")\n\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add workable component to allow mining\n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.MINE)\n    inst.components.workable:SetWorkLeft(TUNING.ROCKS_MINE)\n    inst.components.workable:SetOnFinishCallback(function(inst, worker)\n        -- Play break sound\n        inst.SoundEmitter:PlaySound("dontstarve/common/destroy_stone")\n        \n        -- Spawn loot\n        local loot = crystal_types[inst.crystal_type].loot\n        local num_gems = math.random(1, 3)\n        for i = 1, num_gems do\n            local gem = SpawnPrefab(loot)\n            if gem then\n                local x, y, z = inst.Transform:GetWorldPosition()\n                local angle = math.random() * 2 * PI\n                local speed = 1 + math.random()\n                local g = 9.8\n                local px = x + math.cos(angle) * 0.2\n                local pz = z + math.sin(angle) * 0.2\n                \n                gem.Physics:Teleport(px, 0.5, pz)\n                gem.Physics:SetVel(speed * math.cos(angle), speed * 4, speed * math.sin(angle))\n            end\n        end\n        \n        -- Spawn break effect\n        local fx = SpawnPrefab(crystal_types[inst.crystal_type].fx)\n        if fx then\n            fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n        end\n        \n        -- Remove the crystal\n        inst:Remove()\n    end)\n\n    -- Add light component for a subtle glow\n    inst:AddComponent("lighttweener")\n    local light_color = {\n        blue = {0.2, 0.4, 0.8},\n        purple = {0.6, 0.2, 0.8},\n        red = {0.8, 0.2, 0.2},\n    }\n    local r, g, b = unpack(light_color[crystal_type])\n    inst.components.lighttweener:StartTween(\n        inst.entity:AddLight(), \n        0, 2, 0.5, {r, g, b}, \n        0, \n        function() \n            -- After the light is added, make it flicker slightly\n            inst:DoPeriodicTask(0.3 + math.random() * 0.5, function()\n                local intensity = 0.5 + math.random() * 0.2\n                inst.Light:SetIntensity(intensity)\n            end)\n        end\n    )\n    \n    -- Add inspectable component\n    inst:AddComponent("inspectable")\n    \n    -- Add lootdropper component\n    inst:AddComponent("lootdropper")\n    \n    return inst\nend\n\nreturn Prefab("crystal_formation", fn, assets, prefabs)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"step-5-create-the-room-definition",children:"Step 5: Create the Room Definition"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:"scripts/map/rooms/crystal_plains.lua"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Import required modules\nrequire "map/room_functions"\n\n-- Define the room\nlocal rooms = {}\n\n-- Open area with crystal formations\nrooms.CrystalPlains = function(prefab)\n    local ground = WORLD_TILES.ROCKY\n    local new_ground = "CRYSTALPLAINS"  -- Our custom tile\n    \n    -- Get crystal density from mod config\n    local crystal_density = GetModConfigData("crystal_density") or 2\n    \n    -- Define the room contents\n    local contents = {\n        countstaticlayouts = {\n            ["CrystalFormationLarge"] = function() return 1 + crystal_density end,\n            ["CrystalFormationSmall"] = function() return 2 + crystal_density * 2 end,\n        },\n        countprefabs = {\n            crystal_formation = function() return 5 + crystal_density * 3 end,\n            rock1 = function() return 3 end,\n            flint = function() return 3 end,\n            blue_mushroom = function() return 1 end,\n        },\n    }\n    \n    -- Create the room\n    return {\n        type = "rocky",\n        tags = {"ExitPiece", "Crystal"},\n        contents = contents,\n        ground_types = {new_ground, ground},\n        ground_distribution = {\n            [new_ground] = 9,\n            [ground] = 1,\n        },\n        colour = {r = 0.3, g = 0.4, b = 0.8},\n    }\nend\n\n-- Crystal formation set pieces\nrooms.CrystalFormationLarge = StaticLayout.Get("map/static_layouts/crystal_formation_large")\nrooms.CrystalFormationSmall = StaticLayout.Get("map/static_layouts/crystal_formation_small")\n\nreturn rooms\n'})}),"\n",(0,s.jsx)(e.h2,{id:"step-6-create-the-task-definition",children:"Step 6: Create the Task Definition"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:"scripts/map/tasks/crystal_plains_task.lua"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Import required modules\nrequire "map/room_functions"\n\n-- Define the task\nlocal tasks = {}\n\n-- Get biome size from mod config\nlocal biome_size = GetModConfigData("biome_size") or "medium"\n\n-- Define size parameters based on config\nlocal size_params = {\n    small = {\n        hub_room_count = 2,\n        edge_room_count = 3,\n    },\n    medium = {\n        hub_room_count = 3,\n        edge_room_count = 5,\n    },\n    large = {\n        hub_room_count = 5,\n        edge_room_count = 8,\n    },\n}\n\n-- Get the size parameters\nlocal params = size_params[biome_size]\n\n-- Create the Crystal Plains task\ntasks.crystal_plains = {\n    locks = {LOCKS.NONE},\n    keys_given = {KEYS.TIER1},\n    room_choices = {\n        ["CrystalPlains"] = params.hub_room_count,\n        ["Rocky"] = params.edge_room_count,\n    },\n    room_bg = WORLD_TILES.ROCKY,\n    background_room = "BGRocky",\n    colour = {r = 0.3, g = 0.4, b = 0.8},\n}\n\nreturn tasks\n'})}),"\n",(0,s.jsx)(e.h2,{id:"step-7-create-the-modmainlua-file",children:"Step 7: Create the modmain.lua File"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Import globals into the environment\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add asset files\nAssets = {\n    -- Crystal turf\n    Asset("ANIM", "anim/crystal_turf.zip"),\n    \n    -- Crystal formations\n    Asset("ANIM", "anim/crystal_formations.zip"),\n}\n\n-- Register prefabs\nPrefabFiles = {\n    "crystal_turf",\n    "crystal_formation",\n}\n\n-- Add custom strings\nSTRINGS.NAMES.TURF_CRYSTAL = "Crystal Turf"\nSTRINGS.RECIPE_DESC.TURF_CRYSTAL = "Sparkly ground from the Crystal Plains."\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.TURF_CRYSTAL = "It\'s sparkly and cold."\n\nSTRINGS.NAMES.CRYSTAL_FORMATION = "Crystal Formation"\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.CRYSTAL_FORMATION = "It\'s beautiful and full of gems."\n\n-- Add custom tile\nlocal GROUND_CRYSTAL = "CRYSTALPLAINS"\nGLOBAL.GROUND_NAMES[GROUND_CRYSTAL] = "crystal_plains"\nGLOBAL.GROUND_TILES[GROUND_CRYSTAL] = #GLOBAL.GROUND_NAMES\nGLOBAL.GROUND_PROPERTIES[GROUND_CRYSTAL] = {\n    name = "crystal_plains",\n    noise_texture = "levels/textures/crystal_noise.tex",\n    damage_per_second = 0,\n    walk_speed = 1.0,\n    is_ground = true,\n}\n\n-- Add custom turf recipe\nAddRecipe("turf_crystal", \n    {Ingredient("rocks", 1), Ingredient("bluegem", 1)}, \n    GLOBAL.RECIPETABS.REFINE, \n    GLOBAL.TECH.SCIENCE_ONE, \n    nil, nil, nil, nil, nil, \n    "images/inventoryimages/turf_crystal.xml")\n\n-- Add custom tile assets\nAddGameAsset("levels/tiles/crystal_plains.tex")\nAddGameAsset("levels/textures/crystal_noise.tex")\nAddGameAsset("minimap/crystal_plains.tex")\n\n-- Add custom minimap icon\nAddMinimapAtlas("minimap/crystal_formation.xml")\n\n-- Add custom room and task\nAddRoomPreInit("CrystalPlains", function(room)\n    -- This will be called when the room is initialized\nend)\n\n-- Add the custom biome to world generation\nAddLevelPreInit("SURVIVAL_TOGETHER", function(level)\n    -- Get biome placement from mod config\n    local biome_placement = GetModConfigData("biome_placement") or "random"\n    \n    -- Add our custom task\n    if level.tasks then\n        table.insert(level.tasks, "crystal_plains")\n    end\n    \n    -- Add our custom room\n    if level.rooms then\n        table.insert(level.rooms, "CrystalPlains")\n    end\n    \n    -- Modify task layout based on placement preference\n    if level.task_set and level.task_set == "default" then\n        if biome_placement == "center" then\n            -- Place near center by adding to the second ring\n            if level.ordered_story_setpieces then\n                table.insert(level.ordered_story_setpieces, {"CrystalFormationLarge", "Day 10"})\n            end\n        elseif biome_placement == "edge" then\n            -- Place near edge by adding to the last tasks\n            if level.ordered_story_setpieces then\n                table.insert(level.ordered_story_setpieces, {"CrystalFormationLarge", "Day 25"})\n            end\n        else\n            -- Random placement (default)\n            if level.random_set_pieces then\n                table.insert(level.random_set_pieces, "CrystalFormationLarge")\n                table.insert(level.random_set_pieces, "CrystalFormationSmall")\n            end\n        end\n    end\nend)\n\n-- Add custom world generation setpieces\nAddTask("crystal_plains", require("map/tasks/crystal_plains_task").crystal_plains)\nAddRoom("CrystalPlains", require("map/rooms/crystal_plains").CrystalPlains)\nAddRoom("CrystalFormationLarge", require("map/rooms/crystal_plains").CrystalFormationLarge)\nAddRoom("CrystalFormationSmall", require("map/rooms/crystal_plains").CrystalFormationSmall)\n\n-- Add custom effects for the crystal turf\nlocal function OnIsDay(inst, isday)\n    if not isday then\n        -- At night, make crystals glow more\n        for _, v in ipairs(GLOBAL.TheSim:FindEntities(0, 0, 0, 10000, {"crystal"})) do\n            if v.Light then\n                v.Light:SetIntensity(0.8)\n                v.Light:SetRadius(3)\n            end\n        end\n    else\n        -- During day, reduce glow\n        for _, v in ipairs(GLOBAL.TheSim:FindEntities(0, 0, 0, 10000, {"crystal"})) do\n            if v.Light then\n                v.Light:SetIntensity(0.5)\n                v.Light:SetRadius(2)\n            end\n        end\n    end\nend\n\n-- Add day/night effects for crystals\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        inst:WatchWorldState("isday", OnIsDay)\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"step-8-create-static-layouts",children:"Step 8: Create Static Layouts"}),"\n",(0,s.jsx)(e.p,{children:"For a complete mod, you'll need to create static layout files for your crystal formations:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["Create ",(0,s.jsx)(e.code,{children:"map/static_layouts/crystal_formation_large.lua"}),":"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'return {\n  version = "1.1",\n  luaversion = "5.1",\n  orientation = "orthogonal",\n  width = 16,\n  height = 16,\n  tilewidth = 16,\n  tileheight = 16,\n  properties = {},\n  tilesets = {\n    {\n      name = "tiles",\n      firstgid = 1,\n      tilewidth = 64,\n      tileheight = 64,\n      spacing = 0,\n      margin = 0,\n      image = "../../../../tools/tiled/dont_starve/tiles.png",\n      imagewidth = 512,\n      imageheight = 384,\n      properties = {}\n    }\n  },\n  layers = {\n    {\n      type = "tilelayer",\n      name = "BG_TILES",\n      x = 0,\n      y = 0,\n      width = 16,\n      height = 16,\n      visible = true,\n      opacity = 1,\n      properties = {},\n      encoding = "lua",\n      data = {}\n    },\n    {\n      type = "objectgroup",\n      name = "FG_OBJECTS",\n      visible = true,\n      opacity = 1,\n      properties = {},\n      objects = {\n        {\n          name = "crystal_formation",\n          type = "crystal_formation",\n          shape = "rectangle",\n          x = 128,\n          y = 128,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        },\n        {\n          name = "crystal_formation",\n          type = "crystal_formation",\n          shape = "rectangle",\n          x = 96,\n          y = 160,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        },\n        {\n          name = "crystal_formation",\n          type = "crystal_formation",\n          shape = "rectangle",\n          x = 160,\n          y = 96,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        },\n        {\n          name = "bluegem",\n          type = "bluegem",\n          shape = "rectangle",\n          x = 128,\n          y = 96,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsxs)(e.li,{children:["Create ",(0,s.jsx)(e.code,{children:"map/static_layouts/crystal_formation_small.lua"}),":"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'return {\n  version = "1.1",\n  luaversion = "5.1",\n  orientation = "orthogonal",\n  width = 8,\n  height = 8,\n  tilewidth = 16,\n  tileheight = 16,\n  properties = {},\n  tilesets = {\n    {\n      name = "tiles",\n      firstgid = 1,\n      tilewidth = 64,\n      tileheight = 64,\n      spacing = 0,\n      margin = 0,\n      image = "../../../../tools/tiled/dont_starve/tiles.png",\n      imagewidth = 512,\n      imageheight = 384,\n      properties = {}\n    }\n  },\n  layers = {\n    {\n      type = "tilelayer",\n      name = "BG_TILES",\n      x = 0,\n      y = 0,\n      width = 8,\n      height = 8,\n      visible = true,\n      opacity = 1,\n      properties = {},\n      encoding = "lua",\n      data = {}\n    },\n    {\n      type = "objectgroup",\n      name = "FG_OBJECTS",\n      visible = true,\n      opacity = 1,\n      properties = {},\n      objects = {\n        {\n          name = "crystal_formation",\n          type = "crystal_formation",\n          shape = "rectangle",\n          x = 64,\n          y = 64,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        },\n        {\n          name = "bluegem",\n          type = "bluegem",\n          shape = "rectangle",\n          x = 80,\n          y = 48,\n          width = 0,\n          height = 0,\n          visible = true,\n          properties = {}\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"step-9-create-texture-assets",children:"Step 9: Create Texture Assets"}),"\n",(0,s.jsx)(e.p,{children:"For a complete mod, you'll need to create these texture files:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Crystal Turf"}),": Create textures for the new ground tile"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"levels/tiles/crystal_plains.tex"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"levels/textures/crystal_noise.tex"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.code,{children:"minimap/crystal_plains.tex"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Crystal Formation"}),": Create textures for the crystal formations"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"anim/crystal_formations.zip"})," with animations for different crystal types"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"minimap/crystal_formation.tex"})," for minimap icon"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"step-10-testing-your-world-generation-mod",children:"Step 10: Testing Your World Generation Mod"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"Launch Don't Starve Together"}),"\n",(0,s.jsx)(e.li,{children:"Enable your mod in the Mods menu"}),"\n",(0,s.jsx)(e.li,{children:"Create a new world"}),"\n",(0,s.jsx)(e.li,{children:"Explore to find your Crystal Plains biome"}),"\n",(0,s.jsxs)(e.li,{children:["Test the features:","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Check that the custom turf appears correctly"}),"\n",(0,s.jsx)(e.li,{children:"Mine crystal formations to get gems"}),"\n",(0,s.jsx)(e.li,{children:"Verify that crystals glow brighter at night"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"understanding-world-generation",children:"Understanding World Generation"}),"\n",(0,s.jsx)(e.p,{children:"Don't Starve Together's world generation system is built on several key components:"}),"\n",(0,s.jsx)(e.h3,{id:"tiles",children:"Tiles"}),"\n",(0,s.jsx)(e.p,{children:"Tiles are the basic ground types in the world. Each tile has:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"A unique ID and name"}),"\n",(0,s.jsx)(e.li,{children:"Visual appearance (texture)"}),"\n",(0,s.jsx)(e.li,{children:"Properties (walk speed, damage, etc.)"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"rooms",children:"Rooms"}),"\n",(0,s.jsx)(e.p,{children:"Rooms are areas with specific contents and ground types:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Define what prefabs spawn in the area"}),"\n",(0,s.jsx)(e.li,{children:"Specify the distribution of ground tiles"}),"\n",(0,s.jsx)(e.li,{children:"Can include static layouts (predefined object arrangements)"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"tasks",children:"Tasks"}),"\n",(0,s.jsx)(e.p,{children:"Tasks are collections of rooms that form a gameplay area:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Define what rooms appear and how many"}),"\n",(0,s.jsx)(e.li,{children:"Specify locks and keys for progression"}),"\n",(0,s.jsx)(e.li,{children:"Control the overall layout of the world"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"level",children:"Level"}),"\n",(0,s.jsx)(e.p,{children:"The level is the complete world definition:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Combines multiple tasks into a complete world"}),"\n",(0,s.jsx)(e.li,{children:"Defines the overall world shape and size"}),"\n",(0,s.jsx)(e.li,{children:"Controls story setpieces and random setpieces"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,s.jsx)(e.p,{children:"Here are some ways to enhance your world generation mod:"}),"\n",(0,s.jsx)(e.h3,{id:"add-season-specific-features",children:"Add Season-Specific Features"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua, add seasonal changes\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        inst:WatchWorldState("season", function(inst, season)\n            if season == "winter" then\n                -- Enhance crystals in winter\n                for _, v in ipairs(GLOBAL.TheSim:FindEntities(0, 0, 0, 10000, {"crystal"})) do\n                    if v.Light then\n                        v.Light:SetIntensity(1.0)\n                        v.Light:SetRadius(4)\n                    end\n                end\n            elseif season == "summer" then\n                -- Dim crystals in summer\n                for _, v in ipairs(GLOBAL.TheSim:FindEntities(0, 0, 0, 10000, {"crystal"})) do\n                    if v.Light then\n                        v.Light:SetIntensity(0.3)\n                        v.Light:SetRadius(1.5)\n                    end\n                end\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"add-unique-creatures",children:"Add Unique Creatures"}),"\n",(0,s.jsx)(e.p,{children:"Create a crystal elemental that spawns in your biome:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In a new prefab file crystal_elemental.lua\nlocal assets = {\n    Asset("ANIM", "anim/crystal_elemental.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- [Standard entity setup code...]\n    \n    -- Make it a monster\n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(20)\n    \n    -- Make it drop gems when killed\n    inst:AddComponent("lootdropper")\n    inst.components.lootdropper:AddRandomLoot("bluegem", 0.5)\n    inst.components.lootdropper:AddRandomLoot("purplegem", 0.3)\n    inst.components.lootdropper:AddRandomLoot("redgem", 0.2)\n    \n    -- Only spawn in crystal biome\n    inst:AddComponent("periodicspawner")\n    inst.components.periodicspawner:SetPrefab("crystal_shard")\n    inst.components.periodicspawner:SetRandomTimes(40, 60)\n    inst.components.periodicspawner:Start()\n    \n    return inst\nend\n\nreturn Prefab("crystal_elemental", fn, assets)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"add-weather-effects",children:"Add Weather Effects"}),"\n",(0,s.jsx)(e.p,{children:"Create a special weather effect for your biome:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua, add custom weather\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        -- Add crystal shower weather\n        inst:DoPeriodicTask(60, function()\n            -- Check if player is in crystal biome\n            local player = GLOBAL.ThePlayer\n            if player and player:GetCurrentTileType() == GLOBAL.GROUND_TILES[GROUND_CRYSTAL] then\n                -- Start crystal shower\n                local fx = SpawnPrefab("crystal_shower_fx")\n                if fx then\n                    fx.Transform:SetPosition(player.Transform:GetWorldPosition())\n                    \n                    -- Spawn crystal shards during the shower\n                    player:DoPeriodicTask(5, function()\n                        local x, y, z = player.Transform:GetWorldPosition()\n                        local angle = math.random() * 2 * PI\n                        local dist = 5 + math.random() * 10\n                        local shard = SpawnPrefab("crystal_shard")\n                        if shard then\n                            shard.Transform:SetPosition(\n                                x + math.cos(angle) * dist,\n                                0,\n                                z + math.sin(angle) * dist\n                            )\n                        end\n                    end, 0, 5) -- 5 times, every 5 seconds\n                end\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"add-special-resources",children:"Add Special Resources"}),"\n",(0,s.jsx)(e.p,{children:"Create a unique resource that only spawns in your biome:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- In a new prefab file crystal_shard.lua\nlocal assets = {\n    Asset("ANIM", "anim/crystal_shard.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- [Standard entity setup code...]\n    \n    -- Make it pickable\n    inst:AddComponent("inventoryitem")\n    \n    -- Add special crafting ingredient tag\n    inst:AddTag("molebait")\n    inst:AddTag("crystal_crafting")\n    \n    -- Make it usable as fuel with special effects\n    inst:AddComponent("fuel")\n    inst.components.fuel.fuelvalue = TUNING.MED_FUEL\n    inst.components.fuel.fueltype = "CRYSTAL"\n    \n    return inst\nend\n\nreturn Prefab("crystal_shard", fn, assets)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsx)(e.h3,{id:"problem-biome-not-appearing-in-world",children:"Problem: Biome not appearing in world"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Check that you've properly added your task to the level definition and that the task references valid rooms"]}),"\n",(0,s.jsx)(e.h3,{id:"problem-custom-tile-showing-as-default-ground",children:"Problem: Custom tile showing as default ground"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Verify that you've correctly added all tile assets and registered the ground type"]}),"\n",(0,s.jsx)(e.h3,{id:"problem-objects-not-spawning-in-the-biome",children:"Problem: Objects not spawning in the biome"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Check your room definition to ensure the object counts and distribution are correct"]}),"\n",(0,s.jsx)(e.h3,{id:"problem-setpieces-not-appearing",children:"Problem: Setpieces not appearing"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Verify that your static layout files are correctly formatted and referenced"]}),"\n",(0,s.jsx)(e.h3,{id:"problem-compatibility-with-other-mods",children:"Problem: Compatibility with other mods"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Use AddLevelPreInitAny instead of targeting specific level types:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Make your mod compatible with custom worldgen mods\nAddLevelPreInitAny(function(level)\n    if level.tasks then\n        table.insert(level.tasks, "crystal_plains")\n    end\n    \n    if level.rooms then\n        table.insert(level.rooms, "CrystalPlains")\n    end\nend)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(e.p,{children:"Now that you've created a custom biome, you can:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Add More Features"}),": Create additional objects and creatures for your biome"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Improve Integration"}),": Add special effects when players enter or leave your biome"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Create Unique Resources"}),": Add resources that can only be found in your biome"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Add Special Events"}),": Create events that only happen in your biome"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["For more advanced world generation, check out the ",(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/world/worldgen",children:"World Generation"})," documentation to learn about the full capabilities of the world generation system."]})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}}}]);