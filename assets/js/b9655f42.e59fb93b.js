"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2836],{99:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api-vanilla/utils/string","title":"String Utilities","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/utils/string.md","sourceDirName":"api-vanilla/utils","slug":"/api-vanilla/utils/string","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/string","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"string","title":"String Utilities","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Math Utilities","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/math"},"next":{"title":"Table Utilities","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/table"}}');var i=t(4848),s=t(8453);const r={id:"string",title:"String Utilities",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="String Utilities",o={},c=[{value:"Standard String Functions",id:"standard-string-functions",level:2},{value:"Basic Operations",id:"basic-operations",level:3},{value:"Don&#39;t Starve Together String Utilities",id:"dont-starve-together-string-utilities",level:2},{value:"Text Formatting",id:"text-formatting",level:3},{value:"Time and Date Formatting",id:"time-and-date-formatting",level:3},{value:"Text Processing",id:"text-processing",level:3},{value:"Game-Specific Text Functions",id:"game-specific-text-functions",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Character Dialog",id:"character-dialog",level:3},{value:"Text Manipulation",id:"text-manipulation",level:3},{value:"Message Formatting",id:"message-formatting",level:3},{value:"String Matching",id:"string-matching",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"string-utilities",children:"String Utilities"})}),"\n",(0,i.jsx)(n.p,{children:"String manipulation and text processing functions for Don't Starve Together modding."}),"\n",(0,i.jsx)(n.h2,{id:"standard-string-functions",children:"Standard String Functions"}),"\n",(0,i.jsx)(n.p,{children:"These functions are part of the standard Lua string library and are commonly used in DST modding:"}),"\n",(0,i.jsx)(n.h3,{id:"basic-operations",children:"Basic Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Get string length\nlocal length = string.len(str)\n\n-- Convert to uppercase/lowercase\nlocal upper = string.upper(str)\nlocal lower = string.lower(str)\n\n-- Substring\nlocal sub = string.sub(str, start, end)  -- end is optional\n\n-- Replace text\nlocal new_str = string.gsub(str, pattern, replacement)\n\n-- Find pattern in string\nlocal pos = string.find(str, pattern)\n\n-- Format string\nlocal formatted = string.format("%s has %d health", name, health)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"dont-starve-together-string-utilities",children:"Don't Starve Together String Utilities"}),"\n",(0,i.jsx)(n.p,{children:"The game provides additional utility functions for string manipulation:"}),"\n",(0,i.jsx)(n.h3,{id:"text-formatting",children:"Text Formatting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Convert first character to uppercase\nlocal capitalized = FirstToUpper(str)\n\n-- Trim whitespace from a string\nlocal trimmed = TrimString(str)\n\n-- Format with named parameters\nlocal text = subfmt("This is {adjective} with {number} things", {\n    adjective = "awesome",\n    number = 5\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"time-and-date-formatting",children:"Time and Date Formatting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Format seconds into MM:SS or HH:MM:SS\nlocal time_str = str_seconds(total_seconds)\n\n-- Format date from timestamp\nlocal date_str = str_date(os_time)\n\n-- Format playtime into days, hours, minutes\nlocal play_time = str_play_time(total_minutes)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"text-processing",children:"Text Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Calculate Damerau-Levenshtein distance (for fuzzy matching)\nlocal distance = DamLevDist(string1, string2, limit)\n\n-- Search for subwords\nlocal found = string_search_subwords(search, str, sub_len, limit)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"game-specific-text-functions",children:"Game-Specific Text Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get character-specific strings\nlocal description = GetString(character, stringtype, modifier)\n\n-- Get description for an item\nlocal desc = GetDescription(character, item, modifier)\n\n-- Get character description\nlocal char_desc = GetCharacterDescription(character_name)\n\n-- Get action fail message\nlocal fail_msg = GetActionFailString(character, action, reason)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"character-dialog",children:"Character Dialog"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Get character-specific response\nlocal speech = GetString(inst, "DESCRIBE", item.prefab)\n\n-- Handle special character speech\nif inst:HasTag("playerghost") then\n    -- Ghost will speak in "Oooh" sounds\n    return ProcessString(inst)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"text-manipulation",children:"Text Manipulation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create a safe string for file names\nlocal function MakeSafeFilename(name)\n    -- Replace invalid characters\n    name = string.gsub(name, "[%p%c%s]", "_")\n    -- Trim and convert to lowercase\n    return TrimString(string.lower(name))\nend\n\n-- Format time display\nlocal function FormatTimeDisplay(seconds)\n    if seconds >= 3600 then\n        -- Format as hours:minutes:seconds\n        return str_seconds(seconds)\n    else\n        -- Format as minutes:seconds\n        local mins = math.floor(seconds / 60)\n        local secs = seconds % 60\n        return string.format("%d:%02d", mins, secs)\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"message-formatting",children:"Message Formatting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Format message with player information\nlocal function FormatWelcomeMessage(player)\n    local name = player.name\n    local character = player.prefab\n    local days_survived = player.components.age:GetAgeInDays()\n    \n    return subfmt("Welcome {name}! You\'re playing as {character} and have survived for {days} days.", {\n        name = name,\n        character = FirstToUpper(character),\n        days = math.floor(days_survived)\n    })\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"string-matching",children:"String Matching"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check if input approximately matches a command\nlocal function MatchesCommand(input, command, tolerance)\n    tolerance = tolerance or 2\n    return DamLevDist(string.lower(input), string.lower(command), tolerance) <= tolerance\nend\n\n-- Find closest match from a list\nlocal function FindClosestMatch(input, list, tolerance)\n    local best_match = nil\n    local best_dist = tolerance or 3\n    \n    for _, item in ipairs(list) do\n        local dist = DamLevDist(string.lower(input), string.lower(item), best_dist)\n        if dist < best_dist then\n            best_match = item\n            best_dist = dist\n        end\n    end\n    \n    return best_match\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);