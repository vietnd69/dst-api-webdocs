"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6608],{7390:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/node-types/behavior-node","title":"Behavior Node","description":"Last Update: 2023-08-15","source":"@site/docs/api-vanilla/node-types/behavior-node.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/behavior-node","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/behavior-node","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"behavior-node","title":"Behavior Node","sidebar_position":1,"last_updated":"2023-08-15T00:00:00.000Z","version":624447}}');var o=s(4848),t=s(8453);const d={id:"behavior-node",title:"Behavior Node",sidebar_position:1,last_updated:new Date("2023-08-15T00:00:00.000Z"),version:624447},r="Behavior Node",a={},l=[{value:"Behavior Node properties and methods",id:"behavior-node-properties-and-methods",level:2},{value:"Properties",id:"properties",level:2},{value:"name: string <code>[readonly]</code>",id:"name-string-readonly",level:3},{value:"status: &#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39; <code>[readonly]</code>",id:"status-ready--running--success--failure-readonly",level:3},{value:"children: <code>Array&lt;BehaviorNode&gt;</code> <code>[readonly]</code>",id:"children-arraybehaviornode-readonly",level:3},{value:"inst: Entity <code>[readonly]</code>",id:"inst-entity-readonly",level:3},{value:"Methods",id:"methods",level:2},{value:"Visit(): &#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39;",id:"visit-ready--running--success--failure",level:3},{value:"Start(): void",id:"start-void",level:3},{value:"Stop(): void",id:"stop-void",level:3},{value:"Reset(): void",id:"reset-void",level:3},{value:"Node Status Constants",id:"node-status-constants",level:2},{value:"&#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39;",id:"ready--running--success--failure",level:3},{value:"Creating Custom Behavior Nodes",id:"creating-custom-behavior-nodes",level:2},{value:"Usage in Behavior Trees",id:"usage-in-behavior-trees",level:2},{value:"Common Behavior Node Types",id:"common-behavior-node-types",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Last Update: 2023-08-15"})}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"behavior-node",children:"Behavior Node"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"API Version: 624447"})}),"\n",(0,o.jsx)(n.p,{children:"The BehaviorNode is the base class for all behavior tree nodes in Don't Starve Together. It provides the foundation for AI decision-making through behavior trees, serving as the building block for all specialized node types."}),"\n",(0,o.jsx)(n.h2,{id:"behavior-node-properties-and-methods",children:"Behavior Node properties and methods"}),"\n",(0,o.jsx)(n.p,{children:"BehaviorNode provides the following key properties and methods:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Properties"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"name"})," - Descriptive name of the node"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"status"})," - Current execution status"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"children"})," - Child nodes (for nodes that support children)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"inst"})," - Entity instance that the node controls"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Methods"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Visit()"})," - Core execution method, runs the node's logic"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Start()"})," - Initializes the node before first execution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Stop()"})," - Stops the node's execution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Reset()"})," - Resets the node to its initial state"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(n.h3,{id:"name-string-readonly",children:["name: string ",(0,o.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,o.jsx)(n.p,{children:"A descriptive name for the node. Used primarily for debugging and logging."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Create a node with a descriptive name\nlocal BehaviorNode = Class(function(self, name)\n    self.name = name\n    self.children = {}\n    self.status = READY\nend)\n\n-- Access the node name\nprint("Currently executing node: " .. node.name)\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"status-ready--running--success--failure-readonly",children:["status: 'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE' ",(0,o.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,o.jsx)(n.p,{children:"The current execution status of the node:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"READY"}),": Node is ready to be executed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RUNNING"}),": Node is currently executing"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SUCCESS"}),": Node has completed successfully"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"FAILURE"}),": Node has failed to complete"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Check node status\nif node.status == RUNNING then\n    print("Node is still running")\nelseif node.status == SUCCESS then\n    print("Node completed successfully")\nelseif node.status == FAILURE then\n    print("Node failed")\nend\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"children-arraybehaviornode-readonly",children:["children: ",(0,o.jsx)(n.code,{children:"Array<BehaviorNode>"})," ",(0,o.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,o.jsx)(n.p,{children:"List of child nodes for nodes that support children (like sequence and priority nodes)."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Access children of a node\nif #node.children > 0 then\n    for i, child in ipairs(node.children) do\n        print("Child " .. i .. ": " .. child.name)\n    end\nend\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h3,{id:"inst-entity-readonly",children:["inst: Entity ",(0,o.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,o.jsx)(n.p,{children:"Reference to the entity that this behavior node is controlling."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Access the entity through the behavior node\nlocal x, y, z = node.inst.Transform:GetWorldPosition()\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(n.h3,{id:"visit-ready--running--success--failure",children:"Visit(): 'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE'"}),"\n",(0,o.jsx)(n.p,{children:"The core execution method of a behavior node. This is where the node's logic is performed. It should return the node's status after execution."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function BehaviorNode:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n        -- Initialize node-specific logic\n    end\n    \n    if self.status == RUNNING then\n        -- Perform the node's behavior\n        local result = self:DoAction()\n        \n        if result then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"start-void",children:"Start(): void"}),"\n",(0,o.jsx)(n.p,{children:"Initializes the node before its first execution. Typically sets the status to RUNNING and performs any necessary setup."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function BehaviorNode:Start()\n    self.status = RUNNING\n    -- Perform any initialization logic\nend\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"stop-void",children:"Stop(): void"}),"\n",(0,o.jsx)(n.p,{children:"Stops the node's execution. Resets the status to READY and cleans up any resources."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function BehaviorNode:Stop()\n    -- Perform any cleanup logic\n    self.status = READY\nend\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"reset-void",children:"Reset(): void"}),"\n",(0,o.jsx)(n.p,{children:"Resets the node to its initial state. Similar to Stop, but may perform additional reset logic."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"function BehaviorNode:Reset()\n    self:Stop() -- Usually calls Stop\n    -- Perform any additional reset logic\nend\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"node-status-constants",children:"Node Status Constants"}),"\n",(0,o.jsx)(n.p,{children:"BehaviorNode defines four status constants:"}),"\n",(0,o.jsx)(n.h3,{id:"ready--running--success--failure",children:"'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE'"}),"\n",(0,o.jsx)(n.p,{children:"These constants represent the possible execution states of a behavior node."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Global behavior node status constants\nREADY = "READY"       -- Node is ready to execute\nRUNNING = "RUNNING"   -- Node is currently executing\nSUCCESS = "SUCCESS"   -- Node completed successfully\nFAILURE = "FAILURE"   -- Node failed to complete\n'})}),"\n",(0,o.jsx)(n.h2,{id:"creating-custom-behavior-nodes",children:"Creating Custom Behavior Nodes"}),"\n",(0,o.jsx)(n.p,{children:"To create a custom behavior node, derive from the BehaviorNode class:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local MyCustomNode = Class(BehaviorNode, function(self, inst, param)\n    BehaviorNode._ctor(self, "MyCustomNode")\n    self.inst = inst\n    self.param = param\nend)\n\nfunction MyCustomNode:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n    end\n    \n    if self.status == RUNNING then\n        -- Custom logic here\n        if SomeCondition(self.inst, self.param) then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n\nfunction MyCustomNode:Stop()\n    -- Custom cleanup\n    self.status = READY\nend\n\nreturn MyCustomNode\n'})}),"\n",(0,o.jsx)(n.h2,{id:"usage-in-behavior-trees",children:"Usage in Behavior Trees"}),"\n",(0,o.jsx)(n.p,{children:"BehaviorNode is used as the base class for all nodes in behavior trees:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"local root = PriorityNode({\n    SequenceNode({\n        ConditionNode(function() return HasTarget(inst) end),\n        ChaseAndAttackNode(inst)\n    }),\n    SequenceNode({\n        FindFoodNode(inst),\n        EatFoodNode(inst)\n    }),\n    WanderNode(inst)\n})\n\n-- Use in a brain\nfunction MyBrain:OnStart()\n    self.bt = BT(self.inst, root)\nend\n\nfunction MyBrain:OnUpdate()\n    self.bt:Update()\nend\n"})}),"\n",(0,o.jsx)(n.h2,{id:"common-behavior-node-types",children:"Common Behavior Node Types"}),"\n",(0,o.jsx)(n.p,{children:"Several specialized behavior node types inherit from BehaviorNode:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ActionNode"}),": Executes a specific action"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ConditionNode"}),": Evaluates a condition to determine success or failure"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"PriorityNode"}),": Tries child nodes in order until one succeeds"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SequenceNode"}),": Executes child nodes in sequence until one fails or all succeed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"DecoratorNode"}),": Modifies the behavior of another node"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complexity"}),": The complexity of a behavior tree increases with the number of nodes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Depth"}),": Deep trees can be expensive to evaluate"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Frequency"}),": Consider how often different parts of the tree need to be evaluated"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Caching"}),": Cache results when possible to avoid redundant calculations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Early Returns"}),": Return early when a result is determined to avoid unnecessary processing"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/brain",children:"Brain"})," - Brain component that uses behavior trees"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/action-nodes",children:"Action Nodes"})," - Nodes that perform actions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes",children:"Priority Nodes"})," - Nodes that select between different options"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes",children:"Sequence Nodes"})," - Nodes that execute actions in sequence"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes",children:"Decorator Nodes"})," - Nodes that modify other nodes' behavior"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes",children:"Condition Nodes"})," - Nodes that evaluate conditions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>r});var i=s(6540);const o={},t=i.createContext(o);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);