"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6023],{6975:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api-vanilla/node-types/prefab","title":"Prefab","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/node-types/prefab.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/prefab","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/prefab","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"prefab","title":"Prefab","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z","version":624447}}');var t=s(4848),r=s(8453);const a={id:"prefab",title:"Prefab",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:624447},d="Prefab",l={},o=[{value:"Prefab properties and methods",id:"prefab-properties-and-methods",level:2},{value:"Overview",id:"overview",level:2},{value:"Prefab Structure",id:"prefab-structure",level:2},{value:"Key Parts of a Prefab",id:"key-parts-of-a-prefab",level:2},{value:"Methods",id:"methods",level:2},{value:"Prefab(name: <code>string</code>, fn: <code>Function</code>, assets: <code>Array</code>, dependencies: <code>Array</code>): <code>PrefabDef</code>",id:"prefabname-string-fn-function-assets-array-dependencies-array-prefabdef",level:3},{value:"SpawnPrefab(name: <code>string</code>): Entity",id:"spawnprefabname-string-entity",level:3},{value:"Spawning Prefabs",id:"spawning-prefabs",level:2},{value:"Prefab Variants",id:"prefab-variants",level:2},{value:"Prefab Assets",id:"prefab-assets",level:2},{value:"Master Simulation",id:"master-simulation",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"prefab",children:"Prefab"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"API Version: 624447"})}),"\n",(0,t.jsx)(n.p,{children:"Prefabs are blueprints for creating entities, with predefined components and properties."}),"\n",(0,t.jsx)(n.h2,{id:"prefab-properties-and-methods",children:"Prefab properties and methods"}),"\n",(0,t.jsx)(n.p,{children:"Prefabs provide the following key properties and methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Properties"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assets"})," - Resources needed by the prefab"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefabfunction"})," - Function that constructs the entity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefabs"})," - List of prefabs this prefab depends on"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Methods"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Prefab()"})," - Creates a prefab definition"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SpawnPrefab()"})," - Instantiates a prefab into the game world"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Prefabs serve as templates for creating entities in the game. They define what components an entity should have, what its initial properties should be, and how it should behave. Prefabs ensure consistency when creating multiple instances of the same type of entity."}),"\n",(0,t.jsx)(n.h2,{id:"prefab-structure",children:"Prefab Structure"}),"\n",(0,t.jsx)(n.p,{children:"A typical prefab definition looks like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/myitem.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("myitem")\n    \n    inst.AnimState:SetBank("myitem")\n    inst.AnimState:SetBuild("myitem")\n    inst.AnimState:PlayAnimation("idle")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    inst:AddComponent("inventoryitem")\n    inst:AddComponent("inspectable")\n    \n    inst.components.inventoryitem.imagename = "myitem"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/myitem.xml"\n    \n    return inst\nend\n\nreturn Prefab("myitem", fn, assets)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"key-parts-of-a-prefab",children:"Key Parts of a Prefab"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Assets"}),": Resources needed by the prefab (animations, sounds, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prefab Function"}),": Function that constructs the entity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client/Server Separation"}),": Using ",(0,t.jsx)(n.code,{children:"TheWorld.ismastersim"})," to separate client and server code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component Setup"}),": Adding and configuring components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Animation Setup"}),": Setting up the visual appearance"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.h3,{id:"prefabname-string-fn-function-assets-array-dependencies-array-prefabdef",children:["Prefab(name: ",(0,t.jsx)(n.code,{children:"string"}),", fn: ",(0,t.jsx)(n.code,{children:"Function"}),", assets: ",(0,t.jsx)(n.code,{children:"Array"}),", dependencies: ",(0,t.jsx)(n.code,{children:"Array"}),"): ",(0,t.jsx)(n.code,{children:"PrefabDef"})]}),"\n",(0,t.jsx)(n.p,{children:"Creates a prefab definition that can be registered with the game engine."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Create a prefab definition\nlocal myprefab = Prefab("prefabname", createfn, assets, dependencies)\n\n-- Example with all parameters\nreturn Prefab(\n    "myitem",               -- Unique prefab name\n    fn,                     -- Creation function\n    assets,                 -- List of assets\n    {"dependency1"}         -- List of dependent prefabs\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": Unique identifier for the prefab"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fn"}),": Function that creates and configures the entity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assets"}),": List of assets needed by the prefab"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dependencies"}),": List of other prefabs that this prefab depends on"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"spawnprefabname-string-entity",children:["SpawnPrefab(name: ",(0,t.jsx)(n.code,{children:"string"}),"): ",(0,t.jsx)(n.a,{href:"mdc:dst-api-webdocs/docs/api-vanilla/node-types/entity.md",children:"Entity"})]}),"\n",(0,t.jsx)(n.p,{children:"Instantiates a prefab into the game world."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Spawn a prefab at the current position\nlocal inst = SpawnPrefab("myitem")\n\n-- Spawn and position a prefab\nlocal inst = SpawnPrefab("myitem")\ninst.Transform:SetPosition(x, y, z)\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"spawning-prefabs",children:"Spawning Prefabs"}),"\n",(0,t.jsx)(n.p,{children:"Prefabs are spawned into the world with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Spawn at a specific position\nlocal inst = SpawnPrefab("myitem")\ninst.Transform:SetPosition(x, y, z)\n\n-- Spawn as a dropped item\ninst = player.components.inventory:DropItem(inst)\n\n-- Spawn and give to player\nplayer.components.inventory:GiveItem(inst)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"prefab-variants",children:"Prefab Variants"}),"\n",(0,t.jsx)(n.p,{children:"You can create variants of prefabs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Base prefab with shared functionality\nlocal function basefn()\n    -- Common setup\nend\n\n-- Specific variant\nlocal function redfn()\n    local inst = basefn()\n    -- Red-specific setup\n    return inst\nend\n\n-- Another variant\nlocal function bluefn()\n    local inst = basefn()\n    -- Blue-specific setup\n    return inst\nend\n\nreturn Prefab("myitem", basefn, assets),\n       Prefab("myitem_red", redfn, assets),\n       Prefab("myitem_blue", bluefn, assets)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"prefab-assets",children:"Prefab Assets"}),"\n",(0,t.jsx)(n.p,{children:"Assets are resources needed by the prefab:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/myitem.zip"),          -- Animation\n    Asset("SOUND", "sound/myitem.fsb"),        -- Sound\n    Asset("IMAGE", "images/myitem.tex"),       -- Texture\n    Asset("ATLAS", "images/myitem.xml"),       -- Atlas\n    Asset("SHADER", "shaders/myshader.ksh"),   -- Shader\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"master-simulation",children:"Master Simulation"}),"\n",(0,t.jsx)(n.p,{children:"Prefabs handle client/server separation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"inst.entity:SetPristine()\n\nif not TheWorld.ismastersim then\n    return inst\nend\n\n-- Server-only code here\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"SetPristine()"})," call marks the entity as ready for network replication, and the ",(0,t.jsx)(n.code,{children:"ismastersim"})," check ensures server-specific code only runs on the server."]}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"mdc:dst-api-webdocs/docs/api-vanilla/node-types/entity.md",children:"Entity"})," - Entities created from prefabs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"mdc:dst-api-webdocs/docs/api-vanilla/node-types/component.md",children:"Component"})," - Components used in prefabs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"mdc:dst-api-webdocs/docs/api-vanilla/node-types/network.md",children:"Network"})," - Network replication for prefab entities"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);