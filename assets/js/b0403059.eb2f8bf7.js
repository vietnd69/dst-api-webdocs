"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5398],{13784:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/actions/actions-overview","title":"Actions Overview","description":"Overview of player interaction and action system in DST API","source":"@site/docs/game-scripts/core-systems/fundamentals/actions/index.md","sourceDirName":"game-scripts/core-systems/fundamentals/actions","slug":"/game-scripts/core-systems/fundamentals/actions/actions-overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/actions-overview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"id":"actions-overview","title":"Actions Overview","description":"Overview of player interaction and action system in DST API","sidebar_position":0,"slug":"/game-scripts/core-systems/fundamentals/actions/actions-overview","last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Stategraph","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/ai-systems/stategraph"},"next":{"title":"Actions Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/actions-overview"}}');var s=i(74848),o=i(28453);const c={id:"actions-overview",title:"Actions Overview",description:"Overview of player interaction and action system in DST API",sidebar_position:0,slug:"/game-scripts/core-systems/fundamentals/actions/actions-overview",last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},r="Actions Overview",a={},l=[{value:"Build Information",id:"build-information",level:2},{value:"System Purpose",id:"system-purpose",level:2},{value:"Key Responsibilities",id:"key-responsibilities",level:3},{value:"System Scope",id:"system-scope",level:3},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"System Components",id:"system-components",level:3},{value:"Data Flow",id:"data-flow",level:3},{value:"Integration Points",id:"integration-points",level:3},{value:"Recent Changes",id:"recent-changes",level:2},{value:"Core Action Modules",id:"core-action-modules",level:2},{value:"Core Actions",id:"core-actions",level:3},{value:"Buffered Actions",id:"buffered-actions",level:3},{value:"Component Actions",id:"component-actions",level:3},{value:"Equip Slot Utilities",id:"equip-slot-utilities",level:3},{value:"Common Action Patterns",id:"common-action-patterns",level:2},{value:"Basic Action Execution",id:"basic-action-execution",level:3},{value:"Component Action Discovery",id:"component-action-discovery",level:3},{value:"Custom Action Registration",id:"custom-action-registration",level:3},{value:"Advanced Action Validation",id:"advanced-action-validation",level:3},{value:"Equipment Slot Management",id:"equipment-slot-management",level:3},{value:"Action System Dependencies",id:"action-system-dependencies",level:2},{value:"Required Systems",id:"required-systems",level:3},{value:"Optional Systems",id:"optional-systems",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Action Discovery Optimization",id:"action-discovery-optimization",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Network Efficiency",id:"network-efficiency",level:3},{value:"Development Guidelines",id:"development-guidelines",level:2},{value:"Best Practices",id:"best-practices",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:3},{value:"Testing Strategies",id:"testing-strategies",level:3},{value:"Action Integration Workflows",id:"action-integration-workflows",level:2},{value:"Player Interaction Workflow",id:"player-interaction-workflow",level:3},{value:"Component Action Registration",id:"component-action-registration",level:3},{value:"Custom Action Development",id:"custom-action-development",level:3},{value:"Troubleshooting Action Issues",id:"troubleshooting-action-issues",level:2},{value:"Common Action Problems",id:"common-action-problems",level:3},{value:"Debugging Action System",id:"debugging-action-system",level:3},{value:"Action Development Best Practices",id:"action-development-best-practices",level:3},{value:"Related Systems",id:"related-systems",level:2},{value:"Success Metrics",id:"success-metrics",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"actions-overview",children:"Actions Overview"})}),"\n",(0,s.jsx)(n.h2,{id:"build-information",children:"Build Information"}),"\n",(0,s.jsxs)(n.p,{children:["Current documentation based on build version: ",(0,s.jsx)(n.strong,{children:"676042"}),"\nLast updated: ",(0,s.jsx)(n.strong,{children:"2025-06-21"})]}),"\n",(0,s.jsx)(n.h2,{id:"system-purpose",children:"System Purpose"}),"\n",(0,s.jsx)(n.p,{children:"The Actions system forms the foundation of all player interactions in Don't Starve Together, providing a comprehensive framework for defining, validating, and executing player actions. This system enables players to interact with the world through clicks, key presses, and contextual menus while maintaining consistency and reliability across single-player and multiplayer environments."}),"\n",(0,s.jsx)(n.h3,{id:"key-responsibilities",children:"Key Responsibilities"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Define all possible player interactions through action templates and specifications"}),"\n",(0,s.jsx)(n.li,{children:"Manage action execution lifecycle from input to completion with proper validation"}),"\n",(0,s.jsx)(n.li,{children:"Provide component-based action discovery and registration for modular entity behaviors"}),"\n",(0,s.jsx)(n.li,{children:"Handle equipment slot management and item interaction coordination"}),"\n",(0,s.jsx)(n.li,{children:"Support deferred action execution through buffering and queuing mechanisms"}),"\n",(0,s.jsx)(n.li,{children:"Ensure network synchronization of actions between clients and servers"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"system-scope",children:"System Scope"}),"\n",(0,s.jsx)(n.p,{children:"This system encompasses all user-initiated interactions with entities, items, and world positions, including direct object interactions, tool usage, item deployment, crafting actions, and equipment management. It excludes automatic AI behaviors (handled by Brain systems) and passive entity updates (handled by Component systems)."}),"\n",(0,s.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,s.jsx)(n.h3,{id:"system-components",children:"System Components"}),"\n",(0,s.jsx)(n.p,{children:"The Actions system is built on a layered architecture where action definitions provide templates, component actions discover available interactions, buffered actions manage execution, and utility modules handle supporting functionality."}),"\n",(0,s.jsx)(n.h3,{id:"data-flow",children:"Data Flow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Player Input \u2192 Action Discovery \u2192 Action Validation \u2192 Action Buffering \u2192 Action Execution\n      \u2193              \u2193                 \u2193                 \u2193                 \u2193\n  Input Event \u2192 Component Check \u2192 Prerequisites \u2192 Queue Management \u2192 State Changes\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-points",children:"Integration Points"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity System"}),": Actions operate on entities and modify their components and state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Component System"}),": Component actions automatically discover available interactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Input System"}),": Player inputs trigger action discovery and execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Networking System"}),": Actions synchronize between clients and servers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Animation System"}),": Action execution coordinates with entity animations and state changes"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"recent-changes",children:"Recent Changes"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Build"}),(0,s.jsx)(n.th,{children:"Date"}),(0,s.jsx)(n.th,{children:"Component"}),(0,s.jsx)(n.th,{children:"Change Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/actions",children:"Core Actions"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current action definitions and execution framework"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/bufferedaction",children:"Buffered Actions"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current deferred action execution system"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/componentactions",children:"Component Actions"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current component-based action discovery"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/equipslotutil",children:"Equip Slot Utilities"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current equipment slot management utilities"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"core-action-modules",children:"Core Action Modules"}),"\n",(0,s.jsx)(n.h3,{id:"core-actions",children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/actions",children:"Core Actions"})}),"\n",(0,s.jsx)(n.p,{children:"Fundamental action definitions and execution framework for all player interactions."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Module"}),(0,s.jsx)(n.th,{children:"Status"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Key Features"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/actions#action",children:"Action Class"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Action template definition system"}),(0,s.jsx)(n.td,{children:"Priority system, distance checking, validity constraints"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/actions#core-actions",children:"Action Definitions"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"100+ predefined actions"}),(0,s.jsx)(n.td,{children:"Basic interactions, tool actions, combat, ocean systems"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/actions#range-check-functions",children:"Range Checking"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Distance validation utilities"}),(0,s.jsx)(n.td,{children:"Custom range functions, physics-based checking"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/actions#action-execution-functions",children:"Execution Framework"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Action execution engine"}),(0,s.jsx)(n.td,{children:"Success/failure handling, component interaction"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Action Categories:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Basic Interactions"}),": Pickup, drop, equip, examine, talk, walk"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tool Actions"}),": Chop, mine, dig, hammer, attack, net fishing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fire and Light"}),": Light, extinguish, stoke fires, add fuel"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ocean Actions"}),": Ocean fishing, boat rowing, platform interactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High Priority"}),": Map actions, teleportation, deploy mode toggle"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"buffered-actions",children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/bufferedaction",children:"Buffered Actions"})}),"\n",(0,s.jsx)(n.p,{children:"Deferred action execution system with validation and callback management."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Module"}),(0,s.jsx)(n.th,{children:"Status"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Key Features"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/bufferedaction#bufferedaction-class",children:"BufferedAction Class"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Queued action container"}),(0,s.jsx)(n.td,{children:"Parameter preservation, state validation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/bufferedaction#validation-system",children:"Validation System"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Action prerequisite checking"}),(0,s.jsx)(n.td,{children:"Entity validity, component state, ownership"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/bufferedaction#callback-management",children:"Callback Management"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Success/failure handling"}),(0,s.jsx)(n.td,{children:"Callback registration, execution, cleanup"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/bufferedaction#position-management",children:"Position Management"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Dynamic position handling"}),(0,s.jsx)(n.td,{children:"Static positions, moving targets, platform coordination"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Buffering Capabilities:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Queuing"}),": Prepare actions for later execution with preserved context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Validation"}),": Comprehensive prerequisite checking before execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Callback System"}),": Success/failure notification with automatic cleanup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Positioning"}),": Support for moving targets and platform-relative positioning"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"component-actions",children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/componentactions",children:"Component Actions"})}),"\n",(0,s.jsx)(n.p,{children:"Component-based action discovery and registration system for entity interactions."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Module"}),(0,s.jsx)(n.th,{children:"Status"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Key Features"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/componentactions#action-types",children:"Action Types"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"6 interaction categories"}),(0,s.jsx)(n.td,{children:"Scene, use item, point, equipped, inventory, validation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/componentactions#core-functions",children:"Registration System"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Component action management"}),(0,s.jsx)(n.td,{children:"Register/unregister, automatic discovery"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/componentactions#mod-support",children:"Mod Support"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Custom component actions"}),(0,s.jsx)(n.td,{children:"Mod registration, network synchronization"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/componentactions#helper-functions",children:"Helper Functions"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Specialized action utilities"}),(0,s.jsx)(n.td,{children:"Fishing validation, rowing, plant research"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Component Action Types:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SCENE"}),": Direct world object interactions without items"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"USEITEM"}),": Using inventory items on target entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"POINT"}),": Using items on specific world positions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"EQUIPPED"}),": Actions available when items are equipped"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"INVENTORY"}),": Actions for items in inventory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ISVALID"}),": Validation functions for action availability"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"equip-slot-utilities",children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/equipslotutil",children:"Equip Slot Utilities"})}),"\n",(0,s.jsx)(n.p,{children:"Equipment slot identifier management and conversion utilities."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Module"}),(0,s.jsx)(n.th,{children:"Status"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Key Features"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/equipslotutil#to-id",children:"Slot Conversion"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Name/ID conversion system"}),(0,s.jsx)(n.td,{children:"String to numeric ID, ID to string"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/equipslotutil#count",children:"Slot Management"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Equipment slot enumeration"}),(0,s.jsx)(n.td,{children:"Total slot counting, mod compatibility"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/actions/equipslotutil#initialize",children:"Initialization"})}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Setup and configuration"}),(0,s.jsx)(n.td,{children:"Mod integration, deterministic ordering"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Utility Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Networking Optimization"}),": Compact numeric IDs for efficient data transmission"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mod Compatibility"}),": Support for mod-added equipment slots (max 63 slots)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deterministic Ordering"}),": Consistent slot numbering across clients"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-action-patterns",children:"Common Action Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"basic-action-execution",children:"Basic Action Execution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Standard action execution pattern\nlocal action = ACTIONS.CHOP\nlocal tree = GetClosestEntity(player, 10, nil, {"tree"})\nlocal axe = player.components.inventory:GetActiveItem()\n\nif tree and axe and axe:HasTag("axe") then\n    local buffered_action = BufferedAction(player, tree, action, axe)\n    \n    if buffered_action:IsValid() then\n        local success = buffered_action:Do()\n        if success then\n            print("Tree chopped successfully!")\n        end\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"component-action-discovery",children:"Component Action Discovery"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Discover available actions for an entity\nlocal function GetEntityActions(entity, player, right_click)\n    local actions = {}\n    entity:CollectActions("SCENE", player, actions, right_click)\n    \n    -- Check for equipped item actions\n    local equipped_item = player.components.inventory:GetEquippedItem(EQUIPSLOTS.HANDS)\n    if equipped_item then\n        entity:CollectActions("EQUIPPED", equipped_item, player, actions, right_click)\n    end\n    \n    return actions\nend\n\n-- Usage example\nlocal available_actions = GetEntityActions(target_entity, player, false)\nfor _, action in ipairs(available_actions) do\n    print("Available action:", action.id)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-action-registration",children:"Custom Action Registration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Register custom component action for mods\nAddComponentAction("SCENE", "mycomponent", function(inst, doer, actions, right)\n    if inst:HasTag("my_interactive_tag") and not inst:HasTag("burnt") then\n        if right and inst:HasTag("right_clickable") then\n            table.insert(actions, ACTIONS.MY_RIGHT_ACTION)\n        elseif not right and inst:HasTag("left_clickable") then\n            table.insert(actions, ACTIONS.MY_LEFT_ACTION)\n        end\n    end\nend, "MyModName")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-action-validation",children:"Advanced Action Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Create action with comprehensive validation\nlocal function CreateValidatedAction(doer, target, action_type, tool)\n    local buffered_action = BufferedAction(doer, target, action_type, tool)\n    \n    -- Add custom validation\n    buffered_action.validfn = function(action)\n        -- Check time of day\n        if action_type == ACTIONS.SLEEP and not TheWorld.state.isnight then\n            return false, "Can only sleep at night"\n        end\n        \n        -- Check player status\n        if doer.components.health:GetPercent() < 0.5 and action_type == ACTIONS.WORK then\n            return false, "Too injured to work"\n        end\n        \n        -- Check tool durability\n        if tool and tool.components.finiteuses then\n            local uses_left = tool.components.finiteuses:GetUses()\n            if uses_left <= 0 then\n                return false, "Tool is broken"\n            end\n        end\n        \n        return true\n    end\n    \n    -- Add completion callbacks\n    buffered_action:AddSuccessAction(function()\n        doer.components.talker:Say("Action completed!")\n    end)\n    \n    buffered_action:AddFailAction(function()\n        doer.components.talker:Say("Action failed!")\n    end)\n    \n    return buffered_action\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"equipment-slot-management",children:"Equipment Slot Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Equipment slot utilities usage\nlocal equipslotutil = require("equipslotutil")\n\n-- Initialize system (called once during world setup)\nequipslotutil.Initialize()\n\n-- Convert between slot names and IDs\nlocal hands_id = equipslotutil.ToID("hands")\nlocal head_id = equipslotutil.ToID("head")\n\n-- Network-friendly slot identification\nlocal function GetEquippedItemInSlot(player, slot_name)\n    local slot_id = equipslotutil.ToID(slot_name)\n    if slot_id then\n        return player.components.inventory:GetEquippedItem(equipslotutil.FromID(slot_id))\n    end\n    return nil\nend\n\n-- Enumerate all equipment slots\nlocal total_slots = equipslotutil.Count()\nfor i = 1, total_slots do\n    local slot_name = equipslotutil.FromID(i)\n    print("Slot", i, ":", slot_name)\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"action-system-dependencies",children:"Action System Dependencies"}),"\n",(0,s.jsx)(n.h3,{id:"required-systems",children:"Required Systems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/core/",children:"Fundamentals Core"}),": Entity and component framework for action targets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/",children:"User Interface"}),": Input handling and action triggering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/",children:"Networking"}),": Action synchronization between clients"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"optional-systems",children:"Optional Systems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/",children:"World Systems"}),": Environmental context for position-based actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/",children:"Character Systems"}),": Player stats and capabilities affecting actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/",children:"Game Mechanics"}),": Specific gameplay interactions using action framework"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"action-discovery-optimization",children:"Action Discovery Optimization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Component actions use efficient tag-based filtering to minimize unnecessary checks"}),"\n",(0,s.jsx)(n.li,{children:"Action registration uses numeric IDs for fast component lookup and network efficiency"}),"\n",(0,s.jsx)(n.li,{children:"Validation functions cache results for expensive checks when appropriate"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Buffered actions clean up callbacks automatically after execution"}),"\n",(0,s.jsx)(n.li,{children:"Component action functions are shared across entities with same components"}),"\n",(0,s.jsx)(n.li,{children:"Equipment slot utilities use compact numeric representations for networking"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"network-efficiency",children:"Network Efficiency"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Action component IDs limited to 255 types for 8-bit network transmission"}),"\n",(0,s.jsx)(n.li,{children:"Equipment slot system supports maximum 63 slots for efficient bit manipulation"}),"\n",(0,s.jsx)(n.li,{children:"Action validation minimizes network round-trips through client-side prereq checking"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"development-guidelines",children:"Development Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Always validate actions before execution using ",(0,s.jsx)(n.code,{children:"IsValid()"})," method"]}),"\n",(0,s.jsx)(n.li,{children:"Use component actions for automatic action discovery rather than hardcoding"}),"\n",(0,s.jsx)(n.li,{children:"Include proper success/failure callbacks for user feedback and error handling"}),"\n",(0,s.jsx)(n.li,{children:"Consider both left-click and right-click contexts when designing interactions"}),"\n",(0,s.jsx)(n.li,{children:"Test actions in both single-player and multiplayer environments for consistency"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Forgetting to handle edge cases like burned, broken, or invalid entities"}),"\n",(0,s.jsx)(n.li,{children:"Not considering player state restrictions (mounted, carrying, ghost mode)"}),"\n",(0,s.jsx)(n.li,{children:"Creating actions without proper distance and range validation"}),"\n",(0,s.jsx)(n.li,{children:"Implementing actions that work only on client or server side"}),"\n",(0,s.jsx)(n.li,{children:"Bypassing the component action system for entity-specific hardcoded interactions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"testing-strategies",children:"Testing Strategies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test all action combinations with various entity states and player conditions"}),"\n",(0,s.jsx)(n.li,{children:"Verify action behavior with different tool types and durability levels"}),"\n",(0,s.jsx)(n.li,{children:"Test action discovery and execution in multiplayer with network latency"}),"\n",(0,s.jsx)(n.li,{children:"Validate custom component actions work correctly with mod loading order"}),"\n",(0,s.jsx)(n.li,{children:"Ensure equipment slot utilities handle mod-added slots properly"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"action-integration-workflows",children:"Action Integration Workflows"}),"\n",(0,s.jsx)(n.h3,{id:"player-interaction-workflow",children:"Player Interaction Workflow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Input Detection"}),": Player input triggers action discovery"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Discovery"}),": Component actions collect available interactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Selection"}),": UI presents options and player selects action"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Validation"}),": System checks prerequisites and requirements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Execution"}),": Buffered action executes with proper validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Result Handling"}),": Success/failure callbacks provide feedback"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"component-action-registration",children:"Component Action Registration"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Component Creation"}),": New component implements action functions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Registration"}),": Component registers with action system"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Synchronization"}),": Registration syncs to all clients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Discovery"}),": System automatically includes component actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Execution"}),": Actions execute through standard framework"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-action-development",children:"Custom Action Development"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Definition"}),": Create action template with properties"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Component Integration"}),": Implement component action functions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation Logic"}),": Add prerequisite checking and validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Execution Function"}),": Implement action effect and state changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": Verify action works in all supported contexts"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting-action-issues",children:"Troubleshooting Action Issues"}),"\n",(0,s.jsx)(n.h3,{id:"common-action-problems",children:"Common Action Problems"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Issue"}),(0,s.jsx)(n.th,{children:"Symptoms"}),(0,s.jsx)(n.th,{children:"Solution"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Actions not appearing"}),(0,s.jsx)(n.td,{children:"Right-click menu empty"}),(0,s.jsx)(n.td,{children:"Check component registration and tags"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Action validation failing"}),(0,s.jsx)(n.td,{children:"Actions grayed out"}),(0,s.jsx)(n.td,{children:"Verify prerequisites and entity state"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Network desync"}),(0,s.jsx)(n.td,{children:"Actions work locally but not multiplayer"}),(0,s.jsx)(n.td,{children:"Check client-server validation consistency"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Equipment not recognized"}),(0,s.jsx)(n.td,{children:"Tool actions unavailable"}),(0,s.jsx)(n.td,{children:"Verify equipment slot registration"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Performance issues"}),(0,s.jsx)(n.td,{children:"Action discovery slow"}),(0,s.jsx)(n.td,{children:"Optimize component action functions"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"debugging-action-system",children:"Debugging Action System"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use debug console commands to inspect entity action components"}),"\n",(0,s.jsx)(n.li,{children:"Check action validation step-by-step with custom validation functions"}),"\n",(0,s.jsx)(n.li,{children:"Monitor network traffic for action synchronization issues"}),"\n",(0,s.jsx)(n.li,{children:"Verify equipment slot mappings with utility debug functions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"action-development-best-practices",children:"Action Development Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start with simple actions and gradually add complexity"}),"\n",(0,s.jsx)(n.li,{children:"Use existing action patterns as templates for new implementations"}),"\n",(0,s.jsx)(n.li,{children:"Test actions with various entity states and combinations"}),"\n",(0,s.jsx)(n.li,{children:"Document action requirements and limitations clearly"}),"\n",(0,s.jsx)(n.li,{children:"Consider backward compatibility when modifying existing actions"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/",children:"Core Systems"}),": Integration with all major game systems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/",children:"Fundamentals"}),": Base entity and component framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/components/",children:"Components"}),": Entity components that actions interact with"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/stategraphs/",children:"Stategraphs"}),": Animation system coordinated with actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/",children:"User Interface"}),": Action presentation and input handling"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"success-metrics",children:"Success Metrics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interaction Reliability"}),": Actions execute consistently across all game contexts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development Efficiency"}),": Component action system enables rapid creation of new interactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Performance"}),": Action synchronization maintains responsiveness in multiplayer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mod Compatibility"}),": Custom actions integrate seamlessly with base game systems"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"The Actions system provides the essential foundation for all player interactions in DST through comprehensive action definitions, component-based discovery, buffered execution, and robust validation mechanisms."})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var t=i(96540);const s={},o=t.createContext(s);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);