"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[22459],{12780:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"game-scripts/core-systems/networking-communication/multiplayer/serverpreferences","title":"Server Preferences","description":"Client-side management system for server display preferences including profanity filtering and name visibility controls","source":"@site/docs/game-scripts/core-systems/networking-communication/multiplayer/serverpreferences.md","sourceDirName":"game-scripts/core-systems/networking-communication/multiplayer","slug":"/game-scripts/core-systems/networking-communication/multiplayer/serverpreferences","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/multiplayer/serverpreferences","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"serverpreferences","title":"Server Preferences","description":"Client-side management system for server display preferences including profanity filtering and name visibility controls","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"PopupManager","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/multiplayer/popupmanager"},"next":{"title":"Networking Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/"}}');var i=n(74848),t=n(28453);const l={id:"serverpreferences",title:"Server Preferences",description:"Client-side management system for server display preferences including profanity filtering and name visibility controls",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="Server Preferences",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Class Structure",id:"class-structure",level:2},{value:"ServerPreferences Class",id:"serverpreferences-class",level:3},{value:"Core Methods",id:"core-methods",level:2},{value:"ServerPreferences()",id:"reset",level:3},{value:"ServerPreferences(server_data)",id:"toggle-filter",level:3},{value:"ServerPreferences(server_data)",id:"is-hidden",level:3},{value:"ServerPreferences(server_list)",id:"refresh-last-seen",level:3},{value:"Profanity Filtering Methods",id:"profanity-filtering-methods",level:2},{value:"ServerPreferences()",id:"clear-profanity",level:3},{value:"ServerPreferences(servers)",id:"update-profanity-multiple",level:3},{value:"ServerPreferences(server)",id:"update-profanity-single",level:3},{value:"Persistence Methods",id:"persistence-methods",level:2},{value:"ServerPreferences()",id:"get-save-name",level:3},{value:"ServerPreferences(callback)",id:"save",level:3},{value:"ServerPreferences(callback)",id:"load",level:3},{value:"ServerPreferences(str, callback)",id:"on-load",level:3},{value:"Data Structure",id:"data-structure",level:2},{value:"Server ID Generation",id:"server-id-generation",level:3},{value:"Persistent Data Format",id:"persistent-data-format",level:3},{value:"Profanity Server Cache",id:"profanity-server-cache",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Server Filtering",id:"basic-server-filtering",level:3},{value:"Manual Server Hiding",id:"manual-server-hiding",level:3},{value:"Profanity Filter Management",id:"profanity-filter-management",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Profile System Integration",id:"profile-system-integration",level:3},{value:"Network Integration",id:"network-integration",level:3},{value:"Stats Integration",id:"stats-integration",level:3},{value:"Constants",id:"constants",level:2},{value:"Data Expiration",id:"data-expiration",level:3},{value:"Save Configuration",id:"save-configuration",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"server-preferences",children:"Server Preferences"})}),"\n",(0,i.jsx)(r.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Build Version"}),(0,i.jsx)(r.th,{children:"Change Date"}),(0,i.jsx)(r.th,{children:"Change Type"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsx)(r.tbody,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"676042"}),(0,i.jsx)(r.td,{children:"2025-06-21"}),(0,i.jsx)(r.td,{children:"stable"}),(0,i.jsx)(r.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"ServerPreferences"})," module provides client-side management of server display preferences, including profanity filtering for server names and descriptions, and user-controlled visibility settings. This system allows players to customize their server browser experience while maintaining persistent storage of their preferences."]}),"\n",(0,i.jsx)(r.h2,{id:"class-structure",children:"Class Structure"}),"\n",(0,i.jsx)(r.h3,{id:"serverpreferences-class",children:"ServerPreferences Class"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nMain class responsible for managing server display preferences and profanity filtering settings."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Properties:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"persistdata"})," (table): Persistent storage for server-specific preferences"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"profanityservers"})," (table): Runtime cache of servers flagged for profanity"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"dirty"})," (boolean): Flag indicating if data needs to be saved"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,i.jsxs)(r.h3,{id:"reset",children:["ServerPreferences",":Reset","()"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nResets all server preferences to default state and clears persistent data."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:"-- Reset all server preferences\nlocal prefs = ServerPreferences()\nprefs:Reset()\n"})}),"\n",(0,i.jsxs)(r.h3,{id:"toggle-filter",children:["ServerPreferences",":ToggleNameAndDescriptionFilter","(server_data)"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nToggles the visibility filter for a specific server's name and description. This allows users to manually hide servers they don't want to see in the browser."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"server_data"})," (table|string|nil): Server information containing name and description, or just server name as string, or nil for current server"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Toggle filter for a specific server\nlocal server_info = {\n    name = "My Test Server",\n    description = "A private server for testing"\n}\nprefs:ToggleNameAndDescriptionFilter(server_info)\n\n-- Toggle filter using just server name\nprefs:ToggleNameAndDescriptionFilter("Simple Server Name")\n\n-- Toggle filter for current server\nprefs:ToggleNameAndDescriptionFilter(nil)\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"is-hidden",children:["ServerPreferences",":IsNameAndDescriptionHidden","(server_data)"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nChecks whether a server's name and description should be hidden based on user preferences or profanity filtering."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"server_data"})," (table|string|nil): Server information to check"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["(boolean): ",(0,i.jsx)(r.code,{children:"true"})," if the server should be hidden, ",(0,i.jsx)(r.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Check if server should be hidden\nlocal server = {name = "Test Server", description = "Description"}\nlocal should_hide = prefs:IsNameAndDescriptionHidden(server)\n\nif should_hide then\n    print("Server content is filtered")\nelse\n    print("Server content is visible")\nend\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"refresh-last-seen",children:["ServerPreferences",":RefreshLastSeen","(server_list)"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nUpdates the last seen timestamp for servers in the provided list. This is used for data expiration management."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"server_list"})," (table): Array of server data tables"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Update last seen timestamps\nlocal servers = {\n    {name = "Server 1", description = "Desc 1"},\n    {name = "Server 2", description = "Desc 2"}\n}\nprefs:RefreshLastSeen(servers)\n'})}),"\n",(0,i.jsx)(r.h2,{id:"profanity-filtering-methods",children:"Profanity Filtering Methods"}),"\n",(0,i.jsxs)(r.h3,{id:"clear-profanity",children:["ServerPreferences",":ClearProfanityFilteredServers","()"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nClears the runtime cache of profanity-filtered servers. This resets automatic profanity detection."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:"-- Clear profanity filter cache\nprefs:ClearProfanityFilteredServers()\n"})}),"\n",(0,i.jsxs)(r.h3,{id:"update-profanity-multiple",children:["ServerPreferences",":UpdateProfanityFilteredServers","(servers)"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nUpdates profanity filtering status for a list of servers. Servers containing profanity in names or descriptions are automatically flagged if profanity filtering is enabled."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"servers"})," (table): Array of server data tables to analyze"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Update profanity filtering for server list\nlocal server_list = {\n    {name = "Clean Server", description = "Family friendly", owner = false},\n    {name = "Bad Server", description = "Contains profanity", owner = true}\n}\nprefs:UpdateProfanityFilteredServers(server_list)\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"update-profanity-single",children:["ServerPreferences",":UpdateProfanityFilteredServer","(server)"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nUpdates profanity filtering status for a single server or the current server if nil is passed."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"server"})," (table|nil): Server data to analyze, or nil for current server"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Check single server for profanity\nlocal server = {name = "Test Server", description = "Clean description"}\nprefs:UpdateProfanityFilteredServer(server)\n\n-- Check current server\nprefs:UpdateProfanityFilteredServer(nil)\n'})}),"\n",(0,i.jsx)(r.h2,{id:"persistence-methods",children:"Persistence Methods"}),"\n",(0,i.jsxs)(r.h3,{id:"get-save-name",children:["ServerPreferences",":GetSaveName","()"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nReturns the filename used for saving server preferences. The name varies based on the current branch."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"(string): Save file name"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Get save file name\nlocal filename = prefs:GetSaveName()\nprint("Preferences saved to:", filename)\n-- Output: "server_preferences" or "server_preferences_dev"\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"save",children:["ServerPreferences",":Save","(callback)"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nSaves current preferences to persistent storage. Automatically expires old data based on ",(0,i.jsx)(r.code,{children:"USER_HISTORY_EXPIRY_TIME"}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"callback"})," (function): Optional callback function called with success status"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Save preferences with callback\nprefs:Save(function(success)\n    if success then\n        print("Preferences saved successfully")\n    else\n        print("Failed to save preferences")\n    end\nend)\n\n-- Save without callback\nprefs:Save()\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"load",children:["ServerPreferences",":Load","(callback)"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nLoads server preferences from persistent storage."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"callback"})," (function): Optional callback function called with success status"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Load preferences\nprefs:Load(function(success)\n    if success then\n        print("Preferences loaded successfully")\n    else\n        print("Failed to load preferences")\n    end\nend)\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"on-load",children:["ServerPreferences",":OnLoad","(str, callback)"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Status:"})," ",(0,i.jsx)(r.code,{children:"stable"})]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Description:"}),"\nInternal method that processes loaded preference data string. Handles JSON decoding and data validation."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"str"})," (string): JSON string containing preference data"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"callback"})," (function): Optional callback function"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- This method is typically called internally\n-- Manual usage would be:\nlocal json_data = \'{"ID_12345": {"hidename": true, "lastseen": 1640995200}}\'\nprefs:OnLoad(json_data, function(success)\n    print("Data processed:", success)\nend)\n'})}),"\n",(0,i.jsx)(r.h2,{id:"data-structure",children:"Data Structure"}),"\n",(0,i.jsx)(r.h3,{id:"server-id-generation",children:"Server ID Generation"}),"\n",(0,i.jsxs)(r.p,{children:["Server IDs are generated using the ",(0,i.jsx)(r.code,{children:"MakeServerID"})," function:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Server ID format\nlocal server_id = "ID_" .. tostring(smallhash(tostring(server_name)))\n'})}),"\n",(0,i.jsx)(r.h3,{id:"persistent-data-format",children:"Persistent Data Format"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Example persistdata structure\n{\n    ["ID_12345"] = {\n        hidename = true,           -- User chose to hide this server\n        lastseen = 1640995200      -- Unix timestamp of last update\n    },\n    ["ID_67890"] = {\n        lastseen = 1640995300      -- Only timestamp if no hiding\n    }\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"profanity-server-cache",children:"Profanity Server Cache"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Example profanityservers structure\n{\n    ["ID_12345"] = true,    -- Server is hidden due to profanity\n    ["ID_67890"] = false    -- Server contains profanity but is owner\'s server\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,i.jsx)(r.h3,{id:"basic-server-filtering",children:"Basic Server Filtering"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Initialize preferences\nlocal prefs = ServerPreferences()\n\n-- Load existing preferences\nprefs:Load(function(success)\n    if success then\n        print("Preferences loaded")\n    end\nend)\n\n-- Check if server should be hidden\nlocal server = {name = "Test Server", description = "Test Desc"}\nif prefs:IsNameAndDescriptionHidden(server) then\n    -- Don\'t display this server\n    print("Server is hidden")\nelse\n    -- Display server normally\n    print("Server is visible")\nend\n'})}),"\n",(0,i.jsx)(r.h3,{id:"manual-server-hiding",children:"Manual Server Hiding"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Toggle visibility for a server\nlocal server_data = {\n    name = "Unwanted Server",\n    description = "Server I don\'t want to see"\n}\n\n-- Hide the server\nprefs:ToggleNameAndDescriptionFilter(server_data)\n\n-- Save the change\nprefs:Save()\n'})}),"\n",(0,i.jsx)(r.h3,{id:"profanity-filter-management",children:"Profanity Filter Management"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:"-- Update profanity filtering for server list\nlocal servers = GetServerListFromNetwork()\nprefs:UpdateProfanityFilteredServers(servers)\n\n-- Clear profanity cache when needed\nprefs:ClearProfanityFilteredServers()\n\n-- Check individual server\nfor _, server in ipairs(servers) do\n    if not prefs:IsNameAndDescriptionHidden(server) then\n        DisplayServer(server)\n    end\nend\n"})}),"\n",(0,i.jsx)(r.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,i.jsx)(r.h3,{id:"profile-system-integration",children:"Profile System Integration"}),"\n",(0,i.jsx)(r.p,{children:"The module integrates with the Profile system to check profanity filtering preferences:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:"-- Profanity filtering is enabled based on profile setting\nif Profile:GetProfanityFilterServerNamesEnabled() then\n    -- Perform profanity checks\nend\n"})}),"\n",(0,i.jsx)(r.h3,{id:"network-integration",children:"Network Integration"}),"\n",(0,i.jsx)(r.p,{children:"Works with TheNet for server information:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:"-- Get current server information\nlocal name = TheNet:GetServerName()\nlocal desc = TheNet:GetServerDescription()\nlocal is_owner = TheNet:GetIsServerOwner(user_id)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"stats-integration",children:"Stats Integration"}),"\n",(0,i.jsx)(r.p,{children:"Reports filtering actions to the stats system:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-lua",children:'-- Metrics are sent when toggling server filters\nStats.PushMetricsEvent("toggleservernamefilter", user_id, data)\n'})}),"\n",(0,i.jsx)(r.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(r.h3,{id:"data-expiration",children:"Data Expiration"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"USER_HISTORY_EXPIRY_TIME"}),": Controls how long server preference data is retained"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"save-configuration",children:"Save Configuration"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"ENCODE_SAVES"}),": Determines whether save data should be encoded"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"BRANCH"}),": Current game branch affecting save file naming"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"./playerprofile.md",children:"Profile"}),": User profile settings including profanity filter preferences"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"../core-systems/index.md#stats",children:"Stats"}),": Metrics reporting for user actions"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"./json.md",children:"JSON"}),": JSON encoding/decoding for persistent storage"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"../core-systems/index.md#profanity-filter",children:"ProfanityFilter"}),": Content filtering system"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>a});var s=n(96540);const i={},t=s.createContext(i);function l(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);