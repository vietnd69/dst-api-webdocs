"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8601],{1244:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"api-vanilla/data-types/vector3","title":"Vector3","description":"Last Update: 2023-08-15","source":"@site/docs/api-vanilla/data-types/vector3.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/vector3","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/vector3","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"vector3","title":"Vector3","sidebar_position":2,"last_updated":"2023-08-15T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Data Types Overview","permalink":"/dst-api-webdocs/docs/api/data-types"},"next":{"title":"Colour","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/colour"}}');var i=t(4848),s=t(8453);const r={id:"vector3",title:"Vector3",sidebar_position:2,last_updated:new Date("2023-08-15T00:00:00.000Z"),version:619045},c="Vector3",a={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Vector Construction",id:"vector-construction",level:3},{value:"Vector Operations",id:"vector-operations",level:3},{value:"Distance Calculations",id:"distance-calculations",level:3},{value:"Type Checking and Conversion",id:"type-checking-and-conversion",level:3},{value:"Operators",id:"operators",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Entity Positioning",id:"entity-positioning",level:3},{value:"Direction and Movement",id:"direction-and-movement",level:3},{value:"Distance Checks",id:"distance-checks",level:3},{value:"UI Positioning",id:"ui-positioning",level:3},{value:"See also",id:"see-also",level:2},{value:"Example: Working with Vector3",id:"example-working-with-vector3",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-08-15"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"vector3",children:"Vector3"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"API Version: 619045"})}),"\n",(0,i.jsx)(n.p,{children:"Vector3 is a fundamental data type in Don't Starve Together that represents a three-dimensional vector with x, y, and z components. It's used extensively for positions, directions, velocities, and other spatial calculations in the game."}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Create a new Vector3\nlocal position = Vector3(10, 0, 5)\n\n-- Create a Vector3 at origin (0,0,0)\nlocal origin = Vector3()\n\n-- Access components\nlocal x = position.x\nlocal y = position.y\nlocal z = position.z\n\n-- Get components as separate values\nlocal x, y, z = position:Get()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"x"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"X-coordinate value"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"y"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Y-coordinate value (height)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"z"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Z-coordinate value"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(n.h3,{id:"vector-construction",children:"Vector Construction"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Standard constructor\nlocal vec = Vector3(x, y, z)\n\n-- Create Vector3 from Transform position\nlocal position = Vector3(inst.Transform:GetWorldPosition())\n\n-- Create Vector3 from angle (in radians) and radius\nlocal vec = Vector3FromTheta(theta, radius)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"vector-operations",children:"Vector Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Dot product\nlocal dot = vec1:Dot(vec2)\n\n-- Cross product\nlocal cross = vec1:Cross(vec2)\n\n-- Vector length (magnitude)\nlocal length = vec:Length()\n\n-- Squared length (more efficient for comparison)\nlocal lengthSq = vec:LengthSq()\n\n-- Normalize vector (modifies original)\nvec:Normalize()\n\n-- Get normalized vector (returns new vector)\nlocal normalized = vec:GetNormalized()\n\n-- Get normalized vector and length in one operation\nlocal normalized, length = vec:GetNormalizedAndLength()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"distance-calculations",children:"Distance Calculations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Distance between vectors\nlocal distance = vec1:Dist(vec2)\n\n-- Squared distance (more efficient for comparison)\nlocal distSq = vec1:DistSq(vec2)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type-checking-and-conversion",children:"Type Checking and Conversion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check if object is a Vector3\nif obj:IsVector3() then\n    -- Object is a Vector3\nend\n\n-- Convert value to Vector3\nlocal vec = ToVector3(obj, y, z)\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Related functions"}),": When working with entities, Vector3 objects are often created from Transform positions using ",(0,i.jsx)(n.code,{children:"Vector3(inst.Transform:GetWorldPosition())"}),". For movement using the ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/locomotor",children:"Locomotor Component"}),", methods like ",(0,i.jsx)(n.code,{children:"GoToPoint()"})," accept Vector3 objects directly to set destinations. User interfaces often use Vector3 for positioning UI elements with the ",(0,i.jsx)(n.code,{children:"widgetpos"})," property."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"operators",children:"Operators"}),"\n",(0,i.jsx)(n.p,{children:"Vector3 supports the following arithmetic operators:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operator"}),(0,i.jsx)(n.th,{children:"Example"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"+"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vec1 + vec2"})}),(0,i.jsx)(n.td,{children:"Vector addition"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vec1 - vec2"})}),(0,i.jsx)(n.td,{children:"Vector subtraction"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"*"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vec * scalar"})}),(0,i.jsx)(n.td,{children:"Scalar multiplication"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"/"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vec / scalar"})}),(0,i.jsx)(n.td,{children:"Scalar division"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"unary -"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"-vec"})}),(0,i.jsx)(n.td,{children:"Vector negation"})]})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Vector addition\nlocal sum = Vector3(1, 0, 1) + Vector3(2, 0, 3) -- Results in Vector3(3, 0, 4)\n\n-- Vector subtraction\nlocal direction = target_pos - current_pos -- Creates direction vector\n\n-- Scalar multiplication\nlocal scaled = direction * 5 -- Multiply vector by 5\n\n-- Vector negation\nlocal opposite = -direction -- Reverse direction\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"entity-positioning",children:"Entity Positioning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get entity position as Vector3\nlocal pos = Vector3(inst.Transform:GetWorldPosition())\n\n-- Move entity to position\ninst.Transform:SetPosition(target_pos.x, target_pos.y, target_pos.z)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"direction-and-movement",children:"Direction and Movement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Calculate direction from one point to another\nlocal start_pos = Vector3(inst.Transform:GetWorldPosition())\nlocal target_pos = Vector3(target.Transform:GetWorldPosition())\nlocal direction = (target_pos - start_pos):GetNormalized()\n\n-- Move in a direction\nlocal new_pos = current_pos + direction * speed\ninst.Transform:SetPosition(new_pos.x, new_pos.y, new_pos.z)\n\n-- Calculate angle from direction vector (useful for rotation)\nlocal angle = math.atan2(direction.z, direction.x)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"distance-checks",children:"Distance Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check if two entities are within range\nlocal pos1 = Vector3(inst1.Transform:GetWorldPosition())\nlocal pos2 = Vector3(inst2.Transform:GetWorldPosition())\n\nif pos1:Dist(pos2) < max_distance then\n    -- Entities are within range\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ui-positioning",children:"UI Positioning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Position UI elements using Vector3\ncontainer.widgetpos = Vector3(0, 200, 0)\n\n-- Position slot elements in a grid\nfor y = 0, 2 do\n    for x = 0, 2 do\n        table.insert(container.widgetslotpos, Vector3(80*x-80*2/2, 80*y-80*2/2, 0))\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/shared-properties/transform",children:"Transform"})," - For entity positions and rotations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/locomotor",children:"Locomotor Component"})," - For movement using Vector3"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/utils/vector",children:"Vector Utilities"})," - Additional vector operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/colour",children:"Colour"})," - For another common data type in DST"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/data-types/userdata",children:"UserData"})," - For core data types in the game engine"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-working-with-vector3",children:"Example: Working with Vector3"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Function to find entities within a radius\nlocal function FindEntitiesInRadius(position, radius)\n    local x, y, z = position:Get()\n    return TheSim:FindEntities(x, y, z, radius, nil, {"INLIMBO"})\nend\n\n-- Function to calculate distance between entities\nlocal function GetDistanceBetweenEntities(entity1, entity2)\n    local pos1 = Vector3(entity1.Transform:GetWorldPosition())\n    local pos2 = Vector3(entity2.Transform:GetWorldPosition())\n    return pos1:Dist(pos2)\nend\n\n-- Function to move an entity toward a target with pathfinding\nlocal function MoveTowardTarget(entity, target, speed)\n    -- Get positions\n    local current_pos = Vector3(entity.Transform:GetWorldPosition())\n    local target_pos = Vector3(target.Transform:GetWorldPosition())\n    \n    -- Calculate direction\n    local direction = target_pos - current_pos\n    local distance = direction:Length()\n    \n    if distance > 0.1 then\n        -- Normalize and scale by speed\n        direction:Normalize()\n        local move_distance = math.min(speed, distance)\n        local new_pos = current_pos + direction * move_distance\n        \n        -- Move entity\n        entity.Transform:SetPosition(new_pos.x, new_pos.y, new_pos.z)\n    end\nend\n\n-- Function to create a circular arrangement of objects\nlocal function CreateCircleOfObjects(center, radius, prefab, count)\n    local objects = {}\n    \n    for i = 1, count do\n        -- Calculate position on circle\n        local angle = (i-1) * (2 * math.pi / count)\n        local offset = Vector3FromTheta(angle, radius)\n        local position = center + offset\n        \n        -- Spawn object\n        local obj = SpawnPrefab(prefab)\n        obj.Transform:SetPosition(position.x, position.y, position.z)\n        table.insert(objects, obj)\n    end\n    \n    return objects\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);