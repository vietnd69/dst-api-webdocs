"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2863],{8125:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/core/entity-system","title":"Entity System","description":"The Entity System is the foundation of Don\'t Starve Together\'s game architecture. It defines how game objects are created, managed, and destroyed within the game world.","source":"@site/docs/api-vanilla/core/entity-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/entity-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/entity-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"entity-system","title":"Entity System","sidebar_position":1},"sidebar":"docs","previous":{"title":"Core Systems","permalink":"/dst-api-webdocs/docs/category/core-systems"},"next":{"title":"Component System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/component-system"}}');var s=t(4848),r=t(8453);const a={id:"entity-system",title:"Entity System",sidebar_position:1},o="Entity System",l={},d=[{value:"What is an Entity?",id:"what-is-an-entity",level:2},{value:"Entity Creation",id:"entity-creation",level:2},{value:"Entity Management",id:"entity-management",level:2},{value:"Managed in the World",id:"managed-in-the-world",level:3},{value:"Modified During Runtime",id:"modified-during-runtime",level:3},{value:"Tracked and Found",id:"tracked-and-found",level:3},{value:"Entity Lifecycle",id:"entity-lifecycle",level:2},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:3},{value:"Entity Relationships",id:"entity-relationships",level:2},{value:"Parent-Child Relationships",id:"parent-child-relationships",level:3},{value:"Entity References",id:"entity-references",level:3},{value:"Multiplayer Considerations",id:"multiplayer-considerations",level:2},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"entity-system",children:"Entity System"})}),"\n",(0,s.jsx)(n.p,{children:"The Entity System is the foundation of Don't Starve Together's game architecture. It defines how game objects are created, managed, and destroyed within the game world."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-an-entity",children:"What is an Entity?"}),"\n",(0,s.jsx)(n.p,{children:"In Don't Starve Together, an entity is any object that exists in the game world. This includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Characters (players and NPCs)"}),"\n",(0,s.jsx)(n.li,{children:"Items (tools, resources, food)"}),"\n",(0,s.jsx)(n.li,{children:"Structures (crafting stations, bases)"}),"\n",(0,s.jsx)(n.li,{children:"Environmental objects (trees, rocks)"}),"\n",(0,s.jsx)(n.li,{children:"Invisible managers (world, weather systems)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Every entity in DST is created from a prefab (prefabricated object) and is composed of components that define its behavior."}),"\n",(0,s.jsx)(n.h2,{id:"entity-creation",children:"Entity Creation"}),"\n",(0,s.jsxs)(n.p,{children:["Entities are created using the ",(0,s.jsx)(n.code,{children:"CreateEntity()"})," function and configured with various engine and game components:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function CreateBasicEntity()\n    -- Create a new entity\n    local inst = CreateEntity()\n    \n    -- Add engine components\n    inst.entity:AddTransform()        -- Position, rotation, scale\n    inst.entity:AddAnimState()        -- Visual appearance and animation\n    inst.entity:AddSoundEmitter()     -- Sound effects\n    inst.entity:AddNetwork()          -- Multiplayer synchronization\n    \n    -- Setup physics (if needed)\n    MakeInventoryPhysics(inst)\n    \n    -- Add tags for identification\n    inst:AddTag("myentity")\n    \n    -- Setup network for multiplayer\n    inst.entity:SetPristine()\n    \n    -- Client-side only code\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Add game components\n    inst:AddComponent("inspectable")\n    inst:AddComponent("inventoryitem")\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"entity-management",children:"Entity Management"}),"\n",(0,s.jsx)(n.p,{children:"Once created, entities can be:"}),"\n",(0,s.jsx)(n.h3,{id:"managed-in-the-world",children:"Managed in the World"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Spawn an entity in the world\nlocal entity = SpawnPrefab("prefab_name")\nentity.Transform:SetPosition(x, y, z)\n\n-- Remove an entity from the world\nentity:Remove()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"modified-during-runtime",children:"Modified During Runtime"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add a new component\nentity:AddComponent("burnable")\n\n-- Remove a component\nentity:RemoveComponent("burnable")\n\n-- Change properties\nentity.components.health:SetMaxHealth(100)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"tracked-and-found",children:"Tracked and Found"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Find entities by tag\nlocal entities = TheSim:FindEntities(x, y, z, radius, {"mytag"})\n\n-- Get all entities with a specific component\nlocal fireEntities = {}\nfor k, v in pairs(Ents) do\n    if v.components.burnable ~= nil then\n        table.insert(fireEntities, v)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"entity-lifecycle",children:"Entity Lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"Entities follow a specific lifecycle in DST:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Creation"})," - Entity is instantiated from a prefab"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initialization"})," - Components and properties are set up"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Activation"})," - Entity becomes active in the world"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Updates"})," - Entity behavior is updated each frame"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deactivation"})," - Entity is removed from active processing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Destruction"})," - Entity is completely removed from the game"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"lifecycle-hooks",children:"Lifecycle Hooks"}),"\n",(0,s.jsx)(n.p,{children:"You can hook into various points in an entity's lifecycle:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- On entity creation\ninst.OnEntityWake = function(inst)\n    -- Called when entity becomes active\nend\n\n-- On entity sleep (becomes inactive)\ninst.OnEntitySleep = function(inst)\n    -- Called when entity becomes inactive\nend\n\n-- On entity removal\ninst:ListenForEvent("onremove", function(inst)\n    -- Called when entity is removed\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"entity-relationships",children:"Entity Relationships"}),"\n",(0,s.jsx)(n.p,{children:"Entities can have relationships with other entities:"}),"\n",(0,s.jsx)(n.h3,{id:"parent-child-relationships",children:"Parent-Child Relationships"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Add a child entity\nparent:AddChild(child)\n\n-- Remove a child entity\nparent:RemoveChild(child)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"entity-references",children:"Entity References"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Store a reference to another entity\nself.target = target_entity\n\n-- Clear reference when target is removed\ninst:ListenForEvent("onremove", function()\n    self.target = nil\nend, target_entity)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"multiplayer-considerations",children:"Multiplayer Considerations"}),"\n",(0,s.jsx)(n.p,{children:"In multiplayer, entities exist in different forms on server and clients:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server"}),": Full entity with all components and logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client"}),": Simplified entity with only visual and minimal gameplay components"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The network component and replica system handle synchronization between these versions."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.p,{children:"When working with entities:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Be Mindful of Creation Costs"}),": Creating entities is expensive, so pool or reuse them when possible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean Up References"}),": Always clear references to other entities when they're removed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Tags for Identification"}),": Tags are more efficient than component checks for identifying entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep Entity Logic Separated"}),": Use components to isolate specific behaviors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize Entity Sleep"}),": When entities are off-screen, put expensive logic to sleep"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);