"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7391],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},53032:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"game-scripts/core-systems/user-interface/frontend/writeables","title":"Writeables","description":"User interface system for text input on signs, beefalo naming, and gravestone epitaphs","source":"@site/docs/game-scripts/core-systems/user-interface/frontend/writeables.md","sourceDirName":"game-scripts/core-systems/user-interface/frontend","slug":"/game-scripts/core-systems/user-interface/frontend/writeables","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/writeables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"writeables","title":"Writeables","description":"User interface system for text input on signs, beefalo naming, and gravestone epitaphs","sidebar_position":5,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Split Screen Utils PC","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/splitscreenutils-pc"},"next":{"title":"Graphics Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/graphics/"}}');var r=t(74848),s=t(28453);const a={id:"writeables",title:"Writeables",description:"User interface system for text input on signs, beefalo naming, and gravestone epitaphs",sidebar_position:5,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="Writeables",o={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"makescreen(inst, doer)",id:"makescreen",level:3},{value:"AddLayout(name, layout)",id:"addlayout",level:3},{value:"GetLayout(name)",id:"getlayout",level:3},{value:"Layout Types",id:"layout-types",level:2},{value:"Home Sign Layout",id:"homesign-layout",level:3},{value:"Beefalo Naming Layout",id:"beefalo-layout",level:3},{value:"Gravestone Layout",id:"gravestone-layout",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"HUD System Integration",id:"hud-system-integration",level:3},{value:"String System Integration",id:"string-system-integration",level:3},{value:"Control System Integration",id:"control-system-integration",level:3},{value:"Data Structures",id:"data-structures",level:2},{value:"Layout Configuration Table",id:"layout-configuration-table",level:3},{value:"Internal Kinds Table",id:"internal-kinds-table",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Adding Custom Writeables",id:"adding-custom-writeables",level:3},{value:"Prefab Integration",id:"prefab-integration",level:3},{value:"Conditional Writeable Access",id:"conditional-writeable-access",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Layout Caching",id:"layout-caching",level:3},{value:"Interface Management",id:"interface-management",level:3},{value:"Related Modules",id:"related-modules",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"writeables",children:"Writeables"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"writeables"})," module provides a user interface system for text input on interactive objects in Don't Starve Together. It manages different types of writeable interfaces including signs, beefalo naming, and gravestone epitaphs, each with customizable layouts, prompts, and button configurations."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Access the writeables system\nlocal writeables = require("writeables")\n\n-- Create a writeable interface for a sign\nlocal screen = writeables.makescreen(sign_inst, player)\n\n-- Add a custom writeable layout\nwriteables.AddLayout("custom_sign", {\n    prompt = "Enter custom text:",\n    animbank = "ui_board_5x3",\n    animbuild = "ui_board_5x3",\n    menuoffset = Vector3(6, -70, 0),\n    cancelbtn = { text = "Cancel", cb = nil, control = CONTROL_CANCEL },\n    acceptbtn = { text = "Accept", cb = nil, control = CONTROL_ACCEPT }\n})\n\n-- Get an existing layout\nlocal layout = writeables.GetLayout("homesign")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"makescreen",children:"makescreen(inst, doer)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates and displays a writeable interface screen for the specified entity and player. The interface type is determined by the entity's prefab name."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inst"})," (Entity): The writeable entity (sign, beefalo, gravestone, etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"doer"})," (Entity): The player entity that will interact with the interface"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Widget): The writeable widget interface if successful"}),"\n",(0,r.jsx)(n.li,{children:"(nil): If the player doesn't have a HUD or the prefab is not supported"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Display sign writing interface\nlocal function OnSignActivated(inst, doer)\n    local writeables = require("writeables")\n    local screen = writeables.makescreen(inst, doer)\n    if screen then\n        print("Sign interface opened successfully")\n    else\n        print("Failed to open sign interface")\n    end\nend\n\n-- Usage in sign prefab\ninst.components.activatable.OnActivate = OnSignActivated\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Details:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"writeables.makescreen = function(inst, doer)\n    local data = kinds[inst.prefab]\n\n    if doer and doer.HUD then\n        return doer.HUD:ShowWriteableWidget(inst, data)\n    end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"addlayout",children:"AddLayout(name, layout)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRegisters a new writeable layout configuration for a specific prefab type. Prevents duplicate layouts and provides error logging for debugging."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (string): The prefab name to associate with this layout"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"layout"})," (table): Layout configuration table containing interface properties"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"None"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add a custom notice board layout\nwriteables.AddLayout("notice_board", {\n    prompt = "Write a notice:",\n    animbank = "ui_board_5x3",\n    animbuild = "ui_board_5x3", \n    menuoffset = Vector3(6, -70, 0),\n    maxcharacters = 100,\n    \n    cancelbtn = { \n        text = "Cancel", \n        cb = nil, \n        control = CONTROL_CANCEL \n    },\n    middlebtn = { \n        text = "Clear", \n        cb = function(inst, doer, widget)\n            widget:OverrideText("")\n        end, \n        control = CONTROL_MENU_MISC_2 \n    },\n    acceptbtn = { \n        text = "Post Notice", \n        cb = nil, \n        control = CONTROL_ACCEPT \n    }\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Layout Configuration Properties:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prompt"})," (string): Text prompt displayed to the user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"animbank"})," (string): Animation bank for the interface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"animbuild"})," (string): Animation build for the interface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"menuoffset"})," (Vector3): Position offset for the interface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"maxcharacters"})," (number, optional): Maximum text length limit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"defaulttext"})," (function, optional): Function to generate default text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cancelbtn"})," (table): Cancel button configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"middlebtn"})," (table, optional): Middle action button configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"acceptbtn"})," (table): Accept button configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Button Configuration Format:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'button = {\n    text = "Button Text",           -- Display text\n    cb = function(inst, doer, widget) end,  -- Callback function (optional)\n    control = CONTROL_CONSTANT      -- Input control mapping\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Error Handling:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Implementation with duplicate prevention\nwriteables.AddLayout = function(name, layout)\n    if name ~= nil and kinds[name] == nil then\n        kinds[name] = layout\n    elseif layout ~= nil then\n        print("[Writeables Error] adding a duplicate layout "..tostring(name))\n    end\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"getlayout",children:"GetLayout(name)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the layout configuration for a specific prefab type."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (string): The prefab name to get the layout for"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Layout configuration table if found"}),"\n",(0,r.jsx)(n.li,{children:"(nil): If no layout exists for the given name"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Check if a prefab has a writeable layout\nlocal function CanWrite(inst)\n    local writeables = require("writeables")\n    local layout = writeables.GetLayout(inst.prefab)\n    return layout ~= nil\nend\n\n-- Get layout properties\nlocal layout = writeables.GetLayout("homesign")\nif layout then\n    print("Prompt:", layout.prompt)\n    print("Has middle button:", layout.middlebtn ~= nil)\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"layout-types",children:"Layout Types"}),"\n",(0,r.jsx)(n.h3,{id:"homesign-layout",children:"Home Sign Layout"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Prefabs:"})," ",(0,r.jsx)(n.code,{children:'"homesign"'}),", ",(0,r.jsx)(n.code,{children:'"arrowsign_post"'}),", ",(0,r.jsx)(n.code,{children:'"arrowsign_panel"'})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nStandard sign layout with random text generation support using SignGenerator."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'kinds["homesign"] = {\n    prompt = STRINGS.SIGNS.MENU.PROMPT,\n    animbank = "ui_board_5x3",\n    animbuild = "ui_board_5x3",\n    menuoffset = Vector3(6, -70, 0),\n\n    cancelbtn = { \n        text = STRINGS.SIGNS.MENU.CANCEL, \n        cb = nil, \n        control = CONTROL_CANCEL \n    },\n    middlebtn = { \n        text = STRINGS.SIGNS.MENU.RANDOM, \n        cb = function(inst, doer, widget)\n            widget:OverrideText( SignGenerator(inst, doer) )\n        end, \n        control = CONTROL_MENU_MISC_2 \n    },\n    acceptbtn = { \n        text = STRINGS.SIGNS.MENU.ACCEPT, \n        cb = nil, \n        control = CONTROL_ACCEPT \n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Random Generation"}),": Middle button generates random sign text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shared Layout"}),": Used by multiple sign prefab types"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Standard Interface"}),": Uses common UI board graphics"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"beefalo-layout",children:"Beefalo Naming Layout"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Prefabs:"})," ",(0,r.jsx)(n.code,{children:'"beefalo"'})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nSpecialized layout for naming beefalo with character limits and default naming patterns."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'kinds["beefalo"] = {\n    prompt = STRINGS.SIGNS.MENU.PROMPT_BEEFALO,\n    animbank = "ui_board_5x3",\n    animbuild = "ui_board_5x3",\n    menuoffset = Vector3(6, -70, 0),\n    maxcharacters = TUNING.BEEFALO_NAMING_MAX_LENGTH,\n\n    defaulttext = function(inst, doer)\n        return subfmt(STRINGS.NAMES.BEEFALO_BUDDY_NAME, { buddy = doer.name })\n    end,\n\n    cancelbtn = {\n        text = STRINGS.BEEFALONAMING.MENU.CANCEL,\n        cb = nil,\n        control = CONTROL_CANCEL\n    },\n    middlebtn = {\n        text = STRINGS.BEEFALONAMING.MENU.RANDOM,\n        cb = function(inst, doer, widget)\n            local name_index = math.random(#STRINGS.BEEFALONAMING.BEEFNAMES)\n            widget:OverrideText( STRINGS.BEEFALONAMING.BEEFNAMES[name_index] )\n        end,\n        control = CONTROL_MENU_MISC_2\n    },\n    acceptbtn = {\n        text = STRINGS.BEEFALONAMING.MENU.ACCEPT,\n        cb = nil,\n        control = CONTROL_ACCEPT\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Character Limit"}),": Enforces maximum name length via ",(0,r.jsx)(n.code,{children:"TUNING.BEEFALO_NAMING_MAX_LENGTH"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default Names"}),": Generates default name using player's name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Random Names"}),": Selects from predefined beefalo name list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Specialized Strings"}),": Uses beefalo-specific UI strings"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"gravestone-layout",children:"Gravestone Layout"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Prefabs:"})," ",(0,r.jsx)(n.code,{children:'"wendy_recipe_gravestone"'})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nWendy's gravestone epitaph interface with random epitaph generation."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'kinds["wendy_recipe_gravestone"] = {\n    prompt = STRINGS.SIGNS.MENU.PROMPT_GRAVESTONE,\n    animbank = "ui_board_5x3",\n    animbuild = "ui_board_5x3",\n    menuoffset = Vector3(6, -70, 0),\n\n    defaulttext = function(inst, doer)\n        return STRINGS.WENDY_EPITAPHS[math.random(#STRINGS.WENDY_EPITAPHS)]\n    end,\n\n    cancelbtn = { \n        text = STRINGS.SIGNS.MENU.CANCEL, \n        cb = nil, \n        control = CONTROL_CANCEL \n    },\n    middlebtn = { \n        text = STRINGS.SIGNS.MENU.RANDOM, \n        cb = function(inst, doer, widget)\n            local epitaph_index = math.random(#STRINGS.WENDY_EPITAPHS)\n            widget:OverrideText( STRINGS.WENDY_EPITAPHS[epitaph_index] )\n        end, \n        control = CONTROL_MENU_MISC_2 \n    },\n    acceptbtn = { \n        text = STRINGS.SIGNS.MENU.ACCEPT, \n        cb = nil, \n        control = CONTROL_ACCEPT \n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Character-Specific"}),": Designed for Wendy's gravestone crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Random Epitaphs"}),": Generates random epitaphs from predefined list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default Generation"}),": Automatically provides random epitaph on open"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,r.jsx)(n.h3,{id:"hud-system-integration",children:"HUD System Integration"}),"\n",(0,r.jsx)(n.p,{children:"The writeables system integrates with the player's HUD to display interfaces:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Integration with HUD system\nif doer and doer.HUD then\n    return doer.HUD:ShowWriteableWidget(inst, data)\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Required Components:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Player HUD"}),": Must have HUD component for interface display"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Writeable Widget"}),": HUD must support ",(0,r.jsx)(n.code,{children:"ShowWriteableWidget"})," method"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"string-system-integration",children:"String System Integration"}),"\n",(0,r.jsx)(n.p,{children:"Uses game's localization system for interface text:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- String references used\nSTRINGS.SIGNS.MENU.PROMPT         -- Sign prompts\nSTRINGS.SIGNS.MENU.CANCEL         -- Cancel button text\nSTRINGS.SIGNS.MENU.ACCEPT         -- Accept button text\nSTRINGS.SIGNS.MENU.RANDOM         -- Random button text\n\nSTRINGS.BEEFALONAMING.MENU.*      -- Beefalo naming interface\nSTRINGS.BEEFALONAMING.BEEFNAMES   -- Random beefalo names\nSTRINGS.NAMES.BEEFALO_BUDDY_NAME  -- Default name template\n\nSTRINGS.WENDY_EPITAPHS            -- Gravestone epitaphs\n"})}),"\n",(0,r.jsx)(n.h3,{id:"control-system-integration",children:"Control System Integration"}),"\n",(0,r.jsx)(n.p,{children:"Maps interface actions to game controls:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Control mappings\nCONTROL_CANCEL       -- Cancel/close interface\nCONTROL_ACCEPT       -- Accept/confirm text\nCONTROL_MENU_MISC_2  -- Middle button action (random, clear, etc.)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,r.jsx)(n.h3,{id:"layout-configuration-table",children:"Layout Configuration Table"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"table"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Complete configuration for a writeable interface type."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'layout = {\n    prompt = "string",              -- User prompt text\n    animbank = "string",            -- Animation bank name\n    animbuild = "string",           -- Animation build name\n    menuoffset = Vector3,           -- Interface position offset\n    maxcharacters = number,         -- Optional character limit\n    defaulttext = function,         -- Optional default text generator\n    \n    cancelbtn = {                   -- Cancel button config\n        text = "string",\n        cb = function,              -- Optional callback\n        control = CONTROL_CONSTANT\n    },\n    middlebtn = {                   -- Optional middle button config\n        text = "string", \n        cb = function,\n        control = CONTROL_CONSTANT\n    },\n    acceptbtn = {                   -- Accept button config\n        text = "string",\n        cb = function,              -- Optional callback\n        control = CONTROL_CONSTANT\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"internal-kinds-table",children:"Internal Kinds Table"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"table"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Internal storage for all registered layout configurations."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local kinds = {\n    ["homesign"] = layout_config,\n    ["beefalo"] = layout_config,\n    ["wendy_recipe_gravestone"] = layout_config,\n    -- Additional custom layouts...\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"adding-custom-writeables",children:"Adding Custom Writeables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Define a custom writeable for a new prefab\nlocal function SetupCustomWriteable()\n    local writeables = require("writeables")\n    \n    writeables.AddLayout("magic_scroll", {\n        prompt = "Inscribe magical words:",\n        animbank = "ui_board_5x3",\n        animbuild = "ui_board_5x3",\n        menuoffset = Vector3(6, -70, 0),\n        maxcharacters = 50,\n        \n        defaulttext = function(inst, doer)\n            return "Ancient words of power..."\n        end,\n        \n        cancelbtn = {\n            text = "Cancel",\n            cb = nil,\n            control = CONTROL_CANCEL\n        },\n        middlebtn = {\n            text = "Mystic Words",\n            cb = function(inst, doer, widget)\n                local mystical_words = {\n                    "Abracadabra", "Hocus Pocus", "Alakazam"\n                }\n                local index = math.random(#mystical_words)\n                widget:OverrideText(mystical_words[index])\n            end,\n            control = CONTROL_MENU_MISC_2\n        },\n        acceptbtn = {\n            text = "Inscribe",\n            cb = nil,\n            control = CONTROL_ACCEPT\n        }\n    })\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"prefab-integration",children:"Prefab Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Integrate writeable system into a prefab\nlocal function MakeWriteableSign()\n    local inst = CreateEntity()\n    -- ... basic prefab setup ...\n    \n    -- Add activatable component for interaction\n    inst:AddComponent("activatable")\n    inst.components.activatable.OnActivate = function(inst, doer)\n        local writeables = require("writeables")\n        writeables.makescreen(inst, doer)\n    end\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"conditional-writeable-access",children:"Conditional Writeable Access"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Control access to writeable interfaces\nlocal function CanPlayerWrite(inst, doer)\n    -- Check if player has permission\n    if not doer:HasTag("can_write") then\n        return false\n    end\n    \n    -- Check if writeable layout exists\n    local writeables = require("writeables")\n    local layout = writeables.GetLayout(inst.prefab)\n    return layout ~= nil\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"layout-caching",children:"Layout Caching"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Static Registration"}),": Layouts are registered once during initialization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast Lookup"}),": O(1) access via prefab name keys"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Efficient"}),": Shared layouts between multiple prefab types"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"interface-management",children:"Interface Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HUD Integration"}),": Leverages existing HUD widget system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event-Driven"}),": Only creates interfaces when requested"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cleanup"}),": Automatic cleanup through HUD widget management"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./signgenerator.md",children:"Sign Generator"}),": Generates random text for signs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./strings.md",children:"Strings"}),": Provides localized text for interfaces"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../widgets/hud.md",children:"HUD System"}),": Manages interface display"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../components/activatable.md",children:"Activatable Component"}),": Handles player interaction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./input.md",children:"Input System"}),": Maps controls to interface actions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);