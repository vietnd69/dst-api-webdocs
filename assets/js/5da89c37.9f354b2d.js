"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6325],{1970:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/data-types/anim","title":"Anim","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/data-types/anim.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/anim","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/anim","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"anim","title":"Anim","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Rect","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/rect"},"next":{"title":"Userdata","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/userdata"}}');var a=t(4848),s=t(8453);const o={id:"anim",title:"Anim",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},l="Anim",r={},d=[{value:"Overview",id:"overview",level:2},{value:"Properties",id:"properties",level:2},{value:"Core Methods",id:"core-methods",level:2},{value:"Playing and Queuing Animations",id:"playing-and-queuing-animations",level:3},{value:"Animation Control",id:"animation-control",level:3},{value:"Symbol Manipulation",id:"symbol-manipulation",level:3},{value:"Visual Effects",id:"visual-effects",level:3},{value:"Animation Setup",id:"animation-setup",level:2},{value:"Integration with State Graphs",id:"integration-with-state-graphs",level:2},{value:"Animation Events",id:"animation-events",level:2},{value:"Common Animation Patterns",id:"common-animation-patterns",level:2},{value:"Animation Sequences",id:"animation-sequences",level:3},{value:"Animation Transitions",id:"animation-transitions",level:3},{value:"Animation Builds and Banks",id:"animation-builds-and-banks",level:2},{value:"See also",id:"see-also",level:2},{value:"Example: Creating an Entity with Complex Animations",id:"example-creating-an-entity-with-complex-animations",level:2}];function m(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"anim",children:"Anim"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"API Version: 619045"})}),"\n",(0,a.jsx)(e.p,{children:"Anim is a data type representing animation sequences in Don't Starve Together. It manages how entities animate visually, handling animation playback, blending, and transitions."}),"\n",(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(e.p,{children:"In Don't Starve Together, animations are a core aspect of the game's visual presentation. The Anim data type and associated AnimState component work together to:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Play character and entity animations"}),"\n",(0,a.jsx)(e.li,{children:"Sequence multiple animations together"}),"\n",(0,a.jsx)(e.li,{children:"Handle animation transitions and looping"}),"\n",(0,a.jsx)(e.li,{children:"Control animation timing and playback rate"}),"\n",(0,a.jsx)(e.li,{children:"Modify visual appearance through symbol overrides and color adjustments"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Animations in DST are typically defined in animation banks (.zip files) that contain the animation data and build files that define the visual appearance."}),"\n",(0,a.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(e.p,{children:"Animations have the following key properties:"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:"Property"}),(0,a.jsx)(e.th,{children:"Type"}),(0,a.jsx)(e.th,{children:"Description"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"animname"})}),(0,a.jsx)(e.td,{children:"String"}),(0,a.jsx)(e.td,{children:'The name of the animation (e.g., "idle", "walk_loop")'})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"loop"})}),(0,a.jsx)(e.td,{children:"Boolean"}),(0,a.jsx)(e.td,{children:"Whether the animation should loop continuously"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"rate"})}),(0,a.jsx)(e.td,{children:"Number"}),(0,a.jsx)(e.td,{children:"Playback speed multiplier (default: 1.0)"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"frame"})}),(0,a.jsx)(e.td,{children:"Number"}),(0,a.jsx)(e.td,{children:"Current frame of animation"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"symbols"})}),(0,a.jsx)(e.td,{children:"Table"}),(0,a.jsx)(e.td,{children:"Collection of visual elements that make up the animation"})]})]})]}),"\n",(0,a.jsx)(e.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,a.jsx)(e.h3,{id:"playing-and-queuing-animations",children:"Playing and Queuing Animations"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:"-- Play an animation immediately\nAnimState:PlayAnimation(animname, loop)\n\n-- Queue an animation to play after the current one completes\nAnimState:PushAnimation(animname, loop)\n\n-- Check if the current animation has finished playing\nlocal isDone = AnimState:AnimDone()\n\n-- Get the name of the currently playing animation\nlocal currentAnim = AnimState:GetCurrentAnimationName()\n"})}),"\n",(0,a.jsx)(e.h3,{id:"animation-control",children:"Animation Control"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Set the animation playback rate (speed)\nAnimState:SetRate(rate)  -- 1.0 is normal speed, 2.0 is double speed\n\n-- Set the current time position within the animation\nAnimState:SetTime(time)  -- Set to specific time in seconds\nAnimState:SetFrame(frame)  -- Set to specific frame number\n\n-- Pause and resume animation\nAnimState:Pause()\nAnimState:Resume()\n\n-- Set animation blend mode\nAnimState:SetBloomEffectHandle("shaders/anim.ksh")\n'})}),"\n",(0,a.jsx)(e.h3,{id:"symbol-manipulation",children:"Symbol Manipulation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:"-- Override specific animation symbols\nAnimState:OverrideSymbol(symbol, build, replacement_symbol)\n\n-- Hide or show specific parts of an animation\nAnimState:Hide(symbol)\nAnimState:Show(symbol)\n\n-- Clear a symbol override\nAnimState:ClearOverrideSymbol(symbol)\n\n-- Apply or remove symbol modifiers\nAnimState:AddSymbolModifier(symbol, modifier)\nAnimState:RemoveSymbolModifier(symbol, modifier)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"visual-effects",children:"Visual Effects"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:"-- Apply color tinting\nAnimState:SetMultColour(r, g, b, a)  -- Values from 0-1\n\n-- Apply additive color\nAnimState:SetAddColour(r, g, b, a)  -- Values from 0-1\n\n-- Reset colors to default\nAnimState:SetMultColour(1, 1, 1, 1)\nAnimState:SetAddColour(0, 0, 0, 0)\n\n-- Apply scaling\nAnimState:SetScale(x, y, z)\n\n-- Set orientation and facing\nAnimState:SetFacing(FACING_RIGHT)  -- or FACING_LEFT, etc.\nAnimState:SetOrientation(ANIM_ORIENTATION.OnGround)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"animation-setup",children:"Animation Setup"}),"\n",(0,a.jsx)(e.p,{children:"Before playing animations, you need to set the animation bank and build:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Set up animations for an entity\nfunction SetupAnimations(inst, bank, build)\n    inst.AnimState:SetBank(bank)\n    inst.AnimState:SetBuild(build)\n    inst.AnimState:PlayAnimation("idle")\nend\n\n-- Example usage\nlocal function CreateItem()\n    local inst = CreateEntity()\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    \n    SetupAnimations(inst, "spear", "spear")\n    \n    return inst\nend\n'})}),"\n",(0,a.jsx)(e.h2,{id:"integration-with-state-graphs",children:"Integration with State Graphs"}),"\n",(0,a.jsx)(e.p,{children:"Animations typically integrate with the State Graph system to manage entity states and transitions:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local states = {\n    State {\n        name = "attack",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("attack")\n        end,\n        \n        timeline = {\n            -- Execute actions at specific animation frames\n            TimeEvent(10*FRAMES, function(inst)\n                inst.SoundEmitter:PlaySound("dontstarve/wilson/attack_weapon")\n            end),\n            \n            TimeEvent(15*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n            end),\n        },\n        \n        events = {\n            -- Transition to idle state when animation completes\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"animation-events",children:"Animation Events"}),"\n",(0,a.jsx)(e.p,{children:"Animations can trigger events that other systems can listen for:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Listen for animation completion\ninst:ListenForEvent("animover", function(inst)\n    print("Animation " .. inst.AnimState:GetCurrentAnimationName() .. " finished")\nend)\n\n-- Listen for specific animation frame events\ninst:ListenForEvent("animtimeevent", function(inst, data)\n    if data.animname == "attack" and data.timename == "attack_strike" then\n        inst.components.combat:DoAttack()\n    end\nend)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"common-animation-patterns",children:"Common Animation Patterns"}),"\n",(0,a.jsx)(e.h3,{id:"animation-sequences",children:"Animation Sequences"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Create a sequence of animations that play one after another\nfunction PlayAttackSequence(inst)\n    inst.AnimState:PlayAnimation("attack_pre")\n    inst.AnimState:PushAnimation("attack_loop", true)\n    \n    inst:DoTaskInTime(1.0, function()\n        inst.AnimState:PlayAnimation("attack_pst")\n        inst.AnimState:PushAnimation("idle", true)\n    end)\nend\n'})}),"\n",(0,a.jsx)(e.h3,{id:"animation-transitions",children:"Animation Transitions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Smoothly transition between states with appropriate animations\nfunction TransitionToState(inst, new_state)\n    if inst.current_state == "idle" and new_state == "walk" then\n        inst.AnimState:PlayAnimation("idle_to_walk")\n        inst.AnimState:PushAnimation("walk_loop", true)\n    elseif inst.current_state == "walk" and new_state == "run" then\n        inst.AnimState:PlayAnimation("walk_to_run")\n        inst.AnimState:PushAnimation("run_loop", true)\n    elseif inst.current_state == "walk" and new_state == "idle" then\n        inst.AnimState:PlayAnimation("walk_to_idle")\n        inst.AnimState:PushAnimation("idle_loop", true)\n    end\n    \n    inst.current_state = new_state\nend\n'})}),"\n",(0,a.jsx)(e.h2,{id:"animation-builds-and-banks",children:"Animation Builds and Banks"}),"\n",(0,a.jsx)(e.p,{children:"Animation data is stored in two main file types:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Animation Banks"})," (.zip): Define skeleton, frames, and keyframes"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Build Files"})," (.zip): Define the visual appearance, textures, and symbols"]}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Setting up animations from specific banks and builds\ninst.AnimState:SetBank("character_wilson")  -- Defines animation structure\ninst.AnimState:SetBuild("wilson")  -- Defines visual appearance\n'})}),"\n",(0,a.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"../core/animstate-system.md",children:"AnimState Component"})," - Core component for managing animations"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api/stategraphs",children:"State Graph System"})," - System that works with animations for entity behavior"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/stategraphs/events",children:"Timeline Events"})," - Triggering events at specific animation frames"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/stategraphs/commonstates",children:"Common States"})," - Reusable animation-driven states"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/stategraphs/animation-integration",children:"Animation Integration"})," - Connecting animations to other systems"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"example-creating-an-entity-with-complex-animations",children:"Example: Creating an Entity with Complex Animations"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local function CreateAnimatedEntity()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    \n    -- Set up animations\n    inst.AnimState:SetBank("spider")\n    inst.AnimState:SetBuild("spider_build")\n    inst.AnimState:PlayAnimation("idle", true)\n    \n    -- Create a function to handle animation-driven effects\n    inst.PlayAttackAnimation = function()\n        inst.AnimState:PlayAnimation("atk")\n        \n        -- Create a flash effect at a specific frame\n        inst:DoTaskInTime(10*FRAMES, function()\n            local fx = SpawnPrefab("attackflash")\n            fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n        end)\n        \n        -- Play sound at specific frame\n        inst:DoTaskInTime(5*FRAMES, function()\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/attack")\n        end)\n        \n        -- Return to idle when done\n        inst:ListenForEvent("animover", function(inst)\n            if inst.AnimState:GetCurrentAnimationName() == "atk" then\n                inst.AnimState:PlayAnimation("idle", true)\n            end\n        end)\n    end\n    \n    return inst\nend\n'})})]})}function c(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>l});var i=t(6540);const a={},s=i.createContext(a);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);