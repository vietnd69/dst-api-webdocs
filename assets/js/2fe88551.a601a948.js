"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[16347],{28453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>a});var n=r(96540);const i={},t=n.createContext(i);function l(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(t.Provider,{value:s},e.children)}},89980:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"game-scripts/core-systems/character-systems/core/playerhistory","title":"PlayerHistory","description":"System for tracking and managing history of players encountered during gameplay","source":"@site/docs/game-scripts/core-systems/character-systems/core/playerhistory.md","sourceDirName":"game-scripts/core-systems/character-systems/core","slug":"/game-scripts/core-systems/character-systems/core/playerhistory","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerhistory","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"playerhistory","title":"PlayerHistory","description":"System for tracking and managing history of players encountered during gameplay","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"PlayerDeaths","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerdeaths"},"next":{"title":"PlayerProfile","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerprofile"}}');var i=r(74848),t=r(28453);const l={id:"playerhistory",title:"PlayerHistory",description:"System for tracking and managing history of players encountered during gameplay",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="PlayerHistory",d={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Class Methods",id:"class-methods",level:2},{value:"PlayerHistory()",id:"playerhistory-constructor",level:3},{value:"history()",id:"startlistening",level:3},{value:"history()",id:"reset",level:3},{value:"history()",id:"discardolddata",level:3},{value:"history()",id:"updatehistoryfromclienttable",level:3},{value:"history()",id:"getrows",level:3},{value:"history()",id:"getrowsmosttime",level:3},{value:"history(userid)",id:"removeuser",level:3},{value:"history()",id:"getsavename",level:3},{value:"history(callback)",id:"save",level:3},{value:"history(callback)",id:"load",level:3},{value:"history(data)",id:"loaddataversion1",level:3},{value:"Properties",id:"properties",level:2},{value:"history.seen_players",id:"seen-players",level:3},{value:"history.seen_players_updatetime",id:"seen-players-updatetime",level:3},{value:"history.task",id:"task",level:3},{value:"history.dirty",id:"dirty",level:3},{value:"history.target_max_entries",id:"target-max-entries",level:3},{value:"Player Record Structure",id:"player-record-structure",level:2},{value:"Storage Versioning",id:"storage-versioning",level:2},{value:"Version 1 (Legacy)",id:"version-1-legacy",level:3},{value:"Version 2 (Current)",id:"version-2-current",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Setting Up Player Tracking",id:"setting-up-player-tracking",level:3},{value:"Finding Frequent Players",id:"finding-frequent-players",level:3},{value:"Recent Player Activity",id:"recent-player-activity",level:3},{value:"Constants",id:"constants",level:2},{value:"USER_HISTORY_EXPIRY_TIME",id:"user_history_expiry_time",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"playerhistory",children:"PlayerHistory"})}),"\n",(0,i.jsx)(s.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Build Version"}),(0,i.jsx)(s.th,{children:"Change Date"}),(0,i.jsx)(s.th,{children:"Change Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsx)(s.tbody,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"676042"}),(0,i.jsx)(s.td,{children:"2025-06-21"}),(0,i.jsx)(s.td,{children:"stable"}),(0,i.jsx)(s.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"PlayerHistory"})," class tracks and manages information about players encountered during gameplay sessions. It automatically records player interactions, tracks time played together, and maintains a persistent history database. The system supports automatic cleanup of old data and provides multiple sorting options for player records."]}),"\n",(0,i.jsx)(s.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"-- Create a new PlayerHistory instance\nlocal history = PlayerHistory()\n\n-- Start tracking players automatically\nhistory:StartListening()\n\n-- Get player history sorted by most recent\nlocal recent_players = history:GetRows()\n\n-- Get players sorted by most time played together\nlocal frequent_players = history:GetRowsMostTime()\n"})}),"\n",(0,i.jsx)(s.h2,{id:"class-methods",children:"Class Methods"}),"\n",(0,i.jsx)(s.h3,{id:"playerhistory-constructor",children:"PlayerHistory()"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nCreates a new PlayerHistory instance with initialized tracking data and configuration settings."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"(PlayerHistory): New PlayerHistory instance"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Properties Initialized:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"target_max_entries"}),": 100 (maximum number of player records to maintain)"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"local history = PlayerHistory()\n"})}),"\n",(0,i.jsxs)(s.h3,{id:"startlistening",children:["history",":StartListening","()"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nBegins automatic tracking of players in the current game session. Updates player information every 60 seconds."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"local history = PlayerHistory()\nhistory:StartListening()\n-- Now automatically tracks players every 60 seconds\n"})}),"\n",(0,i.jsxs)(s.h3,{id:"reset",children:["history",":Reset","()"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nClears all stored player history data and saves the empty dataset to persistent storage."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"history:Reset()\n-- All player history is now cleared\n"})}),"\n",(0,i.jsxs)(s.h3,{id:"discardolddata",children:["history",":DiscardOldData","()"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nRemoves expired player entries and enforces the maximum entry limit. Automatically called during updates and loading."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Cleanup Rules:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Removes entries older than ",(0,i.jsx)(s.code,{children:"USER_HISTORY_EXPIRY_TIME"})]}),"\n",(0,i.jsxs)(s.li,{children:["Keeps only the most recent ",(0,i.jsx)(s.code,{children:"target_max_entries"})," (100) records"]}),"\n",(0,i.jsx)(s.li,{children:"Prioritizes recent activity over older records"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"-- This is typically called automatically\nhistory:DiscardOldData()\n"})}),"\n",(0,i.jsxs)(s.h3,{id:"updatehistoryfromclienttable",children:["history",":UpdateHistoryFromClientTable","()"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nUpdates player history based on the current client table. Tracks time played together and updates last seen information."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Tracking Features:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Records time played with each player"}),"\n",(0,i.jsx)(s.li,{children:"Updates player names and character information"}),"\n",(0,i.jsx)(s.li,{children:"Tracks server names where players were encountered"}),"\n",(0,i.jsx)(s.li,{children:"Excludes the current player and dedicated server hosts"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"-- Called automatically by StartListening(), but can be called manually\nhistory:UpdateHistoryFromClientTable()\n"})}),"\n",(0,i.jsxs)(s.h3,{id:"getrows",children:["history",":GetRows","()"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nReturns all player history records sorted by most recently seen, then by time played together."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"(table): Array of player history records sorted by recency"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sort Priority:"})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"Last seen date (most recent first)"}),"\n",(0,i.jsx)(s.li,{children:"Time played together (most time first)"}),"\n",(0,i.jsx)(s.li,{children:"Player name (alphabetical)"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'local recent_players = history:GetRows()\nfor i, player in ipairs(recent_players) do\n    print("Player:", player.name, "Last seen:", player.last_seen_date)\nend\n'})}),"\n",(0,i.jsxs)(s.h3,{id:"getrowsmosttime",children:["history",":GetRowsMostTime","()"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nReturns all player history records sorted by time played together, then by recency."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"(table): Array of player history records sorted by time played together"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Sort Priority:"})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"Time played together (most time first)"}),"\n",(0,i.jsx)(s.li,{children:"Last seen date (most recent first)"}),"\n",(0,i.jsx)(s.li,{children:"Player name (alphabetical)"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'local frequent_players = history:GetRowsMostTime()\nfor i, player in ipairs(frequent_players) do\n    print("Player:", player.name, "Time played:", player.time_played_with, "seconds")\nend\n'})}),"\n",(0,i.jsxs)(s.h3,{id:"removeuser",children:["history",":RemoveUser","(userid)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nRemoves a specific player from the history database and saves the changes."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"userid"})," (string): User ID of the player to remove"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'-- Remove a specific player from history\nhistory:RemoveUser("KU_12345678")\n'})}),"\n",(0,i.jsxs)(s.h3,{id:"getsavename",children:["history",":GetSaveName","()"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nReturns the filename used for persistent storage. Uses different names for different branches."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'(string): Save file name ("player_history" for release, "player_history_BRANCH" for others)'}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'local save_name = history:GetSaveName()\n-- Returns "player_history" or "player_history_dev" depending on BRANCH\n'})}),"\n",(0,i.jsxs)(s.h3,{id:"save",children:["history",":Save","(callback)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nSaves player history to persistent storage if data has been modified."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"callback"})," (function, optional): Function called after save completion"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Storage Format:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Version 2 format with seen_players data structure"}),"\n",(0,i.jsx)(s.li,{children:"Only saves if data has been marked as dirty"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'history:Save(function()\n    print("Player history saved")\nend)\n'})}),"\n",(0,i.jsxs)(s.h3,{id:"load",children:["history",":Load","(callback)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nLoads player history from persistent storage and handles version migration."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"callback"})," (function, optional): Function called with success status after load completion"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Version Support:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Supports migration from version 1 (date-based) to version 2 (timestamp-based)"}),"\n",(0,i.jsx)(s.li,{children:"Automatically discards old data after loading"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'history:Load(function(success)\n    if success then\n        print("Player history loaded successfully")\n        local players = history:GetRows()\n        print("Loaded", #players, "player records")\n    else\n        print("Failed to load player history")\n    end\nend)\n'})}),"\n",(0,i.jsxs)(s.h3,{id:"loaddataversion1",children:["history",":LoadDataVersion1","(data)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Status:"})," ",(0,i.jsx)(s.code,{children:"stable"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nHandles migration from version 1 player history format to current format. Converts date strings to timestamps."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"data"})," (table): Version 1 format player history data"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Migration Process:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Converts string dates (YYYYMMDD) to Unix timestamps"}),"\n",(0,i.jsx)(s.li,{children:"Preserves most recent data for duplicate players"}),"\n",(0,i.jsx)(s.li,{children:"Updates data structure to version 2 format"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"-- This is called automatically during Load() for version 1 data\n-- Not typically called manually\n"})}),"\n",(0,i.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(s.h3,{id:"seen-players",children:"history.seen_players"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Type:"})," ",(0,i.jsx)(s.code,{children:"table"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"})," Dictionary of player data indexed by user ID"]}),"\n",(0,i.jsx)(s.h3,{id:"seen-players-updatetime",children:"history.seen_players_updatetime"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Type:"})," ",(0,i.jsx)(s.code,{children:"table"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"})," Tracking table for when each player was last updated"]}),"\n",(0,i.jsx)(s.h3,{id:"task",children:"history.task"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Type:"})," ",(0,i.jsx)(s.code,{children:"Task"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"})," Periodic task handle for automatic player tracking updates"]}),"\n",(0,i.jsx)(s.h3,{id:"dirty",children:"history.dirty"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Type:"})," ",(0,i.jsx)(s.code,{children:"boolean"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"})," Flag indicating whether data has been modified and needs saving"]}),"\n",(0,i.jsx)(s.h3,{id:"target-max-entries",children:"history.target_max_entries"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Type:"})," ",(0,i.jsx)(s.code,{children:"number"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"})," Maximum number of player records to maintain (default: 100)"]}),"\n",(0,i.jsx)(s.h2,{id:"player-record-structure",children:"Player Record Structure"}),"\n",(0,i.jsx)(s.p,{children:"Each player record contains the following information:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'{\n    userid = "KU_12345678",        -- Klei user ID\n    netid = "123",                 -- Network ID for current session\n    name = "PlayerName",           -- Display name\n    time_played_with = 3600,       -- Total seconds played together\n    prefab = "wilson",             -- Character prefab name\n    server_name = "Server Name",   -- Name of server where encountered\n    last_seen_date = 1640995200    -- Unix timestamp of last encounter\n}\n'})}),"\n",(0,i.jsx)(s.h2,{id:"storage-versioning",children:"Storage Versioning"}),"\n",(0,i.jsx)(s.h3,{id:"version-1-legacy",children:"Version 1 (Legacy)"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Used string-based dates (YYYYMMDD format)"}),"\n",(0,i.jsx)(s.li,{children:"Limited tracking capabilities"}),"\n",(0,i.jsx)(s.li,{children:"Automatically migrated to Version 2"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"version-2-current",children:"Version 2 (Current)"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Uses Unix timestamps for precise tracking"}),"\n",(0,i.jsx)(s.li,{children:"Enhanced player data structure"}),"\n",(0,i.jsx)(s.li,{children:"Supports time played together tracking"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,i.jsx)(s.h3,{id:"setting-up-player-tracking",children:"Setting Up Player Tracking"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'local history = PlayerHistory()\n\n-- Load existing data\nhistory:Load(function(success)\n    if success then\n        print("Loaded existing player history")\n    end\n    \n    -- Start automatic tracking\n    history:StartListening()\nend)\n'})}),"\n",(0,i.jsx)(s.h3,{id:"finding-frequent-players",children:"Finding Frequent Players"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'local history = PlayerHistory()\nhistory:Load(function(success)\n    if success then\n        local frequent = history:GetRowsMostTime()\n        \n        -- Get top 5 most played with players\n        for i = 1, math.min(5, #frequent) do\n            local player = frequent[i]\n            local hours = math.floor(player.time_played_with / 3600)\n            print(string.format("%s: %d hours", player.name, hours))\n        end\n    end\nend)\n'})}),"\n",(0,i.jsx)(s.h3,{id:"recent-player-activity",children:"Recent Player Activity"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:'local history = PlayerHistory()\nlocal recent = history:GetRows()\n\n-- Check recent activity\nfor _, player in ipairs(recent) do\n    local days_ago = (os.time() - player.last_seen_date) / (24 * 60 * 60)\n    if days_ago < 7 then\n        print(player.name, "seen", math.floor(days_ago), "days ago")\n    end\nend\n'})}),"\n",(0,i.jsx)(s.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(s.h3,{id:"user_history_expiry_time",children:"USER_HISTORY_EXPIRY_TIME"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"})," Time limit for keeping player history records (referenced but not defined in this module)"]}),"\n",(0,i.jsx)(s.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerdeaths",children:"PlayerDeaths"}),": Tracks player death records and statistics"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerprofile",children:"PlayerProfile"}),": Manages player preferences and customization data"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"../networking.md",children:"TheNet"}),": Provides client table information for player tracking"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);