"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4983],{3375:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>r,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api-vanilla/utils/math","title":"Math Utilities","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/utils/math.md","sourceDirName":"api-vanilla/utils","slug":"/api-vanilla/utils/math","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/math","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"math","title":"Math Utilities","sidebar_position":5,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Utilities Overview","permalink":"/dst-api-webdocs/docs/api/utils"},"next":{"title":"String Utilities","permalink":"/dst-api-webdocs/docs/api-vanilla/utils/string"}}');var i=e(4848),l=e(8453);const o={id:"math",title:"Math Utilities",sidebar_position:5,last_updated:new Date("2023-07-06T00:00:00.000Z")},s="Math Utilities",r={},c=[{value:"Standard Math Functions",id:"standard-math-functions",level:2},{value:"Basic Operations",id:"basic-operations",level:3},{value:"Trigonometric Functions",id:"trigonometric-functions",level:3},{value:"Other Functions",id:"other-functions",level:3},{value:"Extended Math Functions",id:"extended-math-functions",level:2},{value:"Number Manipulation",id:"number-manipulation",level:3},{value:"Range Functions",id:"range-functions",level:3},{value:"Special Constants",id:"special-constants",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Damage Calculations",id:"damage-calculations",level:3},{value:"Position Calculations",id:"position-calculations",level:3},{value:"Time and Rate Calculations",id:"time-and-rate-calculations",level:3},{value:"Interpolation",id:"interpolation",level:3}];function d(n){const a={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.p,{children:(0,i.jsx)(a.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"math-utilities",children:"Math Utilities"})}),"\n",(0,i.jsx)(a.p,{children:"Mathematical functions and operations for Don't Starve Together modding that extend beyond the standard Lua math library."}),"\n",(0,i.jsx)(a.h2,{id:"standard-math-functions",children:"Standard Math Functions"}),"\n",(0,i.jsx)(a.p,{children:"These functions are part of the standard Lua math library:"}),"\n",(0,i.jsx)(a.h3,{id:"basic-operations",children:"Basic Operations"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Absolute value\nlocal abs = math.abs(x)\n\n-- Maximum and minimum\nlocal max = math.max(x, y)\nlocal min = math.min(x, y)\n\n-- Floor and ceiling\nlocal floor = math.floor(x)\nlocal ceil = math.ceil(x)\n\n-- Power and square root\nlocal pow = math.pow(x, y)  -- x^y\nlocal sqrt = math.sqrt(x)   -- \u221ax\n\n-- Modulo\nlocal remainder = math.mod(x, y)\nlocal float_remainder = math.fmod(x, y)\n\n-- Random numbers\nmath.randomseed(seed)       -- Set random seed\nlocal rand = math.random()  -- Random between 0 and 1\nlocal rand_n = math.random(n)  -- Random integer between 1 and n\nlocal rand_range = math.random(min, max)  -- Random integer between min and max\n"})}),"\n",(0,i.jsx)(a.h3,{id:"trigonometric-functions",children:"Trigonometric Functions"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Angle conversions\nlocal rad = math.rad(degrees)  -- Convert degrees to radians\nlocal deg = math.deg(radians)  -- Convert radians to degrees\n\n-- Basic trigonometry\nlocal sin = math.sin(rad)\nlocal cos = math.cos(rad)\nlocal tan = math.tan(rad)\n\n-- Inverse trigonometry\nlocal asin = math.asin(x)  -- Arc sine\nlocal acos = math.acos(x)  -- Arc cosine\nlocal atan = math.atan(x)  -- Arc tangent\nlocal atan2 = math.atan2(y, x)  -- Arc tangent of y/x, respecting quadrants\n\n-- Hyperbolic functions\nlocal sinh = math.sinh(x)  -- Hyperbolic sine\nlocal cosh = math.cosh(x)  -- Hyperbolic cosine\nlocal tanh = math.tanh(x)  -- Hyperbolic tangent\n"})}),"\n",(0,i.jsx)(a.h3,{id:"other-functions",children:"Other Functions"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Logarithms\nlocal ln = math.log(x)  -- Natural logarithm\nlocal log10 = math.log10(x)  -- Base-10 logarithm\nlocal log_base = math.log(x, base)  -- Logarithm with custom base\n\n-- Exponential\nlocal exp = math.exp(x)  -- e^x\n\n-- Constants\nlocal pi = math.pi  -- \u03c0 (approximately 3.14159...)\nlocal huge = math.huge  -- Positive infinity\n"})}),"\n",(0,i.jsx)(a.h2,{id:"extended-math-functions",children:"Extended Math Functions"}),"\n",(0,i.jsx)(a.p,{children:"Don't Starve Together provides additional math functions:"}),"\n",(0,i.jsx)(a.h3,{id:"number-manipulation",children:"Number Manipulation"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Clamp a value between min and max\nlocal clamped = math.clamp(value, min_value, max_value)\n\n-- Get absolute difference between two numbers\nlocal difference = math.diff(a, b)\n\n-- Split number into integer and fractional parts\nlocal int_part, frac_part = math.modf(x)\n\n-- Convert a number to x * 2^n form\nlocal mantissa, exponent = math.frexp(x)\n\n-- Calculate x * 2^n\nlocal result = math.ldexp(x, n)\n"})}),"\n",(0,i.jsx)(a.h3,{id:"range-functions",children:"Range Functions"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Generate an array of numbers in a range\nlocal range = math.range(start, stop, step)  -- step is optional, defaults to 1\n"})}),"\n",(0,i.jsx)(a.h3,{id:"special-constants",children:"Special Constants"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Infinity\nlocal inf = math.inf  -- Represents infinity (1/0)\n"})}),"\n",(0,i.jsx)(a.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(a.h3,{id:"damage-calculations",children:"Damage Calculations"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Calculate damage with random variation\nlocal function CalculateDamage(base_damage, variance)\n    variance = variance or 0.1  -- Default 10% variance\n    local min_damage = base_damage * (1 - variance)\n    local max_damage = base_damage * (1 + variance)\n    return math.random() * (max_damage - min_damage) + min_damage\nend\n\n-- Apply damage with caps\nlocal function ApplyDamage(inst, damage)\n    local health = inst.components.health\n    if health then\n        -- Ensure damage is at least 1 and at most the current health\n        damage = math.clamp(damage, 1, health.currenthealth)\n        health:DoDelta(-damage)\n        return damage\n    end\n    return 0\nend\n"})}),"\n",(0,i.jsx)(a.h3,{id:"position-calculations",children:"Position Calculations"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Find a position at a random angle and distance\nlocal function FindRandomPosition(center_x, center_y, center_z, min_dist, max_dist)\n    local theta = math.random() * 2 * math.pi  -- Random angle in radians\n    local dist = min_dist + math.random() * (max_dist - min_dist)\n    \n    local offset_x = dist * math.cos(theta)\n    local offset_z = dist * math.sin(theta)\n    \n    return center_x + offset_x, center_y, center_z + offset_z\nend\n\n-- Check if a point is within a rectangle\nlocal function IsPointInRect(x, z, rect_x, rect_z, rect_width, rect_height)\n    return x >= rect_x and x <= rect_x + rect_width and\n           z >= rect_z and z <= rect_z + rect_height\nend\n"})}),"\n",(0,i.jsx)(a.h3,{id:"time-and-rate-calculations",children:"Time and Rate Calculations"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:'-- Convert game time to real seconds\nlocal function GameTimeToRealSeconds(time)\n    local TICKS_PER_SECOND = 30  -- DST runs at 30 ticks per second\n    return time / TICKS_PER_SECOND\nend\n\n-- Calculate spawn rate based on day phase\nlocal function CalculateSpawnRate(day_phase, base_rate)\n    if day_phase == "day" then\n        return base_rate * 0.5  -- Half as many spawns during day\n    elseif day_phase == "dusk" then\n        return base_rate        -- Normal spawn rate at dusk\n    else -- night\n        return base_rate * 2    -- Double spawns at night\n    end\nend\n'})}),"\n",(0,i.jsx)(a.h3,{id:"interpolation",children:"Interpolation"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-lua",children:"-- Linear interpolation between two values\nlocal function Lerp(a, b, t)\n    return a + (b - a) * math.clamp(t, 0, 1)\nend\n\n-- Smooth step interpolation (ease in/out)\nlocal function SmoothStep(a, b, t)\n    t = math.clamp(t, 0, 1)\n    t = t * t * (3 - 2 * t)  -- Smooth formula\n    return a + (b - a) * t\nend\n"})})]})}function m(n={}){const{wrapper:a}={...(0,l.R)(),...n.components};return a?(0,i.jsx)(a,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,a,e)=>{e.d(a,{R:()=>o,x:()=>s});var t=e(6540);const i={},l=t.createContext(i);function o(n){const a=t.useContext(l);return t.useMemo((function(){return"function"==typeof n?n(a):{...a,...n}}),[a,n])}function s(n){let a;return a=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(l.Provider,{value:a},n.children)}}}]);