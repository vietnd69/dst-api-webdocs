"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3699],{879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/world/network","title":"Network and World Synchronization","description":"This document covers how networking functions specifically in the context of the world system in Don\'t Starve Together, focusing on world state synchronization, shard communication, and related networking concepts.","source":"@site/docs/api-vanilla/world/network.md","sourceDirName":"api-vanilla/world","slug":"/api-vanilla/world/network","permalink":"/dst-api-webdocs/docs/api-vanilla/world/network","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"network","title":"Network and World Synchronization","sidebar_position":3},"sidebar":"docs","previous":{"title":"Seasons API","permalink":"/dst-api-webdocs/docs/api-vanilla/world/seasons"},"next":{"title":"World Generation API","permalink":"/dst-api-webdocs/docs/api-vanilla/world/worldgen"}}');var r=t(4848),i=t(8453);const s={id:"network",title:"Network and World Synchronization",sidebar_position:3},o="Network and World Synchronization",l={},d=[{value:"World Network Structure",id:"world-network-structure",level:2},{value:"World State Synchronization",id:"world-state-synchronization",level:2},{value:"WorldState Variables",id:"worldstate-variables",level:3},{value:"Accessing WorldState",id:"accessing-worldstate",level:3},{value:"Shard Communication",id:"shard-communication",level:2},{value:"Shard Entity Registration",id:"shard-entity-registration",level:3},{value:"Shard RPC Communication",id:"shard-rpc-communication",level:3},{value:"Player Migration Between Shards",id:"player-migration-between-shards",level:3},{value:"World Network Events",id:"world-network-events",level:2},{value:"Map Synchronization",id:"map-synchronization",level:2},{value:"Time Synchronization",id:"time-synchronization",level:2},{value:"World Save Data Networking",id:"world-save-data-networking",level:2},{value:"Network Zones and Areas",id:"network-zones-and-areas",level:2},{value:"World Synchronization Best Practices",id:"world-synchronization-best-practices",level:2},{value:"Example: Weather System Synchronization",id:"example-weather-system-synchronization",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"network-and-world-synchronization",children:"Network and World Synchronization"})}),"\n",(0,r.jsx)(n.p,{children:"This document covers how networking functions specifically in the context of the world system in Don't Starve Together, focusing on world state synchronization, shard communication, and related networking concepts."}),"\n",(0,r.jsx)(n.h2,{id:"world-network-structure",children:"World Network Structure"}),"\n",(0,r.jsx)(n.p,{children:'In Don\'t Starve Together, the world consists of separate "shards" (server instances) that can communicate with each other:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Master Shard   \u2502\u25c4\u2500\u2500\u2500\u2500\u2524 Secondary Shard \u2502\n\u2502  (Surface)      \u2502     \u2502  (Caves)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Secondary Shard \u2502\n                        \u2502  (Ruins)        \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsx)(n.h2,{id:"world-state-synchronization",children:"World State Synchronization"}),"\n",(0,r.jsxs)(n.p,{children:["The world state in DST is managed by the ",(0,r.jsx)(n.code,{children:"WorldState"})," component, which synchronizes crucial environmental information to all connected clients."]}),"\n",(0,r.jsx)(n.h3,{id:"worldstate-variables",children:"WorldState Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- In world prefab initialization\nif not TheWorld.ismastersim then\n    return inst\nend\n\ninst:AddComponent("worldstate")\nlocal worldstate = inst.components.worldstate\n\n-- Initialize network variables for world state\nworldstate.data.phase = "day"\nworldstate.data.cycles = 0\nworldstate.data.temperature = 20\nworldstate.data.season = "autumn"\nworldstate.data.iswinter = false\nworldstate.data.isspring = false\nworldstate.data.issummer = false\nworldstate.data.isautumn = true\nworldstate.data.elapseddaysinseason = 0\nworldstate.data.remainingdaysinseason = 20\nworldstate.data.issnowing = false\nworldstate.data.snowlevel = 0\nworldstate.data.israining = false\nworldstate.data.precipitationrate = 0\nworldstate.data.moisture = 0\nworldstate.data.moistureceil = 100\nworldstate.data.moisturefloor = 0\nworldstate.data.moisturerate = 0\nworldstate.data.pop = 0\nworldstate.data.wet = false\n'})}),"\n",(0,r.jsx)(n.h3,{id:"accessing-worldstate",children:"Accessing WorldState"}),"\n",(0,r.jsxs)(n.p,{children:["Clients and server can access the world state through ",(0,r.jsx)(n.code,{children:"TheWorld.state"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Check if it\'s night time\nif TheWorld.state.phase == "night" then\n    -- Do night-specific behavior\nend\n\n-- Check current season\nif TheWorld.state.issummer then\n    -- Apply summer-specific effects\nend\n\n-- Get current temperature\nlocal world_temp = TheWorld.state.temperature\n\n-- Check weather conditions\nif TheWorld.state.israining or TheWorld.state.issnowing then\n    -- Take shelter\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"shard-communication",children:"Shard Communication"}),"\n",(0,r.jsx)(n.p,{children:"For multi-shard setups (like Surface + Caves), DST provides shard communication mechanisms."}),"\n",(0,r.jsx)(n.h3,{id:"shard-entity-registration",children:"Shard Entity Registration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Register an entity for cross-shard tracking\nTheWorld:RegisterShard("player_house", inst)\n\n-- Get an entity registered in another shard\nlocal house = TheWorld:GetShard("player_house")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"shard-rpc-communication",children:"Shard RPC Communication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Send RPC from one shard to another\nSendWorldRPCToShard(WorldRPC.Shard.ExampleRPC, target_shard_id, param1, param2)\n\n-- Add handler for cross-shard RPC\nAddShardRPCHandler("Shard", "ExampleRPC", function(shardid, param1, param2)\n    print("Received RPC from shard " .. shardid)\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"player-migration-between-shards",children:"Player Migration Between Shards"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Server code to migrate a player to another shard\n-- (e.g., when entering a cave entrance)\nif player.components.shard_player ~= nil then\n    -- Store important data for transfer\n    player.components.shard_player:SetMigrationData({\n        health = player.components.health.currenthealth,\n        inventory_items = SerializeInventory(player.components.inventory),\n        -- Other important player data\n    })\n    \n    -- Send player to target shard\n    player.components.shard_player:DoMigration(target_shard_id)\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"world-network-events",children:"World Network Events"}),"\n",(0,r.jsx)(n.p,{children:"TheWorld entity broadcasts network events that components and entities can listen for:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Listen for day/night cycle changes\ninst:ListenForEvent("phasechanged", function(world, data)\n    if data.newphase == "day" then\n        -- Morning behavior\n    elseif data.newphase == "dusk" then\n        -- Evening behavior\n    elseif data.newphase == "night" then\n        -- Night behavior\n    end\nend, TheWorld)\n\n-- Listen for season changes\ninst:ListenForEvent("seasonchanged", function(world, data)\n    if data.season == "winter" then\n        -- Winter preparation\n    end\nend, TheWorld)\n\n-- Listen for weather changes\ninst:ListenForEvent("weatherchanged", function(world, data)\n    if data.israining then\n        -- React to rain starting\n    end\nend, TheWorld)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"map-synchronization",children:"Map Synchronization"}),"\n",(0,r.jsx)(n.p,{children:"The world's map information is synchronized to clients:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Reveal area for all players\nTheWorld.minimap.MiniMap:ShowArea(x, y, z, radius)\n\n-- Reveal area for specific player\nplayer.player_classified.MapExplorer:RevealArea(x, y, z, radius)\n\n-- Check if a position is revealed on player's map\nlocal is_revealed = player.player_classified.MapExplorer:IsExplored(x, y, z)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"time-synchronization",children:"Time Synchronization"}),"\n",(0,r.jsx)(n.p,{children:"Time in DST is synchronized across all clients:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Get the current server time\nlocal server_time = TheNet:GetServerTimeSeconds()\n\n-- Get server time as a string\nlocal time_str = TheNet:GetServerTimeString()\n\n-- Schedule something based on synchronized time\ninst:DoPeriodicTask(1, function()\n    local current_time = TheNet:GetServerTimeSeconds()\n    -- Do something that needs synchronized timing\nend)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"world-save-data-networking",children:"World Save Data Networking"}),"\n",(0,r.jsx)(n.p,{children:"When world data is saved, network variables ensure clients have current state:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Server initiating a save\nTheWorld:PushEvent("ms_save")\n\n-- Listen for save completion\nTheWorld:ListenForEvent("ms_savecomplete", function()\n    print("World save completed")\nend)\n\n-- Listen for save events on clients\nTheWorld:ListenForEvent("ms_save", function()\n    -- Client-side preparation for save\n    print("World is being saved")\nend)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"network-zones-and-areas",children:"Network Zones and Areas"}),"\n",(0,r.jsx)(n.p,{children:"The world can define network zones for different synchronization priorities:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Define a high-priority network zone\nlocal zone = TheWorld.net.components.netzone:AddZone("playerbase")\nzone:SetArea(x, z, radius)\nzone:SetPriority(NETWORK_PRIORITY.HIGH)\n\n-- Add entity to a specific zone\nTheWorld.net.components.netzone:AddEntityToZone(inst, "playerbase")\n\n-- Check if an entity is in a zone\nlocal in_zone = TheWorld.net.components.netzone:IsEntityInZone(inst, "playerbase")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"world-synchronization-best-practices",children:"World Synchronization Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use WorldState"}),": Access world conditions through ",(0,r.jsx)(n.code,{children:"TheWorld.state"})," rather than direct component access"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimize Shard RPCs"}),": Cross-shard communication should be minimized as it can be expensive"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prioritize Important Areas"}),": Set higher network priorities for player bases and important areas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Utilize Update Intervals"}),": Not all world data needs to sync at the same rate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Be Mindful of Scale"}),": World-level events reach all clients, so use them judiciously"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-weather-system-synchronization",children:"Example: Weather System Synchronization"}),"\n",(0,r.jsx)(n.p,{children:"Complete example of synchronizing a custom weather effect:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- In world prefab\nlocal function WorldPrefab()\n    local inst = CreateEntity()\n    \n    -- Network components\n    inst.entity:AddNetwork()\n    \n    -- Create networked variables for custom weather\n    inst.ashfall_active = net_bool(inst.GUID, "world.ashfall_active", "ashfall_changed")\n    inst.ashfall_intensity = net_float(inst.GUID, "world.ashfall_intensity", "ashfall_intensity_changed")\n    \n    -- Client listeners\n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("ashfall_changed", function()\n            if inst.ashfall_active:value() then\n                -- Start client-side ashfall effects\n                StartClientAshfallFX(inst.ashfall_intensity:value())\n            else\n                -- Stop client-side ashfall effects\n                StopClientAshfallFX()\n            end\n        end)\n        \n        inst:ListenForEvent("ashfall_intensity_changed", function()\n            if inst.ashfall_active:value() then\n                -- Update client-side effect intensity\n                UpdateClientAshfallIntensity(inst.ashfall_intensity:value())\n            end\n        end)\n        \n        return inst\n    end\n    \n    -- Server-side components and logic\n    inst:AddComponent("ashfallmanager")\n    \n    -- Connect component to network variables\n    local ashfall = inst.components.ashfallmanager\n    ashfall:SetCallbacks(\n        -- Start callback\n        function(intensity)\n            inst.ashfall_active:set(true)\n            inst.ashfall_intensity:set(intensity)\n        end,\n        -- Stop callback\n        function()\n            inst.ashfall_active:set(false)\n        end,\n        -- Update callback\n        function(intensity)\n            inst.ashfall_intensity:set(intensity)\n        end\n    )\n    \n    return inst\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);