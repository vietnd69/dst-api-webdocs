"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4039],{2144:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/node-types/condition-nodes","title":"Condition Nodes","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/node-types/condition-nodes.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/condition-nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"condition-nodes","title":"Condition Nodes","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Action Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/action-nodes"},"next":{"title":"Decorator Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes"}}');var s=t(4848),o=t(8453);const d={id:"condition-nodes",title:"Condition Nodes",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},a="Condition Nodes",r={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Condition Node States",id:"condition-node-states",level:2},{value:"Built-in Condition Nodes",id:"built-in-condition-nodes",level:2},{value:"IfNode",id:"ifnode",level:3},{value:"IfThenElseNode",id:"ifthenelsenode",level:3},{value:"AndNode",id:"andnode",level:3},{value:"OrNode",id:"ornode",level:3},{value:"NotNode",id:"notnode",level:3},{value:"Common Condition Tests",id:"common-condition-tests",level:2},{value:"Entity State Conditions",id:"entity-state-conditions",level:3},{value:"World State Conditions",id:"world-state-conditions",level:3},{value:"Spatial Conditions",id:"spatial-conditions",level:3},{value:"Creating Custom Condition Nodes",id:"creating-custom-condition-nodes",level:2},{value:"Example: Time-Based Condition Node",id:"example-time-based-condition-node",level:2},{value:"Example: Advanced Safety Condition",id:"example-advanced-safety-condition",level:2},{value:"Integration with Other Node Types",id:"integration-with-other-node-types",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"See also",id:"see-also",level:2}];function c(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"condition-nodes",children:"Condition Nodes"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"API Version: 619045"})}),"\n",(0,s.jsx)(e.p,{children:"Condition Nodes are specialized nodes in Don't Starve Together's behavior tree system that evaluate conditions and determine whether other nodes should execute. They act as decision points in AI behavior trees, enabling entities to make choices based on their state and environment."}),"\n",(0,s.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Basic condition node structure\nlocal MyCondition = Class(BehaviorNode, function(self, inst, fn)\n    BehaviorNode._ctor(self, "MyCondition")\n    self.inst = inst\n    self.fn = fn\nend)\n\nfunction MyCondition:Visit()\n    if self.status == READY then\n        if self.fn(self.inst) then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n\n-- Used in a behavior tree\nlocal root = PriorityNode(\n{\n    -- Execute child node only if condition is true\n    IfNode(function(inst) \n        return inst.components.health:GetPercent() < 0.5 \n    end,\n        RunAway(inst, "character", TUNING.SCARY_DIST, TUNING.SAFE_DIST)\n    ),\n    -- Otherwise, execute this branch\n    Wander(inst)\n}, 0.5) -- Run every 0.5 seconds\n'})}),"\n",(0,s.jsx)(e.h2,{id:"condition-node-states",children:"Condition Node States"}),"\n",(0,s.jsx)(e.p,{children:"Like other behavior nodes, condition nodes can be in one of several states:"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"State"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"READY"})}),(0,s.jsx)(e.td,{children:"Node is ready to be evaluated"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"SUCCESS"})}),(0,s.jsx)(e.td,{children:"Condition evaluated to true"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"FAILURE"})}),(0,s.jsx)(e.td,{children:"Condition evaluated to false"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"built-in-condition-nodes",children:"Built-in Condition Nodes"}),"\n",(0,s.jsx)(e.p,{children:"Don't Starve Together includes several pre-defined condition nodes:"}),"\n",(0,s.jsx)(e.h3,{id:"ifnode",children:"IfNode"}),"\n",(0,s.jsx)(e.p,{children:"The most common condition node that evaluates a condition and executes a child node if the condition is true."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Basic format\nIfNode(condition_fn, success_node)\n\n-- Example: Run away if health is low\nIfNode(function(inst) \n    return inst.components.health:GetPercent() < 0.25 \nend,\n    RunAway(inst, "character", 6, 8)\n)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"ifthenelsenode",children:"IfThenElseNode"}),"\n",(0,s.jsx)(e.p,{children:"Executes one node if the condition is true and another if it's false."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Basic format\nIfThenElseNode(condition_fn, success_node, failure_node)\n\n-- Example: Run away if health is low, otherwise attack\nIfThenElseNode(function(inst) \n    return inst.components.health:GetPercent() < 0.3 \nend,\n    RunAway(inst, "character", 6, 8),\n    ChaseAndAttack(inst, 10)\n)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"andnode",children:"AndNode"}),"\n",(0,s.jsx)(e.p,{children:"Succeeds only if all child nodes succeed."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Example: Multiple conditions must be true\nAndNode(\n    function(inst) return inst.components.health:GetPercent() > 0.5 end,\n    function(inst) return inst.components.hunger:GetPercent() > 0.25 end,\n    function(inst) return TheWorld.state.isday end\n)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"ornode",children:"OrNode"}),"\n",(0,s.jsx)(e.p,{children:"Succeeds if any child node succeeds."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Example: At least one condition must be true\nOrNode(\n    function(inst) return inst.components.health:GetPercent() < 0.25 end,\n    function(inst) return inst.components.combat:HasTarget() end,\n    function(inst) return TheWorld.state.isnight end\n)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"notnode",children:"NotNode"}),"\n",(0,s.jsx)(e.p,{children:"Inverts the result of its child node."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Example: Invert a condition\nNotNode(function(inst) \n    return TheWorld.state.isday \nend)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"common-condition-tests",children:"Common Condition Tests"}),"\n",(0,s.jsx)(e.p,{children:"Here are some commonly used conditions in Don't Starve Together AI:"}),"\n",(0,s.jsx)(e.h3,{id:"entity-state-conditions",children:"Entity State Conditions"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Health checks\nfunction(inst) return inst.components.health:GetPercent() < 0.3 end\n\n-- Hunger checks\nfunction(inst) return inst.components.hunger:GetPercent() < 0.25 end\n\n-- Sanity checks\nfunction(inst) return inst.components.sanity:GetPercent() < 0.5 end\n\n-- Combat target checks\nfunction(inst) return inst.components.combat:HasTarget() end\n\n-- Inventory checks\nfunction(inst) return inst.components.inventory:Has("log", 1) end\n\n-- Tag checks\nfunction(inst) return inst:HasTag("player") end\n'})}),"\n",(0,s.jsx)(e.h3,{id:"world-state-conditions",children:"World State Conditions"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Time of day checks\nfunction(inst) return TheWorld.state.isday end\nfunction(inst) return TheWorld.state.isdusk end\nfunction(inst) return TheWorld.state.isnight end\n\n-- Season checks\nfunction(inst) return TheWorld.state.issummer end\nfunction(inst) return TheWorld.state.iswinter end\nfunction(inst) return TheWorld.state.isspring end\nfunction(inst) return TheWorld.state.isautumn end\n\n-- Weather checks\nfunction(inst) return TheWorld.state.israining end\nfunction(inst) return TheWorld.state.issnowing end\n"})}),"\n",(0,s.jsx)(e.h3,{id:"spatial-conditions",children:"Spatial Conditions"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Distance to target\nfunction(inst) \n    local target = FindClosestPlayerInRange(inst.Transform:GetWorldPosition(), 20)\n    return target ~= nil and inst:GetDistanceSqToInst(target) < 100\nend\n\n-- Check if on specific terrain\nfunction(inst)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    local tile = TheWorld.Map:GetTileAtPoint(x, y, z)\n    return tile == GROUND.GRASS or tile == GROUND.SAVANNA\nend\n"})}),"\n",(0,s.jsx)(e.h2,{id:"creating-custom-condition-nodes",children:"Creating Custom Condition Nodes"}),"\n",(0,s.jsx)(e.p,{children:"To create a custom condition node:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Derive from BehaviorNode"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'local CustomCondition = Class(BehaviorNode, function(self, inst, ...)\n    BehaviorNode._ctor(self, "CustomCondition")\n    self.inst = inst\n    -- Store other parameters\nend)\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Implement Visit function"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"function CustomCondition:Visit()\n    if self.status == READY then\n        -- Evaluate condition and set status\n        if SomeCondition() then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"example-time-based-condition-node",children:"Example: Time-Based Condition Node"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- A condition node that succeeds at certain times of day\nlocal TimeCondition = Class(BehaviorNode, function(self, inst, daytime, dusktime, nighttime)\n    BehaviorNode._ctor(self, "TimeCondition")\n    self.inst = inst\n    self.daytime = daytime or false\n    self.dusktime = dusktime or false\n    self.nighttime = nighttime or false\nend)\n\nfunction TimeCondition:Visit()\n    if self.status == READY then\n        if (TheWorld.state.isday and self.daytime) or\n           (TheWorld.state.isdusk and self.dusktime) or\n           (TheWorld.state.isnight and self.nighttime) then\n            self.status = SUCCESS\n        else\n            self.status = FAILURE\n        end\n    end\n    \n    return self.status\nend\n\n-- Usage in a behavior tree\nlocal behavior = PriorityNode(\n{\n    IfNode(TimeCondition(inst, false, false, true),  -- Only true at night\n        DoAction(inst, function()\n            -- Do night-specific behavior\n            return true\n        end)\n    ),\n    IfNode(TimeCondition(inst, true, false, false),  -- Only true during day\n        DoAction(inst, function()\n            -- Do day-specific behavior\n            return true\n        end)\n    ),\n}, 0.5)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"example-advanced-safety-condition",children:"Example: Advanced Safety Condition"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- A condition that evaluates if an entity is in danger\nlocal SafetyCondition = Class(BehaviorNode, function(self, inst, danger_dist)\n    BehaviorNode._ctor(self, "SafetyCondition")\n    self.inst = inst\n    self.danger_dist = danger_dist or 10\nend)\n\nfunction SafetyCondition:Visit()\n    if self.status == READY then\n        -- Check for threats\n        local x, y, z = self.inst.Transform:GetWorldPosition()\n        local threats = {}\n        \n        -- Check for monsters\n        local ents = TheSim:FindEntities(x, y, z, self.danger_dist, {"monster"})\n        for _, ent in ipairs(ents) do\n            if ent ~= self.inst and ent:IsValid() and\n               ent.components.combat and ent.components.combat:TargetIs(self.inst) then\n                table.insert(threats, ent)\n            end\n        end\n        \n        -- Check for fires\n        local fires = TheSim:FindEntities(x, y, z, self.danger_dist, {"fire"})\n        for _, fire in ipairs(fires) do\n            if fire:IsValid() then\n                table.insert(threats, fire)\n            end\n        end\n        \n        -- Set result based on threats\n        if #threats > 0 then\n            self.status = FAILURE  -- Not safe\n        else\n            self.status = SUCCESS  -- Safe\n        end\n    end\n    \n    return self.status\nend\n'})}),"\n",(0,s.jsx)(e.h2,{id:"integration-with-other-node-types",children:"Integration with Other Node Types"}),"\n",(0,s.jsx)(e.p,{children:"Condition nodes work with other node types to create complex behaviors:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Complex behavior tree with conditions\nlocal behavior = PriorityNode(\n{\n    -- If health is low, find food\n    IfNode(function() \n        return inst.components.health:GetPercent() < 0.5 \n    end,\n        PriorityNode({\n            -- First try to find healing items\n            FindAndEatFood(inst, {"healing"}),\n            -- Otherwise run away from threats\n            RunAway(inst, "monster", 10, 15)\n        }, 0.5)\n    ),\n    \n    -- If hungry, find food\n    IfNode(function() \n        return inst.components.hunger:GetPercent() < 0.25 \n    end,\n        FindAndEatFood(inst)\n    ),\n    \n    -- If it\'s night, go home\n    IfNode(function() \n        return TheWorld.state.isnight \n    end,\n        GoHome(inst)\n    ),\n    \n    -- Otherwise wander around\n    Wander(inst)\n}, 0.5)\n'})}),"\n",(0,s.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Keep condition functions simple and efficient"}),"\n",(0,s.jsx)(e.li,{children:"Cache expensive calculations when possible"}),"\n",(0,s.jsx)(e.li,{children:"Use simpler conditions for frequently evaluated nodes"}),"\n",(0,s.jsx)(e.li,{children:"Consider using timeouts for conditions that don't need to be checked every frame"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/brain",children:"Brain"})," - For brain implementation using behavior trees"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/action-nodes",children:"Action Nodes"})," - For nodes that perform actions based on conditions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes",children:"Priority Nodes"})," - For selecting between different actions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes",children:"Sequence Nodes"})," - For executing actions in sequence"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes",children:"Decorator Nodes"})," - For modifying node behavior"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>d,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function d(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:d(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);