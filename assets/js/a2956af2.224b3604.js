"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[92547],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(96540);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}},36091:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"game-scripts/core-systems/user-interface/frontend/splitscreenutils-pc","title":"Split Screen Utils PC","description":"PC-specific split screen utility functions and instance management for Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/user-interface/frontend/splitscreenutils_pc.md","sourceDirName":"game-scripts/core-systems/user-interface/frontend","slug":"/game-scripts/core-systems/user-interface/frontend/splitscreenutils-pc","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/splitscreenutils-pc","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"splitscreenutils-pc","title":"Split Screen Utils PC","description":"PC-specific split screen utility functions and instance management for Don\'t Starve Together","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Loading Tips Data","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/loadingtipsdata"},"next":{"title":"Writeables","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/writeables"}}');var t=s(74848),l=s(28453);const r={id:"splitscreenutils-pc",title:"Split Screen Utils PC",description:"PC-specific split screen utility functions and instance management for Don't Starve Together",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},c="Split Screen Utils PC",a={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Platform Compatibility",id:"platform-compatibility",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Constants",id:"constants",level:2},{value:"Instances",id:"instances",level:3},{value:"Functions",id:"functions",level:2},{value:"IsGameInstance(instance_id)",id:"is-game-instance",level:3},{value:"IsSplitScreen()",id:"is-split-screen",level:3},{value:"HaveMultipleViewports()",id:"have-multiple-viewports",level:3},{value:"Platform Differences",id:"platform-differences",level:2},{value:"PC Build Behavior",id:"pc-build-behavior",level:3},{value:"Console Build Reference",id:"console-build-reference",level:3},{value:"Integration Notes",id:"integration-notes",level:2},{value:"Instance Management",id:"instance-management",level:3},{value:"Merge Conflict Reduction",id:"merge-conflict-reduction",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Technical Notes",id:"technical-notes",level:2},{value:"Build System Integration",id:"build-system-integration",level:3},{value:"Memory Efficiency",id:"memory-efficiency",level:3},{value:"Future Considerations",id:"future-considerations",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"split-screen-utils-pc",children:"Split Screen Utils PC"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"splitscreenutils_pc"})," module provides PC-specific split screen utility functions and instance management. This module only functions on PC builds and is designed to reduce merge conflicts between PC and console builds. On PC, split screen functionality is disabled, and this module provides stub implementations."]}),"\n",(0,t.jsx)(n.h2,{id:"platform-compatibility",children:"Platform Compatibility"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"PC Only:"})," This module only loads on PC builds. It returns early if running on console platforms."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if IsConsole() then\n    return\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Check if current instance is a game instance\nlocal isGame = IsGameInstance(Instances.Player1)\n\n-- Check split screen status (always false on PC)\nlocal hasSplitScreen = IsSplitScreen()\n\n-- Check multiple viewport support (always false on PC)\nlocal hasMultipleViewports = HaveMultipleViewports()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,t.jsx)(n.h3,{id:"instances",children:"Instances"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Value:"})," Table containing instance type identifiers"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDefines the different instance types available in the game for instance identification and management."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"Instances = {\n    Player1     = 0,\n    Player2     = 1,\n    Server      = 2,\n    CaveServer  = 3,\n    Overlay     = 4,\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Instance Types:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Player1"})," (0): Primary player instance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Player2"})," (1): Secondary player instance (split screen)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Server"})," (2): Main server instance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CaveServer"})," (3): Cave server instance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Overlay"})," (4): Overlay interface instance"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"is-game-instance",children:"IsGameInstance(instance_id)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDetermines whether the specified instance ID represents a game instance (as opposed to server or overlay instances)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"instance_id"})," (number): The instance identifier to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["(boolean): ",(0,t.jsx)(n.code,{children:"true"})," if the instance is Player1 (primary game instance), ",(0,t.jsx)(n.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Check if Player1 instance is a game instance\nlocal isGame = IsGameInstance(Instances.Player1)  -- returns true\n\n-- Check if Server instance is a game instance\nlocal isServerGame = IsGameInstance(Instances.Server)  -- returns false\n\n-- Check if Player2 instance is a game instance\nlocal isPlayer2Game = IsGameInstance(Instances.Player2)  -- returns false\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Implementation Details:"}),"\nOnly ",(0,t.jsx)(n.code,{children:"Instances.Player1"})," (value 0) is considered a game instance on PC builds."]}),"\n",(0,t.jsx)(n.h3,{id:"is-split-screen",children:"IsSplitScreen()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns whether split screen mode is currently active. On PC builds, this always returns ",(0,t.jsx)(n.code,{children:"false"})," as split screen is not supported."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["(boolean): Always ",(0,t.jsx)(n.code,{children:"false"})," on PC builds"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if split screen is active\nlocal splitScreenActive = IsSplitScreen()  -- always returns false on PC\n\nif not IsSplitScreen() then\n    print("Single player mode")\nend\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Platform Note:"}),"\nThis is a stub implementation for PC. Console builds may have different behavior."]}),"\n",(0,t.jsx)(n.h3,{id:"have-multiple-viewports",children:"HaveMultipleViewports()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns whether the system supports multiple viewports for rendering. On PC builds, this always returns ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["(boolean): Always ",(0,t.jsx)(n.code,{children:"false"})," on PC builds"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if multiple viewports are supported\nlocal multiViewport = HaveMultipleViewports()  -- always returns false on PC\n\nif not HaveMultipleViewports() then\n    print("Single viewport rendering")\nend\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Usage Context:"}),"\nThis function is typically used for optimizing rendering systems and UI layout decisions based on viewport capabilities."]}),"\n",(0,t.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,t.jsx)(n.h3,{id:"pc-build-behavior",children:"PC Build Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Split screen functionality is disabled"}),"\n",(0,t.jsx)(n.li,{children:"Only single player instance (Player1) is considered a game instance"}),"\n",(0,t.jsx)(n.li,{children:"Multiple viewports are not supported"}),"\n",(0,t.jsxs)(n.li,{children:["All split screen related functions return ",(0,t.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"console-build-reference",children:"Console Build Reference"}),"\n",(0,t.jsxs)(n.p,{children:["For console-specific split screen functionality, see the main ",(0,t.jsx)(n.code,{children:"splitscreenutils.lua"})," module which contains additional functions and different behavior patterns."]}),"\n",(0,t.jsx)(n.h2,{id:"integration-notes",children:"Integration Notes"}),"\n",(0,t.jsx)(n.h3,{id:"instance-management",children:"Instance Management"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Instances"})," table provides a standardized way to identify different types of game instances:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Example usage in instance-specific code\nif IsGameInstance(current_instance) then\n    -- Handle game-specific logic\n    InitializeGameplay()\nelse\n    -- Handle server or overlay logic\n    InitializeServerSystems()\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"merge-conflict-reduction",children:"Merge Conflict Reduction"}),"\n",(0,t.jsx)(n.p,{children:"This module exists primarily to maintain code compatibility between PC and console builds. The stub implementations ensure that code referencing split screen functionality will compile and run on PC without modification."}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./splitscreenutils.md",children:"Split Screen Utils"}),": Main split screen utilities (console builds)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./platformpostload.md",children:"Platform Postload"}),": Platform-specific initialization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/frontend",children:"Frontend"}),": User interface management system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./input.md",children:"Input"}),": Input handling for different instance types"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"technical-notes",children:"Technical Notes"}),"\n",(0,t.jsx)(n.h3,{id:"build-system-integration",children:"Build System Integration"}),"\n",(0,t.jsxs)(n.p,{children:["The early return mechanism (",(0,t.jsx)(n.code,{children:"if IsConsole() then return end"}),") ensures clean separation between PC and console codepaths:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Module only executes on PC builds\nif IsConsole() then\n    return  -- Exit early on console platforms\nend\n\n-- PC-specific implementation follows\n"})}),"\n",(0,t.jsx)(n.h3,{id:"memory-efficiency",children:"Memory Efficiency"}),"\n",(0,t.jsx)(n.p,{children:"The stub implementations provide minimal overhead while maintaining API compatibility across platforms."}),"\n",(0,t.jsx)(n.h3,{id:"future-considerations",children:"Future Considerations"}),"\n",(0,t.jsx)(n.p,{children:"This module structure allows for potential PC split screen support in future builds without breaking existing code that references these functions."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);