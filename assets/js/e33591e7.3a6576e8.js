"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7541],{5656:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api-vanilla/components/trader","title":"Trader","description":"The Trader component allows entities to participate in trading interactions, accepting items from players or other entities. It manages trade acceptance, rejection, and the resulting effects of successful trades.","source":"@site/docs/api-vanilla/components/trader.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/trader","permalink":"/dst-api-webdocs/docs/api-vanilla/components/trader","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":29,"frontMatter":{"id":"trader","title":"Trader","sidebar_position":29,"version":619045},"sidebar":"docs","previous":{"title":"Stackable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/stackable"},"next":{"title":"Armor Component","permalink":"/dst-api-webdocs/docs/api-vanilla/components/armor"}}');var i=t(4848),a=t(8453);const s={id:"trader",title:"Trader",sidebar_position:29,version:619045},o="Trader Component",d={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Trade Configuration",id:"trade-configuration",level:3},{value:"Managing Trades",id:"managing-trades",level:3},{value:"Trade Types",id:"trade-types",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"See also",id:"see-also",level:2},{value:"Example: Simple Item Trader",id:"example-simple-item-trader",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"trader-component",children:"Trader Component"})}),"\n",(0,i.jsx)(n.p,{children:"The Trader component allows entities to participate in trading interactions, accepting items from players or other entities. It manages trade acceptance, rejection, and the resulting effects of successful trades."}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Add a trader component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("trader")\n\n-- Configure the trader component\nlocal trader = entity.components.trader\ntrader:SetAcceptTest(function(inst, item)\n    return item.prefab == "goldnugget"\nend)\ntrader.onaccept = function(inst, giver, item)\n    giver.components.inventory:GiveItem(SpawnPrefab("cutstone"))\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"accepttest"})}),(0,i.jsx)(n.td,{children:"Function"}),(0,i.jsx)(n.td,{children:"Function that tests if an item is acceptable for trade"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onaccept"})}),(0,i.jsx)(n.td,{children:"Function"}),(0,i.jsx)(n.td,{children:"Callback when a trade is accepted"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"onrefuse"})}),(0,i.jsx)(n.td,{children:"Function"}),(0,i.jsx)(n.td,{children:"Callback when a trade is refused"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteitemonaccept"})}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"Whether to delete the traded item on acceptance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"trading"})}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"Whether the entity is currently trading"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"enabled"})}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"Whether trading is currently enabled"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"gold_value"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Value of this entity for gold-based trades"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"rocktribute_value"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Value of this entity for rock tributes"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(n.h3,{id:"trade-configuration",children:"Trade Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set a test function for accepting trades\ntrader:SetAcceptTest(function(inst, item, giver)\n    -- Only accept gold nuggets\n    return item.prefab == "goldnugget"\nend)\n\n-- Set callbacks for trade outcomes\ntrader.onaccept = function(inst, giver, item)\n    -- Do something when trade is accepted\n    local reward = SpawnPrefab("blueprint")\n    giver.components.inventory:GiveItem(reward)\nend\n\ntrader.onrefuse = function(inst, giver, item)\n    -- Do something when trade is refused\n    inst:PushEvent("refusetrade")\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"managing-trades",children:"Managing Trades"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Enable or disable trading\ntrader:Enable(true)\n\n-- Check if an item is acceptable\nlocal will_accept = trader:IsTryingToTradeWithMe(giver, item)\n\n-- Manually accept a trade\ntrader:AcceptGift(giver, item)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"trade-types",children:"Trade Types"}),"\n",(0,i.jsx)(n.p,{children:"Various types of trading interactions are possible:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Item for Item"}),": Giving an item and receiving another in return"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Item for Service"}),": Giving an item to trigger an effect (like statues)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NPC Trading"}),": More complex trade interactions with characters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tributes"}),": Giving items to appease entities or gain bonuses"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,i.jsx)(n.p,{children:"The Trader component often works with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Inventory"})," - For managing items involved in trades"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Talker"})," - For dialogue during trading"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Named"})," - For naming trade partners"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SpawnPrefab"})," - For creating reward items"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ItemDropper"})," - For dropping traded items"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/inventory",children:"Inventory Component"})," - For managing items involved in trades"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/other-components",children:"Talker Component"})," - For dialogue during trading"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/lootdropper",children:"LootDropper Component"})," - For dropping items as rewards"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/combat",children:"Combat Component"})," - For hostile traders that may attack"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/inspectable",children:"Inspectable Component"})," - For examining traders"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-simple-item-trader",children:"Example: Simple Item Trader"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function MakeItemTrader()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Make it a trader\n    inst:AddComponent("trader")\n    \n    -- Configure trading\n    local trader = inst.components.trader\n    \n    -- Accept test function\n    trader:SetAcceptTest(function(inst, item)\n        -- Only accept gold nuggets and gems\n        return item.prefab == "goldnugget" or item:HasTag("gem")\n    end)\n    \n    -- When trade is accepted\n    trader.onaccept = function(inst, giver, item)\n        -- Different rewards based on what was given\n        local reward = nil\n        \n        if item.prefab == "goldnugget" then\n            -- Gold gets a random tool\n            local tools = {"axe", "pickaxe", "shovel"}\n            reward = SpawnPrefab(tools[math.random(#tools)])\n        elseif item:HasTag("gem") then\n            -- Gems get a random magical item\n            local magic_items = {"icestaff", "firestaff", "telestaff"}\n            reward = SpawnPrefab(magic_items[math.random(#magic_items)])\n        end\n        \n        if reward ~= nil then\n            giver.components.inventory:GiveItem(reward)\n            -- Play success animation\n            inst.AnimState:PlayAnimation("happy")\n        end\n    end\n    \n    -- When trade is refused\n    trader.onrefuse = function(inst, giver, item)\n        -- Play refuse animation\n        inst.AnimState:PlayAnimation("refuse")\n        -- Maybe say something\n        if inst.components.talker ~= nil then\n            inst.components.talker:Say("I don\'t want that!")\n        end\n    end\n    \n    return inst\nend\n\n-- Example of a shop-like trader\nlocal function MakeShopKeeper()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Make it a trader\n    inst:AddComponent("trader")\n    \n    -- Configure pricing\n    local prices = {\n        spear = 3,       -- 3 gold for a spear\n        armor = 5,       -- 5 gold for armor\n        heatrock = 2,    -- 2 gold for a heat rock\n    }\n    \n    -- Accept test function\n    inst.components.trader:SetAcceptTest(function(inst, item, giver)\n        -- Only accept gold\n        if item.prefab ~= "goldnugget" then\n            return false\n        end\n        \n        -- Check if player has selected an item to buy\n        if inst.itemtobuy == nil then\n            return false\n        end\n        \n        -- Check if they have enough gold\n        local gold_count = 0\n        if item.components.stackable ~= nil then\n            gold_count = item.components.stackable:StackSize()\n        else\n            gold_count = 1\n        end\n        \n        return gold_count >= prices[inst.itemtobuy]\n    end)\n    \n    -- When trade is accepted\n    inst.components.trader.onaccept = function(inst, giver, item)\n        -- Create the purchased item\n        local purchase = SpawnPrefab(inst.itemtobuy)\n        giver.components.inventory:GiveItem(purchase)\n        \n        -- Reset shop state\n        inst.itemtobuy = nil\n    end\n    \n    -- Add talking for the shop\n    inst:AddComponent("talker")\n    \n    -- Function to show wares\n    inst.ShowWares = function(inst, giver)\n        inst.components.talker:Say("I sell spears (3 gold), armor (5 gold), and heat rocks (2 gold).")\n    end\n    \n    return inst\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);