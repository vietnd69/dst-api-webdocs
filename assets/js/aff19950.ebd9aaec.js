"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2664],{8392:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api-vanilla/global-objects/theinventory","title":"TheInventory","description":"TheInventory is the global object that manages the player\'s item collection, including character skins, clothing items, and other inventory-related functionality. It primarily deals with Steam inventory items and skins in Don\'t Starve Together.","source":"@site/docs/api-vanilla/global-objects/theinventory.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/theinventory","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theinventory","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"theinventory","title":"TheInventory","sidebar_position":6,"last_updated":"2023-07-06T00:00:00.000Z"}}');var a=i(4848),s=i(8453);const l={id:"theinventory",title:"TheInventory",sidebar_position:6,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="TheInventory",r={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Skin Management",id:"skin-management",level:2},{value:"Item Classification",id:"item-classification",level:2},{value:"Virtual Currency and Rewards",id:"virtual-currency-and-rewards",level:2},{value:"Collection Interfaces",id:"collection-interfaces",level:2},{value:"Trading and Gifting",id:"trading-and-gifting",level:2},{value:"Item Appearance",id:"item-appearance",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"theinventory",children:"TheInventory"})}),"\n",(0,a.jsx)(n.p,{children:"TheInventory is the global object that manages the player's item collection, including character skins, clothing items, and other inventory-related functionality. It primarily deals with Steam inventory items and skins in Don't Starve Together."}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if a player owns a specific item (skin)\nlocal has_skin = TheInventory:CheckOwnership("wilson_formal_skin")\n\n-- Check if client has ownership of an item\nlocal has_item = TheInventory:CheckClientOwnership(userid, item_type)\n\n-- Check if an item (skin) exists\nlocal skin_exists = TheInventory:CheckItemExists("wilson_formal_skin")\n\n-- Get the total count of items owned\nlocal item_count = TheInventory:GetOwnedItemCount()\n\n-- Check ownership of virtual items (like rewards)\nlocal has_virtual_item = TheInventory:CheckOwnershipGetLatest(item_type)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"skin-management",children:"Skin Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get all owned skins for a specific item\nlocal skins = TheInventory:GetAllOwnedSkinsForItem("backpack")\n\n-- Check if a skin is valid for a specific item\nlocal is_valid = TheInventory:CheckValidSkinForItem("backpack_musicalchest_skin", "backpack")\n\n-- Get the last used skin for an item\nlocal last_skin = TheInventory:GetLastUsedSkinForItem("backpack")\n\n-- Mark a skin as used for an item\nTheInventory:SetLastUsedSkinForItem("backpack", "backpack_musicalchest_skin")\n\n-- Get a list of recent skins\nlocal recent_skins = TheInventory:GetRecentSkins()\n\n-- Check if a skin is a character skin\nlocal is_character_skin = TheInventory:IsCharacterSkin("wilson_formal_skin")\n\n-- Get a list of all owned character skins\nlocal character_skins = TheInventory:GetOwnedCharacterSkins()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"item-classification",children:"Item Classification"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get the item type of a skin\nlocal item_type = TheInventory:GetItemType("wilson_formal_skin")\n\n-- Get the rarity value of a skin\nlocal rarity = TheInventory:GetRarityValueOfItem("wilson_formal_skin")\n-- 0: Common, 1: Classy, 2: Spiffy, 3: Distinguished, 4: Elegant, 5: Event\n\n-- Check if a skin belongs to an event\nlocal is_event_item = TheInventory:GetIsItemEventItem("wilson_formal_skin")\n\n-- Get the event name for an event item\nlocal event_name = TheInventory:GetItemEventName("wilson_formal_skin")\n\n-- Check if an item is a DLC item\nlocal is_dlc_item = TheInventory:IsDLCItem("wilson_formal_skin")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"virtual-currency-and-rewards",children:"Virtual Currency and Rewards"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get available virtual currency\nlocal currency = TheInventory:GetVirtualIAPCurrency()\n\n-- Get current sale information\nlocal sale_info = TheInventory:GetSalesInfo()\n\n-- Check if a specific sale is active\nlocal sale_active = TheInventory:IsItemOnSale("wilson_formal_skin")\n\n-- Get the discount percentage for an item\nlocal discount = TheInventory:GetItemDiscountPercentage("wilson_formal_skin")\n\n-- Get progression rewards\nlocal rewards = TheInventory:GetPersistentCompletionRewards(key)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"collection-interfaces",children:"Collection Interfaces"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get all collections\nlocal collections = TheInventory:GetAllCollections()\n\n-- Get owned items in a collection\nlocal owned_items = TheInventory:GetOwnedItemsInCollection(collection_name)\n\n-- Get all items in a collection\nlocal all_items = TheInventory:GetAllItemsInCollection(collection_name)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"trading-and-gifting",children:"Trading and Gifting"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if we can trade with a player\nlocal can_trade = TheInventory:CanTradeWithUser(user)\n\n-- Check if an item is tradeable\nlocal is_tradeable = TheInventory:IsItemTradable("wilson_formal_skin")\n\n-- Check if an item is giftable\nlocal is_giftable = TheInventory:IsItemGiftable("wilson_formal_skin")\n\n-- Start a trade with a user\nTheInventory:StartTrade(user)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"item-appearance",children:"Item Appearance"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get the display name of a skin\nlocal display_name = TheInventory:GetDisplayNameForItem("wilson_formal_skin")\n\n-- Get the base clothing type\nlocal clothing_type = TheInventory:GetBaseItemFromClothingItem("wilson_formal_skin")\n\n-- Check if an item is clothing\nlocal is_clothing = TheInventory:IsItemIsClothing("wilson_formal_skin")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Client-Side Only"}),": Most TheInventory functions only work on the client, not on dedicated servers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Steam Integration"}),": TheInventory primarily interacts with Steam inventory, so offline mode may have limited functionality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Ownership Verification"}),": Always check ownership before applying skins to avoid errors"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance"}),": Avoid excessive inventory checks in frequently called functions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Item Validity"}),": Always verify if skins are valid for specific items to prevent errors"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Skin Selection"}),": Allowing players to choose from their owned skins"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Inventory Management"}),": Displaying owned items and skins in UI"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Currency Systems"}),": Integrating with virtual currency and rewards"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Collection Tracking"}),": Showing progress in completing collections"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Trading Systems"}),": Implementing item trading functionality"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var t=i(6540);const a={},s=t.createContext(a);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);