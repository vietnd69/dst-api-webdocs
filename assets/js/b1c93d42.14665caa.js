"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8727],{980:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>A,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-vanilla/core/constants","title":"Constants","description":"Last Update: 2023-08-01","source":"@site/docs/api-vanilla/core/constants.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/constants","permalink":"/dst-api-webdocs/docs/api-vanilla/core/constants","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"id":"constants","title":"Constants","sidebar_position":11,"last_updated":"2023-08-01T00:00:00.000Z"}}');var t=s(4848),i=s(8453);const o={id:"constants",title:"Constants",sidebar_position:11,last_updated:new Date("2023-08-01T00:00:00.000Z")},l="Constants",r={},d=[{value:"Animation Constants",id:"animation-constants",level:2},{value:"Collision Groups",id:"collision-groups",level:2},{value:"Camera Constants",id:"camera-constants",level:2},{value:"UI Constants",id:"ui-constants",level:2},{value:"Weather Constants",id:"weather-constants",level:2},{value:"Damage Types",id:"damage-types",level:2},{value:"Tag Constants",id:"tag-constants",level:2},{value:"Using Constants in Mods",id:"using-constants-in-mods",level:2},{value:"TUNING Constants",id:"tuning-constants",level:2},{value:"Customizing Constants in Mods",id:"customizing-constants-in-mods",level:2}];function c(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"Last Update: 2023-08-01"})}),"\n",(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"constants",children:"Constants"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"API Version: 624447"})}),"\n",(0,t.jsx)(e.p,{children:"Don't Starve Together has many predefined constants and values used throughout the codebase. Below are the important constant groups and how to use them."}),"\n",(0,t.jsx)(e.h2,{id:"animation-constants",children:"Animation Constants"}),"\n",(0,t.jsx)(e.p,{children:"Constants related to animation and display:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Animation Orientation\nANIM_ORIENTATION = {\n    BillBoard = 0,        -- Always faces the camera\n    OnGround = 1,         -- Sits on the ground, can rotate\n    OnGroundFixed = 2     -- Fixed on the ground\n}\n\n-- Animation Sort Order (Z-ordering)\nANIM_SORT_ORDER = {\n    OCEAN_UNDERWATER = 0,\n    OCEAN_WAVES = 1,\n    OCEAN_BOAT = 2,\n    OCEAN_BOAT_BUMPERS = 3,\n    OCEAN_SKYSHADOWS = 4,\n    OCEAN_WHIRLPORTAL = 1\n}\n\n-- Animation Sort Order Below Ground\nANIM_SORT_ORDER_BELOW_GROUND = {\n    UNDERWATER = 0,\n    BOAT_TRAIL = 1,\n    BOAT_LIP = 2,\n    UNUSED = 3\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"collision-groups",children:"Collision Groups"}),"\n",(0,t.jsx)(e.p,{children:"Collision groups define how entities physically interact with each other:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"COLLISION = {\n    GROUND = 32,\n    BOAT_LIMITS = 64,\n    LAND_OCEAN_LIMITS = 128,     -- Physics wall between land and ocean\n    LIMITS = 128 + 64,           -- BOAT_LIMITS + LAND_OCEAN_LIMITS\n    ITEMS = 256,\n    CHARACTERS = 1024,\n    FLYERS = 2048,\n    OBSTACLES = 512,\n    GIANTS = 16384               -- Collide with large obstacles\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"camera-constants",children:"Camera Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"CAMERASHAKE = {\n    FULL = 0,      -- Shake entire camera\n    SIDE = 1,      -- Shake horizontally\n    VERTICAL = 2   -- Shake vertically\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"ui-constants",children:"UI Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Anchor positions for UI elements\nANCHOR_MIDDLE = 0\nANCHOR_LEFT = 1\nANCHOR_RIGHT = 2\nANCHOR_TOP = 1\nANCHOR_BOTTOM = 2\n\n-- Background colors for UI\nBGCOLOURS = {\n    FULL = RGB(255, 255, 255),\n    HALF = RGB(128, 128, 128),\n    GREY = RGB(75, 75, 75),\n    RED = RGB(255, 89, 46),\n    YELLOW = RGB(255, 196, 45),\n    PURPLE = RGB(184, 87, 198)\n}\n\n-- Blend modes for rendering\nBLENDMODE = {\n    Disabled = 0,\n    AlphaBlended = 1,\n    Additive = 2,\n    Premultiplied = 3,\n    InverseAlpha = 4,\n    AlphaAdditive = 5,\n    VFXTest = 6\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"weather-constants",children:"Weather Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'SEASONS = {\n    AUTUMN = "autumn",\n    WINTER = "winter",\n    SPRING = "spring",\n    SUMMER = "summer"\n}\n\nPRECIPITATION = {\n    NONE = "none",\n    RAIN = "rain",\n    SNOW = "snow"\n}\n\nMOISTURE_SOURCES = {\n    PRECIP = "precipitation",\n    FLOOD = "flood",\n    OCEAN = "ocean",\n    PUDDLE = "puddle",\n    WATER_SPRAY = "water_spray"\n}\n\nGROUND_OVERLAYS = {\n    PUDDLES = "puddles_overlay",\n    SNOW = "snow_overlay"\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"damage-types",children:"Damage Types"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'DAMAGETYPES = {\n    PHYSICAL = "physical",\n    FIRE = "fire",\n    STARVATION = "starvation",\n    POISON = "poison",\n    ELECTRIC = "electric",\n    COLD = "cold",\n    DARKNESS = "darkness"\n}\n\nTUNING.FIRE_DAMAGE = 3\nTUNING.POISON_DAMAGE = 1.5\nTUNING.ELECTRIC_DAMAGE = 2\nTUNING.COLD_DAMAGE = 1\n'})}),"\n",(0,t.jsx)(e.h2,{id:"tag-constants",children:"Tag Constants"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Character tags\nPLAYER_TAGS = { "player", "character" }\nSANITY_TAGS = { "crazy", "insane" }\nHEALTH_TAGS = { "injured", "wounded" }\n\n-- Entity state tags\nBURNABLE_TAGS = { "canburnable", "burnable" }\nFREEZABLE_TAGS = { "canfreeze", "freezable" }\nEDIBLE_TAGS = { "edible_VEGGIE", "edible_MEAT", "edible_ELEMENTAL" }\n'})}),"\n",(0,t.jsx)(e.h2,{id:"using-constants-in-mods",children:"Using Constants in Mods"}),"\n",(0,t.jsx)(e.p,{children:"Constants can be used in your mod:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Use in modmain.lua\nAddPrefabPostInit("yourprefab", function(inst)\n    -- Add collision to entity\n    local physics = inst.entity:AddPhysics()\n    physics:SetCollisionGroup(COLLISION.OBSTACLES)\n    physics:CollidesWith(COLLISION.CHARACTERS + COLLISION.ITEMS)\n    \n    -- Set animation orientation\n    local anim = inst.entity:GetAnimState()\n    anim:SetOrientation(ANIM_ORIENTATION.OnGround)\n    anim:SetSortOrder(ANIM_SORT_ORDER.OCEAN_BOAT)\n    \n    -- Assign damage type\n    inst.components.combat:SetDefaultDamage(TUNING.FIRE_DAMAGE)\nend)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"tuning-constants",children:"TUNING Constants"}),"\n",(0,t.jsx)(e.p,{children:"TUNING is a special table containing game balance values that are widely used:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Typical values in TUNING\nTUNING = {\n    -- Character stats\n    WILSON_HEALTH = 150,\n    WILSON_HUNGER = 150,\n    WILSON_SANITY = 200,\n    \n    -- Damage values\n    SPEAR_DAMAGE = 34,\n    AXE_DAMAGE = 27,\n    \n    -- Hunger drain\n    HUNGER_RATE = 0.75,\n    \n    -- Item properties\n    STACK_SIZE_LARGEITEM = 10,\n    STACK_SIZE_MEDITEM = 20,\n    STACK_SIZE_SMALLITEM = 40,\n    \n    -- Light values\n    TORCH_LIGHT = 2.5,\n    CAMPFIRE_LIGHT = 3.0,\n    \n    -- Creature behavior\n    ANTLION_DEAGGRO_DIST = 30  -- Distance at which Antlion deaggros (Added in API 624447)\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"customizing-constants-in-mods",children:"Customizing Constants in Mods"}),"\n",(0,t.jsx)(e.p,{children:"You can override constants in your mod:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua\nTUNING.WILSON_HEALTH = 200     -- Increase Wilson\'s health\nTUNING.SPEAR_DAMAGE = 40       -- Increase spear damage\n\n-- Add new constants\nTUNING.MY_MOD_CONSTANT = 123\n\n-- Override values in existing tables\nSEASONS.MODSEASON = "modseason"\n'})})]})}function A(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>l});var a=s(6540);const t={},i=a.createContext(t);function o(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);