"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[55233],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(96540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},52638:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"game-scripts/core-systems/character-systems/customization/skins-defs-data","title":"Skins Definitions Data","description":"Auto-generated skin definitions, configurations, and asset mappings for the inventory system","source":"@site/docs/game-scripts/core-systems/character-systems/customization/skins_defs_data.md","sourceDirName":"game-scripts/core-systems/character-systems/customization","slug":"/game-scripts/core-systems/character-systems/customization/skins-defs-data","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skins-defs-data","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"skins-defs-data","title":"Skins Definitions Data","description":"Auto-generated skin definitions, configurations, and asset mappings for the inventory system","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Skin Set Info","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skin-set-info"},"next":{"title":"Skins Filters Utils","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skinsfiltersutils"}}');var t=i(74848),r=i(28453);const a={id:"skins-defs-data",title:"Skins Definitions Data",description:"Auto-generated skin definitions, configurations, and asset mappings for the inventory system",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},o="Skins Definitions Data",l={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Core Functions",id:"core-functions",level:2},{value:"TheInventory()",id:"clear-skins-dataset",level:3},{value:"TheInventory(build, skin_id, flag)",id:"add-restricted-build",level:3},{value:"TheInventory(emote_id, set_index, skin_id)",id:"add-skin-set-input",level:3},{value:"TheInventory(linked_skin, base_skin)",id:"add-skin-link-input",level:3},{value:"TheInventory(skin_id)",id:"add-free-item",level:3},{value:"TheSim(group_id, texture_path)",id:"add-texture-streaming",level:3},{value:"Skin Categories",id:"skin-categories",level:2},{value:"Character Skins",id:"character-skins",level:3},{value:"Item Skins",id:"item-skins",level:3},{value:"Beefalo Clothing",id:"beefalo-clothing",level:3},{value:"Companion Skins",id:"companion-skins",level:3},{value:"Emote Sets",id:"emote-sets",level:2},{value:"Coordinated Themes",id:"coordinated-themes",level:3},{value:"Skin Linking System",id:"skin-linking-system",level:2},{value:"Relationship Types",id:"relationship-types",level:3},{value:"Asset Streaming Organization",id:"asset-streaming-organization",level:2},{value:"Streaming Groups",id:"streaming-groups",level:3},{value:"Security and Validation",id:"security-and-validation",level:2},{value:"Signature Validation",id:"signature-validation",level:3},{value:"Protection Guards",id:"protection-guards",level:3},{value:"Auto-Generation Process",id:"auto-generation-process",level:2},{value:"Integration Points",id:"integration-points",level:2},{value:"Inventory System",id:"inventory-system",level:3},{value:"Asset Pipeline",id:"asset-pipeline",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Memory Management",id:"memory-management",level:3},{value:"Network Optimization",id:"network-optimization",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Checking Skin Availability",id:"checking-skin-availability",level:3},{value:"Finding Related Skins",id:"finding-related-skins",level:3},{value:"Emote Set Discovery",id:"emote-set-discovery",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"skins-definitions-data",children:"Skins Definitions Data"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"skins_defs_data.lua"})," file contains auto-generated skin definitions and configurations for Don't Starve Together's inventory system. This file is automatically generated by the ",(0,t.jsx)(n.code,{children:"export_accountitems.lua"})," script and provides the complete mapping of cosmetic skins to their assets, linking relationships, and organizational structures."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- File is automatically loaded during game initialization\n-- Defines skin asset builds, item pairings, and skin sets\n\n-- Example of how the system works (read-only data):\nlocal function GetSkinBuild(skin_id)\n    -- The system uses these definitions internally\n    -- to map skin IDs to their visual assets\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,t.jsxs)(n.h3,{id:"clear-skins-dataset",children:["TheInventory",":ClearSkinsDataset","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nClears the existing skin dataset before loading new definitions. Called at the beginning of the file to ensure a clean state."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"TheInventory:ClearSkinsDataset()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Resets any previously loaded skin data"}),"\n",(0,t.jsx)(n.li,{children:"Prepares the inventory system for fresh skin definitions"}),"\n",(0,t.jsx)(n.li,{children:"Ensures consistency across game builds"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"add-restricted-build",children:["TheInventory",":AddRestrictedBuildFromLua","(build, skin_id, flag)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRegisters a skin build with the inventory system, defining the visual assets and restrictions for each cosmetic variation."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"build"})," (string): Asset build name for the skin's visual representation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"skin_id"})," (string): Unique identifier for the skin item"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"flag"})," (boolean): Restriction flag (typically ",(0,t.jsx)(n.code,{children:"false"})," for standard skins)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Character skin registrations\nTheInventory:AddRestrictedBuildFromLua("wilson_formal", "wilson_formal", false)\nTheInventory:AddRestrictedBuildFromLua("willow_ancient", "willow_ancient", false)\n\n-- Item skin registrations  \nTheInventory:AddRestrictedBuildFromLua("spear_rose", "spear_rose", false)\nTheInventory:AddRestrictedBuildFromLua("armor_grass_woven", "armor_grass_woven", false)\n\n-- Companion skin registrations\nTheInventory:AddRestrictedBuildFromLua("chester_snow", "chester_snow", false)\nTheInventory:AddRestrictedBuildFromLua("glommer_flower", "glommer_flower", false)\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"add-skin-set-input",children:["TheInventory",":AddSkinSetInput","(emote_id, set_index, skin_id)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nAssociates skins with coordinated emote sets, enabling themed collections that work together visually."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"emote_id"})," (string): Identifier for the emote or action"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"set_index"})," (number): Index within the emote set (0-based)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"skin_id"})," (string): Skin component to include in the set"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Gladiator emote set for multiple characters\nTheInventory:AddSkinSetInput("emote_fistshake", 0, "wilson_gladiator")\nTheInventory:AddSkinSetInput("emote_fistshake", 0, "body_wilson_gladiator")\nTheInventory:AddSkinSetInput("emote_fistshake", 1, "willow_gladiator")\nTheInventory:AddSkinSetInput("emote_fistshake", 1, "body_willow_gladiator")\n\n-- Sleep emote set with matching bedrolls\nTheInventory:AddSkinSetInput("emote_sleepy", 0, "body_pj_blue_agean")\nTheInventory:AddSkinSetInput("emote_sleepy", 0, "bedroll_furry_quilt_blue_frost")\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"add-skin-link-input",children:["TheInventory",":AddSkinLinkInput","(linked_skin, base_skin)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates linking relationships between related skins, such as item variants that share visual themes or companion pets with their containers."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"linked_skin"})," (string): Skin that depends on or relates to the base skin"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"base_skin"})," (string): Primary skin that the linked skin references"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Abigail flower links to Abigail ghost forms\nTheInventory:AddSkinLinkInput("abigail_flower_ancient", "abigail_ancient")\nTheInventory:AddSkinLinkInput("abigail_flower_formal", "abigail_formal")\n\n-- Chest variants linking to base versions\nTheInventory:AddSkinLinkInput("chester_eyebone_horn", "chester_horn")\nTheInventory:AddSkinLinkInput("chester_eyebone_mystical", "chester_mystical")\n\n-- Item skin relationships\nTheInventory:AddSkinLinkInput("armor_dragonfly_fangedcollar", "armor_wood_fangedcollar")\nTheInventory:AddSkinLinkInput("boat_grass_pirate_item", "boat_grass_pirate")\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"add-free-item",children:["TheInventory",":AddFreeItemForEveryone","(skin_id)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nMarks specific skins as free items available to all players without purchase requirements."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"skin_id"})," (string): Skin identifier to make freely available"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Free beefalo clothing sets\nTheInventory:AddFreeItemForEveryone("beefalo_horn_war")\nTheInventory:AddFreeItemForEveryone("beefalo_head_war")\nTheInventory:AddFreeItemForEveryone("beefalo_body_war")\n\n-- Free loading screens\nTheInventory:AddFreeItemForEveryone("loading_dst10_signed")\nTheInventory:AddFreeItemForEveryone("record_creepyforest")\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"add-texture-streaming",children:["TheSim",":AddTextureToStreamingGroup","(group_id, texture_path)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nAssigns skin textures to streaming groups for optimized loading and memory management."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"group_id"})," (number): Streaming group identifier for organization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"texture_path"})," (string): Full path to the texture asset"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Wolfgang skin textures organized by streaming groups\nTheSim:AddTextureToStreamingGroup(0, "anim/dynamic/wolfgang_ancient.zip:wolfgang_ancient--atlas-0.tex")\nTheSim:AddTextureToStreamingGroup(1, "anim/dynamic/wolfgang_combatant.zip:wolfgang_combatant--atlas-0.tex")\nTheSim:AddTextureToStreamingGroup(2, "anim/dynamic/wolfgang_cook.zip:wolfgang_cook--atlas-0.tex")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"skin-categories",children:"Skin Categories"}),"\n",(0,t.jsx)(n.h3,{id:"character-skins",children:"Character Skins"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Cosmetic variations for playable characters affecting their visual appearance."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Pattern:"})," ",(0,t.jsx)(n.code,{children:"[character]_[theme]"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Base character skins\nTheInventory:AddRestrictedBuildFromLua("wilson_formal", "wilson_formal", false)\nTheInventory:AddRestrictedBuildFromLua("willow_ancient", "willow_ancient", false)\nTheInventory:AddRestrictedBuildFromLua("wolfgang_gladiator", "wolfgang_gladiator", false)\n\n-- Character body parts for detailed customization\nTheInventory:AddRestrictedBuildFromLua("body_wilson_formal", "body_wilson_formal", false)\nTheInventory:AddRestrictedBuildFromLua("hand_wilson_formal", "hand_wilson_formal", false)\nTheInventory:AddRestrictedBuildFromLua("legs_wilson_formal", "legs_wilson_formal", false)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"item-skins",children:"Item Skins"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Cosmetic variants for tools, weapons, armor, and other craftable items."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Categories:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tools"}),": Axes, pickaxes, shovels, hammers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Weapons"}),": Spears, staffs, swords"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Armor"}),": Protective equipment with visual modifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Structures"}),": Buildings and constructions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Containers"}),": Storage items and chests"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Tool skins\nTheInventory:AddRestrictedBuildFromLua("axe_feathered", "axe_feathered", false)\nTheInventory:AddRestrictedBuildFromLua("pickaxe_northern", "pickaxe_northern", false)\n\n-- Weapon skins\nTheInventory:AddRestrictedBuildFromLua("spear_rose", "spear_rose", false)\nTheInventory:AddRestrictedBuildFromLua("batbat_fantasy", "batbat_fantasy", false)\n\n-- Armor skins\nTheInventory:AddRestrictedBuildFromLua("armor_grass_woven", "armor_grass_woven", false)\nTheInventory:AddRestrictedBuildFromLua("armor_marble_chainmail", "armor_marble_chainmail", false)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"beefalo-clothing",children:"Beefalo Clothing"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Cosmetic modifications for beefalo mounts with complete outfit sets."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Components:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"head"}),": Head decoration and accessories"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"body"}),": Body covering and ornamentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"feet"}),": Hoof modifications and footwear"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"horn"}),": Horn decorations and modifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tail"}),": Tail accessories and styling"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- War-themed beefalo set\nTheInventory:AddRestrictedBuildFromLua("beefalo_head_war", "beefalo_head_war", false)\nTheInventory:AddRestrictedBuildFromLua("beefalo_body_war", "beefalo_body_war", false)\nTheInventory:AddRestrictedBuildFromLua("beefalo_feet_war", "beefalo_feet_war", false)\nTheInventory:AddRestrictedBuildFromLua("beefalo_horn_war", "beefalo_horn_war", false)\nTheInventory:AddRestrictedBuildFromLua("beefalo_tail_war", "beefalo_tail_war", false)\n\n-- Formal beefalo set\nTheInventory:AddRestrictedBuildFromLua("beefalo_head_formal", "beefalo_head_formal", false)\nTheInventory:AddRestrictedBuildFromLua("beefalo_body_formal", "beefalo_body_formal", false)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"companion-skins",children:"Companion Skins"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Visual modifications for companion creatures like Chester, Glommer, and critters."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Types:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Chester Variants"}),": Different chest appearances and themes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Glommer Skins"}),": Butterfly companion modifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Critter Skins"}),": Small companion creature variations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pet Accessories"}),": Additional decorative elements"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Chester variations\nTheInventory:AddRestrictedBuildFromLua("chester_snow", "chester_snow", false)\nTheInventory:AddRestrictedBuildFromLua("chester_mystical", "chester_mystical", false)\n\n-- Glommer modifications\nTheInventory:AddRestrictedBuildFromLua("glommer_flower", "glommer_flower", false)\nTheInventory:AddRestrictedBuildFromLua("glommerflower_fantasy", "glommerflower_fantasy", false)\n\n-- Critter skins\nTheInventory:AddRestrictedBuildFromLua("glomling_puft", "glomling_puft", false)\nTheInventory:AddRestrictedBuildFromLua("dragonling_bat", "dragonling_bat", false)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"emote-sets",children:"Emote Sets"}),"\n",(0,t.jsx)(n.h3,{id:"coordinated-themes",children:"Coordinated Themes"}),"\n",(0,t.jsx)(n.p,{children:"Emote sets group related skins that work together for specific actions or themes:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Gladiator Set (",(0,t.jsx)(n.code,{children:"emote_fistshake"}),"):"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- All characters get gladiator-themed skins for the fistshake emote\nTheInventory:AddSkinSetInput("emote_fistshake", 0, "wilson_gladiator")\nTheInventory:AddSkinSetInput("emote_fistshake", 1, "willow_gladiator") \nTheInventory:AddSkinSetInput("emote_fistshake", 2, "wolfgang_gladiator")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Sleep Set (",(0,t.jsx)(n.code,{children:"emote_sleepy"}),"):"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Pajama themes with matching bedrolls\nTheInventory:AddSkinSetInput("emote_sleepy", 0, "body_pj_blue_agean")\nTheInventory:AddSkinSetInput("emote_sleepy", 0, "bedroll_furry_quilt_blue_frost")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Western Set (",(0,t.jsx)(n.code,{children:"emote_tiphat"}),"):"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Western-themed character skins for hat-tipping\nTheInventory:AddSkinSetInput("emote_tiphat", 0, "wanda_western")\nTheInventory:AddSkinSetInput("emote_tiphat", 1, "wathgrithr_western")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"skin-linking-system",children:"Skin Linking System"}),"\n",(0,t.jsx)(n.h3,{id:"relationship-types",children:"Relationship Types"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parent-Child Relationships:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Abigail\'s flower controls her ghost appearance\nTheInventory:AddSkinLinkInput("abigail_flower_ancient", "abigail_ancient")\nTheInventory:AddSkinLinkInput("abigail_flower_formal", "abigail_formal")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Item Variant Relationships:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Different armor materials sharing the same style\nTheInventory:AddSkinLinkInput("armor_dragonfly_fangedcollar", "armor_wood_fangedcollar")\nTheInventory:AddSkinLinkInput("armor_dragonfly_roman", "armor_wood_roman")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Container-Content Relationships:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Chester\'s eyebone matches his appearance\nTheInventory:AddSkinLinkInput("chester_eyebone_horn", "chester_horn")\nTheInventory:AddSkinLinkInput("chester_eyebone_mystical", "chester_mystical")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"asset-streaming-organization",children:"Asset Streaming Organization"}),"\n",(0,t.jsx)(n.h3,{id:"streaming-groups",children:"Streaming Groups"}),"\n",(0,t.jsx)(n.p,{children:"Textures are organized into numbered groups for efficient loading:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Group 0:"})," Ancient theme skins\n",(0,t.jsx)(n.strong,{children:"Group 1:"})," Combat/Gladiator theme skins",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Group 2:"})," Cooking/Chef theme skins\n",(0,t.jsx)(n.strong,{children:"Group 3:"})," Formal theme skins"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example Organization:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Wolfgang ancient skins in group 0\nTheSim:AddTextureToStreamingGroup(0, "anim/dynamic/wolfgang_ancient.zip:wolfgang_ancient--atlas-0.tex")\nTheSim:AddTextureToStreamingGroup(0, "anim/dynamic/wolfgang_mighty_ancient.zip:wolfgang_mighty_ancient--atlas-0.tex")\n\n-- Wolfgang combat skins in group 1\nTheSim:AddTextureToStreamingGroup(1, "anim/dynamic/wolfgang_combatant.zip:wolfgang_combatant--atlas-0.tex")\nTheSim:AddTextureToStreamingGroup(1, "anim/dynamic/wolfgang_mighty_combatant.zip:wolfgang_mighty_combatant--atlas-0.tex")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"security-and-validation",children:"Security and Validation"}),"\n",(0,t.jsx)(n.h3,{id:"signature-validation",children:"Signature Validation"}),"\n",(0,t.jsx)(n.p,{children:"The file includes cryptographic signatures to ensure data integrity:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'TheInventory:ValidateWithSignature("4a57af8288567d39848c3028c0430cdd8b790b7f...")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Purpose:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Prevents unauthorized modification of skin data"}),"\n",(0,t.jsx)(n.li,{children:"Ensures consistency across different game clients"}),"\n",(0,t.jsx)(n.li,{children:"Validates that skin definitions match expected values"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"protection-guards",children:"Protection Guards"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Engine Change Protection:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if TheInventory.AddFreeItemForEveryone == nil then\n    -- Fallback validation for older engine versions\nelse\n    -- Modern engine with free item support\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"auto-generation-process",children:"Auto-Generation Process"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Source:"})," ",(0,t.jsx)(n.code,{children:"export_accountitems.lua"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Generation Steps:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Clear existing skin dataset"}),"\n",(0,t.jsx)(n.li,{children:"Process skin asset definitions from game data"}),"\n",(0,t.jsx)(n.li,{children:"Generate restricted build registrations"}),"\n",(0,t.jsx)(n.li,{children:"Create skin set associations for emotes"}),"\n",(0,t.jsx)(n.li,{children:"Establish skin linking relationships"}),"\n",(0,t.jsx)(n.li,{children:"Configure free item availability"}),"\n",(0,t.jsx)(n.li,{children:"Organize texture streaming groups"}),"\n",(0,t.jsx)(n.li,{children:"Apply cryptographic validation"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Update Frequency:"})," Generated with each game build containing skin changes"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,t.jsx)(n.h3,{id:"inventory-system",children:"Inventory System"}),"\n",(0,t.jsx)(n.p,{children:"The definitions integrate with the game's inventory system to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Display available skins in character selection"}),"\n",(0,t.jsx)(n.li,{children:"Apply visual changes when skins are equipped"}),"\n",(0,t.jsx)(n.li,{children:"Manage skin ownership and acquisition"}),"\n",(0,t.jsx)(n.li,{children:"Handle skin preview and inspection"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"asset-pipeline",children:"Asset Pipeline"}),"\n",(0,t.jsx)(n.p,{children:"Works with the game's asset system to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Load appropriate texture and animation files"}),"\n",(0,t.jsx)(n.li,{children:"Stream skin assets efficiently during gameplay"}),"\n",(0,t.jsx)(n.li,{children:"Manage memory usage for large skin collections"}),"\n",(0,t.jsx)(n.li,{children:"Support dynamic loading of cosmetic content"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Streaming Groups:"})," Skins are organized into groups that can be loaded/unloaded based on relevance"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Lazy Loading:"})," Only assets for equipped or previewed skins are fully loaded"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Texture Compression:"})," Skin textures use optimized formats for reduced memory footprint"]}),"\n",(0,t.jsx)(n.h3,{id:"network-optimization",children:"Network Optimization"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Lightweight Definitions:"})," Only essential data is networked between players"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Client-Side Assets:"})," Visual assets are stored locally, only IDs are synchronized"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Batch Updates:"})," Multiple skin changes are bundled for efficient network transmission"]}),"\n",(0,t.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"checking-skin-availability",children:"Checking Skin Availability"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- The system uses these definitions to determine what skins exist\nlocal function IsSkinDefined(skin_id)\n    -- Internal system checks against registered builds\n    return TheInventory:IsValidSkinId(skin_id)\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"finding-related-skins",children:"Finding Related Skins"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- System can find linked skins for compatibility\nlocal function GetLinkedSkin(base_skin)\n    -- Uses the linking data to find related items\n    return TheInventory:GetLinkedSkinId(base_skin)\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"emote-set-discovery",children:"Emote Set Discovery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- System identifies which skins work together for emotes\nlocal function GetEmoteSetSkins(emote_id, character_index)\n    -- References the skin set input data\n    return TheInventory:GetSkinsForEmoteSet(emote_id, character_index)\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./skin_strings.md",children:"Skin Strings"}),": Localized text for skin names and quotes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skin-assets",children:"Skin Assets"}),": Visual asset definitions and mappings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skin-affinity-info",children:"Skin Affinity Info"}),": Character-skin compatibility rules"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skin-gifts",children:"Skin Gifts"}),": Gift system configuration for skin distribution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skin-set-info",children:"Skin Set Info"}),": Coordinated skin collection definitions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);