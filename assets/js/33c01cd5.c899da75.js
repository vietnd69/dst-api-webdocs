"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6657],{3566:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/examples/recipe-mod","title":"Recipe Mod","description":"This tutorial walks through creating custom crafting recipes for Don\'t Starve Together. We\'ll create several types of recipes with varying complexity and requirements.","source":"@site/docs/api-vanilla/examples/recipe-mod.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/recipe-mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/recipe-mod","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"recipe-mod","title":"Recipe Mod","sidebar_position":4},"sidebar":"docs","previous":{"title":"Character Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/character-mod"},"next":{"title":"Custom Component","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-component"}}');var a=t(4848),r=t(8453);const s={id:"recipe-mod",title:"Recipe Mod",sidebar_position:4},o="Creating Custom Recipes",l={},d=[{value:"Project Overview",id:"project-overview",level:2},{value:"Step 1: Set Up the Mod Structure",id:"step-1-set-up-the-mod-structure",level:2},{value:"Step 2: Create the modinfo.lua File",id:"step-2-create-the-modinfolua-file",level:2},{value:"Step 3: Create the modmain.lua File",id:"step-3-create-the-modmainlua-file",level:2},{value:"Step 4: Create the Enhanced Axe Prefab",id:"step-4-create-the-enhanced-axe-prefab",level:2},{value:"Step 5: Create the Frost Armor Prefab",id:"step-5-create-the-frost-armor-prefab",level:2},{value:"Step 6: Create the Fire Staff Prefab",id:"step-6-create-the-fire-staff-prefab",level:2},{value:"Step 7: Create Inventory Images",id:"step-7-create-inventory-images",level:2},{value:"Step 8: Testing Your Recipes",id:"step-8-testing-your-recipes",level:2},{value:"Customization Options",id:"customization-options",level:2},{value:"Add Tech Tree Requirements",id:"add-tech-tree-requirements",level:3},{value:"Add Season-Specific Recipes",id:"add-season-specific-recipes",level:3},{value:"Add Recipes That Unlock With Game Progress",id:"add-recipes-that-unlock-with-game-progress",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Problem: Recipe doesn&#39;t appear in crafting menu",id:"problem-recipe-doesnt-appear-in-crafting-menu",level:3},{value:"Problem: Character-specific recipe is available to everyone",id:"problem-character-specific-recipe-is-available-to-everyone",level:3},{value:"Problem: Custom tab doesn&#39;t appear",id:"problem-custom-tab-doesnt-appear",level:3},{value:"Problem: Crafted item doesn&#39;t have the correct properties",id:"problem-crafted-item-doesnt-have-the-correct-properties",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"creating-custom-recipes",children:"Creating Custom Recipes"})}),"\n",(0,a.jsx)(n.p,{children:"This tutorial walks through creating custom crafting recipes for Don't Starve Together. We'll create several types of recipes with varying complexity and requirements."}),"\n",(0,a.jsx)(n.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,a.jsx)(n.p,{children:"We'll create a mod that adds these recipes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Basic tool recipe (Enhanced Axe)"}),"\n",(0,a.jsx)(n.li,{children:"Advanced equipment recipe (Frost Armor)"}),"\n",(0,a.jsx)(n.li,{children:"Character-specific recipe (Willow's Fire Staff)"}),"\n",(0,a.jsx)(n.li,{children:"Tech-locked recipe (requiring specific crafting stations)"}),"\n",(0,a.jsx)(n.li,{children:"Recipe with custom crafting category"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"step-1-set-up-the-mod-structure",children:"Step 1: Set Up the Mod Structure"}),"\n",(0,a.jsx)(n.p,{children:"Create these folders and files:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"custom_recipes_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 prefabs/\n\u2502       \u251c\u2500\u2500 enhanced_axe.lua\n\u2502       \u251c\u2500\u2500 frost_armor.lua\n\u2502       \u2514\u2500\u2500 fire_staff.lua\n\u2514\u2500\u2500 images/\n    \u2514\u2500\u2500 inventoryimages/\n        \u251c\u2500\u2500 enhanced_axe.tex\n        \u251c\u2500\u2500 enhanced_axe.xml\n        \u251c\u2500\u2500 frost_armor.tex\n        \u251c\u2500\u2500 frost_armor.xml\n        \u251c\u2500\u2500 fire_staff.tex\n        \u2514\u2500\u2500 fire_staff.xml\n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-2-create-the-modinfolua-file",children:"Step 2: Create the modinfo.lua File"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'name = "Custom Recipes"\ndescription = "Adds several new craftable items to the game"\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\n\n-- Not compatible with Don\'t Starve\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\n-- This mod is required on clients\nall_clients_require_mod = true\n\n-- This mod is not a client-only mod\nclient_only_mod = false\n\n-- Icon displayed in the server list\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Tags that describe your mod\nserver_filter_tags = {\n    "crafting",\n    "items"\n}\n\n-- Configuration options\nconfiguration_options = {\n    {\n        name = "recipe_difficulty",\n        label = "Recipe Difficulty",\n        options = {\n            {description = "Easy", data = "easy"},\n            {description = "Normal", data = "normal"},\n            {description = "Hard", data = "hard"}\n        },\n        default = "normal"\n    },\n    {\n        name = "character_recipes",\n        label = "Character-Specific Recipes",\n        options = {\n            {description = "Enabled", data = true},\n            {description = "Disabled", data = false}\n        },\n        default = true\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-3-create-the-modmainlua-file",children:"Step 3: Create the modmain.lua File"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Import globals into the environment\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add asset files\nAssets = {\n    -- Inventory images\n    Asset("IMAGE", "images/inventoryimages/enhanced_axe.tex"),\n    Asset("ATLAS", "images/inventoryimages/enhanced_axe.xml"),\n    Asset("IMAGE", "images/inventoryimages/frost_armor.tex"),\n    Asset("ATLAS", "images/inventoryimages/frost_armor.xml"),\n    Asset("IMAGE", "images/inventoryimages/fire_staff.tex"),\n    Asset("ATLAS", "images/inventoryimages/fire_staff.xml"),\n}\n\n-- Register prefabs\nPrefabFiles = {\n    "enhanced_axe",\n    "frost_armor",\n    "fire_staff",\n}\n\n-- Add custom strings\nSTRINGS.NAMES.ENHANCED_AXE = "Enhanced Axe"\nSTRINGS.RECIPE_DESC.ENHANCED_AXE = "Chops trees faster and lasts longer."\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.ENHANCED_AXE = "This axe feels much sturdier."\n\nSTRINGS.NAMES.FROST_ARMOR = "Frost Armor"\nSTRINGS.RECIPE_DESC.FROST_ARMOR = "Provides protection and cold resistance."\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.FROST_ARMOR = "It\'s cold to the touch but keeps me warm."\n\nSTRINGS.NAMES.FIRE_STAFF = "Fire Staff"\nSTRINGS.RECIPE_DESC.FIRE_STAFF = "Willow\'s special fire staff."\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.FIRE_STAFF = "It radiates heat."\nSTRINGS.CHARACTERS.WILLOW.DESCRIBE.FIRE_STAFF = "My very own fire maker!"\n\n-- Get recipe difficulty from mod settings\nlocal difficulty = GetModConfigData("recipe_difficulty")\nlocal character_recipes = GetModConfigData("character_recipes")\n\n-- Define ingredient sets based on difficulty\nlocal ingredient_sets = {\n    easy = {\n        enhanced_axe = {Ingredient("twigs", 2), Ingredient("flint", 2), Ingredient("goldnugget", 1)},\n        frost_armor = {Ingredient("silk", 3), Ingredient("ice", 5), Ingredient("bluegem", 1)},\n        fire_staff = {Ingredient("twigs", 2), Ingredient("charcoal", 2), Ingredient("redgem", 1)}\n    },\n    normal = {\n        enhanced_axe = {Ingredient("twigs", 3), Ingredient("flint", 3), Ingredient("goldnugget", 2)},\n        frost_armor = {Ingredient("silk", 6), Ingredient("ice", 8), Ingredient("bluegem", 2)},\n        fire_staff = {Ingredient("twigs", 4), Ingredient("charcoal", 4), Ingredient("redgem", 2)}\n    },\n    hard = {\n        enhanced_axe = {Ingredient("twigs", 4), Ingredient("flint", 4), Ingredient("goldnugget", 3)},\n        frost_armor = {Ingredient("silk", 8), Ingredient("ice", 10), Ingredient("bluegem", 3)},\n        fire_staff = {Ingredient("twigs", 6), Ingredient("charcoal", 6), Ingredient("redgem", 3)}\n    }\n}\n\n-- Get the appropriate ingredient set\nlocal ingredients = ingredient_sets[difficulty]\n\n-- 1. Basic Tool Recipe (Enhanced Axe)\nAddRecipe("enhanced_axe", \n    ingredients.enhanced_axe, \n    GLOBAL.RECIPETABS.TOOLS,  -- Add to Tools tab\n    GLOBAL.TECH.SCIENCE_ONE,  -- Requires Science Machine\n    nil, nil, nil, nil, nil,  -- Default values for other parameters\n    "images/inventoryimages/enhanced_axe.xml")\n\n-- 2. Advanced Equipment Recipe (Frost Armor)\nAddRecipe("frost_armor", \n    ingredients.frost_armor, \n    GLOBAL.RECIPETABS.SURVIVAL,  -- Add to Survival tab\n    GLOBAL.TECH.SCIENCE_TWO,     -- Requires Alchemy Engine\n    nil, nil, nil, nil, nil, \n    "images/inventoryimages/frost_armor.xml")\n\n-- 3. Character-specific Recipe (Willow\'s Fire Staff)\nif character_recipes then\n    AddRecipe("fire_staff", \n        ingredients.fire_staff, \n        GLOBAL.RECIPETABS.MAGIC,  -- Add to Magic tab\n        GLOBAL.TECH.MAGIC_TWO,    -- Requires Prestihatitator\n        nil, nil, nil, "willow",  -- Only Willow can craft this\n        nil, \n        "images/inventoryimages/fire_staff.xml")\nend\n\n-- 4. Create a Custom Crafting Tab\nGLOBAL.RECIPETABS.CUSTOMCRAFTING = {str = "CUSTOMCRAFTING", sort = 999, icon = "tab_crafting.tex", icon_atlas = "images/hud.xml"}\n\n-- 5. Add a recipe to the custom tab\nAddRecipe("berries", \n    {Ingredient("seeds", 1)}, \n    GLOBAL.RECIPETABS.CUSTOMCRAFTING,  -- Add to our custom tab\n    GLOBAL.TECH.NONE,                  -- No tech requirement\n    nil, nil, nil, nil, nil)\n\n-- 6. Add a recipe with multiple tech requirements\nAddRecipe("bluegem", \n    {Ingredient("ice", 10), Ingredient("nitre", 2)}, \n    GLOBAL.RECIPETABS.REFINE,  -- Add to Refine tab\n    {GLOBAL.TECH.SCIENCE_TWO, GLOBAL.TECH.MAGIC_TWO},  -- Requires BOTH Alchemy Engine AND Prestihatitator\n    nil, nil, nil, nil, nil)\n\n-- 7. Add a recipe with a custom placer\nAddRecipe("researchlab2", \n    {Ingredient("boards", 4), Ingredient("cutstone", 2), Ingredient("goldnugget", 1)}, \n    GLOBAL.RECIPETABS.SCIENCE,  -- Add to Science tab\n    GLOBAL.TECH.SCIENCE_ONE,    -- Requires Science Machine\n    "researchlab2_placer",      -- Use the alchemy engine placer\n    nil, nil, nil, nil)\n\n-- 8. Add a recipe with a custom builder tag requirement\nAddRecipe("purplegem", \n    {Ingredient("redgem", 1), Ingredient("bluegem", 1)}, \n    GLOBAL.RECIPETABS.MAGIC,  -- Add to Magic tab\n    GLOBAL.TECH.MAGIC_THREE,  -- Requires Shadow Manipulator\n    nil, nil, nil, nil, "gem_alchemist")  -- Requires "gem_alchemist" tag\n\n-- Add the gem_alchemist tag to Wickerbottom\nAddPrefabPostInit("wickerbottom", function(inst)\n    inst:AddTag("gem_alchemist")\nend)\n\n-- 9. Add a recipe that unlocks for everyone after a specific action\nAddRecipe("nightmarefuel", \n    {Ingredient("petals_evil", 3)}, \n    GLOBAL.RECIPETABS.MAGIC,  -- Add to Magic tab\n    GLOBAL.TECH.MAGIC_TWO,    -- Requires Prestihatitator\n    nil, nil, nil, nil, nil)\n\n-- Lock the recipe initially\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        inst:DoTaskInTime(0, function()\n            for _, player in ipairs(GLOBAL.AllPlayers) do\n                player.components.builder:UnlockRecipe("nightmarefuel")\n            end\n        end)\n    end\nend)\n\n-- 10. Add a recipe with a custom action when crafted\nAddRecipe("telestaff", \n    {Ingredient("nightmarefuel", 4), Ingredient("purplegem", 2), Ingredient("livinglog", 2)}, \n    GLOBAL.RECIPETABS.MAGIC,  -- Add to Magic tab\n    GLOBAL.TECH.MAGIC_THREE,  -- Requires Shadow Manipulator\n    nil, nil, nil, nil, nil)\n\n-- Add a custom action when the telestaff is crafted\nAddComponentPostInit("builder", function(self)\n    local OldDoBuild = self.DoBuild\n    self.DoBuild = function(self, recname, ...)\n        local result = OldDoBuild(self, recname, ...)\n        \n        if recname == "telestaff" and result then\n            -- Do something special when telestaff is crafted\n            self.inst.components.sanity:DoDelta(-15)  -- Cost sanity to craft\n            self.inst:PushEvent("learnedteleportation")  -- Custom event\n            \n            -- Spawn a special effect\n            local fx = GLOBAL.SpawnPrefab("collapse_small")\n            fx.Transform:SetPosition(self.inst.Transform:GetWorldPosition())\n        end\n        \n        return result\n    end\nend)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-4-create-the-enhanced-axe-prefab",children:"Step 4: Create the Enhanced Axe Prefab"}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"scripts/prefabs/enhanced_axe.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/axe.zip"),  -- Reuse axe animation\n    Asset("ANIM", "anim/swap_axe.zip"),\n    \n    Asset("IMAGE", "images/inventoryimages/enhanced_axe.tex"),\n    Asset("ATLAS", "images/inventoryimages/enhanced_axe.xml"),\n}\n\n-- Function called when the axe is equipped\nlocal function onequip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_object", "swap_axe", "swap_axe")\n    owner.AnimState:Show("ARM_carry")\n    owner.AnimState:Hide("ARM_normal")\n    \n    -- Apply a gold tint to the axe when equipped\n    owner.AnimState:SetMultColour(1, 0.9, 0.5, 1)\nend\n\n-- Function called when the axe is unequipped\nlocal function onunequip(inst, owner)\n    owner.AnimState:Hide("ARM_carry")\n    owner.AnimState:Show("ARM_normal")\n    owner.AnimState:SetMultColour(1, 1, 1, 1)\nend\n\n-- Main function to create the enhanced axe\nlocal function fn()\n    -- Create the entity\n    local inst = CreateEntity()\n\n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    -- Set up physics\n    MakeInventoryPhysics(inst)\n\n    -- Set up animation\n    inst.AnimState:SetBank("axe")\n    inst.AnimState:SetBuild("axe")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Apply a gold tint to the axe\n    inst.AnimState:SetMultColour(1, 0.9, 0.5, 1)\n\n    -- Add tags\n    inst:AddTag("sharp")\n    inst:AddTag("tool")\n\n    -- Make the entity pristine for networking\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "enhanced_axe"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/enhanced_axe.xml"\n\n    -- Make it work as a tool\n    inst:AddComponent("tool")\n    inst.components.tool:SetAction(ACTIONS.CHOP, 1.5) -- 50% faster chopping\n\n    -- Make it work as a weapon\n    inst:AddComponent("weapon")\n    inst.components.weapon:SetDamage(27.2) -- 20% more damage than regular axe\n\n    -- Add durability\n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(150) -- 50% more uses than regular axe\n    inst.components.finiteuses:SetUses(150)\n    inst.components.finiteuses:SetOnFinished(inst.Remove)\n    inst.components.finiteuses:SetConsumption(ACTIONS.CHOP, 1)\n\n    -- Make it inspectable\n    inst:AddComponent("inspectable")\n\n    -- Make it equippable\n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(onequip)\n    inst.components.equippable:SetOnUnequip(onunequip)\n\n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("enhanced_axe", fn, assets)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-5-create-the-frost-armor-prefab",children:"Step 5: Create the Frost Armor Prefab"}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"scripts/prefabs/frost_armor.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/armor_marble.zip"),  -- Reuse marble armor animation\n    \n    Asset("IMAGE", "images/inventoryimages/frost_armor.tex"),\n    Asset("ATLAS", "images/inventoryimages/frost_armor.xml"),\n}\n\n-- Function called when the armor is equipped\nlocal function onequip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_body", "armor_marble", "swap_body")\n    \n    -- Apply a blue tint to the armor\n    owner.AnimState:SetMultColour(0.7, 0.8, 1, 1)\n    \n    -- Add cold resistance when equipped\n    if owner.components.temperature ~= nil then\n        owner.components.temperature:SetModifier("frost_armor", 80)\n    end\n    \n    -- Add a frost aura effect\n    if not inst.frost_task then\n        inst.frost_task = inst:DoPeriodicTask(2, function()\n            -- Create frost breath effect\n            local fx = SpawnPrefab("frostbreath")\n            if fx then\n                fx.Transform:SetPosition(owner.Transform:GetWorldPosition())\n            end\n            \n            -- Cool nearby enemies\n            local x, y, z = owner.Transform:GetWorldPosition()\n            local ents = TheSim:FindEntities(x, y, z, 3, {"_combat"}, {"player", "companion", "INLIMBO"})\n            \n            for _, ent in ipairs(ents) do\n                if ent.components.temperature then\n                    ent.components.temperature:DoDelta(-1)\n                end\n            end\n        end)\n    end\nend\n\n-- Function called when the armor is unequipped\nlocal function onunequip(inst, owner)\n    owner.AnimState:ClearOverrideSymbol("swap_body")\n    owner.AnimState:SetMultColour(1, 1, 1, 1)\n    \n    -- Remove cold resistance\n    if owner.components.temperature ~= nil then\n        owner.components.temperature:RemoveModifier("frost_armor")\n    end\n    \n    -- Remove frost aura effect\n    if inst.frost_task then\n        inst.frost_task:Cancel()\n        inst.frost_task = nil\n    end\nend\n\n-- Main function to create the frost armor\nlocal function fn()\n    -- Create the entity\n    local inst = CreateEntity()\n\n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    -- Set up physics\n    MakeInventoryPhysics(inst)\n\n    -- Set up animation\n    inst.AnimState:SetBank("armor_marble")\n    inst.AnimState:SetBuild("armor_marble")\n    inst.AnimState:PlayAnimation("anim")\n    \n    -- Apply a blue tint to the armor\n    inst.AnimState:SetMultColour(0.7, 0.8, 1, 1)\n\n    -- Add tags\n    inst:AddTag("armor")\n\n    -- Make the entity pristine for networking\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "frost_armor"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/frost_armor.xml"\n\n    -- Make it work as armor\n    inst:AddComponent("armor")\n    inst.components.armor:InitCondition(600, 0.8)  -- 600 durability, 80% damage absorption\n    \n    -- Add insulation\n    inst:AddComponent("insulator")\n    inst.components.insulator:SetInsulation(240)  -- 4 minutes of insulation\n    \n    -- Make it inspectable\n    inst:AddComponent("inspectable")\n\n    -- Make it equippable\n    inst:AddComponent("equippable")\n    inst.components.equippable.equipslot = EQUIPSLOTS.BODY\n    inst.components.equippable:SetOnEquip(onequip)\n    inst.components.equippable:SetOnUnequip(onunequip)\n\n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("frost_armor", fn, assets)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-6-create-the-fire-staff-prefab",children:"Step 6: Create the Fire Staff Prefab"}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"scripts/prefabs/fire_staff.lua"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/firestaff.zip"),  -- Reuse firestaff animation\n    Asset("ANIM", "anim/swap_firestaff.zip"),\n    \n    Asset("IMAGE", "images/inventoryimages/fire_staff.tex"),\n    Asset("ATLAS", "images/inventoryimages/fire_staff.xml"),\n}\n\n-- Function to spawn fire when the staff is used\nlocal function onuse(inst, target, pos)\n    -- Create a campfire at the target position\n    local fire = SpawnPrefab("campfire")\n    fire.Transform:SetPosition(pos:Get())\n    \n    -- Make the fire last longer for Willow\n    if inst.components.finiteuses and inst.components.inventoryitem.owner and \n       inst.components.inventoryitem.owner.prefab == "willow" then\n        fire.components.fueled:SetPercent(1)  -- Full fuel\n        fire.components.fueled.rate = fire.components.fueled.rate * 0.5  -- Burns half as fast\n    end\n    \n    -- Create a fire effect\n    local fx = SpawnPrefab("firering_fx")\n    fx.Transform:SetPosition(pos:Get())\n    \n    -- Use up some durability\n    if inst.components.finiteuses then\n        inst.components.finiteuses:Use(1)\n    end\n    \n    return true\nend\n\n-- Function called when the staff is equipped\nlocal function onequip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_object", "swap_firestaff", "swap_firestaff")\n    owner.AnimState:Show("ARM_carry")\n    owner.AnimState:Hide("ARM_normal")\n    \n    -- Add a light when equipped\n    if inst.components.lighttweener == nil then\n        inst:AddComponent("lighttweener")\n        inst.components.lighttweener:StartTween(inst.entity:AddLight(), 0, 0.7, 0.5, {255/255, 160/255, 80/255}, 0, function() end)\n    end\n    \n    -- Special effect for Willow\n    if owner.prefab == "willow" then\n        owner.components.sanity:SetInducedInsanityFn(function() return false end)  -- Prevent insanity near fire\n    end\nend\n\n-- Function called when the staff is unequipped\nlocal function onunequip(inst, owner)\n    owner.AnimState:Hide("ARM_carry")\n    owner.AnimState:Show("ARM_normal")\n    \n    -- Remove the light when unequipped\n    if inst.components.lighttweener then\n        inst:RemoveComponent("lighttweener")\n        inst.entity:RemoveLight()\n    end\n    \n    -- Remove special effect for Willow\n    if owner.prefab == "willow" then\n        owner.components.sanity:SetInducedInsanityFn(nil)\n    end\nend\n\n-- Main function to create the fire staff\nlocal function fn()\n    -- Create the entity\n    local inst = CreateEntity()\n\n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    -- Set up physics\n    MakeInventoryPhysics(inst)\n\n    -- Set up animation\n    inst.AnimState:SetBank("firestaff")\n    inst.AnimState:SetBuild("firestaff")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add a reddish tint\n    inst.AnimState:SetMultColour(1, 0.8, 0.8, 1)\n\n    -- Add tags\n    inst:AddTag("willow_craftable")  -- Custom tag for Willow\n\n    -- Make the entity pristine for networking\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "fire_staff"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/fire_staff.xml"\n\n    -- Make it usable\n    inst:AddComponent("spellcaster")\n    inst.components.spellcaster:SetSpellFn(onuse)\n    inst.components.spellcaster.canuseonpoint = true\n    \n    -- Add durability\n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(20)\n    inst.components.finiteuses:SetUses(20)\n    inst.components.finiteuses:SetOnFinished(inst.Remove)\n    \n    -- Make it inspectable\n    inst:AddComponent("inspectable")\n\n    -- Make it equippable\n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(onequip)\n    inst.components.equippable:SetOnUnequip(onunequip)\n\n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("fire_staff", fn, assets)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-7-create-inventory-images",children:"Step 7: Create Inventory Images"}),"\n",(0,a.jsx)(n.p,{children:"For each item, you'll need to create inventory images:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Create 64x64 pixel images for each item"}),"\n",(0,a.jsxs)(n.li,{children:["Save them in the ",(0,a.jsx)(n.code,{children:"images/inventoryimages/"})," directory"]}),"\n",(0,a.jsx)(n.li,{children:"Convert them to TEX/XML format using a TEX converter tool"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"step-8-testing-your-recipes",children:"Step 8: Testing Your Recipes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Launch Don't Starve Together"}),"\n",(0,a.jsx)(n.li,{children:"Enable your mod in the Mods menu"}),"\n",(0,a.jsx)(n.li,{children:"Start a new game"}),"\n",(0,a.jsxs)(n.li,{children:["Test the recipes by:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Crafting the Enhanced Axe at a Science Machine"}),"\n",(0,a.jsx)(n.li,{children:"Crafting the Frost Armor at an Alchemy Engine"}),"\n",(0,a.jsx)(n.li,{children:"Playing as Willow to craft the Fire Staff"}),"\n",(0,a.jsx)(n.li,{children:"Testing the custom crafting tab"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,a.jsx)(n.p,{children:"Here are some ways to enhance your recipes:"}),"\n",(0,a.jsx)(n.h3,{id:"add-tech-tree-requirements",children:"Add Tech Tree Requirements"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Require multiple tech levels\nAddRecipe("teleportato_ring", \n    {Ingredient("goldnugget", 20), Ingredient("purplegem", 3)}, \n    GLOBAL.RECIPETABS.ANCIENT, \n    {GLOBAL.TECH.ANCIENT_FOUR, GLOBAL.TECH.MAGIC_THREE},  -- Requires BOTH Ancient and Magic tech\n    nil, nil, nil, nil, nil)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"add-season-specific-recipes",children:"Add Season-Specific Recipes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Make a recipe only available in winter\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        inst:ListenForEvent("seasonchange", function(inst, data)\n            for _, player in ipairs(GLOBAL.AllPlayers) do\n                if data.season == "winter" then\n                    player.components.builder:AddRecipe("winterhat")\n                else\n                    player.components.builder:RemoveRecipe("winterhat")\n                end\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"add-recipes-that-unlock-with-game-progress",children:"Add Recipes That Unlock With Game Progress"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Unlock a recipe when the player kills a boss\nAddPrefabPostInit("player", function(inst)\n    inst:ListenForEvent("killed", function(inst, data)\n        if data.victim and data.victim:HasTag("epic") then\n            -- Killed a boss, unlock a special recipe\n            inst.components.builder:UnlockRecipe("staff_tornado")\n        end\n    end)\nend)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,a.jsx)(n.h3,{id:"problem-recipe-doesnt-appear-in-crafting-menu",children:"Problem: Recipe doesn't appear in crafting menu"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Solution"}),": Check that you've specified the correct tech level and crafting tab"]}),"\n",(0,a.jsx)(n.h3,{id:"problem-character-specific-recipe-is-available-to-everyone",children:"Problem: Character-specific recipe is available to everyone"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Solution"}),": Double-check the character name parameter in AddRecipe"]}),"\n",(0,a.jsx)(n.h3,{id:"problem-custom-tab-doesnt-appear",children:"Problem: Custom tab doesn't appear"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Solution"}),": Ensure you've defined the tab correctly and added at least one recipe to it"]}),"\n",(0,a.jsx)(n.h3,{id:"problem-crafted-item-doesnt-have-the-correct-properties",children:"Problem: Crafted item doesn't have the correct properties"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Solution"}),": Check your prefab file for errors in component initialization:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Add error handling to critical functions\nlocal function onequip(inst, owner)\n    if not owner or not owner.AnimState then\n        return\n    end\n    \n    -- Rest of the function...\nend\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Now that you've created custom recipes, you can:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create Recipe Books"}),": Items that teach players new recipes when used"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Add Crafting Animations"}),": Custom animations when crafting specific items"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create Tech Tree Mods"}),": Add entirely new tech trees and crafting stations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Add Recipe Filtering"}),": Create custom categories and filters for recipes"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For more advanced recipe creation, check out the ",(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-component",children:"Custom Component"})," tutorial to learn how to add entirely new crafting behaviors."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);