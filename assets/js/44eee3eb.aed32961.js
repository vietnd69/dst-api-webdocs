"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[468],{5813:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>t,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"api-vanilla/global-objects/global","title":"GLOBAL","description":"The GLOBAL table is a special environment that contains all of the game\'s globally accessible functions, classes, and variables. In mod development, GLOBAL is used to access internal game functionality or to inject custom code into the game\'s global namespace.","source":"@site/docs/api-vanilla/global-objects/global.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/global","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/global","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"global","title":"GLOBAL","sidebar_position":6,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"TheSim","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/thesim"},"next":{"title":"Components","permalink":"/dst-api-webdocs/docs/category/components"}}');var l=a(4848),s=a(8453);const t={id:"global",title:"GLOBAL",sidebar_position:6,last_updated:new Date("2023-07-06T00:00:00.000Z")},i="GLOBAL",c={},r=[{value:"Accessing Game Globals",id:"accessing-game-globals",level:2},{value:"Importing GLOBAL Modules",id:"importing-global-modules",level:2},{value:"Adding to the Global Namespace",id:"adding-to-the-global-namespace",level:2},{value:"Modifying Game Constants",id:"modifying-game-constants",level:2},{value:"Adding Game Constants",id:"adding-game-constants",level:2},{value:"Exposing Local Functions",id:"exposing-local-functions",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"global",children:"GLOBAL"})}),"\n",(0,l.jsx)(n.p,{children:"The GLOBAL table is a special environment that contains all of the game's globally accessible functions, classes, and variables. In mod development, GLOBAL is used to access internal game functionality or to inject custom code into the game's global namespace."}),"\n",(0,l.jsx)(n.h2,{id:"accessing-game-globals",children:"Accessing Game Globals"}),"\n",(0,l.jsxs)(n.p,{children:["In a mod's ",(0,l.jsx)(n.code,{children:"modmain.lua"}),", you can access game globals through the GLOBAL table:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Access global game functions\nlocal SpawnPrefab = GLOBAL.SpawnPrefab\nlocal TheSim = GLOBAL.TheSim\nlocal TheWorld = GLOBAL.TheWorld\n\n-- Access global tables\nlocal STRINGS = GLOBAL.STRINGS\nlocal TUNING = GLOBAL.TUNING\nlocal ACTIONS = GLOBAL.ACTIONS\n\n-- Access game classes\nlocal EntityScript = GLOBAL.EntityScript\nlocal Component = GLOBAL.Component\n"})}),"\n",(0,l.jsx)(n.h2,{id:"importing-global-modules",children:"Importing GLOBAL Modules"}),"\n",(0,l.jsx)(n.p,{children:"You can import specific parts of the game code for use in your mod:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Import specific modules\nlocal Vector3 = require("vector3")\nlocal Brain = require("brain")\n\n-- Import from specific paths\nlocal StateGraph = require("stategraph")\nlocal BufferedAction = require("bufferedaction")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"adding-to-the-global-namespace",children:"Adding to the Global Namespace"}),"\n",(0,l.jsx)(n.p,{children:"You can add your own functions and variables to the global namespace:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Add a function to the global namespace\nGLOBAL.MyModFunction = function()\n    print("This is a global function from my mod!")\nend\n\n-- Add a table to the global namespace\nGLOBAL.MY_MOD_DATA = {\n    version = "1.0",\n    author = "YourName",\n    settings = {}\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"modifying-game-constants",children:"Modifying Game Constants"}),"\n",(0,l.jsx)(n.p,{children:"You can modify game constants through the GLOBAL table:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Modify tuning values\nGLOBAL.TUNING.WILSON_HEALTH = 200         -- Change Wilson\'s health\nGLOBAL.TUNING.HAMMER_LOOT_PERCENT = 1.0   -- Always drop full loot when hammering\n\n-- Modify string entries\nGLOBAL.STRINGS.NAMES.CARROT = "Super Carrot"\nGLOBAL.STRINGS.CHARACTERS.WILSON.DESCRIBE.CARROT = "That\'s one fancy carrot!"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"adding-game-constants",children:"Adding Game Constants"}),"\n",(0,l.jsx)(n.p,{children:"You can add new constants for your mod:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Add new tuning values\nGLOBAL.TUNING.MY_MOD = {\n    SPAWN_CHANCE = 0.5,\n    MAX_ITEMS = 10,\n    DAMAGE_MULTIPLIER = 1.5\n}\n\n-- Add new string entries\nGLOBAL.STRINGS.MY_MOD = {\n    ITEMS = {\n        SUPER_TOOL = "Super Tool",\n        MEGA_WEAPON = "Mega Weapon"\n    },\n    UI = {\n        OPEN = "Open",\n        CLOSE = "Close"\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"exposing-local-functions",children:"Exposing Local Functions"}),"\n",(0,l.jsx)(n.p,{children:"You can get access to local functions in the game code by extracting them from environments:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Get local function from game code (advanced technique)\nlocal env = getfenv(GLOBAL.TheWorld.IsPassableAtPoint)\nlocal internal_function = env.SomeLocalFunction\n\n-- Use with caution - may break with game updates\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.p,{children:"When working with GLOBAL:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Import Only What You Need"}),": For better performance, only import the specific globals you need"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use Local Variables"}),": Store globals in local variables for faster access and better performance"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Avoid Name Collisions"}),": Use unique names for your global additions to avoid conflicts with other mods"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Be Cautious with Modifications"}),": Changing core game globals can have unintended consequences"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use PrefixGlobalMethods"}),": For patching global functions, consider using PrefixGlobalMethods to keep the original functionality"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Example of safely modifying a global function\nlocal oldSpawnPrefab = GLOBAL.SpawnPrefab\nGLOBAL.SpawnPrefab = function(name, ...)\n    print("Spawning: " .. name)\n    return oldSpawnPrefab(name, ...)\nend\n'})}),"\n",(0,l.jsxs)(n.ol,{start:"6",children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Consider Load Order"}),": Your changes might be overwritten by other mods loaded after yours"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>i});var o=a(6540);const l={},s=o.createContext(l);function t(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);