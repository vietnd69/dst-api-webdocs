"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[15293],{28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var t=n(96540);const s={},a=t.createContext(s);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:r},e.children)}},89274:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"game-scripts/core-systems/character-systems/core/characterutil","title":"CharacterUtil","description":"Utility functions for loading character portraits, avatars, names, and managing character metadata","source":"@site/docs/game-scripts/core-systems/character-systems/core/characterutil.md","sourceDirName":"game-scripts/core-systems/character-systems/core","slug":"/game-scripts/core-systems/character-systems/core/characterutil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/characterutil","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"characterutil","title":"CharacterUtil","description":"Utility functions for loading character portraits, avatars, names, and managing character metadata","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Character Systems Core Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/"},"next":{"title":"PlayerDeaths","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerdeaths"}}');var s=n(74848),a=n(28453);const i={id:"characterutil",title:"CharacterUtil",description:"Utility functions for loading character portraits, avatars, names, and managing character metadata",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="CharacterUtil",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"SetSkinnedOvalPortraitTexture(image_widget, character, skin)",id:"setskinnedovalportraittexture",level:3},{value:"SetOvalPortraitTexture(image_widget, character)",id:"setovalportraittexture",level:3},{value:"SetHeroNameTexture_Grey(image_widget, character)",id:"sethernametexture-grey",level:3},{value:"SetHeroNameTexture_Gold(image_widget, character)",id:"sethernametexture-gold",level:3},{value:"GetCharacterAvatarTextureLocation(character)",id:"getcharacteravatartexturelocation",level:3},{value:"GetCharacterTitle(character, skin)",id:"getcharactertitle",level:3},{value:"GetKilledByFromMorgueRow(data)",id:"getkilledbyfrommorguerow",level:3},{value:"GetUniquePotentialCharacterStartingInventoryItems(character, with_bonus_items)",id:"getuniquepotentialcharacterstartinginventoryitems",level:3},{value:"Constants",id:"constants",level:2},{value:"DST_CHARACTERLIST",id:"dst_characterlist",level:3},{value:"MODCHARACTERLIST",id:"modcharacterlist",level:3},{value:"MOD_AVATAR_LOCATIONS",id:"mod_avatar_locations",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"characterutil",children:"CharacterUtil"})}),"\n",(0,s.jsx)(r.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Build Version"}),(0,s.jsx)(r.th,{children:"Change Date"}),(0,s.jsx)(r.th,{children:"Change Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"676042"}),(0,s.jsx)(r.td,{children:"2025-06-21"}),(0,s.jsx)(r.td,{children:"stable"}),(0,s.jsx)(r.td,{children:"Current version"})]})})]}),"\n",(0,s.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"CharacterUtil"})," module provides utility functions for loading and managing character-related assets and metadata in Don't Starve Together. It handles portrait loading, avatar management, character naming, and starting inventory items for both vanilla and mod characters with appropriate fallbacks."]}),"\n",(0,s.jsx)(r.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'-- Load character portrait with skin\nlocal portraitWidget = Image()\nlocal hasOval = SetSkinnedOvalPortraitTexture(portraitWidget, "wilson", "wilson_formal")\n\n-- Get character title\nlocal title = GetCharacterTitle("wilson", "wilson_formal")\n\n-- Load avatar texture location\nlocal atlas, texture = GetCharacterAvatarTextureLocation("wilson")\n'})}),"\n",(0,s.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(r.h3,{id:"setskinnedovalportraittexture",children:"SetSkinnedOvalPortraitTexture(image_widget, character, skin)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status:"})," ",(0,s.jsx)(r.code,{children:"stable"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"}),"\nLoads an oval portrait for a character with a specific skin into an image widget. For skinned characters, attempts to load the oval portrait texture and falls back to shield portrait if oval is not available."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"image_widget"})," (Widget): Target image widget to load texture into"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"character"}),' (string): Character identifier (e.g., "wilson", "wendy")']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"skin"}),' (string): Skin identifier (e.g., "wilson_formal", "wendy_rose")']}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["(boolean): ",(0,s.jsx)(r.code,{children:"true"})," if oval portrait was found and loaded, ",(0,s.jsx)(r.code,{children:"false"})," if fallback to shield portrait was used"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'local portraitWidget = Image()\nlocal hasOval = SetSkinnedOvalPortraitTexture(portraitWidget, "wilson", "wilson_formal")\n\nif hasOval then\n    print("Loaded oval portrait successfully")\nelse\n    print("Fell back to shield portrait")\nend\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Current implementation loads from ",(0,s.jsx)(r.code,{children:"bigportraits/[portrait_name].xml"})]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"setovalportraittexture",children:"SetOvalPortraitTexture(image_widget, character)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status:"})," ",(0,s.jsx)(r.code,{children:"stable"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"}),"\nLoads an oval portrait for a character using their default skin. This is a convenience function that calls SetSkinnedOvalPortraitTexture with the character's default skin."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"image_widget"})," (Widget): Target image widget to load texture into"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"character"})," (string): Character identifier"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["(boolean): ",(0,s.jsx)(r.code,{children:"true"})," if oval portrait was found, ",(0,s.jsx)(r.code,{children:"false"})," if fallback to shield portrait was used"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'local widget = Image()\nlocal success = SetOvalPortraitTexture(widget, "wilson")\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:'Automatically appends "_none" for default skin on skinned characters'}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"sethernametexture-grey",children:"SetHeroNameTexture_Grey(image_widget, character)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status:"})," ",(0,s.jsx)(r.code,{children:"stable"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"}),"\nLoads the grey variant of a character's name texture into an image widget. This is the standard fallback name texture used for mod characters."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"image_widget"})," (Widget): Target image widget"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"character"})," (string): Character identifier"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["(boolean): ",(0,s.jsx)(r.code,{children:"true"})," if texture was found and loaded, ",(0,s.jsx)(r.code,{children:"nil"})," if not found"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'local nameWidget = Image()\nlocal loaded = SetHeroNameTexture_Grey(nameWidget, "wilson")\nif loaded then\n    print("Grey name texture loaded")\nend\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Loads from ",(0,s.jsx)(r.code,{children:"images/names_[character].xml"})]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"sethernametexture-gold",children:"SetHeroNameTexture_Gold(image_widget, character)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status:"})," ",(0,s.jsx)(r.code,{children:"stable"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"}),"\nLoads the gold variant of a character's name texture with localization support. Falls back to grey name texture for mod characters that don't have gold variants."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"image_widget"})," (Widget): Target image widget"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"character"})," (string): Character identifier"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["(boolean): ",(0,s.jsx)(r.code,{children:"true"})," if gold texture was loaded, result of grey fallback if gold not available"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'local goldNameWidget = Image()\nlocal hasGold = SetHeroNameTexture_Gold(goldNameWidget, "wilson")\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Uses localization suffix from ",(0,s.jsx)(r.code,{children:"LOC.GetNamesImageSuffix()"})]}),"\n",(0,s.jsx)(r.li,{children:"Falls back to grey for mod characters"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"getcharacteravatartexturelocation",children:"GetCharacterAvatarTextureLocation(character)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status:"})," ",(0,s.jsx)(r.code,{children:"stable"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"}),"\nRetrieves the atlas and texture paths for a character's avatar image. Handles vanilla characters, mod characters, and special cases with appropriate fallbacks."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"character"})," (string): Character identifier"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"(string): Atlas file path"}),"\n",(0,s.jsx)(r.li,{children:"(string): Texture name"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'-- Vanilla character\nlocal atlas, texture = GetCharacterAvatarTextureLocation("wilson")\n-- Returns: "images/avatars.xml", "avatar_wilson.tex"\n\n-- Mod character\nlocal modAtlas, modTexture = GetCharacterAvatarTextureLocation("modcharacter")\n-- Returns mod-specific atlas path and texture name\n\n-- Unknown character\nlocal unknownAtlas, unknownTexture = GetCharacterAvatarTextureLocation("")\n-- Returns: "images/avatars.xml", "avatar_unknown.tex"\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Supports ",(0,s.jsx)(r.code,{children:"MOD_AVATAR_LOCATIONS"})," for mod character avatars"]}),"\n",(0,s.jsx)(r.li,{children:'Falls back to "mod" or "unknown" for unregistered characters'}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"getcharactertitle",children:"GetCharacterTitle(character, skin)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status:"})," ",(0,s.jsx)(r.code,{children:"stable"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"}),"\nRetrieves the display title for a character, prioritizing skin names over character titles when a skin is specified."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"character"})," (string): Character identifier"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"skin"})," (string, optional): Skin identifier"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"(string): Character or skin display title"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'-- Get character title\nlocal title = GetCharacterTitle("wilson")\n-- Returns: "The Gentleman Scientist"\n\n-- Get skin title  \nlocal skinTitle = GetCharacterTitle("wilson", "wilson_formal")\n-- Returns skin-specific name if available, otherwise character title\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Uses ",(0,s.jsx)(r.code,{children:"GetSkinName(skin)"})," when skin is provided"]}),"\n",(0,s.jsxs)(r.li,{children:["Falls back to ",(0,s.jsx)(r.code,{children:"STRINGS.CHARACTER_TITLES[character]"})]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"getkilledbyfrommorguerow",children:"GetKilledByFromMorgueRow(data)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status:"})," ",(0,s.jsx)(r.code,{children:"stable"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"}),'\nProcesses morgue data to generate a formatted "killed by" string with proper capitalization and special name remapping for game entities.']}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," (table): Morgue row data containing:","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"killed_by"})," (string): Raw killer identifier"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"pk"})," (boolean): Whether it was a player kill"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"character"})," (string): Victim character"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"morgue_random"})," (number, optional): Random seed for variant selection"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"(string): Formatted killer name with proper capitalization"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'-- Standard enemy death\nlocal morgueData = {\n    killed_by = "spider",\n    pk = false,\n    character = "wilson"\n}\nlocal killerName = GetKilledByFromMorgueRow(morgueData)\n-- Returns: "Spider"\n\n-- Special case - darkness death for Maxwell\nlocal darknessDeath = {\n    killed_by = "nil",\n    pk = false,\n    character = "waxwell"\n}\nlocal killer = GetKilledByFromMorgueRow(darknessDeath)\n-- Returns: "Charlie"\n\n-- Player kill\nlocal pkDeath = {\n    killed_by = "PlayerName",\n    pk = true,\n    character = "wilson"\n}\nlocal pkKiller = GetKilledByFromMorgueRow(pkDeath)\n-- Returns: "PlayerName" (unchanged)\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Special mappings: ",(0,s.jsx)(r.code,{children:"nil"}),' \u2192 "charlie"/"darkness", ',(0,s.jsx)(r.code,{children:"unknown"}),' \u2192 "shenanigans"']}),"\n",(0,s.jsx)(r.li,{children:'Random variant selection for "moose" \u2192 "moose1"/"moose2"'}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"getuniquepotentialcharacterstartinginventoryitems",children:"GetUniquePotentialCharacterStartingInventoryItems(character, with_bonus_items)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status:"})," ",(0,s.jsx)(r.code,{children:"stable"})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"}),"\nRetrieves unique starting inventory items for a character, optionally including seasonal and extra bonus items. Removes duplicates and returns a clean list."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"character"})," (string): Character identifier"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"with_bonus_items"})," (boolean): Whether to include seasonal/extra items"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"(table): Array of unique item prefab names"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example:"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'-- Get basic starting items\nlocal basicItems = GetUniquePotentialCharacterStartingInventoryItems("wilson", false)\n-- Returns character-specific starting items\n\n-- Get all items including seasonal bonuses\nlocal allItems = GetUniquePotentialCharacterStartingInventoryItems("wilson", true)\n-- Includes items from TUNING.EXTRA_STARTING_ITEMS and TUNING.SEASONAL_STARTING_ITEMS\n\n-- Process starting items\nfor i, item in ipairs(basicItems) do\n    local itemName = STRINGS.NAMES[string.upper(item)] or item\n    print(string.format("Starting item %d: %s", i, itemName))\nend\n'})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Uses ",(0,s.jsx)(r.code,{children:"TUNING.GAMEMODE_STARTING_ITEMS"})," based on server game mode"]}),"\n",(0,s.jsxs)(r.li,{children:["Processes seasonal items in alphabetical order via ",(0,s.jsx)(r.code,{children:"orderedPairs(SEASONS)"})]}),"\n",(0,s.jsx)(r.li,{children:"Removes duplicates while preserving order"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"constants",children:"Constants"}),"\n",(0,s.jsx)(r.p,{children:"The module relies on several global constants:"}),"\n",(0,s.jsx)(r.h3,{id:"dst_characterlist",children:"DST_CHARACTERLIST"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"})," List of vanilla DST characters"]}),"\n",(0,s.jsx)(r.h3,{id:"modcharacterlist",children:"MODCHARACTERLIST"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"})," List of mod characters registered in the system"]}),"\n",(0,s.jsx)(r.h3,{id:"mod_avatar_locations",children:"MOD_AVATAR_LOCATIONS"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Description:"})," Table mapping mod characters to their avatar asset locations"]}),"\n",(0,s.jsx)(r.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"../skins/",children:"Skins System"}),": Character skin management and validation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"../localization/",children:"Localization"}),": String and asset localization support"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"../../widgets/",children:"UI Widgets"}),": Image widgets and UI components"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"../mods/",children:"Mod Support"}),": Integration with modded characters"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"../assets/",children:"Asset Loading"}),": File system and texture loading utilities"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);