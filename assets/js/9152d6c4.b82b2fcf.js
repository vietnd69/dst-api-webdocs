"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8495],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var i=s(96540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},44782:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"game-scripts/core-systems/game-configuration/settings/consolescreensettings","title":"Console Screen Settings","description":"Console history and settings persistence system for Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/game-configuration/settings/consolescreensettings.md","sourceDirName":"game-scripts/core-systems/game-configuration/settings","slug":"/game-scripts/core-systems/game-configuration/settings/consolescreensettings","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/consolescreensettings","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"consolescreensettings","title":"Console Screen Settings","description":"Console history and settings persistence system for Don\'t Starve Together","sidebar_position":9,"last_updated":"2025-06-25T00:00:00.000Z","build_version":676312,"change_status":"modified"},"sidebar":"docs","previous":{"title":"Config","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/config"},"next":{"title":"Constants System","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/constants"}}');var t=s(74848),r=s(28453);const l={id:"consolescreensettings",title:"Console Screen Settings",description:"Console history and settings persistence system for Don't Starve Together",sidebar_position:9,last_updated:new Date("2025-06-25T00:00:00.000Z"),build_version:676312,change_status:"modified"},d="Console Screen Settings",o={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Constants",id:"constants",level:2},{value:"MAX_SAVED_COMMANDS",id:"max_saved_commands",level:3},{value:"Classes/Components",id:"classescomponents",level:2},{value:"ConsoleScreenSettings",id:"consolescreensettings",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Properties",id:"properties",level:4},{value:"Functions",id:"functions",level:2},{value:"Reset()",id:"reset",level:3},{value:"GetConsoleHistory()",id:"get-console-history",level:3},{value:"AddLastExecutedCommand(command_str, toggle_remote_execute)",id:"add-last-executed-command",level:3},{value:"IsWordPredictionWidgetExpanded()",id:"is-word-prediction-widget-expanded",level:3},{value:"SetWordPredictionWidgetExpanded(value)",id:"set-word-prediction-widget-expanded",level:3},{value:"GetSaveName()",id:"get-save-name",level:3},{value:"Save(callback)",id:"save",level:3},{value:"Load(callback)",id:"load",level:3},{value:"OnLoad(str, callback)",id:"on-load",level:3},{value:"Data Structures",id:"data-structures",level:2},{value:"History Entry Format",id:"history-entry-format",level:3},{value:"Persistent Data Structure",id:"persistent-data-structure",level:3},{value:"Legacy Data Migration",id:"legacy-data-migration",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Command Deduplication Logic",id:"command-deduplication-logic",level:3},{value:"History Size Management",id:"history-size-management",level:3},{value:"Persistence Strategy",id:"persistence-strategy",level:3},{value:"Related Modules",id:"related-modules",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"console-screen-settings",children:"Console Screen Settings"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676312"}),(0,t.jsx)(n.td,{children:"2025-06-25"}),(0,t.jsx)(n.td,{children:"modified"}),(0,t.jsx)(n.td,{children:"Improved type checking in OnLoad method for better error handling"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Previous version"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ConsoleScreenSettings"})," class manages persistent settings and command history for the console interface in Don't Starve Together. It handles console command history storage, UI state persistence, and automatic save/load operations for user preferences."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Initialize console settings\nlocal console = ConsoleScreenSettings()\n\n-- Load existing settings\nconsole:Load(function(success)\n    if success then\n        print("Console settings loaded successfully")\n    end\nend)\n\n-- Add commands to history\nconsole:AddLastExecutedCommand("c_spawn(\'wilson\')")\nconsole:AddLastExecutedCommand("c_godmode()", true) -- Remote command\n\n-- Access command history\nlocal history = console:GetConsoleHistory()\nfor i, entry in ipairs(history) do\n    print(i, entry.str, entry.remote and "(remote)" or "(local)")\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,t.jsx)(n.h3,{id:"max_saved_commands",children:"MAX_SAVED_COMMANDS"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Value:"})," ",(0,t.jsx)(n.code,{children:"20"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Maximum number of commands stored in console history to prevent excessive memory usage."]}),"\n",(0,t.jsx)(n.h2,{id:"classescomponents",children:"Classes/Components"}),"\n",(0,t.jsx)(n.h3,{id:"consolescreensettings",children:"ConsoleScreenSettings"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nMain class for managing console settings and command history persistence."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"ConsoleScreenSettings = Class(function(self)\n    self.persistdata = {}\n    self.profanityservers = {}\n    self.dirty = true\nend)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"persistdata"})," (table): Stored console settings and command history data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"profanityservers"})," (table): Server-specific profanity filter settings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dirty"})," (boolean): Flag indicating whether settings have unsaved changes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"reset",children:"Reset()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nResets all console settings to default values, sets the dirty flag, and immediately saves the changes."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"})," None"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Clears all persistent data"}),"\n",(0,t.jsx)(n.li,{children:"Sets dirty flag to true"}),"\n",(0,t.jsx)(n.li,{children:"Automatically calls Save() to persist changes"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"console:Reset()\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"get-console-history",children:"GetConsoleHistory()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the stored console command history as an array of command entries from the persistdata."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["(table): Array of history entries with structure ",(0,t.jsx)(n.code,{children:'{str = "command", remote = boolean|nil}'}),", or empty table if no history exists"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local history = console:GetConsoleHistory()\nfor i, entry in ipairs(history) do\n    local remote_status = entry.remote and " [REMOTE]" or " [LOCAL]"\n    print(string.format("%d: %s%s", i, entry.str, remote_status))\nend\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"add-last-executed-command",children:"AddLastExecutedCommand(command_str, toggle_remote_execute)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nAdds a command to the persistent history with intelligent deduplication and remote execution tracking."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"command_str"})," (string): The command string to add to history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"toggle_remote_execute"})," (boolean, optional): Whether the command was executed remotely"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Trims leading and trailing whitespace from commands"}),"\n",(0,t.jsxs)(n.li,{children:["Ignores empty strings and ",(0,t.jsx)(n.code,{children:"c_repeatlastcommand()"})," commands"]}),"\n",(0,t.jsx)(n.li,{children:"Moves duplicate commands to the end of history"}),"\n",(0,t.jsx)(n.li,{children:"Updates remote execution flag for existing commands"}),"\n",(0,t.jsx)(n.li,{children:"Maintains maximum history size limit"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Add local command\nconsole:AddLastExecutedCommand("c_spawn(\'wilson\')")\n\n-- Add remote command\nconsole:AddLastExecutedCommand("c_godmode()", true)\n\n-- These are ignored\nconsole:AddLastExecutedCommand("")  -- Empty string\nconsole:AddLastExecutedCommand("c_repeatlastcommand()")  -- Special command\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"is-word-prediction-widget-expanded",children:"IsWordPredictionWidgetExpanded()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks whether the word prediction widget is currently in expanded state."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if widget is expanded, false otherwise"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if console:IsWordPredictionWidgetExpanded() then\n    -- Show expanded prediction interface\n    ShowExpandedView()\nelse\n    -- Show compact prediction interface\n    ShowCompactView()\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"set-word-prediction-widget-expanded",children:"SetWordPredictionWidgetExpanded(value)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSets the expansion state of the word prediction widget and marks settings as dirty for saving."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value"})," (boolean): True to expand widget, false to collapse"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Expand the prediction widget\nconsole:SetWordPredictionWidgetExpanded(true)\n\n-- Collapse the prediction widget\nconsole:SetWordPredictionWidgetExpanded(false)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"get-save-name",children:"GetSaveName()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the appropriate save file name based on the current game branch."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'(string): Save file name ("consolescreen" for release, "consolescreen_[branch]" for development)'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local filename = console:GetSaveName()\n-- Returns: "consolescreen" or "consolescreen_dev"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"save",children:"Save(callback)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSaves current settings to persistent storage if changes have been made (dirty flag is set)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callback"})," (function, optional): Callback function called after save operation"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Callback Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"success"})," (boolean): Whether the save operation succeeded"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Only saves when ",(0,t.jsx)(n.code,{children:"dirty"})," flag is true (changes were made)"]}),"\n",(0,t.jsxs)(n.li,{children:["Sets ",(0,t.jsx)(n.code,{children:"dirty"})," flag to false after successful save operation"]}),"\n",(0,t.jsx)(n.li,{children:"Uses JSON encoding for data serialization"}),"\n",(0,t.jsx)(n.li,{children:"Calls SavePersistentString with filename from GetSaveName()"}),"\n",(0,t.jsx)(n.li,{children:"If not dirty, immediately calls callback with success=true"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Save with callback\nconsole:Save(function(success)\n    if success then\n        print("Settings saved successfully")\n    else\n        print("Failed to save settings")\n    end\nend)\n\n-- Save without callback\nconsole:Save()\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"load",children:"Load(callback)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nLoads settings from persistent storage using the platform's persistent string system."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callback"})," (function, optional): Callback function called after load operation"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Uses TheSim",":GetPersistentString","() to retrieve saved data"]}),"\n",(0,t.jsx)(n.li,{children:"Ignores the load_success parameter, only checks if string content exists"}),"\n",(0,t.jsx)(n.li,{children:"Delegates actual data processing to OnLoad() method"}),"\n",(0,t.jsx)(n.li,{children:"Passes callback through to OnLoad for completion notification"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'console:Load(function(success)\n    if success then\n        print("Settings loaded successfully")\n        local history = console:GetConsoleHistory()\n        print("Loaded", #history, "command entries")\n    else\n        print("Failed to load settings")\n    end\nend)\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"on-load",children:"OnLoad(str, callback)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"modified in build 676312"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nInternal method that processes loaded data string and handles legacy save data migration. Enhanced with improved type checking for better error handling."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"})," (string): JSON-encoded settings data string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callback"})," (function, optional): Completion callback"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enhanced Type Checking"}),": Validates that ",(0,t.jsx)(n.code,{children:"str"})," is a string type before checking length (improved in 676312)"]}),"\n",(0,t.jsx)(n.li,{children:"Decodes JSON data into persistdata table using TrackedAssert for error handling"}),"\n",(0,t.jsx)(n.li,{children:"Handles migration from legacy save format (history + localremotehistory arrays)"}),"\n",(0,t.jsx)(n.li,{children:"Sets dirty flag to false after successful load"}),"\n",(0,t.jsx)(n.li,{children:"Converts old format to new historylines structure if needed"}),"\n",(0,t.jsx)(n.li,{children:"Prints load status and string length to console"}),"\n",(0,t.jsx)(n.li,{children:"Automatically sets dirty flag to true if migration occurs"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Type Safety Enhancement (Build 676312):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Previous validation (could fail with non-string types)\nif str == nil or string.len(str) == 0 then\n\n-- Enhanced validation (now includes type checking)\nif str == nil or type(str) ~= "string" or string.len(str) == 0 then\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- This is typically called internally by Load()\n-- Manual usage not recommended\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Modified in build 676312: Enhanced type checking for better error handling"}),"\n",(0,t.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n",(0,t.jsx)(n.li,{children:"Includes CONSOLE_HISTORY_REFACTOR migration support"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,t.jsx)(n.h3,{id:"history-entry-format",children:"History Entry Format"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'{\n    str = "command_string",      -- The executed command\n    remote = true|false|nil      -- Remote execution status (nil = local)\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"persistent-data-structure",children:"Persistent Data Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'persistdata = {\n    historylines = {\n        { str = "c_spawn(\'wilson\')", remote = nil },\n        { str = "c_godmode()", remote = true },\n        -- ... up to MAX_SAVED_COMMANDS entries\n    },\n    expanded = true  -- Word prediction widget expansion state\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"legacy-data-migration",children:"Legacy Data Migration"}),"\n",(0,t.jsx)(n.p,{children:"The system automatically converts old save formats:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Old format (converted automatically)\n{\n    history = { "command1", "command2" },\n    localremotehistory = { true, false }\n}\n\n-- Becomes new format\n{\n    historylines = {\n        { str = "command1", remote = true },\n        { str = "command2", remote = false }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.h3,{id:"command-deduplication-logic",children:"Command Deduplication Logic"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Whitespace Trimming"}),": Commands are trimmed of leading/trailing whitespace"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Empty Command Filtering"}),": Empty strings and ",(0,t.jsx)(n.code,{children:"c_repeatlastcommand()"})," are ignored"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Duplicate Detection"}),": Exact string matching identifies duplicate commands"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Position Management"}),": Duplicates are moved to end of history array"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Remote Flag Updates"}),": Remote execution status is updated for existing commands"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"history-size-management",children:"History Size Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maximum Limit"}),": 20 commands maximum (MAX_SAVED_COMMANDS)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Overflow Handling"}),": Oldest commands are removed when limit is exceeded"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Efficient Storage"}),": Minimal data structure for optimal performance"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"persistence-strategy",children:"Persistence Strategy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dirty Flag System"}),": Only saves when changes are detected"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JSON Encoding"}),": Cross-platform compatible data serialization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Branch Isolation"}),": Separate save files for different game branches"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Graceful fallback for corrupt or missing save files"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"consolecommands.md",children:"Console Commands"}),": Commands that utilize this history system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"class.md",children:"Class"}),": Base class inheritance system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"json.md",children:"JSON"}),": Data encoding/decoding utilities"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);