"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[75686],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(96540);const s={},d=i.createContext(s);function t(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(d.Provider,{value:n},e.children)}},59612:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"game-scripts/core-systems/user-interface/frontend/data-grid","title":"Data Grid","description":"Utility class for managing 2D grid data structures with coordinate-to-index mapping in Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/user-interface/frontend/datagrid.md","sourceDirName":"game-scripts/core-systems/user-interface/frontend","slug":"/game-scripts/core-systems/user-interface/frontend/data-grid","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/data-grid","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"data-grid","title":"Data Grid","description":"Utility class for managing 2D grid data structures with coordinate-to-index mapping in Don\'t Starve Together","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Frontend","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/frontend"},"next":{"title":"Loading Tips Data","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/frontend/loadingtipsdata"}}');var s=r(74848),d=r(28453);const t={id:"data-grid",title:"Data Grid",description:"Utility class for managing 2D grid data structures with coordinate-to-index mapping in Don't Starve Together",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="Data Grid",l={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"Width()",id:"width",level:3},{value:"Height()",id:"height",level:3},{value:"GetMaxSize()",id:"get-max-size",level:3},{value:"GetIndex(x, y)",id:"get-index",level:3},{value:"GetXYFromIndex(index)",id:"get-xy-from-index",level:3},{value:"GetDataAtPoint(x, y)",id:"get-data-at-point",level:3},{value:"SetDataAtPoint(x, y, data)",id:"set-data-at-point",level:3},{value:"GetDataAtIndex(index)",id:"get-data-at-index",level:3},{value:"SetDataAtIndex(index, data)",id:"set-data-at-index",level:3},{value:"Save()",id:"save",level:3},{value:"Load(grid)",id:"load",level:3},{value:"Classes",id:"classes",level:2},{value:"DataGrid",id:"datagrid",level:3},{value:"Storage Characteristics",id:"storage-characteristics",level:2},{value:"Index Mapping",id:"index-mapping",level:3},{value:"Memory Usage",id:"memory-usage",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"data-grid",children:"Data Grid"})}),"\n",(0,s.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Build Version"}),(0,s.jsx)(n.th,{children:"Change Date"}),(0,s.jsx)(n.th,{children:"Change Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"DataGrid"})," class provides a utility for managing 2D grid-based data structures in Don't Starve Together. It offers efficient storage and access patterns for grid data using a 1D array internally while maintaining a 2D coordinate interface."]}),"\n",(0,s.jsx)(n.p,{children:"DataGrid is designed for scenarios where you need to store and access data in a grid pattern, such as world tile data management, map generation algorithms, spatial data organization, and any 2D data structure requiring efficient coordinate-based access."}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Create a 20x15 grid for world tile data\nlocal worldGrid = DataGrid(20, 15)\n\n-- Set terrain types at specific coordinates\nworldGrid:SetDataAtPoint(0, 0, "grass")\nworldGrid:SetDataAtPoint(1, 0, "forest")\n\n-- Retrieve terrain type\nlocal terrainType = worldGrid:GetDataAtPoint(1, 0)\nprint("Terrain at (1,0):", terrainType) -- Output: "forest"\n\n-- Save and load grid data\nlocal savedData = worldGrid:Save()\nlocal newGrid = DataGrid(20, 15)\nnewGrid:Load(savedData)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h3,{id:"width",children:"Width()"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nReturns the width of the grid (number of columns)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"None"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(number): Grid width in cells"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\nprint("Grid width:", grid:Width()) -- Output: 10\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Returns grid width"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"height",children:"Height()"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nReturns the height of the grid (number of rows)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"None"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(number): Grid height in cells"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\nprint("Grid height:", grid:Height()) -- Output: 5\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Returns grid height"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"get-max-size",children:"GetMaxSize()"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nCalculates and returns the total number of cells in the grid (width \xd7 height)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"None"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(number): Total grid capacity"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\nprint("Total cells:", grid:GetMaxSize()) -- Output: 50\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Returns total grid capacity"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"get-index",children:"GetIndex(x, y)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nConverts 2D coordinates to a 1D array index using the formula ",(0,s.jsx)(n.code,{children:"index = y * width + x"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"x"})," (number): X coordinate (column index)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"y"})," (number): Y coordinate (row index)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(number): 1D array index corresponding to the (x, y) position"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\nlocal index = grid:GetIndex(3, 2) -- Get index for position (3, 2)\nprint("Index:", index) -- Output: 23 (2 * 10 + 3)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Row-major order conversion"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"get-xy-from-index",children:"GetXYFromIndex(index)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nConverts a 1D array index back to 2D coordinates using modulo and division operations."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"})," (number): 1D array index"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(number, number): X coordinate, Y coordinate"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\nlocal x, y = grid:GetXYFromIndex(23)\nprint("Coordinates:", x, y) -- Output: 3, 2\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Index to coordinate conversion"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"get-data-at-point",children:"GetDataAtPoint(x, y)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRetrieves data stored at the specified 2D coordinates. Converts coordinates to index internally."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"x"})," (number): X coordinate (column index)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"y"})," (number): Y coordinate (row index)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["(any|nil): Data stored at the specified position, or ",(0,s.jsx)(n.code,{children:"nil"})," if no data is set"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\ngrid:SetDataAtPoint(3, 2, "treasure")\nlocal data = grid:GetDataAtPoint(3, 2)\nprint("Data at (3,2):", data) -- Output: "treasure"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: 2D coordinate data access"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"set-data-at-point",children:"SetDataAtPoint(x, y, data)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nStores data at the specified 2D coordinates. Converts coordinates to index internally."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"x"})," (number): X coordinate (column index)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"y"})," (number): Y coordinate (row index)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"})," (any): Data to store at the specified position"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\ngrid:SetDataAtPoint(3, 2, { type = "forest", density = 0.8 })\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: 2D coordinate data storage"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"get-data-at-index",children:"GetDataAtIndex(index)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRetrieves data stored at the specified 1D array index. Direct access to internal storage."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"})," (number): 1D array index"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["(any|nil): Data stored at the specified index, or ",(0,s.jsx)(n.code,{children:"nil"})," if no data is set"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\ngrid:SetDataAtIndex(23, "direct_access_data")\nlocal data = grid:GetDataAtIndex(23)\nprint("Data at index 23:", data) -- Output: "direct_access_data"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Direct index data access"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"set-data-at-index",children:"SetDataAtIndex(index, data)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nStores data at the specified 1D array index. Direct access to internal storage for performance."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"})," (number): 1D array index"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"})," (any): Data to store at the specified index"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\ngrid:SetDataAtIndex(23, { biome = "swamp", resources = {"reeds", "tentacles"} })\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Direct index data storage"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"save",children:"Save()"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nReturns the internal grid data for serialization purposes. Provides access to raw grid array."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"None"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(table): Internal grid array containing all stored data"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid = DataGrid(10, 5)\ngrid:SetDataAtPoint(0, 0, "spawn_point")\nlocal savedData = grid:Save()\n-- savedData can be stored to file or transmitted\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Grid serialization"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"load",children:"Load(grid)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nLoads previously saved grid data into the current DataGrid instance. Replaces internal grid array."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"grid"})," (table): Previously saved grid data (from ",(0,s.jsx)(n.code,{children:"Save()"})," method)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local grid1 = DataGrid(10, 5)\ngrid1:SetDataAtPoint(3, 2, "important_data")\nlocal savedData = grid1:Save()\n\n-- Later, in a new grid instance\nlocal grid2 = DataGrid(10, 5)\ngrid2:Load(savedData)\nlocal data = grid2:GetDataAtPoint(3, 2)\nprint("Loaded data:", data) -- Output: "important_data"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: Grid deserialization"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(n.h3,{id:"datagrid",children:"DataGrid"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nMain class for managing 2D grid data structures. Provides efficient storage using 1D array with 2D coordinate interface."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Properties:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"grid"})," (table): Internal 1D array storing the grid data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"width"})," (number): Grid width in cells"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"height"})," (number): Grid height in cells"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constructor:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"DataGrid = Class(function(self, width, height)\n    self.grid = {}\n    self.width = width\n    self.height = height\nend)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constructor Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"width"})," (number): The width of the grid (number of columns)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"height"})," (number): The height of the grid (number of rows)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current in build 676042: 1D array storage with 2D interface"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"storage-characteristics",children:"Storage Characteristics"}),"\n",(0,s.jsx)(n.h3,{id:"index-mapping",children:"Index Mapping"}),"\n",(0,s.jsx)(n.p,{children:"The DataGrid uses row-major order for coordinate-to-index mapping:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Formula"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"index = y * width + x"})}),(0,s.jsx)(n.td,{children:"Convert 2D coordinates to 1D index"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"x = index % width"})}),(0,s.jsx)(n.td,{children:"Extract X coordinate from index"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"y = floor(index / width)"})}),(0,s.jsx)(n.td,{children:"Extract Y coordinate from index"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"memory-usage",children:"Memory Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sparse Storage"}),": Only cells with data consume memory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zero-based Indexing"}),": Coordinates start from (0, 0)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Agnostic"}),": Can store any Lua value type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache Efficient"}),": Row-major storage pattern"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"mdc:dst-api-webdocs/map/index.md",children:"Map Generation"}),": Uses DataGrid for terrain and biome data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"mdc:dst-api-webdocs/core-systems/world.md",children:"World Management"}),": Spatial data organization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"mdc:dst-api-webdocs/core-systems/class.md",children:"Class System"}),": Uses DST's Class constructor pattern"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);