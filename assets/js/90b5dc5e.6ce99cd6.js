"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6306],{3681:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"api-vanilla/stategraphs/examples","title":"Stategraph Examples","description":"This page provides practical examples of stategraphs for different types of entities in Don\'t Starve Together. These examples demonstrate how to implement various behaviors and can serve as a starting point for your own creations.","source":"@site/docs/api-vanilla/stategraphs/examples.md","sourceDirName":"api-vanilla/stategraphs","slug":"/api-vanilla/stategraphs/examples","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/examples","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"examples","title":"Stategraph Examples","sidebar_position":6,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Animation Integration","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/animation-integration"},"next":{"title":"Localization","permalink":"/dst-api-webdocs/docs/category/localization"}}');var s=e(4848),o=e(8453);const i={id:"examples",title:"Stategraph Examples",sidebar_position:6,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="Stategraph Examples",c={},l=[{value:"Animation-Driven Creature Example",id:"animation-driven-creature-example",level:2},{value:"Basic Creature Stategraph",id:"basic-creature-stategraph",level:2},{value:"Player-Like Entity",id:"player-like-entity",level:2},{value:"Static Structure with Animation",id:"static-structure-with-animation",level:2},{value:"Boss Monster with Phases",id:"boss-monster-with-phases",level:2}];function d(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"stategraph-examples",children:"Stategraph Examples"})}),"\n",(0,s.jsx)(t.p,{children:"This page provides practical examples of stategraphs for different types of entities in Don't Starve Together. These examples demonstrate how to implement various behaviors and can serve as a starting point for your own creations."}),"\n",(0,s.jsx)(t.h2,{id:"animation-driven-creature-example",children:"Animation-Driven Creature Example"}),"\n",(0,s.jsx)(t.p,{children:"This example demonstrates a complete stategraph for a custom creature with proper animation integration. It shows how to synchronize animations, sounds, and gameplay mechanics through the stategraph system:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'-- Require common states to reuse standard behaviors\nrequire("stategraphs/commonstates")\n\n-- Define the state graph for our custom creature\nlocal function CreateCustomCreatureStateGraph()\n    local states = {\n        -- Idle state - the default state when not doing anything else\n        State{\n            name = "idle",\n            tags = {"idle", "canrotate"},\n            \n            -- Called when entering this state\n            onenter = function(inst)\n                -- Play the idle animation - loop it since we might stay idle for a while\n                inst.AnimState:PlayAnimation("idle_loop", true)\n                -- Stop any movement\n                inst.components.locomotor:StopMoving()\n            end,\n        },\n\n        -- Alert state - when the creature notices a target\n        State{\n            name = "alert",\n            tags = {"idle", "alert", "canrotate"},\n            \n            onenter = function(inst)\n                -- Play a one-shot alert animation\n                inst.AnimState:PlayAnimation("alert")\n                inst.components.locomotor:StopMoving()\n                -- Play an alert sound\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/alert")\n            end,\n            \n            -- Called every frame while in this state\n            onupdate = function(inst)\n                -- If we have a target, face towards it\n                if inst.components.combat.target then\n                    inst:FacePoint(inst.components.combat.target.Transform:GetWorldPosition())\n                end\n            end,\n            \n            -- Events that can happen during this state\n            events = {\n                -- When the alert animation finishes\n                EventHandler("animover", function(inst)\n                    -- Check if we have a combat target\n                    if inst.components.combat.target then\n                        -- If target is too far, chase it\n                        local target = inst.components.combat.target\n                        local dist = inst:GetDistanceSqToInst(target)\n                        \n                        if dist > inst.components.combat.attackrange * inst.components.combat.attackrange then\n                            inst.sg:GoToState("chase", target)\n                        else\n                            -- If target is close enough, attack it\n                            inst.sg:GoToState("attack", target)\n                        end\n                    else\n                        -- No target, go back to idle\n                        inst.sg:GoToState("idle")\n                    end\n                end),\n            },\n        },\n        \n        -- Chase state - when pursuing a target\n        State{\n            name = "chase",\n            tags = {"moving", "running", "canrotate"},\n            \n            onenter = function(inst, target)\n                -- Store target in state memory for reference in other functions\n                inst.sg.statemem.target = target\n                -- Play run animation (looping)\n                inst.AnimState:PlayAnimation("run_loop", true)\n                -- Set running speed\n                inst.components.locomotor:RunForward()\n                -- Play chase sound\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/chase_LP", "chase")\n            end,\n            \n            -- Called every frame to update chase behavior\n            onupdate = function(inst, dt)\n                local target = inst.sg.statemem.target\n                if target and target:IsValid() then\n                    -- Update chase destination to follow target\n                    inst:FacePoint(target.Transform:GetWorldPosition())\n                    inst.components.locomotor:GoToPoint(target:GetPosition())\n                    \n                    -- Check if we\'re close enough to attack\n                    local dist = inst:GetDistanceSqToInst(target)\n                    if dist <= inst.components.combat.attackrange * inst.components.combat.attackrange then\n                        inst.sg:GoToState("attack", target)\n                    end\n                else\n                    -- Lost target, return to idle\n                    inst.sg:GoToState("idle")\n                end\n            end,\n            \n            -- When exiting chase state, stop sound effects\n            onexit = function(inst)\n                inst.SoundEmitter:KillSound("chase")\n            end,\n            \n            -- Add footstep sounds synchronized with animation\n            timeline = {\n                TimeEvent(5*FRAMES, function(inst) \n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/footstep")\n                end),\n                TimeEvent(15*FRAMES, function(inst) \n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/footstep")\n                end),\n            },\n        },\n        \n        -- Attack state - when hitting a target\n        State{\n            name = "attack",\n            tags = {"attack", "busy"},\n            \n            onenter = function(inst, target)\n                -- Store target for reference\n                inst.sg.statemem.target = target\n                -- Stop movement during attack\n                inst.components.locomotor:StopMoving()\n                -- Play attack animation (non-looping)\n                inst.AnimState:PlayAnimation("attack")\n                -- Face target\n                if target then\n                    inst:FacePoint(target.Transform:GetWorldPosition())\n                end\n                -- Track whether we\'ve already done damage in this attack\n                inst.sg.statemem.damage_done = false\n            end,\n            \n            -- Timeline coordinates effects with the animation\n            timeline = {\n                -- Wind-up sound at the start of the attack\n                TimeEvent(0*FRAMES, function(inst) \n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/attack_pre")\n                end),\n                \n                -- Attack sound at the impact frame\n                TimeEvent(10*FRAMES, function(inst) \n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/attack")\n                end),\n                \n                -- Actual attack damage happens exactly at the correct animation frame\n                TimeEvent(12*FRAMES, function(inst)\n                    if not inst.sg.statemem.damage_done then\n                        inst.components.combat:DoAttack(inst.sg.statemem.target)\n                        inst.sg.statemem.damage_done = true\n                    end\n                end),\n                \n                -- Attack recovery phase\n                TimeEvent(20*FRAMES, function(inst) \n                    -- After this time, we can be interrupted\n                    inst.sg:RemoveStateTag("busy")\n                end),\n            },\n            \n            -- When attack animation is complete\n            events = {\n                EventHandler("animover", function(inst)\n                    -- 50% chance to attack again if target is still in range\n                    if inst.sg.statemem.target and \n                       inst.sg.statemem.target:IsValid() and\n                       inst:GetDistanceSqToInst(inst.sg.statemem.target) <= inst.components.combat.attackrange * inst.components.combat.attackrange and\n                       math.random() < 0.5 then\n                        inst.sg:GoToState("attack", inst.sg.statemem.target)\n                    else\n                        -- Return to alert stance after attack\n                        inst.sg:GoToState("alert")\n                    end\n                end),\n            },\n        },\n        \n        -- Hit reaction - when taking damage\n        State{\n            name = "hit",\n            tags = {"hit", "busy"},\n            \n            onenter = function(inst)\n                inst.AnimState:PlayAnimation("hit")\n                inst.components.locomotor:StopMoving()\n                -- Knockback effect\n                inst.Physics:SetMotorVelOverride(-6, 0, 0)\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/hurt")\n            end,\n            \n            -- Clear knockback effect after a short time\n            timeline = {\n                TimeEvent(5*FRAMES, function(inst)\n                    inst.Physics:ClearMotorVelOverride()\n                end),\n                TimeEvent(15*FRAMES, function(inst)\n                    -- No longer busy after recovery time\n                    inst.sg:RemoveStateTag("busy")\n                end),\n            },\n            \n            events = {\n                EventHandler("animover", function(inst)\n                    -- If health is critical, flee\n                    if inst.components.health:GetPercent() < 0.25 then\n                        inst.sg:GoToState("flee")\n                    -- Otherwise, if we have a target, return to alert\n                    elseif inst.components.combat.target then\n                        inst.sg:GoToState("alert")\n                    else\n                        inst.sg:GoToState("idle")\n                    end\n                end),\n            },\n        },\n        \n        -- Flee state - run away when badly hurt\n        State{\n            name = "flee",\n            tags = {"moving", "running", "busy", "fleeing"},\n            \n            onenter = function(inst)\n                inst.AnimState:PlayAnimation("run_loop", true)\n                inst.components.locomotor:RunForward()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/flee", "flee")\n                \n                -- Store flee duration\n                inst.sg.statemem.flee_time = 5 + math.random() * 3\n                inst.sg.statemem.stop_time = GetTime() + inst.sg.statemem.flee_time\n                \n                -- Try to flee away from threat\n                if inst.components.combat.target then\n                    local target = inst.components.combat.target\n                    local pos = target:GetPosition()\n                    local angle = math.random() * 2 * PI\n                    \n                    -- Find a point away from the threat\n                    local offset = FindWalkableOffset(pos, angle, 15, 10)\n                    if offset then\n                        inst.components.locomotor:GoToPoint(pos + offset)\n                    else\n                        -- If can\'t find offset, just run randomly\n                        inst:PushEvent("locomote")\n                    end\n                else\n                    -- If no specific threat, just run randomly\n                    inst:PushEvent("locomote")\n                end\n            end,\n            \n            onupdate = function(inst)\n                -- Check if flee time is over\n                if GetTime() >= inst.sg.statemem.stop_time then\n                    inst.sg:GoToState("idle")\n                    return\n                end\n                \n                -- Continue fleeing away from threat\n                if inst.components.combat.target then\n                    local target_pos = inst.components.combat.target:GetPosition()\n                    local my_pos = inst:GetPosition()\n                    local dir = my_pos - target_pos\n                    \n                    if dir:LengthSq() > 0 then\n                        dir:Normalize()\n                        local flee_pos = my_pos + dir * 10\n                        inst.components.locomotor:GoToPoint(flee_pos)\n                    end\n                end\n            end,\n            \n            onexit = function(inst)\n                inst.SoundEmitter:KillSound("flee")\n            end,\n            \n            timeline = {\n                TimeEvent(5*FRAMES, function(inst) \n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/footstep")\n                end),\n                TimeEvent(15*FRAMES, function(inst) \n                    inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/footstep")\n                end),\n            },\n        },\n        \n        -- Death state\n        State{\n            name = "death",\n            tags = {"busy", "dead"},\n            \n            onenter = function(inst)\n                inst.AnimState:PlayAnimation("death")\n                inst.components.locomotor:StopMoving()\n                inst.Physics:ClearCollisionMask()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/custom_creature/death")\n                -- Drop loot\n                inst.components.lootdropper:DropLoot(inst:GetPosition())\n            end,\n            \n            timeline = {\n                -- Spawn particles at key moments of death animation\n                TimeEvent(5*FRAMES, function(inst)\n                    SpawnPrefab("small_puff").Transform:SetPosition(inst.Transform:GetWorldPosition())\n                end),\n                TimeEvent(20*FRAMES, function(inst)\n                    SpawnPrefab("small_puff").Transform:SetPosition(inst.Transform:GetWorldPosition())\n                end),\n            },\n        },\n    }\n\n    local events = {\n        -- Standard locomotion event handler\n        EventHandler("locomote", function(inst)\n            local is_moving = inst.sg:HasStateTag("moving")\n            local wants_to_move = inst.components.locomotor:WantsToMoveForward()\n            \n            -- Don\'t interrupt certain states\n            if inst.sg:HasStateTag("busy") and not inst.sg:HasStateTag("fleeing") then\n                return\n            end\n            \n            -- Transition between idle and moving states\n            if is_moving and not wants_to_move then\n                inst.sg:GoToState("idle")\n            elseif not is_moving and wants_to_move then\n                inst.sg:GoToState("chase")\n            end\n        end),\n        \n        -- Event when a new target is acquired\n        EventHandler("newcombattarget", function(inst, data)\n            -- Only react if we\'re idle and not already busy\n            if not inst.sg:HasStateTag("busy") and inst.sg:HasStateTag("idle") then\n                inst.sg:GoToState("alert")\n            end\n        end),\n        \n        -- Event when taking damage\n        EventHandler("attacked", function(inst, data)\n            if not inst.components.health:IsDead() and not inst.sg:HasStateTag("attack") then\n                inst.sg:GoToState("hit")\n            end\n        end),\n        \n        -- Event when killed\n        EventHandler("death", function(inst)\n            inst.sg:GoToState("death")\n        end),\n    }\n\n    -- Create and return the StateGraph\n    return StateGraph("custom_creature", states, events, "idle")\nend\n\nreturn CreateCustomCreatureStateGraph\n'})}),"\n",(0,s.jsx)(t.p,{children:"This example demonstrates several important aspects of animation-driven stategraphs:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"State-based animation control"}),": Each state plays specific animations that reflect the entity's behavior."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Animation-driven transitions"}),": Using the ",(0,s.jsx)(t.code,{children:"animover"})," event to transition between states when animations complete."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Timeline synchronization"}),": Using ",(0,s.jsx)(t.code,{children:"TimeEvent"})," to synchronize gameplay actions with specific animation frames."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Sound effect integration"}),": Playing sounds at the right moments in the animation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"State memory"}),": Using ",(0,s.jsx)(t.code,{children:"statemem"})," to store data that persists during a state."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Tag-based state querying"}),': Using tags like "busy" to control which states can be interrupted.']}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"When building your own creature stategraphs, follow these steps:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Plan your animation set"}),": Determine what animations you need (idle, walk, attack, hit, death, etc.)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Create states for each animation"}),": Make sure each animation has a corresponding state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Define state transitions"}),": Determine what causes transitions between states"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Synchronize game mechanics"}),": Use timeline events to trigger mechanics at the correct animation frames"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Add sound effects"}),": Place sound effects at appropriate points in the animation"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Test thoroughly"}),": Check all possible state transitions and edge cases"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"basic-creature-stategraph",children:"Basic Creature Stategraph"}),"\n",(0,s.jsx)(t.p,{children:"This example shows a simple creature with basic movement, attacking, and taking damage:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\nlocal states = {\n    -- Basic states from CommonStates\n    CommonStates.AddIdle(),\n    CommonStates.AddWalk(),\n    CommonStates.AddRun(),\n    CommonStates.AddFrozen(),\n    CommonStates.AddHitState(),\n    CommonStates.AddDeathState(),\n    \n    -- Custom attack state\n    State{\n        name = "attack",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack")\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/attack")\n        end,\n        \n        timeline = {\n            TimeEvent(10*FRAMES, function(inst) \n                inst.components.combat:DoAttack()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/attackimpact")\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst) \n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    -- Standard event handlers\n    CommonHandlers.OnLocomote(true, true),\n    CommonHandlers.OnAttack(),\n    CommonHandlers.OnAttacked(),\n    CommonHandlers.OnDeath(),\n    CommonHandlers.OnFreeze(),\n    \n    -- Custom event for special behavior\n    EventHandler("special", function(inst)\n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("special_ability")\n        end\n    end),\n}\n\nlocal actionhandlers = {\n    ActionHandler(ACTIONS.EAT, function(inst, action)\n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("eat", action.target)\n            return true\n        end\n        return false\n    end),\n}\n\nreturn StateGraph("mycreature", states, events, "idle", actionhandlers)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"player-like-entity",children:"Player-Like Entity"}),"\n",(0,s.jsx)(t.p,{children:"This example shows a stategraph for an entity that has player-like behaviors:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\nlocal states = {\n    -- Basic movement states\n    State{\n        name = "idle",\n        tags = {"idle", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("idle_loop", true)\n        end,\n    },\n    \n    State{\n        name = "walk_start",\n        tags = {"moving", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:WalkForward()\n            inst.AnimState:PlayAnimation("walk_pre")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("walk")\n            end),\n        },\n    },\n    \n    State{\n        name = "walk",\n        tags = {"moving", "canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:WalkForward()\n            inst.AnimState:PlayAnimation("walk_loop", true)\n        end,\n        \n        timeline = {\n            TimeEvent(5*FRAMES, function(inst)\n                inst.SoundEmitter:PlaySound("dontstarve/movement/walk_dirt")\n            end),\n            TimeEvent(15*FRAMES, function(inst)\n                inst.SoundEmitter:PlaySound("dontstarve/movement/walk_dirt")\n            end),\n        },\n    },\n    \n    State{\n        name = "walk_stop",\n        tags = {"canrotate"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("walk_pst")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    -- Tool usage states\n    State{\n        name = "chop",\n        tags = {"busy", "chopping"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("chop_pre")\n            inst.AnimState:PushAnimation("chop_loop", false)\n            inst.AnimState:PushAnimation("chop_pst", false)\n        end,\n        \n        timeline = {\n            TimeEvent(13*FRAMES, function(inst)\n                inst:PerformBufferedAction()\n                inst.SoundEmitter:PlaySound("dontstarve/wilson/use_axe_tree")\n            end),\n        },\n        \n        events = {\n            EventHandler("animqueueover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    EventHandler("locomote", function(inst)\n        local is_moving = inst.sg:HasStateTag("moving")\n        local wants_to_move = inst.components.locomotor:WantsToMoveForward()\n        \n        if is_moving and not wants_to_move then\n            inst.sg:GoToState("walk_stop")\n        elseif not is_moving and wants_to_move then\n            inst.sg:GoToState("walk_start")\n        end\n    end),\n    \n    EventHandler("attacked", function(inst, data)\n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("hit")\n        end\n    end),\n    \n    EventHandler("death", function(inst)\n        inst.sg:GoToState("death")\n    end),\n}\n\nlocal actionhandlers = {\n    ActionHandler(ACTIONS.CHOP, function(inst, action)\n        if not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("chop")\n            return true\n        end\n        return false\n    end),\n    \n    ActionHandler(ACTIONS.MINE, function(inst, action)\n        if not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("mine")\n            return true\n        end\n        return false\n    end),\n}\n\nreturn StateGraph("mycharacter", states, events, "idle", actionhandlers)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"static-structure-with-animation",children:"Static Structure with Animation"}),"\n",(0,s.jsx)(t.p,{children:"This example shows a stategraph for a static structure that has different visual states:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local states = {\n    State{\n        name = "idle",\n        tags = {"idle"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("idle")\n        end,\n    },\n    \n    State{\n        name = "open",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("open")\n            inst.SoundEmitter:PlaySound("dontstarve/common/chest_open")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("open_idle")\n            end),\n        },\n    },\n    \n    State{\n        name = "open_idle",\n        tags = {"idle", "open"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("open_idle")\n        end,\n    },\n    \n    State{\n        name = "close",\n        tags = {"busy"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("close")\n            inst.SoundEmitter:PlaySound("dontstarve/common/chest_close")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    EventHandler("open", function(inst)\n        if not inst.sg:HasStateTag("open") then\n            inst.sg:GoToState("open")\n        end\n    end),\n    \n    EventHandler("close", function(inst)\n        if inst.sg:HasStateTag("open") then\n            inst.sg:GoToState("close")\n        end\n    end),\n}\n\nreturn StateGraph("mystructure", states, events, "idle")\n'})}),"\n",(0,s.jsx)(t.h2,{id:"boss-monster-with-phases",children:"Boss Monster with Phases"}),"\n",(0,s.jsx)(t.p,{children:"This example shows a stategraph for a boss monster with different combat phases:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\nlocal phases = {\n    NORMAL = 1,\n    ENRAGED = 2,\n    DEFENSIVE = 3,\n}\n\nlocal states = {\n    -- Basic states\n    CommonStates.AddIdle(),\n    CommonStates.AddWalk(),\n    CommonStates.AddFrozen(),\n    \n    -- Phase transition states\n    State{\n        name = "phase_transition",\n        tags = {"busy", "noattack", "canmove"},\n        \n        onenter = function(inst, data)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("transform")\n            \n            if data and data.phase then\n                inst.sg.statemem.next_phase = data.phase\n            else\n                inst.sg.statemem.next_phase = phases.ENRAGED\n            end\n            \n            inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/transform")\n        end,\n        \n        timeline = {\n            TimeEvent(15*FRAMES, function(inst)\n                local fx = SpawnPrefab("statue_transition")\n                fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n            end),\n            \n            TimeEvent(30*FRAMES, function(inst)\n                inst.current_phase = inst.sg.statemem.next_phase\n                if inst.current_phase == phases.ENRAGED then\n                    inst.components.combat.damagemultiplier = 2\n                    inst.components.locomotor.walkspeed = inst.components.locomotor.walkspeed * 1.5\n                elseif inst.current_phase == phases.DEFENSIVE then\n                    inst.components.health:SetAbsorptionAmount(0.5)\n                    inst.components.combat.damagemultiplier = 0.75\n                end\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    -- Combat states specific to each phase\n    State{\n        name = "attack_normal",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack1")\n        end,\n        \n        timeline = {\n            TimeEvent(20*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/attack")\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    State{\n        name = "attack_enraged",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack2")\n        end,\n        \n        timeline = {\n            TimeEvent(15*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/attack_enraged")\n            end),\n            TimeEvent(25*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n            end),\n            TimeEvent(35*FRAMES, function(inst)\n                inst.components.combat:DoAttack()\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n    \n    State{\n        name = "attack_defensive",\n        tags = {"attack", "busy"},\n        \n        onenter = function(inst)\n            inst.components.locomotor:StopMoving()\n            inst.AnimState:PlayAnimation("attack3")\n            inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/attack_defensive_pre")\n        end,\n        \n        timeline = {\n            TimeEvent(10*FRAMES, function(inst)\n                SpawnPrefab("groundpound_fx").Transform:SetPosition(inst.Transform:GetWorldPosition())\n                inst.components.groundpounder:GroundPound()\n                inst.SoundEmitter:PlaySound("dontstarve/creatures/boss/groundpound")\n            end),\n        },\n        \n        events = {\n            EventHandler("animover", function(inst)\n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    CommonHandlers.OnLocomote(true, false),\n    CommonHandlers.OnFreeze(),\n    \n    EventHandler("doattack", function(inst, data)\n        if not inst.components.health:IsDead() then\n            if inst.current_phase == phases.NORMAL then\n                inst.sg:GoToState("attack_normal")\n            elseif inst.current_phase == phases.ENRAGED then\n                inst.sg:GoToState("attack_enraged")\n            elseif inst.current_phase == phases.DEFENSIVE then\n                inst.sg:GoToState("attack_defensive")\n            end\n        end\n    end),\n    \n    EventHandler("attacked", function(inst, data)\n        if not inst.components.health:IsDead() and not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("hit")\n        end\n    end),\n    \n    EventHandler("death", function(inst)\n        inst.sg:GoToState("death")\n    end),\n    \n    EventHandler("phasechange", function(inst, data)\n        if not inst.sg:HasStateTag("busy") then\n            inst.sg:GoToState("phase_transition", data)\n        end\n    end),\n}\n\nreturn StateGraph("bossentity", states, events, "idle")\n'})}),"\n",(0,s.jsx)(t.p,{children:"These examples demonstrate how to implement different types of entities with stategraphs. You can use them as a starting point and customize them to fit your specific needs."})]})}function m(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>i,x:()=>r});var a=e(6540);const s={},o=a.createContext(s);function i(n){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(o.Provider,{value:t},n.children)}}}]);