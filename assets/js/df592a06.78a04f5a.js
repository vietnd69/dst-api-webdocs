"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4466],{7051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/core/network-system","title":"Network System","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/core/network-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/network-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/network-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"network-system","title":"Network System","sidebar_position":6,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"AnimState System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/animstate-system"},"next":{"title":"Remote Procedure Call System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/rpc-system"}}');var s=t(4848),l=t(8453);const r={id:"network-system",title:"Network System",sidebar_position:6,last_updated:new Date("2023-07-06T00:00:00.000Z")},a="Network System",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Server Authority Model",id:"server-authority-model",level:2},{value:"Network Variables",id:"network-variables",level:2},{value:"Creating Network Variables",id:"creating-network-variables",level:3},{value:"Using Network Variables",id:"using-network-variables",level:3},{value:"Replicated Components",id:"replicated-components",level:2},{value:"Creating a Component with Replica",id:"creating-a-component-with-replica",level:3},{value:"Registering and Using Replicas",id:"registering-and-using-replicas",level:3},{value:"Remote Procedure Calls (RPCs)",id:"remote-procedure-calls-rpcs",level:2},{value:"RPC Types",id:"rpc-types",level:3},{value:"Creating and Using RPCs",id:"creating-and-using-rpcs",level:3},{value:"Classified Entities",id:"classified-entities",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"network-system",children:"Network System"})}),"\n",(0,s.jsx)(n.p,{children:"The Don't Starve Together network system enables multiplayer functionality by managing communication between server and clients. This document covers the core networking concepts, synchronization mechanisms, and implementation details."}),"\n",(0,s.jsxs)(n.p,{children:["For a practical example of advanced networking in a complex mod, see the ",(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-forge",children:"The Forge Case Study"}),", which demonstrates synchronizing game state, UI elements, and combat mechanics in a multiplayer arena game mode."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together uses a client-server architecture where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The server holds the authoritative game state"}),"\n",(0,s.jsx)(n.li,{children:"Clients receive updates from the server"}),"\n",(0,s.jsx)(n.li,{children:"Clients send input actions to the server"}),"\n",(0,s.jsx)(n.li,{children:"The server processes these actions and broadcasts the results"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Server \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 Client \u2502\n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Client \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h2,{id:"server-authority-model",children:"Server Authority Model"}),"\n",(0,s.jsx)(n.p,{children:"DST follows a strict server authority model where:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'All game state is owned by the server (the "master simulation" or "mastersim")'}),"\n",(0,s.jsx)(n.li,{children:"Clients only render and predict the game state"}),"\n",(0,s.jsx)(n.li,{children:"Clients cannot modify the game state directly"}),"\n",(0,s.jsx)(n.li,{children:"Clients request changes via actions, which the server validates and executes"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Example of checking for server authority\nif TheWorld.ismastersim then\n    -- Server-only code\n    inst.components.health:SetMaxHealth(100)\nelse\n    -- Client-only code\n    -- Cannot modify server components directly\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"network-variables",children:"Network Variables"}),"\n",(0,s.jsx)(n.p,{children:"Network variables (netvars) are special variables that automatically sync between server and clients:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Basic netvar types\nlocal net_string = require "net_string"\nlocal net_float = require "net_float"\nlocal net_int = require "net_int"\nlocal net_byte = require "net_byte"\nlocal net_bool = require "net_bool"\nlocal net_tinybyte = require "net_tinybyte"\nlocal net_smallbyte = require "net_smallbyte"\nlocal net_hash = require "net_hash"\nlocal net_entity = require "net_entity"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-network-variables",children:"Creating Network Variables"}),"\n",(0,s.jsx)(n.p,{children:"Network variables are initialized with:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"An entity GUID (to identify the owner)"}),"\n",(0,s.jsx)(n.li,{children:"A variable path (for dirty event naming)"}),"\n",(0,s.jsx)(n.li,{children:"An optional dirty event name"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'function MyComponent:ctor(inst)\n    self.inst = inst\n    \n    -- Network variable with custom dirty event\n    self.health = net_float(inst.GUID, "health.current", "healthdirty")\n    \n    -- Network variable with default dirty event\n    self.level = net_int(inst.GUID, "level.value")\n    \n    -- Listen for dirty events on clients\n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("healthdirty", function()\n            -- Health value changed\n            print("Health changed to: " .. self.health:value())\n        end)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using-network-variables",children:"Using Network Variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Setting a network variable (server only)\nif TheWorld.ismastersim then\n    self.health:set(100)\nend\n\n-- Reading a network variable (server and client)\nlocal current_health = self.health:value()\n\n-- Setting with a dirty callback parameter\nself.health:set_local(50) -- Set without triggering dirty events\nself.health:set(75, true) -- Force dirty event even if value hasn't changed\n"})}),"\n",(0,s.jsx)(n.h2,{id:"replicated-components",children:"Replicated Components"}),"\n",(0,s.jsx)(n.p,{children:"Components in DST exist in two forms:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server Components"}),": Full implementation with game logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client Replicas"}),": Simplified versions containing only data needed by clients"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-component-with-replica",children:"Creating a Component with Replica"}),"\n",(0,s.jsx)(n.p,{children:"Server component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- components/mycomponent.lua\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    self.value = 10\n    -- Server-only functionality\nend)\n\nfunction MyComponent:SetValue(val)\n    self.value = val\n    self.inst:PushEvent("valuechanged", {value = val})\nend\n\nfunction MyComponent:GetValue()\n    return self.value\nend\n\nreturn MyComponent\n'})}),"\n",(0,s.jsx)(n.p,{children:"Client replica:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- components/mycomponent_replica.lua\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    -- Network variable for synchronization\n    self._value = net_int(inst.GUID, "mycomponent.value", "valuedirty")\n    \n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("valuedirty", function()\n            inst:PushEvent("valuechanged", {value = self:GetValue()})\n        end)\n    end\nend)\n\nfunction MyComponent:SetValue(val)\n    if TheWorld.ismastersim then\n        self._value:set(val)\n    end\nend\n\nfunction MyComponent:GetValue()\n    return self._value:value()\nend\n\nreturn MyComponent\n'})}),"\n",(0,s.jsx)(n.h3,{id:"registering-and-using-replicas",children:"Registering and Using Replicas"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In modmain.lua\nAddReplicableComponent("mycomponent")\n\n-- In prefab definition\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Setup for both server and client\n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    -- Mark entity as having completed client setup\n    inst.entity:SetPristine()\n    \n    -- Client setup is complete\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Server-only components\n    inst:AddComponent("mycomponent")\n    inst.components.mycomponent:SetValue(100)\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"remote-procedure-calls-rpcs",children:"Remote Procedure Calls (RPCs)"}),"\n",(0,s.jsx)(n.p,{children:"RPCs allow executing functions remotely between server and clients."}),"\n",(0,s.jsx)(n.h3,{id:"rpc-types",children:"RPC Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client to Server"}),": Actions from client to server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server to Client"}),": Updates from server to client"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server to All Clients"}),": Broadcasts to all connected clients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shard RPCs"}),": Communication between different world shards (surface/caves)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"creating-and-using-rpcs",children:"Creating and Using RPCs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define an RPC handler in modmain.lua\nAddModRPCHandler("MyMod", "ExampleRPC", function(player, param1, param2)\n    print(string.format("RPC called by %s with params: %s, %s", \n        player.name, tostring(param1), tostring(param2)))\n    \n    -- Do something with the received data\n    if player.components.mycomponent then\n        player.components.mycomponent:DoSomething(param1, param2)\n    end\nend)\n\n-- Trigger the RPC from client code\nSendModRPCToServer(MOD_RPC.MyMod.ExampleRPC, "hello", 42)\n\n-- Send an RPC from server to specific client\nSendModRPCToClient(MOD_RPC.MyMod.ClientRPC, client, "message")\n\n-- Send an RPC from server to all clients\nSendModRPCToAllClients(MOD_RPC.MyMod.BroadcastRPC, "message")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"classified-entities",children:"Classified Entities"}),"\n",(0,s.jsx)(n.p,{children:'For complex replicated data, DST often uses "classified" entities - invisible entities that serve as containers for networked variables.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Creating a classified entity\nlocal classified = CreateEntity()\nclassified.entity:AddNetwork()\nclassified.entity:Hide()\nclassified.persists = false\n\n-- Adding network variables\nclassified.health = net_float(classified.GUID, "health", "healthdirty")\nclassified.max_health = net_float(classified.GUID, "max_health")\n\n-- Setting up relationships between entities\nclassified:SetParent(owner)\nowner.player_classified = classified\n\n-- Mark as ready for network use\nclassified.entity:SetPristine()\n\n-- Client-side event handlers\nif not TheWorld.ismastersim then\n    owner:ListenForEvent("healthdirty", OnHealthDirty, classified)\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimize Network Traffic"}),": Send only necessary data to reduce bandwidth usage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prediction"}),": Implement client-side prediction for smooth gameplay"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authority Validation"}),": Always validate client requests on the server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resynchronization"}),": Provide mechanisms to recover from desync situations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Progressive Loading"}),": Load and synchronize data progressively for large worlds"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/client-server-synchronization",children:"Client-Server Synchronization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/rpc-system",children:"RPC System"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-bandwidth-optimization",children:"Network Bandwidth Optimization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/handling-latency-network-drops",children:"Handling Latency"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/security-considerations-networking",children:"Security Considerations"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-global-position",children:"Global Position CompleteSync Case Study"})," - Real-world example of advanced networking implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-regorgeitaled",children:"Re-Gorge-itated Case Study"})," - Example of multiplayer voting systems and network synchronization"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},l=i.createContext(s);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);