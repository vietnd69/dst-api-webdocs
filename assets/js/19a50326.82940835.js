"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9804],{8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function l(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),i.createElement(s.Provider,{value:e},n.children)}},9721:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/examples/complex-item","title":"Complex Item with Multiple Components","description":"This tutorial demonstrates how to create a more sophisticated item that uses multiple components to achieve complex behaviors. We\'ll create a \\"Soul Lantern\\" - a magical lantern that harvests souls from defeated enemies to power itself.","source":"@site/docs/api-vanilla/examples/complex-item.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/complex-item","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/complex-item","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"complex-item","title":"Complex Item with Multiple Components","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Simple Item Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/simple-item"},"next":{"title":"Character Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/character-mod"}}');var o=t(4848),s=t(8453);const l={id:"complex-item",title:"Complex Item with Multiple Components",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z")},a="Creating a Complex Item with Multiple Components",r={},d=[{value:"Project Overview",id:"project-overview",level:2},{value:"Components We&#39;ll Use",id:"components-well-use",level:2},{value:"Step 1: Set Up the Mod Structure",id:"step-1-set-up-the-mod-structure",level:2},{value:"Step 2: Create the modinfo.lua File",id:"step-2-create-the-modinfolua-file",level:2},{value:"Step 3: Create the modmain.lua File",id:"step-3-create-the-modmainlua-file",level:2},{value:"Step 4: Create the Prefab File",id:"step-4-create-the-prefab-file",level:2},{value:"Step 5: Component Interactions",id:"step-5-component-interactions",level:2},{value:"Fueled + Equippable Interaction",id:"fueled--equippable-interaction",level:3},{value:"Fueled + Light Interaction",id:"fueled--light-interaction",level:3},{value:"Weapon + Fueled Interaction",id:"weapon--fueled-interaction",level:3},{value:"Inspectable + Fueled Interaction",id:"inspectable--fueled-interaction",level:3},{value:"Step 6: Testing Your Mod",id:"step-6-testing-your-mod",level:2},{value:"Customization Options",id:"customization-options",level:2},{value:"Add Custom Animations",id:"add-custom-animations",level:3},{value:"Add More Soul Collection Methods",id:"add-more-soul-collection-methods",level:3},{value:"Add Special Powers Based on Fuel Level",id:"add-special-powers-based-on-fuel-level",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Problem: Components not interacting correctly",id:"problem-components-not-interacting-correctly",level:3},{value:"Problem: Fuel not being consumed or added correctly",id:"problem-fuel-not-being-consumed-or-added-correctly",level:3},{value:"Problem: Visual effects not appearing",id:"problem-visual-effects-not-appearing",level:3},{value:"Problem: Sanity aura not working",id:"problem-sanity-aura-not-working",level:3},{value:"Advanced Component Integration",id:"advanced-component-integration",level:2},{value:"Creating Custom Components",id:"creating-custom-components",level:3},{value:"Component Communication Through Events",id:"component-communication-through-events",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"creating-a-complex-item-with-multiple-components",children:"Creating a Complex Item with Multiple Components"})}),"\n",(0,o.jsx)(e.p,{children:'This tutorial demonstrates how to create a more sophisticated item that uses multiple components to achieve complex behaviors. We\'ll create a "Soul Lantern" - a magical lantern that harvests souls from defeated enemies to power itself.'}),"\n",(0,o.jsx)(e.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,o.jsx)(e.p,{children:"Our Soul Lantern will have these features:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Provides light when equipped"}),"\n",(0,o.jsx)(e.li,{children:'Harvests "souls" from nearby defeated enemies'}),"\n",(0,o.jsx)(e.li,{children:"Stores souls as fuel"}),"\n",(0,o.jsx)(e.li,{children:"Provides sanity aura based on stored souls"}),"\n",(0,o.jsx)(e.li,{children:"Changes appearance based on fuel level"}),"\n",(0,o.jsx)(e.li,{children:"Can be recharged by defeating enemies"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"components-well-use",children:"Components We'll Use"}),"\n",(0,o.jsx)(e.p,{children:"This item will use several components working together:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"equippable"})," - To allow the item to be equipped"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"inventoryitem"})," - To allow the item to be picked up and stored"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"fueled"})," - To manage the soul energy level"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"sanityaura"})," - To provide sanity benefits based on fuel level"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"lightsource"})," - To provide illumination"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"weapon"})," - To allow combat usage"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"finiteuses"})," - To manage durability when used as a weapon"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"inspectable"})," - To provide examination text"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"step-1-set-up-the-mod-structure",children:"Step 1: Set Up the Mod Structure"}),"\n",(0,o.jsx)(e.p,{children:"Create these folders and files:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"soul_lantern_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 prefabs/\n\u2502       \u2514\u2500\u2500 soul_lantern.lua\n\u2514\u2500\u2500 images/\n    \u2514\u2500\u2500 inventoryimages/\n        \u251c\u2500\u2500 soul_lantern.png\n        \u2514\u2500\u2500 soul_lantern.xml\n"})}),"\n",(0,o.jsx)(e.h2,{id:"step-2-create-the-modinfolua-file",children:"Step 2: Create the modinfo.lua File"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'name = "Soul Lantern"\ndescription = "A lantern that harvests souls from the fallen to power itself."\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\ndont_starve_compatible = false\n\n-- This mod is required on clients\nall_clients_require_mod = true\nclient_only_mod = false\n\n-- Icon displayed in the server list\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Tags that describe your mod\nserver_filter_tags = {\n    "item",\n    "magic"\n}\n\n-- Configuration options\nconfiguration_options = {\n    {\n        name = "soul_value",\n        label = "Soul Energy Value",\n        options = {\n            {description = "Low", data = 10},\n            {description = "Medium", data = 20},\n            {description = "High", data = 30}\n        },\n        default = 20\n    },\n    {\n        name = "max_fuel",\n        label = "Maximum Soul Capacity",\n        options = {\n            {description = "Small", data = 100},\n            {description = "Medium", data = 200},\n            {description = "Large", data = 300}\n        },\n        default = 200\n    },\n    {\n        name = "weapon_damage",\n        label = "Weapon Damage",\n        options = {\n            {description = "Low", data = 17},\n            {description = "Medium", data = 27},\n            {description = "High", data = 37}\n        },\n        default = 27\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"step-3-create-the-modmainlua-file",children:"Step 3: Create the modmain.lua File"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Import globals into the environment\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add asset files\nAssets = {\n    -- Inventory image\n    Asset("IMAGE", "images/inventoryimages/soul_lantern.tex"),\n    Asset("ATLAS", "images/inventoryimages/soul_lantern.xml"),\n}\n\n-- Register the prefab\nPrefabFiles = {\n    "soul_lantern",\n}\n\n-- Add recipe to craft the soul lantern\nAddRecipe("soul_lantern", \n    {\n        Ingredient("boards", 2),\n        Ingredient("nightmarefuel", 3),\n        Ingredient("gears", 1)\n    }, \n    GLOBAL.RECIPETABS.MAGIC, \n    GLOBAL.TECH.MAGIC_TWO, \n    nil, nil, nil, nil, nil, \n    "images/inventoryimages/soul_lantern.xml", "soul_lantern.tex")\n\n-- Add custom strings\nGLOBAL.STRINGS.NAMES.SOUL_LANTERN = "Soul Lantern"\nGLOBAL.STRINGS.CHARACTERS.GENERIC.DESCRIBE.SOUL_LANTERN = {\n    EMPTY = "It hungers for souls.",\n    LOW = "It contains a few captured souls.",\n    MEDIUM = "The souls inside are quite restless.",\n    FULL = "It\'s brimming with captured souls!"\n}\nGLOBAL.STRINGS.RECIPE_DESC.SOUL_LANTERN = "Harvest souls to light your way."\n\n-- Listen for entity death to collect souls\nAddPrefabPostInit("world", function(inst)\n    if GLOBAL.TheWorld.ismastersim then\n        inst:ListenForEvent("entity_death", function(world, data)\n            if data.inst and data.inst:HasTag("monster") then\n                -- Find nearby players with soul lanterns\n                local x, y, z = data.inst.Transform:GetWorldPosition()\n                local players = GLOBAL.TheSim:FindEntities(x, y, z, 20, {"player"})\n                \n                for _, player in ipairs(players) do\n                    if player.components.inventory then\n                        -- Check equipped items\n                        local equipped = player.components.inventory:GetEquippedItem(GLOBAL.EQUIPSLOTS.HANDS)\n                        if equipped and equipped.prefab == "soul_lantern" then\n                            -- Add fuel to the lantern\n                            if equipped.components.fueled then\n                                local soul_value = GetModConfigData("soul_value")\n                                equipped.components.fueled:DoDelta(soul_value)\n                                \n                                -- Spawn visual effect\n                                local fx = GLOBAL.SpawnPrefab("statue_transition_2")\n                                if fx then\n                                    fx.Transform:SetPosition(data.inst.Transform:GetWorldPosition())\n                                    fx.Transform:SetScale(0.5, 0.5, 0.5)\n                                end\n                                \n                                -- Play sound\n                                equipped.SoundEmitter:PlaySound("dontstarve/common/nightmareAddFuel")\n                            end\n                            break\n                        end\n                    end\n                end\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"step-4-create-the-prefab-file",children:"Step 4: Create the Prefab File"}),"\n",(0,o.jsxs)(e.p,{children:["Create ",(0,o.jsx)(e.code,{children:"scripts/prefabs/soul_lantern.lua"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/lantern.zip"),\n    Asset("ANIM", "anim/swap_lantern.zip"),\n    \n    -- Inventory image\n    Asset("IMAGE", "images/inventoryimages/soul_lantern.tex"),\n    Asset("ATLAS", "images/inventoryimages/soul_lantern.xml"),\n}\n\nlocal prefabs = {\n    "lanternlight",\n}\n\n-- Light radius and intensity based on fuel level\nlocal function GetLightRadius(inst)\n    local fueled = inst.components.fueled\n    if fueled then\n        local percent = fueled:GetPercent()\n        return Lerp(1.5, 3.5, percent)\n    end\n    return 2.0\nend\n\nlocal function GetLightIntensity(inst)\n    local fueled = inst.components.fueled\n    if fueled then\n        local percent = fueled:GetPercent()\n        return Lerp(0.4, 0.8, percent)\n    end\n    return 0.6\nend\n\n-- Update light color based on fuel level\nlocal function UpdateLightColor(inst)\n    local fueled = inst.components.fueled\n    if fueled and inst.light then\n        local percent = fueled:GetPercent()\n        \n        -- Shift from blue (low) to purple (full)\n        local r = Lerp(0.1, 0.6, percent)\n        local g = Lerp(0.1, 0.0, percent)\n        local b = Lerp(0.7, 0.8, percent)\n        \n        inst.Light:SetColour(r, g, b)\n        \n        -- Update light radius and intensity\n        inst.Light:SetRadius(GetLightRadius(inst))\n        inst.Light:SetIntensity(GetLightIntensity(inst))\n    end\nend\n\n-- Function to update the appearance based on fuel level\nlocal function UpdateAppearance(inst)\n    if not inst.components.fueled then return end\n    \n    local percent = inst.components.fueled:GetPercent()\n    \n    -- Update animation based on fuel level\n    if percent <= 0.25 then\n        inst.AnimState:OverrideSymbol("lantern_overlay", "lantern", "lantern_overlay_low")\n        inst.components.inspectable.nameoverride = "SOUL_LANTERN_EMPTY"\n    elseif percent <= 0.5 then\n        inst.AnimState:OverrideSymbol("lantern_overlay", "lantern", "lantern_overlay_med")\n        inst.components.inspectable.nameoverride = "SOUL_LANTERN_LOW"\n    elseif percent <= 0.75 then\n        inst.AnimState:OverrideSymbol("lantern_overlay", "lantern", "lantern_overlay_high")\n        inst.components.inspectable.nameoverride = "SOUL_LANTERN_MEDIUM"\n    else\n        inst.AnimState:OverrideSymbol("lantern_overlay", "lantern", "lantern_overlay_full")\n        inst.components.inspectable.nameoverride = "SOUL_LANTERN_FULL"\n    end\n    \n    -- Update sanity aura based on fuel level\n    if inst.components.equippable and inst.components.equippable:IsEquipped() then\n        local sanity_bonus = Lerp(0.1, 1.0, percent)\n        inst.components.equippable.dapperness = sanity_bonus / TUNING.TOTAL_DAY_TIME\n    end\n    \n    -- Update light color\n    UpdateLightColor(inst)\nend\n\n-- Function called when the lantern is turned on\nlocal function OnTurnOn(inst)\n    if inst.components.fueled then\n        inst.components.fueled:StartConsuming()\n    end\n    \n    -- Create light\n    if inst.light == nil then\n        inst.light = SpawnPrefab("lanternlight")\n        inst.light.entity:SetParent(inst.entity)\n    end\n    \n    -- Update light properties\n    UpdateLightColor(inst)\n    \n    -- Update animation\n    inst.AnimState:PlayAnimation("idle_on")\n    \n    -- Add minimap icon\n    inst.MiniMapEntity:SetIcon("soul_lantern.tex")\n    \n    -- Add tag for light source\n    inst:AddTag("lightsource")\nend\n\n-- Function called when the lantern is turned off\nlocal function OnTurnOff(inst)\n    if inst.components.fueled then\n        inst.components.fueled:StopConsuming()\n    end\n    \n    -- Remove light\n    if inst.light ~= nil then\n        inst.light:Remove()\n        inst.light = nil\n    end\n    \n    -- Update animation\n    inst.AnimState:PlayAnimation("idle_off")\n    \n    -- Remove minimap icon\n    inst.MiniMapEntity:SetIcon(nil)\n    \n    -- Remove light source tag\n    inst:RemoveTag("lightsource")\nend\n\n-- Function called when the lantern is equipped\nlocal function OnEquip(inst, owner)\n    -- Use the regular lantern animation for now\n    owner.AnimState:OverrideSymbol("swap_object", "swap_lantern", "swap_lantern")\n    owner.AnimState:Show("ARM_carry")\n    owner.AnimState:Hide("ARM_normal")\n    \n    -- Apply a purple tint to the lantern when equipped\n    owner.AnimState:SetMultColour(0.9, 0.8, 1, 1)\n    \n    -- Turn on the lantern when equipped\n    if inst.components.fueled:GetPercent() > 0 then\n        OnTurnOn(inst)\n    end\n    \n    -- Update sanity aura\n    local percent = inst.components.fueled:GetPercent()\n    local sanity_bonus = Lerp(0.1, 1.0, percent)\n    inst.components.equippable.dapperness = sanity_bonus / TUNING.TOTAL_DAY_TIME\nend\n\n-- Function called when the lantern is unequipped\nlocal function OnUnequip(inst, owner)\n    owner.AnimState:Hide("ARM_carry")\n    owner.AnimState:Show("ARM_normal")\n    owner.AnimState:SetMultColour(1, 1, 1, 1)\n    \n    -- Turn off the lantern when unequipped\n    OnTurnOff(inst)\n    \n    -- Reset sanity aura\n    inst.components.equippable.dapperness = 0\nend\n\n-- Function called when attacking with the lantern\nlocal function OnAttack(inst, owner, target)\n    if target and target:HasTag("ghost") then\n        -- Extra damage to ghosts\n        return inst.components.weapon.damage * 1.5\n    end\n    \n    -- Chance to steal soul on hit\n    if target and target:HasTag("monster") and math.random() < 0.2 then  -- 20% chance\n        if inst.components.fueled then\n            local soul_value = GetModConfigData("soul_value") / 2\n            inst.components.fueled:DoDelta(soul_value)\n            \n            -- Visual effect\n            local fx = SpawnPrefab("statue_transition")\n            if fx then\n                fx.Transform:SetPosition(target.Transform:GetWorldPosition())\n                fx.Transform:SetScale(0.3, 0.3, 0.3)\n            end\n        end\n    end\nend\n\n-- Function called when fuel is depleted\nlocal function OnOutOfFuel(inst)\n    if inst.components.equippable and inst.components.equippable:IsEquipped() then\n        OnTurnOff(inst)\n    end\n    \n    -- Update appearance\n    UpdateAppearance(inst)\nend\n\n-- Function called when fuel level changes\nlocal function OnFuelChanged(inst, data)\n    -- Update appearance based on new fuel level\n    UpdateAppearance(inst)\n    \n    -- If equipped and turned off but now has fuel, turn it on\n    if inst.components.equippable and \n       inst.components.equippable:IsEquipped() and\n       not inst:HasTag("lightsource") and\n       inst.components.fueled:GetPercent() > 0 then\n        OnTurnOn(inst)\n    end\nend\n\n-- Main function to create the soul lantern\nlocal function fn()\n    -- Create the entity\n    local inst = CreateEntity()\n\n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddMiniMapEntity()\n    inst.entity:AddNetwork()\n    \n    -- Set up minimap icon\n    inst.MiniMapEntity:SetIcon("lantern.tex")\n\n    -- Set up physics\n    MakeInventoryPhysics(inst)\n\n    -- Set up animation\n    inst.AnimState:SetBank("lantern")\n    inst.AnimState:SetBuild("lantern")\n    inst.AnimState:PlayAnimation("idle_off")\n    \n    -- Apply a purple tint to the lantern\n    inst.AnimState:SetMultColour(0.9, 0.8, 1, 1)\n    \n    -- Add light component\n    inst.entity:AddLight()\n    inst.Light:SetFalloff(0.7)\n    inst.Light:SetIntensity(0.6)\n    inst.Light:SetRadius(2.0)\n    inst.Light:SetColour(0.4, 0.0, 0.8)\n    inst.Light:Enable(false)\n\n    -- Add tags\n    inst:AddTag("light")\n    inst:AddTag("soulharvester")\n\n    -- Make the entity pristine for networking\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "soul_lantern"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/soul_lantern.xml"\n\n    -- Add fueled component to manage soul energy\n    inst:AddComponent("fueled")\n    inst.components.fueled.fueltype = FUELTYPE.NIGHTMARE\n    inst.components.fueled:InitializeFuelLevel(0)\n    inst.components.fueled:SetDepletedFn(OnOutOfFuel)\n    inst.components.fueled:SetUpdateFn(UpdateLightColor)\n    inst.components.fueled:SetSections(4)\n    inst.components.fueled.accepting = true\n    inst.components.fueled:SetSectionCallback(UpdateAppearance)\n    inst.components.fueled.maxfuel = GetModConfigData("max_fuel")\n    inst.components.fueled.currentfuel = 0\n    \n    -- Listen for fuel changes\n    inst:ListenForEvent("percentusedchange", OnFuelChanged)\n\n    -- Add weapon component\n    inst:AddComponent("weapon")\n    inst.components.weapon:SetDamage(GetModConfigData("weapon_damage"))\n    inst.components.weapon:SetOnAttack(OnAttack)\n\n    -- Add durability for weapon usage\n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(150)\n    inst.components.finiteuses:SetUses(150)\n    inst.components.finiteuses:SetOnFinished(function(inst) inst:Remove() end)\n    inst.components.finiteuses:SetConsumption(ACTIONS.ATTACK, 1)\n\n    -- Make it inspectable with dynamic descriptions\n    inst:AddComponent("inspectable")\n    inst.components.inspectable.nameoverride = "SOUL_LANTERN_EMPTY"\n\n    -- Make it equippable\n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(OnEquip)\n    inst.components.equippable:SetOnUnequip(OnUnequip)\n    \n    -- Add a special effect when near ghosts\n    inst:DoPeriodicTask(1, function()\n        if inst.components.equippable and inst.components.equippable:IsEquipped() then\n            local owner = inst.components.inventoryitem.owner\n            if owner then\n                local x, y, z = owner.Transform:GetWorldPosition()\n                local ghosts = TheSim:FindEntities(x, y, z, 10, {"ghost"})\n                \n                if #ghosts > 0 then\n                    -- Make the light flicker when ghosts are nearby\n                    if inst.light then\n                        local intensity = GetLightIntensity(inst) * (0.8 + 0.4 * math.random())\n                        inst.Light:SetIntensity(intensity)\n                        \n                        -- Play a subtle sound occasionally\n                        if math.random() < 0.1 then  -- 10% chance each second\n                            inst.SoundEmitter:PlaySound("dontstarve/common/haunted_1", nil, 0.3)\n                        end\n                    end\n                end\n            end\n        end\n    end)\n\n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("soul_lantern", fn, assets, prefabs)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"step-5-component-interactions",children:"Step 5: Component Interactions"}),"\n",(0,o.jsx)(e.p,{children:"Let's examine how the different components interact in our Soul Lantern:"}),"\n",(0,o.jsx)(e.h3,{id:"fueled--equippable-interaction",children:"Fueled + Equippable Interaction"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"fueled"})," component manages the soul energy level, while the ",(0,o.jsx)(e.code,{children:"equippable"})," component handles when the item is worn. These interact in several ways:"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"When equipped, the lantern checks fuel level and turns on if fuel is available"}),"\n",(0,o.jsx)(e.li,{children:"When unequipped, the lantern turns off to conserve fuel"}),"\n",(0,o.jsx)(e.li,{children:"The sanity aura (dapperness) of the equipped lantern scales with fuel level"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- When equipped, check fuel and turn on if possible\nlocal function OnEquip(inst, owner)\n    -- ... other equip code ...\n    \n    -- Turn on the lantern when equipped if it has fuel\n    if inst.components.fueled:GetPercent() > 0 then\n        OnTurnOn(inst)\n    end\n    \n    -- Update sanity aura based on fuel level\n    local percent = inst.components.fueled:GetPercent()\n    local sanity_bonus = Lerp(0.1, 1.0, percent)\n    inst.components.equippable.dapperness = sanity_bonus / TUNING.TOTAL_DAY_TIME\nend\n"})}),"\n",(0,o.jsx)(e.h3,{id:"fueled--light-interaction",children:"Fueled + Light Interaction"}),"\n",(0,o.jsx)(e.p,{children:"The light properties (radius, intensity, color) change based on the fuel level:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- Update light color based on fuel level\nlocal function UpdateLightColor(inst)\n    local fueled = inst.components.fueled\n    if fueled and inst.light then\n        local percent = fueled:GetPercent()\n        \n        -- Shift from blue (low) to purple (full)\n        local r = Lerp(0.1, 0.6, percent)\n        local g = Lerp(0.1, 0.0, percent)\n        local b = Lerp(0.7, 0.8, percent)\n        \n        inst.Light:SetColour(r, g, b)\n        \n        -- Update light radius and intensity\n        inst.Light:SetRadius(GetLightRadius(inst))\n        inst.Light:SetIntensity(GetLightIntensity(inst))\n    end\nend\n"})}),"\n",(0,o.jsx)(e.h3,{id:"weapon--fueled-interaction",children:"Weapon + Fueled Interaction"}),"\n",(0,o.jsx)(e.p,{children:"Using the lantern as a weapon can generate additional fuel when hitting monsters:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Function called when attacking with the lantern\nlocal function OnAttack(inst, owner, target)\n    -- ... other attack code ...\n    \n    -- Chance to steal soul on hit\n    if target and target:HasTag("monster") and math.random() < 0.2 then  -- 20% chance\n        if inst.components.fueled then\n            local soul_value = GetModConfigData("soul_value") / 2\n            inst.components.fueled:DoDelta(soul_value)\n            \n            -- Visual effect\n            local fx = SpawnPrefab("statue_transition")\n            if fx then\n                fx.Transform:SetPosition(target.Transform:GetWorldPosition())\n                fx.Transform:SetScale(0.3, 0.3, 0.3)\n            end\n        end\n    end\nend\n'})}),"\n",(0,o.jsx)(e.h3,{id:"inspectable--fueled-interaction",children:"Inspectable + Fueled Interaction"}),"\n",(0,o.jsx)(e.p,{children:"The inspection text changes based on the fuel level:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- Function to update the appearance based on fuel level\nlocal function UpdateAppearance(inst)\n    if not inst.components.fueled then return end\n    \n    local percent = inst.components.fueled:GetPercent()\n    \n    -- Update inspection text based on fuel level\n    if percent <= 0.25 then\n        inst.components.inspectable.nameoverride = "SOUL_LANTERN_EMPTY"\n    elseif percent <= 0.5 then\n        inst.components.inspectable.nameoverride = "SOUL_LANTERN_LOW"\n    elseif percent <= 0.75 then\n        inst.components.inspectable.nameoverride = "SOUL_LANTERN_MEDIUM"\n    else\n        inst.components.inspectable.nameoverride = "SOUL_LANTERN_FULL"\n    end\n    \n    -- ... other appearance updates ...\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"step-6-testing-your-mod",children:"Step 6: Testing Your Mod"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Launch Don't Starve Together"}),"\n",(0,o.jsx)(e.li,{children:"Enable your mod in the Mods menu"}),"\n",(0,o.jsx)(e.li,{children:"Start a new game"}),"\n",(0,o.jsx)(e.li,{children:"Craft your Soul Lantern (requires boards, nightmare fuel, and gears)"}),"\n",(0,o.jsxs)(e.li,{children:["Test the lantern by:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Equipping it to see the light effect"}),"\n",(0,o.jsx)(e.li,{children:"Killing monsters to collect souls"}),"\n",(0,o.jsx)(e.li,{children:"Watching the appearance change as it fills with souls"}),"\n",(0,o.jsx)(e.li,{children:"Using it as a weapon and observing the special effects"}),"\n",(0,o.jsx)(e.li,{children:"Checking the sanity boost as the lantern fills"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,o.jsx)(e.p,{children:"Here are some ways to enhance your Soul Lantern:"}),"\n",(0,o.jsx)(e.h3,{id:"add-custom-animations",children:"Add Custom Animations"}),"\n",(0,o.jsx)(e.p,{children:"For a fully custom appearance, create your own animation files:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["Create ",(0,o.jsx)(e.code,{children:"anim/soul_lantern.zip"})," with custom animations"]}),"\n",(0,o.jsx)(e.li,{children:"Update the prefab file:"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/soul_lantern.zip"),\n    Asset("ANIM", "anim/swap_soul_lantern.zip"),\n    -- Other assets...\n}\n\n-- Then in the fn() function:\ninst.AnimState:SetBank("soul_lantern")\ninst.AnimState:SetBuild("soul_lantern")\n'})}),"\n",(0,o.jsx)(e.h3,{id:"add-more-soul-collection-methods",children:"Add More Soul Collection Methods"}),"\n",(0,o.jsx)(e.p,{children:"Expand the ways to collect souls:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- In modmain.lua, add this to collect souls from ghosts being caught\nAddPrefabPostInit("ghostlyelixir_slowregen", function(inst)\n    if inst.components.ghostlyelixir then\n        local old_apply = inst.components.ghostlyelixir.onconsumedfn\n        inst.components.ghostlyelixir.onconsumedfn = function(inst, ghost, doer)\n            if old_apply then\n                old_apply(inst, ghost, doer)\n            end\n            \n            -- Check if the catcher has a soul lantern\n            if doer and doer.components.inventory then\n                local lantern = doer.components.inventory:FindItem(function(item)\n                    return item.prefab == "soul_lantern"\n                end)\n                \n                if lantern and lantern.components.fueled then\n                    -- Add extra souls when catching a ghost\n                    lantern.components.fueled:DoDelta(GetModConfigData("soul_value") * 2)\n                    \n                    -- Visual effect\n                    local fx = SpawnPrefab("statue_transition_2")\n                    if fx then\n                        fx.Transform:SetPosition(ghost.Transform:GetWorldPosition())\n                    end\n                end\n            end\n        end\n    end\nend)\n'})}),"\n",(0,o.jsx)(e.h3,{id:"add-special-powers-based-on-fuel-level",children:"Add Special Powers Based on Fuel Level"}),"\n",(0,o.jsx)(e.p,{children:"Give the lantern additional abilities when fully charged:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- In the OnEquip function, add:\ninst:DoPeriodicTask(1, function()\n    if inst.components.fueled:GetPercent() > 0.9 then  -- When nearly full\n        local owner = inst.components.inventoryitem.owner\n        if owner then\n            -- Create a protective aura\n            local x, y, z = owner.Transform:GetWorldPosition()\n            local ents = TheSim:FindEntities(x, y, z, 5, {"ghost", "monster"})\n            \n            for _, ent in ipairs(ents) do\n                if ent.components.combat and ent.components.combat:TargetIs(owner) then\n                    -- Chance to make monsters flee\n                    if math.random() < 0.1 then  -- 10% chance each second\n                        if ent.components.combat then\n                            ent.components.combat:DropTarget()\n                        end\n                        \n                        if ent.components.locomotor then\n                            ent.components.locomotor:RunAway(owner, 10, 10)\n                        end\n                        \n                        -- Visual effect\n                        local fx = SpawnPrefab("statue_transition")\n                        if fx then\n                            fx.Transform:SetPosition(ent.Transform:GetWorldPosition())\n                        end\n                    end\n                end\n            end\n        end\n    end\nend)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,o.jsx)(e.h3,{id:"problem-components-not-interacting-correctly",children:"Problem: Components not interacting correctly"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Solution"}),": Make sure you're updating component properties in the right order and checking if components exist before using them"]}),"\n",(0,o.jsx)(e.h3,{id:"problem-fuel-not-being-consumed-or-added-correctly",children:"Problem: Fuel not being consumed or added correctly"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Solution"}),": Verify that you're using the correct fuel type and that the fueled component is properly initialized"]}),"\n",(0,o.jsx)(e.h3,{id:"problem-visual-effects-not-appearing",children:"Problem: Visual effects not appearing"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Solution"}),": Check that you're spawning the effects at the correct position and that the prefabs exist in the game"]}),"\n",(0,o.jsx)(e.h3,{id:"problem-sanity-aura-not-working",children:"Problem: Sanity aura not working"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Solution"}),": Make sure you're setting the dapperness value correctly and updating it when fuel changes"]}),"\n",(0,o.jsx)(e.h2,{id:"advanced-component-integration",children:"Advanced Component Integration"}),"\n",(0,o.jsx)(e.p,{children:"For even more complex items, consider these advanced techniques:"}),"\n",(0,o.jsx)(e.h3,{id:"creating-custom-components",children:"Creating Custom Components"}),"\n",(0,o.jsx)(e.p,{children:"If existing components don't provide the functionality you need, you can create custom components:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"-- In scripts/components/soulcollector.lua\nlocal SoulCollector = Class(function(self, inst)\n    self.inst = inst\n    self.souls_collected = 0\n    self.max_souls = 100\n    self.soul_power = 1\n    self.on_collect_fn = nil\nend)\n\nfunction SoulCollector:CollectSoul(value)\n    value = value or self.soul_power\n    self.souls_collected = math.min(self.souls_collected + value, self.max_souls)\n    \n    if self.on_collect_fn then\n        self.on_collect_fn(self.inst, self.souls_collected)\n    end\n    \n    return true\nend\n\nfunction SoulCollector:SetOnCollectFn(fn)\n    self.on_collect_fn = fn\nend\n\nreturn SoulCollector\n"})}),"\n",(0,o.jsx)(e.h3,{id:"component-communication-through-events",children:"Component Communication Through Events"}),"\n",(0,o.jsx)(e.p,{children:"Components can communicate through events for more complex interactions:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'-- When fuel changes, trigger a custom event\ninst:ListenForEvent("percentusedchange", function(inst, data)\n    inst:PushEvent("soulschanged", {percent = data.percent})\nend)\n\n-- Listen for the custom event in another component\ninst:ListenForEvent("soulschanged", function(inst, data)\n    -- Update other components based on soul level\n    if inst.components.weapon then\n        local base_damage = GetModConfigData("weapon_damage")\n        local bonus = math.floor(base_damage * data.percent * 0.5)\n        inst.components.weapon:SetDamage(base_damage + bonus)\n    end\nend)\n'})}),"\n",(0,o.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(e.p,{children:"Now that you've created a complex item with multiple interacting components, you can:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Add More Component Interactions"}),": Create even more complex behaviors through component communication"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Create a Set of Related Items"}),": Design items that work together or share resources"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Add Character-Specific Behaviors"}),": Make the item behave differently based on who's using it"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Expand with Custom Components"}),": Create entirely new components for unique behaviors"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["For more advanced modding techniques, check out the ",(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-component",children:"Custom Component"})," and ",(0,o.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/stategraph-mod",children:"Stategraph Mod"})," tutorials."]})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}}}]);