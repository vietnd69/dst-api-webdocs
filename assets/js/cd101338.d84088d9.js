"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[72900],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(96540);const t={},c=i.createContext(t);function r(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(c.Provider,{value:n},e.children)}},90020:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>o,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"game-scripts/core-systems/game-mechanics/achievements/eventachievements","title":"Event Achievements","description":"System for managing event-based achievements and quest progression","source":"@site/docs/game-scripts/core-systems/game-mechanics/achievements/eventachievements.md","sourceDirName":"game-scripts/core-systems/game-mechanics/achievements","slug":"/game-scripts/core-systems/game-mechanics/achievements/eventachievements","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/achievements/eventachievements","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"eventachievements","title":"Event Achievements","description":"System for managing event-based achievements and quest progression","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"}}');var t=s(74848),c=s(28453);const r={id:"eventachievements",title:"Event Achievements",description:"System for managing event-based achievements and quest progression",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="Event Achievements",l={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Class: EventAchievements",id:"class-eventachievements",level:2},{value:"Constructor",id:"constructor",level:3},{value:"EventAchievements()",id:"constructor",level:4},{value:"Methods",id:"methods",level:3},{value:"event_achievements(data)",id:"load-achievements-for-event",level:4},{value:"event_achievements()",id:"get-active-achievements-id-list",level:4},{value:"event_achievements(eventid, season)",id:"get-achievements-category-list",level:4},{value:"event_achievements(eventid, season, achievementid)",id:"find-achievement-data",level:4},{value:"event_achievements(eventid, season, achievementid)",id:"is-achievement-unlocked",level:4},{value:"event_achievements(eventid, season)",id:"get-num-achievements-unlocked",level:4},{value:"event_achievements(achievementid)",id:"set-achievement-temp-unlocked",level:4},{value:"event_achievements(achievementid)",id:"is-active-achievement",level:4},{value:"event_achievements(eventid, season)",id:"get-all-unlocked-achievements",level:4},{value:"event_achievements(quest_data)",id:"set-active-quests",level:4},{value:"event_achievements(quest_id, character)",id:"build-full-quest-name",level:4},{value:"event_achievements(quest_name)",id:"parse-full-quest-name",level:4},{value:"Quest Name Format",id:"quest-name-format",level:2},{value:"Integration with Game Systems",id:"integration-with-game-systems",level:2},{value:"Inventory System",id:"inventory-system",level:3},{value:"Festival Events",id:"festival-events",level:3},{value:"Related Modules",id:"related-modules",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"event-achievements",children:"Event Achievements"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"EventAchievements"})," class manages event-based achievements and quest progression for seasonal events in Don't Starve Together. It handles loading achievement data, tracking completion status, and managing quest names for different events and seasons."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Create event achievements manager\nlocal event_achievements = EventAchievements()\n\n-- Load achievements for an event\nlocal achievement_data = {\n    eventid = "winter_feast",\n    seasons = {"winter"},\n    achievements = {\n        {\n            name = "Winter Challenges",\n            data = {\n                {achievementid = "winter_quest_1", daily = false},\n                {achievementid = "winter_quest_2", daily = true}\n            }\n        }\n    }\n}\nevent_achievements:LoadAchievementsForEvent(achievement_data)\n\n-- Check if achievement is unlocked\nlocal is_unlocked = event_achievements:IsAchievementUnlocked("winter_feast", "winter", "winter_quest_1")\nprint("Quest completed:", is_unlocked)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"class-eventachievements",children:"Class: EventAchievements"}),"\n",(0,t.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.h4,{id:"constructor",children:"EventAchievements()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates a new EventAchievements instance with empty achievement lists and quest data."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(EventAchievements): New EventAchievements instance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local event_achievements = EventAchievements()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.h4,{id:"load-achievements-for-event",children:["event_achievements",":LoadAchievementsForEvent","(data)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nLoads achievement data for a specific event and seasons. If the event is currently active, it also creates a flattened list for quick access and adds test functions if provided."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data"})," (table): Achievement data structure containing:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventid"})," (string): Unique identifier for the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"seasons"})," (table): Array of season names this data applies to"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"achievements"})," (table): Array of achievement categories with their data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"impl"})," (table, optional): Implementation object with test functions"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local data = {\n    eventid = "winter_feast",\n    seasons = {"winter"},\n    achievements = {\n        {\n            name = "Daily Challenges",\n            data = {\n                {achievementid = "daily_1", daily = true},\n                {achievementid = "daily_2", daily = true}\n            }\n        },\n        {\n            name = "Event Challenges", \n            data = {\n                {achievementid = "event_1", daily = false}\n            }\n        }\n    },\n    impl = achievement_test_functions\n}\nevent_achievements:LoadAchievementsForEvent(data)\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"get-active-achievements-id-list",children:["event_achievements",":GetActiveAchievementsIdList","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the flattened list of active achievements indexed by achievement ID. Only populated for the currently active event and season."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Dictionary of achievement data indexed by achievement ID"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local active_achievements = event_achievements:GetActiveAchievementsIdList()\nfor achievement_id, achievement_data in pairs(active_achievements) do\n    print("Active achievement:", achievement_id, achievement_data.daily)\nend\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"get-achievements-category-list",children:["event_achievements",":GetAchievementsCategoryList","(eventid, season)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the achievement categories for a specific event and season."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventid"})," (string): The event identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"season"})," (string): The season identifier"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Array of achievement categories with their data"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local categories = event_achievements:GetAchievementsCategoryList("winter_feast", "winter")\nfor _, category in ipairs(categories) do\n    print("Category:", category.name)\n    for _, achievement in ipairs(category.data) do\n        print("  Achievement:", achievement.achievementid)\n    end\nend\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"find-achievement-data",children:["event_achievements",":FindAchievementData","(eventid, season, achievementid)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nFinds and returns the data for a specific achievement within an event and season."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventid"})," (string): The event identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"season"})," (string): The season identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"achievementid"})," (string): The achievement identifier to find"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table|nil): Achievement data table, or nil if not found"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local achievement = event_achievements:FindAchievementData("winter_feast", "winter", "daily_1")\nif achievement then\n    print("Found achievement:", achievement.achievementid, "Daily:", achievement.daily)\nend\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"is-achievement-unlocked",children:["event_achievements",":IsAchievementUnlocked","(eventid, season, achievementid)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if a specific achievement is unlocked for the given event and season."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventid"})," (string): The event identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"season"})," (string): The season identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"achievementid"})," (string): The achievement identifier to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if the achievement is unlocked, false otherwise"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local unlocked = event_achievements:IsAchievementUnlocked("winter_feast", "winter", "daily_1")\nif unlocked then\n    print("Achievement completed!")\nend\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"get-num-achievements-unlocked",children:["event_achievements",":GetNumAchievementsUnlocked","(eventid, season)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the number of unlocked achievements and total achievements for an event and season."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventid"})," (string): The event identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"season"})," (string): The season identifier"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Number of unlocked achievements"}),"\n",(0,t.jsx)(n.li,{children:"(number): Total number of achievements"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local unlocked, total = event_achievements:GetNumAchievementsUnlocked("winter_feast", "winter")\nprint(string.format("Progress: %d/%d achievements completed", unlocked, total))\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"set-achievement-temp-unlocked",children:["event_achievements",":SetAchievementTempUnlocked","(achievementid)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nTemporarily unlocks an achievement for the active event. This is typically used for testing purposes."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"achievementid"})," (string): The achievement identifier to temporarily unlock"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Temporarily unlock for testing\nevent_achievements:SetAchievementTempUnlocked("daily_1")\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"is-active-achievement",children:["event_achievements",":IsActiveAchievement","(achievementid)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if an achievement ID corresponds to an active achievement in the current event."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"achievementid"})," (string): The achievement identifier to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if the achievement is part of the active event"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local is_active = event_achievements:IsActiveAchievement("daily_1")\nif is_active then\n    print("This achievement is part of the current event")\nend\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"get-all-unlocked-achievements",children:["event_achievements",":GetAllUnlockedAchievements","(eventid, season)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns all unlocked achievements for a specific event and season."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventid"})," (string): The event identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"season"})," (string): The season identifier"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Array of unlocked achievement IDs"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local unlocked = event_achievements:GetAllUnlockedAchievements("winter_feast", "winter")\nfor _, achievement_id in ipairs(unlocked) do\n    print("Unlocked:", achievement_id)\nend\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"set-active-quests",children:["event_achievements",":SetActiveQuests","(quest_data)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSets the active quest data used for generating full quest names."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"quest_data"})," (table): Quest data containing version, days, and special quest information"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local quest_data = {\n    version = 1,\n    event_day = 5,\n    quest_day = 3,\n    special1 = {quest = "special_quest_1"},\n    special2 = {quest = "special_quest_2"}\n}\nevent_achievements:SetActiveQuests(quest_data)\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"build-full-quest-name",children:["event_achievements",":BuildFullQuestName","(quest_id, character)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nBuilds a full quest name including version, day, and character information for unique identification."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"quest_id"})," (string): The base quest identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"character"})," (string, optional): Character name for character-specific quests"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(string): Full quest name with versioning and day information"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Regular quest\nlocal quest_name = event_achievements:BuildFullQuestName("daily_1")\n-- Result: "daily_1-001-003"\n\n-- Character-specific quest\nlocal char_quest = event_achievements:BuildFullQuestName("special_quest_1", "wilson")\n-- Result: "special_quest_1-001-003-wilson"\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"parse-full-quest-name",children:["event_achievements",":ParseFullQuestName","(quest_name)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nParses a full quest name back into its component parts."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"quest_name"})," (string): The full quest name to parse"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Parsed quest data containing quest_id, version, day, character, and daily flag"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local parsed = event_achievements:ParseFullQuestName("daily_1-001-003-wilson")\nprint("Quest ID:", parsed.quest_id)        -- "daily_1"\nprint("Version:", parsed.version)          -- 1\nprint("Day:", parsed.day)                  -- 3\nprint("Character:", parsed.character)      -- "wilson"\nprint("Is Daily:", parsed.daily)           -- true/false\n'})}),"\n",(0,t.jsx)(n.h2,{id:"quest-name-format",children:"Quest Name Format"}),"\n",(0,t.jsx)(n.p,{children:"Quest names follow a specific format for versioning and tracking:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Format:"})," ",(0,t.jsx)(n.code,{children:"quest_id-version-day[-character]"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"quest_id"}),": Base quest identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"version"}),': 3-digit version number (e.g., "001")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"day"}),": 3-digit day number (event_day for dailies, quest_day for others)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"character"}),": Optional character name for character-specific quests"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-game-systems",children:"Integration with Game Systems"}),"\n",(0,t.jsx)(n.h3,{id:"inventory-system",children:"Inventory System"}),"\n",(0,t.jsxs)(n.p,{children:["The EventAchievements system integrates with ",(0,t.jsx)(n.code,{children:"TheInventory"})," to:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check achievement unlock status"}),"\n",(0,t.jsx)(n.li,{children:"Set temporary unlocks for testing"}),"\n",(0,t.jsx)(n.li,{children:"Retrieve server-specific achievement data"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"festival-events",children:"Festival Events"}),"\n",(0,t.jsx)(n.p,{children:"Works with festival event functions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetFestivalEventSeasons()"}),": Get seasons for an event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetFestivalEventServerName()"}),": Get server name for event/season"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetActiveFestivalEventServerName()"}),": Get current active event server name"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/achievements/",children:"Achievements"}),": Core achievement system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./events.md",children:"Events"}),": Event handling system used for achievement triggers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./playerprofile.md",children:"Player Profile"}),": Player data storage for achievement progress"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./frontend.md",children:"Frontend"}),": UI components for displaying achievement progress"]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);