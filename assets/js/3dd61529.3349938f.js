"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[4925],{7648:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api-vanilla/entity-framework/tags","title":"Tag System","description":"The tag system in Don\'t Starve Together is a lightweight method for categorizing and identifying entities. Tags are simple string labels attached to entities that allow for quick filtering and identification without the overhead of checking components or other properties.","source":"@site/docs/api-vanilla/entity-framework/tags.md","sourceDirName":"api-vanilla/entity-framework","slug":"/api-vanilla/entity-framework/tags","permalink":"/dst-api-webdocs/docs/api-vanilla/entity-framework/tags","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"tags","title":"Tag System","sidebar_position":2,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"EntityScript","permalink":"/dst-api-webdocs/docs/api-vanilla/entity-framework/entityscript"},"next":{"title":"Global Objects","permalink":"/dst-api-webdocs/docs/category/global-objects"}}');var i=t(4848),s=t(8453);const r={id:"tags",title:"Tag System",sidebar_position:2,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="Tag System",l={},c=[{value:"Basic Tag Operations",id:"basic-tag-operations",level:2},{value:"Common Tag Categories",id:"common-tag-categories",level:2},{value:"Entity Type Tags",id:"entity-type-tags",level:3},{value:"State Tags",id:"state-tags",level:3},{value:"Capability Tags",id:"capability-tags",level:3},{value:"Interaction Tags",id:"interaction-tags",level:3},{value:"Finding Entities by Tags",id:"finding-entities-by-tags",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Filtering Entities",id:"filtering-entities",level:3},{value:"Conditional Behavior",id:"conditional-behavior",level:3},{value:"Component Requirements",id:"component-requirements",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Mistakes",id:"common-mistakes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tag-system",children:"Tag System"})}),"\n",(0,i.jsx)(n.p,{children:"The tag system in Don't Starve Together is a lightweight method for categorizing and identifying entities. Tags are simple string labels attached to entities that allow for quick filtering and identification without the overhead of checking components or other properties."}),"\n",(0,i.jsx)(n.h2,{id:"basic-tag-operations",children:"Basic Tag Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Add a tag to an entity\ninst:AddTag("mytag")\n\n-- Remove a tag from an entity\ninst:RemoveTag("mytag")\n\n-- Check if an entity has a specific tag\nlocal has_tag = inst:HasTag("mytag")\n\n-- Check if an entity has all of a set of tags\nlocal has_all = inst:HasTags("mytag1", "mytag2", "mytag3")\n\n-- Check if an entity has any of a set of tags\nlocal has_any = inst:HasOneOfTags("mytag1", "mytag2", "mytag3")\n\n-- Add or remove a tag based on a condition\ninst:AddOrRemoveTag("mytag", condition_is_true)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-tag-categories",children:"Common Tag Categories"}),"\n",(0,i.jsx)(n.h3,{id:"entity-type-tags",children:"Entity Type Tags"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Character type tags\n"player"          -- Is a player character\n"character"       -- Is any character\n"monster"         -- Is a hostile creature\n"animal"          -- Is a passive animal\n"structure"       -- Is a built structure\n"veggie"          -- Is a vegetable\n"meat"            -- Is meat\n"insect"          -- Is an insect\n'})}),"\n",(0,i.jsx)(n.h3,{id:"state-tags",children:"State Tags"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Entity state tags\n"frozen"          -- Entity is currently frozen\n"burning"         -- Entity is on fire\n"dead"            -- Entity is dead\n"cooked"          -- Food item is cooked\n"wet"             -- Entity is wet\n"poisoned"        -- Entity is poisoned\n"sleeping"        -- Entity is sleeping\n"busy"            -- Entity is in a busy state (can\'t take actions)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"capability-tags",children:"Capability Tags"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Capability tags\n"fire"            -- Produces fire/light\n"light"           -- Emits light\n"shelter"         -- Provides shelter from rain\n"heavy"           -- Is a heavy object (slows carrying character)\n"aquatic"         -- Can go in water\n"flying"          -- Can fly over obstacles\n"irreplaceable"   -- Can\'t be replaced if destroyed\n'})}),"\n",(0,i.jsx)(n.h3,{id:"interaction-tags",children:"Interaction Tags"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Interaction tags\n"pickable"        -- Can be picked\n"choppable"       -- Can be chopped\n"mineable"        -- Can be mined\n"hammerable"      -- Can be hammered\n"fishable"        -- Can be fished\n"cattoyairborne"  -- Can be batted by catcoon\n"trap"            -- Is a trap\n"edible"          -- Can be eaten\n'})}),"\n",(0,i.jsx)(n.h2,{id:"finding-entities-by-tags",children:"Finding Entities by Tags"}),"\n",(0,i.jsx)(n.p,{children:"Tags are commonly used with entity search functions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Find all entities with specific tags within a radius\nlocal x, y, z = inst.Transform:GetWorldPosition()\nlocal radius = 10\nlocal ents = TheSim:FindEntities(x, y, z, radius, \n    {"player"}, -- Must have these tags\n    {"playerghost"}) -- Must not have these tags\n    \n-- Process found entities\nfor _, entity in ipairs(ents) do\n    -- Do something with each entity\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"filtering-entities",children:"Filtering Entities"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Finding edible items in inventory\nlocal edible_items = {}\nfor k, v in pairs(self.items) do\n    if v:HasTag("edible") then\n        table.insert(edible_items, v)\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-behavior",children:"Conditional Behavior"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Different behavior based on tags\nfunction ShouldAttack(target)\n    -- Don\'t attack other players in non-PVP\n    if target:HasTag("player") and not TheNet:GetPVPEnabled() then\n        return false\n    end\n    \n    -- Don\'t attack if target is invulnerable\n    if target:HasTag("INLIMBO") or target:HasTag("notarget") then\n        return false\n    end\n    \n    -- Only attack enemies or prey\n    return target:HasOneOfTags({"monster", "prey"})\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"component-requirements",children:"Component Requirements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Some components check for tags\ninst:AddComponent("eater")\ninst.components.eater:SetDiet({ FOODTYPE.MEAT }, { "meat" })\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.p,{children:"When working with tags:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Tags for Fast Checks"}),": Tag checks are much faster than component checks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep Tag Names Simple"}),": Use lowercase, descriptive names without special characters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add Tags Early"}),": Add tags during entity creation for consistency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Specific Tags"}),": More specific tags allow for better filtering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document Custom Tags"}),": When creating custom tags for your mod, document their meaning and use"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consider Tag Conflicts"}),": Be aware that other mods might add or remove tags"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-mistakes",children:"Common Mistakes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overusing Tags"}),": Adding too many tags can increase memory usage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Using Tags for Data"}),": Tags should identify characteristics, not store data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Case Sensitivity"}),': Tags are case-sensitive; "player" and "PLAYER" are different tags']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing Negative Tags"}),": Sometimes you need to check for the absence of a tag"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);