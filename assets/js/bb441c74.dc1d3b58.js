"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3466],{1609:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/components/eater","title":"Eater","description":"The Eater component allows entities to consume edible items. It manages diet restrictions, eating behaviors, and handles the effects of consumed food.","source":"@site/docs/api-vanilla/components/eater.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/eater","permalink":"/dst-api-webdocs/docs/api-vanilla/components/eater","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":23,"frontMatter":{"id":"eater","title":"Eater","sidebar_position":23},"sidebar":"docs","previous":{"title":"Container","permalink":"/dst-api-webdocs/docs/api-vanilla/components/container"},"next":{"title":"Edible","permalink":"/dst-api-webdocs/docs/api-vanilla/components/edible"}}');var a=t(4848),o=t(8453);const s={id:"eater",title:"Eater",sidebar_position:23},r="Eater Component",d={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Diet Configuration",id:"diet-configuration",level:3},{value:"Eating Actions",id:"eating-actions",level:3},{value:"Diet Types",id:"diet-types",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"See also",id:"see-also",level:2},{value:"Example: Creating a Specialized Eater",id:"example-creating-a-specialized-eater",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"eater-component",children:"Eater Component"})}),"\n",(0,a.jsx)(n.p,{children:"The Eater component allows entities to consume edible items. It manages diet restrictions, eating behaviors, and handles the effects of consumed food."}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Add an eater component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("eater")\n\n-- Configure the eater component\nlocal eater = entity.components.eater\neater:SetDiet({FOODTYPE.VEGGIE, FOODTYPE.MEAT}, {FOODTYPE.ELEMENTAL, FOODTYPE.GEARS})\neater:SetCanEatHorrible(true)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Property"}),(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"preferseating"})}),(0,a.jsx)(n.td,{children:"Table"}),(0,a.jsx)(n.td,{children:"List of food types the entity prefers to eat"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"caneat"})}),(0,a.jsx)(n.td,{children:"Table"}),(0,a.jsx)(n.td,{children:"List of food types the entity can eat"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"cannoteat"})}),(0,a.jsx)(n.td,{children:"Table"}),(0,a.jsx)(n.td,{children:"List of food types the entity cannot eat"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"caneathealthvalue"})}),(0,a.jsx)(n.td,{children:"Boolean"}),(0,a.jsx)(n.td,{children:"Whether entity benefits from food health value"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"caneathungervalue"})}),(0,a.jsx)(n.td,{children:"Boolean"}),(0,a.jsx)(n.td,{children:"Whether entity benefits from food hunger value"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"caneatsanityvalue"})}),(0,a.jsx)(n.td,{children:"Boolean"}),(0,a.jsx)(n.td,{children:"Whether entity benefits from food sanity value"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"caneatrawe"})}),(0,a.jsx)(n.td,{children:"Boolean"}),(0,a.jsx)(n.td,{children:"Whether entity can eat raw meat"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"strongstomach"})}),(0,a.jsx)(n.td,{children:"Boolean"}),(0,a.jsx)(n.td,{children:"Whether entity is immune to monster food penalties"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"abletoeat"})}),(0,a.jsx)(n.td,{children:"Boolean"}),(0,a.jsx)(n.td,{children:"Whether entity can currently eat"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"eatsizecallback"})}),(0,a.jsx)(n.td,{children:"Function"}),(0,a.jsx)(n.td,{children:"Called to determine how much of a stack to eat"})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,a.jsx)(n.h3,{id:"diet-configuration",children:"Diet Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Set which food types can be eaten\neater:SetDiet({FOODTYPE.MEAT}, {FOODTYPE.VEGGIE})  -- Can eat meat, cannot eat veggies\n\n-- Set which food values are applied\neater:SetAbsorptionModifiers(1, 1, 0.5) -- Full health/hunger, half sanity\n\n-- Configure special eating abilities\neater:SetCanEatHorrible(true) -- Can eat monster meat without penalties\neater:SetCanEatRaw(false) -- Cannot eat raw meat\neater:SetStrongStomach(true) -- Immune to food spoilage penalties\n"})}),"\n",(0,a.jsx)(n.h3,{id:"eating-actions",children:"Eating Actions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Try to eat a specific food\nlocal did_eat = eater:Eat(food_item)\n\n-- Check if can eat a specific food\nlocal can_eat = eater:CanEat(food_item)\n\n-- Calculate food values when eaten by this eater\nlocal health, hunger, sanity = eater:GetEdibleValue(food_item)\n\n-- Set callback for when food is eaten\neater:SetOnEatFn(function(inst, food)\n    -- Do something when food is eaten\n    print(inst.prefab .. " ate " .. food.prefab)\nend)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"diet-types",children:"Diet Types"}),"\n",(0,a.jsx)(n.p,{children:"Eaters can have various diet restrictions:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Omnivore"})," - Can eat everything (default for players)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Carnivore"})," - Can only eat meat"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Vegetarian"})," - Can only eat vegetables/fruits"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Specialized"})," - Custom diet restrictions (like only eating wood, souls, etc.)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,a.jsx)(n.p,{children:"The Eater component often works with:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Edible"})," - For items that can be eaten"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Health"})," - To apply health effects from food"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Hunger"})," - To apply hunger effects from food"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Sanity"})," - To apply sanity effects from food"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Temperature"})," - For temperature effects from food"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Inventory"})," - For managing eaten items"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/edible",children:"Edible Component"})," - For defining food properties"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/health",children:"Health Component"})," - For health effects from eating"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/hunger",children:"Hunger Component"})," - For hunger effects from eating"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/sanity",children:"Sanity Component"})," - For sanity effects from eating"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/temperature",children:"Temperature Component"})," - For temperature effects from food"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/perishable",children:"Perishable Component"})," - For food spoilage effects"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example-creating-a-specialized-eater",children:"Example: Creating a Specialized Eater"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function MakeWoodEater()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    \n    -- Add health and hunger\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(150)\n    \n    inst:AddComponent("hunger")\n    inst.components.hunger:SetMax(100)\n    \n    -- Configure specialized eater that only eats wood\n    inst:AddComponent("eater")\n    local eater = inst.components.eater\n    \n    -- Can only eat items with FOODTYPE.WOOD\n    eater:SetDiet({FOODTYPE.WOOD}, {FOODTYPE.MEAT, FOODTYPE.VEGGIE, FOODTYPE.GENERIC})\n    \n    -- Apply only hunger value, no health/sanity\n    eater:SetAbsorptionModifiers(0, 1, 0)\n    \n    -- Add special effect when eating wood\n    eater:SetOnEatFn(function(inst, food)\n        -- Gain armor temporarily when eating wood\n        if inst.components.armor == nil then\n            inst:AddComponent("armor")\n        end\n        inst.components.armor:SetPercent(1)\n        inst.components.armor:SetAbsorption(0.5)\n        \n        -- Remove armor after 60 seconds\n        inst:DoTaskInTime(60, function()\n            inst:RemoveComponent("armor")\n        end)\n    end)\n    \n    return inst\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(6540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);