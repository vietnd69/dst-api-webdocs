"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[58279],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(96540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},28849:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"game-scripts/core-systems/development-tools/debugging/stacktrace","title":"Stack Trace","description":"Debug stack trace and error handling utilities for Lua error analysis and debugging","source":"@site/docs/game-scripts/core-systems/development-tools/debugging/stacktrace.md","sourceDirName":"game-scripts/core-systems/development-tools/debugging","slug":"/game-scripts/core-systems/development-tools/debugging/stacktrace","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/stacktrace","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"stacktrace","title":"Stack Trace","description":"Debug stack trace and error handling utilities for Lua error analysis and debugging","sidebar_position":9,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Inspect","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/inspect"},"next":{"title":"Profiling Tools Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/profiling/"}}');var t=r(74848),i=r(28453);const l={id:"stacktrace",title:"Stack Trace",description:"Debug stack trace and error handling utilities for Lua error analysis and debugging",sidebar_position:9,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="Stack Trace",c={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"SaveToString(v)",id:"save-to-string",level:3},{value:"getdebuglocals(res, level)",id:"get-debug-locals",level:3},{value:"getdebugstack(res, start, top, bottom)",id:"get-debug-stack",level:3},{value:"DoStackTrace(err)",id:"do-stack-trace",level:3},{value:"StackTrace(err)",id:"stack-trace",level:3},{value:"StackTraceToLog()",id:"stack-trace-to-log",level:3},{value:"Global Variables",id:"global-variables",level:2},{value:"_TRACEBACK",id:"_traceback",level:3},{value:"Internal Functions",id:"internal-functions",level:2},{value:"getfiltersource(src)",id:"get-filter-source",level:3},{value:"getformatinfo(info)",id:"get-format-info",level:3},{value:"Configuration",id:"configuration",level:2},{value:"String Truncation",id:"string-truncation",level:3},{value:"Stack Frame Limits",id:"stack-frame-limits",level:3},{value:"Error Handling Patterns",id:"error-handling-patterns",level:2},{value:"Basic Error Tracing",id:"basic-error-tracing",level:3},{value:"Debug Context Capture",id:"debug-context-capture",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Technical Notes",id:"technical-notes",level:2},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Lua Debug Integration",id:"lua-debug-integration",level:3},{value:"Memory Management",id:"memory-management",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"stack-trace",children:"Stack Trace"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"stacktrace"})," module provides comprehensive debugging utilities for Lua error analysis and stack trace generation. It includes functions for safe value conversion, local variable inspection, stack trace formatting, and error handling with detailed context information."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Generate a stack trace for current execution context\nlocal trace = StackTrace("Custom error message")\nprint(trace)\n\n-- Print stack trace directly to log\nStackTraceToLog()\n\n-- Safe string conversion with truncation\nlocal safeStr = SaveToString(complexObject)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"save-to-string",children:"SaveToString(v)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSafely converts any Lua value to a string representation with error handling and length truncation to prevent memory issues."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"v"})," (any): The value to convert to string"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(string): String representation of the value, truncated if necessary"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Error-safe conversion using ",(0,t.jsx)(n.code,{children:"xpcall"})]}),"\n",(0,t.jsx)(n.li,{children:"Automatic truncation at 1024 characters"}),"\n",(0,t.jsx)(n.li,{children:"Fallback message for conversion failures"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Safe conversion of complex objects\nlocal complexTable = { nested = { data = "value" } }\nlocal str = SaveToString(complexTable)  -- "table: 0x..."\n\n-- Handles conversion errors gracefully\nlocal problematicValue = setmetatable({}, { __tostring = function() error("fail") end })\nlocal safeStr = SaveToString(problematicValue)  -- "*** failed to evaluate ***"\n\n-- Automatic truncation for long strings\nlocal longStr = string.rep("a", 2000)\nlocal truncated = SaveToString(longStr)  -- ends with " [**truncated**]"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-debug-locals",children:"getdebuglocals(res, level)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nExtracts and formats local variables from a specific stack level, with special handling for ",(0,t.jsx)(n.code,{children:"self"})," references and entity validation."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"res"})," (table): Result table to append formatted local variable information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"level"})," (number): Stack level to inspect (relative to caller)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(string): Concatenated string of formatted local variables"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Special Handling:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Self References"}),": Expanded with validity checking for entities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Functions"}),": Shows definition location and line numbers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Entities"}),": Displays validity status using ",(0,t.jsx)(n.code,{children:"IsValid()"})," method"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compiler Variables"}),': Filters out variables starting with "("']}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Extract locals from current stack level\nlocal result = {}\ngetdebuglocals(result, 0)\n\n-- Example output format:\n--   self (valid:true) =\n--      component = table: 0x... (valid:true)\n--      prefab = "wilson"\n--      Transform = function - scripts/components/transform.lua:15\n--   playerName = "Player1"\n--   healthValue = 100\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-debug-stack",children:"getdebugstack(res, start, top, bottom)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nGenerates a detailed stack trace with local variable information for each stack frame."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"res"})," (table): Result table to append stack trace information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"start"})," (number, optional): Starting stack level (default: 1)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"top"})," (number, optional): Number of top stack frames to include (default: 12)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bottom"})," (number, optional): Number of bottom stack frames to include (default: 10)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): The modified result table with stack trace information"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Automatic stack depth detection"}),"\n",(0,t.jsx)(n.li,{children:"Intelligent frame truncation for large stacks"}),"\n",(0,t.jsx)(n.li,{children:"Local variable extraction for each frame"}),"\n",(0,t.jsx)(n.li,{children:"Source file and line number information"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local result = {}\ngetdebugstack(result, 1, 5, 3)\n\n-- Example output includes:\n-- @scripts/prefabs/player.lua:45 in (local) DoSomething (Lua) <40-50>\n--   health = 100\n--   player = table: 0x... (valid:true)\n-- @scripts/main.lua:123 in (global) main (main) <1-200>\n--   dt = 0.016667\n"})}),"\n",(0,t.jsx)(n.h3,{id:"do-stack-trace",children:"DoStackTrace(err)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nInternal function that generates a complete stack trace with error message formatting and local variable details."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"err"})," (string, optional): Error message to include in the trace"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(string): Formatted stack trace with error information"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Error Handling:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Processes multi-line error messages"}),"\n",(0,t.jsx)(n.li,{children:'Prefixes error lines with "#" for identification'}),"\n",(0,t.jsx)(n.li,{children:"Includes comprehensive stack information"}),"\n",(0,t.jsx)(n.li,{children:"Handles nested error scenarios"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Generate stack trace with custom error\nlocal trace = DoStackTrace("Custom error occurred")\n\n-- Example output:\n-- #Custom error occurred\n-- #LUA ERROR stack traceback:\n-- @scripts/example.lua:10 in (local) errorFunction (Lua) <8-15>\n--   errorMsg = "Custom error occurred"\n-- @scripts/main.lua:5 in (global) main (main) <1-20>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"stack-trace",children:"StackTrace(err)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nMain function for generating stack traces with comprehensive error handling and panic recovery."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"err"})," (string, optional): Error message to include in the trace"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(string): Complete formatted stack trace"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Safety Features:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Panic recovery mechanism for recursive errors"}),"\n",(0,t.jsx)(n.li,{children:"Fallback to basic debug information"}),"\n",(0,t.jsxs)(n.li,{children:["Protected execution using ",(0,t.jsx)(n.code,{children:"xpcall"})]}),"\n",(0,t.jsx)(n.li,{children:"Graceful degradation on errors"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Generate stack trace for debugging\nlocal function problemFunction()\n    local trace = StackTrace("Something went wrong")\n    return trace\nend\n\n-- Use with error handling\nlocal status, result = pcall(riskyFunction)\nif not status then\n    local trace = StackTrace(result)\n    print("Error occurred:", trace)\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"stack-trace-to-log",children:"StackTraceToLog()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nConvenience function that generates a stack trace for the current execution context and prints it directly to the log."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"}),"\nNone (outputs to log)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Usage Context:"}),"\nIdeal for debugging scenarios where immediate log output is needed without error context."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Debug current execution context\nfunction debugCurrentState()\n    print("Current state:")\n    StackTraceToLog()  -- Prints trace to log immediately\nend\n\n-- Use in conditional debugging\nif DEBUG_MODE then\n    StackTraceToLog()\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"global-variables",children:"Global Variables"}),"\n",(0,t.jsx)(n.h3,{id:"_traceback",children:"_TRACEBACK"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Value:"})," Reference to ",(0,t.jsx)(n.code,{children:"StackTrace"})," function"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nGlobal reference to the main stack trace function, allowing it to be used as a standard Lua error handler."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Set as global error handler\ndebug.traceback = _TRACEBACK\n\n-- Use in xpcall\nlocal success, result = xpcall(riskyFunction, _TRACEBACK)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"internal-functions",children:"Internal Functions"}),"\n",(0,t.jsx)(n.h3,{id:"get-filter-source",children:"getfiltersource(src)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})," (internal)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nInternal utility that filters and formats source file paths for display in stack traces."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Processing:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Removes "@" prefix from source paths'}),"\n",(0,t.jsx)(n.li,{children:"Handles missing source information"}),"\n",(0,t.jsx)(n.li,{children:'Returns filtered path or "[?]" placeholder'}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"get-format-info",children:"getformatinfo(info)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})," (internal)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nInternal function that formats debug info structures into readable stack frame descriptions."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Format Pattern:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"@source:line in (namewhat) name (what) <startline-endline>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"string-truncation",children:"String Truncation"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Maximum Length:"})," 1024 characters"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose:"})," Prevents memory issues with extremely large object representations"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior:"}),' Appends " [',(0,t.jsx)(n.strong,{children:"truncated"}),']" to indicate truncation']}),"\n",(0,t.jsx)(n.h3,{id:"stack-frame-limits",children:"Stack Frame Limits"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Default Top Frames:"})," 12"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Default Bottom Frames:"})," 10"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Adaptive Behavior:"})," Adjusts limits based on total stack depth"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-patterns",children:"Error Handling Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"basic-error-tracing",children:"Basic Error Tracing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local function safeOperation()\n    local success, result = xpcall(\n        dangerousFunction,\n        StackTrace\n    )\n    \n    if not success then\n        print("Operation failed:", result)\n        return nil\n    end\n    \n    return result\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"debug-context-capture",children:"Debug Context Capture"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local function debugWrapper(func, ...)\n    print("Before operation:")\n    StackTraceToLog()\n    \n    local result = func(...)\n    \n    print("After operation:")\n    StackTraceToLog()\n    \n    return result\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debughelpers",children:"Debug Helpers"}),": Additional debugging utilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugcommands",children:"Debug Commands"}),": Interactive debugging commands"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/development-tools/debugging/debugprint",children:"Debug Print"}),": Debug output formatting"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./knownerrors.md",children:"Known Errors"}),": Common error patterns and solutions"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"technical-notes",children:"Technical Notes"}),"\n",(0,t.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Stack trace generation is expensive; use judiciously"}),"\n",(0,t.jsx)(n.li,{children:"Local variable inspection can be memory-intensive"}),"\n",(0,t.jsx)(n.li,{children:"Consider conditional debugging in production builds"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"lua-debug-integration",children:"Lua Debug Integration"}),"\n",(0,t.jsxs)(n.p,{children:["Uses Lua's built-in ",(0,t.jsx)(n.code,{children:"debug"})," library functions:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"debug.getinfo()"})," for stack frame information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"debug.getlocal()"})," for local variable access"]}),"\n",(0,t.jsx)(n.li,{children:"Protected execution patterns for error safety"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Automatic string truncation prevents memory bloat"}),"\n",(0,t.jsx)(n.li,{children:"Cleanup of strict mode during execution"}),"\n",(0,t.jsx)(n.li,{children:"Efficient table operations for result building"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);