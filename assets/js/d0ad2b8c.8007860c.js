"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6323],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var r=s(96540);const i={},l=r.createContext(i);function t(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:n},e.children)}},86538:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"game-scripts/core-systems/world-systems/generation/worldsettings_overrides","title":"World Settings Overrides","description":"Comprehensive world configuration override system for customizing Don\'t Starve Together gameplay settings","source":"@site/docs/game-scripts/core-systems/world-systems/generation/worldsettings_overrides.md","sourceDirName":"game-scripts/core-systems/world-systems/generation","slug":"/game-scripts/core-systems/world-systems/generation/worldsettings_overrides","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/worldsettings_overrides","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"worldsettings_overrides","title":"World Settings Overrides","description":"Comprehensive world configuration override system for customizing Don\'t Starve Together gameplay settings","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"World Settings Util","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/worldsettingsutil"},"next":{"title":"Ocean Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/ocean/"}}');var i=s(74848),l=s(28453);const t={id:"worldsettings_overrides",title:"World Settings Overrides",description:"Comprehensive world configuration override system for customizing Don't Starve Together gameplay settings",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="World Settings Overrides",a={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Core Functions",id:"core-functions",level:2},{value:"OverrideTuningVariables(tuning)",id:"override-tuning-variables",level:3},{value:"Pre-Generation Overrides",id:"pre-generation-overrides",level:2},{value:"Giants Category",id:"giants-category",level:3},{value:"deerclops(difficulty)",id:"deerclops-override",level:4},{value:"bearger(difficulty)",id:"bearger-override",level:4},{value:"beequeen(difficulty)",id:"beequeen-override",level:4},{value:"Monsters Category",id:"monsters-category",level:3},{value:"lureplants(difficulty)",id:"lureplants-override",level:4},{value:"spiders_setting(difficulty)",id:"spiders-setting-override",level:4},{value:"Animals Category",id:"animals-category",level:3},{value:"bees_setting(difficulty)",id:"bees-setting-override",level:4},{value:"hunt(difficulty)",id:"hunt-override",level:4},{value:"Resources Category",id:"resources-category",level:3},{value:"regrowth(difficulty)",id:"regrowth-override",level:4},{value:"flowers_regrowth(difficulty)",id:"flowers-regrowth-override",level:4},{value:"evergreen_regrowth(difficulty)",id:"evergreen-regrowth-override",level:4},{value:"Post-Generation Overrides",id:"post-generation-overrides",level:2},{value:"Season Configuration",id:"season-configuration",level:3},{value:"autumn(difficulty), winter(difficulty), spring(difficulty), summer(difficulty)",id:"season-overrides",level:4},{value:"Weather and Environment",id:"weather-and-environment",level:3},{value:"weather(difficulty)",id:"weather-override",level:4},{value:"lightning(difficulty)",id:"lightning-override",level:4},{value:"Gameplay Mechanics",id:"gameplay-mechanics",level:3},{value:"spawnmode(difficulty)",id:"spawnmode-override",level:4},{value:"basicresource_regrowth(difficulty)",id:"basicresource-regrowth-override",level:4},{value:"resettime(difficulty)",id:"resettime-override",level:4},{value:"Constants",id:"constants",level:2},{value:"SEASON_FRIENDLY_LENGTHS",id:"season_friendly_lengths",level:3},{value:"SEASON_HARSH_LENGTHS",id:"season_harsh_lengths",level:3},{value:"NEVER_TIME",id:"never_time",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"areaambientdefault(prefab)",id:"area-ambient-default",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"World Generation Pipeline",id:"world-generation-pipeline",level:3},{value:"Event System Integration",id:"event-system-integration",level:3},{value:"Configuration Categories",id:"configuration-categories",level:2},{value:"Difficulty Scaling Patterns",id:"difficulty-scaling-patterns",level:3},{value:"Temporal Scaling",id:"temporal-scaling",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"world-settings-overrides",children:"World Settings Overrides"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"worldsettings_overrides"})," module provides a comprehensive system for customizing Don't Starve Together gameplay through world generation settings. It offers hundreds of configurable parameters that control monster spawning, resource abundance, seasonal mechanics, environmental hazards, and survival difficulty across all aspects of the game."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- The world settings system is typically used during world generation\nlocal worldsettings_overrides = require("worldsettings_overrides")\n\n-- Apply pre-generation overrides\nworldsettings_overrides.Pre.deerclops("often")\nworldsettings_overrides.Pre.regrowth("fast")\n\n-- Apply post-generation overrides (after TheWorld exists)\nworldsettings_overrides.Post.hounds("always")\nworldsettings_overrides.Post.weather("rare")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,i.jsx)(n.h3,{id:"override-tuning-variables",children:"OverrideTuningVariables(tuning)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nApplies tuning variable overrides to the global TUNING table, preserving original values in ORIGINAL_TUNING for potential restoration. Includes development build validation to prevent typos in tuning keys."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tuning"})," (table): Key-value pairs of tuning variables to override"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"None (modifies global TUNING table)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Override multiple tuning variables\nOverrideTuningVariables({\n    DEERCLOPS_ATTACKS_PER_SEASON = 8,\n    BEEHIVE_BEES = 10,\n    REGROWTH_TIME_MULTIPLIER = 3\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation Details:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Actual implementation from source code\nfunction OverrideTuningVariables(tuning)\n    if tuning ~= nil then\n        for k, v in pairs(tuning) do\n            if BRANCH == "dev" then\n                assert(TUNING[k] ~= nil, string.format("%s does not exist in TUNING, either fix the spelling, or add the value to TUNING.", k))\n            end\n            ORIGINAL_TUNING[k] = TUNING[k]\n            TUNING[k] = v\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Validation Features:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Development Validation"}),": Asserts that tuning keys exist in TUNING table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backup System"}),": Preserves original values in ORIGINAL_TUNING"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Messages"}),": Provides helpful feedback for missing tuning variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nil Safety"}),": Handles nil tuning parameter gracefully"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"pre-generation-overrides",children:"Pre-Generation Overrides"}),"\n",(0,i.jsx)(n.h3,{id:"giants-category",children:"Giants Category"}),"\n",(0,i.jsx)(n.p,{children:"Giants are major boss creatures that appear seasonally or under specific conditions."}),"\n",(0,i.jsx)(n.h4,{id:"deerclops-override",children:"deerclops(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nConfigures Deerclops spawn frequency and seasonal behavior through tuning variable overrides."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"deerclops = function(difficulty)\n    local tuning_vars = {\n        never = {\n            SPAWN_DEERCLOPS = false,\n        },\n        rare = {\n            DEERCLOPS_ATTACKS_PER_SEASON = 2,\n            DEERCLOPS_ATTACKS_OFF_SEASON = false,\n        },\n        often = {\n            DEERCLOPS_ATTACKS_PER_SEASON = 8,\n            DEERCLOPS_ATTACKS_OFF_SEASON = false,\n        },\n        always = {\n            DEERCLOPS_ATTACKS_PER_SEASON = 10,\n            DEERCLOPS_ATTACKS_OFF_SEASON = true,\n        },\n    }\n    OverrideTuningVariables(tuning_vars[difficulty])\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Difficulty Levels:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"never"'}),": Disables Deerclops spawning completely (",(0,i.jsx)(n.code,{children:"SPAWN_DEERCLOPS = false"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"rare"'}),": 2 attacks per season, no off-season attacks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"default"'}),": 4 attacks per season, no off-season attacks (commented default)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"often"'}),": 8 attacks per season, no off-season attacks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"always"'}),": 10 attacks per season with off-season attacks enabled"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set Deerclops to attack frequently\nlocal worldsettings_overrides = require("worldsettings_overrides")\nworldsettings_overrides.Pre.deerclops("often")\n\n-- Result: TUNING.DEERCLOPS_ATTACKS_PER_SEASON = 8\n--         TUNING.DEERCLOPS_ATTACKS_OFF_SEASON = false\n'})}),"\n",(0,i.jsx)(n.h4,{id:"bearger-override",children:"bearger(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nControls Bearger spawn probability during autumn."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Difficulty Levels:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"never"'}),": Disables Bearger spawning"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"rare"'}),": 50% spawn chance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"often"'}),": Multiple spawn opportunities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"always"'}),": Guaranteed spawns"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"beequeen-override",children:"beequeen(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nManages Bee Queen spawning requirements and respawn timing."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tuning Variables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BEEQUEEN_RESPAWN_TIME"}),": Time between respawns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BEEQUEEN_SPAWN_WORK_THRESHOLD"}),": Minimum work required to trigger spawn"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"monsters-category",children:"Monsters Category"}),"\n",(0,i.jsx)(n.p,{children:"Hostile creatures and their spawning mechanics."}),"\n",(0,i.jsx)(n.h4,{id:"lureplants-override",children:"lureplants(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nControls Lureplant spawning frequency across the world."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Difficulty Levels:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"never"'}),": No Lureplant spawning"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"rare"'}),": 10-day intervals with 2-day variance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"often"'}),": 3-day intervals with 1-day variance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"always"'}),": 2-day intervals with 0.5-day variance"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"spiders-setting-override",children:"spiders_setting(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nConfigures spider den population and behavior."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration Parameters:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Example spider configuration for "many" difficulty\nSPIDERDEN_SPIDERS = {4, 8, 12}        -- Spiders per den level\nSPIDERDEN_WARRIORS = {0, 2, 6}        -- Warriors per den level\nSPIDERDEN_EMERGENCY_WARRIORS = {0, 8, 16}  -- Emergency response\nSPIDERDEN_REGEN_TIME = TUNING.SEG_TIME * 1.5  -- Regeneration time\n'})}),"\n",(0,i.jsx)(n.h3,{id:"animals-category",children:"Animals Category"}),"\n",(0,i.jsx)(n.p,{children:"Wildlife and passive creature spawning."}),"\n",(0,i.jsx)(n.h4,{id:"bees-setting-override",children:"bees_setting(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nControls bee population in hives and bee boxes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BEEHIVE_BEES"}),": Number of bees per wild hive"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BEEHIVE_EMERGENCY_BEES"}),": Emergency response count"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BEEHIVE_RELEASE_TIME"}),": Time between bee releases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BEEHIVE_REGEN_TIME"}),": Bee regeneration interval"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"hunt-override",children:"hunt(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nManages Koalefant hunt frequency and mechanics."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Difficulty Scaling:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Hunt frequency by difficulty\nnever:   HUNT_COOLDOWN = -1              -- Disabled\nrare:    HUNT_COOLDOWN = 2.4 days        -- Infrequent\noften:   HUNT_COOLDOWN = 0.6 days        -- Frequent  \nalways:  HUNT_COOLDOWN = 0.3 days        -- Very frequent\n"})}),"\n",(0,i.jsx)(n.h3,{id:"resources-category",children:"Resources Category"}),"\n",(0,i.jsx)(n.p,{children:"Resource regeneration and abundance settings."}),"\n",(0,i.jsx)(n.h4,{id:"regrowth-override",children:"regrowth(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nUniversal resource regrowth time multiplier affecting all renewable resources."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Multiplier Values:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"never"'}),": 0 (no regrowth)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"veryslow"'}),": 0.15 (very slow regrowth)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"slow"'}),": 0.33 (slow regrowth)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"fast"'}),": 3 (fast regrowth)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"veryfast"'}),": 7 (very fast regrowth)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"flowers-regrowth-override",children:"flowers_regrowth(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSpecific regrowth multiplier for flower regeneration."]}),"\n",(0,i.jsx)(n.h4,{id:"evergreen-regrowth-override",children:"evergreen_regrowth(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nControls evergreen tree regrowth timing."]}),"\n",(0,i.jsx)(n.h2,{id:"post-generation-overrides",children:"Post-Generation Overrides"}),"\n",(0,i.jsx)(n.p,{children:"These overrides are applied after world creation when TheWorld entity exists."}),"\n",(0,i.jsx)(n.h3,{id:"season-configuration",children:"Season Configuration"}),"\n",(0,i.jsx)(n.h4,{id:"season-overrides",children:"autumn(difficulty), winter(difficulty), spring(difficulty), summer(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSets the length of each season using predefined length categories."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Season Lengths:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Friendly seasons (autumn, spring)\nSEASON_FRIENDLY_LENGTHS = {\n    noseason = 0,\n    veryshortseason = TUNING.SEASON_LENGTH_FRIENDLY_VERYSHORT,\n    shortseason = TUNING.SEASON_LENGTH_FRIENDLY_SHORT,\n    default = TUNING.SEASON_LENGTH_FRIENDLY_DEFAULT,\n    longseason = TUNING.SEASON_LENGTH_FRIENDLY_LONG,\n    verylongseason = TUNING.SEASON_LENGTH_FRIENDLY_VERYLONG\n}\n\n-- Harsh seasons (winter, summer)  \nSEASON_HARSH_LENGTHS = {\n    noseason = 0,\n    veryshortseason = TUNING.SEASON_LENGTH_HARSH_VERYSHORT,\n    -- ... similar structure\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set long autumn and short winter\nworldsettings_overrides.Post.autumn("longseason")\nworldsettings_overrides.Post.winter("shortseason")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"weather-and-environment",children:"Weather and Environment"}),"\n",(0,i.jsx)(n.h4,{id:"weather-override",children:"weather(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nControls precipitation frequency and intensity."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Weather Modes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"never"'}),": No precipitation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"rare"'}),": Dynamic mode with 0.5x moisture scale"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"often"'}),": Dynamic mode with 2x moisture scale"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"always"'}),": Constant precipitation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"squall"'}),": Dynamic mode with 30x moisture scale (intense storms)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"lightning-override",children:"lightning(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nConfigures lightning strike frequency and conditions."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Lightning Modes:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Lightning configuration examples\nnever:   { mode = "never", delay = {} }\nrare:    { mode = "rain", delay = {min = 60, max = 90} }\noften:   { mode = "any", delay = {min = 10, max = 20} }\nalways:  { mode = "always", delay = {min = 10, max = 30} }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"gameplay-mechanics",children:"Gameplay Mechanics"}),"\n",(0,i.jsx)(n.h4,{id:"spawnmode-override",children:"spawnmode(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSets player respawn behavior and ghost mechanics."]}),"\n",(0,i.jsx)(n.h4,{id:"basicresource-regrowth-override",children:"basicresource_regrowth(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nEnables or disables basic resource renewal (sticks, grass, etc.)."]}),"\n",(0,i.jsx)(n.h4,{id:"resettime-override",children:"resettime(difficulty)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nConfigures world reset timing for abandoned worlds."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reset Time Options:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"none:     nil                                -- No reset\nslow:     { time = 240, loadingtime = 360 }  -- 4 minutes\ndefault:  { time = 120, loadingtime = 180 }  -- 2 minutes  \nfast:     { time = 60, loadingtime = 90 }    -- 1 minute\nalways:   { instant = true }                 -- Immediate\n"})}),"\n",(0,i.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(n.h3,{id:"season_friendly_lengths",children:"SEASON_FRIENDLY_LENGTHS"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," ",(0,i.jsx)(n.code,{children:"table"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Lookup table for friendly season (autumn, spring) duration values."]}),"\n",(0,i.jsx)(n.h3,{id:"season_harsh_lengths",children:"SEASON_HARSH_LENGTHS"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," ",(0,i.jsx)(n.code,{children:"table"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Lookup table for harsh season (winter, summer) duration values."]}),"\n",(0,i.jsx)(n.h3,{id:"never_time",children:"NEVER_TIME"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Value:"})," ",(0,i.jsx)(n.code,{children:"TUNING.TOTAL_DAY_TIME * 9999999999"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Effectively infinite time value used to disable time-based mechanics."]}),"\n",(0,i.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,i.jsx)(n.h3,{id:"area-ambient-default",children:"areaambientdefault(prefab)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nSets default ambient sound overrides for different world types (surface vs cave)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"prefab"}),' (string): World type identifier ("cave" or surface world)']}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set cave ambient sounds\nworldsettings_overrides.areaambientdefault("cave")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,i.jsx)(n.h3,{id:"world-generation-pipeline",children:"World Generation Pipeline"}),"\n",(0,i.jsx)(n.p,{children:"The override system integrates with world generation at multiple stages:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pre-Generation"}),": Tuning variables are modified before world creation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Post-Generation"}),": World events are triggered after entity instantiation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Runtime"}),": Some settings can be modified during gameplay"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"event-system-integration",children:"Event System Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Example event dispatching for season length\nTheWorld:PushEvent("ms_setseasonlength", {\n    season = "winter", \n    length = SEASON_HARSH_LENGTHS["shortseason"]\n})\n\n-- Weather system integration\nTheWorld:PushEvent("ms_setprecipitationmode", "dynamic")\nTheWorld:PushEvent("ms_setmoisturescale", 2.0)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-categories",children:"Configuration Categories"}),"\n",(0,i.jsx)(n.h3,{id:"difficulty-scaling-patterns",children:"Difficulty Scaling Patterns"}),"\n",(0,i.jsx)(n.p,{children:"Most overrides follow consistent difficulty scaling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Never/None"}),": Feature completely disabled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rare/Few"}),": Minimal frequency/intensity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Default"}),": Balanced baseline gameplay"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Often/Many"}),": Increased frequency/intensity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always/Max"}),": Maximum frequency/intensity"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"temporal-scaling",children:"Temporal Scaling"}),"\n",(0,i.jsx)(n.p,{children:"Time-based settings typically scale in consistent ratios:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Common scaling pattern for spawn intervals\nrare:    base_time * 2     -- Half frequency\ndefault: base_time         -- Normal frequency  \noften:   base_time * 0.5   -- Double frequency\nalways:  base_time * 0.25  -- Quadruple frequency\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/generation/worldsettingsutil",children:"World Settings Util"}),": Utility functions for world settings timers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./tuning.md",children:"Tuning"}),": Base tuning values that can be overridden"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./constants.md",children:"Constants"}),": Game constants used in override calculations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../core-systems/seasonmanager.md",children:"Season Manager"}),": Handles season length and transitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../core-systems/weather.md",children:"Weather"}),": Weather system integration"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);