"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5817],{10:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/shared-properties/tags","title":"Tags","description":"The tag system is a common property used to categorize and identify entity characteristics in Don\'t Starve Together. Tags provide an efficient way to mark entities with specific attributes that can be queried during gameplay.","source":"@site/docs/api-vanilla/shared-properties/tags.md","sourceDirName":"api-vanilla/shared-properties","slug":"/api-vanilla/shared-properties/tags","permalink":"/dst-api-webdocs/docs/api-vanilla/shared-properties/tags","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"tags","title":"Tags","sidebar_position":2}}');var s=n(4848),a=n(8453);const r={id:"tags",title:"Tags",sidebar_position:2},d="Tags",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Adding and Removing Tags",id:"adding-and-removing-tags",level:3},{value:"Common Tag Operations",id:"common-tag-operations",level:3},{value:"Entity Searching with Tags",id:"entity-searching-with-tags",level:2},{value:"Common Tags",id:"common-tags",level:2},{value:"General Entity Tags",id:"general-entity-tags",level:3},{value:"Gameplay Tags",id:"gameplay-tags",level:3},{value:"Technical Tags",id:"technical-tags",level:3},{value:"Tag Implementation",id:"tag-implementation",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example: Creating an Entity with Tags",id:"example-creating-an-entity-with-tags",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"tags",children:"Tags"})}),"\n",(0,s.jsx)(t.p,{children:"The tag system is a common property used to categorize and identify entity characteristics in Don't Starve Together. Tags provide an efficient way to mark entities with specific attributes that can be queried during gameplay."}),"\n",(0,s.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(t.p,{children:"Tags are simple string identifiers attached to entities. They serve multiple purposes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Categorization of entities by type or behavior"}),"\n",(0,s.jsx)(t.li,{children:"Targeting specific groups of entities with actions or effects"}),"\n",(0,s.jsx)(t.li,{children:"Implementing game mechanics that depend on entity characteristics"}),"\n",(0,s.jsx)(t.li,{children:"Optimizing entity queries and searches"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.h3,{id:"adding-and-removing-tags",children:"Adding and Removing Tags"}),"\n",(0,s.jsxs)(t.p,{children:["Tags can be added to an entity through the ",(0,s.jsx)(t.code,{children:"EntityScript"})," interface:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'-- Add a tag to an entity\ninst:AddTag("tagname")\n\n-- Remove a tag from an entity\ninst:RemoveTag("tagname")\n\n-- Check if an entity has a specific tag\nif inst:HasTag("tagname") then\n    -- Do something with tagged entity\nend\n'})}),"\n",(0,s.jsx)(t.h3,{id:"common-tag-operations",children:"Common Tag Operations"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'-- Check if entity has one of multiple tags\nif inst:HasOneOfTags({"tagname1", "tagname2", "tagname3"}) then\n    -- Entity has at least one of these tags\nend\n\n-- Check if entity has all specified tags\nif inst:HasAllTags({"tagname1", "tagname2"}) then\n    -- Entity has both tags\nend\n'})}),"\n",(0,s.jsx)(t.h2,{id:"entity-searching-with-tags",children:"Entity Searching with Tags"}),"\n",(0,s.jsxs)(t.p,{children:["Tags are commonly used with the ",(0,s.jsx)(t.code,{children:"FindEntities"})," function to locate specific types of entities:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'-- Find all entities with the "monster" tag within a radius of 20\nlocal x, y, z = inst.Transform:GetWorldPosition()\nlocal monsters = TheSim:FindEntities(x, y, z, 20, {"monster"})\n\n-- Find entities with multiple tag requirements\nlocal targets = TheSim:FindEntities(x, y, z, 20, {"_combat"}, {"INLIMBO", "notarget"})\n'})}),"\n",(0,s.jsx)(t.h2,{id:"common-tags",children:"Common Tags"}),"\n",(0,s.jsx)(t.h3,{id:"general-entity-tags",children:"General Entity Tags"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Tag"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"INLIMBO"})}),(0,s.jsx)(t.td,{children:"Entity is not physically present in the world"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"FX"})}),(0,s.jsx)(t.td,{children:"Visual effects that don't interact with gameplay"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"NOCLICK"})}),(0,s.jsx)(t.td,{children:"Entity cannot be clicked on"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"player"})}),(0,s.jsx)(t.td,{children:"Identifies player characters"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"monster"})}),(0,s.jsx)(t.td,{children:"Identifies hostile creatures"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"structure"})}),(0,s.jsx)(t.td,{children:"Buildings and constructions"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"heavy"})}),(0,s.jsx)(t.td,{children:"Heavy objects that can't be blown away by wind"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"gameplay-tags",children:"Gameplay Tags"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Tag"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"_combat"})}),(0,s.jsx)(t.td,{children:"Entity has combat capability"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"fire"})}),(0,s.jsx)(t.td,{children:"Entity is on fire or is a fire source"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"burnt"})}),(0,s.jsx)(t.td,{children:"Entity has been burnt"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"freezable"})}),(0,s.jsx)(t.td,{children:"Entity can be frozen"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"companion"})}),(0,s.jsx)(t.td,{children:"Entity follows or assists players"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"trap"})}),(0,s.jsx)(t.td,{children:"Entity functions as a trap"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"edible"})}),(0,s.jsx)(t.td,{children:"Entity can be eaten"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"technical-tags",children:"Technical Tags"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Tag"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"CLASSIFIED"})}),(0,s.jsx)(t.td,{children:"Used for networked entities with private data"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"NOBLOCK"})}),(0,s.jsx)(t.td,{children:"Entity doesn't block movement"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"shadow"})}),(0,s.jsx)(t.td,{children:"Shadow creature or object"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"NET_workable"})}),(0,s.jsx)(t.td,{children:"Entity has networked workable component"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"NET_persistent"})}),(0,s.jsx)(t.td,{children:"Entity persists across game sessions"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"tag-implementation",children:"Tag Implementation"}),"\n",(0,s.jsx)(t.p,{children:"In the game code, tag operations are implemented directly in the C++ engine layer for performance, but exposed to Lua for game logic. Tags are stored as a simple set for fast lookups, which makes tag operations highly efficient."}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(t.p,{children:"When implementing custom prefabs, follow these guidelines for tags:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Add tags during entity creation for proper networking"}),"\n",(0,s.jsx)(t.li,{children:"Use existing tags when possible for consistency"}),"\n",(0,s.jsx)(t.li,{children:"Create new tags only when existing ones don't cover your needs"}),"\n",(0,s.jsx)(t.li,{children:"Document custom tags in your code for other developers"}),"\n",(0,s.jsx)(t.li,{children:"Consider tag performance: excessive tags can impact memory usage"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example-creating-an-entity-with-tags",children:"Example: Creating an Entity with Tags"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local function MyEntity()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Add tags before network initialization\n    inst:AddTag("myentity")\n    inst:AddTag("structure")\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Master simulation code here\n    \n    return inst\nend\n\nreturn Prefab("myentity", MyEntity)\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var i=n(6540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);