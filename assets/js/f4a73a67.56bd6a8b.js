"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3532],{8211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api-vanilla/data-types/netvar","title":"Network Variables","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/data-types/netvar.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/netvar","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/netvar","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"netvar","title":"Network Variables","sidebar_position":5,"last_updated":"2023-07-06T00:00:00.000Z"}}');var i=t(4848),r=t(8453);const s={id:"netvar",title:"Network Variables",sidebar_position:5,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Network Variables",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Available Network Variable Types",id:"available-network-variable-types",level:2},{value:"Creating Network Variables",id:"creating-network-variables",level:2},{value:"Examples",id:"examples",level:3},{value:"Using Network Variables",id:"using-network-variables",level:2},{value:"Setting Values (Server Only)",id:"setting-values-server-only",level:3},{value:"Reading Values (Both Server and Client)",id:"reading-values-both-server-and-client",level:3},{value:"Handling Value Changes",id:"handling-value-changes",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Target-Specific Network Variables",id:"target-specific-network-variables",level:3},{value:"Array Network Variables",id:"array-network-variables",level:3},{value:"Optimizing with Different Types",id:"optimizing-with-different-types",level:3},{value:"Network Variables in Replica Components",id:"network-variables-in-replica-components",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Debugging Network Variables",id:"debugging-network-variables",level:3},{value:"Variable Not Synchronizing",id:"variable-not-synchronizing",level:3},{value:"Excessive Network Traffic",id:"excessive-network-traffic",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"network-variables",children:"Network Variables"})}),"\n",(0,i.jsx)(n.p,{children:"Network variables (netvars) are specialized data types in Don't Starve Together that handle automatic synchronization between server and clients. They are the backbone of DST's multiplayer architecture."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Network variables provide a mechanism to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automatically synchronize state between server and clients"}),"\n",(0,i.jsx)(n.li,{children:"Trigger events when values change"}),"\n",(0,i.jsx)(n.li,{children:"Optimize network bandwidth through various encoding methods"}),"\n",(0,i.jsx)(n.li,{children:"Support different data types and sizes"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"available-network-variable-types",children:"Available Network Variable Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Import network variable modules\nlocal net_string = require "net_string"    -- String values\nlocal net_bool = require "net_bool"        -- Boolean values\nlocal net_byte = require "net_byte"        -- Byte values (0-255)\nlocal net_tinybyte = require "net_tinybyte" -- 4-bit values (0-15)\nlocal net_smallbyte = require "net_smallbyte" -- 6-bit values (0-63)\nlocal net_int = require "net_int"          -- Integer values\nlocal net_uint = require "net_uint"        -- Unsigned integer values\nlocal net_float = require "net_float"      -- Floating point values\nlocal net_hash = require "net_hash"        -- String hash values (efficient for strings)\nlocal net_entity = require "net_entity"    -- Entity references\nlocal net_shortint = require "net_shortint" -- 16-bit integer values\nlocal net_bytearray = require "net_bytearray" -- Array of bytes\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-network-variables",children:"Creating Network Variables"}),"\n",(0,i.jsx)(n.p,{children:"Network variables are initialized with three parameters:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Basic initialization format\nlocal my_netvar = net_type(entity_guid, variable_path, [dirty_event_name])\n\n-- Parameters:\n-- entity_guid: GUID of the entity that owns this variable (typically inst.GUID)\n-- variable_path: String that uniquely identifies the variable (e.g., "health.current")\n-- dirty_event_name: Optional name of event to trigger when value changes\n'})}),"\n",(0,i.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create a network variable for health\nself.current_health = net_float(inst.GUID, "health.current", "healthdirty")\n\n-- Create a network variable for entity state\nself.state = net_string(inst.GUID, "npc.state", "statechanged") \n\n-- Create a network variable for carrying an item\nself.carrying_item = net_entity(inst.GUID, "inventory.activeitem", "activeitembecamedirty")\n\n-- Create a network variable without a custom dirty event\nself.mana = net_int(inst.GUID, "mana.current") -- Uses default dirty event name\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-network-variables",children:"Using Network Variables"}),"\n",(0,i.jsx)(n.h3,{id:"setting-values-server-only",children:"Setting Values (Server Only)"}),"\n",(0,i.jsx)(n.p,{children:"Network variables can only be set on the server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Set a value (server-only)\nif TheWorld.ismastersim then\n    self.current_health:set(100)\n    self.state:set("idle")\n    self.carrying_item:set(item_entity)\nend\n\n-- Set a value without triggering dirty event\nself.current_health:set_local(100)\n\n-- Force a dirty event even if value hasn\'t changed\nself.current_health:set(100, true)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reading-values-both-server-and-client",children:"Reading Values (Both Server and Client)"}),"\n",(0,i.jsx)(n.p,{children:"Both server and clients can read network variable values:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get the current value\nlocal health = self.current_health:value()\nlocal state = self.state:value()\nlocal item = self.carrying_item:value()\n\n-- Check if the value exists\nif self.carrying_item:value() ~= nil then\n    -- Has an item\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"handling-value-changes",children:"Handling Value Changes"}),"\n",(0,i.jsx)(n.p,{children:"Clients can listen for network variable changes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In component initialization\nif not TheWorld.ismastersim then\n    -- Listen for the dirty event\n    inst:ListenForEvent("healthdirty", function()\n        local new_health = self.current_health:value()\n        -- Update visual health bar\n        UpdateHealthBar(new_health)\n    end)\n    \n    inst:ListenForEvent("statechanged", function()\n        local new_state = self.state:value()\n        -- Play animation for new state\n        inst.AnimState:PlayAnimation(new_state)\n    end)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(n.h3,{id:"target-specific-network-variables",children:"Target-Specific Network Variables"}),"\n",(0,i.jsx)(n.p,{children:"Some network variables can be targeted to specific players:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Network variable visible only to a specific player\nself.secret_info = net_string(inst.GUID, "player.secretinfo", "secretinfodirty")\n\n-- Set the variable to be visible only to the owner\ninst.Network:SetClassifiedTarget(owner)\n\n-- Make the variable visible to everyone again\ninst.Network:SetClassifiedTarget(nil)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"array-network-variables",children:"Array Network Variables"}),"\n",(0,i.jsx)(n.p,{children:"For arrays of data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Create a byte array network variable (for inventory slots)\nself.inventory_items = net_bytearray(inst.GUID, "inventory.items", "inventorydirty")\n\n-- Set the array data\nlocal data = {1, 5, 3, 0, 2}\nself.inventory_items:set(data)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"optimizing-with-different-types",children:"Optimizing with Different Types"}),"\n",(0,i.jsx)(n.p,{children:"Choose appropriate network variable types to conserve bandwidth:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- For values 0-15, use tinybyte (4 bits)\nself.small_value = net_tinybyte(inst.GUID, "tinystats.value")\n\n-- For values 0-63, use smallbyte (6 bits)\nself.medium_value = net_smallbyte(inst.GUID, "smallstats.value")\n\n-- For values 0-255, use byte (8 bits)\nself.byte_value = net_byte(inst.GUID, "bytestats.value")\n\n-- For values 0-65535, use shortint (16 bits)\nself.short_value = net_shortint(inst.GUID, "shortstats.value")\n\n-- For larger or negative values, use int (32 bits)\nself.large_value = net_int(inst.GUID, "stats.value")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"network-variables-in-replica-components",children:"Network Variables in Replica Components"}),"\n",(0,i.jsx)(n.p,{children:"Network variables are the foundation of replica components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- components/mycomponent_replica.lua\nlocal MyComponent = Class(function(self, inst)\n    self.inst = inst\n    \n    -- Define network variables\n    self._value = net_int(inst.GUID, "mycomponent.value", "mycomponent.valuedirty")\n    self._active = net_bool(inst.GUID, "mycomponent.active", "mycomponent.activedirty")\n    self._owner = net_entity(inst.GUID, "mycomponent.owner", "mycomponent.ownerdirty")\n    \n    -- Set up client-side event handlers\n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("mycomponent.valuedirty", function()\n            inst:PushEvent("valuechanged", {value = self:GetValue()})\n        end)\n        \n        inst:ListenForEvent("mycomponent.activedirty", function()\n            if self:IsActive() then\n                inst:PushEvent("activated")\n            else\n                inst:PushEvent("deactivated")\n            end\n        end)\n    end\nend)\n\nfunction MyComponent:SetValue(val)\n    if TheWorld.ismastersim then\n        self._value:set(val)\n    end\nend\n\nfunction MyComponent:GetValue()\n    return self._value:value()\nend\n\nfunction MyComponent:SetActive(active)\n    if TheWorld.ismastersim then\n        self._active:set(active)\n    end\nend\n\nfunction MyComponent:IsActive()\n    return self._active:value()\nend\n\nreturn MyComponent\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Appropriate Types"}),": Select the smallest netvar type that can represent your data range"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimize Updates"}),": Only set network variables when values actually change"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch Updates"}),": Group related changes to minimize network traffic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prioritize Important Data"}),": Consider which data needs immediate synchronization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consider Visibility"}),": Use classified targets for player-specific data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Large Strings"}),": Large strings consume significant bandwidth"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimize Dirty Events"}),": Only listen for events you need to respond to"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"debugging-network-variables",children:"Debugging Network Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Print the current value\nprint("Current health: " .. tostring(self.current_health:value()))\n\n-- Check if variable is initialized\nassert(self.current_health ~= nil, "Network variable not initialized")\n\n-- Force a variable update\nif TheWorld.ismastersim then\n    self.current_health:set(self.current_health:value(), true) -- Force dirty\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"variable-not-synchronizing",children:"Variable Not Synchronizing"}),"\n",(0,i.jsx)(n.p,{children:"Common causes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Variable is created after ",(0,i.jsx)(n.code,{children:"SetPristine()"})]}),"\n",(0,i.jsxs)(n.li,{children:["Missing entity",":AddNetwork","() call"]}),"\n",(0,i.jsx)(n.li,{children:"Server and client have different variable paths"}),"\n",(0,i.jsx)(n.li,{children:"Setting values on the client (which is ignored)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"excessive-network-traffic",children:"Excessive Network Traffic"}),"\n",(0,i.jsx)(n.p,{children:"Solutions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use smaller network variable types"}),"\n",(0,i.jsx)(n.li,{children:"Reduce update frequency"}),"\n",(0,i.jsx)(n.li,{children:"Use delta compression for related values"}),"\n",(0,i.jsx)(n.li,{children:"Batch updates of related variables"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);