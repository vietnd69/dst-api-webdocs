"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[533],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},8999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/core/worldstate","title":"WorldState API","description":"WorldState is the system that manages the world state in Don\'t Starve Together. It stores and tracks information such as seasons, weather, time, and other game world states.","source":"@site/docs/api-vanilla/core/worldstate.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/worldstate","permalink":"/dst-api-webdocs/docs/api-vanilla/core/worldstate","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"id":"worldstate","title":"WorldState API","sidebar_position":12},"sidebar":"docs","previous":{"title":"Server Startup Process","permalink":"/dst-api-webdocs/docs/api-vanilla/core/server-startup"},"next":{"title":"Mod Interaction and Compatibility","permalink":"/dst-api-webdocs/docs/api-vanilla/core/mod-interaction"}}');var a=t(4848),r=t(8453);const i={id:"worldstate",title:"WorldState API",sidebar_position:12},o="WorldState API",l={},d=[{value:"Accessing WorldState",id:"accessing-worldstate",level:2},{value:"WorldState Properties",id:"worldstate-properties",level:2},{value:"Time and Day/Night",id:"time-and-daynight",level:3},{value:"Seasons",id:"seasons",level:3},{value:"Weather",id:"weather",level:3},{value:"Temperature",id:"temperature",level:3},{value:"Special Events",id:"special-events",level:3},{value:"Listening for State Changes",id:"listening-for-state-changes",level:2},{value:"Changing WorldState in Mods",id:"changing-worldstate-in-mods",level:2},{value:"Using WorldState in Prefabs",id:"using-worldstate-in-prefabs",level:2},{value:"WorldState in Caves",id:"worldstate-in-caves",level:2},{value:"Other Useful Properties",id:"other-useful-properties",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"worldstate-api",children:"WorldState API"})}),"\n",(0,a.jsx)(n.p,{children:"WorldState is the system that manages the world state in Don't Starve Together. It stores and tracks information such as seasons, weather, time, and other game world states."}),"\n",(0,a.jsx)(n.h2,{id:"accessing-worldstate",children:"Accessing WorldState"}),"\n",(0,a.jsx)(n.p,{children:"WorldState can be accessed through TheWorld object:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"local world_state = TheWorld.state\n"})}),"\n",(0,a.jsx)(n.h2,{id:"worldstate-properties",children:"WorldState Properties"}),"\n",(0,a.jsx)(n.p,{children:"WorldState provides many properties to query the current state of the world:"}),"\n",(0,a.jsx)(n.h3,{id:"time-and-daynight",children:"Time and Day/Night"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Current day number (starting from 1)\nlocal current_day = world_state.cycles + 1\n\n-- Time of day (0.0 - 1.0, 0=dawn, 0.5=noon, 1=dusk)\nlocal time_of_day = world_state.time\n\n-- Current phase (day, dusk, night)\nlocal current_phase = world_state.phase\n\n-- Check phase\nif world_state.isday then\n    -- It's daytime\nelseif world_state.isdusk then\n    -- It's dusk\nelseif world_state.isnight then\n    -- It's nighttime\nend\n\n-- Length of each phase\nlocal day_length = world_state.remainingdaylight\nlocal dusk_length = world_state.remainingdusk\nlocal night_length = world_state.remainingnight\n"})}),"\n",(0,a.jsx)(n.h3,{id:"seasons",children:"Seasons"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Current season\nlocal current_season = world_state.season\n\n-- Check season\nif world_state.isautumn then\n    -- It's autumn\nelseif world_state.iswinter then\n    -- It's winter\nelseif world_state.isspring then\n    -- It's spring\nelseif world_state.issummer then\n    -- It's summer\nend\n\n-- Days remaining in current season\nlocal days_left = world_state.remainingdaysinseason\n\n-- Total days in season\nlocal days_in_season = world_state.elapseddaysinseason + world_state.remainingdaysinseason\n"})}),"\n",(0,a.jsx)(n.h3,{id:"weather",children:"Weather"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Current rain/snow amount (0.0 - 1.0)\nlocal precipitation = world_state.precipitation\n\n-- Check if raining or snowing\nif world_state.israining then\n    -- It's raining\n    local rain_intensity = world_state.precipitation -- Rain intensity\nelseif world_state.issnowing then\n    -- It's snowing\n    local snow_intensity = world_state.precipitation -- Snow intensity\nend\n\n-- Moisture (0.0 - 100.0)\nlocal moisture = world_state.moisture\nlocal moisture_limit = world_state.moistureceil\n\n-- Lightning\nif world_state.islightning then\n    -- There's lightning\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"temperature",children:"Temperature"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- World temperature\nlocal temperature = world_state.temperature\n\n-- Winter (cold) or summer (hot)\nif world_state.iswinter then\n    -- Cold temperature\nelseif world_state.issummer then\n    -- Hot temperature\nend\n"})}),"\n",(0,a.jsx)(n.h3,{id:"special-events",children:"Special Events"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Frog rain\nif world_state.isfrog then\n    -- There's a frog rain\nend\n\n-- Meteor shower\nif world_state.ismeteorshower then\n    -- There's a meteor shower\nend\n\n-- Full moon\nif world_state.isfullmoon then\n    -- It's a full moon night\nend\n"})}),"\n",(0,a.jsx)(n.h2,{id:"listening-for-state-changes",children:"Listening for State Changes"}),"\n",(0,a.jsx)(n.p,{children:"You can register listeners for state changes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Listen for day/night phase changes\nTheWorld:ListenForEvent("phasechanged", function(world, data)\n    local new_phase = data.newphase\n    print("Phase changed to: " .. new_phase)\nend)\n\n-- Listen for season changes\nTheWorld:ListenForEvent("seasonchange", function(world, data)\n    local new_season = data.season\n    print("Season changed to: " .. new_season)\nend)\n\n-- Listen for rain start\nTheWorld:ListenForEvent("rainstart", function()\n    print("Rain has started")\nend)\n\n-- Listen for rain stop\nTheWorld:ListenForEvent("rainstop", function()\n    print("Rain has stopped")\nend)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"changing-worldstate-in-mods",children:"Changing WorldState in Mods"}),"\n",(0,a.jsx)(n.p,{children:"In mods, you can change world states (only works on server):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Only execute on server\nif TheWorld.ismastersim then\n    -- Change season\n    TheWorld:PushEvent("ms_setseason", "winter")\n    \n    -- Change time\n    TheWorld:PushEvent("ms_setphase", "night")\n    \n    -- Change weather\n    TheWorld:PushEvent("ms_forceprecipitation", true) -- Start rain\n    TheWorld:PushEvent("ms_forceprecipitation", false) -- Stop rain\n    \n    -- Set time segments\n    TheWorld:PushEvent("ms_setclocksegs", {\n        day = 10,   -- Number of day segments\n        dusk = 4,   -- Number of dusk segments\n        night = 2   -- Number of night segments\n    })\n    \n    -- Set time speed\n    TheWorld:PushEvent("ms_setspeedmult", 2) -- Double speed\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"using-worldstate-in-prefabs",children:"Using WorldState in Prefabs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- In prefab function\nlocal function fn()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- React to worldstate changes\n    inst:WatchWorldState("phase", function(inst, phase)\n        if phase == "day" then\n            inst.AnimState:PlayAnimation("idle_day")\n        elseif phase == "dusk" then\n            inst.AnimState:PlayAnimation("idle_dusk")\n        elseif phase == "night" then\n            inst.AnimState:PlayAnimation("idle_night")\n        end\n    end)\n    \n    inst:WatchWorldState("isfullmoon", function(inst, isfullmoon)\n        if isfullmoon then\n            inst:AddTag("fullmoonactive")\n        else\n            inst:RemoveTag("fullmoonactive")\n        end\n    end)\n    \n    return inst\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"worldstate-in-caves",children:"WorldState in Caves"}),"\n",(0,a.jsx)(n.p,{children:"In a multi-shard system, caves have their own WorldState:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if in a cave\nif TheWorld:HasTag("cave") then\n    -- Caves have some different worldstate properties\n    -- No normal day/night cycle\n    \n    -- But still track seasons from overworld\n    if TheWorld.state.isspring then\n        -- Spring affects caves (e.g., earthquakes)\n    end\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"other-useful-properties",children:"Other Useful Properties"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Deerclops hunger level\nworld_state.deerclopswarning\n\n-- Wind strength (ocean)\nworld_state.windspeed\n\n-- Moon phase ID\nworld_state.moonphase\n\n-- Ghost night (Halloween)\nworld_state.ghostenabled\n\n-- Is Hallowed Nights (Halloween)\nworld_state.ishalloween\n\n-- Time speed (normally 1)\nworld_state.clocksegs\nworld_state.clockspeed\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);