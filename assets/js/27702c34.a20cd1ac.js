"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[62819],{28453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>l});var a=i(96540);const s={},t=a.createContext(s);function r(n){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),a.createElement(t.Provider,{value:e},n.children)}},95892:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"game-scripts/core-systems/world-systems/entities/prefabskins","title":"Prefab Skins Data","description":"Auto-generated database of all prefab skin mappings in Don\'t Starve Together","source":"@site/docs/game-scripts/core-systems/world-systems/entities/prefabskins.md","sourceDirName":"game-scripts/core-systems/world-systems/entities","slug":"/game-scripts/core-systems/world-systems/entities/prefabskins","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabskins","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"prefabskins","title":"Prefab Skins Data","description":"Auto-generated database of all prefab skin mappings in Don\'t Starve Together","sidebar_position":6,"last_updated":"2025-06-25T00:00:00.000Z","build_version":676312,"change_status":"modified"},"sidebar":"docs","previous":{"title":"Prefab Skins","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabskin"},"next":{"title":"Prefab Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabutil"}}');var s=i(74848),t=i(28453);const r={id:"prefabskins",title:"Prefab Skins Data",description:"Auto-generated database of all prefab skin mappings in Don't Starve Together",sidebar_position:6,last_updated:new Date("2025-06-25T00:00:00.000Z"),build_version:676312,change_status:"modified"},l="Prefab Skins Data",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Generated Content",id:"generated-content",level:2},{value:"PREFAB_SKINS",id:"prefab-skins",level:3},{value:"Skin Categories",id:"skin-categories",level:2},{value:"Character Skins",id:"character-skins",level:3},{value:"Equipment Skins",id:"equipment-skins",level:3},{value:"Structure Skins",id:"structure-skins",level:3},{value:"Special Item Skins",id:"special-item-skins",level:3},{value:"Skin Naming Conventions",id:"skin-naming-conventions",level:2},{value:"Prefab-Based Naming",id:"prefab-based-naming",level:3},{value:"Item Variants",id:"item-variants",level:3},{value:"Character Equipment Sets",id:"character-equipment-sets",level:3},{value:"Usage in Game Systems",id:"usage-in-game-systems",level:2},{value:"Automatic Dependency Management",id:"automatic-dependency-management",level:3},{value:"Skin Selection and Application",id:"skin-selection-and-application",level:3},{value:"Skin Validation",id:"skin-validation",level:3},{value:"Development Tools",id:"development-tools",level:2},{value:"Skin Discovery",id:"skin-discovery",level:3},{value:"Statistics and Analysis",id:"statistics-and-analysis",level:3},{value:"Current Statistics",id:"current-statistics",level:2},{value:"Important Notes",id:"important-notes",level:2},{value:"Auto-Generated Content",id:"auto-generated-content",level:3},{value:"Skin Availability",id:"skin-availability",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"prefab-skins-data",children:"Prefab Skins Data"})}),"\n",(0,s.jsx)(e.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Build Version"}),(0,s.jsx)(e.th,{children:"Change Date"}),(0,s.jsx)(e.th,{children:"Change Type"}),(0,s.jsx)(e.th,{children:"Description"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"676312"}),(0,s.jsx)(e.td,{children:"2025-06-25"}),(0,s.jsx)(e.td,{children:"modified"}),(0,s.jsx)(e.td,{children:"Added berrybush_waxed and dug_berrybush_waxed skin mappings"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"676042"}),(0,s.jsx)(e.td,{children:"2025-06-21"}),(0,s.jsx)(e.td,{children:"stable"}),(0,s.jsx)(e.td,{children:"Previous version"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"prefabskins"})," module contains the auto-generated ",(0,s.jsx)(e.code,{children:"PREFAB_SKINS"})," table that maps base prefab names to their available skin variations. This file is generated by ",(0,s.jsx)(e.code,{children:"export_accountitems.lua"})," and provides the complete database of skin relationships used by the game's cosmetic system."]}),"\n",(0,s.jsx)(e.h2,{id:"generated-content",children:"Generated Content"}),"\n",(0,s.jsx)(e.h3,{id:"prefab-skins",children:"PREFAB_SKINS"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Type:"})," ",(0,s.jsx)(e.code,{children:"table"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Status:"})," ",(0,s.jsx)(e.code,{children:"stable"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Description:"}),"\nA lookup table mapping base prefab names to arrays of their available skin prefab names. The table is automatically generated and should not be manually edited."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Structure:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'PREFAB_SKINS = {\n    [base_prefab_name] = {\n        "skin_prefab_name_1",\n        "skin_prefab_name_2",\n        -- ... additional skin variations\n    },\n    -- ... all skinnable prefabs\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example Usage:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Get all skins for a specific prefab\nlocal wilson_skins = PREFAB_SKINS["wilson"]\nif wilson_skins then\n    for i, skin_name in ipairs(wilson_skins) do\n        print("Wilson skin:", skin_name)\n    end\nend\n\n-- Check if a prefab has skins\nlocal function HasSkins(prefab_name)\n    return PREFAB_SKINS[prefab_name] ~= nil\nend\n\n-- Count available skins\nlocal function GetSkinCount(prefab_name)\n    local skins = PREFAB_SKINS[prefab_name]\n    return skins and #skins or 0\nend\n\nprint("Backpack has", GetSkinCount("backpack"), "skin variations")\n'})}),"\n",(0,s.jsx)(e.h2,{id:"skin-categories",children:"Skin Categories"}),"\n",(0,s.jsx)(e.p,{children:"The skin system covers various categories of game objects:"}),"\n",(0,s.jsx)(e.h3,{id:"character-skins",children:"Character Skins"}),"\n",(0,s.jsx)(e.p,{children:"Character skins often include variations for both the character and their starting items:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Abigail (Wendy\'s ghost companion)\nPREFAB_SKINS.abigail = {\n    "abigail_ancient",\n    "abigail_creepy", \n    "abigail_formal",\n    "abigail_funeral",\n    "abigail_gladiator",\n    "abigail_handmedown",\n    "abigail_ice",\n    "abigail_lunar",\n    "abigail_lureplant",\n    "abigail_magma",\n    "abigail_masquerade",\n    "abigail_nature",\n    "abigail_rose",\n    "abigail_shadow",\n    "abigail_survivor",\n    "abigail_victorian",\n    "abigail_yule",\n}\n\n-- Matching skins for Abigail\'s flower\nPREFAB_SKINS.abigail_flower = {\n    "abigail_flower_ancient",\n    "abigail_flower_creepy",\n    -- ... (matching variations)\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"equipment-skins",children:"Equipment Skins"}),"\n",(0,s.jsx)(e.p,{children:"Tools, weapons, and armor have extensive skin collections:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Backpack variations\nPREFAB_SKINS.backpack = {\n    "backpack_babybeef",\n    "backpack_basic_blue_catcoon",\n    "backpack_basic_green_olive",\n    "backpack_bat",\n    "backpack_beefalo",\n    "backpack_buckle_grey_pewter",\n    "backpack_buckle_navy_phthalo",\n    "backpack_buckle_red_rook",\n    "backpack_camping_green_viridian",\n    "backpack_camping_orange_carrot",\n    "backpack_camping_red_koalefant",\n    "backpack_carrat",\n    "backpack_catcoon",\n    "backpack_chester",\n    "backpack_crab",\n    "backpack_deerclops",\n    "backpack_dragonfly_fire",\n    -- ... additional variations\n}\n\n-- Weapon skins\nPREFAB_SKINS.axe = {\n    "axe_feathered",\n    "axe_invisible", \n    "axe_northern",\n    "axe_victorian",\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"structure-skins",children:"Structure Skins"}),"\n",(0,s.jsx)(e.p,{children:"Buildings and structures can have themed variations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Chest variations\nPREFAB_SKINS.treasurechest = {\n    "treasurechest_catcoon",\n    "treasurechest_garden",\n    "treasurechest_goodness",\n    "treasurechest_goth",\n    "treasurechest_kitchen",\n    "treasurechest_mystical",\n    -- ... more themes\n}\n\n-- Beehive themed skins\nPREFAB_SKINS.beebox = {\n    "beebox_crystal",\n    "beebox_garden", \n    "beebox_house",\n    "beebox_victorian",\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"special-item-skins",children:"Special Item Skins"}),"\n",(0,s.jsx)(e.p,{children:"Unique items and consumables:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Books with alternate covers\nPREFAB_SKINS.book_brimstone = {\n    "book_brimstone_gilded",\n}\n\nPREFAB_SKINS.book_sleep = {\n    "book_sleep_magazine",\n}\n\n-- Wrapped bundles with different patterns\nPREFAB_SKINS.bundle = {\n    "bundle_cawnival",\n    "bundle_gothic",\n    "bundle_kitchen", \n    "bundle_mystical",\n    "bundle_vintage",\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"skin-naming-conventions",children:"Skin Naming Conventions"}),"\n",(0,s.jsx)(e.h3,{id:"prefab-based-naming",children:"Prefab-Based Naming"}),"\n",(0,s.jsxs)(e.p,{children:["Most skins follow the pattern: ",(0,s.jsx)(e.code,{children:"{base_prefab}_{theme}"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Base prefab: "backpack"\n"backpack_chester"    -- Chester-themed backpack\n"backpack_royal"      -- Royal-themed backpack  \n"backpack_pirate"     -- Pirate-themed backpack\n'})}),"\n",(0,s.jsx)(e.h3,{id:"item-variants",children:"Item Variants"}),"\n",(0,s.jsx)(e.p,{children:"Some skins have additional suffixes for different states:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Boat skins with item variants\nPREFAB_SKINS.boat = {\n    "boat_nautical",\n    "boat_pirate_skin", \n    "boat_wagstaff",\n}\n\nPREFAB_SKINS.boat_item = {\n    "boat_nautical_item",\n    "boat_pirate_skin_item",\n    "boat_wagstaff_item",\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"character-equipment-sets",children:"Character Equipment Sets"}),"\n",(0,s.jsx)(e.p,{children:"Character-specific items often share theme naming:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Bernie (Willow\'s teddy bear) in different states\nPREFAB_SKINS.bernie_inactive = {\n    "bernie_cat",\n    "bernie_dog",\n}\n\nPREFAB_SKINS.bernie_active = {\n    "bernie_cat_active", \n    "bernie_dog_active",\n}\n\nPREFAB_SKINS.bernie_big = {\n    "bernie_cat_big",\n    "bernie_dog_big",\n    "bernie_cat_lunar_build",\n    "bernie_dog_lunar_build",\n    -- ... additional variations\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"usage-in-game-systems",children:"Usage in Game Systems"}),"\n",(0,s.jsx)(e.h3,{id:"automatic-dependency-management",children:"Automatic Dependency Management"}),"\n",(0,s.jsx)(e.p,{children:"The prefab system automatically adds skin dependencies:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- When creating a prefab, skins are automatically added as dependencies\nlocal wilson_prefab = Prefab("wilson", wilson_fn, assets)\n-- wilson_prefab.deps now includes all Wilson skins from PREFAB_SKINS["wilson"]\n'})}),"\n",(0,s.jsx)(e.h3,{id:"skin-selection-and-application",children:"Skin Selection and Application"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Get random skin for a prefab\nlocal function GetRandomSkin(prefab_name)\n    local skins = PREFAB_SKINS[prefab_name]\n    if skins and #skins > 0 then\n        return skins[math.random(#skins)]\n    end\n    return nil\nend\n\n-- Apply random skin to an item\nlocal function ApplyRandomSkin(inst)\n    local skin = GetRandomSkin(inst.prefab)\n    if skin and inst.SetSkin then\n        inst:SetSkin(skin)\n    end\nend\n"})}),"\n",(0,s.jsx)(e.h3,{id:"skin-validation",children:"Skin Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:"-- Check if a skin exists for a prefab\nlocal function IsValidSkin(prefab_name, skin_name)\n    local skins = PREFAB_SKINS[prefab_name]\n    if not skins then\n        return false\n    end\n    \n    for i, available_skin in ipairs(skins) do\n        if available_skin == skin_name then\n            return true\n        end\n    end\n    return false\nend\n\n-- Validate skin before applying\nlocal function SafeSetSkin(inst, skin_name)\n    if IsValidSkin(inst.prefab, skin_name) then\n        inst:SetSkin(skin_name)\n        return true\n    end\n    return false\nend\n"})}),"\n",(0,s.jsx)(e.h2,{id:"development-tools",children:"Development Tools"}),"\n",(0,s.jsx)(e.h3,{id:"skin-discovery",children:"Skin Discovery"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Find all prefabs with skins\nlocal function GetSkinnablePrefabs()\n    local skinnable = {}\n    for prefab_name, skins in pairs(PREFAB_SKINS) do\n        table.insert(skinnable, {\n            prefab = prefab_name,\n            count = #skins\n        })\n    end\n    \n    -- Sort by skin count\n    table.sort(skinnable, function(a, b)\n        return a.count > b.count\n    end)\n    \n    return skinnable\nend\n\n-- Find skins matching a pattern\nlocal function FindSkinsMatching(pattern)\n    local matches = {}\n    for prefab_name, skins in pairs(PREFAB_SKINS) do\n        for i, skin_name in ipairs(skins) do\n            if string.find(skin_name, pattern) then\n                table.insert(matches, {\n                    prefab = prefab_name,\n                    skin = skin_name\n                })\n            end\n        end\n    end\n    return matches\nend\n\n-- Find all Victorian-themed skins\nlocal victorian_skins = FindSkinsMatching("victorian")\n'})}),"\n",(0,s.jsx)(e.h3,{id:"statistics-and-analysis",children:"Statistics and Analysis"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-lua",children:'-- Count total skins in the game\nlocal function CountTotalSkins()\n    local total = 0\n    for prefab_name, skins in pairs(PREFAB_SKINS) do\n        total = total + #skins\n    end\n    return total\nend\n\n-- Find most popular skin themes\nlocal function GetSkinThemes()\n    local themes = {}\n    for prefab_name, skins in pairs(PREFAB_SKINS) do\n        for i, skin_name in ipairs(skins) do\n            -- Extract theme from skin name (after last underscore)\n            local theme = skin_name:match("_([^_]+)$")\n            if theme then\n                themes[theme] = (themes[theme] or 0) + 1\n            end\n        end\n    end\n    return themes\nend\n\nprint("Total skins in game:", CountTotalSkins())\n'})}),"\n",(0,s.jsx)(e.h2,{id:"current-statistics",children:"Current Statistics"}),"\n",(0,s.jsx)(e.p,{children:"Based on build version 676042:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Skinnable Prefabs:"})," 200+ different base prefabs"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Total Skins:"})," 2,000+ individual skin variations"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Most Skinned Items:"})," Backpacks, chests, weapons, and character accessories"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Popular Themes:"})," Victorian, Gothic, Mystical, Garden, Pirate, Royal"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,s.jsx)(e.h3,{id:"auto-generated-content",children:"Auto-Generated Content"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Do not manually edit"})," - Changes will be overwritten"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Generated by:"})," ",(0,s.jsx)(e.code,{children:"export_accountitems.lua"})," script"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Updates:"})," Automatically with each game build and DLC releases"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"skin-availability",children:"Skin Availability"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Not all skins may be available to all players"}),"\n",(0,s.jsx)(e.li,{children:"Some skins are event-limited or require special unlocks"}),"\n",(0,s.jsx)(e.li,{children:"The table shows all possible skins, not player inventory"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Large table loaded at startup"}),"\n",(0,s.jsx)(e.li,{children:"Consider caching frequently accessed skin lists"}),"\n",(0,s.jsx)(e.li,{children:"Use existence checks before attempting skin application"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabskin",children:"Prefab Skin"}),": Skin application and management system"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"./skin_assets.md",children:"Skin Assets"}),": Asset management for cosmetic items"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabs",children:"Prefabs"}),": Core prefab system with automatic skin integration"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"../progression/account_items.md",children:"Account Items"}),": Player skin unlocks and inventory"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(o,{...n})}):o(n)}}}]);