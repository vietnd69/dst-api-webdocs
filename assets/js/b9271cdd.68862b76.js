"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[1889],{5005:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"api-vanilla/examples/snippets/entity-spawning","title":"Entity Spawning Snippets","description":"This page provides reusable code snippets for spawning entities in Don\'t Starve Together.","source":"@site/docs/api-vanilla/examples/snippets/entity-spawning.md","sourceDirName":"api-vanilla/examples/snippets","slug":"/api-vanilla/examples/snippets/entity-spawning","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/entity-spawning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"entity-spawning","title":"Entity Spawning Snippets","sidebar_position":1,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Snippets","permalink":"/dst-api-webdocs/docs/category/snippets"},"next":{"title":"Event Handling Snippets","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/snippets/event-handling"}}');var i=t(4848),o=t(8453);const s={id:"entity-spawning",title:"Entity Spawning Snippets",sidebar_position:1,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="Entity Spawning Snippets",l={},p=[{value:"Basic Entity Spawning",id:"basic-entity-spawning",level:2},{value:"Spawn a Simple Entity",id:"spawn-a-simple-entity",level:3},{value:"Spawn at Specific Position",id:"spawn-at-specific-position",level:3},{value:"Advanced Entity Spawning",id:"advanced-entity-spawning",level:2},{value:"Spawn with Offset",id:"spawn-with-offset",level:3},{value:"Spawn Multiple Entities in a Pattern",id:"spawn-multiple-entities-in-a-pattern",level:3},{value:"Spawn with Components Configuration",id:"spawn-with-components-configuration",level:3},{value:"Special Spawning Techniques",id:"special-spawning-techniques",level:2},{value:"Spawn with Safe Position Finding",id:"spawn-with-safe-position-finding",level:3},{value:"Spawn with Delayed Activation",id:"spawn-with-delayed-activation",level:3},{value:"Spawn with Network Synchronization",id:"spawn-with-network-synchronization",level:3},{value:"Spawning Special Effects",id:"spawning-special-effects",level:2},{value:"Spawn FX at Entity",id:"spawn-fx-at-entity",level:3},{value:"Spawn FX with Automatic Cleanup",id:"spawn-fx-with-automatic-cleanup",level:3},{value:"Spawning Groups and Structures",id:"spawning-groups-and-structures",level:2},{value:"Spawn Structure with Surrounding Entities",id:"spawn-structure-with-surrounding-entities",level:3},{value:"Spawn Linked Entities",id:"spawn-linked-entities",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"entity-spawning-snippets",children:"Entity Spawning Snippets"})}),"\n",(0,i.jsx)(e.p,{children:"This page provides reusable code snippets for spawning entities in Don't Starve Together."}),"\n",(0,i.jsx)(e.h2,{id:"basic-entity-spawning",children:"Basic Entity Spawning"}),"\n",(0,i.jsx)(e.h3,{id:"spawn-a-simple-entity",children:"Spawn a Simple Entity"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn a basic entity at the player\'s position\nlocal function SpawnEntityAtPlayer(prefab)\n    local player = ThePlayer\n    if player then\n        local x, y, z = player.Transform:GetWorldPosition()\n        local entity = SpawnPrefab(prefab)\n        entity.Transform:SetPosition(x, y, z)\n        return entity\n    end\n    return nil\nend\n\n-- Usage\nlocal rabbit = SpawnEntityAtPlayer("rabbit")\n'})}),"\n",(0,i.jsx)(e.h3,{id:"spawn-at-specific-position",children:"Spawn at Specific Position"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn an entity at specific coordinates\nlocal function SpawnEntityAt(prefab, x, y, z)\n    local entity = SpawnPrefab(prefab)\n    entity.Transform:SetPosition(x, y, z)\n    return entity\nend\n\n-- Usage\nlocal beefalo = SpawnEntityAt("beefalo", 100, 0, 100)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"advanced-entity-spawning",children:"Advanced Entity Spawning"}),"\n",(0,i.jsx)(e.h3,{id:"spawn-with-offset",children:"Spawn with Offset"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn an entity with offset from a position\nlocal function SpawnEntityWithOffset(prefab, pos, offset_x, offset_y, offset_z)\n    local entity = SpawnPrefab(prefab)\n    entity.Transform:SetPosition(pos.x + offset_x, pos.y + offset_y, pos.z + offset_z)\n    return entity\nend\n\n-- Usage\nlocal player_pos = ThePlayer:GetPosition()\nlocal spider = SpawnEntityWithOffset("spider", player_pos, 5, 0, 5)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"spawn-multiple-entities-in-a-pattern",children:"Spawn Multiple Entities in a Pattern"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn entities in a circle pattern\nlocal function SpawnEntitiesInCircle(prefab, center_pos, radius, count)\n    local entities = {}\n    local angle_step = 2 * math.pi / count\n    \n    for i = 1, count do\n        local angle = angle_step * i\n        local x = center_pos.x + radius * math.cos(angle)\n        local z = center_pos.z + radius * math.sin(angle)\n        \n        local entity = SpawnPrefab(prefab)\n        entity.Transform:SetPosition(x, center_pos.y, z)\n        table.insert(entities, entity)\n    end\n    \n    return entities\nend\n\n-- Usage\nlocal player_pos = ThePlayer:GetPosition()\nlocal hounds = SpawnEntitiesInCircle("hound", player_pos, 10, 5)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"spawn-with-components-configuration",children:"Spawn with Components Configuration"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn an entity with specific component configurations\nlocal function SpawnConfiguredEntity(prefab, pos, config)\n    local entity = SpawnPrefab(prefab)\n    entity.Transform:SetPosition(pos:Get())\n    \n    -- Configure components based on provided config\n    if config.health and entity.components.health then\n        entity.components.health:SetMaxHealth(config.health)\n        entity.components.health:SetPercent(config.health_percent or 1)\n    end\n    \n    if config.combat and entity.components.combat then\n        entity.components.combat:SetDefaultDamage(config.combat.damage or 10)\n        entity.components.combat:SetAttackPeriod(config.combat.period or 2)\n    end\n    \n    if config.lootdropper and entity.components.lootdropper then\n        entity.components.lootdropper:SetLoot(config.lootdropper.loot or {})\n    end\n    \n    return entity\nend\n\n-- Usage\nlocal config = {\n    health = 200,\n    health_percent = 0.5,\n    combat = {\n        damage = 20,\n        period = 3\n    },\n    lootdropper = {\n        loot = {"meat", "meat"}\n    }\n}\n\nlocal player_pos = ThePlayer:GetPosition()\nlocal custom_hound = SpawnConfiguredEntity("hound", player_pos, config)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"special-spawning-techniques",children:"Special Spawning Techniques"}),"\n",(0,i.jsx)(e.h3,{id:"spawn-with-safe-position-finding",children:"Spawn with Safe Position Finding"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn an entity at a safe position near the target\nlocal function SpawnEntityAtSafePosition(prefab, near_pos, min_dist, max_dist)\n    local entity = SpawnPrefab(prefab)\n    \n    -- Try to find a valid spawn position\n    local function IsValidSpawnPoint(pt)\n        return TheWorld.Map:IsPassableAtPoint(pt.x, pt.y, pt.z) and\n               not TheWorld.Map:IsPointNearHole(pt) and\n               TheWorld.Map:GetTileAtPoint(pt.x, pt.y, pt.z) ~= GROUND.IMPASSABLE\n    end\n    \n    -- Try several positions\n    local theta = math.random() * 2 * math.pi\n    local radius = min_dist\n    local attempts = 0\n    local max_attempts = 20\n    \n    while attempts < max_attempts do\n        radius = min_dist + (max_dist - min_dist) * (attempts / max_attempts)\n        local offset = Vector3(radius * math.cos(theta), 0, radius * math.sin(theta))\n        local pos = near_pos + offset\n        \n        if IsValidSpawnPoint(pos) then\n            entity.Transform:SetPosition(pos:Get())\n            return entity\n        end\n        \n        theta = theta + math.pi * 0.5\n        attempts = attempts + 1\n    end\n    \n    -- If no safe position found, use the original position\n    entity.Transform:SetPosition(near_pos:Get())\n    return entity\nend\n\n-- Usage\nlocal player_pos = ThePlayer:GetPosition()\nlocal safe_spider = SpawnEntityAtSafePosition("spider", player_pos, 5, 15)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"spawn-with-delayed-activation",children:"Spawn with Delayed Activation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn an entity that activates after a delay\nlocal function SpawnDelayedEntity(prefab, pos, delay, activation_fn)\n    local entity = SpawnPrefab(prefab)\n    entity.Transform:SetPosition(pos:Get())\n    \n    -- Initially disable the entity if possible\n    if entity.components.combat then\n        entity.components.combat:SetTarget(nil)\n    end\n    \n    if entity.components.locomotor then\n        entity.components.locomotor:Stop()\n    end\n    \n    -- Add a task to activate the entity after delay\n    entity:DoTaskInTime(delay, function(inst)\n        if activation_fn then\n            activation_fn(inst)\n        else\n            -- Default activation behavior\n            if inst.sg then\n                inst.sg:GoToState("idle")\n            end\n            \n            if inst.components.sleeper then\n                inst.components.sleeper:WakeUp()\n            end\n        end\n    end)\n    \n    return entity\nend\n\n-- Usage\nlocal player_pos = ThePlayer:GetPosition()\nlocal delayed_hound = SpawnDelayedEntity("hound", player_pos, 5, function(inst)\n    inst.components.combat:SetTarget(ThePlayer)\nend)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"spawn-with-network-synchronization",children:"Spawn with Network Synchronization"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn an entity with proper network synchronization\nlocal function SpawnNetworkedEntity(prefab, pos)\n    -- Only the server should spawn the actual entity\n    if TheWorld.ismastersim then\n        local entity = SpawnPrefab(prefab)\n        entity.Transform:SetPosition(pos:Get())\n        return entity\n    else\n        -- On client, we can request the server to spawn\n        SendRPCToServer(RPC.SpawnPrefab, prefab, pos.x, pos.y, pos.z)\n        return nil\n    end\nend\n\n-- Server-side RPC handler (add to modmain.lua)\n-- AddModRPCHandler("ModName", "SpawnPrefab", function(player, prefab, x, y, z)\n--     local entity = SpawnPrefab(prefab)\n--     entity.Transform:SetPosition(x, y, z)\n-- end)\n\n-- Usage\nlocal player_pos = ThePlayer:GetPosition()\nlocal networked_entity = SpawnNetworkedEntity("rabbit", player_pos)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"spawning-special-effects",children:"Spawning Special Effects"}),"\n",(0,i.jsx)(e.h3,{id:"spawn-fx-at-entity",children:"Spawn FX at Entity"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn a visual effect at an entity\'s position\nlocal function SpawnFXAtEntity(fx_prefab, entity, height_offset)\n    if entity and entity:IsValid() then\n        local x, y, z = entity.Transform:GetWorldPosition()\n        local fx = SpawnPrefab(fx_prefab)\n        fx.Transform:SetPosition(x, y + (height_offset or 0), z)\n        return fx\n    end\n    return nil\nend\n\n-- Usage\nlocal fx = SpawnFXAtEntity("statue_transition", ThePlayer, 1)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"spawn-fx-with-automatic-cleanup",children:"Spawn FX with Automatic Cleanup"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn a temporary effect that cleans itself up\nlocal function SpawnTemporaryFX(fx_prefab, pos, duration)\n    local fx = SpawnPrefab(fx_prefab)\n    fx.Transform:SetPosition(pos:Get())\n    \n    -- Set up automatic removal after duration\n    fx:DoTaskInTime(duration, function(inst)\n        inst:Remove()\n    end)\n    \n    return fx\nend\n\n-- Usage\nlocal player_pos = ThePlayer:GetPosition()\nlocal temp_fx = SpawnTemporaryFX("collapse_small", player_pos, 5)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"spawning-groups-and-structures",children:"Spawning Groups and Structures"}),"\n",(0,i.jsx)(e.h3,{id:"spawn-structure-with-surrounding-entities",children:"Spawn Structure with Surrounding Entities"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn a structure with surrounding entities\nlocal function SpawnStructureWithGuards(structure_prefab, guard_prefab, pos, guard_count, radius)\n    -- Spawn the main structure\n    local structure = SpawnPrefab(structure_prefab)\n    structure.Transform:SetPosition(pos:Get())\n    \n    -- Spawn guards around it\n    local guards = {}\n    local angle_step = 2 * math.pi / guard_count\n    \n    for i = 1, guard_count do\n        local angle = angle_step * i\n        local x = pos.x + radius * math.cos(angle)\n        local z = pos.z + radius * math.sin(angle)\n        \n        local guard = SpawnPrefab(guard_prefab)\n        guard.Transform:SetPosition(x, pos.y, z)\n        \n        -- Make guards protect the structure\n        if guard.components.combat then\n            guard:ListenForEvent("attacked", function(inst, data)\n                if structure:IsValid() and data.attacker and \n                   data.attacker.components.combat then\n                    guard.components.combat:SetTarget(data.attacker)\n                end\n            end, structure)\n        end\n        \n        table.insert(guards, guard)\n    end\n    \n    return structure, guards\nend\n\n-- Usage\nlocal player_pos = ThePlayer:GetPosition()\nlocal nest, spiders = SpawnStructureWithGuards("spiderden", "spider", player_pos, 3, 3)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"spawn-linked-entities",children:"Spawn Linked Entities"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- Spawn two entities that are linked to each other\nlocal function SpawnLinkedEntities(prefab1, prefab2, pos1, pos2, link_tag)\n    local entity1 = SpawnPrefab(prefab1)\n    local entity2 = SpawnPrefab(prefab2)\n    \n    entity1.Transform:SetPosition(pos1:Get())\n    entity2.Transform:SetPosition(pos2:Get())\n    \n    -- Create a link between the entities\n    link_tag = link_tag or "linked_entity_" .. tostring(math.random(1000000))\n    entity1:AddTag(link_tag)\n    entity2:AddTag(link_tag)\n    \n    entity1.linked_entity = entity2\n    entity2.linked_entity = entity1\n    \n    return entity1, entity2\nend\n\n-- Usage\nlocal pos1 = ThePlayer:GetPosition()\nlocal pos2 = pos1 + Vector3(20, 0, 0)\nlocal wormhole1, wormhole2 = SpawnLinkedEntities("wormhole", "wormhole", pos1, pos2, "wormhole_pair_1")\n'})}),"\n",(0,i.jsx)(e.p,{children:"These snippets provide a foundation for various entity spawning scenarios in Don't Starve Together mods. Adapt them to your specific needs and combine them for more complex spawning behaviors."})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);