"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2820],{2727:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"community/coding-standards","title":"Coding Standards and Style Guide","description":"This document outlines the coding standards and style guidelines for code examples in the Don\'t Starve Together API Documentation. Following these standards ensures consistency and readability across all code examples.","source":"@site/docs/community/coding-standards.md","sourceDirName":"community","slug":"/community/coding-standards","permalink":"/dst-api-webdocs/docs/community/coding-standards","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"coding-standards","title":"Coding Standards and Style Guide","sidebar_position":8}}');var i=t(4848),a=t(8453);const l={id:"coding-standards",title:"Coding Standards and Style Guide",sidebar_position:8},o="Coding Standards and Style Guide",r={},d=[{value:"Lua Coding Standards",id:"lua-coding-standards",level:2},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Formatting",id:"formatting",level:3},{value:"Comments",id:"comments",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"DST-Specific Conventions",id:"dst-specific-conventions",level:2},{value:"Component Usage",id:"component-usage",level:3},{value:"Event Handling",id:"event-handling",level:3},{value:"Network Code",id:"network-code",level:3},{value:"Example Formats",id:"example-formats",level:2},{value:"Basic Component Example",id:"basic-component-example",level:3},{value:"Full Entity Example",id:"full-entity-example",level:3},{value:"Common Mistakes to Avoid",id:"common-mistakes-to-avoid",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"coding-standards-and-style-guide",children:"Coding Standards and Style Guide"})}),"\n",(0,i.jsx)(e.p,{children:"This document outlines the coding standards and style guidelines for code examples in the Don't Starve Together API Documentation. Following these standards ensures consistency and readability across all code examples."}),"\n",(0,i.jsx)(e.h2,{id:"lua-coding-standards",children:"Lua Coding Standards"}),"\n",(0,i.jsx)(e.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Variables"}),": Use ",(0,i.jsx)(e.code,{children:"snake_case"})," for variable names"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="variable_naming.lua"',children:"local player_position = Vector3(0, 0, 0)\nlocal health_component = inst.components.health\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Functions"}),": Use ",(0,i.jsx)(e.code,{children:"snake_case"})," for function names"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="function_naming.lua"',children:"local function update_player_position()\n    -- Function body\nend\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Constants"}),": Use ",(0,i.jsx)(e.code,{children:"UPPER_SNAKE_CASE"})," for constants"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="constants.lua"',children:"local MAX_HEALTH = 100\nlocal DEFAULT_DAMAGE = TUNING.SPEAR_DAMAGE\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Component References"}),": Use full names, not abbreviations"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="component_references.lua"',children:"-- Good\nlocal health = inst.components.health\n\n-- Avoid\nlocal hlth = inst.components.health\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"formatting",children:"Formatting"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Indentation"}),": Use 4 spaces for indentation (not tabs)"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="indentation.lua"',children:"function SomeFunction()\n    if condition then\n        DoSomething()\n    end\nend\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Line Length"}),": Keep lines under 80 characters when possible"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="line_length.lua"',children:"-- Break long lines\nlocal very_long_function_call = SomeFunctionWithManyParameters(\n    parameter1,\n    parameter2,\n    parameter3\n)\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Spacing"}),": Use spaces around operators and after commas"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="spacing.lua"',children:"local x = 1 + 2\nlocal items = {1, 2, 3}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"comments",children:"Comments"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Function Documentation"}),": Document parameters and return values"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="function_docs.lua"',children:"-- Calculates damage with modifiers\n-- @param base_damage: Base damage amount\n-- @param target: Target entity\n-- @return Modified damage value\nlocal function calculate_damage(base_damage, target)\n    -- Function body\nend\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Inline Comments"}),": Use for explaining non-obvious code"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="inline_comments.lua"',children:"local value = x * 2 -- Double the value for scaling\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"TODO Comments"}),": Mark incomplete or future work"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="todo_comments.lua"',children:"-- TODO: Add support for custom damage types\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Local Variables"}),": Prefer local variables over global ones"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="local_variables.lua"',children:"-- Good\nlocal function MyFunction()\n    local counter = 0\nend\n\n-- Avoid\nfunction MyFunction()\n    counter = 0  -- Global variable!\nend\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Error Handling"}),": Include error handling in examples"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="error_handling.lua"',children:'if inst.components.health ~= nil then\n    inst.components.health:SetMaxHealth(100)\nelse\n    print("Entity missing health component")\nend\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Performance"}),": Demonstrate efficient coding practices"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="performance.lua"',children:"-- Good - cache component reference\nlocal health = inst.components.health\nhealth:SetMaxHealth(100)\nhealth:SetInvincible(true)\n\n-- Avoid - repeated lookups\ninst.components.health:SetMaxHealth(100)\ninst.components.health:SetInvincible(true)\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"dst-specific-conventions",children:"DST-Specific Conventions"}),"\n",(0,i.jsx)(e.h3,{id:"component-usage",children:"Component Usage"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Component Access"}),": Always check if a component exists before using it"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="component_access.lua"',children:"if inst.components.health ~= nil then\n    inst.components.health:DoDelta(-10)\nend\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Component Addition"}),": Show proper component initialization"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="component_init.lua"',children:'inst:AddComponent("health")\ninst.components.health:SetMaxHealth(100)\ninst.components.health:SetPercent(1)\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"event-handling",children:"Event Handling"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Event Listeners"}),": Use consistent event handling patterns"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="event_listeners.lua"',children:'inst:ListenForEvent("death", function(inst)\n    -- Handle death event\nend)\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Event Triggers"}),": Show proper event triggering"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="event_triggers.lua"',children:'inst:PushEvent("customevent", {data = value})\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"network-code",children:"Network Code"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Client/Server Distinction"}),": Clearly mark client and server code"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="client_server_code.lua"',children:'-- Server-only code\nif TheWorld.ismastersim then\n    inst:AddComponent("health")\nend\n\n-- Client-side code\nif not TheWorld.ismastersim then\n    -- Handle client-side effects\nend\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"RPC Handling"}),": Show proper RPC usage"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="rpc_handling.lua"',children:"-- Sending an RPC\nSendModRPCToServer(MOD_RPC.MyMod.MyAction, target_entity)\n\n-- Receiving an RPC\nAddModRPCHandler(MOD_RPC.MyMod.MyAction, function(player, target)\n    -- Handle the RPC\nend)\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"example-formats",children:"Example Formats"}),"\n",(0,i.jsx)(e.h3,{id:"basic-component-example",children:"Basic Component Example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="basic_component.lua"',children:'-- Adding and configuring a component\nlocal function SetupHealthComponent(inst)\n    -- Add the component\n    inst:AddComponent("health")\n    \n    -- Configure basic properties\n    local health = inst.components.health\n    health:SetMaxHealth(100)\n    health:SetPercent(1)\n    \n    -- Configure advanced properties\n    health:SetAbsorptionAmount(0.2) -- 20% damage absorption\n    health:SetInvincible(false)\n    \n    -- Set up event handling\n    inst:ListenForEvent("death", function(inst)\n        -- Handle death\n        print("Entity has died")\n    end)\n    \n    return health\nend\n'})}),"\n",(0,i.jsx)(e.h3,{id:"full-entity-example",children:"Full Entity Example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:'title="full_entity.lua"',children:'-- Create a custom entity with multiple components\nlocal function CreateCustomEntity()\n    -- Create the base entity\n    local inst = CreateEntity()\n    \n    -- Add required engine components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Set up animations\n    inst.AnimState:SetBank("customentity")\n    inst.AnimState:SetBuild("customentity")\n    inst.AnimState:PlayAnimation("idle")\n    \n    -- Add network components\n    inst:AddTag("custom_entity")\n    \n    -- Finalize network setup\n    inst.entity:SetPristine()\n    \n    -- Server-only components\n    if TheWorld.ismastersim then\n        -- Add components\n        inst:AddComponent("inspectable")\n        inst:AddComponent("health")\n        inst:AddComponent("combat")\n        \n        -- Configure components\n        inst.components.health:SetMaxHealth(100)\n        inst.components.combat:SetDefaultDamage(10)\n        \n        -- Set up event handlers\n        inst:ListenForEvent("death", OnDeath)\n    end\n    \n    return inst\nend\n'})}),"\n",(0,i.jsx)(e.h2,{id:"common-mistakes-to-avoid",children:"Common Mistakes to Avoid"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Missing nil checks"})," for components"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Hardcoded values"})," instead of using ",(0,i.jsx)(e.code,{children:"TUNING"})," constants"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Inconsistent naming"})," across examples"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Insufficient comments"})," for complex code"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"No error handling"})," in examples"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Missing network code"})," distinctions (client vs. server)"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsx)(e.p,{children:"For more information on Lua and Don't Starve Together coding conventions:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"http://lua-users.org/wiki/LuaStyleGuide",children:"Lua Style Guide"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://forums.kleientertainment.com/forums/forum/79-dont-starve-together-beta-modding/",children:"Klei Entertainment Modding Forum"})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"By following these coding standards, we ensure that code examples in the documentation are consistent, readable, and demonstrate best practices for Don't Starve Together modding."})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function l(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);