"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[91705],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var l=s(96540);const i={},r=l.createContext(i);function a(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(r.Provider,{value:n},e.children)}},83709:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/utilities/mathutil","title":"Math Utilities","description":"Mathematical utility functions for sine waves, interpolation, rounding, clamping, distance calculations, and angle operations","source":"@site/docs/game-scripts/core-systems/fundamentals/utilities/mathutil.md","sourceDirName":"game-scripts/core-systems/fundamentals/utilities","slug":"/game-scripts/core-systems/fundamentals/utilities/mathutil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/mathutil","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"mathutil","title":"Math Utilities","description":"Mathematical utility functions for sine waves, interpolation, rounding, clamping, distance calculations, and angle operations","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"File Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/fileutil"},"next":{"title":"Performance Utilities","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/perfutil"}}');var i=s(74848),r=s(28453);const a={id:"mathutil",title:"Math Utilities",description:"Mathematical utility functions for sine waves, interpolation, rounding, clamping, distance calculations, and angle operations",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},t="Math Utilities",d={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Wave Generation Functions",id:"wave-generation-functions",level:2},{value:"GetSineVal(mod, abs, inst)",id:"get-sine-val",level:3},{value:"Interpolation Functions",id:"interpolation-functions",level:2},{value:"Lerp(a, b, t)",id:"lerp",level:3},{value:"Remap(i, a, b, x, y)",id:"remap",level:3},{value:"Rounding Functions",id:"rounding-functions",level:2},{value:"RoundBiasedUp(num, idp)",id:"round-biased-up",level:3},{value:"RoundBiasedDown(num, idp)",id:"round-biased-down",level:3},{value:"RoundToNearest(numToRound, multiple)",id:"round-to-nearest",level:3},{value:"Clamping Functions",id:"clamping-functions",level:2},{value:"Clamp(num, min, max)",id:"clamp",level:3},{value:"math.clamp(num, min, max)",id:"math-clamp",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"IsNumberEven(num)",id:"is-number-even",level:3},{value:"math.range(start, stop, step)",id:"math-range",level:3},{value:"math.diff(a, b)",id:"math-diff",level:3},{value:"Distance Functions",id:"distance-functions",level:2},{value:"DistXYSq(p1, p2)",id:"dist-xy-sq",level:3},{value:"DistXZSq(p1, p2)",id:"dist-xz-sq",level:3},{value:"Angle Functions",id:"angle-functions",level:2},{value:"ReduceAngle(rot)",id:"reduce-angle",level:3},{value:"DiffAngle(rot1, rot2)",id:"diff-angle",level:3},{value:"ReduceAngleRad(rot)",id:"reduce-angle-rad",level:3},{value:"DiffAngleRad(rot1, rot2)",id:"diff-angle-rad",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Animation and Visual Effects",id:"animation-and-visual-effects",level:3},{value:"Game Mechanics",id:"game-mechanics",level:3},{value:"Performance Notes",id:"performance-notes",level:2},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"math-utilities",children:"Math Utilities"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"mathutil.lua"})," script provides essential mathematical utility functions used throughout Don't Starve Together. These functions handle common mathematical operations including sine wave generation, interpolation, rounding, clamping, distance calculations, and angle manipulations."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Interpolate between values\nlocal result = Lerp(10, 20, 0.5) -- Returns 15\n\n-- Generate sine wave for animations\nlocal wave = GetSineVal(1, true) -- Absolute sine wave\n\n-- Clamp values to range\nlocal clamped = Clamp(150, 0, 100) -- Returns 100\n\n-- Calculate distance between points\nlocal dist_sq = DistXZSq(pos1, pos2)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"wave-generation-functions",children:"Wave Generation Functions"}),"\n",(0,i.jsx)(n.h3,{id:"get-sine-val",children:"GetSineVal(mod, abs, inst)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nGenerates a sine wave value based on game time with optional period modification and absolute value."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mod"})," (number): Optional period modifier (default: 1)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"abs"})," (boolean): Whether to return absolute value of the sine wave"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"inst"})," (EntityScript): Optional entity to use for time calculation (uses entity's alive time)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Sine wave value between -1 and 1 (or 0 and 1 if abs is true)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Basic sine wave for gentle animation\nlocal gentle_wave = GetSineVal()\n\n-- Fast oscillation with absolute values (0 to 1)\nlocal fast_pulse = GetSineVal(3, true)\n\n-- Slow wave tied to entity's lifetime\nlocal entity_wave = GetSineVal(0.5, false, inst)\n\n-- Use for breathing effect\nlocal scale = 1 + GetSineVal(2, true, inst) * 0.1\ninst.Transform:SetScale(scale, scale, scale)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interpolation-functions",children:"Interpolation Functions"}),"\n",(0,i.jsx)(n.h3,{id:"lerp",children:"Lerp(a, b, t)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nLinear interpolation between two values over a given parameter t."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"a"})," (number): Start value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"b"})," (number): End value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"t"})," (number): Interpolation parameter (0 to 1)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Interpolated value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Basic interpolation\nlocal mid_point = Lerp(0, 100, 0.5) -- Returns 50\n\n-- Animation over time\nlocal progress = GetTime() % 2 / 2 -- 0 to 1 over 2 seconds\nlocal animated_x = Lerp(start_x, end_x, progress)\n\n-- Color blending\nlocal red_component = Lerp(0.2, 0.8, health_percent)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"remap",children:"Remap(i, a, b, x, y)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRemaps a value from one range to another range."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"i"})," (number): Input value to remap"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"a"})," (number): Input range minimum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"b"})," (number): Input range maximum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"})," (number): Output range minimum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"y"})," (number): Output range maximum"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Remapped value"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Remap health (0-100) to alpha (0.3-1.0)\nlocal health = 75\nlocal alpha = Remap(health, 0, 100, 0.3, 1.0) -- Returns 0.825\n\n-- Remap temperature (-20 to 40) to color intensity (0 to 255)\nlocal temp = 15\nlocal color_intensity = Remap(temp, -20, 40, 0, 255)\n\n-- Remap day progress (0-1) to sun angle (-90 to 90)\nlocal day_progress = 0.25\nlocal sun_angle = Remap(day_progress, 0, 1, -90, 90)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"rounding-functions",children:"Rounding Functions"}),"\n",(0,i.jsx)(n.h3,{id:"round-biased-up",children:"RoundBiasedUp(num, idp)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRounds a number to specified decimal places, with 0.5-values always rounded up."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"num"})," (number): Number to round"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"idp"})," (number): Decimal places (default: 0)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Rounded number"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Round to integers (0.5 goes up)\nlocal rounded = RoundBiasedUp(2.5) -- Returns 3\nlocal rounded2 = RoundBiasedUp(2.4) -- Returns 2\n\n-- Round to 2 decimal places\nlocal precise = RoundBiasedUp(3.14159, 2) -- Returns 3.14\n\n-- Round currency values\nlocal price = RoundBiasedUp(19.95, 0) -- Returns 20\n"})}),"\n",(0,i.jsx)(n.h3,{id:"round-biased-down",children:"RoundBiasedDown(num, idp)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRounds a number to specified decimal places, with 0.5-values always rounded down."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"num"})," (number): Number to round"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"idp"})," (number): Decimal places (default: 0)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Rounded number"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Round to integers (0.5 goes down)\nlocal rounded = RoundBiasedDown(2.5) -- Returns 2\nlocal rounded2 = RoundBiasedDown(2.6) -- Returns 3\n\n-- Conservative rounding for damage calculations\nlocal damage = RoundBiasedDown(player_damage * modifier, 1)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"round-to-nearest",children:"RoundToNearest(numToRound, multiple)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nRounds a number to the nearest multiple of a specified value."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"numToRound"})," (number): Number to round"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"multiple"})," (number): Multiple to round to"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Number rounded to nearest multiple"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Round to nearest 5\nlocal rounded = RoundToNearest(23, 5) -- Returns 25\n\n-- Round to nearest grid position\nlocal grid_x = RoundToNearest(player_x, TILE_SCALE)\nlocal grid_z = RoundToNearest(player_z, TILE_SCALE)\n\n-- Round spawn time to nearest minute\nlocal spawn_time = RoundToNearest(random_time, 60)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"clamping-functions",children:"Clamping Functions"}),"\n",(0,i.jsx)(n.h3,{id:"clamp",children:"Clamp(num, min, max)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nConstrains a number between minimum and maximum values."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"num"})," (number): Number to clamp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"min"})," (number): Minimum allowed value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max"})," (number): Maximum allowed value"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Clamped number"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Clamp health to valid range\nlocal health = Clamp(new_health, 0, max_health)\n\n-- Clamp UI element position\nlocal x = Clamp(mouse_x, panel_left, panel_right)\nlocal y = Clamp(mouse_y, panel_top, panel_bottom)\n\n-- Clamp angle for limited rotation\nlocal angle = Clamp(target_angle, -45, 45)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"math-clamp",children:"math.clamp(num, min, max)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nMath library extension for clamping values. Identical to Clamp function."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"num"})," (number): Number to clamp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"min"})," (number): Minimum allowed value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max"})," (number): Maximum allowed value"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Clamped number"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Using math library extension\nlocal clamped = math.clamp(value, 0, 1)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,i.jsx)(n.h3,{id:"is-number-even",children:"IsNumberEven(num)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nChecks if a number is even."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"num"})," (number): Number to test"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(boolean): True if number is even"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Alternate behavior for even/odd\nif IsNumberEven(day_number) then\n    SpawnSpecialEvent()\nend\n\n-- Pattern generation\nfor i = 1, 10 do\n    local color = IsNumberEven(i) and "white" or "black"\n    CreateChessboardTile(i, color)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"math-range",children:"math.range(start, stop, step)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCreates a table containing a range of numbers from start to stop with optional step."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"start"})," (number): Starting value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stop"})," (number): Ending value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"step"})," (number): Step size (default: 1)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(table): Array of numbers in the range"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Create range 1 to 10\nlocal numbers = math.range(1, 10) -- {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n-- Create range with step\nlocal evens = math.range(2, 10, 2) -- {2, 4, 6, 8, 10}\n\n-- Create countdown\nlocal countdown = math.range(10, 1, -1) -- {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"math-diff",children:"math.diff(a, b)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the absolute difference between two numbers."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"a"})," (number): First number"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"b"})," (number): Second number"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Absolute difference"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Compare values\nlocal difference = math.diff(player_level, required_level)\nif difference <= 2 then\n    AllowAccess()\nend\n\n-- Find closest match\nlocal closest_value = nil\nlocal smallest_diff = math.huge\nfor _, candidate in ipairs(options) do\n    local diff = math.diff(target, candidate)\n    if diff < smallest_diff then\n        smallest_diff = diff\n        closest_value = candidate\n    end\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"distance-functions",children:"Distance Functions"}),"\n",(0,i.jsx)(n.h3,{id:"dist-xy-sq",children:"DistXYSq(p1, p2)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the squared distance between two points in XY plane (2D)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1"})," (table): First point with .x and .y properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2"})," (table): Second point with .x and .y properties"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Squared distance"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check if entities are close (avoids expensive sqrt)\nlocal pos1 = {x = 10, y = 20}\nlocal pos2 = {x = 13, y = 24}\nlocal dist_sq = DistXYSq(pos1, pos2) -- Returns 25 (5\xb2 = 25)\n\nif dist_sq < 100 then -- Within 10 units\n    TriggerNearbyEffect()\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dist-xz-sq",children:"DistXZSq(p1, p2)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the squared distance between two points in XZ plane (3D world coordinates)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p1"})," (table): First point with .x and .z properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"p2"})," (table): Second point with .x and .z properties"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Squared distance"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- 3D world distance calculation\nlocal player_pos = {x = ThePlayer.Transform:GetWorldPosition()}\nlocal target_pos = {x = target.Transform:GetWorldPosition()}\n\nlocal dist_sq = DistXZSq(player_pos, target_pos)\nlocal interaction_range_sq = INTERACTION_RANGE * INTERACTION_RANGE\n\nif dist_sq <= interaction_range_sq then\n    ShowInteractionPrompt()\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"angle-functions",children:"Angle Functions"}),"\n",(0,i.jsx)(n.h3,{id:"reduce-angle",children:"ReduceAngle(rot)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nNormalizes an angle to the range [-180, 180] degrees."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rot"})," (number): Angle in degrees"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Normalized angle"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Normalize rotation angles\nlocal angle = 450 -- Equivalent to 90 degrees\nlocal normalized = ReduceAngle(angle) -- Returns 90\n\n-- Handle continuous rotation\nlocal new_rotation = old_rotation + rotation_speed * dt\nnew_rotation = ReduceAngle(new_rotation)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"diff-angle",children:"DiffAngle(rot1, rot2)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the absolute angular difference between two angles in degrees."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rot1"})," (number): First angle in degrees"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rot2"})," (number): Second angle in degrees"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Absolute angular difference"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Check if facing target\nlocal player_angle = ThePlayer.Transform:GetRotation()\nlocal target_angle = math.atan2(target_z - player_z, target_x - player_x) * 180 / math.pi\nlocal angle_diff = DiffAngle(player_angle, target_angle)\n\nif angle_diff < 10 then -- Within 10 degrees\n    SetFacingTarget(true)\nend\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reduce-angle-rad",children:"ReduceAngleRad(rot)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nNormalizes an angle to the range [-\u03c0, \u03c0] radians."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rot"})," (number): Angle in radians"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Normalized angle in radians"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Normalize radian angles\nlocal angle_rad = 7 -- Greater than 2\u03c0\nlocal normalized = ReduceAngleRad(angle_rad)\n\n-- Vector rotation calculations\nlocal normalized_heading = ReduceAngleRad(current_heading + turn_amount)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"diff-angle-rad",children:"DiffAngleRad(rot1, rot2)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nCalculates the absolute angular difference between two angles in radians."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rot1"})," (number): First angle in radians"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rot2"})," (number): Second angle in radians"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"(number): Absolute angular difference in radians"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Precise angular comparison using radians\nlocal heading1 = math.atan2(vel1.z, vel1.x)\nlocal heading2 = math.atan2(vel2.z, vel2.x)\nlocal angular_diff = DiffAngleRad(heading1, heading2)\n\nif angular_diff < math.pi / 18 then -- Within 10 degrees (\u03c0/18 radians)\n    SetSameDirection(true)\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"animation-and-visual-effects",children:"Animation and Visual Effects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Breathing/pulsing animation\nlocal scale = 1 + GetSineVal(2, true) * 0.1\ninst.Transform:SetScale(scale, scale, scale)\n\n-- Floating animation\nlocal bob_offset = GetSineVal(1.5, false) * 0.3\ninst.Transform:SetPosition(x, y + bob_offset, z)\n\n-- Color transitions\nlocal health_percent = inst.components.health:GetPercent()\nlocal red = Lerp(0, 1, 1 - health_percent)\nlocal green = Lerp(0, 1, health_percent)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"game-mechanics",children:"Game Mechanics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Damage calculation with rounding\nlocal base_damage = weapon.damage\nlocal modified_damage = base_damage * damage_multiplier\nlocal final_damage = RoundBiasedDown(modified_damage)\n\n-- Range checking (squared distance is faster)\nlocal range_sq = ATTACK_RANGE * ATTACK_RANGE\nlocal dist_sq = DistXZSq(attacker_pos, target_pos)\nif dist_sq <= range_sq then\n    PerformAttack()\nend\n\n-- Progress mapping\nlocal completion = Remap(current_resources, 0, required_resources, 0, 1)\nUpdateProgressBar(completion)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-notes",children:"Performance Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Squared distance functions"})," avoid expensive square root calculations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GetSineVal"})," uses game time efficiently for synchronized animations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Angle normalization"})," prevents floating point precision issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clamping"})," is faster than conditional statements for range limiting"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vector3",children:"Vector3"}),": 3D vector mathematics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/utilities/vecutil",children:"VecUtil"}),": Vector utility functions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./constants.md",children:"Constants"}),": Mathematical constants and definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./easing.md",children:"Easing"}),": Advanced interpolation and easing functions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./physics.md",children:"Physics"}),": Physics calculations and collision detection"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);