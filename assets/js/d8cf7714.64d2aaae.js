"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[63465],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(96540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},87020:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"game-scripts/core-systems/user-interface/typography/fonthelper","title":"Font Helper","description":"Utility function for adding font assets to asset tables","source":"@site/docs/game-scripts/core-systems/user-interface/typography/fonthelper.md","sourceDirName":"game-scripts/core-systems/user-interface/typography","slug":"/game-scripts/core-systems/user-interface/typography/fonthelper","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/typography/fonthelper","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"fonthelper","title":"Font Helper","description":"Utility function for adding font assets to asset tables","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Fonts","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/typography/fonts"},"next":{"title":"World Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/"}}');var i=s(74848),a=s(28453);const o={id:"fonthelper",title:"Font Helper",description:"Utility function for adding font assets to asset tables",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="Font Helper",r={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"AddFontAssets(asset_table, font_table)",id:"add-font-assets",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Asset Loading in Prefabs",id:"asset-loading-in-prefabs",level:3},{value:"Custom Font Registration",id:"custom-font-registration",level:3},{value:"Conditional Font Loading",id:"conditional-font-loading",level:3},{value:"Asset Type Details",id:"asset-type-details",level:2},{value:"Font Asset Creation",id:"font-asset-creation",level:3},{value:"Supported Font Formats",id:"supported-font-formats",level:3},{value:"Integration with Font System",id:"integration-with-font-system",level:2},{value:"Relationship to FONTS Table",id:"relationship-to-fonts-table",level:3},{value:"Asset Registration Flow",id:"asset-registration-flow",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Loading Efficiency",id:"loading-efficiency",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"font-helper",children:"Font Helper"})}),"\n",(0,i.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Build Version"}),(0,i.jsx)(n.th,{children:"Change Date"}),(0,i.jsx)(n.th,{children:"Change Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"676042"}),(0,i.jsx)(n.td,{children:"2025-06-21"}),(0,i.jsx)(n.td,{children:"stable"}),(0,i.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"fonthelper.lua"})," module provides a utility function for adding font assets to asset tables. This helper simplifies the process of registering font files as game assets by automatically creating Asset entries for each font in a font configuration table."]}),"\n",(0,i.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local font_assets = {}\nlocal my_fonts = {\n    { filename = "fonts/myfont.zip" },\n    { filename = "fonts/anotherfont.zip" },\n    { filename = "fonts/specialfont.zip" }\n}\n\n-- Add all font assets to the asset table\nAddFontAssets(font_assets, my_fonts)\n\n-- Result: font_assets now contains Asset entries for all fonts\n-- font_assets = {\n--     Asset("FONT", "fonts/myfont.zip"),\n--     Asset("FONT", "fonts/anotherfont.zip"),\n--     Asset("FONT", "fonts/specialfont.zip")\n-- }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.h3,{id:"add-font-assets",children:"AddFontAssets(asset_table, font_table)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status:"})," ",(0,i.jsx)(n.code,{children:"stable"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),"\nIterates through a font configuration table and adds corresponding font Asset entries to the provided asset table. This function is used during asset loading to register all fonts defined in the game's font configuration."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"asset_table"})," (table): Target table where font Asset entries will be inserted"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"font_table"})," (table): Array of font data objects containing filename information"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"None (modifies asset_table in-place)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Font Data Structure:"}),"\nEach entry in the font_table should have the following structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'{\n    filename = "string"  -- Path to the font file (required)\n    -- Additional properties like alias, fallback, etc. are ignored by this function\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Define asset table\nlocal assets = {}\n\n-- Define font configurations\nlocal fonts = {\n    { filename = "fonts/opensans50.zip" },\n    { filename = "fonts/bellefair50.zip" },\n    { filename = "fonts/hammerhead50.zip" }\n}\n\n-- Add font assets\nAddFontAssets(assets, fonts)\n\n-- assets now contains:\n-- {\n--     Asset("FONT", "fonts/opensans50.zip"),\n--     Asset("FONT", "fonts/bellefair50.zip"),\n--     Asset("FONT", "fonts/hammerhead50.zip")\n-- }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation Details:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function AddFontAssets( asset_table, font_table )\n    for i, fontdata in ipairs( font_table ) do\n        table.insert( asset_table, Asset( "FONT", fontdata.filename ) )\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"asset-loading-in-prefabs",children:"Asset Loading in Prefabs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In a prefab file\nlocal assets = {\n    -- Other assets...\n    Asset("ANIM", "anim/prefab_build.zip"),\n    Asset("ANIM", "anim/prefab_bank.zip"),\n}\n\n-- Add all game fonts\nAddFontAssets(assets, FONTS)\n\nlocal function fn()\n    -- Prefab creation code\nend\n\nreturn Prefab("myprefab", fn, assets)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-font-registration",children:"Custom Font Registration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Register custom mod fonts\nlocal custom_fonts = {\n    { filename = "fonts/modfont_ui.zip" },\n    { filename = "fonts/modfont_dialogue.zip" }\n}\n\nlocal mod_assets = {}\nAddFontAssets(mod_assets, custom_fonts)\n\n-- Register assets with mod system\nfor _, asset in ipairs(mod_assets) do\n    table.insert(Assets, asset)\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-font-loading",children:"Conditional Font Loading"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Load fonts based on language or platform\nlocal conditional_fonts = {}\n\nif LanguageTranslator.defaultlang == "jp" then\n    table.insert(conditional_fonts, { filename = "fonts/japanese_font.zip" })\nend\n\nif PLATFORM == "PS4" then\n    table.insert(conditional_fonts, { filename = "fonts/console_font.zip" })\nend\n\nlocal platform_assets = {}\nAddFontAssets(platform_assets, conditional_fonts)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"asset-type-details",children:"Asset Type Details"}),"\n",(0,i.jsx)(n.h3,{id:"font-asset-creation",children:"Font Asset Creation"}),"\n",(0,i.jsx)(n.p,{children:'The function creates assets with the "FONT" type:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'Asset("FONT", filename)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Asset Properties:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type"}),': "FONT" - Identifies this as a font resource']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filename"}),": Full path to the font file, typically in .zip format"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Loading"}),": Fonts are loaded during the asset loading phase of game initialization"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"supported-font-formats",children:"Supported Font Formats"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:".zip"}),": Compressed font packages (most common)"]}),"\n",(0,i.jsx)(n.li,{children:"Font files are typically packaged with additional metadata"}),"\n",(0,i.jsx)(n.li,{children:"Must be in the game's recognized font directory structure"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-font-system",children:"Integration with Font System"}),"\n",(0,i.jsx)(n.h3,{id:"relationship-to-fonts-table",children:"Relationship to FONTS Table"}),"\n",(0,i.jsxs)(n.p,{children:["This helper is commonly used with the global ",(0,i.jsx)(n.code,{children:"FONTS"})," table:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- From fonts.lua\nFONTS = {\n    { filename = "fonts/opensans50.zip", alias = "opensans", fallback = {...} },\n    { filename = "fonts/bellefair50.zip", alias = "bellefair", fallback = {...} },\n    -- ... more font definitions\n}\n\n-- Use helper to register all fonts\nlocal game_assets = {}\nAddFontAssets(game_assets, FONTS)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"asset-registration-flow",children:"Asset Registration Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Font Definition"}),": Fonts are defined in configuration tables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Asset Creation"}),": ",(0,i.jsx)(n.code,{children:"AddFontAssets"})," creates Asset entries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Asset Registration"}),": Assets are added to prefab or global asset lists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Loading"}),": Game loads font files during initialization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Fonts become available for UI and text rendering"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"loading-efficiency",children:"Loading Efficiency"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Font assets are loaded once during game initialization"}),"\n",(0,i.jsx)(n.li,{children:"All fonts should be registered before the asset loading phase completes"}),"\n",(0,i.jsx)(n.li,{children:"Large font files can impact loading times"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fonts remain in memory once loaded"}),"\n",(0,i.jsx)(n.li,{children:"Only register fonts that are actually used"}),"\n",(0,i.jsx)(n.li,{children:"Consider platform-specific font requirements"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The function has minimal error handling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No validation of asset_table parameter"}),"\n",(0,i.jsx)(n.li,{children:"No validation of font_table structure"}),"\n",(0,i.jsx)(n.li,{children:"No error handling for malformed font data"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Best Practices:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Validate parameters before calling\nif asset_table and font_table then\n    -- Ensure font_table is properly structured\n    for i, fontdata in ipairs(font_table) do\n        if fontdata.filename then\n            AddFontAssets(asset_table, {fontdata})\n        else\n            print("Warning: Invalid font data at index " .. i)\n        end\n    end\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/typography/fonts",children:"Fonts"}),": Font configuration and constant definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./assets.md",children:"Assets"}),": General asset management system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./prefabs.md",children:"Prefabs"}),": Prefab asset registration patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./translator.md",children:"Translator"}),": Language-specific font handling"]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);