"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2032],{5396:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/examples/ui-mod","title":"UI Customization","description":"This tutorial walks through the process of creating custom UI elements in Don\'t Starve Together. We\'ll build a mod that adds a custom status display showing additional player information.","source":"@site/docs/api-vanilla/examples/ui-mod.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/ui-mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/ui-mod","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"ui-mod","title":"UI Customization","sidebar_position":7,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Custom Component","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-component"},"next":{"title":"Custom UI Elements","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-ui-elements"}}');var i=t(4848),a=t(8453);const l={id:"ui-mod",title:"UI Customization",sidebar_position:7,last_updated:new Date("2023-07-06T00:00:00.000Z")},o="Creating Custom UI Elements",r={},d=[{value:"Project Overview",id:"project-overview",level:2},{value:"Step 1: Set Up the Mod Structure",id:"step-1-set-up-the-mod-structure",level:2},{value:"Step 2: Create the modinfo.lua File",id:"step-2-create-the-modinfolua-file",level:2},{value:"Step 3: Create the Custom Widget",id:"step-3-create-the-custom-widget",level:2},{value:"Step 4: Create the modmain.lua File",id:"step-4-create-the-modmainlua-file",level:2},{value:"Step 5: Create the UI Assets",id:"step-5-create-the-ui-assets",level:2},{value:"Step 6: Testing Your UI Mod",id:"step-6-testing-your-ui-mod",level:2},{value:"Understanding the UI System",id:"understanding-the-ui-system",level:2},{value:"Widget Hierarchy",id:"widget-hierarchy",level:3},{value:"Widget Positioning",id:"widget-positioning",level:3},{value:"Widget Events",id:"widget-events",level:3},{value:"Animation Control",id:"animation-control",level:3},{value:"Customization Options",id:"customization-options",level:2},{value:"Add Keyboard Shortcuts",id:"add-keyboard-shortcuts",level:3},{value:"Add Draggable Functionality",id:"add-draggable-functionality",level:3},{value:"Add Custom Themes",id:"add-custom-themes",level:3},{value:"Add Tooltips",id:"add-tooltips",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Problem: UI not appearing",id:"problem-ui-not-appearing",level:3},{value:"Problem: UI elements misaligned",id:"problem-ui-elements-misaligned",level:3},{value:"Problem: Updates not happening",id:"problem-updates-not-happening",level:3},{value:"Problem: Animations not playing",id:"problem-animations-not-playing",level:3},{value:"Problem: Memory leaks",id:"problem-memory-leaks",level:3},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"creating-custom-ui-elements",children:"Creating Custom UI Elements"})}),"\n",(0,i.jsx)(n.p,{children:"This tutorial walks through the process of creating custom UI elements in Don't Starve Together. We'll build a mod that adds a custom status display showing additional player information."}),"\n",(0,i.jsx)(n.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,i.jsx)(n.p,{children:'We\'ll create a mod that adds a "Player Stats HUD" with:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Custom UI widget that displays extended player statistics"}),"\n",(0,i.jsx)(n.li,{children:"Interactive elements that respond to mouse input"}),"\n",(0,i.jsx)(n.li,{children:"Animation effects for UI transitions"}),"\n",(0,i.jsx)(n.li,{children:"Configuration options for customization"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-1-set-up-the-mod-structure",children:"Step 1: Set Up the Mod Structure"}),"\n",(0,i.jsx)(n.p,{children:"Create these folders and files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"playerstats_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 widgets/\n\u2502       \u2514\u2500\u2500 playerstatsui.lua\n\u251c\u2500\u2500 images/\n\u2502   \u2514\u2500\u2500 playerstats_assets.tex\n\u251c\u2500\u2500 images/\n\u2502   \u2514\u2500\u2500 playerstats_assets.xml\n\u2514\u2500\u2500 anim/\n    \u2514\u2500\u2500 playerstats_meter.zip\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-2-create-the-modinfolua-file",children:"Step 2: Create the modinfo.lua File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'name = "Player Stats HUD"\ndescription = "Displays detailed player statistics in a custom UI panel"\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\n\n-- Not compatible with Don\'t Starve\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\n-- This mod can be client-only\nclient_only_mod = true\n\n-- Icon displayed in the server list\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Tags that describe your mod\nserver_filter_tags = {\n    "interface",\n    "hud"\n}\n\n-- Configuration options\nconfiguration_options = {\n    {\n        name = "display_position",\n        label = "Display Position",\n        options = {\n            {description = "Top Left", data = "topleft"},\n            {description = "Top Right", data = "topright"},\n            {description = "Bottom Left", data = "bottomleft"},\n            {description = "Bottom Right", data = "bottomright"}\n        },\n        default = "topright"\n    },\n    {\n        name = "show_advanced_stats",\n        label = "Show Advanced Stats",\n        options = {\n            {description = "Yes", data = true},\n            {description = "No", data = false}\n        },\n        default = true\n    },\n    {\n        name = "update_frequency",\n        label = "Update Frequency",\n        options = {\n            {description = "Low (1s)", data = 1},\n            {description = "Medium (0.5s)", data = 0.5},\n            {description = "High (0.1s)", data = 0.1}\n        },\n        default = 0.5\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-3-create-the-custom-widget",children:"Step 3: Create the Custom Widget"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"scripts/widgets/playerstatsui.lua"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\nlocal UIAnim = require "widgets/uianim"\n\n-- Define our custom widget by inheriting from the base Widget class\nlocal PlayerStatsUI = Class(Widget, function(self, owner)\n    -- Call the parent constructor\n    Widget._ctor(self, "PlayerStatsUI")\n    \n    -- Store reference to the player\n    self.owner = owner\n    \n    -- Get configuration options\n    self.show_advanced_stats = GetModConfigData("show_advanced_stats")\n    self.update_frequency = GetModConfigData("update_frequency")\n    \n    -- Initialize widget state\n    self.expanded = false\n    self.stats = {}\n    \n    -- Set up the root widget\n    self:SetUpdateFn(function() self:UpdateStats() end)\n    self:StartUpdating()\n    \n    -- Create the background panel\n    self.bg = self:AddChild(Image("images/playerstats_assets.xml", "stats_panel.tex"))\n    self.bg:SetSize(200, 120)\n    \n    -- Add header with title\n    self.title = self:AddChild(Text(TITLEFONT, 20))\n    self.title:SetPosition(0, 50, 0)\n    self.title:SetString("Player Statistics")\n    self.title:SetColour(1, 1, 1, 1)\n    \n    -- Add toggle button for expanding/collapsing\n    self.toggle_btn = self:AddChild(Image("images/playerstats_assets.xml", "toggle_btn.tex"))\n    self.toggle_btn:SetPosition(85, 50, 0)\n    self.toggle_btn:SetSize(20, 20)\n    self.toggle_btn:SetOnClick(function() self:ToggleExpanded() end)\n    \n    -- Create stat text elements\n    self:CreateStatDisplays()\n    \n    -- Add animated meter for health\n    self.health_meter = self:AddChild(UIAnim())\n    self.health_meter:GetAnimState():SetBank("playerstats_meter")\n    self.health_meter:GetAnimState():SetBuild("playerstats_meter")\n    self.health_meter:GetAnimState():PlayAnimation("idle", true)\n    self.health_meter:SetPosition(-70, 20, 0)\n    self.health_meter:SetScale(0.5, 0.5, 0.5)\n    \n    -- Position the widget based on config\n    self:PositionWidget(GetModConfigData("display_position"))\n    \n    -- Initial update\n    self:UpdateStats()\nend)\n\n-- Create the stat text displays\nfunction PlayerStatsUI:CreateStatDisplays()\n    -- Basic stats (always shown)\n    self.stats.health = self:AddChild(Text(NUMBERFONT, 18))\n    self.stats.health:SetPosition(-50, 20, 0)\n    self.stats.health:SetColour(0.9, 0.3, 0.3, 1)\n    \n    self.stats.hunger = self:AddChild(Text(NUMBERFONT, 18))\n    self.stats.hunger:SetPosition(0, 20, 0)\n    self.stats.hunger:SetColour(0.8, 0.6, 0.3, 1)\n    \n    self.stats.sanity = self:AddChild(Text(NUMBERFONT, 18))\n    self.stats.sanity:SetPosition(50, 20, 0)\n    self.stats.sanity:SetColour(0.5, 0.8, 0.8, 1)\n    \n    -- Advanced stats (shown when expanded)\n    if self.show_advanced_stats then\n        self.stats.temperature = self:AddChild(Text(NUMBERFONT, 16))\n        self.stats.temperature:SetPosition(-70, -10, 0)\n        self.stats.temperature:SetColour(1, 0.4, 0.4, 1)\n        \n        self.stats.moisture = self:AddChild(Text(NUMBERFONT, 16))\n        self.stats.moisture:SetPosition(0, -10, 0)\n        self.stats.moisture:SetColour(0.4, 0.6, 1, 1)\n        \n        self.stats.defense = self:AddChild(Text(NUMBERFONT, 16))\n        self.stats.defense:SetPosition(70, -10, 0)\n        self.stats.defense:SetColour(0.7, 0.7, 0.7, 1)\n        \n        self.stats.damage = self:AddChild(Text(NUMBERFONT, 16))\n        self.stats.damage:SetPosition(-70, -30, 0)\n        self.stats.damage:SetColour(1, 0.5, 0.2, 1)\n        \n        self.stats.speed = self:AddChild(Text(NUMBERFONT, 16))\n        self.stats.speed:SetPosition(0, -30, 0)\n        self.stats.speed:SetColour(0.4, 1, 0.4, 1)\n        \n        self.stats.drops = self:AddChild(Text(NUMBERFONT, 16))\n        self.stats.drops:SetPosition(70, -30, 0)\n        self.stats.drops:SetColour(1, 0.8, 0.2, 1)\n        \n        -- Hide advanced stats initially if not expanded\n        if not self.expanded then\n            self:HideAdvancedStats()\n        end\n    end\nend\n\n-- Position the widget based on configuration\nfunction PlayerStatsUI:PositionWidget(position)\n    local w, h = TheSim:GetScreenSize()\n    \n    if position == "topleft" then\n        self:SetPosition(120, h - 70, 0)\n    elseif position == "topright" then\n        self:SetPosition(w - 120, h - 70, 0)\n    elseif position == "bottomleft" then\n        self:SetPosition(120, 100, 0)\n    elseif position == "bottomright" then\n        self:SetPosition(w - 120, 100, 0)\n    end\nend\n\n-- Toggle between expanded and collapsed states\nfunction PlayerStatsUI:ToggleExpanded()\n    self.expanded = not self.expanded\n    \n    if self.expanded then\n        -- Expand the panel\n        self.bg:ScaleTo(1, 1.5, 0.2)\n        self.toggle_btn:RotateTo(0, 180, 0.2)\n        \n        -- Show advanced stats\n        if self.show_advanced_stats then\n            self:ShowAdvancedStats()\n        end\n    else\n        -- Collapse the panel\n        self.bg:ScaleTo(1, 1, 0.2)\n        self.toggle_btn:RotateTo(180, 0, 0.2)\n        \n        -- Hide advanced stats\n        if self.show_advanced_stats then\n            self:HideAdvancedStats()\n        end\n    end\nend\n\n-- Show the advanced stat displays\nfunction PlayerStatsUI:ShowAdvancedStats()\n    if not self.show_advanced_stats then return end\n    \n    self.stats.temperature:Show()\n    self.stats.moisture:Show()\n    self.stats.defense:Show()\n    self.stats.damage:Show()\n    self.stats.speed:Show()\n    self.stats.drops:Show()\nend\n\n-- Hide the advanced stat displays\nfunction PlayerStatsUI:HideAdvancedStats()\n    if not self.show_advanced_stats then return end\n    \n    self.stats.temperature:Hide()\n    self.stats.moisture:Hide()\n    self.stats.defense:Hide()\n    self.stats.damage:Hide()\n    self.stats.speed:Hide()\n    self.stats.drops:Hide()\nend\n\n-- Update all stat displays\nfunction PlayerStatsUI:UpdateStats()\n    if not self.owner then return end\n    \n    -- Update basic stats\n    if self.owner.components.health then\n        local health = math.floor(self.owner.components.health.currenthealth)\n        local max_health = math.floor(self.owner.components.health.maxhealth)\n        self.stats.health:SetString(string.format("%d/%d", health, max_health))\n        \n        -- Update health meter animation\n        local health_percent = health / max_health\n        self.health_meter:GetAnimState():SetPercent("meter", 1 - health_percent)\n    end\n    \n    if self.owner.components.hunger then\n        local hunger = math.floor(self.owner.components.hunger.current)\n        local max_hunger = math.floor(self.owner.components.hunger.max)\n        self.stats.hunger:SetString(string.format("%d/%d", hunger, max_hunger))\n    end\n    \n    if self.owner.components.sanity then\n        local sanity = math.floor(self.owner.components.sanity.current)\n        local max_sanity = math.floor(self.owner.components.sanity.max)\n        self.stats.sanity:SetString(string.format("%d/%d", sanity, max_sanity))\n    end\n    \n    -- Update advanced stats if they\'re shown\n    if self.show_advanced_stats and self.expanded then\n        -- Temperature\n        if self.owner.components.temperature then\n            local temp = math.floor(self.owner.components.temperature.current)\n            self.stats.temperature:SetString(string.format("Temp: %d\xb0", temp))\n        end\n        \n        -- Moisture\n        if self.owner.components.moisture then\n            local moisture = math.floor(self.owner.components.moisture:GetMoisture())\n            self.stats.moisture:SetString(string.format("Wet: %d%%", moisture))\n        end\n        \n        -- Defense\n        local defense = 0\n        if self.owner.components.health then\n            defense = math.floor((1 - self.owner.components.health.absorb) * 100)\n        end\n        self.stats.defense:SetString(string.format("Def: %d%%", defense))\n        \n        -- Damage\n        local damage = 1\n        if self.owner.components.combat then\n            damage = math.floor(self.owner.components.combat.defaultdamage)\n        end\n        self.stats.damage:SetString(string.format("Dmg: %d", damage))\n        \n        -- Speed\n        local speed = 1\n        if self.owner.components.locomotor then\n            speed = math.floor(self.owner.components.locomotor:GetSpeedMultiplier() * 100)\n        end\n        self.stats.speed:SetString(string.format("Spd: %d%%", speed))\n        \n        -- Drop rate\n        local drops = 0\n        if self.owner.components.looting then\n            drops = math.floor(self.owner.components.looting:GetLootingMultiplier() * 100)\n        else\n            drops = 100\n        end\n        self.stats.drops:SetString(string.format("Loot: %d%%", drops))\n    end\nend\n\n-- Handle screen size changes\nfunction PlayerStatsUI:OnScreenResize()\n    self:PositionWidget(GetModConfigData("display_position"))\nend\n\n-- Clean up when the widget is removed\nfunction PlayerStatsUI:OnRemoveFromScene()\n    self:StopUpdating()\nend\n\nreturn PlayerStatsUI\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-4-create-the-modmainlua-file",children:"Step 4: Create the modmain.lua File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Import globals into the environment\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add asset files\nAssets = {\n    -- UI assets\n    Asset("IMAGE", "images/playerstats_assets.tex"),\n    Asset("ATLAS", "images/playerstats_assets.xml"),\n    \n    -- Animations\n    Asset("ANIM", "anim/playerstats_meter.zip"),\n}\n\n-- Require our custom widget\nlocal PlayerStatsUI = require "widgets/playerstatsui"\n\n-- Add the UI when the player is created\nlocal function AddPlayerStatsUI(inst)\n    -- Only add UI for the local player\n    if inst ~= GLOBAL.ThePlayer then\n        return\n    end\n    \n    -- Wait a moment for all components to initialize\n    inst:DoTaskInTime(1, function()\n        -- Create our UI widget\n        local playerstats_ui = PlayerStatsUI(inst)\n        \n        -- Add it to the player\'s HUD\n        if inst.HUD then\n            inst.HUD.controls.topright:AddChild(playerstats_ui)\n            \n            -- Store reference to the widget\n            inst.HUD.playerstats_ui = playerstats_ui\n            \n            -- Handle screen resizes\n            inst:ListenForEvent("screenresize", function()\n                playerstats_ui:OnScreenResize()\n            end, GLOBAL.TheWorld)\n        end\n    end)\nend\n\n-- Add our UI when the player entity is spawned\nAddPlayerPostInit(AddPlayerStatsUI)\n\n-- Handle screen resize events\nlocal function OnScreenResize()\n    if GLOBAL.ThePlayer and GLOBAL.ThePlayer.HUD and GLOBAL.ThePlayer.HUD.playerstats_ui then\n        GLOBAL.ThePlayer.HUD.playerstats_ui:OnScreenResize()\n    end\nend\n\n-- Register for screen resize events\nGLOBAL.TheInput:AddResizeHandler(OnScreenResize)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-5-create-the-ui-assets",children:"Step 5: Create the UI Assets"}),"\n",(0,i.jsx)(n.p,{children:"For a complete mod, you'll need to create these asset files:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"UI Textures"}),": ",(0,i.jsx)(n.code,{children:"images/playerstats_assets.tex"})," and ",(0,i.jsx)(n.code,{children:"playerstats_assets.xml"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Contains textures for the panel background, buttons, and icons"}),"\n",(0,i.jsx)(n.li,{children:'Should include "stats_panel.tex" and "toggle_btn.tex" as referenced in the code'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Animated Meter"}),": ",(0,i.jsx)(n.code,{children:"anim/playerstats_meter.zip"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Contains animations for the health meter"}),"\n",(0,i.jsx)(n.li,{children:'Should include "idle" animation and "meter" percent animation'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-6-testing-your-ui-mod",children:"Step 6: Testing Your UI Mod"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Launch Don't Starve Together"}),"\n",(0,i.jsx)(n.li,{children:"Enable your mod in the Mods menu"}),"\n",(0,i.jsx)(n.li,{children:"Start a new game"}),"\n",(0,i.jsx)(n.li,{children:"Observe your custom UI element in the position specified in the config"}),"\n",(0,i.jsxs)(n.li,{children:["Test the UI by:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Clicking the toggle button to expand/collapse"}),"\n",(0,i.jsx)(n.li,{children:"Watching stats update as your character's state changes"}),"\n",(0,i.jsx)(n.li,{children:"Resizing the window to ensure proper positioning"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-ui-system",children:"Understanding the UI System"}),"\n",(0,i.jsx)(n.p,{children:"Don't Starve Together's UI system is built on a hierarchy of widgets:"}),"\n",(0,i.jsx)(n.h3,{id:"widget-hierarchy",children:"Widget Hierarchy"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Widget"}),": Base class for all UI elements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Image"}),": Displays static images from atlases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Text"}),": Displays text with specified font and size"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UIAnim"}),": Displays animated elements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Button"}),": Handles click interactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Container"}),": Groups multiple widgets together"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"widget-positioning",children:"Widget Positioning"}),"\n",(0,i.jsx)(n.p,{children:"Widgets use a relative positioning system:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SetPosition(x, y, z)"}),": Position relative to parent"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SetScale(x, y, z)"}),": Scale the widget"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SetRotation(angle)"}),": Rotate the widget"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SetSize(width, height)"}),": Set the dimensions"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"widget-events",children:"Widget Events"}),"\n",(0,i.jsx)(n.p,{children:"Widgets can respond to various events:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SetOnClick(fn)"}),": Called when clicked"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SetOnGainFocus(fn)"}),": Called when gaining focus"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SetOnLoseFocus(fn)"}),": Called when losing focus"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"StartUpdating()"}),": Begin calling the update function"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"StopUpdating()"}),": Stop calling the update function"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"animation-control",children:"Animation Control"}),"\n",(0,i.jsx)(n.p,{children:"UIAnim widgets provide animation control:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GetAnimState()"}),": Get the animation state controller"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PlayAnimation(name, loop)"}),": Play a specific animation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SetPercent(anim, percent)"}),": Set animation progress percentage"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,i.jsx)(n.p,{children:"Here are some ways to enhance your UI mod:"}),"\n",(0,i.jsx)(n.h3,{id:"add-keyboard-shortcuts",children:"Add Keyboard Shortcuts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- In modmain.lua, add keyboard shortcuts\nlocal KEY_P = 112 -- P key to toggle UI visibility\n\n-- Add key handler\nTheInput:AddKeyDownHandler(KEY_P, function()\n    if ThePlayer and ThePlayer.HUD and ThePlayer.HUD.playerstats_ui then\n        if ThePlayer.HUD.playerstats_ui:IsVisible() then\n            ThePlayer.HUD.playerstats_ui:Hide()\n        else\n            ThePlayer.HUD.playerstats_ui:Show()\n        end\n    end\nend)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"add-draggable-functionality",children:"Add Draggable Functionality"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- In your widget class, add dragging support\nfunction PlayerStatsUI:MakeDraggable()\n    self.dragging = false\n    self.drag_offset_x = 0\n    self.drag_offset_y = 0\n    \n    -- Handle mouse events\n    self.bg:SetOnMouseButton(function(widget, button, down, x, y)\n        if button == MOUSEBUTTON_LEFT then\n            if down then\n                -- Start dragging\n                self.dragging = true\n                local pos_x, pos_y = self:GetPosition():Get()\n                self.drag_offset_x = pos_x - x\n                self.drag_offset_y = pos_y - y\n            else\n                -- Stop dragging\n                self.dragging = false\n            end\n        end\n        return true\n    end)\n    \n    -- Update position while dragging\n    self:SetOnUpdate(function()\n        if self.dragging then\n            local x, y = TheInput:GetScreenPosition():Get()\n            self:SetPosition(x + self.drag_offset_x, y + self.drag_offset_y, 0)\n        end\n    end)\nend\n\n-- Call this in your constructor\nself:MakeDraggable()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"add-custom-themes",children:"Add Custom Themes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In your widget constructor, add theme support\nself.themes = {\n    light = {\n        bg_image = "stats_panel_light.tex",\n        text_color = {0.1, 0.1, 0.1, 1},\n        title_color = {0.2, 0.2, 0.8, 1}\n    },\n    dark = {\n        bg_image = "stats_panel_dark.tex",\n        text_color = {0.9, 0.9, 0.9, 1},\n        title_color = {0.4, 0.8, 1, 1}\n    },\n    forest = {\n        bg_image = "stats_panel_forest.tex",\n        text_color = {0.9, 0.9, 0.8, 1},\n        title_color = {0.5, 0.8, 0.3, 1}\n    }\n}\n\n-- Add function to apply themes\nfunction PlayerStatsUI:ApplyTheme(theme_name)\n    local theme = self.themes[theme_name] or self.themes.dark\n    \n    -- Apply theme settings\n    self.bg:SetTexture("images/playerstats_assets.xml", theme.bg_image)\n    self.title:SetColour(unpack(theme.title_color))\n    \n    -- Update all text colors\n    for _, text in pairs(self.stats) do\n        if text.original_color == nil then\n            -- Store original colors first time\n            local r, g, b, a = text:GetColour()\n            text.original_color = {r, g, b, a}\n        end\n        \n        -- Apply theme color with a hint of the original color\n        local orig = text.original_color\n        text:SetColour(\n            (orig[1] + theme.text_color[1]) * 0.5,\n            (orig[2] + theme.text_color[2]) * 0.5,\n            (orig[3] + theme.text_color[3]) * 0.5,\n            theme.text_color[4]\n        )\n    end\nend\n\n-- Add theme selection button\nself.theme_btn = self:AddChild(Image("images/playerstats_assets.xml", "theme_btn.tex"))\nself.theme_btn:SetPosition(85, 30, 0)\nself.theme_btn:SetSize(20, 20)\n\nlocal current_theme = 1\nlocal theme_names = {"light", "dark", "forest"}\n\nself.theme_btn:SetOnClick(function()\n    current_theme = current_theme % #theme_names + 1\n    self:ApplyTheme(theme_names[current_theme])\nend)\n\n-- Apply default theme\nself:ApplyTheme("dark")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"add-tooltips",children:"Add Tooltips"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- In your widget class, add tooltip support\nfunction PlayerStatsUI:AddTooltip(widget, text)\n    widget:SetHoverText(text, {\n        font = NUMBERFONT,\n        offset_x = 0,\n        offset_y = 30,\n        color = {1, 1, 1, 1},\n        bg_color = {0.1, 0.1, 0.1, 0.8}\n    })\nend\n\n-- Add tooltips to your stats\nself:AddTooltip(self.stats.health, "Current health points")\nself:AddTooltip(self.stats.hunger, "Current hunger level")\nself:AddTooltip(self.stats.sanity, "Current sanity level")\nself:AddTooltip(self.stats.temperature, "Body temperature")\nself:AddTooltip(self.stats.moisture, "Wetness percentage")\nself:AddTooltip(self.stats.defense, "Damage absorption")\nself:AddTooltip(self.stats.damage, "Base attack damage")\nself:AddTooltip(self.stats.speed, "Movement speed")\nself:AddTooltip(self.stats.drops, "Loot drop chance")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"problem-ui-not-appearing",children:"Problem: UI not appearing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Check that you're adding the widget to the correct HUD container and that you're only adding it for the local player (ThePlayer)"]}),"\n",(0,i.jsx)(n.h3,{id:"problem-ui-elements-misaligned",children:"Problem: UI elements misaligned"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Verify your positioning code and ensure you're handling screen resizes properly"]}),"\n",(0,i.jsx)(n.h3,{id:"problem-updates-not-happening",children:"Problem: Updates not happening"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Make sure you've called StartUpdating() and have an update function set"]}),"\n",(0,i.jsx)(n.h3,{id:"problem-animations-not-playing",children:"Problem: Animations not playing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Verify animation names match exactly what's in your animation files"]}),"\n",(0,i.jsx)(n.h3,{id:"problem-memory-leaks",children:"Problem: Memory leaks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Ensure you clean up event listeners and stop updating when the widget is removed:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'function PlayerStatsUI:OnRemoveFromScene()\n    self:StopUpdating()\n    \n    -- Remove any event listeners\n    if self.owner then\n        self.owner:RemoveEventCallback("screenresize", self.onresize, TheWorld)\n    end\n    \n    -- Call parent method\n    Widget.OnRemoveFromScene(self)\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you've created a custom UI widget, you can:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add More Features"}),": Create additional UI elements like buff icons or timers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Improve Visuals"}),": Add animations, transitions, and visual effects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enhance Interactivity"}),": Add more interactive elements like sliders or dropdown menus"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integrate with Game Systems"}),": Connect your UI to more game systems like crafting or inventory"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more advanced UI customization, check out the ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/ui-system",children:"UI System"})," documentation to learn about the full capabilities of the UI framework."]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);