"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3699],{879:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-vanilla/world/network","title":"Network API","description":"Tools for generating and managing the world\'s underlying node network and structure.","source":"@site/docs/api-vanilla/world/network.md","sourceDirName":"api-vanilla/world","slug":"/api-vanilla/world/network","permalink":"/dst-api-webdocs/docs/api-vanilla/world/network","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"network","title":"Network API","sidebar_position":5},"sidebar":"docs","previous":{"title":"Seasons API","permalink":"/dst-api-webdocs/docs/api-vanilla/world/seasons"},"next":{"title":"World Generation API","permalink":"/dst-api-webdocs/docs/api-vanilla/world/worldgen"}}');var r=o(4848),a=o(8453);const d={id:"network",title:"Network API",sidebar_position:5},s="Network API",i={},l=[{value:"Overview",id:"overview",level:2},{value:"Key Components",id:"key-components",level:2},{value:"Graph",id:"graph",level:3},{value:"Nodes and Edges",id:"nodes-and-edges",level:3},{value:"Common Functions",id:"common-functions",level:2},{value:"Graph Functions",id:"graph-functions",level:3},{value:"Traversal Functions",id:"traversal-functions",level:3},{value:"World Generation Integration",id:"world-generation-integration",level:2},{value:"Related Components",id:"related-components",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"network-api",children:"Network API"})}),"\n",(0,r.jsx)(n.p,{children:"Tools for generating and managing the world's underlying node network and structure."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Network API provides functionality for creating and manipulating the graph structure that defines how different areas of the world are connected. It's a core part of world generation that determines the layout, connections, and traversal options in the game world."}),"\n",(0,r.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,r.jsx)(n.h3,{id:"graph",children:"Graph"}),"\n",(0,r.jsx)(n.p,{children:"The primary object used to represent the world's structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Create a new graph\nlocal graph = Graph("main", {\n    nodes = {},           -- Nodes within the graph\n    edges = {},           -- Connections between nodes\n    exit_nodes = {},      -- Nodes connecting to other graphs\n    exit_edges = {},      -- Edges connecting to other graphs\n    default_bg = GROUND.GRASS,\n    colour = {r=1, g=0, b=0, a=1}\n})\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodes-and-edges",children:"Nodes and Edges"}),"\n",(0,r.jsx)(n.p,{children:"Nodes represent distinct areas in the world, while edges define connections between them:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Create and add a node to the graph\nlocal node = GraphNode("forest_area", {\n    position = {x=0, y=0},\n    data = {\n        type = "forest",\n        value = GROUND.FOREST\n    }\n})\ngraph:AddNode(node)\n\n-- Connect two nodes with an edge\nlocal edge = GraphEdge("path", node1, node2)\ngraph:AddEdge(edge)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-functions",children:"Common Functions"}),"\n",(0,r.jsx)(n.h3,{id:"graph-functions",children:"Graph Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Add a node to the graph\ngraph:AddNode(node)\n\n-- Add an edge connecting two nodes\ngraph:AddEdge(edge)\n\n-- Find a path between two nodes\nlocal path = graph:FindPath(start_node, end_node)\n\n-- Check if a node is connected to the graph\nlocal is_connected = graph:IsConnected(node)\n\n-- Get all nodes of a specific type\nlocal nodes = graph:GetNodesWithTag("forest")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"traversal-functions",children:"Traversal Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Get all nodes connected to a specified node\nlocal connected_nodes = graph:GetConnectedNodes(node)\n\n-- Get the shortest path between two nodes\nlocal path = graph:GetShortestPath(start_node, end_node)\n\n-- Perform a depth-first search from a starting node\ngraph:DepthFirstSearch(start_node, visit_function)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"world-generation-integration",children:"World Generation Integration"}),"\n",(0,r.jsx)(n.p,{children:"The Network API integrates with world generation to create the overall structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- During world generation\nlocal worldgen = TheWorld.worldgenmain\n\n-- Create the main graph structure\nlocal main_graph = worldgen:CreateGraph()\n\n-- Add task nodes based on selected tasks\nfor _, task in ipairs(tasks) do\n    worldgen:AddTaskToGraph(main_graph, task)\nend\n\n-- Connect the nodes according to locks and keys\nworldgen:ConnectGraphs(main_graph)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-components",children:"Related Components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Map System"}),": Uses the graph to create the physical terrain"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Room System"}),": Defines the content of individual nodes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Task System"}),": Higher-level grouping of connected rooms"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>s});var t=o(6540);const r={},a=t.createContext(r);function d(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);