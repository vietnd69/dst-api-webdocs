"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[26452],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var s=r(96540);const t={},l=s.createContext(t);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(l.Provider,{value:n},e.children)}},45117:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"game-scripts/core-systems/game-configuration/modes/events","title":"Event System","description":"Core event handling system for game events and messaging","source":"@site/docs/game-scripts/core-systems/game-configuration/modes/events.md","sourceDirName":"game-scripts/core-systems/game-configuration/modes","slug":"/game-scripts/core-systems/game-configuration/modes/events","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/modes/events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"events","title":"Event System","description":"Core event handling system for game events and messaging","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Game Configuration Modes Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/modes/"},"next":{"title":"Game Logic","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/modes/gamelogic"}}');var t=r(74848),l=r(28453);const a={id:"events",title:"Event System",description:"Core event handling system for game events and messaging",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="Event System",o={},i=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Classes",id:"classes",level:2},{value:"EventHandler",id:"eventhandler",level:3},{value:"Constructor",id:"constructor",level:4},{value:"EventHandler(event, fn, processor)",id:"eventhandler-constructor",level:5},{value:"Methods",id:"methods",level:4},{value:"handler()",id:"eventhandler-remove",level:5},{value:"EventProcessor",id:"eventprocessor",level:3},{value:"Constructor",id:"constructor-1",level:4},{value:"EventProcessor()",id:"eventprocessor-constructor",level:5},{value:"Methods",id:"methods-1",level:4},{value:"event_processor(event, fn)",id:"add-event-handler",level:5},{value:"event_processor(handler)",id:"remove-handler",level:5},{value:"event_processor(event)",id:"get-handlers-for-event",level:5},{value:"event_processor(event, ...)",id:"handle-event",level:5},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Entity Event Handling",id:"entity-event-handling",level:3},{value:"Component Communication",id:"component-communication",level:3},{value:"Temporary Event Handling",id:"temporary-event-handling",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Handler Management",id:"handler-management",level:3},{value:"Event Frequency",id:"event-frequency",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Integration with Game Systems",id:"integration-with-game-systems",level:2},{value:"Entity Framework",id:"entity-framework",level:3},{value:"Component System",id:"component-system",level:3},{value:"Networking",id:"networking",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"event-system",children:"Event System"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The event system provides a robust mechanism for handling game events and inter-component communication in Don't Starve Together. It consists of ",(0,t.jsx)(n.code,{children:"EventHandler"})," and ",(0,t.jsx)(n.code,{children:"EventProcessor"})," classes that enable objects to listen for and respond to various game events."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Create an event processor\nlocal event_processor = EventProcessor()\n\n-- Add an event handler\nlocal handler = event_processor:AddEventHandler("player_died", function(player, cause)\n    print("Player", player, "died from", cause)\nend)\n\n-- Trigger an event\nevent_processor:HandleEvent("player_died", ThePlayer, "starvation")\n\n-- Remove the handler when no longer needed\nhandler:Remove()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsx)(n.h3,{id:"eventhandler",children:"EventHandler"}),"\n",(0,t.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.h5,{id:"eventhandler-constructor",children:"EventHandler(event, fn, processor)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates a new event handler that links an event name to a callback function within an event processor."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"})," (string): The name of the event to handle"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fn"})," (function): The callback function to execute when the event is triggered"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"processor"})," (EventProcessor): The event processor this handler belongs to"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(EventHandler): New EventHandler instance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local function on_player_death(player, cause)\n    print("Player died:", player.name, "cause:", cause)\nend\n\nlocal handler = EventHandler("player_died", on_player_death, event_processor)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.h5,{id:"eventhandler-remove",children:["handler",":Remove","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRemoves this event handler from its associated event processor. After calling this method, the handler will no longer respond to events."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local handler = event_processor:AddEventHandler("player_died", function() end)\n-- Later, when the handler is no longer needed\nhandler:Remove()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"eventprocessor",children:"EventProcessor"}),"\n",(0,t.jsx)(n.h4,{id:"constructor-1",children:"Constructor"}),"\n",(0,t.jsx)(n.h5,{id:"eventprocessor-constructor",children:"EventProcessor()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates a new event processor that can manage multiple event handlers and dispatch events to them."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(EventProcessor): New EventProcessor instance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local event_processor = EventProcessor()\n"})}),"\n",(0,t.jsx)(n.h4,{id:"methods-1",children:"Methods"}),"\n",(0,t.jsxs)(n.h5,{id:"add-event-handler",children:["event_processor",":AddEventHandler","(event, fn)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nAdds a new event handler for the specified event. Returns an EventHandler object that can be used to remove the handler later."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"})," (string): The name of the event to listen for"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fn"})," (function): The callback function to execute when the event occurs"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(EventHandler): The created event handler object"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Simple event handler\nlocal handler = event_processor:AddEventHandler("item_picked", function(item, player)\n    print(player.name, "picked up", item.name)\nend)\n\n-- Handler with multiple parameters\nlocal combat_handler = event_processor:AddEventHandler("combat_attack", function(attacker, target, weapon, damage)\n    print(attacker.name, "attacked", target.name, "with", weapon.name, "for", damage, "damage")\nend)\n'})}),"\n",(0,t.jsxs)(n.h5,{id:"remove-handler",children:["event_processor",":RemoveHandler","(handler)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRemoves the specified event handler from this processor. This is typically called internally by the handler's Remove() method."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"handler"})," (EventHandler): The event handler to remove"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Usually called internally by handler:Remove(), but can be called directly\nlocal handler = event_processor:AddEventHandler("test_event", function() end)\nevent_processor:RemoveHandler(handler)\n'})}),"\n",(0,t.jsxs)(n.h5,{id:"get-handlers-for-event",children:["event_processor",":GetHandlersForEvent","(event)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns a table containing all handlers registered for the specified event. The returned table uses handlers as keys with boolean true values."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"})," (string): The event name to get handlers for"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Table of handlers for the event (may be empty)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local handlers = event_processor:GetHandlersForEvent("player_died")\nlocal count = 0\nfor handler, _ in pairs(handlers) do\n    count = count + 1\nend\nprint("Number of handlers for player_died:", count)\n'})}),"\n",(0,t.jsxs)(n.h5,{id:"handle-event",children:["event_processor",":HandleEvent","(event, ...)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nTriggers all registered handlers for the specified event, passing any additional arguments to each handler function."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"})," (string): The name of the event to trigger"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"..."})," (any): Additional arguments to pass to the event handlers"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Trigger a simple event\nevent_processor:HandleEvent("game_started")\n\n-- Trigger event with data\nevent_processor:HandleEvent("player_damaged", ThePlayer, 25, "fire")\n\n-- Trigger event with complex data\nlocal item_data = {name = "log", quantity = 5, durability = 100}\nevent_processor:HandleEvent("item_crafted", ThePlayer, item_data)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"entity-event-handling",children:"Entity Event Handling"}),"\n",(0,t.jsx)(n.p,{children:"Most game entities use event processors to handle various state changes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Typical entity setup\nlocal entity = CreateEntity()\nentity.event_processor = EventProcessor()\n\n-- Add health change handler\nentity.event_processor:AddEventHandler("health_changed", function(old_health, new_health)\n    if new_health <= 0 then\n        entity:TriggerDeath()\n    end\nend)\n\n-- Add inventory change handler\nentity.event_processor:AddEventHandler("item_added", function(item, slot)\n    entity:UpdateCarryCapacity()\nend)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"component-communication",children:"Component Communication"}),"\n",(0,t.jsx)(n.p,{children:"Events provide loose coupling between game components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Health component triggers event\nlocal health_component = entity.components.health\nhealth_component.event_processor:HandleEvent("health_delta", -10, "poison")\n\n-- Combat component listens for health events\nlocal combat_handler = health_component.event_processor:AddEventHandler("health_delta", function(delta, source)\n    if source == "combat" and delta < 0 then\n        entity:PlayHitEffect()\n    end\nend)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"temporary-event-handling",children:"Temporary Event Handling"}),"\n",(0,t.jsx)(n.p,{children:"For temporary event listeners that need cleanup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local function setup_temporary_handler(duration)\n    local handler = event_processor:AddEventHandler("player_moved", function(x, y, z)\n        print("Player is at:", x, y, z)\n    end)\n    \n    -- Remove handler after duration\n    ThePlayer:DoTaskInTime(duration, function()\n        handler:Remove()\n        print("Movement tracking stopped")\n    end)\nend\n\nsetup_temporary_handler(30) -- Track for 30 seconds\n'})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"handler-management",children:"Handler Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Remove unused handlers"}),": Always clean up event handlers when they're no longer needed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Avoid excessive handlers"}),": Too many handlers for frequent events can impact performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use specific events"}),": Prefer specific event names over generic ones to reduce unnecessary callbacks"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"event-frequency",children:"Event Frequency"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Good: Specific, infrequent events\nevent_processor:HandleEvent("player_level_up", new_level)\nevent_processor:HandleEvent("boss_defeated", boss_name)\n\n-- Be careful: High-frequency events\nevent_processor:HandleEvent("player_moved", x, y, z) -- Called every frame\nevent_processor:HandleEvent("combat_tick", damage) -- Called very frequently\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"Event handlers should include error handling to prevent one failing handler from affecting others:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'event_processor:AddEventHandler("risky_operation", function(data)\n    local success, error_msg = pcall(function()\n        -- Potentially failing operation\n        process_complex_data(data)\n    end)\n    \n    if not success then\n        print("Event handler error:", error_msg)\n    end\nend)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-game-systems",children:"Integration with Game Systems"}),"\n",(0,t.jsx)(n.h3,{id:"entity-framework",children:"Entity Framework"}),"\n",(0,t.jsx)(n.p,{children:"Most game entities include an event processor for handling state changes and inter-component communication."}),"\n",(0,t.jsx)(n.h3,{id:"component-system",children:"Component System"}),"\n",(0,t.jsx)(n.p,{children:"Components use events to communicate changes without tight coupling, allowing for flexible and modular game logic."}),"\n",(0,t.jsx)(n.h3,{id:"networking",children:"Networking"}),"\n",(0,t.jsx)(n.p,{children:"Events can be used to trigger network synchronization when important game state changes occur."}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./entityscript.md",children:"Entity Script"}),": Entity framework that commonly uses event processors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./components/index.md",children:"Components"}),": Game components that communicate via events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../stategraphs/index.md",children:"Stategraphs"}),": State machines that trigger events on state changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./brain.md",children:"Brain System"}),": AI brains that respond to game events"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);