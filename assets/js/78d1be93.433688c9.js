"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9908],{5405:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-vanilla/core/network-bandwidth-optimization","title":"Network Bandwidth Optimization","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/core/network-bandwidth-optimization.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/network-bandwidth-optimization","permalink":"/dst-api-webdocs/docs/api-vanilla/core/network-bandwidth-optimization","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"id":"network-bandwidth-optimization","title":"Network Bandwidth Optimization","sidebar_position":11,"last_updated":"2023-07-06T00:00:00.000Z"}}');var s=t(4848),a=t(8453);const r={id:"network-bandwidth-optimization",title:"Network Bandwidth Optimization",sidebar_position:11,last_updated:new Date("2023-07-06T00:00:00.000Z")},d="Network Bandwidth Optimization",o={},l=[{value:"Understanding Bandwidth Constraints",id:"understanding-bandwidth-constraints",level:2},{value:"Measuring Bandwidth Usage",id:"measuring-bandwidth-usage",level:2},{value:"Optimization Techniques",id:"optimization-techniques",level:2},{value:"1. Use Appropriate NetVar Types",id:"1-use-appropriate-netvar-types",level:3},{value:"2. Batch Updates",id:"2-batch-updates",level:3},{value:"3. Delta Compression",id:"3-delta-compression",level:3},{value:"4. Prioritize Network Traffic",id:"4-prioritize-network-traffic",level:3},{value:"5. Relevance-Based Filtering",id:"5-relevance-based-filtering",level:3},{value:"6. Update Frequency Control",id:"6-update-frequency-control",level:3},{value:"7. Compression Techniques",id:"7-compression-techniques",level:3},{value:"Advanced Optimization Strategies",id:"advanced-optimization-strategies",level:2},{value:"1. Level of Detail (LOD) for Network Updates",id:"1-level-of-detail-lod-for-network-updates",level:3},{value:"2. Predictive Modeling",id:"2-predictive-modeling",level:3},{value:"3. Event Filtering",id:"3-event-filtering",level:3},{value:"4. Bandwidth Budgeting",id:"4-bandwidth-budgeting",level:3},{value:"Bandwidth Optimization Checklist",id:"bandwidth-optimization-checklist",level:2},{value:"Testing Network Optimization",id:"testing-network-optimization",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"network-bandwidth-optimization",children:"Network Bandwidth Optimization"})}),"\n",(0,s.jsx)(n.p,{children:"Optimizing network bandwidth usage is crucial for creating multiplayer mods that perform well even on slower connections. This guide covers techniques and best practices for reducing network traffic in Don't Starve Together mods."}),"\n",(0,s.jsx)(n.h2,{id:"understanding-bandwidth-constraints",children:"Understanding Bandwidth Constraints"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together's multiplayer experience can be affected by:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Limited player bandwidth (especially in rural areas or developing regions)"}),"\n",(0,s.jsx)(n.li,{children:"Server bandwidth limitations (particularly on dedicated servers)"}),"\n",(0,s.jsx)(n.li,{children:"Increased latency when bandwidth is saturated"}),"\n",(0,s.jsx)(n.li,{children:"Packet loss when network buffers overflow"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Efficient bandwidth usage improves the experience for all players by reducing lag, stuttering, and disconnections."}),"\n",(0,s.jsx)(n.h2,{id:"measuring-bandwidth-usage",children:"Measuring Bandwidth Usage"}),"\n",(0,s.jsx)(n.p,{children:"Before optimizing, it's important to measure your mod's bandwidth consumption:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- In-game console commands for bandwidth monitoring\nc_bandwidth() -- Toggles bandwidth usage display\nc_netprofile() -- Shows detailed network profiling information\n\n-- Programmatic bandwidth monitoring\nlocal function LogBandwidthUsage()\n    print("Bandwidth In: " .. TheSim:GetBandwidthIn() .. " KB/s")\n    print("Bandwidth Out: " .. TheSim:GetBandwidthOut() .. " KB/s")\nend\n\n-- Check bandwidth usage every 10 seconds\ninst:DoPeriodicTask(10, LogBandwidthUsage)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"optimization-techniques",children:"Optimization Techniques"}),"\n",(0,s.jsx)(n.h3,{id:"1-use-appropriate-netvar-types",children:"1. Use Appropriate NetVar Types"}),"\n",(0,s.jsx)(n.p,{children:"Choose the smallest data type that can represent your values:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- INEFFICIENT: Using larger types than needed\nself.small_number = net_int(inst.GUID, "component.small_number") -- 32 bits\n\n-- OPTIMIZED: Using appropriate sized types\nself.small_number = net_byte(inst.GUID, "component.small_number") -- 8 bits\nself.tiny_number = net_tinybyte(inst.GUID, "component.tiny_number") -- 4 bits\n'})}),"\n",(0,s.jsx)(n.p,{children:"NetVar Type Size Comparison:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Size"}),(0,s.jsx)(n.th,{children:"Range"}),(0,s.jsx)(n.th,{children:"Best For"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_tinybyte"})}),(0,s.jsx)(n.td,{children:"4 bits"}),(0,s.jsx)(n.td,{children:"0-15"}),(0,s.jsx)(n.td,{children:"Tiny counters, small states"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_byte"})}),(0,s.jsx)(n.td,{children:"8 bits"}),(0,s.jsx)(n.td,{children:"0-255"}),(0,s.jsx)(n.td,{children:"Small counters, item counts"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_shortint"})}),(0,s.jsx)(n.td,{children:"16 bits"}),(0,s.jsx)(n.td,{children:"-32,768 to 32,767"}),(0,s.jsx)(n.td,{children:"Medium-sized values"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_int"})}),(0,s.jsx)(n.td,{children:"32 bits"}),(0,s.jsx)(n.td,{children:"-2^31 to 2^31-1"}),(0,s.jsx)(n.td,{children:"Large numbers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_float"})}),(0,s.jsx)(n.td,{children:"32 bits"}),(0,s.jsx)(n.td,{children:"Floating point"}),(0,s.jsx)(n.td,{children:"Positions, decimals"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"net_bool"})}),(0,s.jsx)(n.td,{children:"1 bit"}),(0,s.jsx)(n.td,{children:"true/false"}),(0,s.jsx)(n.td,{children:"Binary states"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"2-batch-updates",children:"2. Batch Updates"}),"\n",(0,s.jsx)(n.p,{children:"Combine multiple updates into a single network message:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- INEFFICIENT: Sending multiple separate updates\nfunction UpdateStats(health, hunger, sanity)\n    self.net_health:set(health) -- Triggers network message\n    self.net_hunger:set(hunger) -- Triggers another network message\n    self.net_sanity:set(sanity) -- Triggers a third network message\nend\n\n-- OPTIMIZED: Batching updates together\nfunction UpdateStats(health, hunger, sanity)\n    -- Start batching\n    self.inst:StartUpdatingComponent(self)\n    \n    -- Set all values (no network messages sent yet)\n    self.net_health:set_local(health)\n    self.net_hunger:set_local(hunger)\n    self.net_sanity:set_local(sanity)\n    \n    -- Send a single network update with all changes\n    self.inst:StopUpdatingComponent(self)\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-delta-compression",children:"3. Delta Compression"}),"\n",(0,s.jsx)(n.p,{children:"Send only the changes instead of full state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- INEFFICIENT: Sending full inventory state\nfunction SyncInventory(inventory)\n    self.net_inventory:set(json.encode(inventory)) -- Sends entire inventory\nend\n\n-- OPTIMIZED: Sending only changes\nfunction SyncInventoryChanges(slot, item)\n    self.net_inventory_slot:set(slot)\n    self.net_inventory_item:set(item and item.prefab or "")\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-prioritize-network-traffic",children:"4. Prioritize Network Traffic"}),"\n",(0,s.jsx)(n.p,{children:"Assign priorities to network messages based on importance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Set entity network priority\ninst.entity:SetPriority(NETWORK_PRIORITY.HIGH) -- For important entities\n\n-- Lower priority for cosmetic entities\ndecorative_entity.entity:SetPriority(NETWORK_PRIORITY.LOW)\n\n-- Available priority levels\n-- NETWORK_PRIORITY.CRITICAL (0) - Must be delivered immediately\n-- NETWORK_PRIORITY.HIGH (1) - Important for gameplay\n-- NETWORK_PRIORITY.MEDIUM (2) - Standard priority\n-- NETWORK_PRIORITY.LOW (3) - Can be delayed if needed\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-relevance-based-filtering",children:"5. Relevance-Based Filtering"}),"\n",(0,s.jsx)(n.p,{children:"Only send updates to players who need the information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- INEFFICIENT: Broadcasting to all clients\nSendModRPCToClients(MOD_RPC.MyMod.EffectEvent, x, y, z, effect_type)\n\n-- OPTIMIZED: Send only to nearby players\nlocal function SendToRelevantPlayers(x, y, z, effect_type)\n    local range_sq = 40 * 40 -- Only players within 40 units need this update\n    \n    for i, player in ipairs(AllPlayers) do\n        local px, py, pz = player.Transform:GetWorldPosition()\n        local dist_sq = distsq(x, z, px, pz)\n        \n        if dist_sq <= range_sq then\n            -- Only send to players in range\n            SendModRPCToClient(MOD_RPC.MyMod.EffectEvent, player.userid, x, y, z, effect_type)\n        end\n    end\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"6-update-frequency-control",children:"6. Update Frequency Control"}),"\n",(0,s.jsx)(n.p,{children:"Limit how often you send updates:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- INEFFICIENT: Updating position every frame\nlocal function UpdatePosition(inst)\n    inst.net_position:set(Vector3(inst.Transform:GetWorldPosition()))\nend\ninst:DoPeriodicTask(0, UpdatePosition) -- Every frame\n\n-- OPTIMIZED: Updating position at reasonable intervals\nlocal function UpdatePosition(inst)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    \n    -- Only update if position changed significantly\n    if inst._last_sent_x == nil or \n       math.abs(inst._last_sent_x - x) > 0.5 or\n       math.abs(inst._last_sent_z - z) > 0.5 then\n        \n        inst.net_position:set(Vector3(x, y, z))\n        inst._last_sent_x = x\n        inst._last_sent_z = z\n    end\nend\ninst:DoPeriodicTask(0.2, UpdatePosition) -- 5 times per second maximum\n"})}),"\n",(0,s.jsx)(n.h3,{id:"7-compression-techniques",children:"7. Compression Techniques"}),"\n",(0,s.jsx)(n.p,{children:"Compress data before sending when appropriate:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- INEFFICIENT: Sending raw string data\nself.net_large_data:set(large_string_data)\n\n-- OPTIMIZED: Sending compressed data\nlocal function CompressString(str)\n    -- Simple run-length encoding for repeated characters\n    local result = ""\n    local count = 1\n    local last_char = string.sub(str, 1, 1)\n    \n    for i = 2, #str do\n        local char = string.sub(str, i, i)\n        if char == last_char then\n            count = count + 1\n        else\n            if count > 3 then\n                result = result .. "#" .. count .. last_char\n            else\n                result = result .. string.rep(last_char, count)\n            end\n            count = 1\n            last_char = char\n        end\n    end\n    \n    -- Handle the last character\n    if count > 3 then\n        result = result .. "#" .. count .. last_char\n    else\n        result = result .. string.rep(last_char, count)\n    end\n    \n    return result\nend\n\n-- Send compressed data\nself.net_large_data:set(CompressString(large_string_data))\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-optimization-strategies",children:"Advanced Optimization Strategies"}),"\n",(0,s.jsx)(n.h3,{id:"1-level-of-detail-lod-for-network-updates",children:"1. Level of Detail (LOD) for Network Updates"}),"\n",(0,s.jsx)(n.p,{children:"Vary the update frequency based on distance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"function UpdateEntityNetwork(inst)\n    local player = ThePlayer\n    if not player then return end\n    \n    local x, y, z = inst.Transform:GetWorldPosition()\n    local px, py, pz = player.Transform:GetWorldPosition()\n    local dist_sq = distsq(x, z, px, pz)\n    \n    -- Determine update frequency based on distance\n    local update_frequency\n    if dist_sq < 10*10 then -- Very close\n        update_frequency = 0.1 -- Update 10 times per second\n    elseif dist_sq < 30*30 then -- Medium distance\n        update_frequency = 0.5 -- Update twice per second\n    else -- Far away\n        update_frequency = 2.0 -- Update every 2 seconds\n    end\n    \n    -- Schedule next update\n    inst._network_task = inst:DoTaskInTime(update_frequency, UpdateEntityNetwork)\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-predictive-modeling",children:"2. Predictive Modeling"}),"\n",(0,s.jsx)(n.p,{children:"Let clients predict behavior to reduce updates:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Server sends initial velocity and lets clients predict movement\nfunction StartProjectile(inst, angle, speed)\n    if TheWorld.ismastersim then\n        -- Send initial state\n        inst.net_angle:set(angle)\n        inst.net_speed:set(speed)\n        inst.net_start_time:set(GetTime())\n        inst.net_start_pos:set(Vector3(inst.Transform:GetWorldPosition()))\n        \n        -- Server still updates actual position\n        inst:StartUpdatingComponent(self)\n    else\n        -- Client predicts position based on physics\n        inst:DoPeriodicTask(0, function()\n            local angle = inst.net_angle:value()\n            local speed = inst.net_speed:value()\n            local start_time = inst.net_start_time:value()\n            local start_pos = inst.net_start_pos:value()\n            \n            local time_elapsed = GetTime() - start_time\n            local dist = speed * time_elapsed\n            \n            local dx = math.cos(angle) * dist\n            local dz = math.sin(angle) * dist\n            \n            inst.Transform:SetPosition(start_pos.x + dx, start_pos.y, start_pos.z + dz)\n        end)\n    end\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-event-filtering",children:"3. Event Filtering"}),"\n",(0,s.jsx)(n.p,{children:"Only send events that matter to gameplay:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- INEFFICIENT: Sending all animation events\nfunction PlayAnimation(inst, anim_name)\n    inst.AnimState:PlayAnimation(anim_name)\n    \n    if TheWorld.ismastersim then\n        -- Send every animation to clients\n        inst.net_anim:set(anim_name)\n    end\nend\n\n-- OPTIMIZED: Only send gameplay-relevant animations\nlocal IMPORTANT_ANIMATIONS = {\n    "attack", "hit", "death", "special_ability"\n}\n\nfunction PlayAnimation(inst, anim_name)\n    inst.AnimState:PlayAnimation(anim_name)\n    \n    if TheWorld.ismastersim and table.contains(IMPORTANT_ANIMATIONS, anim_name) then\n        -- Only send important animations\n        inst.net_anim:set(anim_name)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-bandwidth-budgeting",children:"4. Bandwidth Budgeting"}),"\n",(0,s.jsx)(n.p,{children:"Allocate bandwidth based on entity importance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define bandwidth priorities for different entity types\nlocal BANDWIDTH_PRIORITIES = {\n    player = 1,      -- Highest priority\n    monster = 2,\n    projectile = 2,\n    structure = 3,\n    resource = 3,\n    decoration = 4,  -- Lowest priority\n}\n\n-- Set entity network priority based on type\nfunction SetEntityNetworkPriority(inst)\n    local entity_type = inst:HasTag("player") and "player" or\n                        inst:HasTag("monster") and "monster" or\n                        inst:HasTag("projectile") and "projectile" or\n                        inst:HasTag("structure") and "structure" or\n                        inst:HasTag("resource") and "resource" or\n                        "decoration"\n    \n    local priority = BANDWIDTH_PRIORITIES[entity_type] or NETWORK_PRIORITY.MEDIUM\n    inst.entity:SetPriority(priority)\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"bandwidth-optimization-checklist",children:"Bandwidth Optimization Checklist"}),"\n",(0,s.jsx)(n.p,{children:"When optimizing your mod's network usage, consider these questions:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Types"}),": Am I using the smallest possible data types for my values?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update Frequency"}),": Am I sending updates only when necessary?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batching"}),": Am I combining related updates into single messages?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relevance"}),": Am I only sending data to players who need it?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compression"}),": For large data, am I using compression techniques?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prediction"}),": Can clients predict some behavior to reduce updates?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prioritization"}),": Have I assigned appropriate priorities to network traffic?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": Have I tested my mod under bandwidth-constrained conditions?"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing-network-optimization",children:"Testing Network Optimization"}),"\n",(0,s.jsx)(n.p,{children:"To verify your optimizations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Console command to simulate network conditions\nc_simulatenetwork(latency, packet_loss_send, packet_loss_receive)\n\n-- Example: Test with 200ms latency and 5% packet loss\nc_simulatenetwork(200, 0.05, 0.05)\n\n-- Reset to normal\nc_simulatenetwork()\n"})}),"\n",(0,s.jsx)(n.p,{children:"By implementing these bandwidth optimization techniques, your mod will perform better across a wide range of network conditions, providing a smoother experience for all players."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);