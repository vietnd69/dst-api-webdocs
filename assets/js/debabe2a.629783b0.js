"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[345],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(96540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},51326:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"game-scripts/core-systems/networking-communication/networking/netvars","title":"Network Variables (NetVars)","description":"Network variable types and utilities for synchronized client-server communication","source":"@site/docs/game-scripts/core-systems/networking-communication/networking/netvars.md","sourceDirName":"game-scripts/core-systems/networking-communication/networking","slug":"/game-scripts/core-systems/networking-communication/networking/netvars","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/netvars","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"netvars","title":"Network Variables (NetVars)","description":"Network variable types and utilities for synchronized client-server communication","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Network Client RPC","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/networkclientrpc"},"next":{"title":"Shard Index","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/shardindex"}}');var r=s(74848),i=s(28453);const l={id:"netvars",title:"Network Variables (NetVars)",description:"Network variable types and utilities for synchronized client-server communication",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="Network Variables (NetVars)",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Network Variable Types",id:"network-variable-types",level:2},{value:"net_bool",id:"net-bool",level:3},{value:"net_tinybyte",id:"net-tinybyte",level:3},{value:"net_smallbyte",id:"net-smallbyte",level:3},{value:"net_byte",id:"net-byte",level:3},{value:"net_shortint",id:"net-shortint",level:3},{value:"net_ushortint",id:"net-ushortint",level:3},{value:"net_int",id:"net-int",level:3},{value:"net_uint",id:"net-uint",level:3},{value:"net_float",id:"net-float",level:3},{value:"net_hash",id:"net-hash",level:3},{value:"net_string",id:"net-string",level:3},{value:"net_entity",id:"net-entity",level:3},{value:"Array Network Variables",id:"array-network-variables",level:2},{value:"net_bytearray",id:"net-bytearray",level:3},{value:"net_smallbytearray",id:"net-smallbytearray",level:3},{value:"net_ushortarray",id:"net-ushortarray",level:3},{value:"Classes",id:"classes",level:2},{value:"net_event",id:"net-event",level:3},{value:"net_event(guid, event)",id:"net-event-constructor",level:4},{value:"inst()",id:"net-event-push",level:4},{value:"Utility Functions",id:"utility-functions",level:2},{value:"GetIdealUnsignedNetVarForCount(count)",id:"get-ideal-unsigned-netvar",level:3},{value:"Network Variable Methods",id:"network-variable-methods",level:2},{value:"netvar(value)",id:"netvar-set",level:3},{value:"netvar()",id:"netvar-value",level:3},{value:"netvar(value)",id:"netvar-set-local",level:3},{value:"Important Notes",id:"important-notes",level:2},{value:"Synchronization Requirements",id:"synchronization-requirements",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"network-variables-netvars",children:"Network Variables (NetVars)"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"netvars"})," module provides network variable types and utilities for synchronized client-server communication in Don't Starve Together. Network variables (netvars) automatically synchronize data between server and clients, ensuring consistent game state across all players."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Create a network variable\nlocal health_netvar = net_float(inst.GUID, "health", "healthdirty")\n\n-- Set value on server (syncs to clients)\nhealth_netvar:set(100)\n\n-- Read value on server or client\nlocal current_health = health_netvar:value()\n\n-- Set local value without sync\nhealth_netvar:set_local(95)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"network-variable-types",children:"Network Variable Types"}),"\n",(0,r.jsx)(n.h3,{id:"net-bool",children:"net_bool"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n1-bit boolean network variable for true/false values."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local is_alive = net_bool(inst.GUID, "alive", "alivedirty")\nis_alive:set(true)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-tinybyte",children:"net_tinybyte"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n3-bit unsigned integer network variable. Range: [0..7]"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local small_counter = net_tinybyte(inst.GUID, "counter", "counterdirty")\nsmall_counter:set(5)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-smallbyte",children:"net_smallbyte"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n6-bit unsigned integer network variable. Range: [0..63]"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local medium_counter = net_smallbyte(inst.GUID, "level", "leveldirty")\nmedium_counter:set(42)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-byte",children:"net_byte"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n8-bit unsigned integer network variable. Range: [0..255]"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local age = net_byte(inst.GUID, "age", "agedirty")\nage:set(150)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-shortint",children:"net_shortint"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n16-bit signed integer network variable. Range: [-32767..32767]"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local temperature = net_shortint(inst.GUID, "temp", "tempdirty")\ntemperature:set(-100)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-ushortint",children:"net_ushortint"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n16-bit unsigned integer network variable. Range: [0..65535]"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local item_count = net_ushortint(inst.GUID, "count", "countdirty")\nitem_count:set(30000)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-int",children:"net_int"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n32-bit signed integer network variable. Range: [-2147483647..2147483647]"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local large_value = net_int(inst.GUID, "value", "valuedirty")\nlarge_value:set(-1000000)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-uint",children:"net_uint"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n32-bit unsigned integer network variable. Range: [0..4294967295]"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local timestamp = net_uint(inst.GUID, "time", "timedirty")\ntimestamp:set(4000000000)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-float",children:"net_float"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n32-bit floating point network variable for decimal values."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local health_percent = net_float(inst.GUID, "healthpct", "healthpctdirty")\nhealth_percent:set(0.75)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-hash",children:"net_hash"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\n32-bit hash network variable. Can be set by hash or string (automatically converted to hash), but only returns the hash value when read."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local state_hash = net_hash(inst.GUID, "state", "statedirty")\nstate_hash:set("idle")  -- Converted to hash automatically\nlocal hash_value = state_hash:value()  -- Returns hash, not string\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-string",children:"net_string"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nVariable length string network variable."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local player_name = net_string(inst.GUID, "name", "namedirty")\nplayer_name:set("Player1")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-entity",children:"net_entity"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nNetwork variable for entity instances."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local target_entity = net_entity(inst.GUID, "target", "targetdirty")\ntarget_entity:set(some_entity)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"array-network-variables",children:"Array Network Variables"}),"\n",(0,r.jsx)(n.h3,{id:"net-bytearray",children:"net_bytearray"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nArray of 8-bit unsigned integers (max size = 31). Arrays are expensive and should be avoided if values change often."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local byte_array = net_bytearray(inst.GUID, "bytes", "bytesdirty")\n-- Set array values as needed\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-smallbytearray",children:"net_smallbytearray"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nArray of 6-bit unsigned integers (max size = 31). Arrays are expensive and should be avoided if values change often."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local small_byte_array = net_smallbytearray(inst.GUID, "smallbytes", "smallbytesdirty")\n-- Set array values as needed\n'})}),"\n",(0,r.jsx)(n.h3,{id:"net-ushortarray",children:"net_ushortarray"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nArray of 16-bit unsigned integers (max size = 31). Arrays are expensive and should be avoided if values change often."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local ushort_array = net_ushortarray(inst.GUID, "ushorts", "ushortsdirty")\n-- Set array values as needed\n'})}),"\n",(0,r.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsx)(n.h3,{id:"net-event",children:"net_event"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nEvent wrapper over net_bool for one-shot triggers such as sound effects. Use events for triggers, not state changes (which should use net_bool instead)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsx)(n.h4,{id:"net-event-constructor",children:"net_event(guid, event)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"guid"})," (number): Entity GUID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"event"})," (string): Event name"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(net_event): New event instance"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"net-event-push",children:["inst",":push","()"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nTriggers the event on server and clients."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local damage_event = net_event(inst.GUID, "damage", "damagedirty")\n\n-- Trigger event\ndamage_event:push()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,r.jsx)(n.h3,{id:"get-ideal-unsigned-netvar",children:"GetIdealUnsignedNetVarForCount(count)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nReturns the most efficient unsigned network variable type for a given count requirement. Should be used sparingly and assigned to variables with suffix ",(0,r.jsx)(n.code,{children:"_net_enum"})," for file searches."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"count"})," (number): Maximum count value needed"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(function): Appropriate netvar constructor function, or nil if count exceeds limits"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local item_count_net_enum = GetIdealUnsignedNetVarForCount(100)\nlocal count_netvar = item_count_net_enum(inst.GUID, "itemcount", "itemcountdirty")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Selection Logic:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["count \u2264 7: returns ",(0,r.jsx)(n.code,{children:"net_tinybyte"})]}),"\n",(0,r.jsxs)(n.li,{children:["count \u2264 63: returns ",(0,r.jsx)(n.code,{children:"net_smallbyte"})]}),"\n",(0,r.jsxs)(n.li,{children:["count \u2264 255: returns ",(0,r.jsx)(n.code,{children:"net_byte"})]}),"\n",(0,r.jsxs)(n.li,{children:["count \u2264 65535: returns ",(0,r.jsx)(n.code,{children:"net_ushortint"})]}),"\n",(0,r.jsxs)(n.li,{children:["count \u2264 4294967295: returns ",(0,r.jsx)(n.code,{children:"net_uint"})]}),"\n",(0,r.jsxs)(n.li,{children:["count > 4294967295: returns ",(0,r.jsx)(n.code,{children:"nil"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"network-variable-methods",children:"Network Variable Methods"}),"\n",(0,r.jsx)(n.p,{children:"All network variables share these common methods:"}),"\n",(0,r.jsxs)(n.h3,{id:"netvar-set",children:["netvar",":set","(value)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCall on the server to set the value, which will be synced to clients. Dirty event is triggered on server and clients only if value has actually changed."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," (varies): Value to set (type depends on netvar type)"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"netvar-value",children:["netvar",":value","()"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCall on the server or clients to read the current value."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(varies): Current value (type depends on netvar type)"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"netvar-set-local",children:["netvar",":set_local","(value)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCall on the server or clients to set the value without triggering a sync or dirty event. This results in the next server set() to be dirty regardless of whether the value changed, since we assume the client may have set_local() to any arbitrary value."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," (varies): Value to set locally"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generally used in code paths shared between server and clients"}),"\n",(0,r.jsx)(n.li,{children:"Clients may have enough information (such as elapsed time) to estimate and update the value locally"}),"\n",(0,r.jsx)(n.li,{children:"Sharing the code path allows the server to be aware that the value is being updated locally on clients"}),"\n",(0,r.jsx)(n.li,{children:"Example usage: let clients update smooth timer ticks locally, server saves bandwidth by only needing set() to force a resync occasionally"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,r.jsx)(n.h3,{id:"synchronization-requirements",children:"Synchronization Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Identical Declaration"}),": Netvars must exist and be declared identically on server and clients for each entity, otherwise entity deserialization will fail"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mod Requirement"}),": If a MOD uses netvars, then server and clients must all have the same MOD active"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Timing"}),": Netvar dirty events are triggered before lua update"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Different Listeners"}),": Server and clients may register different listeners for dirty events"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Array Cost"}),": Arrays are expensive. Avoid using them, especially if the values will change often"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hash Efficiency"}),": net_hash has the same network cost as a 32-bit unsigned integer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bandwidth"}),": Use the smallest appropriate netvar type for your data to minimize bandwidth usage"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Choose Appropriate Type"}),": Use the smallest netvar type that can hold your data range"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Avoid Arrays"}),": Use individual netvars instead of arrays when possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event vs State"}),": Use net_event for one-shot triggers, net_bool for persistent state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local Updates"}),": Use set_local() for client-side predictions that the server will occasionally correct"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/",children:"Networking"}),": Core networking functions and server management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/networking/networkclientrpc",children:"Network Client RPC"}),": Remote procedure calls for client-server communication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./entityscript.md",children:"Entity Script"}),": Entity management and GUID system"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);