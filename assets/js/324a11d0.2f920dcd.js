"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[8191],{4646:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api-vanilla/examples/custom-component","title":"Custom Component","description":"This tutorial walks through creating a custom component for Don\'t Starve Together. We\'ll create a \\"magicuser\\" component that allows entities to cast spells and manage magical energy.","source":"@site/docs/api-vanilla/examples/custom-component.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/custom-component","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-component","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"custom-component","title":"Custom Component","sidebar_position":5,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Custom Crafting Recipes and Tech Trees","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/custom-recipes"},"next":{"title":"UI Customization","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/ui-mod"}}');var a=t(4848),i=t(8453);const o={id:"custom-component",title:"Custom Component",sidebar_position:5,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Creating a Custom Component",r={},c=[{value:"Project Overview",id:"project-overview",level:2},{value:"Step 1: Set Up the Mod Structure",id:"step-1-set-up-the-mod-structure",level:2},{value:"Step 2: Create the modinfo.lua File",id:"step-2-create-the-modinfolua-file",level:2},{value:"Step 3: Create the magicuser Component",id:"step-3-create-the-magicuser-component",level:2},{value:"Step 4: Create the modmain.lua File",id:"step-4-create-the-modmainlua-file",level:2},{value:"Step 5: Create the Magic Robe Prefab",id:"step-5-create-the-magic-robe-prefab",level:2},{value:"Step 6: Create the Magic Staff Prefab",id:"step-6-create-the-magic-staff-prefab",level:2},{value:"Step 7: Add a Custom Action for Cycling Spells",id:"step-7-add-a-custom-action-for-cycling-spells",level:2},{value:"Step 8: Testing Your Component",id:"step-8-testing-your-component",level:2},{value:"Extending the Component",id:"extending-the-component",level:2},{value:"Add More Spell Types",id:"add-more-spell-types",level:3},{value:"Add Spell Cooldowns",id:"add-spell-cooldowns",level:3},{value:"Add Spell Experience and Leveling",id:"add-spell-experience-and-leveling",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Problem: Component not being added to players",id:"problem-component-not-being-added-to-players",level:3},{value:"Problem: Mana bar not showing up",id:"problem-mana-bar-not-showing-up",level:3},{value:"Problem: Spells not casting",id:"problem-spells-not-casting",level:3},{value:"Problem: Errors when equipping/unequipping items",id:"problem-errors-when-equippingunequipping-items",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"creating-a-custom-component",children:"Creating a Custom Component"})}),"\n",(0,a.jsx)(e.p,{children:"This tutorial walks through creating a custom component for Don't Starve Together. We'll create a \"magicuser\" component that allows entities to cast spells and manage magical energy."}),"\n",(0,a.jsx)(e.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,a.jsx)(e.p,{children:"Our custom component will:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Track magical energy (mana)"}),"\n",(0,a.jsx)(e.li,{children:"Provide functions for casting spells"}),"\n",(0,a.jsx)(e.li,{children:"Include events for mana changes"}),"\n",(0,a.jsx)(e.li,{children:"Support different spell types"}),"\n",(0,a.jsx)(e.li,{children:"Add visual effects for spell casting"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"step-1-set-up-the-mod-structure",children:"Step 1: Set Up the Mod Structure"}),"\n",(0,a.jsx)(e.p,{children:"Create these folders and files:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"magic_component_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2514\u2500\u2500 magicuser.lua\n\u2502   \u2514\u2500\u2500 prefabs/\n\u2502       \u251c\u2500\u2500 magicrobe.lua\n\u2502       \u2514\u2500\u2500 magicstaff.lua\n\u2514\u2500\u2500 images/\n    \u2514\u2500\u2500 inventoryimages/\n        \u251c\u2500\u2500 magicrobe.tex\n        \u251c\u2500\u2500 magicrobe.xml\n        \u251c\u2500\u2500 magicstaff.tex\n        \u2514\u2500\u2500 magicstaff.xml\n"})}),"\n",(0,a.jsx)(e.h2,{id:"step-2-create-the-modinfolua-file",children:"Step 2: Create the modinfo.lua File"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'name = "Magic Component"\ndescription = "Adds a custom magic component for spell casting"\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\n\n-- Not compatible with Don\'t Starve\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\n-- This mod is required on clients\nall_clients_require_mod = true\n\n-- This mod is not a client-only mod\nclient_only_mod = false\n\n-- Icon displayed in the server list\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Tags that describe your mod\nserver_filter_tags = {\n    "magic",\n    "gameplay"\n}\n\n-- Configuration options\nconfiguration_options = {\n    {\n        name = "mana_regen_rate",\n        label = "Mana Regeneration Rate",\n        options = {\n            {description = "Slow", data = 1},\n            {description = "Normal", data = 2},\n            {description = "Fast", data = 3}\n        },\n        default = 2\n    },\n    {\n        name = "max_mana",\n        label = "Maximum Mana",\n        options = {\n            {description = "Low (50)", data = 50},\n            {description = "Medium (100)", data = 100},\n            {description = "High (200)", data = 200}\n        },\n        default = 100\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-3-create-the-magicuser-component",children:"Step 3: Create the magicuser Component"}),"\n",(0,a.jsxs)(e.p,{children:["Create ",(0,a.jsx)(e.code,{children:"scripts/components/magicuser.lua"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local MagicUser = Class(function(self, inst)\n    self.inst = inst\n    \n    -- Initialize mana values\n    self.max = 100\n    self.current = self.max\n    \n    -- Mana regeneration rate (per second)\n    self.rate = 2\n    \n    -- Track if the user is casting\n    self.casting = false\n    \n    -- List of known spells\n    self.known_spells = {}\n    \n    -- Start mana regeneration\n    self:StartRegeneration()\nend)\n\n-- Set the maximum mana\nfunction MagicUser:SetMaxMana(amount)\n    self.max = amount\n    self.current = math.min(self.current, self.max)\n    self.inst:PushEvent("magicusermanachanged", {percent = self:GetPercent()})\nend\n\n-- Get the current mana percentage\nfunction MagicUser:GetPercent()\n    return self.current / self.max\nend\n\n-- Set the mana percentage\nfunction MagicUser:SetPercent(percent)\n    self.current = math.clamp(percent * self.max, 0, self.max)\n    self.inst:PushEvent("magicusermanachanged", {percent = self:GetPercent()})\nend\n\n-- Change the mana amount\nfunction MagicUser:DoDelta(delta)\n    local old = self.current\n    self.current = math.clamp(self.current + delta, 0, self.max)\n    \n    if old ~= self.current then\n        self.inst:PushEvent("magicusermanachanged", {percent = self:GetPercent()})\n    end\n    \n    return self.current - old\nend\n\n-- Start mana regeneration\nfunction MagicUser:StartRegeneration()\n    if self.regen_task ~= nil then\n        self.regen_task:Cancel()\n    end\n    \n    self.regen_task = self.inst:DoPeriodicTask(1, function() \n        if not self.casting and self.current < self.max then\n            self:DoDelta(self.rate)\n        end\n    end)\nend\n\n-- Stop mana regeneration\nfunction MagicUser:StopRegeneration()\n    if self.regen_task ~= nil then\n        self.regen_task:Cancel()\n        self.regen_task = nil\n    end\nend\n\n-- Add a spell to the known spells\nfunction MagicUser:LearnSpell(spell_name, mana_cost, cast_fn)\n    self.known_spells[spell_name] = {\n        mana_cost = mana_cost,\n        cast_fn = cast_fn\n    }\n    \n    self.inst:PushEvent("magicuserlearnedspell", {spell = spell_name})\n    \n    return true\nend\n\n-- Check if the user knows a spell\nfunction MagicUser:KnowsSpell(spell_name)\n    return self.known_spells[spell_name] ~= nil\nend\n\n-- Cast a spell\nfunction MagicUser:CastSpell(spell_name, target, position)\n    if not self:KnowsSpell(spell_name) then\n        return false, "UNKNOWN_SPELL"\n    end\n    \n    local spell = self.known_spells[spell_name]\n    \n    if self.current < spell.mana_cost then\n        return false, "NOT_ENOUGH_MANA"\n    end\n    \n    -- Start casting\n    self.casting = true\n    \n    -- Use mana\n    self:DoDelta(-spell.mana_cost)\n    \n    -- Create visual effect\n    local fx = SpawnPrefab("statue_transition_2")\n    if fx then\n        fx.Transform:SetPosition(self.inst.Transform:GetWorldPosition())\n        fx:ListenForEvent("animover", fx.Remove)\n    end\n    \n    -- Call the spell function\n    local success = spell.cast_fn(self.inst, target, position)\n    \n    -- End casting after a short delay\n    self.inst:DoTaskInTime(0.5, function()\n        self.casting = false\n    end)\n    \n    -- Trigger event\n    self.inst:PushEvent("magicusercastspell", {\n        spell = spell_name,\n        success = success,\n        target = target,\n        position = position\n    })\n    \n    return success\nend\n\n-- Save/Load\nfunction MagicUser:OnSave()\n    local data = {\n        current = self.current,\n        max = self.max,\n        rate = self.rate,\n        known_spells = {}\n    }\n    \n    -- Save known spell names (not the functions)\n    for spell_name, _ in pairs(self.known_spells) do\n        table.insert(data.known_spells, spell_name)\n    end\n    \n    return data\nend\n\nfunction MagicUser:OnLoad(data)\n    if data then\n        self.current = data.current or self.max\n        self.max = data.max or 100\n        self.rate = data.rate or 2\n        \n        -- Known spells will need to be re-added by the mod\n    end\nend\n\nreturn MagicUser\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-4-create-the-modmainlua-file",children:"Step 4: Create the modmain.lua File"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Import globals into the environment\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add asset files\nAssets = {\n    -- Inventory images\n    Asset("IMAGE", "images/inventoryimages/magicrobe.tex"),\n    Asset("ATLAS", "images/inventoryimages/magicrobe.xml"),\n    Asset("IMAGE", "images/inventoryimages/magicstaff.tex"),\n    Asset("ATLAS", "images/inventoryimages/magicstaff.xml"),\n}\n\n-- Register prefabs\nPrefabFiles = {\n    "magicrobe",\n    "magicstaff",\n}\n\n-- Add custom strings\nSTRINGS.NAMES.MAGICROBE = "Magic Robe"\nSTRINGS.RECIPE_DESC.MAGICROBE = "Increases mana regeneration."\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.MAGICROBE = "I feel more magical already."\n\nSTRINGS.NAMES.MAGICSTAFF = "Magic Staff"\nSTRINGS.RECIPE_DESC.MAGICSTAFF = "Cast powerful spells."\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.MAGICSTAFF = "It\'s crackling with arcane energy."\n\n-- Get configuration options\nlocal mana_regen_rate = GetModConfigData("mana_regen_rate")\nlocal max_mana = GetModConfigData("max_mana")\n\n-- Register the custom component\nAddComponentPostInit("playercontroller", function(self)\n    -- Add a helper function to the player controller to cast spells\n    self.CastSpell = function(self, spell_name, target, pos)\n        if self.inst.components.magicuser then\n            return self.inst.components.magicuser:CastSpell(spell_name, target, pos)\n        end\n        return false, "NO_MAGIC_USER"\n    end\nend)\n\n-- Add the magic component to players\nAddPlayerPostInit(function(inst)\n    -- Add the magicuser component\n    if not inst.components.magicuser then\n        inst:AddComponent("magicuser")\n        \n        -- Apply configuration options\n        inst.components.magicuser:SetMaxMana(max_mana)\n        inst.components.magicuser.rate = mana_regen_rate\n        \n        -- Add basic spells\n        inst.components.magicuser:LearnSpell("light", 10, function(caster, target, pos)\n            -- Create a light source\n            local light = SpawnPrefab("campfirefire")\n            light.Transform:SetPosition(pos:Get())\n            light:DoTaskInTime(30, light.Remove)\n            return true\n        end)\n        \n        inst.components.magicuser:LearnSpell("heal", 30, function(caster, target, pos)\n            -- Heal the caster\n            if caster.components.health then\n                caster.components.health:DoDelta(20)\n                return true\n            end\n            return false\n        end)\n    end\n    \n    -- Add a mana badge to the HUD\n    if not inst.HUD then return end\n    \n    inst:ListenForEvent("magicusermanachanged", function(inst, data)\n        if inst.HUD.controls.status.mana then\n            inst.HUD.controls.status.mana:SetPercent(data.percent, inst.components.magicuser.max)\n        end\n    end)\nend)\n\n-- Add a mana badge to the status displays\nAddClassPostConstruct("widgets/statusdisplays", function(self)\n    -- Create a mana badge\n    local ManaBadge = require "widgets/badge"\n    self.mana = self:AddChild(ManaBadge(nil, nil, nil, "mana"))\n    self.mana:SetPosition(0, -40, 0)\n    self.mana:SetPercent(1, 100)\n    self.mana:SetBG("status_meter_bg.tex")\n    self.mana:SetScale(1, 1, 1)\n    self.mana:SetImageNormalColour(0, 0.5, 1, 1)  -- Blue color for mana\n    \n    -- Position the badge\n    self.mana:SetPosition(-100, -40, 0)\n    \n    -- Update the OnUpdate function to include mana\n    local oldOnUpdate = self.OnUpdate\n    self.OnUpdate = function(self, dt)\n        oldOnUpdate(self, dt)\n        \n        -- Update mana display\n        if self.owner and self.owner.components.magicuser then\n            self.mana:SetPercent(self.owner.components.magicuser:GetPercent(), self.owner.components.magicuser.max)\n        end\n    end\nend)\n\n-- Add crafting recipes for magic items\nAddRecipe("magicrobe", \n    {Ingredient("silk", 6), Ingredient("bluegem", 2)}, \n    GLOBAL.RECIPETABS.DRESS,  -- Add to Dress tab\n    GLOBAL.TECH.SCIENCE_TWO,  -- Requires Alchemy Engine\n    nil, nil, nil, nil, nil,  \n    "images/inventoryimages/magicrobe.xml")\n    \nAddRecipe("magicstaff", \n    {Ingredient("twigs", 2), Ingredient("bluegem", 1), Ingredient("purplegem", 1)}, \n    GLOBAL.RECIPETABS.MAGIC,  -- Add to Magic tab\n    GLOBAL.TECH.MAGIC_TWO,    -- Requires Prestihatitator\n    nil, nil, nil, nil, nil,  \n    "images/inventoryimages/magicstaff.xml")\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-5-create-the-magic-robe-prefab",children:"Step 5: Create the Magic Robe Prefab"}),"\n",(0,a.jsxs)(e.p,{children:["Create ",(0,a.jsx)(e.code,{children:"scripts/prefabs/magicrobe.lua"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/armor_onemanband.zip"),  -- Reuse onemanband animation\n    \n    Asset("IMAGE", "images/inventoryimages/magicrobe.tex"),\n    Asset("ATLAS", "images/inventoryimages/magicrobe.xml"),\n}\n\n-- Function called when the robe is equipped\nlocal function onequip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_body", "armor_onemanband", "swap_body")\n    \n    -- Apply a blue tint to the robe\n    owner.AnimState:SetMultColour(0.8, 0.8, 1, 1)\n    \n    -- Increase mana regeneration when equipped\n    if owner.components.magicuser then\n        owner.components.magicuser.rate = owner.components.magicuser.rate * 2\n    end\n    \n    -- Add a magical effect\n    if not inst.fx_task then\n        inst.fx_task = inst:DoPeriodicTask(3, function()\n            local fx = SpawnPrefab("sparklefx")\n            if fx then\n                fx.Transform:SetPosition(owner.Transform:GetWorldPosition())\n                fx.Transform:SetScale(0.5, 0.5, 0.5)\n            end\n        end)\n    end\nend\n\n-- Function called when the robe is unequipped\nlocal function onunequip(inst, owner)\n    owner.AnimState:ClearOverrideSymbol("swap_body")\n    owner.AnimState:SetMultColour(1, 1, 1, 1)\n    \n    -- Reset mana regeneration\n    if owner.components.magicuser then\n        owner.components.magicuser.rate = owner.components.magicuser.rate / 2\n    end\n    \n    -- Remove magical effect\n    if inst.fx_task then\n        inst.fx_task:Cancel()\n        inst.fx_task = nil\n    end\nend\n\n-- Main function to create the magic robe\nlocal function fn()\n    -- Create the entity\n    local inst = CreateEntity()\n\n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    -- Set up physics\n    MakeInventoryPhysics(inst)\n\n    -- Set up animation\n    inst.AnimState:SetBank("armor_onemanband")\n    inst.AnimState:SetBuild("armor_onemanband")\n    inst.AnimState:PlayAnimation("anim")\n    \n    -- Apply a blue tint to the robe\n    inst.AnimState:SetMultColour(0.8, 0.8, 1, 1)\n\n    -- Add tags\n    inst:AddTag("magical")\n\n    -- Make the entity pristine for networking\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "magicrobe"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/magicrobe.xml"\n\n    -- Make it inspectable\n    inst:AddComponent("inspectable")\n\n    -- Make it equippable\n    inst:AddComponent("equippable")\n    inst.components.equippable.equipslot = EQUIPSLOTS.BODY\n    inst.components.equippable:SetOnEquip(onequip)\n    inst.components.equippable:SetOnUnequip(onunequip)\n\n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("magicrobe", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-6-create-the-magic-staff-prefab",children:"Step 6: Create the Magic Staff Prefab"}),"\n",(0,a.jsxs)(e.p,{children:["Create ",(0,a.jsx)(e.code,{children:"scripts/prefabs/magicstaff.lua"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/staffs.zip"),  -- Reuse staff animation\n    Asset("ANIM", "anim/swap_staffs.zip"),\n    \n    Asset("IMAGE", "images/inventoryimages/magicstaff.tex"),\n    Asset("ATLAS", "images/inventoryimages/magicstaff.xml"),\n}\n\n-- Function to cast a spell when the staff is used\nlocal function onuse(inst, target, pos)\n    local owner = inst.components.inventoryitem.owner\n    if not owner or not owner.components.magicuser then\n        return false\n    end\n    \n    -- Cast the selected spell\n    local spell = inst.selected_spell or "light"\n    return owner.components.magicuser:CastSpell(spell, target, pos)\nend\n\n-- Function called when the staff is equipped\nlocal function onequip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_object", "swap_staffs", "bluestaff")\n    owner.AnimState:Show("ARM_carry")\n    owner.AnimState:Hide("ARM_normal")\n    \n    -- Add a light when equipped\n    if inst.components.lighttweener == nil then\n        inst:AddComponent("lighttweener")\n        inst.components.lighttweener:StartTween(inst.entity:AddLight(), 0, 0.5, 0.5, {80/255, 120/255, 255/255}, 0, function() end)\n    end\n    \n    -- Add a custom action for cycling spells\n    if owner.components.playeractionpicker then\n        local old_DoGetMouseActions = owner.components.playeractionpicker.DoGetMouseActions\n        owner.components.playeractionpicker.DoGetMouseActions = function(self, ...)\n            local actions = old_DoGetMouseActions(self, ...)\n            \n            -- Add the cycle spell action when targeting self\n            if owner:HasTag("player") and owner.components.magicuser then\n                table.insert(actions, ACTIONS.CYCLESPELL)\n            end\n            \n            return actions\n        end\n    end\nend\n\n-- Function called when the staff is unequipped\nlocal function onunequip(inst, owner)\n    owner.AnimState:Hide("ARM_carry")\n    owner.AnimState:Show("ARM_normal")\n    \n    -- Remove the light when unequipped\n    if inst.components.lighttweener then\n        inst:RemoveComponent("lighttweener")\n        inst.entity:RemoveLight()\n    end\n    \n    -- Restore original action picker\n    if owner.components.playeractionpicker then\n        owner.components.playeractionpicker.DoGetMouseActions = nil\n    end\nend\n\n-- Main function to create the magic staff\nlocal function fn()\n    -- Create the entity\n    local inst = CreateEntity()\n\n    -- Add required components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    -- Set up physics\n    MakeInventoryPhysics(inst)\n\n    -- Set up animation\n    inst.AnimState:SetBank("staffs")\n    inst.AnimState:SetBuild("staffs")\n    inst.AnimState:PlayAnimation("bluestaff")\n    \n    -- Add tags\n    inst:AddTag("magicstaff")\n    inst:AddTag("allow_action_on_impassable")\n\n    -- Make the entity pristine for networking\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add components\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "magicstaff"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/magicstaff.xml"\n\n    -- Make it usable\n    inst:AddComponent("spellcaster")\n    inst.components.spellcaster:SetSpellFn(onuse)\n    inst.components.spellcaster.canuseonpoint = true\n    inst.components.spellcaster.canuseonpoint_water = true\n    \n    -- Default spell\n    inst.selected_spell = "light"\n    \n    -- Add a function to cycle through spells\n    inst.CycleSpell = function(inst)\n        local spells = {"light", "heal"}\n        local current_index = 1\n        \n        for i, spell in ipairs(spells) do\n            if spell == inst.selected_spell then\n                current_index = i\n                break\n            end\n        end\n        \n        -- Move to next spell\n        current_index = current_index % #spells + 1\n        inst.selected_spell = spells[current_index]\n        \n        -- Announce the selected spell\n        if inst.components.inventoryitem.owner then\n            inst.components.inventoryitem.owner:PushEvent("onhighlight", {\n                text = "Selected spell: " .. inst.selected_spell,\n                time = 2\n            })\n        end\n        \n        return true\n    end\n    \n    -- Make it inspectable\n    inst:AddComponent("inspectable")\n\n    -- Make it equippable\n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(onequip)\n    inst.components.equippable:SetOnUnequip(onunequip)\n\n    return inst\nend\n\n-- Register the prefab\nreturn Prefab("magicstaff", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-7-add-a-custom-action-for-cycling-spells",children:"Step 7: Add a Custom Action for Cycling Spells"}),"\n",(0,a.jsxs)(e.p,{children:["Add this to the end of your ",(0,a.jsx)(e.code,{children:"modmain.lua"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Add a custom action for cycling spells\nlocal CYCLESPELL = Action({priority=10})\nCYCLESPELL.id = "CYCLESPELL"\nCYCLESPELL.str = "Cycle Spell"\nCYCLESPELL.fn = function(act)\n    local staff = act.doer.components.inventory:FindItem(function(item)\n        return item:HasTag("magicstaff") and item.components.equippable and item.components.equippable:IsEquipped()\n    end)\n    \n    if staff and staff.CycleSpell then\n        return staff:CycleSpell()\n    end\n    \n    return false\nend\n\nAddAction(CYCLESPELL)\n\n-- Add the action handler\nAddComponentAction("INVENTORY", "inventory", function(inst, doer, actions, right)\n    if doer:HasTag("player") and right and inst == doer then\n        local staff = doer.components.inventory:FindItem(function(item)\n            return item:HasTag("magicstaff") and item.components.equippable and item.components.equippable:IsEquipped()\n        end)\n        \n        if staff then\n            table.insert(actions, ACTIONS.CYCLESPELL)\n        end\n    end\nend)\n\n-- Add the action to the controls\nAddModRPCHandler("MagicComponent", "CycleSpell", function(player)\n    local staff = player.components.inventory:FindItem(function(item)\n        return item:HasTag("magicstaff") and item.components.equippable and item.components.equippable:IsEquipped()\n    end)\n    \n    if staff and staff.CycleSpell then\n        staff:CycleSpell()\n    end\nend)\n\n-- Add the key binding\nlocal KEY_C = 99\nTheInput:AddKeyDownHandler(KEY_C, function()\n    if ThePlayer and ThePlayer:HasTag("player") then\n        SendModRPCToServer(MOD_RPC["MagicComponent"]["CycleSpell"])\n    end\nend)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"step-8-testing-your-component",children:"Step 8: Testing Your Component"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Launch Don't Starve Together"}),"\n",(0,a.jsx)(e.li,{children:"Enable your mod in the Mods menu"}),"\n",(0,a.jsx)(e.li,{children:"Start a new game"}),"\n",(0,a.jsxs)(e.li,{children:["Test the component by:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Crafting and equipping the Magic Robe to increase mana regeneration"}),"\n",(0,a.jsx)(e.li,{children:"Crafting and equipping the Magic Staff to cast spells"}),"\n",(0,a.jsx)(e.li,{children:'Using the "C" key to cycle between spells'}),"\n",(0,a.jsx)(e.li,{children:"Casting spells with the staff"}),"\n",(0,a.jsx)(e.li,{children:"Watching your mana bar decrease and regenerate"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"extending-the-component",children:"Extending the Component"}),"\n",(0,a.jsx)(e.p,{children:"Here are some ways to enhance your magic component:"}),"\n",(0,a.jsx)(e.h3,{id:"add-more-spell-types",children:"Add More Spell Types"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Add a teleport spell\ninst.components.magicuser:LearnSpell("teleport", 50, function(caster, target, pos)\n    if caster.Physics and pos then\n        -- Create teleport effect at start position\n        local fx1 = SpawnPrefab("collapse_small")\n        fx1.Transform:SetPosition(caster.Transform:GetWorldPosition())\n        \n        -- Teleport the player\n        caster.Physics:Teleport(pos.x, pos.y, pos.z)\n        \n        -- Create teleport effect at end position\n        local fx2 = SpawnPrefab("collapse_small")\n        fx2.Transform:SetPosition(pos:Get())\n        \n        return true\n    end\n    return false\nend)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"add-spell-cooldowns",children:"Add Spell Cooldowns"}),"\n",(0,a.jsx)(e.p,{children:"Modify the magicuser component to track cooldowns:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Add to the component initialization\nself.cooldowns = {}\n\n-- Modify LearnSpell to include cooldown\nfunction MagicUser:LearnSpell(spell_name, mana_cost, cast_fn, cooldown)\n    self.known_spells[spell_name] = {\n        mana_cost = mana_cost,\n        cast_fn = cast_fn,\n        cooldown = cooldown or 0\n    }\n    \n    self.cooldowns[spell_name] = 0\n    \n    self.inst:PushEvent("magicuserlearnedspell", {spell = spell_name})\n    \n    return true\nend\n\n-- Modify CastSpell to check cooldowns\nfunction MagicUser:CastSpell(spell_name, target, position)\n    if not self:KnowsSpell(spell_name) then\n        return false, "UNKNOWN_SPELL"\n    end\n    \n    local spell = self.known_spells[spell_name]\n    \n    if self.cooldowns[spell_name] > 0 then\n        return false, "ON_COOLDOWN"\n    end\n    \n    if self.current < spell.mana_cost then\n        return false, "NOT_ENOUGH_MANA"\n    end\n    \n    -- Start casting\n    self.casting = true\n    \n    -- Use mana\n    self:DoDelta(-spell.mana_cost)\n    \n    -- Set cooldown\n    if spell.cooldown > 0 then\n        self.cooldowns[spell_name] = spell.cooldown\n        \n        -- Start cooldown timer\n        self.inst:DoTaskInTime(1, function()\n            self:UpdateCooldowns()\n        end)\n    end\n    \n    -- Rest of the function...\nend\n\n-- Add cooldown update function\nfunction MagicUser:UpdateCooldowns()\n    local any_active = false\n    \n    for spell_name, time in pairs(self.cooldowns) do\n        if time > 0 then\n            self.cooldowns[spell_name] = time - 1\n            any_active = true\n        end\n    end\n    \n    if any_active then\n        self.inst:DoTaskInTime(1, function()\n            self:UpdateCooldowns()\n        end)\n    end\nend\n'})}),"\n",(0,a.jsx)(e.h3,{id:"add-spell-experience-and-leveling",children:"Add Spell Experience and Leveling"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Add to component initialization\nself.spell_experience = {}\nself.spell_levels = {}\n\n-- Add after successful spell cast\nif success then\n    -- Add experience for the spell\n    if not self.spell_experience[spell_name] then\n        self.spell_experience[spell_name] = 0\n        self.spell_levels[spell_name] = 1\n    end\n    \n    self.spell_experience[spell_name] = self.spell_experience[spell_name] + 1\n    \n    -- Check for level up\n    local xp_needed = self.spell_levels[spell_name] * 5\n    if self.spell_experience[spell_name] >= xp_needed then\n        self.spell_levels[spell_name] = self.spell_levels[spell_name] + 1\n        self.spell_experience[spell_name] = 0\n        \n        -- Spell got more powerful\n        self.inst:PushEvent("magicuserspelllevelup", {\n            spell = spell_name,\n            level = self.spell_levels[spell_name]\n        })\n    end\nend\n'})}),"\n",(0,a.jsx)(e.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,a.jsx)(e.h3,{id:"problem-component-not-being-added-to-players",children:"Problem: Component not being added to players"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Solution"}),": Make sure you're using AddPlayerPostInit correctly and check for errors in the component initialization"]}),"\n",(0,a.jsx)(e.h3,{id:"problem-mana-bar-not-showing-up",children:"Problem: Mana bar not showing up"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Solution"}),": Check that you've properly added the badge to the status displays and connected it to the component"]}),"\n",(0,a.jsx)(e.h3,{id:"problem-spells-not-casting",children:"Problem: Spells not casting"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Solution"}),": Verify that the spell functions are set up correctly and the conditions for casting are met"]}),"\n",(0,a.jsx)(e.h3,{id:"problem-errors-when-equippingunequipping-items",children:"Problem: Errors when equipping/unequipping items"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Solution"}),": Add error checking to your equip/unequip functions:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:"local function onequip(inst, owner)\n    if not owner or not owner.AnimState then\n        return\n    end\n    \n    -- Rest of the function...\nend\n"})}),"\n",(0,a.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(e.p,{children:"Now that you've created a custom component, you can:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Create More Spells"}),": Add a variety of spell effects for different situations"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Add Magic Classes"}),": Create different magic specializations with unique spells"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Create Magic Monsters"}),": Add enemies that use your magic component"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Add Magic Structures"}),": Create buildings that interact with the magic system"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Create a Magic Skill Tree"}),": Develop a progression system for learning new spells"]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["For more advanced component creation, check out the ",(0,a.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/component-system",children:"Component System"})," documentation to learn about the component lifecycle and networking."]})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>l});var s=t(6540);const a={},i=s.createContext(a);function o(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);