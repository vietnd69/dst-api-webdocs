"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5617],{4375:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"api-vanilla/data-types/vector","title":"Vector","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/data-types/vector.md","sourceDirName":"api-vanilla/data-types","slug":"/api-vanilla/data-types/vector","permalink":"/dst-api-webdocs/docs/api-vanilla/data-types/vector","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"vector","title":"Vector","sidebar_position":2,"last_updated":"2023-07-06T00:00:00.000Z"}}');var i=t(4848),s=t(8453);const r={id:"vector",title:"Vector",sidebar_position:2,last_updated:new Date("2023-07-06T00:00:00.000Z")},a="Vector",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Properties",id:"properties",level:2},{value:"Creating Vectors",id:"creating-vectors",level:2},{value:"Common Methods",id:"common-methods",level:2},{value:"Vector3 Methods",id:"vector3-methods",level:3},{value:"Arithmetic Operations",id:"arithmetic-operations",level:2},{value:"Common Usage Examples",id:"common-usage-examples",level:2},{value:"Movement and Positioning",id:"movement-and-positioning",level:3},{value:"Direction and Angle Calculations",id:"direction-and-angle-calculations",level:3},{value:"Notes",id:"notes",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"vector",children:"Vector"})}),"\n",(0,i.jsx)(n.p,{children:"Vector is a data type representing 2D or 3D vectors in space, used for positions, directions, and physics calculations."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"In Don't Starve Together, Vector objects are used extensively to represent:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Positions in the world"}),"\n",(0,i.jsx)(n.li,{children:"Directions for movement"}),"\n",(0,i.jsx)(n.li,{children:"Velocities for physics"}),"\n",(0,i.jsx)(n.li,{children:"Offsets for UI elements"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The game primarily uses Vector3 for 3D coordinates, although most gameplay operates on a 2D plane where the Y axis represents height."}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.p,{children:"Vector objects have the following properties:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"x"}),": The x-coordinate (horizontal position)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"y"}),": The y-coordinate (height, usually 0 in normal gameplay)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"z"}),": The z-coordinate (equivalent to the vertical position in a top-down view)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"creating-vectors",children:"Creating Vectors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Create a new Vector\nlocal position = Vector3(10, 0, 5)  -- x=10, y=0, z=5\n\n-- Create a zero vector\nlocal zeroVector = Vector3(0, 0, 0)\n\n-- Create a vector from another vector (copying)\nlocal copyVector = Vector3(position.x, position.y, position.z)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-methods",children:"Common Methods"}),"\n",(0,i.jsx)(n.h3,{id:"vector3-methods",children:"Vector3 Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get the length (magnitude) of the vector\nlocal length = vector:Length()\n\n-- Get the squared length (faster than Length() when only comparing distances)\nlocal sqrLength = vector:LengthSq()\n\n-- Normalize a vector (make it unit length)\nlocal normalized = vector:Normalize()\n\n-- Get the distance between two points\nlocal distance = vector1:Dist(vector2)\n\n-- Get the squared distance between two points (faster)\nlocal sqrDistance = vector1:DistSq(vector2)\n\n-- Dot product of two vectors\nlocal dotProduct = vector1:Dot(vector2)\n\n-- Cross product of two vectors\nlocal crossProduct = vector1:Cross(vector2)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"arithmetic-operations",children:"Arithmetic Operations"}),"\n",(0,i.jsx)(n.p,{children:"Vectors support standard arithmetic operations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Addition\nlocal sum = vector1 + vector2\n\n-- Subtraction\nlocal difference = vector1 - vector2\n\n-- Multiplication by scalar\nlocal scaled = vector * 2.5\n\n-- Division by scalar\nlocal reduced = vector / 2.0\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-usage-examples",children:"Common Usage Examples"}),"\n",(0,i.jsx)(n.h3,{id:"movement-and-positioning",children:"Movement and Positioning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Move an entity toward a target\nlocal direction = (target_pos - current_pos):Normalize()\nlocal new_pos = current_pos + direction * speed * dt\n\ninst.Transform:SetPosition(new_pos.x, new_pos.y, new_pos.z)\n\n-- Find an entity's position\nlocal pos = inst:GetPosition()\n\n-- Find nearby entities\nlocal ents = TheSim:FindEntities(pos.x, pos.y, pos.z, radius)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"direction-and-angle-calculations",children:"Direction and Angle Calculations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Get direction from one entity to another\nlocal dir = target:GetPosition() - inst:GetPosition()\ndir:Normalize()\n\n-- Calculate angle from direction vector\nlocal angle = math.atan2(dir.z, dir.x) * RADIANS\n\n-- Set entity facing based on angle\ninst.Transform:SetRotation(angle)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'In DST, Y is generally the "up" axis, but most gameplay takes place on the X-Z plane'}),"\n",(0,i.jsx)(n.li,{children:"The coordinate system is right-handed"}),"\n",(0,i.jsx)(n.li,{children:"Vector calculations can be performance-intensive, so consider using squared distances when possible"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);