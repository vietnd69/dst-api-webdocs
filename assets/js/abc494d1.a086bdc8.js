"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2749],{28453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>l});var r=n(96540);const a={},t=r.createContext(a);function d(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(t.Provider,{value:s},e.children)}},54265:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"game-scripts/core-systems/character-systems/core/playerdeaths","title":"PlayerDeaths","description":"System for tracking and managing player death records and statistics","source":"@site/docs/game-scripts/core-systems/character-systems/core/playerdeaths.md","sourceDirName":"game-scripts/core-systems/character-systems/core","slug":"/game-scripts/core-systems/character-systems/core/playerdeaths","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerdeaths","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"playerdeaths","title":"PlayerDeaths","description":"System for tracking and managing player death records and statistics","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"CharacterUtil","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/characterutil"},"next":{"title":"PlayerHistory","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerhistory"}}');var a=n(74848),t=n(28453);const d={id:"playerdeaths",title:"PlayerDeaths",description:"System for tracking and managing player death records and statistics",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="PlayerDeaths",i={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Class Methods",id:"class-methods",level:2},{value:"PlayerDeaths()",id:"playerdeaths-constructor",level:3},{value:"deaths()",id:"reset",level:3},{value:"deaths(row)",id:"ondeath",level:3},{value:"deaths()",id:"getrows",level:3},{value:"deaths(field)",id:"sort",level:3},{value:"deaths()",id:"getsavename",level:3},{value:"deaths(callback)",id:"save",level:3},{value:"deaths(callback)",id:"load",level:3},{value:"deaths(str, callback)",id:"set",level:3},{value:"Properties",id:"properties",level:2},{value:"deaths.persistdata",id:"persistdata",level:3},{value:"deaths.dirty",id:"dirty",level:3},{value:"deaths.sort_function",id:"sort-function",level:3},{value:"Storage Format",id:"storage-format",level:2},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Recording Multiple Deaths",id:"recording-multiple-deaths",level:3},{value:"Analyzing Death Statistics",id:"analyzing-death-statistics",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"playerdeaths",children:"PlayerDeaths"})}),"\n",(0,a.jsx)(s.h2,{id:"version-history",children:"Version History"}),"\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Build Version"}),(0,a.jsx)(s.th,{children:"Change Date"}),(0,a.jsx)(s.th,{children:"Change Type"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsx)(s.tbody,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"676042"}),(0,a.jsx)(s.td,{children:"2025-06-21"}),(0,a.jsx)(s.td,{children:"stable"}),(0,a.jsx)(s.td,{children:"Current version"})]})})]}),"\n",(0,a.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"PlayerDeaths"})," class provides a system for tracking and managing player death records. It maintains a persistent database of player deaths, including information such as days survived, cause of death, and killer details. The system automatically manages storage limits and provides sorting capabilities for death records."]}),"\n",(0,a.jsx)(s.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Create a new PlayerDeaths instance\nlocal deaths = PlayerDeaths()\n\n-- Record a player death\nlocal death_data = {\n    days_survived = 25,\n    killed_by = "Spider Warrior",\n    character = "wilson",\n    pk = true\n}\ndeaths:OnDeath(death_data)\n\n-- Get all death records\nlocal death_records = deaths:GetRows()\n'})}),"\n",(0,a.jsx)(s.h2,{id:"class-methods",children:"Class Methods"}),"\n",(0,a.jsx)(s.h3,{id:"playerdeaths-constructor",children:"PlayerDeaths()"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nCreates a new PlayerDeaths instance with initialized persistent data storage and default sorting configuration."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"(PlayerDeaths): New PlayerDeaths instance"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:"local deaths = PlayerDeaths()\n"})}),"\n",(0,a.jsxs)(s.h3,{id:"reset",children:["deaths",":Reset","()"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nClears all stored death records and saves the empty data to persistent storage."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:"deaths:Reset()\n-- All death records are now cleared\n"})}),"\n",(0,a.jsxs)(s.h3,{id:"ondeath",children:["deaths",":OnDeath","(row)"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nRecords a new player death event. On Xbox One, automatically attempts to resolve killer network IDs for PvP deaths."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"row"})," (table): Death record data containing information about the death event"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Death Record Structure:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"days_survived"})," (number): Number of days the player survived"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"killed_by"})," (string): Name or description of what killed the player"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"character"})," (string): Character prefab name"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"pk"})," (boolean): Whether this was a player kill"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"netid"})," (string): Network ID of killer (set automatically on XB1)"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'local death_record = {\n    days_survived = 42,\n    killed_by = "Deerclops",\n    character = "wendy",\n    pk = false\n}\ndeaths:OnDeath(death_record)\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"getrows",children:["deaths",":GetRows","()"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nReturns all stored death records in their current sorted order."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"(table): Array of death record tables"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'local all_deaths = deaths:GetRows()\nfor i, death in ipairs(all_deaths) do\n    print("Death", i, "Days survived:", death.days_survived)\nend\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"sort",children:["deaths",":Sort","(field)"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nSorts death records by the specified field. Automatically determines sort order based on field type (string vs number)."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"field"})," (string, optional): Field name to sort by. If nil, uses default sorting by days_survived"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Sorting Behavior:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"String fields"}),": Sorted alphabetically (ascending)"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Number fields"}),": Sorted numerically (descending)"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Default"}),": Sorts by ",(0,a.jsx)(s.code,{children:"days_survived"})," in descending order"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Sort by days survived (default)\ndeaths:Sort()\n\n-- Sort by character name\ndeaths:Sort("character")\n\n-- Sort by killer name\ndeaths:Sort("killed_by")\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"getsavename",children:["deaths",":GetSaveName","()"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nReturns the filename used for persistent storage. Uses different names for development and release branches."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:'(string): Save file name ("morgue" for release, "morgue_dev" for development)'}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'local save_name = deaths:GetSaveName()\n-- Returns "morgue" or "morgue_dev" depending on BRANCH\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"save",children:["deaths",":Save","(callback)"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nSaves death records to persistent storage. Automatically sorts records and enforces the 40-record limit before saving."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"callback"})," (function, optional): Function called after save completion with success status"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Storage Management:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Records are sorted before saving"}),"\n",(0,a.jsx)(s.li,{children:"Maximum of 40 records are kept (oldest removed if exceeded)"}),"\n",(0,a.jsx)(s.li,{children:"Only saves if data has been modified (dirty flag)"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'-- Save with callback\ndeaths:Save(function(success)\n    if success then\n        print("Death records saved successfully")\n    else\n        print("Failed to save death records")\n    end\nend)\n\n-- Save without callback\ndeaths:Save()\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"load",children:["deaths",":Load","(callback)"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nLoads death records from persistent storage."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"callback"})," (function, optional): Function called after load completion with success status"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'deaths:Load(function(success)\n    if success then\n        print("Death records loaded successfully")\n        local records = deaths:GetRows()\n        print("Loaded", #records, "death records")\n    else\n        print("Failed to load death records")\n    end\nend)\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"set",children:["deaths",":Set","(str, callback)"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Status:"})," ",(0,a.jsx)(s.code,{children:"stable"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"}),"\nSets death records from a JSON string. Used internally by the Load system."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"str"})," (string): JSON-encoded death records data"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"callback"})," (function, optional): Function called after processing with success status"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Example:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:"-- This is typically used internally\nlocal json_data = '[]' -- Empty death records\ndeaths:Set(json_data, function(success)\n    print(\"Set operation completed:\", success)\nend)\n"})}),"\n",(0,a.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(s.h3,{id:"persistdata",children:"deaths.persistdata"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Type:"})," ",(0,a.jsx)(s.code,{children:"table"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"})," Array containing all death record entries"]}),"\n",(0,a.jsx)(s.h3,{id:"dirty",children:"deaths.dirty"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Type:"})," ",(0,a.jsx)(s.code,{children:"boolean"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"})," Flag indicating whether data has been modified and needs saving"]}),"\n",(0,a.jsx)(s.h3,{id:"sort-function",children:"deaths.sort_function"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Type:"})," ",(0,a.jsx)(s.code,{children:"function"})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Description:"})," Default sorting function that sorts by days_survived in descending order"]}),"\n",(0,a.jsx)(s.h2,{id:"storage-format",children:"Storage Format"}),"\n",(0,a.jsx)(s.p,{children:"Death records are stored as JSON arrays with the following structure:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'{\n    {\n        days_survived = 25,\n        killed_by = "Spider Warrior",\n        character = "wilson",\n        pk = false\n    },\n    {\n        days_survived = 42,\n        killed_by = "Deerclops", \n        character = "wendy",\n        pk = false,\n        netid = "12345" -- On Xbox One for PvP deaths\n    }\n}\n'})}),"\n",(0,a.jsx)(s.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,a.jsx)(s.h3,{id:"recording-multiple-deaths",children:"Recording Multiple Deaths"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'local deaths = PlayerDeaths()\n\n-- Record various death events\ndeaths:OnDeath({days_survived = 10, killed_by = "Hounds", character = "wilson"})\ndeaths:OnDeath({days_survived = 25, killed_by = "Deerclops", character = "wendy"})\ndeaths:OnDeath({days_survived = 5, killed_by = "Starvation", character = "wickerbottom"})\n\n-- Get sorted records (by days survived, descending)\nlocal records = deaths:GetRows()\n'})}),"\n",(0,a.jsx)(s.h3,{id:"analyzing-death-statistics",children:"Analyzing Death Statistics"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-lua",children:'local deaths = PlayerDeaths()\ndeaths:Load(function(success)\n    if success then\n        local records = deaths:GetRows()\n        \n        -- Find best survival record\n        local best_survival = records[1] -- Already sorted by days_survived desc\n        print("Best survival:", best_survival.days_survived, "days")\n        \n        -- Count deaths by character\n        local character_deaths = {}\n        for _, death in ipairs(records) do\n            character_deaths[death.character] = (character_deaths[death.character] or 0) + 1\n        end\n    end\nend)\n'})}),"\n",(0,a.jsx)(s.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerhistory",children:"PlayerHistory"}),": Tracks players encountered during gameplay"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/core/playerprofile",children:"PlayerProfile"}),": Manages player preferences and customization data"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);