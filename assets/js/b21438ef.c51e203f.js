"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9308],{5744:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api-vanilla/node-types/decorator-nodes","title":"Decorator Nodes","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/node-types/decorator-nodes.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/decorator-nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/decorator-nodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"decorator-nodes","title":"Decorator Nodes","sidebar_position":4,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Condition Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes"},"next":{"title":"Priority Nodes","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes"}}');var t=o(4848),i=o(8453);const r={id:"decorator-nodes",title:"Decorator Nodes",sidebar_position:4,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},d="Decorator Nodes",c={},l=[{value:"Decorator Node properties and methods",id:"decorator-node-properties-and-methods",level:2},{value:"Properties",id:"properties",level:2},{value:"inst: <code>Entity</code> <code>[readonly]</code>",id:"inst-entity-readonly",level:3},{value:"child: <code>BehaviorNode</code> <code>[readonly]</code>",id:"child-behaviornode-readonly",level:3},{value:"status: &#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39; <code>[readonly]</code>",id:"status-ready--running--success--failure-readonly",level:3},{value:"Methods",id:"methods",level:2},{value:"Visit(): &#39;READY&#39; | &#39;RUNNING&#39; | &#39;SUCCESS&#39; | &#39;FAILURE&#39;",id:"visit-ready--running--success--failure",level:3},{value:"Stop(): void",id:"stop-void",level:3},{value:"Reset(): void",id:"reset-void",level:3},{value:"Built-in Decorator Node Types",id:"built-in-decorator-node-types",level:2},{value:"NotDecorator(inst: <code>Entity</code>, child: <code>BehaviorNode</code>): <code>DecoratorNode</code>",id:"notdecoratorinst-entity-child-behaviornode-decoratornode",level:3},{value:"FailIfRunningDecorator(inst: <code>Entity</code>, child: <code>BehaviorNode</code>): <code>DecoratorNode</code>",id:"failifrunningdecoratorinst-entity-child-behaviornode-decoratornode",level:3},{value:"SuccessIfRunningDecorator(inst: <code>Entity</code>, child: <code>BehaviorNode</code>): <code>DecoratorNode</code>",id:"successifrunningdecoratorinst-entity-child-behaviornode-decoratornode",level:3},{value:"LoopDecorator(inst: <code>Entity</code>, child: <code>BehaviorNode</code>, max_loops?: <code>number</code>): <code>DecoratorNode</code>",id:"loopdecoratorinst-entity-child-behaviornode-max_loops-number-decoratornode",level:3},{value:"WhileNode(inst: <code>Entity</code>, cond_fn: <code>Function</code>, child: <code>BehaviorNode</code>): <code>DecoratorNode</code>",id:"whilenodeinst-entity-cond_fn-function-child-behaviornode-decoratornode",level:3},{value:"RandomNode(nodes: <code>Array&lt;{chance: number, node: BehaviorNode}&gt;</code>): <code>DecoratorNode</code>",id:"randomnodenodes-arraychance-number-node-behaviornode-decoratornode",level:3},{value:"Common Decorator Patterns",id:"common-decorator-patterns",level:2},{value:"Timers and Cooldowns",id:"timers-and-cooldowns",level:3},{value:"Condition Limiters",id:"condition-limiters",level:3},{value:"Retry Mechanics",id:"retry-mechanics",level:3},{value:"Creating Custom Decorator Nodes",id:"creating-custom-decorator-nodes",level:2},{value:"1. Derive from BehaviorNode",id:"1-derive-from-behaviornode",level:3},{value:"2. Implement Visit function",id:"2-implement-visit-function",level:3},{value:"3. Implement Stop and Reset functions",id:"3-implement-stop-and-reset-functions",level:3},{value:"Example: Probability Decorator",id:"example-probability-decorator",level:2},{value:"Example: Tracking Decorator",id:"example-tracking-decorator",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"See also",id:"see-also",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"decorator-nodes",children:"Decorator Nodes"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"API Version: 619045"})}),"\n",(0,t.jsx)(n.p,{children:"Decorator Nodes are specialized behavior tree nodes that modify the behavior of other nodes. They typically wrap a single child node and either change its execution behavior, modify its return value, or control when and how it runs. Decorator nodes are a powerful tool for creating complex behaviors without needing to create entirely new node types."}),"\n",(0,t.jsx)(n.h2,{id:"decorator-node-properties-and-methods",children:"Decorator Node properties and methods"}),"\n",(0,t.jsx)(n.p,{children:"Decorator Nodes provide the following key properties and methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Properties"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inst"})," - Reference to the entity this node controls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"child"})," - The behavior node being decorated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"status"})," - Current execution status of the node"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Methods"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Visit()"})," - Evaluates the decorator and its child node"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Stop()"})," - Stops execution of this node and its child"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Reset()"})," - Resets this node and its child to READY state"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.h3,{id:"inst-entity-readonly",children:["inst: ",(0,t.jsx)(n.code,{children:"Entity"})," ",(0,t.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,t.jsx)(n.p,{children:"A reference to the entity that this decorator node is controlling."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Access the decorator node's entity\nlocal health = decorator_node.inst.components.health\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"child-behaviornode-readonly",children:["child: ",(0,t.jsx)(n.code,{children:"BehaviorNode"})," ",(0,t.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,t.jsx)(n.p,{children:"The behavior node that this decorator is modifying."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Create a decorator node with a child\nlocal decorator_node = NotDecorator(inst, Wander(inst))\n\n-- Access the child node\nlocal child_node = decorator_node.child\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"status-ready--running--success--failure-readonly",children:["status: 'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE' ",(0,t.jsx)(n.code,{children:"[readonly]"})]}),"\n",(0,t.jsx)(n.p,{children:"The current execution status of the decorator node:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"READY"}),": Node is ready to begin execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RUNNING"}),": Node is currently executing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SUCCESS"}),": Node has completed successfully"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"FAILURE"}),": Node has failed to complete"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check the current status\nif decorator_node.status == SUCCESS then\n    print("Decorator node completed successfully")\nelseif decorator_node.status == FAILURE then\n    print("Decorator node failed")\nend\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"visit-ready--running--success--failure",children:"Visit(): 'READY' | 'RUNNING' | 'SUCCESS' | 'FAILURE'"}),"\n",(0,t.jsx)(n.p,{children:"Evaluates the decorator node and its child. The specific behavior depends on the type of decorator."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function DecoratorNode:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n        self.child:Start()\n    end\n    \n    if self.status == RUNNING then\n        local status = self.child:Visit()\n        \n        -- Decorator-specific logic here\n        -- This is where the decorator modifies the child's behavior\n        \n        if status ~= RUNNING then\n            self.status = self:ProcessChildResult(status)\n        end\n    end\n    \n    return self.status\nend\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"stop-void",children:"Stop(): void"}),"\n",(0,t.jsx)(n.p,{children:"Stops execution of this decorator node and its child."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function DecoratorNode:Stop()\n    self.child:Stop()\n    self.status = READY\nend\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"reset-void",children:"Reset(): void"}),"\n",(0,t.jsx)(n.p,{children:"Resets the decorator node and its child to READY state."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function DecoratorNode:Reset()\n    self.child:Reset()\n    self.status = READY\nend\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"built-in-decorator-node-types",children:"Built-in Decorator Node Types"}),"\n",(0,t.jsx)(n.p,{children:"Don't Starve Together includes several pre-defined decorator node types:"}),"\n",(0,t.jsxs)(n.h3,{id:"notdecoratorinst-entity-child-behaviornode-decoratornode",children:["NotDecorator(inst: ",(0,t.jsx)(n.code,{children:"Entity"}),", child: ",(0,t.jsx)(n.code,{children:"BehaviorNode"}),"): ",(0,t.jsx)(n.code,{children:"DecoratorNode"})]}),"\n",(0,t.jsx)(n.p,{children:"Inverts the result of its child node - SUCCESS becomes FAILURE and vice versa."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"inst"}),": Entity the node controls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"child"}),": The behavior node to invert"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Invert a condition result\nlocal node = NotDecorator(inst, \n    ConditionNode(function() return inst.components.hunger:GetPercent() < 0.5 end)\n)\n-- Now succeeds when hunger is >= 50% instead of < 50%\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"failifrunningdecoratorinst-entity-child-behaviornode-decoratornode",children:["FailIfRunningDecorator(inst: ",(0,t.jsx)(n.code,{children:"Entity"}),", child: ",(0,t.jsx)(n.code,{children:"BehaviorNode"}),"): ",(0,t.jsx)(n.code,{children:"DecoratorNode"})]}),"\n",(0,t.jsx)(n.p,{children:"Converts RUNNING status to FAILURE, useful for nodes that need immediate results."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"inst"}),": Entity the node controls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"child"}),": The behavior node to modify"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Fail immediately if can't complete in one step\nlocal node = FailIfRunningDecorator(inst, \n    FindFood(inst)\n)\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"successifrunningdecoratorinst-entity-child-behaviornode-decoratornode",children:["SuccessIfRunningDecorator(inst: ",(0,t.jsx)(n.code,{children:"Entity"}),", child: ",(0,t.jsx)(n.code,{children:"BehaviorNode"}),"): ",(0,t.jsx)(n.code,{children:"DecoratorNode"})]}),"\n",(0,t.jsx)(n.p,{children:"Converts RUNNING status to SUCCESS, useful for fire-and-forget behaviors."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"inst"}),": Entity the node controls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"child"}),": The behavior node to modify"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Consider it a success as soon as it starts\nlocal node = SuccessIfRunningDecorator(inst, \n    ChaseAndAttack(inst, 10)\n)\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"loopdecoratorinst-entity-child-behaviornode-max_loops-number-decoratornode",children:["LoopDecorator(inst: ",(0,t.jsx)(n.code,{children:"Entity"}),", child: ",(0,t.jsx)(n.code,{children:"BehaviorNode"}),", max_loops?: ",(0,t.jsx)(n.code,{children:"number"}),"): ",(0,t.jsx)(n.code,{children:"DecoratorNode"})]}),"\n",(0,t.jsx)(n.p,{children:"Repeatedly executes its child node until it fails or reaches the maximum loop count."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"inst"}),": Entity the node controls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"child"}),": The behavior node to loop"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"max_loops"}),": (Optional) Maximum number of times to loop"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Repeat an action up to 5 times\nlocal node = LoopDecorator(inst, \n    DoAction(inst, function() \n        -- Do something\n        return true\n    end),\n    5 -- Maximum 5 loops\n)\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"whilenodeinst-entity-cond_fn-function-child-behaviornode-decoratornode",children:["WhileNode(inst: ",(0,t.jsx)(n.code,{children:"Entity"}),", cond_fn: ",(0,t.jsx)(n.code,{children:"Function"}),", child: ",(0,t.jsx)(n.code,{children:"BehaviorNode"}),"): ",(0,t.jsx)(n.code,{children:"DecoratorNode"})]}),"\n",(0,t.jsx)(n.p,{children:"Executes its child node repeatedly as long as a condition function returns true."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"inst"}),": Entity the node controls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"cond_fn"}),": Condition function that returns true/false"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"child"}),": The behavior node to execute while condition is true"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Keep eating food while hungry\nlocal node = WhileNode(inst, \n    function() return inst.components.hunger:GetPercent() < 0.9 end,\n    EatFood(inst)\n)\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"randomnodenodes-arraychance-number-node-behaviornode-decoratornode",children:["RandomNode(nodes: ",(0,t.jsx)(n.code,{children:"Array<{chance: number, node: BehaviorNode}>"}),"): ",(0,t.jsx)(n.code,{children:"DecoratorNode"})]}),"\n",(0,t.jsx)(n.p,{children:"Randomly selects from its children nodes, based on weighted probabilities."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"nodes"}),": Array of objects with chance (weight) and node properties"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Random behavior selection\nlocal node = RandomNode(\n    {0.6, Wander(inst)},\n    {0.3, DoAction(inst, EatFood)},\n    {0.1, RunAway(inst, "character", 5, 8)}\n)\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"common-decorator-patterns",children:"Common Decorator Patterns"}),"\n",(0,t.jsx)(n.p,{children:"Here are some common ways to use decorator nodes in Don't Starve Together AI:"}),"\n",(0,t.jsx)(n.h3,{id:"timers-and-cooldowns",children:"Timers and Cooldowns"}),"\n",(0,t.jsx)(n.p,{children:"A decorator that only executes its child after a cooldown period:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Run a behavior only every X seconds\nlocal TimerDecorator = Class(BehaviorNode, function(self, inst, child, cooldown_time)\n    BehaviorNode._ctor(self, "TimerDecorator")\n    self.inst = inst\n    self.child = child\n    self.cooldown_time = cooldown_time\n    self.last_execution = 0\nend)\n\nfunction TimerDecorator:Visit()\n    if self.status == READY then\n        -- Check if cooldown has passed\n        if (GetTime() - self.last_execution) >= self.cooldown_time then\n            self.status = RUNNING\n            self.child:Start()\n        else\n            self.status = FAILURE\n            return self.status\n        end\n    end\n    \n    if self.status == RUNNING then\n        local status = self.child:Visit()\n        \n        if status ~= RUNNING then\n            self.last_execution = GetTime()\n            self.status = status\n        end\n    end\n    \n    return self.status\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"condition-limiters",children:"Condition Limiters"}),"\n",(0,t.jsx)(n.p,{children:"A decorator that only executes its child if a condition is met:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Only execute child node if condition is true\nlocal ConditionalDecorator = Class(BehaviorNode, function(self, inst, child, cond_fn)\n    BehaviorNode._ctor(self, "ConditionalDecorator")\n    self.inst = inst\n    self.child = child\n    self.cond_fn = cond_fn\nend)\n\nfunction ConditionalDecorator:Visit()\n    if self.status == READY then\n        if self.cond_fn(self.inst) then\n            self.status = RUNNING\n            self.child:Start()\n        else\n            self.status = FAILURE\n            return self.status\n        end\n    end\n    \n    if self.status == RUNNING then\n        local status = self.child:Visit()\n        \n        if status ~= RUNNING then\n            self.status = status\n        end\n    end\n    \n    return self.status\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"retry-mechanics",children:"Retry Mechanics"}),"\n",(0,t.jsx)(n.p,{children:"A decorator that retries its child multiple times until success:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Try the child node multiple times until success\nlocal RetryDecorator = Class(BehaviorNode, function(self, inst, child, max_attempts)\n    BehaviorNode._ctor(self, "RetryDecorator")\n    self.inst = inst\n    self.child = child\n    self.max_attempts = max_attempts\n    self.attempts = 0\nend)\n\nfunction RetryDecorator:Visit()\n    if self.status == READY then\n        self.attempts = 0\n        self.status = RUNNING\n    end\n    \n    if self.status == RUNNING then\n        if self.attempts >= self.max_attempts then\n            self.status = FAILURE\n            return self.status\n        end\n        \n        if self.child.status ~= RUNNING then\n            self.child:Start()\n        end\n        \n        local status = self.child:Visit()\n        \n        if status == SUCCESS then\n            self.status = SUCCESS\n        elseif status == FAILURE then\n            self.attempts = self.attempts + 1\n            self.child:Stop()\n            -- Let it try again in the next Visit\n        end\n    end\n    \n    return self.status\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"creating-custom-decorator-nodes",children:"Creating Custom Decorator Nodes"}),"\n",(0,t.jsx)(n.p,{children:"To create a custom decorator node:"}),"\n",(0,t.jsx)(n.h3,{id:"1-derive-from-behaviornode",children:"1. Derive from BehaviorNode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local CustomDecorator = Class(BehaviorNode, function(self, inst, child, ...)\n    BehaviorNode._ctor(self, "CustomDecorator")\n    self.inst = inst\n    self.child = child\n    -- Store other parameters\nend)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-implement-visit-function",children:"2. Implement Visit function"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function CustomDecorator:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n        self.child:Start()\n    end\n    \n    if self.status == RUNNING then\n        local status = self.child:Visit()\n        \n        -- Here is where you implement your decorator logic\n        -- to modify the behavior of the child node\n        \n        if status ~= RUNNING then\n            -- Handle completion\n            self.status = self:ProcessChildResult(status)\n        end\n    end\n    \n    return self.status\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-implement-stop-and-reset-functions",children:"3. Implement Stop and Reset functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function CustomDecorator:Stop()\n    self.child:Stop()\n    self.status = READY\nend\n\nfunction CustomDecorator:Reset()\n    self.child:Reset()\n    self.status = READY\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example-probability-decorator",children:"Example: Probability Decorator"}),"\n",(0,t.jsx)(n.p,{children:"A decorator that has a percentage chance of executing its child node:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local ProbabilityDecorator = Class(BehaviorNode, function(self, inst, child, chance)\n    BehaviorNode._ctor(self, "ProbabilityDecorator")\n    self.inst = inst\n    self.child = child\n    self.chance = math.clamp(chance, 0, 1) -- Probability between 0 and 1\nend)\n\nfunction ProbabilityDecorator:Visit()\n    if self.status == READY then\n        if math.random() <= self.chance then\n            self.status = RUNNING\n            self.child:Start()\n        else\n            self.status = FAILURE\n            return self.status\n        end\n    end\n    \n    if self.status == RUNNING then\n        local status = self.child:Visit()\n        \n        if status ~= RUNNING then\n            self.status = status\n        end\n    end\n    \n    return self.status\nend\n\nfunction ProbabilityDecorator:Stop()\n    self.child:Stop()\n    self.status = READY\nend\n\n-- Usage example\nlocal behavior = PriorityNode(\n{\n    -- 50% chance to run away when health is low\n    ProbabilityDecorator(\n        IfNode(function() return inst.components.health:GetPercent() < 0.3 end,\n            RunAway(inst, "character", 5, 8)\n        ),\n        0.5\n    ),\n    -- Default behavior\n    Wander(inst)\n}, 0.5)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"example-tracking-decorator",children:"Example: Tracking Decorator"}),"\n",(0,t.jsx)(n.p,{children:"A decorator that logs success/failure statistics:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local TrackingDecorator = Class(BehaviorNode, function(self, inst, child, name)\n    BehaviorNode._ctor(self, "TrackingDecorator")\n    self.inst = inst\n    self.child = child\n    self.name = name or "unnamed"\n    self.success_count = 0\n    self.failure_count = 0\n    self.last_status = nil\nend)\n\nfunction TrackingDecorator:Visit()\n    if self.status == READY then\n        self.status = RUNNING\n        self.child:Start()\n    end\n    \n    if self.status == RUNNING then\n        local status = self.child:Visit()\n        \n        if status ~= RUNNING then\n            if status == SUCCESS then\n                self.success_count = self.success_count + 1\n            elseif status == FAILURE then\n                self.failure_count = self.failure_count + 1\n            end\n            \n            self.last_status = status\n            self.status = status\n            \n            -- Log statistics\n            print(string.format("[%s] Success: %d, Failure: %d, Last Status: %s", \n                self.name, self.success_count, self.failure_count, \n                status == SUCCESS and "SUCCESS" or "FAILURE"))\n        end\n    end\n    \n    return self.status\nend\n\nfunction TrackingDecorator:GetStats()\n    return {\n        name = self.name,\n        success = self.success_count,\n        failure = self.failure_count,\n        total = self.success_count + self.failure_count,\n        success_rate = self.success_count / \n            (self.success_count + self.failure_count > 0 and \n             (self.success_count + self.failure_count) or 1)\n    }\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Decorator nodes add an extra layer of function calls, so use them judiciously"}),"\n",(0,t.jsx)(n.li,{children:"Prefer built-in decorator nodes when available for better performance"}),"\n",(0,t.jsx)(n.li,{children:"Consider consolidating multiple decorators into a single custom decorator when possible"}),"\n",(0,t.jsx)(n.li,{children:"Avoid deeply nested chains of decorators if performance is critical"}),"\n",(0,t.jsx)(n.li,{children:"Use tracking decorators during development but remove them for production"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/brain",children:"Brain"})," - For brain implementation using behavior trees"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/action-nodes",children:"Action Nodes"})," - For nodes that perform actions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/priority-nodes",children:"Priority Nodes"})," - For selecting between different actions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/condition-nodes",children:"Condition Nodes"})," - For conditional execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/node-types/sequence-nodes",children:"Sequence Nodes"})," - For executing actions in sequence"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var s=o(6540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);