"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[84135],{1517:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"game-scripts/core-systems/character-systems/speech/speech-wormwood","title":"Speech - Wormwood","description":"Speech dialogue system for Wormwood, the plant-based character with limited vocabulary","source":"@site/docs/game-scripts/core-systems/character-systems/speech/speech_wormwood.md","sourceDirName":"game-scripts/core-systems/character-systems/speech","slug":"/game-scripts/core-systems/character-systems/speech/speech-wormwood","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/speech/speech-wormwood","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"id":"speech-wormwood","title":"Speech - Wormwood","description":"Speech dialogue system for Wormwood, the plant-based character with limited vocabulary","sidebar_position":13,"last_updated":"2025-06-25T00:00:00.000Z","build_version":676312,"change_status":"modified"},"sidebar":"docs","previous":{"title":"Speech - Woodie","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/speech/speech-woodie"},"next":{"title":"Speech - Wortox","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/speech/speech-wortox"}}');var r=s(74848),t=s(28453);const l={id:"speech-wormwood",title:"Speech - Wormwood",description:"Speech dialogue system for Wormwood, the plant-based character with limited vocabulary",sidebar_position:13,last_updated:new Date("2025-06-25T00:00:00.000Z"),build_version:676312,change_status:"modified"},c="Speech - Wormwood",a={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Character Personality",id:"character-personality",level:2},{value:"Speech Characteristics",id:"speech-characteristics",level:3},{value:"Language Patterns",id:"language-patterns",level:3},{value:"Speech Structure",id:"speech-structure",level:2},{value:"Primary Categories",id:"primary-categories",level:3},{value:"ACTIONFAIL Responses",id:"actionfail-responses",level:4},{value:"Character Responses",id:"character-responses",level:4},{value:"Wormwood-Specific Elements",id:"wormwood-specific-elements",level:4},{value:"Unique Character Elements",id:"unique-character-elements",level:2},{value:"Limited Vocabulary",id:"limited-vocabulary",level:3},{value:"Plant Perspective",id:"plant-perspective",level:3},{value:"Innocent Nature",id:"innocent-nature",level:3},{value:"Rift 5 Content",id:"rift-5-content",level:3},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"File Structure",id:"file-structure",level:3},{value:"Fallback System",id:"fallback-system",level:3},{value:"Character-Specific Overrides",id:"character-specific-overrides",level:3},{value:"Speech Categories",id:"speech-categories",level:2},{value:"Action Failures",id:"action-failures",level:3},{value:"Environmental Reactions",id:"environmental-reactions",level:3},{value:"Item Interactions",id:"item-interactions",level:3},{value:"Development Notes",id:"development-notes",level:2},{value:"Character Voice Guidelines",id:"character-voice-guidelines",level:3},{value:"Dialogue Patterns",id:"dialogue-patterns",level:3},{value:"Quality Assurance",id:"quality-assurance",level:2},{value:"Character Consistency Checks",id:"character-consistency-checks",level:3},{value:"Technical Validation",id:"technical-validation",level:3},{value:"Related Characters",id:"related-characters",level:2},{value:"Similar Personality Types",id:"similar-personality-types",level:3},{value:"Contrasting Characters",id:"contrasting-characters",level:3},{value:"Usage Context",id:"usage-context",level:2},{value:"In-Game Application",id:"in-game-application",level:3},{value:"Modding Considerations",id:"modding-considerations",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"speech---wormwood",children:"Speech - Wormwood"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676312"}),(0,r.jsx)(n.td,{children:"2025-06-25"}),(0,r.jsx)(n.td,{children:"modified"}),(0,r.jsx)(n.td,{children:"Added Rift 5 speech lines: ANNOUNCE_FLOATER_HELD, ANNOUNCE_FLOATER_LETGO"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Previous version"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"speech_wormwood.lua"})," file defines dialogue responses for Wormwood, the sentient plant character. Generated via PropagateSpeech.bat from Wilson's master template, Wormwood's speech reflects his simple vocabulary, plant-based perspective, and childlike wonder about the world."]}),"\n",(0,r.jsx)(n.h2,{id:"character-personality",children:"Character Personality"}),"\n",(0,r.jsx)(n.h3,{id:"speech-characteristics",children:"Speech Characteristics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limited vocabulary"}),": Simple words and short sentences"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plant perspective"}),": Views world through botanical lens"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Innocent nature"}),": Childlike curiosity and wonder"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Friend-focused"}),': Refers to other beings as "friends"']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fire aversion"}),": Strong negative reactions to fire and burning"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"language-patterns",children:"Language Patterns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Short, simple sentences"}),"\n",(0,r.jsx)(n.li,{children:"Basic grammar structure"}),"\n",(0,r.jsx)(n.li,{children:"Plant-related terminology"}),"\n",(0,r.jsx)(n.li,{children:'"Friend" references for other entities'}),"\n",(0,r.jsx)(n.li,{children:"Exclamations and simple emotions"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"speech-structure",children:"Speech Structure"}),"\n",(0,r.jsx)(n.h3,{id:"primary-categories",children:"Primary Categories"}),"\n",(0,r.jsx)(n.h4,{id:"actionfail-responses",children:"ACTIONFAIL Responses"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'ACTIONFAIL = {\n    GENERIC = {\n        ITEMMIMIC = "Wrong friend!",\n    },\n    ACTIVATE = {\n        LOCKED_GATE = "Nope. Locked",\n        HOSTBUSY = "Big Tweeter busy",\n        EMPTY_CATCOONDEN = "No friend inside",\n    },\n    CHANGEIN = {\n        GENERIC = "Not now",\n        BURNING = "Fire! Don\'t like fire!",\n        NOTENOUGHHAIR = "Not fuzzy enough",\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"character-responses",children:"Character Responses"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'CHARACTERS = {\n    GENERIC = "Hello, friend %s!",\n    ATTACKER = "Why hurt Wormwood?!",\n    MURDERER = "Bad friend! Very bad!",\n    REVIVER = "Thank you, friend %s!",\n    GHOST = "Friend %s looks pale...",\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"wormwood-specific-elements",children:"Wormwood-Specific Elements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Plant-focused responses\nDESCRIBE = {\n    FLOWER = "Pretty friend!",\n    TREE = "Hello, tree friend!",\n    FIRE = "No no no! Bad fire!",\n}\n\n-- Simple vocabulary patterns\nANNOUNCE_HUNGRY = "Belly empty",\nANNOUNCE_COLD = "Brrr! Too cold!",\n'})}),"\n",(0,r.jsx)(n.h2,{id:"unique-character-elements",children:"Unique Character Elements"}),"\n",(0,r.jsx)(n.h3,{id:"limited-vocabulary",children:"Limited Vocabulary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses simple, basic words"}),"\n",(0,r.jsx)(n.li,{children:"Avoids complex sentence structures"}),"\n",(0,r.jsx)(n.li,{children:"Direct, honest communication style"}),"\n",(0,r.jsx)(n.li,{children:"Childlike expressions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"plant-perspective",children:"Plant Perspective"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Views other plants as friends and family"}),"\n",(0,r.jsx)(n.li,{children:"Strong aversion to fire and burning"}),"\n",(0,r.jsx)(n.li,{children:"Understanding of botanical needs"}),"\n",(0,r.jsx)(n.li,{children:"Connection to natural world"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"innocent-nature",children:"Innocent Nature"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Curious about new experiences"}),"\n",(0,r.jsx)(n.li,{children:"Trusting of others initially"}),"\n",(0,r.jsx)(n.li,{children:"Simple emotional expressions"}),"\n",(0,r.jsx)(n.li,{children:"Wonder at world around him"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rift-5-content",children:"Rift 5 Content"}),"\n",(0,r.jsx)(n.p,{children:"Wormwood's responses to new Rift 5 mechanics with his characteristic plant-like simplicity:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Rift 5 - New floating mechanics with innocent plant observations\nANNOUNCE_FLOATER_HELD = "Good baby floater"\nANNOUNCE_FLOATER_LETGO = "Bye, baby flo-"\nANNOUNCE_LUNARGUARDIAN_INCOMING = "Night Ball ball back!"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"file-structure",children:"File Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Generated via PropagateSpeech.bat\nreturn {\n    ACTIONFAIL = { ... },\n    ANNOUNCE_BEES = "...",\n    ANNOUNCE_BOOMERANG = "...",\n    -- [Additional speech categories]\n    DESCRIBE = { ... },\n    ACTIONFAIL_GENERIC = { ... }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fallback-system",children:"Fallback System"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses Wilson's responses as fallback when no specific dialogue exists"}),"\n",(0,r.jsx)(n.li,{children:"Simplifies language to match Wormwood's vocabulary level"}),"\n",(0,r.jsx)(n.li,{children:"Maintains plant-focused perspective throughout"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"character-specific-overrides",children:"Character-Specific Overrides"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Wormwood\'s simple responses override Wilson\'s complex ones\nDESCRIBE = {\n    LIVINGLOG = "Spooky tree friend",\n    DEERCLOPS = "Big scary friend!",\n    BUTTERFLY = "Flying friend!",\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"speech-categories",children:"Speech Categories"}),"\n",(0,r.jsx)(n.h3,{id:"action-failures",children:"Action Failures"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Locked/Blocked"}),": Simple acknowledgment with basic words"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Equipment Issues"}),": Direct statements about problems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timing Problems"}),": Patient but simple responses"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"environmental-reactions",children:"Environmental Reactions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fire"}),": Strong negative reactions and fear"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plants"}),": Positive recognition and friendship"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Weather"}),": Simple comfort or discomfort expressions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"item-interactions",children:"Item Interactions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plants"}),": Enthusiastic recognition of plant-based items"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tools"}),": Basic understanding of function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Food"}),": Simple hunger and taste responses"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"development-notes",children:"Development Notes"}),"\n",(0,r.jsx)(n.h3,{id:"character-voice-guidelines",children:"Character Voice Guidelines"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keep vocabulary simple"}),": Use basic words and short sentences"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintain plant perspective"}),": View world through botanical lens"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Express innocence"}),": Show childlike wonder and curiosity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'Use "friend" references'}),": Refer to other entities as friends"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Show fire aversion"}),": Strong negative reactions to burning"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"dialogue-patterns",children:"Dialogue Patterns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Short sentences without complex grammar"}),"\n",(0,r.jsx)(n.li,{children:"Simple emotional expressions"}),"\n",(0,r.jsx)(n.li,{children:"Direct, honest communication"}),"\n",(0,r.jsx)(n.li,{children:"Plant-related terminology when appropriate"}),"\n",(0,r.jsx)(n.li,{children:"Exclamations for strong emotions"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"quality-assurance",children:"Quality Assurance"}),"\n",(0,r.jsx)(n.h3,{id:"character-consistency-checks",children:"Character Consistency Checks"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Simple vocabulary maintained throughout"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Plant perspective reflected in responses"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Friend references appropriately used"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Fire aversion consistently expressed"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Innocent tone preserved in all interactions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"technical-validation",children:"Technical Validation"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Proper Lua table structure maintained"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Fallback system functions correctly"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Character-specific overrides implemented"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Speech categories complete and functional"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-characters",children:"Related Characters"}),"\n",(0,r.jsx)(n.h3,{id:"similar-personality-types",children:"Similar Personality Types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Walter"}),": Shared innocence and wonder, though different knowledge base"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Webber"}),": Childlike perspective and simple communication style"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wendy"}),": Different emotional spectrum but similar directness"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"contrasting-characters",children:"Contrasting Characters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wickerbottom"}),": Opposite vocabulary complexity and academic approach"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maxwell"}),": Contrasting sophistication and condescension"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WX-78"}),": Different communication style and worldview"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage-context",children:"Usage Context"}),"\n",(0,r.jsx)(n.h3,{id:"in-game-application",children:"In-Game Application"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dialogue appears during player actions and interactions"}),"\n",(0,r.jsx)(n.li,{children:"Responses reflect Wormwood's plant nature and limited vocabulary"}),"\n",(0,r.jsx)(n.li,{children:"Character voice enhances his innocent, plant-based personality"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"modding-considerations",children:"Modding Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Speech system allows for character-specific dialogue additions"}),"\n",(0,r.jsx)(n.li,{children:"Fallback system ensures compatibility"}),"\n",(0,r.jsx)(n.li,{children:"Character voice must maintain simple vocabulary and plant perspective"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This documentation provides comprehensive coverage of Wormwood's speech system, emphasizing his simple vocabulary, plant-based perspective, and innocent nature that defines his character in Don't Starve Together."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);