"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[68236],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var i=r(96540);const s={},l=i.createContext(s);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},36679:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"game-scripts/core-systems/world-systems/tiles-terrain/tilemanager","title":"TileManager","description":"Core module for managing ground tiles, falloff textures, and ground creep in the world generation system","source":"@site/docs/game-scripts/core-systems/world-systems/tiles-terrain/tilemanager.md","sourceDirName":"game-scripts/core-systems/world-systems/tiles-terrain","slug":"/game-scripts/core-systems/world-systems/tiles-terrain/tilemanager","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/tilemanager","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"tilemanager","title":"TileManager","description":"Core module for managing ground tiles, falloff textures, and ground creep in the world generation system","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"TileGroups","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/tilegroups"},"next":{"title":"World Tile Definitions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/worldtiledefs"}}');var s=r(74848),l=r(28453);const t={id:"tilemanager",title:"TileManager",description:"Core module for managing ground tiles, falloff textures, and ground creep in the world generation system",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="TileManager",o={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"RegisterTileRange(range_name, range_start, range_end)",id:"register-tile-range",level:3},{value:"AddTile(tile_name, tile_range, tile_data, ground_tile_def, minimap_tile_def, turf_def)",id:"add-tile",level:3},{value:"SetTileProperty(tile_id, propertyname, value)",id:"set-tile-property",level:3},{value:"ChangeTileRenderOrder(tile_id, target_tile_id, moveafter)",id:"change-tile-render-order",level:3},{value:"ChangeMiniMapTileRenderOrder(tile_id, target_tile_id, moveafter)",id:"change-minimap-tile-render-order",level:3},{value:"SetMiniMapTileProperty(tile_id, propertyname, value)",id:"set-minimap-tile-property",level:3},{value:"AddFalloffTexture(falloff_id, falloff_def)",id:"add-falloff-texture",level:3},{value:"ChangeFalloffRenderOrder(falloff_id, target_falloff_id, moveafter)",id:"change-falloff-render-order",level:3},{value:"SetFalloffProperty(falloff_id, propertyname, value)",id:"set-falloff-property",level:3},{value:"AddGroundCreep(groundcreep_id, groundcreep_def)",id:"add-ground-creep",level:3},{value:"ChangeGroundCreepRenderOrder(groundcreep_id, target_groundcreep_id, moveafter)",id:"change-ground-creep-render-order",level:3},{value:"SetGroundCreepProperty(groundcreep_id, propertyname, value)",id:"set-ground-creep-property",level:3},{value:"Data Structures",id:"data-structures",level:2},{value:"Tile Data Structure",id:"tile-data-structure",level:3},{value:"Ground Tile Definition",id:"ground-tile-definition",level:3},{value:"Minimap Tile Definition",id:"minimap-tile-definition",level:3},{value:"Turf Definition",id:"turf-definition",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Creating Custom Biome Tiles",id:"creating-custom-biome-tiles",level:3},{value:"Modifying Existing Tiles",id:"modifying-existing-tiles",level:3},{value:"Ocean Tile Depth Categories",id:"ocean-tile-depth-categories",level:3},{value:"Integration with Game Systems",id:"integration-with-game-systems",level:2},{value:"World Generation Integration",id:"world-generation-integration",level:3},{value:"Asset Management",id:"asset-management",level:3},{value:"Protection System",id:"protection-system",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Source Reference",id:"source-reference",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"tilemanager",children:"TileManager"})}),"\n",(0,s.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Build Version"}),(0,s.jsx)(n.th,{children:"Change Date"}),(0,s.jsx)(n.th,{children:"Change Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"676042"}),(0,s.jsx)(n.td,{children:"2025-06-21"}),(0,s.jsx)(n.td,{children:"stable"}),(0,s.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"TileManager"})," module is the core system for managing ground tiles in Don't Starve Together. It provides functionality to register tile ranges, add new tiles with properties, manage falloff textures, and handle ground creep effects. This module is essential for world generation and tile rendering systems."]}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local TileManager = require("tilemanager")\n\n-- Register a new tile range (done internally)\nTileManager.RegisterTileRange("CUSTOM", 1000, 1255)\n\n-- Add a new tile with properties\nTileManager.AddTile(\n    "CUSTOM_GRASS",\n    "LAND",\n    {ground_name = "Custom Grass"},\n    {\n        name = "custom_grass",\n        noise_texture = "custom_grass_noise",\n        runsound = "dontstarve/movement/run_grass",\n        walksound = "dontstarve/movement/walk_grass",\n        snowsound = "dontstarve/movement/run_snow",\n        mudsound = "dontstarve/movement/run_mud",\n    },\n    {\n        name = "map_edge",\n        noise_texture = "mini_custom_grass",\n    },\n    {\n        name = "custom_grass",\n        pickupsound = "vegetation_grassy",\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h3,{id:"register-tile-range",children:"RegisterTileRange(range_name, range_start, range_end)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRegisters a new tile range for categorizing tiles. Tile ranges define the numeric ID ranges for different categories of tiles (LAND, OCEAN, IMPASSABLE, NOISE)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"range_name"})," (string): Name of the tile range (converted to uppercase)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"range_start"})," (number): Starting ID for the range"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"range_end"})," (number): Ending ID for the range (inclusive)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Restrictions:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Range must be at least 256 tiles wide"}),"\n",(0,s.jsx)(n.li,{children:"Range name must be unique"}),"\n",(0,s.jsxs)(n.li,{children:["Cannot be called when ",(0,s.jsx)(n.code,{children:"mod_protect_TileManager"})," is true"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Register a custom tile range for mod tiles\nTileManager.RegisterTileRange("MODTILES", 2000, 2255)\n\n-- This creates a range that can hold 256 different tile types\n-- for use by mods or custom content\n'})}),"\n",(0,s.jsx)(n.h3,{id:"add-tile",children:"AddTile(tile_name, tile_range, tile_data, ground_tile_def, minimap_tile_def, turf_def)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nAdds a new tile with complete definitions for ground rendering, minimap display, and turf properties. This is the primary function for creating new tile types."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tile_name"})," (string): Unique name for the tile (converted to uppercase)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tile_range"})," (string): Range category for the tile (LAND, OCEAN, IMPASSABLE, NOISE)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tile_data"})," (table): Basic tile metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ground_tile_def"})," (table, optional): Ground rendering properties"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"minimap_tile_def"})," (table, optional): Minimap display properties"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"turf_def"})," (table, optional): Turf item properties"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add a custom volcanic tile\nTileManager.AddTile(\n    "VOLCANIC_ROCK",\n    "LAND",\n    {ground_name = "Volcanic Rock", old_static_id = nil},\n    {\n        name = "volcanic",\n        noise_texture = "noise_volcanic",\n        runsound = "dontstarve/movement/run_dirt",\n        walksound = "dontstarve/movement/walk_dirt",\n        snowsound = "dontstarve/movement/run_ice",\n        mudsound = "dontstarve/movement/run_mud",\n        hard = true,\n        flashpoint_modifier = 50,\n    },\n    {\n        name = "map_edge",\n        noise_texture = "mini_volcanic",\n    },\n    {\n        name = "volcanic_turf",\n        anim = "volcanic",\n        pickupsound = "rock",\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"set-tile-property",children:"SetTileProperty(tile_id, propertyname, value)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nModifies a property of an existing ground tile definition. Useful for runtime adjustments to tile behavior."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tile_id"})," (number): Numeric ID of the tile to modify"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"propertyname"})," (string): Name of the property to change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," (any): New value for the property"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Make grass tiles harder (immune to being dug up)\nTileManager.SetTileProperty(WORLD_TILES.GRASS, "hard", true)\n\n-- Change the run sound for forest tiles\nTileManager.SetTileProperty(WORLD_TILES.FOREST, "runsound", "custom/movement/forest_run")\n\n-- Modify flashpoint for scale tiles\nTileManager.SetTileProperty(WORLD_TILES.SCALE, "flashpoint_modifier", 300)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"change-tile-render-order",children:"ChangeTileRenderOrder(tile_id, target_tile_id, moveafter)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nChanges the rendering order of tiles by moving one tile's position relative to another. This affects which tiles appear on top when overlapping."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tile_id"})," (number): ID of the tile to move"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"target_tile_id"})," (number): ID of the reference tile"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"moveafter"})," (boolean): If true, move after target; if false, move before target"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Move volcanic tiles to render after rocky tiles\nTileManager.ChangeTileRenderOrder(\n    WORLD_TILES.VOLCANIC_ROCK, \n    WORLD_TILES.ROCKY, \n    true  -- Move after rocky tiles\n)\n\n-- Move custom tiles to render before existing tiles\nTileManager.ChangeTileRenderOrder(\n    WORLD_TILES.CUSTOM_TILE,\n    WORLD_TILES.GRASS,\n    false  -- Move before grass tiles\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"change-minimap-tile-render-order",children:"ChangeMiniMapTileRenderOrder(tile_id, target_tile_id, moveafter)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nChanges the rendering order of tiles specifically for minimap display. Similar to ChangeTileRenderOrder but only affects minimap rendering."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tile_id"})," (number): ID of the tile to move"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"target_tile_id"})," (number): ID of the reference tile"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"moveafter"})," (boolean): If true, move after target; if false, move before target"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Adjust minimap rendering order for better visibility\nTileManager.ChangeMiniMapTileRenderOrder(\n    WORLD_TILES.CUSTOM_WATER,\n    WORLD_TILES.OCEAN_COASTAL,\n    true\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"set-minimap-tile-property",children:"SetMiniMapTileProperty(tile_id, propertyname, value)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nModifies a property of an existing minimap tile definition. Allows runtime changes to how tiles appear on the minimap."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tile_id"})," (number): Numeric ID of the tile to modify"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"propertyname"})," (string): Name of the property to change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," (any): New value for the property"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Change minimap noise texture for better visibility\nTileManager.SetMiniMapTileProperty(\n    WORLD_TILES.CUSTOM_BIOME, \n    "noise_texture", \n    "mini_custom_biome_enhanced"\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"add-falloff-texture",children:"AddFalloffTexture(falloff_id, falloff_def)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nAdds a falloff texture definition for smooth transitions between different tile types. Falloff textures create smooth blending at tile boundaries."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"falloff_id"})," (number): Unique ID for the falloff texture"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"falloff_def"})," (table): Falloff texture definition with rendering properties"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add falloff texture for smooth grass-to-dirt transitions\nTileManager.AddFalloffTexture(1001, {\n    name = "grass_to_dirt_falloff",\n    noise_texture = "falloff_grass_dirt",\n    should_have_falloff = function(tile1, tile2)\n        return tile1 == WORLD_TILES.GRASS and tile2 == WORLD_TILES.DIRT\n    end,\n    should_have_falloff_result = true,\n    neighbor_needs_falloff = function(neighbor_tile)\n        return neighbor_tile == WORLD_TILES.ROCKY\n    end,\n    neighbor_needs_falloff_result = false\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"change-falloff-render-order",children:"ChangeFalloffRenderOrder(falloff_id, target_falloff_id, moveafter)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nChanges the rendering order of falloff textures. This affects the priority of different falloff effects when multiple transitions overlap."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"falloff_id"})," (number): ID of the falloff to move"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"target_falloff_id"})," (number): ID of the reference falloff"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"moveafter"})," (boolean): If true, move after target; if false, move before target"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"set-falloff-property",children:"SetFalloffProperty(falloff_id, propertyname, value)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nModifies a property of an existing falloff texture definition."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"falloff_id"})," (number): Numeric ID of the falloff to modify"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"propertyname"})," (string): Name of the property to change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," (any): New value for the property"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"add-ground-creep",children:"AddGroundCreep(groundcreep_id, groundcreep_def)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nAdds a ground creep effect definition. Ground creep creates dynamic overlay effects on tiles, such as corruption or growth patterns."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"groundcreep_id"})," (number): Unique ID for the ground creep effect"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"groundcreep_def"})," (table): Ground creep definition with visual properties"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Add corruption creep effect\nTileManager.AddGroundCreep(2001, {\n    name = "corruption_creep",\n    noise_texture = "creep_corruption",\n    atlas = "corruption_creep_atlas",\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"change-ground-creep-render-order",children:"ChangeGroundCreepRenderOrder(groundcreep_id, target_groundcreep_id, moveafter)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nChanges the rendering order of ground creep effects."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"groundcreep_id"})," (number): ID of the ground creep to move"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"target_groundcreep_id"})," (number): ID of the reference ground creep"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"moveafter"})," (boolean): If true, move after target; if false, move before target"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"set-ground-creep-property",children:"SetGroundCreepProperty(groundcreep_id, propertyname, value)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status:"})," ",(0,s.jsx)(n.code,{children:"stable"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nModifies a property of an existing ground creep definition."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"groundcreep_id"})," (number): Numeric ID of the ground creep to modify"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"propertyname"})," (string): Name of the property to change"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," (any): New value for the property"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(void): No return value"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,s.jsx)(n.h3,{id:"tile-data-structure",children:"Tile Data Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local tile_data = {\n    ground_name = "Display Name",    -- Human-readable name\n    old_static_id = 42,             -- Legacy ID (for vanilla tiles only)\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"ground-tile-definition",children:"Ground Tile Definition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local ground_tile_def = {\n    name = "texture_name",               -- Base texture name\n    atlas = "texture_atlas",             -- Atlas file (optional)\n    noise_texture = "noise_texture",     -- Noise overlay texture\n    \n    -- Movement sounds\n    runsound = "path/to/run_sound",\n    walksound = "path/to/walk_sound", \n    snowsound = "path/to/snow_sound",\n    mudsound = "path/to/mud_sound",\n    \n    -- Properties\n    hard = false,                        -- Cannot be dug up\n    flooring = false,                    -- Acts as flooring\n    roadways = false,                    -- Part of road system\n    cannotbedug = false,                 -- Immune to terraforming\n    nogroundoverlays = false,            -- No snow/mud overlays\n    isinvisibletile = false,             -- Invisible tile type\n    istemptile = false,                  -- Temporary tile using undertile\n    \n    -- Visual properties\n    flashpoint_modifier = 0,             -- Fire spread modifier\n    colors = {                           -- Color blending\n        primary_color = {r, g, b, a},\n        secondary_color = {r, g, b, a},\n        secondary_color_dusk = {r, g, b, a},\n        minimap_color = {r, g, b, a},\n    },\n    wavetint = {r, g, b},               -- Ocean wave tinting\n    ocean_depth = "SHALLOW",             -- Ocean depth category\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"minimap-tile-definition",children:"Minimap Tile Definition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local minimap_tile_def = {\n    name = "minimap_texture",            -- Minimap texture name\n    atlas = "minimap_atlas",             -- Minimap atlas (optional)\n    noise_texture = "mini_noise",        -- Minimap noise texture\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"turf-definition",children:"Turf Definition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local turf_def = {\n    name = "turf_item_name",             -- Turf item prefab name\n    anim = "turf_animation",             -- Ground item animation\n    bank_build = "turf_bank",            -- Animation bank/build\n    pickupsound = "sound_type",          -- Sound when picked up\n    \n    -- Optional mod parameters\n    bank_override = "custom_bank",\n    build_override = "custom_build", \n    animzip_override = "custom.zip",\n    inv_override = "custom_inv_item",\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"creating-custom-biome-tiles",children:"Creating Custom Biome Tiles"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Define color scheme for new biome\nlocal CRYSTAL_COLORS = {\n    primary_color = {200, 255, 255, 40},\n    secondary_color = {100, 200, 255, 120},\n    secondary_color_dusk = {50, 100, 150, 140},\n    minimap_color = {80, 160, 200, 180},\n}\n\n-- Add crystal biome tile\nTileManager.AddTile(\n    "CRYSTAL_BIOME",\n    "LAND",\n    {ground_name = "Crystal Ground"},\n    {\n        name = "crystal_ground",\n        noise_texture = "crystal_noise",\n        runsound = "dontstarve/movement/run_marble",\n        walksound = "dontstarve/movement/walk_marble",\n        snowsound = "dontstarve/movement/run_ice",\n        mudsound = "dontstarve/movement/run_mud",\n        hard = true,\n        colors = CRYSTAL_COLORS,\n    },\n    {\n        name = "map_edge",\n        noise_texture = "mini_crystal",\n    },\n    {\n        name = "crystal_turf",\n        pickupsound = "rock",\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"modifying-existing-tiles",children:"Modifying Existing Tiles"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Make marsh tiles more dangerous\nTileManager.SetTileProperty(WORLD_TILES.MARSH, "flashpoint_modifier", -50)\n\n-- Change sounds for rocky areas\nTileManager.SetTileProperty(WORLD_TILES.ROCKY, "runsound", "custom/rocky_run")\nTileManager.SetTileProperty(WORLD_TILES.ROCKY, "walksound", "custom/rocky_walk")\n\n-- Add hard property to prevent digging\nTileManager.SetTileProperty(WORLD_TILES.CUSTOM_TILE, "hard", true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"ocean-tile-depth-categories",children:"Ocean Tile Depth Categories"}),"\n",(0,s.jsx)(n.p,{children:"Ocean tiles support different depth categories that affect gameplay:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"SHALLOW"'})," - Coastal areas, boats can navigate"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"BASIC"'})," - Normal ocean depth"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"DEEP"'})," - Deep ocean areas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"VERY_DEEP"'})," - Deepest ocean regions"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Create shallow lagoon tile\nTileManager.AddTile(\n    "LAGOON",\n    "OCEAN", \n    {ground_name = "Lagoon"},\n    {\n        name = "lagoon",\n        noise_texture = "lagoon_noise",\n        ocean_depth = "SHALLOW",\n        colors = LAGOON_COLORS,\n        wavetint = {0.9, 1.0, 1.0},\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-game-systems",children:"Integration with Game Systems"}),"\n",(0,s.jsx)(n.h3,{id:"world-generation-integration",children:"World Generation Integration"}),"\n",(0,s.jsx)(n.p,{children:"The TileManager works closely with world generation systems:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- World generation uses tile IDs from WORLD_TILES\nlocal function PlaceBiome(x, y, biome_type)\n    if biome_type == "crystal" then\n        TheWorld.Map:SetTile(x, y, WORLD_TILES.CRYSTAL_BIOME)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"asset-management",children:"Asset Management"}),"\n",(0,s.jsx)(n.p,{children:"TileManager automatically handles asset loading for tiles:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ground textures are loaded from ",(0,s.jsx)(n.code,{children:"levels/tiles/"})]}),"\n",(0,s.jsxs)(n.li,{children:["Noise textures are loaded from ",(0,s.jsx)(n.code,{children:"levels/textures/"})]}),"\n",(0,s.jsx)(n.li,{children:"Atlas files are resolved automatically"}),"\n",(0,s.jsx)(n.li,{children:"Assets are added to the appropriate asset tables"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"protection-system",children:"Protection System"}),"\n",(0,s.jsx)(n.p,{children:"The module uses a protection system to prevent unauthorized modifications:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Protection is enabled after tile definitions are loaded\nmod_protect_TileManager = true  -- Prevents mod interference\n\n-- Legacy compatibility flag\nallow_existing_GROUND_entry = false  -- Prevents GROUND table conflicts\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/tiledefs",children:"TileDefs"}),": Contains all vanilla tile definitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/tilegroups",children:"TileGroups"}),": Provides tile categorization and validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../map/worldtiledefs.md",children:"World Tile Definitions"}),": Core tile constants and structures"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"source-reference",children:"Source Reference"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"File:"})," ",(0,s.jsx)(n.code,{children:"scripts/tilemanager.lua"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Implementation Notes:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses asset resolution system for automatic texture loading"}),"\n",(0,s.jsx)(n.li,{children:"Validates all tile definitions for required properties"}),"\n",(0,s.jsx)(n.li,{children:"Maintains render order for proper tile layering"}),"\n",(0,s.jsx)(n.li,{children:"Integrates with world generation and minimap systems"}),"\n",(0,s.jsx)(n.li,{children:"Supports mod extensibility through proper range management"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);