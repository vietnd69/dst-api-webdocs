"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7396],{10461:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"game-scripts/core-systems/world-systems/entities/prefabskin","title":"Prefab Skins","description":"Visual skin system for customizing prefab appearance and functionality","source":"@site/docs/game-scripts/core-systems/world-systems/entities/prefabskin.md","sourceDirName":"game-scripts/core-systems/world-systems/entities","slug":"/game-scripts/core-systems/world-systems/entities/prefabskin","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabskin","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"prefabskin","title":"Prefab Skins","description":"Visual skin system for customizing prefab appearance and functionality","sidebar_position":5,"last_updated":"2025-06-25T00:00:00.000Z","build_version":676312,"change_status":"modified"},"sidebar":"docs","previous":{"title":"Prefab List","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefablist"},"next":{"title":"Prefab Skins Data","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabskins"}}');var t=i(74848),l=i(28453);const r={id:"prefabskin",title:"Prefab Skins",description:"Visual skin system for customizing prefab appearance and functionality",sidebar_position:5,last_updated:new Date("2025-06-25T00:00:00.000Z"),build_version:676312,change_status:"modified"},a="Prefab Skins",d={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Configuration Tables",id:"configuration-tables",level:2},{value:"BASE_TORSO_TUCK",id:"base-torso-tuck",level:3},{value:"BASE_ALTERNATE_FOR_BODY / BASE_ALTERNATE_FOR_SKIRT",id:"base-alternate",level:3},{value:"SKIN_FX_PREFAB",id:"skin-fx-prefab",level:3},{value:"SKIN_SOUND_FX",id:"skin-sound-fx",level:3},{value:"Core Skin Functions",id:"core-skin-functions",level:2},{value:"AddSkinSounds(inst)",id:"addskinSounds",level:3},{value:"RemoveSkinSounds(inst)",id:"removeskinsounds",level:3},{value:"basic_init_fn(inst, build_name, def_build, filter_fn)",id:"basic-init-fn",level:3},{value:"basic_clear_fn(inst, def_build)",id:"basic-clear-fn",level:3},{value:"Specialized Skin Functions",id:"specialized-skin-functions",level:2},{value:"Backpack Skins",id:"backpack-skins",level:3},{value:"backpack_init_fn(inst, build_name, fns)",id:"backpack-init-fn",level:4},{value:"backpack_clear_fn(inst)",id:"backpack-clear-fn",level:4},{value:"Weapon Skins",id:"weapon-skins",level:3},{value:"hambat_init_fn(inst, build_name)",id:"hambat-init-fn",level:4},{value:"batbat_init_fn(inst, build_name)",id:"batbat-init-fn",level:4},{value:"boomerang_init_fn(inst, build_name)",id:"boomerang-init-fn",level:4},{value:"Armor Skins",id:"armor-skins",level:3},{value:"armor_bramble_init_fn(inst, build_name)",id:"armor-bramble-init-fn",level:4},{value:"Equipment Skins",id:"equipment-skins",level:3},{value:"beef_bell_init_fn(inst, build_name)",id:"beef-bell-init-fn",level:4},{value:"eyeturret_init_fn(inst, build_name)",id:"eyeturret-init-fn",level:4},{value:"Furniture Skins",id:"furniture-skins",level:3},{value:"wood_chair_init_fn(inst, build_name)",id:"wood-chair-init-fn",level:4},{value:"stone_table_round_init_fn(inst, build_name)",id:"stone-table-round-init-fn",level:4},{value:"Special Item Skins",id:"special-item-skins",level:3},{value:"staff_tornado_init_fn(inst, build_name)",id:"staff-tornado-init-fn",level:4},{value:"succulent_potted_init_fn(inst, build_name)",id:"succulent-potted-init-fn",level:4},{value:"flotationcushion_init_fn(inst, build_name)",id:"flotationcushion-init-fn",level:4},{value:"flotationcushion_clear_fn(inst, build_name)",id:"flotationcushion-clear-fn",level:4},{value:"sisturn_init_fn(inst, build_name)",id:"sisturn-init-fn",level:4},{value:"sisturn_clear_fn(inst)",id:"sisturn-clear-fn",level:4},{value:"Character Equipment Skins",id:"character-equipment-skins",level:2},{value:"Clothing Integration",id:"clothing-integration",level:3},{value:"Hat and Accessory Skins",id:"hat-and-accessory-skins",level:3},{value:"Advanced Skin Features",id:"advanced-skin-features",level:2},{value:"Winona Battery Skins",id:"winona-battery-skins",level:3},{value:"Container Skins",id:"container-skins",level:3},{value:"Sound Integration",id:"sound-integration",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Creating a New Skin",id:"creating-a-new-skin",level:3},{value:"Complex Multi-Component Skins",id:"complex-multi-component-skins",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"prefab-skins",children:"Prefab Skins"})}),"\n",(0,t.jsx)(e.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Build Version"}),(0,t.jsx)(e.th,{children:"Change Date"}),(0,t.jsx)(e.th,{children:"Change Type"}),(0,t.jsx)(e.th,{children:"Description"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"676312"}),(0,t.jsx)(e.td,{children:"2025-06-25"}),(0,t.jsx)(e.td,{children:"modified"}),(0,t.jsx)(e.td,{children:"Added flotationcushion and sisturn skin functions"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"676042"}),(0,t.jsx)(e.td,{children:"2025-06-21"}),(0,t.jsx)(e.td,{children:"stable"}),(0,t.jsx)(e.td,{children:"Previous version"})]})]})]}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"prefabskin"})," module provides a comprehensive system for applying visual and functional skins to prefabs in Don't Starve Together. It handles skin application, clearing, sound effects, and specialized skin behaviors for different types of items including equipment, furniture, and tools."]}),"\n",(0,t.jsx)(e.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Apply a skin to an item\nlocal function ApplySkinToItem(inst, skin_name)\n    if inst.SetSkin then\n        inst:SetSkin(skin_name)\n    end\nend\n\n-- Basic skin functions\nbasic_init_fn(inst, "backpack_luxury", "swap_backpack")\nbasic_clear_fn(inst, "swap_backpack")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"configuration-tables",children:"Configuration Tables"}),"\n",(0,t.jsx)(e.h3,{id:"base-torso-tuck",children:"BASE_TORSO_TUCK"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Type:"})," ",(0,t.jsx)(e.code,{children:"table"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nDefines how torso skins interact with other clothing layers."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Values:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:'"full"'})," - Torso goes behind pelvis slot"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:'"none"'})," - Torso goes above the skirt"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:'"skirt"'})," - Torso goes between skirt and pelvis (default)"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Configure torso tucking for a specific skin\nBASE_TORSO_TUCK["fancy_shirt"] = "full"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"base-alternate",children:"BASE_ALTERNATE_FOR_BODY / BASE_ALTERNATE_FOR_SKIRT"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Type:"})," ",(0,t.jsx)(e.code,{children:"table"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nDefines alternate builds for body and skirt components when certain skins are applied."]}),"\n",(0,t.jsx)(e.h3,{id:"skin-fx-prefab",children:"SKIN_FX_PREFAB"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Type:"})," ",(0,t.jsx)(e.code,{children:"table"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nMaps skin names to special effect prefabs that should be spawned with the skin."]}),"\n",(0,t.jsx)(e.h3,{id:"skin-sound-fx",children:"SKIN_SOUND_FX"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Type:"})," ",(0,t.jsx)(e.code,{children:"table"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nMaps skin names to sound effect configurations for various interactions."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Structure:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'SKIN_SOUND_FX["skin_name"] = {\n    hit = "sound_id",           -- Weapon hit sounds\n    small = "sound_id",         -- Small whip sounds\n    large = "sound_id",         -- Large whip sounds\n    equip = "sound_id",         -- Equipment sounds\n    place = "sound_id",         -- Chest place sounds\n    open = "sound_id",          -- Chest open sounds\n    close = "sound_id",         -- Chest close sounds\n    wrap = "sound_id",          -- Bundle wrap sounds\n    net = "sound_id",           -- Bug net sounds\n    genericuse = "sound_id",    -- Generic use sounds\n    cast = "sound_id",          -- Staff cast sounds\n    preteleport = "sound_id",   -- Orange staff pre-teleport\n    postteleport = "sound_id",  -- Orange staff post-teleport\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"core-skin-functions",children:"Core Skin Functions"}),"\n",(0,t.jsx)(e.h3,{id:"addskinSounds",children:"AddSkinSounds(inst)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies sound effects to an instance based on its skin configuration."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The entity instance to apply sounds to"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- Automatically called when skins are applied\n-- Adds appropriate sound overrides based on SKIN_SOUND_FX data\n"})}),"\n",(0,t.jsx)(e.h3,{id:"removeskinsounds",children:"RemoveSkinSounds(inst)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nRemoves all skin-specific sound effects from an instance."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The entity instance to remove sounds from"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"basic-init-fn",children:"basic_init_fn(inst, build_name, def_build, filter_fn)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nStandard initialization function for applying skins to basic items."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The entity instance"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"build_name"})," (string): Name of the skin build to apply"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"def_build"})," (string): Default build name to fall back to"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"filter_fn"})," (function, optional): Function to filter/modify skin names"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Apply a backpack skin\nbasic_init_fn(inst, "backpack_luxury", "swap_backpack")\n\n-- Apply with custom filter\nbasic_init_fn(inst, "weapon_golden", "sword", function(skin_name)\n    return skin_name .. "_special"\nend)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"basic-clear-fn",children:"basic_clear_fn(inst, def_build)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nStandard function for removing skins and reverting to default appearance."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The entity instance"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"def_build"})," (string): Default build to revert to"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Remove skin and revert to default\nbasic_clear_fn(inst, "swap_backpack")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"specialized-skin-functions",children:"Specialized Skin Functions"}),"\n",(0,t.jsx)(e.h3,{id:"backpack-skins",children:"Backpack Skins"}),"\n",(0,t.jsx)(e.h4,{id:"backpack-init-fn",children:"backpack_init_fn(inst, build_name, fns)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nSpecialized skin initialization for backpack items with additional functionality callbacks."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The backpack instance"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"build_name"})," (string): Skin build name"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"fns"})," (table): Table containing ",(0,t.jsx)(e.code,{children:"initialize"})," and ",(0,t.jsx)(e.code,{children:"uninitialize"})," callback functions"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'local backpack_skin_fns = {\n    initialize = function(inst)\n        -- Custom initialization for this skin\n        inst:AddTag("fancy_backpack")\n    end,\n    uninitialize = function(inst)\n        -- Cleanup when skin is removed\n        inst:RemoveTag("fancy_backpack")\n    end\n}\n\nbackpack_init_fn(inst, "backpack_luxury", backpack_skin_fns)\n'})}),"\n",(0,t.jsx)(e.h4,{id:"backpack-clear-fn",children:"backpack_clear_fn(inst)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nRemoves backpack skin and calls cleanup functions."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The backpack instance"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"weapon-skins",children:"Weapon Skins"}),"\n",(0,t.jsx)(e.h4,{id:"hambat-init-fn",children:"hambat_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to ham bat weapons."]}),"\n",(0,t.jsx)(e.h4,{id:"batbat-init-fn",children:"batbat_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to bat bat weapons."]}),"\n",(0,t.jsx)(e.h4,{id:"boomerang-init-fn",children:"boomerang_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to boomerang weapons."]}),"\n",(0,t.jsx)(e.h3,{id:"armor-skins",children:"Armor Skins"}),"\n",(0,t.jsx)(e.h4,{id:"armor-bramble-init-fn",children:"armor_bramble_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to bramble armor with specialized handling."]}),"\n",(0,t.jsx)(e.h3,{id:"equipment-skins",children:"Equipment Skins"}),"\n",(0,t.jsx)(e.h4,{id:"beef-bell-init-fn",children:"beef_bell_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to beef bell with special inventory icon handling for linked/unlinked states."]}),"\n",(0,t.jsx)(e.h4,{id:"eyeturret-init-fn",children:"eyeturret_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nComplex skin application for eye turrets including symbol overrides and base structure integration."]}),"\n",(0,t.jsx)(e.h3,{id:"furniture-skins",children:"Furniture Skins"}),"\n",(0,t.jsx)(e.h4,{id:"wood-chair-init-fn",children:"wood_chair_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to wooden chairs including back component synchronization."]}),"\n",(0,t.jsx)(e.h4,{id:"stone-table-round-init-fn",children:"stone_table_round_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to round stone tables."]}),"\n",(0,t.jsx)(e.h3,{id:"special-item-skins",children:"Special Item Skins"}),"\n",(0,t.jsx)(e.h4,{id:"staff-tornado-init-fn",children:"staff_tornado_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to tornado staff and sets up linked skin name for tornado effects."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Links tornado staff skin to tornado effect skin\n-- "tornado_stick_fire" becomes linked to "tornado_fire"\n'})}),"\n",(0,t.jsx)(e.h4,{id:"succulent-potted-init-fn",children:"succulent_potted_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"stable"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to potted succulents with plant component clearing."]}),"\n",(0,t.jsx)(e.h4,{id:"flotationcushion-init-fn",children:"flotationcushion_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"added in 676312"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Source:"})," ",(0,t.jsx)(e.a,{href:"mdc:dst-api-webdocs/dst-scripts/prefabskin.lua",children:"dst-scripts/prefabskin.lua"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),'\nApplies skin to flotation cushion items. Uses basic initialization with default "flotationcushion" build.']}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The flotation cushion instance"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"build_name"})," (string): Name of the skin build to apply"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'flotationcushion_init_fn(inst, "flotationcushion_formal")\n'})}),"\n",(0,t.jsx)(e.h4,{id:"flotationcushion-clear-fn",children:"flotationcushion_clear_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"added in 676312"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nRemoves skin from flotation cushion and reverts to default appearance."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The flotation cushion instance"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"build_name"})," (string): Build name (unused but maintains function signature)"]}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"sisturn-init-fn",children:"sisturn_init_fn(inst, build_name)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"modified in 676312"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Source:"})," ",(0,t.jsx)(e.a,{href:"mdc:dst-api-webdocs/dst-scripts/prefabskin.lua",children:"dst-scripts/prefabskin.lua"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nApplies skin to sister turn decorative furniture. Enhanced to include flower decoration updates alongside sound effects."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The sister turn instance"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"build_name"})," (string): Name of the skin build to apply"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'sisturn_init_fn(inst, "sisturn_marble")\n-- Updates both visual skin and flower decorations\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Modified in build 676312: Added ",(0,t.jsx)(e.code,{children:"UpdateFlowerDecor()"})," call for proper decoration synchronization"]}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"sisturn-clear-fn",children:"sisturn_clear_fn(inst)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Status:"})," ",(0,t.jsx)(e.code,{children:"modified in 676312"})]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Description:"}),"\nRemoves skin from sister turn and reverts to default appearance. Enhanced to update flower decorations when clearing skins."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"inst"})," (EntityScript): The sister turn instance"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Version History:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Modified in build 676312: Added ",(0,t.jsx)(e.code,{children:"UpdateFlowerDecor()"})," call to ensure decorations are properly reset"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"character-equipment-skins",children:"Character Equipment Skins"}),"\n",(0,t.jsx)(e.h3,{id:"clothing-integration",children:"Clothing Integration"}),"\n",(0,t.jsx)(e.p,{children:"The skin system integrates with character clothing systems:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Torso items can be configured for layering\nBASE_TORSO_TUCK["fancy_vest"] = "none"  -- Appears above skirts\nBASE_TORSO_TUCK["tucked_shirt"] = "full" -- Goes behind pelvis\n\n-- Alternate builds for compatibility\nBASE_ALTERNATE_FOR_BODY["special_skin"] = "alternate_body_build"\nBASE_ALTERNATE_FOR_SKIRT["special_skin"] = "alternate_skirt_build"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"hat-and-accessory-skins",children:"Hat and Accessory Skins"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Desert hat skins\ndeserthat_init_fn(inst, "hat_desert_safari")\n\n-- Goggle hat skins  \ngoggleshat_init_fn(inst, "hat_goggles_steampunk")\n\n-- Beefalo hat skins\nbeefalohat_init_fn(inst, "beefalohat_royal")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"advanced-skin-features",children:"Advanced Skin Features"}),"\n",(0,t.jsx)(e.h3,{id:"winona-battery-skins",children:"Winona Battery Skins"}),"\n",(0,t.jsx)(e.p,{children:"The system includes complex skin handling for Winona's battery items:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- High-power battery with multiple symbol overrides\nwinona_battery_high_init_fn(inst, "winonabattery_high_glass")\n\n-- Handles both placed batteries and inventory items\n-- Synchronizes multiple visual components\n'})}),"\n",(0,t.jsx)(e.h3,{id:"container-skins",children:"Container Skins"}),"\n",(0,t.jsx)(e.p,{children:"Special handling for containers that change appearance when opened:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Chest skins with open/closed states\nmagician_chest_init_fn(inst, "chest_magician_tesla")\n\n-- Handles inventory icon changes for container states\n'})}),"\n",(0,t.jsx)(e.h3,{id:"sound-integration",children:"Sound Integration"}),"\n",(0,t.jsx)(e.p,{children:"Skins can override interaction sounds:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Define custom sounds for a weapon skin\nSKIN_SOUND_FX["sword_crystal"] = {\n    hit = "crystal_sword_hit",\n    equip = "crystal_sword_equip"\n}\n\n-- Sounds are automatically applied when skin is set\n'})}),"\n",(0,t.jsx)(e.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,t.jsx)(e.h3,{id:"creating-a-new-skin",children:"Creating a New Skin"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- 1. Define the skin function\nfunction my_item_royal_init_fn(inst, build_name)\n    basic_init_fn(inst, build_name, "my_item_default")\n    \n    -- Add any special behavior\n    if not TheWorld.ismastersim then\n        return\n    end\n    \n    -- Custom skin logic\n    inst:AddTag("royal_quality")\nend\n\nfunction my_item_royal_clear_fn(inst)\n    basic_clear_fn(inst, "my_item_default")\n    inst:RemoveTag("royal_quality")\nend\n\n-- 2. Register custom sounds if needed\nSKIN_SOUND_FX["my_item_royal"] = {\n    equip = "royal_item_equip",\n    genericuse = "royal_item_use"\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"complex-multi-component-skins",children:"Complex Multi-Component Skins"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- For items with multiple visual components\nfunction complex_item_init_fn(inst, build_name)\n    basic_init_fn(inst, build_name, "complex_item_default")\n    \n    -- Update related components\n    if inst.secondary_component then\n        inst.secondary_component.AnimState:SetSkin(build_name, "secondary_default")\n    end\n    \n    -- Update linked entities\n    if inst.attached_effect then\n        inst.attached_effect:SetSkin(build_name:gsub("item_", "effect_"))\n    end\nend\n'})}),"\n",(0,t.jsx)(e.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabskins",children:"Prefab Skins Data"}),": Skin definitions and mappings"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabs",children:"Prefabs"}),": Core prefab system"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"./skin_assets.md",children:"Skin Assets"}),": Asset management for skins"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"./characterutil.md",children:"Character Utilities"}),": Character-specific skin handling"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>a});var s=i(96540);const t={},l=s.createContext(t);function r(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),s.createElement(l.Provider,{value:e},n.children)}}}]);