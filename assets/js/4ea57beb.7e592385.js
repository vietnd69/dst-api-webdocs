"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6478],{5841:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-vanilla/development-tools/cicd-workflow","title":"CI/CD Workflow","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/development-tools/cicd-workflow.md","sourceDirName":"api-vanilla/development-tools","slug":"/api-vanilla/development-tools/cicd-workflow","permalink":"/dst-api-webdocs/docs/api-vanilla/development-tools/cicd-workflow","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":18,"frontMatter":{"id":"cicd-workflow","title":"CI/CD Workflow","sidebar_position":18,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Useful Extensions and Tools","permalink":"/dst-api-webdocs/docs/api-vanilla/development-tools/useful-extensions"},"next":{"title":"Integrating with Project Management Tools","permalink":"/dst-api-webdocs/docs/api-vanilla/development-tools/project-management"}}');var i=s(4848),o=s(8453);const a={id:"cicd-workflow",title:"CI/CD Workflow",sidebar_position:18,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="CI/CD Workflow for DST Mods",l={},d=[{value:"Understanding CI/CD for DST Mods",id:"understanding-cicd-for-dst-mods",level:2},{value:"What is CI/CD?",id:"what-is-cicd",level:3},{value:"Benefits for DST Modders",id:"benefits-for-dst-modders",level:3},{value:"Setting Up a Basic CI/CD Pipeline",id:"setting-up-a-basic-cicd-pipeline",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"GitHub Actions for DST Mods",id:"github-actions-for-dst-mods",level:3},{value:"Linting and Testing DST Mods",id:"linting-and-testing-dst-mods",level:2},{value:"Lua Linting with Luacheck",id:"lua-linting-with-luacheck",level:3},{value:"Unit Testing with Busted",id:"unit-testing-with-busted",level:3},{value:"Automating Mod Deployment",id:"automating-mod-deployment",level:2},{value:"Workshop Deployment with SteamCMD",id:"workshop-deployment-with-steamcmd",level:3},{value:"Advanced CI/CD Features",id:"advanced-cicd-features",level:2},{value:"Automated Version Bumping",id:"automated-version-bumping",level:3},{value:"Automated Release Notes",id:"automated-release-notes",level:3},{value:"CI/CD for Larger Mods",id:"cicd-for-larger-mods",level:2},{value:"Monorepo Structure",id:"monorepo-structure",level:3},{value:"Matrix Testing",id:"matrix-testing",level:3},{value:"Integrating with Project Management",id:"integrating-with-project-management",level:2},{value:"GitHub Issues Integration",id:"github-issues-integration",level:3},{value:"Automated Notifications",id:"automated-notifications",level:3},{value:"Best Practices for DST Mod CI/CD",id:"best-practices-for-dst-mod-cicd",level:2},{value:"Example Projects",id:"example-projects",level:2},{value:"Example Complete Workflow",id:"example-complete-workflow",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cicd-workflow-for-dst-mods",children:"CI/CD Workflow for DST Mods"})}),"\n",(0,i.jsx)(n.p,{children:"Continuous Integration and Continuous Deployment (CI/CD) practices can significantly improve the quality and release process of your Don't Starve Together mods. This guide will walk you through setting up an automated workflow that helps you test, build, and deploy your mods more efficiently."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-cicd-for-dst-mods",children:"Understanding CI/CD for DST Mods"}),"\n",(0,i.jsx)(n.h3,{id:"what-is-cicd",children:"What is CI/CD?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Continuous Integration (CI)"}),": Automatically testing code changes when they're pushed to your repository"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Continuous Deployment (CD)"}),": Automatically deploying successful builds to your users"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"benefits-for-dst-modders",children:"Benefits for DST Modders"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistency"}),": Ensure your mod works across different environments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Quality"}),": Catch bugs before they reach users"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Efficiency"}),": Automate repetitive tasks like testing and deployment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reliability"}),": Reduce human error in the release process"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Faster Updates"}),": Deliver fixes and features to users more quickly"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-a-basic-cicd-pipeline",children:"Setting Up a Basic CI/CD Pipeline"}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Your mod code in a Git repository (GitHub, GitLab, etc.)"}),"\n",(0,i.jsxs)(n.li,{children:["Basic understanding of Git (see ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/development-tools/git-integration",children:"Git Integration guide"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"A GitHub account (for GitHub Actions) or similar CI service"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"github-actions-for-dst-mods",children:"GitHub Actions for DST Mods"}),"\n",(0,i.jsx)(n.p,{children:"GitHub Actions is a free CI/CD service for GitHub repositories that's easy to set up:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a ",(0,i.jsx)(n.code,{children:".github/workflows"})," directory in your mod repository"]}),"\n",(0,i.jsxs)(n.li,{children:["Create a YAML file (e.g., ",(0,i.jsx)(n.code,{children:"ci.yml"}),") for your workflow configuration"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here's a basic workflow file for DST mods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: DST Mod CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Setup Lua\n        uses: leafo/gh-actions-lua@v8\n        with:\n          luaVersion: "5.1"\n          \n      - name: Setup Luarocks\n        uses: leafo/gh-actions-luarocks@v4\n        \n      - name: Install Luacheck\n        run: luarocks install luacheck\n        \n      - name: Run Luacheck\n        run: luacheck . --no-color -q\n\n  test:\n    needs: lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Setup Lua\n        uses: leafo/gh-actions-lua@v8\n        with:\n          luaVersion: "5.1"\n          \n      - name: Setup Luarocks\n        uses: leafo/gh-actions-luarocks@v4\n        \n      - name: Install Busted\n        run: luarocks install busted\n        \n      - name: Run Tests\n        run: busted -o TAP\n'})}),"\n",(0,i.jsx)(n.h2,{id:"linting-and-testing-dst-mods",children:"Linting and Testing DST Mods"}),"\n",(0,i.jsx)(n.h3,{id:"lua-linting-with-luacheck",children:"Lua Linting with Luacheck"}),"\n",(0,i.jsx)(n.p,{children:"Luacheck is a static analyzer that can catch common errors in your Lua code:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a ",(0,i.jsx)(n.code,{children:".luacheckrc"})," file in your mod's root directory:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- .luacheckrc\nstd = {\n    globals = {\n        "GLOBAL",\n        "TheWorld",\n        "ThePlayer",\n        "TheNet",\n        "TheSim",\n        "TUNING",\n        "STRINGS",\n        "ACTIONS",\n        "EQUIPSLOTS",\n        "RECIPETABS",\n        "TECH",\n        "SpawnPrefab",\n        "CreateEntity",\n        "AddComponent"\n    }\n}\n\n-- Ignore these patterns\nexclude_files = {\n    ".luarocks/*",\n    "lua_modules/*"\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Run Luacheck manually:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"luacheck .\n"})}),"\n",(0,i.jsx)(n.h3,{id:"unit-testing-with-busted",children:"Unit Testing with Busted"}),"\n",(0,i.jsx)(n.p,{children:"Busted is a testing framework for Lua that can help you write unit tests for your mod:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a ",(0,i.jsx)(n.code,{children:"spec"})," directory in your mod's root"]}),"\n",(0,i.jsxs)(n.li,{children:["Add test files with a ",(0,i.jsx)(n.code,{children:"_spec.lua"})," suffix"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Example test file (",(0,i.jsx)(n.code,{children:"spec/mymod_spec.lua"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'describe("MyMod", function()\n    it("should calculate damage correctly", function()\n        -- Require your mod\'s code\n        local mymod = require("mymod")\n        \n        -- Test your function\n        assert.are.equal(15, mymod.calculate_damage(10, 1.5))\n    end)\nend)\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Run tests manually:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"busted\n"})}),"\n",(0,i.jsx)(n.h2,{id:"automating-mod-deployment",children:"Automating Mod Deployment"}),"\n",(0,i.jsx)(n.h3,{id:"workshop-deployment-with-steamcmd",children:"Workshop Deployment with SteamCMD"}),"\n",(0,i.jsx)(n.p,{children:"You can automate uploading your mod to the Steam Workshop using SteamCMD:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a deployment script (",(0,i.jsx)(n.code,{children:"deploy.sh"}),"):"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# deploy.sh\n\n# Variables\nMOD_DIR="$1"\nWORKSHOP_ID="$2"\nSTEAM_USERNAME="$3"\nSTEAM_PASSWORD="$4"\n\n# Create temp directory for SteamCMD\nmkdir -p ./steamcmd_temp\ncd ./steamcmd_temp\n\n# Download SteamCMD if needed\nif [ ! -f "./steamcmd.sh" ]; then\n    wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\n    tar -xvzf steamcmd_linux.tar.gz\nfi\n\n# Create workshop upload script\ncat > workshop_upload.txt <<EOL\n@ShutdownOnFailedCommand 1\n@NoPromptForPassword 1\nlogin $STEAM_USERNAME $STEAM_PASSWORD\nworkshop_build_item "$MOD_DIR"\nquit\nEOL\n\n# Run SteamCMD with the upload script\n./steamcmd.sh +runscript workshop_upload.txt\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Add this to your GitHub Actions workflow:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'deploy:\n  needs: test\n  if: github.ref == \'refs/heads/main\'\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    \n    - name: Deploy to Workshop\n      run: |\n        chmod +x ./deploy.sh\n        ./deploy.sh "$PWD" "${{ secrets.WORKSHOP_ID }}" "${{ secrets.STEAM_USERNAME }}" "${{ secrets.STEAM_PASSWORD }}"\n      env:\n        WORKSHOP_ID: ${{ secrets.WORKSHOP_ID }}\n        STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}\n        STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": Store your Steam credentials as GitHub repository secrets for security."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-cicd-features",children:"Advanced CI/CD Features"}),"\n",(0,i.jsx)(n.h3,{id:"automated-version-bumping",children:"Automated Version Bumping"}),"\n",(0,i.jsxs)(n.p,{children:["Automatically update your mod's version in ",(0,i.jsx)(n.code,{children:"modinfo.lua"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'version-bump:\n  runs-on: ubuntu-latest\n  needs: test\n  if: github.ref == \'refs/heads/main\'\n  steps:\n    - uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n        \n    - name: Get commit count\n      id: commit_count\n      run: echo "::set-output name=count::$(git rev-list --count HEAD)"\n      \n    - name: Update version in modinfo.lua\n      run: |\n        sed -i "s/version = \\"[0-9.]*\\"/version = \\"1.0.${{ steps.commit_count.outputs.count }}\\"/" modinfo.lua\n        \n    - name: Commit version update\n      uses: stefanzweifel/git-auto-commit-action@v4\n      with:\n        commit_message: "Bump version to 1.0.${{ steps.commit_count.outputs.count }}"\n        file_pattern: modinfo.lua\n'})}),"\n",(0,i.jsx)(n.h3,{id:"automated-release-notes",children:"Automated Release Notes"}),"\n",(0,i.jsx)(n.p,{children:"Generate release notes from your commit messages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'release-notes:\n  runs-on: ubuntu-latest\n  needs: deploy\n  if: github.ref == \'refs/heads/main\'\n  steps:\n    - uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n        \n    - name: Generate Release Notes\n      id: release_notes\n      run: |\n        echo "NOTES<<EOF" >> $GITHUB_ENV\n        echo "# What\'s New" >> $GITHUB_ENV\n        echo "" >> $GITHUB_ENV\n        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_ENV\n        echo "" >> $GITHUB_ENV\n        echo "EOF" >> $GITHUB_ENV\n        \n    - name: Create Release\n      uses: actions/create-release@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tag_name: v1.0.${{ github.run_number }}\n        release_name: Release v1.0.${{ github.run_number }}\n        body: ${{ env.NOTES }}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"cicd-for-larger-mods",children:"CI/CD for Larger Mods"}),"\n",(0,i.jsx)(n.h3,{id:"monorepo-structure",children:"Monorepo Structure"}),"\n",(0,i.jsx)(n.p,{children:"For mods with multiple components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"my_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 feature1/\n\u2502   \u2502   \u251c\u2500\u2500 scripts/\n\u2502   \u2502   \u2514\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 feature2/\n\u2502       \u251c\u2500\u2500 scripts/\n\u2502       \u2514\u2500\u2500 tests/\n\u251c\u2500\u2500 .github/workflows/\n\u2502   \u2514\u2500\u2500 ci.yml\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 build.sh\n    \u2514\u2500\u2500 deploy.sh\n"})}),"\n",(0,i.jsx)(n.h3,{id:"matrix-testing",children:"Matrix Testing"}),"\n",(0,i.jsx)(n.p,{children:"Test across different configurations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"test:\n  runs-on: ubuntu-latest\n  strategy:\n    matrix:\n      lua-version: ['5.1', '5.2', '5.3']\n      include:\n        - lua-version: '5.1'\n          dst-compatible: true\n  steps:\n    - uses: actions/checkout@v2\n    \n    - name: Setup Lua\n      uses: leafo/gh-actions-lua@v8\n      with:\n        luaVersion: ${{ matrix.lua-version }}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"integrating-with-project-management",children:"Integrating with Project Management"}),"\n",(0,i.jsx)(n.h3,{id:"github-issues-integration",children:"GitHub Issues Integration"}),"\n",(0,i.jsx)(n.p,{children:"Link commits to issues for better tracking:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"issues:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    \n    - name: Parse Commit Messages\n      id: parse\n      run: |\n        ISSUES=$(git log --format=%B -n 1 ${{ github.sha }} | grep -o '#[0-9]\\+' | sed 's/#//g')\n        echo \"::set-output name=issues::$ISSUES\"\n    \n    - name: Add Labels to Issues\n      if: steps.parse.outputs.issues != ''\n      uses: actions/github-script@v4\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          const issues = '${{ steps.parse.outputs.issues }}'.split(' ');\n          for (const issue of issues) {\n            if (issue) {\n              github.issues.addLabels({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                issue_number: parseInt(issue),\n                labels: ['in-next-release']\n              });\n            }\n          }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"automated-notifications",children:"Automated Notifications"}),"\n",(0,i.jsx)(n.p,{children:"Send notifications to Discord when a new version is deployed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'notify:\n  runs-on: ubuntu-latest\n  needs: deploy\n  steps:\n    - name: Discord Notification\n      uses: sarisia/actions-status-discord@v1\n      with:\n        webhook: ${{ secrets.DISCORD_WEBHOOK }}\n        title: "New Mod Version Deployed!"\n        description: "Version 1.0.${{ github.run_number }} is now available on the Workshop!"\n        color: 0x0000FF\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-dst-mod-cicd",children:"Best Practices for DST Mod CI/CD"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Start Simple"}),": Begin with basic linting and testing before adding complex automation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Secure Credentials"}),": Always use repository secrets for sensitive information"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test Locally First"}),": Ensure your CI scripts work locally before committing them"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incremental Adoption"}),": Add CI/CD features gradually as your mod grows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Version Control Everything"}),": Include all CI/CD configuration in your repository"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document Your Process"}),": Add a section in your README explaining your CI/CD workflow"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-projects",children:"Example Projects"}),"\n",(0,i.jsx)(n.p,{children:"For reference, here are some DST mod projects that implement good CI/CD practices:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DST Mod Dev Tools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A mod that improves the development/testing experience"}),"\n",(0,i.jsx)(n.li,{children:"Features a well-structured GitHub Actions workflow"}),"\n",(0,i.jsxs)(n.li,{children:["GitHub Repository: ",(0,i.jsx)(n.a,{href:"https://github.com/dstmodders/mod-dev-tools",children:"dstmodders/mod-dev-tools"})]}),"\n",(0,i.jsxs)(n.li,{children:["Steam Workshop: ",(0,i.jsx)(n.a,{href:"https://steamcommunity.com/sharedfiles/filedetails/?id=2220506640",children:"Mod Dev Tools"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-complete-workflow",children:"Example Complete Workflow"}),"\n",(0,i.jsx)(n.p,{children:"Here's a complete example combining all the features discussed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: DST Mod CI/CD\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Lua\n        uses: leafo/gh-actions-lua@v8\n        with:\n          luaVersion: "5.1"\n      - name: Setup Luarocks\n        uses: leafo/gh-actions-luarocks@v4\n      - name: Install Luacheck\n        run: luarocks install luacheck\n      - name: Run Luacheck\n        run: luacheck . --no-color -q\n\n  test:\n    needs: lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Lua\n        uses: leafo/gh-actions-lua@v8\n        with:\n          luaVersion: "5.1"\n      - name: Setup Luarocks\n        uses: leafo/gh-actions-luarocks@v4\n      - name: Install Busted\n        run: luarocks install busted\n      - name: Run Tests\n        run: busted -o TAP\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Package Mod\n        run: |\n          mkdir -p ./dist\n          cp -r modinfo.lua modmain.lua scripts images anim ./dist/\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v2\n        with:\n          name: mod-package\n          path: ./dist\n\n  deploy:\n    needs: build\n    if: github.ref == \'refs/heads/main\'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Download Artifact\n        uses: actions/download-artifact@v2\n        with:\n          name: mod-package\n          path: ./dist\n      - name: Deploy to Workshop\n        run: |\n          chmod +x ./scripts/deploy.sh\n          ./scripts/deploy.sh "./dist" "${{ secrets.WORKSHOP_ID }}" "${{ secrets.STEAM_USERNAME }}" "${{ secrets.STEAM_PASSWORD }}"\n      - name: Create GitHub Release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: v1.0.${{ github.run_number }}\n          release_name: Release v1.0.${{ github.run_number }}\n          body: |\n            ## What\'s Changed\n            ${{ github.event.head_commit.message }}\n            \n            [Full Changelog](https://github.com/${{ github.repository }}/compare/v1.0.${{ github.run_number - 1 }}...v1.0.${{ github.run_number }})\n      - name: Discord Notification\n        uses: sarisia/actions-status-discord@v1\n        with:\n          webhook: ${{ secrets.DISCORD_WEBHOOK }}\n          title: "New Mod Version Deployed!"\n          description: "Version 1.0.${{ github.run_number }} is now available on the Workshop!"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/development-tools/git-integration",children:"Git Integration"})," - For version control setup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/development-tools/useful-extensions",children:"Useful Extensions and Tools"})," - For additional development tools"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api/testing-environment",children:"Testing Environment"})," - For setting up a testing environment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/development-tools/project-management",children:"Project Management Tools"})," - For integrating with project management"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);