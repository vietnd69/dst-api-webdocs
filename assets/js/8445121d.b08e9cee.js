"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[48267],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},30979:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>o,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"game-scripts/core-systems/data-management/utilities/scheduler","title":"Scheduler","description":"Thread and task scheduling system for coroutine-based execution control","source":"@site/docs/game-scripts/core-systems/data-management/utilities/scheduler.md","sourceDirName":"game-scripts/core-systems/data-management/utilities","slug":"/game-scripts/core-systems/data-management/utilities/scheduler","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/utilities/scheduler","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"scheduler","title":"Scheduler","description":"Thread and task scheduling system for coroutine-based execution control","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Platform Post Load","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/utilities/platformpostload"},"next":{"title":"Traps","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/utilities/traps"}}');var r=s(74848),t=s(28453);const l={id:"scheduler",title:"Scheduler",description:"Thread and task scheduling system for coroutine-based execution control",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="Scheduler",c={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Global Functions",id:"global-functions",level:2},{value:"StartThread(fn, id, param)",id:"start-thread",level:3},{value:"StartStaticThread(fn, id, param)",id:"start-static-thread",level:3},{value:"Sleep(time)",id:"sleep",level:3},{value:"Hibernate()",id:"hibernate",level:3},{value:"Wake()",id:"wake",level:3},{value:"WakeTask(task)",id:"wake-task",level:3},{value:"KillThread(task)",id:"kill-thread",level:3},{value:"KillThreadsWithID(id)",id:"kill-threads-with-id",level:3},{value:"Yield()",id:"yield",level:3},{value:"Global Objects",id:"global-objects",level:2},{value:"scheduler",id:"scheduler-global",level:3},{value:"staticScheduler",id:"static-scheduler-global",level:3},{value:"Classes",id:"classes",level:2},{value:"Task",id:"task-class",level:3},{value:"Properties",id:"properties",level:4},{value:"Methods",id:"methods",level:4},{value:"task(list)",id:"task-set-list",level:5},{value:"Periodic",id:"periodic-class",level:3},{value:"Properties",id:"properties-1",level:4},{value:"Methods",id:"methods-1",level:4},{value:"periodic()",id:"periodic-cancel",level:5},{value:"periodic()",id:"periodic-next-time",level:5},{value:"Scheduler",id:"scheduler-class",level:3},{value:"Methods",id:"methods-2",level:4},{value:"scheduler(fn, id, param)",id:"scheduler-add-task",level:5},{value:"scheduler(timefromnow, fn, id, ...)",id:"scheduler-execute-in-time",level:5},{value:"scheduler(period, fn, limit, initialdelay, id, ...)",id:"scheduler-execute-periodic",level:5},{value:"scheduler(id)",id:"scheduler-kill-tasks-with-id",level:5},{value:"scheduler()",id:"scheduler-get-current-task",level:5},{value:"Constants",id:"constants",level:2},{value:"HIBERNATE",id:"hibernate-constant",level:3},{value:"SLEEP",id:"sleep-constant",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Delayed Execution",id:"delayed-execution",level:3},{value:"Periodic Tasks",id:"periodic-tasks",level:3},{value:"Thread Communication",id:"thread-communication",level:3},{value:"Cleanup Pattern",id:"cleanup-pattern",level:3},{value:"Related Modules",id:"related-modules",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"scheduler",children:"Scheduler"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"scheduler"})," module provides a comprehensive coroutine-based task scheduling system for Don't Starve Together. It manages thread execution, task timing, and periodic operations through two main schedulers: a regular scheduler for game-time operations and a static scheduler for real-time operations."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Start a simple thread\nlocal task = StartThread(function()\n    print("Thread started")\n    Sleep(5) -- Sleep for 5 seconds\n    print("Thread resumed after 5 seconds")\nend, "example_thread")\n\n-- Execute a function after delay\nscheduler:ExecuteInTime(2.0, function()\n    print("Executed after 2 seconds")\nend, "delayed_execution")\n\n-- Execute periodic function\nlocal periodic = scheduler:ExecutePeriodic(1.0, function()\n    print("Executed every second")\nend, 5, nil, "periodic_task") -- Run 5 times\n'})}),"\n",(0,r.jsx)(n.h2,{id:"global-functions",children:"Global Functions"}),"\n",(0,r.jsx)(n.h3,{id:"start-thread",children:"StartThread(fn, id, param)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates and starts a new thread in the main scheduler."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (function): The function to execute in the thread"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (string): Optional identifier for the thread"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"param"})," (any): Optional parameter passed to the function"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Task): The created task object"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local task = StartThread(function(param)\n    print("Thread parameter:", param)\n    Sleep(1)\n    print("Thread completed")\nend, "my_thread", "hello")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"start-static-thread",children:"StartStaticThread(fn, id, param)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates and starts a new thread in the static scheduler (real-time based)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (function): The function to execute in the thread"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (string): Optional identifier for the thread"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"param"})," (any): Optional parameter passed to the function"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Task): The created task object"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local static_task = StartStaticThread(function()\n    print("Static thread running")\n    Sleep(2)\n    print("Static thread finished")\nend, "static_thread")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sleep",children:"Sleep(time)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nSuspends the current thread for the specified time duration."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"time"})," (number): Time to sleep in seconds"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'StartThread(function()\n    print("Before sleep")\n    Sleep(3.5) -- Sleep for 3.5 seconds\n    print("After sleep")\nend, "sleep_example")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"hibernate",children:"Hibernate()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nPuts the current thread into hibernation state until explicitly woken."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local hibernating_task = StartThread(function()\n    print("Going to hibernate")\n    Hibernate()\n    print("Woken from hibernation")\nend, "hibernate_example")\n\n-- Wake the task later\nWakeTask(hibernating_task)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"wake",children:"Wake()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nWakes the current hibernating thread and moves it to running state."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'StartThread(function()\n    Hibernate()\n    Wake() -- Wake self\n    print("Self-woken thread")\nend, "self_wake")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"wake-task",children:"WakeTask(task)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nWakes a specific hibernating task."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"task"})," (Task): The task to wake up"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local sleeping_task = StartThread(function()\n    print("Going to hibernate")\n    Hibernate()\n    print("I\'ve been woken up!")\nend, "sleeping_task")\n\n-- Wake it after 2 seconds\nscheduler:ExecuteInTime(2.0, function()\n    WakeTask(sleeping_task)\nend, "wake_caller")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"kill-thread",children:"KillThread(task)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nForcibly terminates a running task."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"task"})," (Task): The task to terminate"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local long_task = StartThread(function()\n    while true do\n        print("Running...")\n        Sleep(1)\n    end\nend, "long_running")\n\n-- Kill it after 5 seconds\nscheduler:ExecuteInTime(5.0, function()\n    KillThread(long_task)\n    print("Long task terminated")\nend, "killer")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"kill-threads-with-id",children:"KillThreadsWithID(id)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nTerminates all threads with the specified ID."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (string): The ID of threads to terminate"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Start multiple threads with same ID\nfor i = 1, 3 do\n    StartThread(function()\n        while true do\n            print("Worker", i)\n            Sleep(1)\n        end\n    end, "worker_threads")\nend\n\n-- Kill all worker threads\nKillThreadsWithID("worker_threads")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"yield",children:"Yield()"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nYields execution to allow other threads to run, resuming on the next tick."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'StartThread(function()\n    for i = 1, 5 do\n        print("Iteration", i)\n        Yield() -- Let other threads run\n    end\nend, "yielding_thread")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"global-objects",children:"Global Objects"}),"\n",(0,r.jsx)(n.h3,{id:"scheduler-global",children:"scheduler"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"Scheduler"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," The main game-time scheduler instance."]}),"\n",(0,r.jsx)(n.h3,{id:"static-scheduler-global",children:"staticScheduler"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"Scheduler"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," The static real-time scheduler instance."]}),"\n",(0,r.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsx)(n.h3,{id:"task-class",children:"Task"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRepresents a single threaded task with coroutine execution."]}),"\n",(0,r.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"guid"})," (number): Unique identifier for the task"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (string): User-defined task identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (function): The function being executed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"co"})," (coroutine): The coroutine object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"param"})," (any): Parameter passed to the function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"list"})," (table): Current list containing this task"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(n.h5,{id:"task-set-list",children:["task",":SetList","(list)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nMoves the task to a different execution list."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"list"})," (table): The target list or nil to remove from current list"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"periodic-class",children:"Periodic"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nRepresents a periodic task that executes at regular intervals."]}),"\n",(0,r.jsx)(n.h4,{id:"properties-1",children:"Properties"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (function): Function to execute periodically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"period"})," (number): Time interval between executions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limit"})," (number): Maximum number of executions (nil for infinite)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nexttick"})," (number): Next tick when the function will execute"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onfinish"})," (function): Callback when periodic task completes"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"methods-1",children:"Methods"}),"\n",(0,r.jsxs)(n.h5,{id:"periodic-cancel",children:["periodic",":Cancel","()"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCancels the periodic task and removes it from scheduling."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local periodic = scheduler:ExecutePeriodic(1.0, function()\n    print("Periodic task")\nend, nil, nil, "cancelable_task")\n\n-- Cancel after 5 seconds\nscheduler:ExecuteInTime(5.0, function()\n    periodic:Cancel()\n    print("Periodic task cancelled")\nend, "canceller")\n'})}),"\n",(0,r.jsxs)(n.h5,{id:"periodic-next-time",children:["periodic",":NextTime","()"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nReturns the game time when this periodic task will next execute."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(number): Next execution time in game seconds"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scheduler-class",children:"Scheduler"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nThe main scheduler class that manages task execution and timing."]}),"\n",(0,r.jsx)(n.h4,{id:"methods-2",children:"Methods"}),"\n",(0,r.jsxs)(n.h5,{id:"scheduler-add-task",children:["scheduler",":AddTask","(fn, id, param)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates and adds a new task to the scheduler."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (function): Function to execute"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (string): Task identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"param"})," (any): Parameter for the function"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Task): The created task"}),"\n"]}),"\n",(0,r.jsxs)(n.h5,{id:"scheduler-execute-in-time",children:["scheduler",":ExecuteInTime","(timefromnow, fn, id, ...)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nExecutes a function once after the specified delay."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timefromnow"})," (number): Delay in seconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (function): Function to execute"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (string): Optional identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"..."}),": Additional arguments for the function"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Periodic): Periodic object representing the scheduled execution"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'scheduler:ExecuteInTime(3.0, function(message)\n    print("Delayed message:", message)\nend, "delayed_print", "Hello World!")\n'})}),"\n",(0,r.jsxs)(n.h5,{id:"scheduler-execute-periodic",children:["scheduler",":ExecutePeriodic","(period, fn, limit, initialdelay, id, ...)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nExecutes a function periodically at specified intervals."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"period"})," (number): Time between executions in seconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (function): Function to execute"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limit"})," (number): Maximum executions (nil for infinite)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"initialdelay"})," (number): Delay before first execution (defaults to period)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (string): Optional identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"..."}),": Additional arguments for the function"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Periodic): Periodic object for controlling the execution"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local counter = 0\nlocal periodic = scheduler:ExecutePeriodic(1.0, function()\n    counter = counter + 1\n    print("Count:", counter)\nend, 10, 0.5, "counter_task") -- Run 10 times, start after 0.5 seconds\n'})}),"\n",(0,r.jsxs)(n.h5,{id:"scheduler-kill-tasks-with-id",children:["scheduler",":KillTasksWithID","(id)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nTerminates all tasks with the specified identifier."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," (string): The identifier of tasks to kill"]}),"\n"]}),"\n",(0,r.jsxs)(n.h5,{id:"scheduler-get-current-task",children:["scheduler",":GetCurrentTask","()"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nReturns the currently executing task within a thread context."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(Task): The current task or nil if not in a thread"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'StartThread(function()\n    local current = scheduler:GetCurrentTask()\n    print("Current task ID:", current.id)\nend, "self_aware_task")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,r.jsx)(n.h3,{id:"hibernate-constant",children:"HIBERNATE"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Value:"})," ",(0,r.jsx)(n.code,{children:'"hibernate"'})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Yield type constant for hibernating threads."]}),"\n",(0,r.jsx)(n.h3,{id:"sleep-constant",children:"SLEEP"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Value:"})," ",(0,r.jsx)(n.code,{children:'"sleep"'})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Yield type constant for sleeping threads."]}),"\n",(0,r.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"delayed-execution",children:"Delayed Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Execute something after a delay\nscheduler:ExecuteInTime(5.0, function()\n    print("5 seconds have passed")\nend, "timer")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"periodic-tasks",children:"Periodic Tasks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Health regeneration every 2 seconds, 10 times\nlocal regen = scheduler:ExecutePeriodic(2.0, function(inst)\n    if inst.components.health then\n        inst.components.health:DoDelta(5)\n    end\nend, 10, nil, "health_regen", inst)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"thread-communication",children:"Thread Communication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local worker_task = StartThread(function()\n    print("Worker starting")\n    Hibernate() -- Wait for signal\n    print("Worker received signal")\nend, "worker")\n\n-- Signal the worker after some condition\nscheduler:ExecuteInTime(3.0, function()\n    WakeTask(worker_task)\nend, "signaler")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cleanup-pattern",children:"Cleanup Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local cleanup_tasks = {}\n\n-- Start multiple tasks\nfor i = 1, 5 do\n    cleanup_tasks[i] = StartThread(function()\n        -- Do work\n        while true do\n            print("Working", i)\n            Sleep(1)\n        end\n    end, "cleanup_example")\nend\n\n-- Clean them all up later\nscheduler:ExecuteInTime(10.0, function()\n    for _, task in ipairs(cleanup_tasks) do\n        KillThread(task)\n    end\nend, "cleanup")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./class.md",children:"Class"}),": Base class system used by scheduler components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./mainfunctions.md",children:"Main Functions"}),": Core game loop that drives scheduler execution"]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);