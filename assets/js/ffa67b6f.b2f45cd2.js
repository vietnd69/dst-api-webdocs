"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[85825],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(96540);const r={},c=i.createContext(r);function t(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(c.Provider,{value:n},e.children)}},68242:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"game-scripts/core-systems/game-mechanics/crafting/techtree","title":"TechTree","description":"Technology tree system for managing crafting station requirements and research levels","source":"@site/docs/game-scripts/core-systems/game-mechanics/crafting/techtree.md","sourceDirName":"game-scripts/core-systems/game-mechanics/crafting","slug":"/game-scripts/core-systems/game-mechanics/crafting/techtree","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/crafting/techtree","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"techtree","title":"TechTree","description":"Technology tree system for managing crafting station requirements and research levels","sidebar_position":3,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"}}');var r=s(74848),c=s(28453);const t={id:"techtree",title:"TechTree",description:"Technology tree system for managing crafting station requirements and research levels",sidebar_position:3,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="TechTree",a={},h=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Constants",id:"constants",level:2},{value:"AVAILABLE_TECH",id:"available_tech",level:3},{value:"BONUS_TECH",id:"bonus_tech",level:3},{value:"Cached Performance Tables",id:"cached-performance-tables",level:3},{value:"Functions",id:"functions",level:2},{value:"Create(t)",id:"create",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Checking Technology Requirements",id:"checking-technology-requirements",level:3},{value:"Technology Progression",id:"technology-progression",level:3},{value:"Bonus Technology Handling",id:"bonus-technology-handling",level:3},{value:"Integration with Game Systems",id:"integration-with-game-systems",level:2},{value:"Recipe System",id:"recipe-system",level:3},{value:"Builder Component",id:"builder-component",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Source Reference",id:"source-reference",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"techtree",children:"TechTree"})}),"\n",(0,r.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Build Version"}),(0,r.jsx)(n.th,{children:"Change Date"}),(0,r.jsx)(n.th,{children:"Change Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"676042"}),(0,r.jsx)(n.td,{children:"2025-06-21"}),(0,r.jsx)(n.td,{children:"stable"}),(0,r.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"TechTree"})," module manages the technology system in Don't Starve Together, defining available technology types and their relationships. It provides the foundation for crafting requirements and research progression across different crafting stations and game mechanics."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local TechTree = require("techtree")\n\n-- Create a new tech tree with default values\nlocal player_tech = TechTree.Create()\n\n-- Access available tech types\nfor i, tech_type in ipairs(TechTree.AVAILABLE_TECH) do\n    print("Available tech:", tech_type)\nend\n\n-- Check if a tech can have bonuses\nfor i, tech_type in ipairs(TechTree.BONUS_TECH) do\n    print("Bonus tech:", tech_type)\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,r.jsx)(n.h3,{id:"available_tech",children:"AVAILABLE_TECH"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"table"})," (array)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Array containing all available technology types in the game. Each technology type represents a different crafting category or research area."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Available Technology Types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"SCIENCE"'})," - Science Machine and related structures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"MAGIC"'})," - Shadow Manipulator and magic items"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"ANCIENT"'})," - Ancient Pseudoscience Station"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"CELESTIAL"'})," - Celestial Station and moon items"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"MOON_ALTAR"'})," - ",(0,r.jsx)(n.strong,{children:"Deprecated"})," - Moved to CELESTIAL"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"SHADOW"'})," - Shadow crafting station"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"CARTOGRAPHY"'})," - Map-related crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"SEAFARING"'})," - Boat and ocean-related crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"SCULPTING"'})," - Potter's Wheel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"ORPHANAGE"'})," - Special tech type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"PERDOFFERING"'})," - Perd shrine offerings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"WARGOFFERING"'})," - Warg shrine offerings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"PIGOFFERING"'})," - Pig shrine offerings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"CARRATOFFERING"'})," - Carrat shrine offerings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"BEEFOFFERING"'})," - Beef shrine offerings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"CATCOONOFFERING"'})," - Catcoon shrine offerings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"RABBITOFFERING"'})," - Rabbit shrine offerings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"DRAGONOFFERING"'})," - Dragon shrine offerings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"MADSCIENCE"'})," - Mad Science crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"CARNIVAL_PRIZESHOP"'})," - Carnival prize shop"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"CARNIVAL_HOSTSHOP"'})," - Carnival host shop"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"FOODPROCESSING"'})," - Food processing stations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"FISHING"'})," - Fishing-related crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"WINTERSFEASTCOOKING"'})," - Winter's Feast cooking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"HERMITCRABSHOP"'})," - Hermit Crab shop"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"RABBITKINGSHOP"'})," - Rabbit King shop"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"WANDERINGTRADERSHOP"'})," - Wandering Trader shop"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"WAGPUNK_WORKSTATION"'})," - Wagpunk crafting station"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"TURFCRAFTING"'})," - Turf crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"MASHTURFCRAFTING"'})," - Mash turf crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"SPIDERCRAFT"'})," - Spider crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"ROBOTMODULECRAFT"'})," - Robot module crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"BOOKCRAFT"'})," - Book crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"LUNARFORGING"'})," - Lunar forging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"SHADOWFORGING"'})," - Shadow forging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"CARPENTRY"'})," - Carpentry crafting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"WORMOFFERING"'})," - Worm shrine offerings"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Iterate through all available tech types\nfor i, tech_type in ipairs(TechTree.AVAILABLE_TECH) do\n    print("Tech type " .. i .. ": " .. tech_type)\nend\n\n-- Check if a specific tech exists\nlocal function HasTechType(tech_name)\n    for _, v in ipairs(TechTree.AVAILABLE_TECH) do\n        if v == tech_name then\n            return true\n        end\n    end\n    return false\nend\n\nif HasTechType("SCIENCE") then\n    print("Science tech is available")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"bonus_tech",children:"BONUS_TECH"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"table"})," (array)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," Array containing technology types that can receive bonus levels. Only these technologies support temporary bonuses and enhanced research levels."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bonus-Capable Technologies:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"SCIENCE"'})," - Science station bonuses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"MAGIC"'})," - Magic station bonuses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"SEAFARING"'})," - Seafaring bonuses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"ANCIENT"'})," - Ancient station bonuses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"MASHTURFCRAFTING"'})," - Mash turf crafting bonuses"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Check if a technology supports bonuses\nlocal function CanHaveBonus(tech_type)\n    for _, v in ipairs(TechTree.BONUS_TECH) do\n        if v == tech_type then\n            return true\n        end\n    end\n    return false\nend\n\nif CanHaveBonus("SCIENCE") then\n    print("Science tech can have bonuses applied")\nend\n\nif not CanHaveBonus("FISHING") then\n    print("Fishing tech cannot have bonuses")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cached-performance-tables",children:"Cached Performance Tables"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"})," The following tables are performance optimizations for builder component calculations. These are implementation details and may change in future versions."]}),"\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Warning:"})," Mod developers should avoid using these cached tables directly as they are not guaranteed to exist in future versions."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Available Cached Tables:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AVAILABLE_TECH_BONUS"})," - Tech bonus string cache"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AVAILABLE_TECH_TEMPBONUS"})," - Tech temporary bonus string cache"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AVAILABLE_TECH_BONUS_CLASSIFIED"})," - Classified bonus string cache"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AVAILABLE_TECH_TEMPBONUS_CLASSIFIED"})," - Classified temporary bonus string cache"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AVAILABLE_TECH_LEVEL_CLASSIFIED"})," - Classified level string cache"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h3,{id:"create",children:"Create(t)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Status:"})," ",(0,r.jsx)(n.code,{children:"stable"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description:"}),"\nCreates and initializes a new technology tree table with default values. All available technology types are set to level 0 unless specified in the input table."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"t"})," (table, optional): Existing table to initialize. If not provided, creates a new empty table."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"(table): Technology tree table with all available tech types initialized to 0 or existing values"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Create a new tech tree with default values\nlocal tech_tree = TechTree.Create()\nprint(tech_tree.SCIENCE) -- Output: 0\nprint(tech_tree.MAGIC)   -- Output: 0\n\n-- Create with some preset values\nlocal custom_tech = TechTree.Create({\n    SCIENCE = 1,\n    MAGIC = 2\n})\nprint(custom_tech.SCIENCE)    -- Output: 1\nprint(custom_tech.MAGIC)      -- Output: 2\nprint(custom_tech.ANCIENT)    -- Output: 0 (default)\n\n-- Modify existing tech tree\nlocal existing_tech = { SCIENCE = 3 }\nlocal updated_tech = TechTree.Create(existing_tech)\nprint(updated_tech.SCIENCE)   -- Output: 3\nprint(updated_tech.MAGIC)     -- Output: 0 (added by Create)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"checking-technology-requirements",children:"Checking Technology Requirements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Check if player meets crafting requirements\nlocal function MeetsRequirements(player_tech, required_tech)\n    for tech_type, required_level in pairs(required_tech) do\n        if (player_tech[tech_type] or 0) < required_level then\n            return false\n        end\n    end\n    return true\nend\n\nlocal player_tech = TechTree.Create({ SCIENCE = 1, MAGIC = 2 })\nlocal recipe_requirements = { SCIENCE = 1, MAGIC = 1 }\n\nif MeetsRequirements(player_tech, recipe_requirements) then\n    print("Can craft this item!")\nend\n'})}),"\n",(0,r.jsx)(n.h3,{id:"technology-progression",children:"Technology Progression"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Advance technology level\nlocal function AdvanceTech(tech_tree, tech_type, levels)\n    if tech_tree[tech_type] then\n        tech_tree[tech_type] = tech_tree[tech_type] + (levels or 1)\n    end\nend\n\nlocal player_tech = TechTree.Create()\nAdvanceTech(player_tech, "SCIENCE", 1)  -- Science level 0 -> 1\nAdvanceTech(player_tech, "MAGIC", 2)    -- Magic level 0 -> 2\n\nprint("Science level:", player_tech.SCIENCE)  -- Output: 1\nprint("Magic level:", player_tech.MAGIC)      -- Output: 2\n'})}),"\n",(0,r.jsx)(n.h3,{id:"bonus-technology-handling",children:"Bonus Technology Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Apply temporary bonuses only to supported tech types\nlocal function ApplyTechBonus(tech_tree, tech_type, bonus_amount)\n    -- Check if this tech type supports bonuses\n    for _, bonus_tech in ipairs(TechTree.BONUS_TECH) do\n        if bonus_tech == tech_type then\n            local bonus_key = tech_type .. "_BONUS"\n            tech_tree[bonus_key] = (tech_tree[bonus_key] or 0) + bonus_amount\n            return true\n        end\n    end\n    return false  -- Tech type doesn\'t support bonuses\nend\n\nlocal player_tech = TechTree.Create()\nif ApplyTechBonus(player_tech, "SCIENCE", 1) then\n    print("Applied science bonus")\nelse\n    print("Cannot apply bonus to this tech type")\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-game-systems",children:"Integration with Game Systems"}),"\n",(0,r.jsx)(n.h3,{id:"recipe-system",children:"Recipe System"}),"\n",(0,r.jsx)(n.p,{children:"The TechTree module integrates with the recipe system to determine crafting requirements:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Example of how recipes might use tech requirements\nlocal example_recipe = {\n    ingredients = { { "twigs", 2 }, { "flint", 1 } },\n    tech = { SCIENCE = 1 },  -- Requires Science level 1\n    builder_tag = "science"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"builder-component",children:"Builder Component"}),"\n",(0,r.jsxs)(n.p,{children:["The cached tables optimize performance in the builder component's ",(0,r.jsx)(n.code,{children:"KnowsRecipe"})," calculations, reducing string allocation overhead during frequent recipe checks."]}),"\n",(0,r.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/crafting/recipe",children:"Recipe"}),": Uses tech requirements for crafting validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../components/builder.md",children:"Builder Component"}),": Implements tech requirement checking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/crafting/recipes",children:"Recipes"}),": Contains individual recipe definitions with tech requirements"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"source-reference",children:"Source Reference"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"})," ",(0,r.jsx)(n.code,{children:"scripts/techtree.lua"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Implementation Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Performance optimization through cached string tables"}),"\n",(0,r.jsx)(n.li,{children:"Backward compatibility maintained for mod support"}),"\n",(0,r.jsx)(n.li,{children:"Clear separation between bonus-capable and standard tech types"}),"\n",(0,r.jsx)(n.li,{children:"Deprecated MOON_ALTAR tech type maintained for compatibility"}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);