"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6315],{181:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api-vanilla/global-objects/thesim","title":"TheSim","description":"TheSim is a global object that provides access to the game\'s simulation engine, offering functionality for working with the file system, finding entities, playing sounds, and more low-level operations.","source":"@site/docs/api-vanilla/global-objects/thesim.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/thesim","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/thesim","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"thesim","title":"TheSim","sidebar_position":5},"sidebar":"docs","previous":{"title":"TheNet","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/thenet"},"next":{"title":"GLOBAL","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/global"}}');var a=i(4848),s=i(8453);const l={id:"thesim",title:"TheSim",sidebar_position:5},r="TheSim",o={},c=[{value:"File System Operations",id:"file-system-operations",level:2},{value:"Entity Management",id:"entity-management",level:2},{value:"Sound and Visual Effects",id:"sound-and-visual-effects",level:2},{value:"Prefab Management",id:"prefab-management",level:2},{value:"Networking and Performance",id:"networking-and-performance",level:2},{value:"Time and Scheduling",id:"time-and-scheduling",level:2},{value:"Game Environment",id:"game-environment",level:2},{value:"Translation and Localization",id:"translation-and-localization",level:2},{value:"Debugging and Error Handling",id:"debugging-and-error-handling",level:2},{value:"Screen and Input",id:"screen-and-input",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"thesim",children:"TheSim"})}),"\n",(0,a.jsx)(n.p,{children:"TheSim is a global object that provides access to the game's simulation engine, offering functionality for working with the file system, finding entities, playing sounds, and more low-level operations."}),"\n",(0,a.jsx)(n.h2,{id:"file-system-operations",children:"File System Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if a file exists\nlocal exists = TheSim:GetPersistentString("mymod_config", function(success, str)\n    if success then\n        print("File exists with content: " .. str)\n    else\n        print("File does not exist")\n    end\nend)\n\n-- Save data persistently\nTheSim:SetPersistentString("mymod_config", "some_data_to_save", false)\n\n-- Delete a persistent string\nTheSim:ErasePersistentString("mymod_config", callback)\n\n-- Get file list in a directory\nlocal files = TheSim:GetFileList("scripts/prefabs/")\nfor _, file in ipairs(files) do\n    print(file)\nend\n\n-- Save/load data in a cluster (multi-server setup)\nTheSim:SetPersistentStringInClusterSlot(slot_num, "Master", "mymod_config", data, false, callback)\nTheSim:GetPersistentStringInClusterSlot(slot_num, "Master", "mymod_config", callback)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"entity-management",children:"Entity Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Find entities in a radius around a point\nlocal x, y, z = inst.Transform:GetWorldPosition()\nlocal radius = 10\nlocal ents = TheSim:FindEntities(x, y, z, radius, {"tree"}, {"burnt"})\n\n-- Count entities in a radius\nlocal count = TheSim:CountEntities(x, y, z, radius, {"tag1"}, {"tag2"})\n\n-- Find the first entity with a tag\nlocal entity = TheSim:FindFirstEntityWithTag("player")\n\n-- Project a point onto the ground\nlocal success, px, py, pz = TheSim:ProjectPointToTerrain(x, y, z)\nif success then\n    -- Use projected point\nend\n\n-- Create an entity\nlocal entity = TheSim:CreateEntity()\n\n-- Spawn a prefab\nlocal guid = TheSim:SpawnPrefab("log", skin_name, skin_id, creator_id)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"sound-and-visual-effects",children:"Sound and Visual Effects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Play a sound without an entity\nTheSim:PlaySound("dontstarve/common/dropGeneric")\n\n-- Create a particle effect\nlocal fx = SpawnPrefab("fx_effect")\nfx.Transform:SetPosition(x, y, z)\n\n-- Set ambient color\nTheSim:SetAmbientColour(r, g, b)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"prefab-management",children:"Prefab Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Register a prefab\nTheSim:RegisterPrefab(prefab_name, assets, dependencies)\n\n-- Load prefabs\nTheSim:LoadPrefabs({"prefab1", "prefab2"})\n\n-- Unload prefabs\nTheSim:UnloadPrefabs({"prefab1", "prefab2"})\n\n-- Unregister prefabs\nTheSim:UnregisterPrefabs({"prefab1", "prefab2"})\n\n-- Verify file exists\nTheSim:AddBatchVerifyFileExists("path/to/file.lua")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"networking-and-performance",children:"Networking and Performance"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get network statistics\nlocal sent, recv = TheSim:GetNetworkStatistics()\n\n-- Get FPS information\nlocal fps = TheSim:GetFPS()\nlocal memory = TheSim:GetMemoryUsage()\n\n-- Set time scale (game speed)\nTheSim:SetTimeScale(1.0) -- Normal speed\nTheSim:SetTimeScale(2.0) -- Double speed\nlocal current_speed = TheSim:GetTimeScale()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"time-and-scheduling",children:"Time and Scheduling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get real-world time (in milliseconds)\nlocal time_ms = TheSim:GetRealTime()\nlocal time_seconds = TheSim:GetRealTime() / 1000\n\n-- Get simulation time step\nlocal ticktime = TheSim:GetTickTime()\n\n-- Get current tick\nlocal tick = TheSim:GetTick()\nlocal static_tick = TheSim:GetStaticTick()\n\n-- Convert ticks to time\nlocal time = TheSim:GetTick() * TheSim:GetTickTime()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"game-environment",children:"Game Environment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Check if running on a dedicated server\nlocal is_dedicated = TheSim:IsDedicatedServer()\n\n-- Get client-specific information\nlocal client_id = TheSim:GetUserId()\n\n-- Check permissions\nlocal can_write = TheSim:CanWriteConfigurationDirectory()\nlocal can_read = TheSim:CanReadConfigurationDirectory()\nlocal has_log = TheSim:HasValidLogFile()\nlocal has_space = TheSim:HasEnoughFreeDiskSpace()\n\n-- DLC management\nTheSim:SetDLCEnabled(dlc_index, true)\nlocal is_enabled = TheSim:IsDLCEnabled(dlc_index)\nlocal is_installed = TheSim:IsDLCInstalled(dlc_index)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"translation-and-localization",children:"Translation and Localization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Get translated string\nlocal translated = TheSim:GetTranslatedString(STRINGS.NAMES.CARROT)\n\n-- Font management\nTheSim:LoadFont("filename.ttf", "font_alias", disable_color)\nTheSim:SetupFontFallbacks("font_alias", "fallback_font")\nTheSim:AdjustFontAdvance("font_alias", advance_adjustment)\nTheSim:UnloadFont("font_alias")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"debugging-and-error-handling",children:"Debugging and Error Handling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Debug rendering\nTheSim:SetDebugRenderEnabled(true)\n\n-- Print texture information\nTheSim:PrintTextureInfo("texture_name")\n\n-- Reset error state\nTheSim:ResetError()\n\n-- Force application to quit\nTheSim:ForceAbort()\nTheSim:Quit()\n\n-- Send hardware statistics\nTheSim:SendHardwareStats()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"screen-and-input",children:"Screen and Input"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Project screen position to world coordinates\nlocal x, y, z = TheSim:ProjectScreenPos(screen_x, screen_y)\n\n-- Get mouse position\nlocal x, y, z = TheSim:GetPosition()\n\n-- Set game settings\nTheSim:SetSetting("misc", "controller_popup", "false")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Server vs. Client"}),": Some TheSim functions behave differently on servers versus clients"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance Impact"}),": Many TheSim functions access low-level systems and should be used sparingly"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Asynchronous Operations"}),": File operations are asynchronous and use callbacks to return results"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Thread Safety"}),": Be careful with operations that might execute across different threads"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Engine Access"}),": TheSim provides direct access to the game engine, use with caution"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configuration Storage"}),": Saving and loading mod configuration"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Entity Queries"}),": Finding entities in the world based on tags and distance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Time Management"}),": Accessing and controlling game time"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"File System Access"}),": Reading and writing files"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance Monitoring"}),": Tracking memory usage and frame rates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Sound Effects"}),": Playing sounds without an associated entity"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var t=i(6540);const a={},s=t.createContext(a);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);