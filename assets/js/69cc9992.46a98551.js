"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[6061],{7320:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-vanilla/examples/case-regorgeitaled","title":"Case Study - Re-Gorge-itated Mod","description":"This case study examines the implementation of the Re-Gorge-itated mod, which brings back and expands \\"The Gorge\\" limited-time event in Don\'t Starve Together as a permanent, feature-rich game mode.","source":"@site/docs/api-vanilla/examples/case-regorgeitaled.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/case-regorgeitaled","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-regorgeitaled","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"case-regorgeitaled","title":"Case Study - Re-Gorge-itated Mod","sidebar_position":5},"sidebar":"docs","previous":{"title":"Island Adventures Case Studies Relationship","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/island-adventures-relationship"},"next":{"title":"Case Study - Global Position CompleteSync Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-global-position"}}');var s=i(4848),o=i(8453);const a={id:"case-regorgeitaled",title:"Case Study - Re-Gorge-itated Mod",sidebar_position:5},r="Case Study: Re-Gorge-itated Mod",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Components",id:"key-components",level:2},{value:"Game Mode Architecture",id:"game-mode-architecture",level:3},{value:"Cooking and Recipe System",id:"cooking-and-recipe-system",level:3},{value:"Character Ability System",id:"character-ability-system",level:3},{value:"Voting System",id:"voting-system",level:3},{value:"UI Customization",id:"ui-customization",level:3},{value:"World State Management",id:"world-state-management",level:3},{value:"Special Events Integration",id:"special-events-integration",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Mod Configuration",id:"mod-configuration",level:3},{value:"Network Synchronization",id:"network-synchronization",level:3},{value:"Mod Compatibility",id:"mod-compatibility",level:3},{value:"Technical Innovations",id:"technical-innovations",level:2},{value:"Custom Game Logic",id:"custom-game-logic",level:3},{value:"Learning Points",id:"learning-points",level:2},{value:"Event Recreation",id:"event-recreation",level:3},{value:"Game Mode Implementation",id:"game-mode-implementation",level:3},{value:"Networking and Multiplayer",id:"networking-and-multiplayer",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"case-study-re-gorge-itated-mod",children:"Case Study: Re-Gorge-itated Mod"})}),"\n",(0,s.jsx)(n.p,{children:'This case study examines the implementation of the Re-Gorge-itated mod, which brings back and expands "The Gorge" limited-time event in Don\'t Starve Together as a permanent, feature-rich game mode.'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://gitlab.com/CunningFox146/regorgeitaled",children:"Gitlab"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://steamcommunity.com/sharedfiles/filedetails/?id=1918927570",children:"Steam Workshop"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:'Re-Gorge-itated (a play on "The Gorge" and "rejuvenated") is a total conversion mod that recreates and enhances the original Gorge event from Don\'t Starve Together. The Gorge was a limited-time community event where players had to work together to appease the Eternal Gnaw by cooking and offering food. This mod not only recreates that experience but significantly expands it with:'}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Multiple game modes with various difficulty levels and mechanics"}),"\n",(0,s.jsx)(n.li,{children:"Enhanced character abilities tailored for The Gorge gameplay"}),"\n",(0,s.jsx)(n.li,{children:"Voting systems and community features"}),"\n",(0,s.jsx)(n.li,{children:"Special event integrations (Winter's Feast, Halloween)"}),"\n",(0,s.jsx)(n.li,{children:"Customizable server settings and gameplay options"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,s.jsx)(n.h3,{id:"game-mode-architecture",children:"Game Mode Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The mod implements a custom game mode system that expands on the original Gorge event:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'GorgeGameModes = {\n    modes = {\n        { id = "default", icon = "default.tex" },\n        { id = "darkness", icon = "darkness.tex" },\n        { id = "endless", icon = "endless.tex" },\n        { id = "no_sweat", icon = "no_sweat.tex" },\n        { id = "sandbox", icon = "sandbox.tex" },\n        { id = "hungry", icon = "hungry.tex" },\n        { id = "sick", icon = "sick.tex" },\n        { id = "scaling", icon = "scaling.tex" },\n        { id = "thieves", icon = "thieves.tex" },\n        { id = "rush", icon = "rush.tex" },\n        { id = "hard", icon = "hard.tex" },\n        { id = "confusion", icon = "confusion.tex" },\n        { id = "murder_mystery", icon = "murder_mystery.tex" },\n        { id = "moon_curse", icon = "moon_curse.tex" },\n    },\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Each game mode provides unique mechanics and challenges:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Endless Mode"}),": Play indefinitely without losing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Murder Mystery"}),": One player is secretly chosen as a murderer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Moon Curse"}),": Influenced by lunar mechanics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Confusion"}),": Item appearances are randomized"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cooking-and-recipe-system",children:"Cooking and Recipe System"}),"\n",(0,s.jsx)(n.p,{children:"The mod recreates and expands The Gorge's cooking system with hundreds of recipes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- From gorge_cooking.lua\nfunction StartCooking(inst, doer)\n    if inst.components.container and inst.components.container:GetItemInSlot(1) ~= nil then\n        local recipe = FindMatchingRecipe(inst)\n        \n        if recipe ~= nil then\n            -- Recipe found, start cooking process\n            local cook_time = recipe.cooktime or 1\n            inst.components.cookable:Cook(doer, recipe, cook_time)\n            return true\n        else\n            -- No matching recipe, food will burn\n            inst.components.cookable:Cook(doer, nil, 2)\n            return true\n        end\n    end\n    return false\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"character-ability-system",children:"Character Ability System"}),"\n",(0,s.jsx)(n.p,{children:"The mod implements a custom perk system that adds gorge-specific abilities to each character:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- From gorge_perks.lua\nGORGE_POWERS = {\n    willow = 2,\n    wolfgang = 2,\n    wendy = 2,\n    wx78 = 2,\n    wathgrithr = 2,\n    webber = 2,\n    walter = 2,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Each character has unique abilities:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Wickerbottom"}),": Starts with fertilizer books"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maxwell"}),": Has shadow book"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Wanda"}),": Starts with pocket watch"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Willow"}),": Increases campfire fuel efficiency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Wolfgang"}),": Variable speed based on mightiness"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"voting-system",children:"Voting System"}),"\n",(0,s.jsx)(n.p,{children:"The mod implements a sophisticated voting system for community decision-making:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- UI integration for votes\ninst._isvoted = net_bool(inst.GUID, "quagmire_vote._isvoted")\ninst._isskippedvote = net_bool(inst.GUID, "quagmire_vote._isskippedvote")\ninst._votecount = net_byte(inst.GUID, "quagmire_vote._votecount")\n\n-- Vote processing\nif GORGE_SETTINGS.KICKS_ENABLED then\n    if owner.admin then\n        UserCommands.RunUserCommand("kick", { user = listing.userid }, owner)\n    else\n        UserCommands.RunUserCommand("lobbyvote", { cmd = "kick", data = listing.userid }, owner)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.p,{children:"Players can vote on:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Kicking other players"}),"\n",(0,s.jsx)(n.li,{children:"Changing game modes"}),"\n",(0,s.jsx)(n.li,{children:"Character abilities/perks"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ui-customization",children:"UI Customization"}),"\n",(0,s.jsx)(n.p,{children:"The mod significantly modifies the game's UI to support The Gorge gameplay:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Customizing player listing UI\nmenv.AddClassPostConstruct("widgets/redux/playerlist", function(self)\n    local _BuildPlayerList = self.BuildPlayerList\n    self.BuildPlayerList = function(self, players, nextWidgets, ...)\n        _BuildPlayerList(self, players, nextWidgets, ...)\n        \n        -- Add kick buttons and developer markers\n        local widgets_list = self.scroll_list:GetListWidgets()\n        \n        -- Modify each player listing\n        for i, listing in ipairs(widgets_list) do\n            -- UI modifications and additions\n        end\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"world-state-management",children:"World State Management"}),"\n",(0,s.jsx)(n.p,{children:"The mod tracks the state of the game world and the Eternal Gnaw's hunger level:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"GOATMUM_STATES = {\n    IDLE = 0,\n    START = 1,\n    WELCOME = 2,\n    WAIT_FOR_PURCHASE = 3,\n    SNACKRIFICE = 4,\n    GAMELOST = 5,\n    GAMEWON = 6\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"special-events-integration",children:"Special Events Integration"}),"\n",(0,s.jsx)(n.p,{children:"The mod incorporates seasonal events from the main game:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'GORGE_EVENT = GORGE_SETTINGS.SPECIALEVENTS_ENABLED and \n    (os.date("%m") <= "02" and SPECIAL_EVENTS.WINTERS_FEAST) or \n    (GORGE_SETTINGS.SPECIALEVENTS_ENABLED and WORLD_SPECIAL_EVENT) or \n    SPECIAL_EVENTS.NONE\n\n-- Winter\'s Feast effect application\nif GORGE_EVENT == SPECIAL_EVENTS.WINTERS_FEAST then\n    if inst.components.frostybreather then\n        inst.components.frostybreather:SetOffsetFn(function() \n            return Vector3(.3, 1.15, 0) \n        end)\n        inst.components.frostybreather:Enable()\n        inst.components.frostybreather:StartBreath()\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.h3,{id:"mod-configuration",children:"Mod Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The mod provides extensive configuration options:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'configuration_options = {\n    -- Voting options\n    Config("kick", "Enable kick votes", "Players can vote to kick others in lobby", opt_def, true),\n    Config("gamemode", "Enable game modes", "Players can vote to change current game mode", opt_def, true),\n    Config("perks", "Enable changeable character\'s ability", "Players can choose their character\'s abilities", opt_def, true),\n    \n    -- Gameplay options\n    Config("fixed_gamemode", "Fixed game mode", "The server will run only this game mode", opt_def, false),\n    Config("specialevents", "Enable Special Events", "Change Special Events: Winter Feast, Halloween Nights.", opt_def, false),\n    Config("changablefemusic", "Change music in lobby", "Tired of The Gorge Theme? Change it to the new one!", opt_def, true),\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"network-synchronization",children:"Network Synchronization"}),"\n",(0,s.jsx)(n.p,{children:"The mod implements custom network synchronization for multiplayer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Network variables for voting system\ninst._isvoted = net_bool(inst.GUID, "quagmire_vote._isvoted")\ninst._isskippedvote = net_bool(inst.GUID, "quagmire_vote._isskippedvote")\ninst._votecount = net_byte(inst.GUID, "quagmire_vote._votecount")\n\n-- Synchronizing food preparation\nfunction SyncGorgeRecipeBook(player)\n    if not TheWorld.ismastersim then\n        SendModRPCToServer(MOD_RPC.ReGorgeitated.SyncRecipeBook)\n        return\n    end\n    \n    -- Server-side processing\n    for i = 1, #all_recipes do\n        local recipe = all_recipes[i]\n        if player.components.quagmire_recipebook and recipe.id then\n            player.components.quagmire_recipebook:LearnRecipe(recipe.id)\n        end\n    end\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mod-compatibility",children:"Mod Compatibility"}),"\n",(0,s.jsx)(n.p,{children:"The mod includes compatibility systems for other mods:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Disabling incompatible systems\nlocal skilltreedefs = require "prefabs/skilltree_defs"\nfor characterprefab, skills in pairs(skilltreedefs.SKILLTREE_DEFS) do\n    skilltreedefs.SKILLTREE_DEFS[characterprefab] = nil\nend\n\n-- Compatibility with modded characters\nmenv.modimport("scripts/regorge/mod_compatibility.lua")\n\n-- Patching official characters\nif not table.contains(NO_PATCH_CHARACTERS, inst.prefab) and HasEventData(inst.prefab) then\n    event_server_data("quagmire", "prefabs/" .. inst.prefab).master_postinit(inst)\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"technical-innovations",children:"Technical Innovations"}),"\n",(0,s.jsx)(n.h3,{id:"custom-game-logic",children:"Custom Game Logic"}),"\n",(0,s.jsx)(n.p,{children:"The mod introduces several technical innovations:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Component Overrides"}),": Modifies core game components to fit The Gorge gameplay"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'menv.AddComponentPostInit("skilltreeupdater", function(self)\n    local original_AddSkillXP = self.AddSkillXP\n    self.AddSkillXP = function(amount, prefab, fromrpc)\n        TheSkillTree.ignorexp = true -- disable notifications\n        original_AddSkillXP(self, amount, prefab, fromrpc)\n    end\nend)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Custom Components"}),": Creates new components specific to The Gorge"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'inst:AddComponent("quagmire_recipebook")\ninst:AddComponent("quagmire_shopper")\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Character Ability Integration"}),": Makes standard character abilities work within The Gorge context"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'if characterType == "nimble" then\n    locomotor:SetWalkSpeed(5) -- Faster walker\n    locomotor:SetRunSpeed(8)  -- Faster runner\nelseif characterType == "heavy" then\n    locomotor:SetWalkSpeed(3) -- Slower walker\n    locomotor:SetRunSpeed(4.5) -- Slower runner\nend\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"UI Modifications"}),": Extensively customizes the UI for The Gorge experience"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local _FestivalNumberBadge = TEMPLATES.FestivalNumberBadge\nTEMPLATES.FestivalNumberBadge = function(festival, ...)\n    return _FestivalNumberBadge("quagmire", ...)\nend\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"learning-points",children:"Learning Points"}),"\n",(0,s.jsx)(n.h3,{id:"event-recreation",children:"Event Recreation"}),"\n",(0,s.jsx)(n.p,{children:"The mod demonstrates how to recreate official limited-time events with expanded functionality:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Research"}),": Study the original event's mechanics and assets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Adaptation"}),": Make appropriate adjustments for standalone play"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Expansion"}),": Add new features that enhance the original experience"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration"}),": Provide customization options for various play styles"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"game-mode-implementation",children:"Game Mode Implementation"}),"\n",(0,s.jsx)(n.p,{children:"The mod showcases techniques for creating multiple game modes within a single mod:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mode Definition"}),": Clear structure for defining different modes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parameter Control"}),": Tuning gameplay parameters based on selected mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"UI Integration"}),": Visual indicators and mode selection tools"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Management"}),": Managing different world states based on mode"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"networking-and-multiplayer",children:"Networking and Multiplayer"}),"\n",(0,s.jsx)(n.p,{children:"The mod demonstrates excellent practices for networked multiplayer gameplay:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Voting Systems"}),": Synchronized voting mechanisms"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Synchronization"}),": Keeping game state synchronized across clients"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authority Control"}),": Server-side validation with client-side prediction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Player Interactions"}),": Special interactions between players (like Murder Mystery mode)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/component-system",children:"Component System"})," - For understanding how components work and how they're modified in this mod"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-system",children:"Network System"})," - For details on network synchronization used in voting and game state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/ui-system",children:"UI System"})," - For creating and modifying UI elements as done in this mod"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/event-system",children:"Event System"})," - For event handling used throughout the mod"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/worldstate",children:"World State"})," - For managing global game state similar to The Gorge's hunger mechanics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-game-mode",children:"Custom Game Mode Example"})," - For more examples of creating custom game modes"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(6540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);