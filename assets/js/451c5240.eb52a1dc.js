"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3855],{2539:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>o,frontMatter:()=>h,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"api-vanilla/components/health","title":"Health","description":"The Health component manages an entity\'s health state, including current and maximum health values, damage handling, regeneration, invincibility, and death triggers.","source":"@site/docs/api-vanilla/components/health.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/health","permalink":"/dst-api-webdocs/docs/api-vanilla/components/health","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"health","title":"Health","sidebar_position":3},"sidebar":"docs","previous":{"title":"Combat Component","permalink":"/dst-api-webdocs/docs/api-vanilla/components/combat"},"next":{"title":"Inventory","permalink":"/dst-api-webdocs/docs/api-vanilla/components/inventory"}}');var l=t(4848),i=t(8453);const h={id:"health",title:"Health",sidebar_position:3},r="Health Component",d={},s=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Health Management",id:"health-management",level:3},{value:"Invincibility",id:"invincibility",level:3},{value:"Fire Damage",id:"fire-damage",level:3},{value:"Healing and Regeneration",id:"healing-and-regeneration",level:3},{value:"Health Penalties",id:"health-penalties",level:2},{value:"Events",id:"events",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"health-component",children:"Health Component"})}),"\n",(0,l.jsx)(n.p,{children:"The Health component manages an entity's health state, including current and maximum health values, damage handling, regeneration, invincibility, and death triggers."}),"\n",(0,l.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Add a health component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("health")\n\n-- Configure the health component\nlocal health = entity.components.health\nhealth:SetMaxHealth(100)\nhealth:SetPercent(0.5) -- Set to 50% health\n'})}),"\n",(0,l.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Property"}),(0,l.jsx)(n.th,{children:"Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"maxhealth"})}),(0,l.jsx)(n.td,{children:"Number"}),(0,l.jsx)(n.td,{children:"Maximum possible health value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"minhealth"})}),(0,l.jsx)(n.td,{children:"Number"}),(0,l.jsx)(n.td,{children:"Minimum health value (usually 0)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"currenthealth"})}),(0,l.jsx)(n.td,{children:"Number"}),(0,l.jsx)(n.td,{children:"Current health value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"invincible"})}),(0,l.jsx)(n.td,{children:"Boolean"}),(0,l.jsx)(n.td,{children:"If true, entity cannot take damage"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"penalty"})}),(0,l.jsx)(n.td,{children:"Number"}),(0,l.jsx)(n.td,{children:"Health penalty (reduces maximum health)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"takingfiredamage"})}),(0,l.jsx)(n.td,{children:"Boolean"}),(0,l.jsx)(n.td,{children:"If true, entity is currently taking fire damage"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"fire_damage_scale"})}),(0,l.jsx)(n.td,{children:"Number"}),(0,l.jsx)(n.td,{children:"Multiplier for fire damage"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"absorb"})}),(0,l.jsx)(n.td,{children:"Number"}),(0,l.jsx)(n.td,{children:"Deprecated damage absorption value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"canmurder"})}),(0,l.jsx)(n.td,{children:"Boolean"}),(0,l.jsx)(n.td,{children:"If true, entity can be murdered (e.g., by the Murder action)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"canheal"})}),(0,l.jsx)(n.td,{children:"Boolean"}),(0,l.jsx)(n.td,{children:"If true, entity can be healed"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,l.jsx)(n.h3,{id:"health-management",children:"Health Management"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Set maximum health\nhealth:SetMaxHealth(100)\n\n-- Set current health to a specific value\nhealth:SetVal(50, "set_health")\n\n-- Set health as a percentage of maximum\nhealth:SetPercent(0.75) -- Set to 75% of max health\n\n-- Add or remove health\nhealth:DoDelta(10) -- Add 10 health\nhealth:DoDelta(-10) -- Remove 10 health\n\n-- Check if entity is dead\nlocal is_dead = health:IsDead()\n'})}),"\n",(0,l.jsx)(n.h3,{id:"invincibility",children:"Invincibility"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Make entity invincible\nhealth:SetInvincible(true)\n\n-- Check if entity is invincible\nlocal is_invincible = health:IsInvincible()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"fire-damage",children:"Fire Damage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Apply fire damage\nhealth:DoFireDamage(5, attacker, true)\n\n-- Get fire damage scale\nlocal fire_scale = health:GetFireDamageScale()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"healing-and-regeneration",children:"Healing and Regeneration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Start health regeneration\nhealth:StartRegen(2, 1) -- Heal 2 health every 1 second\n\n-- Stop health regeneration\nhealth:StopRegen()\n\n-- Add a regeneration source\nhealth:AddRegenSource("regen_buff", 1, 2)\n\n-- Remove a regeneration source\nhealth:RemoveRegenSource("regen_buff")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"health-penalties",children:"Health Penalties"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Set health penalty\nhealth:SetPenalty(0.25) -- 25% health penalty\n\n-- Remove health penalty\nhealth:RemovePenalty(0.25)\n\n-- Enable/disable health penalties\nhealth:EnablePenalty(true)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,l.jsx)(n.p,{children:"The Health component responds to and triggers various events:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"death"})," - Triggered when the entity dies"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"healthdelta"})," - Triggered when health changes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"attacked"})," - Triggered when the entity is attacked"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"startfiredamage"})," - Triggered when the entity starts taking fire damage"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"stopfiredamage"})," - Triggered when the entity stops taking fire damage"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"invincibletoggle"})," - Triggered when invincibility is toggled"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,l.jsx)(n.p,{children:"The Health component often works with:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Combat"})," - For handling damage from attacks"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Armor"})," - For damage reduction"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Temperature"})," - For temperature-related damage"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Hunger"})," - For hunger-related damage"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"State Graph"})," - For playing hurt and death animations"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Create a basic entity with health\nlocal function MakeCreature()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst:AddComponent("health")\n    \n    -- Configure health\n    local health = inst.components.health\n    health:SetMaxHealth(200)\n    health:StartRegen(1, 5) -- Regenerate 1 health every 5 seconds\n    \n    -- Add callback for when this entity dies\n    inst:ListenForEvent("death", function(inst)\n        -- Do something when this entity dies\n    end)\n    \n    return inst\nend\n\n-- Create a non-lethal creature (cannot die from hunger or temperature)\nlocal function MakeNonLethalCreature()\n    local inst = CreateEntity()\n    \n    inst:AddComponent("health")\n    \n    local health = inst.components.health\n    health:SetMaxHealth(100)\n    \n    -- Configure non-lethal settings\n    health.nonlethal_temperature = true\n    health.nonlethal_hunger = true\n    health.nonlethal_pct = 0.05 -- Will not drop below 5% health from non-lethal sources\n    \n    return inst\nend\n'})})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>h,x:()=>r});var a=t(6540);const l={},i=a.createContext(l);function h(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:h(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);