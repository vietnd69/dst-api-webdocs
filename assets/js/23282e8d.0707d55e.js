"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[567],{4829:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"api-vanilla/components/combat","title":"Combat Component","description":"The Combat component handles all combat mechanics for entities that can attack or be attacked. It manages attack ranges, damage, cooldowns, targeting, and other combat-related behaviors.","source":"@site/docs/api-vanilla/components/combat.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/combat","permalink":"/dst-api-webdocs/docs/api-vanilla/components/combat","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"combat","title":"Combat Component","sidebar_position":2,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Components Overview","permalink":"/dst-api-webdocs/docs/api/components"},"next":{"title":"Health","permalink":"/dst-api-webdocs/docs/api-vanilla/components/health"}}');var o=t(4848),i=t(8453);const s={id:"combat",title:"Combat Component",sidebar_position:2,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},c="Combat Component",d={},r=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Targeting",id:"targeting",level:3},{value:"Attack Configuration",id:"attack-configuration",level:3},{value:"Attack Management",id:"attack-management",level:3},{value:"Combat State",id:"combat-state",level:3},{value:"Events",id:"events",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"See also",id:"see-also",level:2},{value:"Examples",id:"examples",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"combat-component",children:"Combat Component"})}),"\n",(0,o.jsx)(n.p,{children:"The Combat component handles all combat mechanics for entities that can attack or be attacked. It manages attack ranges, damage, cooldowns, targeting, and other combat-related behaviors."}),"\n",(0,o.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Add a combat component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("combat")\n\n-- Configure the combat component\nlocal combat = entity.components.combat\ncombat:SetDefaultDamage(10)\ncombat:SetAttackPeriod(2)\ncombat:SetRange(3, 3)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"attackrange"})}),(0,o.jsx)(n.td,{children:"Number"}),(0,o.jsx)(n.td,{children:"The maximum distance at which the entity can initiate an attack"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"hitrange"})}),(0,o.jsx)(n.td,{children:"Number"}),(0,o.jsx)(n.td,{children:"The maximum distance at which the entity can hit targets"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"areahitrange"})}),(0,o.jsx)(n.td,{children:"Number"}),(0,o.jsx)(n.td,{children:"The radius for area attacks (nil if no area attacks)"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"defaultdamage"})}),(0,o.jsx)(n.td,{children:"Number"}),(0,o.jsx)(n.td,{children:"Base damage dealt by the entity when attacking"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"min_attack_period"})}),(0,o.jsx)(n.td,{children:"Number"}),(0,o.jsx)(n.td,{children:"Minimum time (in seconds) between attacks"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"canattack"})}),(0,o.jsx)(n.td,{children:"Boolean"}),(0,o.jsx)(n.td,{children:"Whether the entity can currently attack"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"target"})}),(0,o.jsx)(n.td,{children:"Entity"}),(0,o.jsx)(n.td,{children:"The current target of this entity"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"panic_thresh"})}),(0,o.jsx)(n.td,{children:"Number"}),(0,o.jsx)(n.td,{children:"Health percentage that triggers panic behavior"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,o.jsx)(n.h3,{id:"targeting",children:"Targeting"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Set a target\ncombat:SetTarget(target_entity)\n\n-- Drop the current target\ncombat:DropTarget()\n\n-- Check if an entity can be targeted\nlocal can_target = combat:CanTarget(target_entity)\n\n-- Check if a specific entity is the current target\nlocal is_target = combat:TargetIs(target_entity)\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Related functions"}),": When a target is set with ",(0,o.jsx)(n.code,{children:"SetTarget()"}),", the combat component will often use the ",(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/health",children:"Health Component's"})," ",(0,o.jsx)(n.code,{children:"IsDead()"})," to check if the target is still valid. For area attacks affecting multiple targets, each target's health is modified using ",(0,o.jsx)(n.code,{children:"health:DoDelta()"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"attack-configuration",children:"Attack Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Set attack period (cooldown between attacks)\ncombat:SetAttackPeriod(2) -- 2 seconds between attacks\n\n-- Set attack and hit ranges\ncombat:SetRange(3, 3) -- 3 for both attack and hit range\n\n-- Configure area damage\ncombat:SetAreaDamage(2, 0.5) -- 2 unit radius, 50% damage to nearby entities\n\n-- Enable or disable area damage\ncombat:EnableAreaDamage(true)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"attack-management",children:"Attack Management"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Initiate an attack on the current target\ncombat:DoAttack()\n\n-- Check if attack is on cooldown\nlocal in_cooldown = combat:InCooldown()\n\n-- Get remaining cooldown time\nlocal cooldown = combat:GetCooldown()\n\n-- Reset the attack cooldown\ncombat:ResetCooldown()\n\n-- Restart the cooldown timer\ncombat:RestartCooldown()\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Related functions"}),": When an entity has a ",(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/weapon",children:"Weapon Component"})," equipped, the Combat component will use the weapon's ",(0,o.jsx)(n.code,{children:"GetDamage()"})," function instead of its own ",(0,o.jsx)(n.code,{children:"defaultdamage"})," value. Advanced weapons may also implement special effects through the ",(0,o.jsx)(n.code,{children:"onattack"})," callback."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"combat-state",children:"Combat State"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"-- Temporarily disable attacks\ncombat:BlankOutAttacks(2) -- Cannot attack for 2 seconds\n\n-- Make invulnerable\ncombat:SetInvincible(true)\n\n-- Share target with nearby allies\ncombat:ShareTarget(target, 10, nil, 3) -- Share with up to 3 allies within 10 units\n"})}),"\n",(0,o.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,o.jsx)(n.p,{children:"The Combat component responds to and triggers various events:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"attacked"})," - Triggered when the entity is attacked"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onhitother"})," - Triggered when the entity successfully hits another entity"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onmissother"})," - Triggered when the entity misses an attack"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"killedother"})," - Triggered when the entity kills another entity"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,o.jsx)(n.p,{children:"The Combat component often works with:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Health"})," - For damage calculations and death handling"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Weapon"})," - For determining attack damage and effects"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Inventory"})," - For equipping weapons that modify combat stats"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"State Graph"})," - For playing attack animations"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,o.jsx)(n.p,{children:"For practical implementations of the Combat component in complex mods, see these case studies:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-forge",children:"The Forge Mod"})})," - Implements a full combat-focused game mode with custom damage types and buffs:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- From The Forge Mod: Adding damage types\n_G.TUNING.FORGE.DAMAGETYPES = {\n    PHYSICAL = 1,\n    MAGIC = 2,\n    SOUND = 3,\n    GAS = 4,\n    LIQUID = 5\n}\n\n-- Adding damage buffs\nfunction Combat:AddDamageBuff(buffname, data, recieved, remove_old_buff)\n    if remove_old_buff and self:HasDamageBuff(buffname, recieved) then\n        self:RemoveDamageBuff(buffname, recieved)\n    end\n    if not self:HasDamageBuff(buffname, recieved) then\n        local buff = type(data) == "number" and {buff = data} or data\n        self.damagebuffs[recieved and "recieved" or "dealt"][buffname] = buff\n    end\nend\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-ia-core",children:"Island Adventures Core"})})," - Shows how to extend the combat component for specialized uses like swimming and sailing."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/health",children:"Health Component"})," - For managing entity health and damage"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/weapon",children:"Weapon Component"})," - For weapon damage and effects"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/inventory",children:"Inventory Component"})," - For equipping weapons"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/armor",children:"Armor Component"})," - For damage reduction"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/lootdropper",children:"LootDropper Component"})," - For drops when entities are killed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-forge",children:"Case Study - The Forge Mod"})," - For an example of extended combat mechanics"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'-- Create a basic enemy with combat capability\nlocal function MakeEnemy()\n    local inst = CreateEntity()\n    \n    -- Add required components\n    inst:AddComponent("health")\n    inst:AddComponent("combat")\n    \n    -- Configure health\n    inst.components.health:SetMaxHealth(100)\n    \n    -- Configure combat\n    local combat = inst.components.combat\n    combat:SetDefaultDamage(10)\n    combat:SetAttackPeriod(3)\n    combat:SetRange(2, 3)\n    \n    -- Add callback when this entity attacks another\n    combat.onhitotherfn = function(inst, other, damage)\n        -- Do something when hitting other entities\n    end\n    \n    return inst\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(6540);const o={},i=a.createContext(o);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);