"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[53595],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(96540);const t={},o=s.createContext(t);function l(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(o.Provider,{value:n},e.children)}},84892:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"game-scripts/core-systems/game-configuration/settings/config","title":"Config","description":"Platform configuration management system for Don\'t Starve Together with platform-specific overrides","source":"@site/docs/game-scripts/core-systems/game-configuration/settings/config.md","sourceDirName":"game-scripts/core-systems/game-configuration/settings","slug":"/game-scripts/core-systems/game-configuration/settings/config","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/config","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"config","title":"Config","description":"Platform configuration management system for Don\'t Starve Together with platform-specific overrides","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Game Configuration Settings Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/"},"next":{"title":"Console Screen Settings","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/consolescreensettings"}}');var t=i(74848),o=i(28453);const l={id:"config",title:"Config",description:"Platform configuration management system for Don't Starve Together with platform-specific overrides",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},r="Config",a={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Class Definition",id:"class-definition",level:2},{value:"Config(options)",id:"config-constructor",level:3},{value:"Methods",id:"methods",level:2},{value:"SetOptions(options)",id:"setoptions",level:3},{value:"IsEnabled(option)",id:"isenabled",level:3},{value:"Enable(option)",id:"enable",level:3},{value:"Disable(option)",id:"disable",level:3},{value:"__tostring()",id:"tostring",level:3},{value:"Global Instance",id:"global-instance",level:2},{value:"TheConfig",id:"theconfig",level:3},{value:"Default Configuration",id:"default-configuration",level:2},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Platform Overrides",id:"platform-overrides",level:2},{value:"NACL Platform",id:"nacl-platform",level:3},{value:"Android Platform",id:"android-platform",level:3},{value:"iOS Platform",id:"ios-platform",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Platform Override Application",id:"platform-override-application",level:3},{value:"Option Storage",id:"option-storage",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Platform-Specific UI Adjustments",id:"platform-specific-ui-adjustments",level:3},{value:"Runtime Configuration Management",id:"runtime-configuration-management",level:3},{value:"Configuration-Driven Features",id:"configuration-driven-features",level:3},{value:"Debugging and Diagnostics",id:"debugging-and-diagnostics",level:3},{value:"Constants",id:"constants",level:2},{value:"PLATFORM",id:"platform",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"\u2705 Recommended Usage",id:"-recommended-usage",level:3},{value:"\u274c Usage Warnings",id:"-usage-warnings",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Safe Configuration Access",id:"safe-configuration-access",level:3},{value:"Validation Patterns",id:"validation-patterns",level:3},{value:"Related Systems",id:"related-systems",level:2},{value:"Technical Notes",id:"technical-notes",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"config",children:"Config"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Config"})," module provides a flexible platform configuration management system for Don't Starve Together. It implements a class-based system for managing configuration options with platform-specific overrides, enabling centralized control over settings that vary between desktop, mobile, and web platforms."]}),"\n",(0,t.jsx)(n.p,{children:"This system is essential for handling platform differences in UI rendering, performance optimizations, and feature availability across different deployment targets."}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if vignette should be hidden (mobile platforms)\nif TheConfig:IsEnabled("hide_vignette") then\n    -- Mobile optimization: remove performance-heavy vignette\n    HideVignetteEffects()\nend\n\n-- Enable netbook mode for compact UI\nif TheConfig:IsEnabled("force_netbookmode") then\n    -- Use compact layout for smaller screens\n    SetCompactUIMode()\nend\n\n-- Runtime configuration changes\nTheConfig:Enable("debug_mode")\nTheConfig:SetOptions({\n    new_feature = true,\n    performance_mode = false\n})\n'})}),"\n",(0,t.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,t.jsx)(n.h3,{id:"config-constructor",children:"Config(options)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCreates a new Config instance with optional initial configuration options. The constructor initializes an empty options table and applies any provided options."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"})," (table, optional): Initial configuration options to set as key-value pairs"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Config): New Config instance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Create config with initial options\nlocal config = Config({\n    hide_vignette = true,\n    force_netbookmode = false,\n    custom_option = "value"\n})\n\n-- Create empty config\nlocal empty_config = Config()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"setoptions",children:"SetOptions(options)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSets multiple configuration options at once by merging the provided options table with existing options. Existing options with the same keys will be overwritten."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"})," (table): Table of key-value pairs representing configuration options"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Set multiple options at once\nTheConfig:SetOptions({\n    hide_vignette = true,\n    force_netbookmode = false,\n    new_feature = "enabled",\n    debug_level = 2\n})\n\n-- Options are merged, not replaced\nTheConfig:SetOptions({additional_setting = true})\n'})}),"\n",(0,t.jsx)(n.h3,{id:"isenabled",children:"IsEnabled(option)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if a specific configuration option is enabled. Returns the value of the option or nil if not set. This is the primary method for checking configuration state."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"option"})," (string): Name of the configuration option to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["(any): Value of the option, or ",(0,t.jsx)(n.code,{children:"nil"})," if not set"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check boolean options\nlocal vignetteHidden = TheConfig:IsEnabled("hide_vignette")\nif vignetteHidden then\n    ApplyMobileUISettings()\nend\n\n-- Check any value type\nlocal debugLevel = TheConfig:IsEnabled("debug_level")\nif debugLevel and debugLevel > 1 then\n    ShowAdvancedDebugInfo()\nend\n\n-- Handle missing options\nlocal customSetting = TheConfig:IsEnabled("nonexistent_option")\nif customSetting == nil then\n    print("Option not configured")\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"enable",children:"Enable(option)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nEnables a specific configuration option by setting it to ",(0,t.jsx)(n.code,{children:"true"}),". This is a convenience method for boolean configuration options."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"option"})," (string): Name of the configuration option to enable"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Enable features at runtime\nTheConfig:Enable("force_netbookmode")\nTheConfig:Enable("debug_mode")\n\n-- Check the result\nif TheConfig:IsEnabled("debug_mode") then\n    print("Debug mode now enabled")\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"disable",children:"Disable(option)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDisables a specific configuration option by setting it to ",(0,t.jsx)(n.code,{children:"nil"}),". This effectively removes the option from the configuration."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"option"})," (string): Name of the configuration option to disable"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Disable features\nTheConfig:Disable("hide_vignette")\nTheConfig:Disable("experimental_feature")\n\n-- Option is now nil\nlocal disabled = TheConfig:IsEnabled("hide_vignette")\nassert(disabled == nil, "Option should be nil after disable")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"tostring",children:"__tostring()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns a formatted string representation of all configuration options for debugging and inspection purposes. This metamethod is automatically called when the config object is converted to a string."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(string): Multi-line string showing all options and their values"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Print all configuration options\nprint(tostring(TheConfig))\n\n-- Example output:\n-- PLATFORM CONFIGURATION OPTIONS\n-- hide_vignette = true\n-- force_netbookmode = true\n-- custom_option = value\n\n-- Use in debugging\nlocal configDebug = tostring(TheConfig)\nWriteToLogFile("Current config: " .. configDebug)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"global-instance",children:"Global Instance"}),"\n",(0,t.jsx)(n.h3,{id:"theconfig",children:"TheConfig"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nGlobal configuration instance automatically created with default values and platform-specific overrides applied. This is the primary interface for accessing configuration throughout the game."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"Config"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- TheConfig is globally available everywhere\nif TheConfig:IsEnabled("force_netbookmode") then\n    SetCompactLayout()\nend\n\n-- Access from any module\nlocal function ApplyPlatformSettings()\n    if TheConfig:IsEnabled("hide_vignette") then\n        RemoveVignetteEffects()\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The module defines default configuration values applied to all platforms before platform-specific overrides:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local defaults = {\n    hide_vignette = false,\n    force_netbookmode = false,\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Option"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"hide_vignette"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})}),(0,t.jsx)(n.td,{children:"Controls whether vignette effects are hidden for performance on mobile platforms"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"force_netbookmode"})}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})}),(0,t.jsx)(n.td,{children:"Forces compact UI layout for smaller screens and web platforms"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"platform-overrides",children:"Platform Overrides"}),"\n",(0,t.jsxs)(n.p,{children:["The system applies platform-specific configuration overrides based on the global ",(0,t.jsx)(n.code,{children:"PLATFORM"})," variable:"]}),"\n",(0,t.jsx)(n.h3,{id:"nacl-platform",children:"NACL Platform"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChrome Native Client platform configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"NACL = {\n    force_netbookmode = true,\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Overrides:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"force_netbookmode = true"}),": Enables compact UI for web browser constraints"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"android-platform",children:"Android Platform"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nAndroid mobile platform configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"ANDROID = {\n    hide_vignette = true,\n    force_netbookmode = true,\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Overrides:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hide_vignette = true"}),": Removes vignette effects for better mobile performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"force_netbookmode = true"}),": Uses compact UI layout for mobile screens"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"ios-platform",children:"iOS Platform"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\niOS mobile platform configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"IOS = {\n    hide_vignette = true,\n    force_netbookmode = true,\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Overrides:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hide_vignette = true"}),": Removes vignette effects for better mobile performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"force_netbookmode = true"}),": Uses compact UI layout for mobile screens"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.h3,{id:"platform-override-application",children:"Platform Override Application"}),"\n",(0,t.jsx)(n.p,{children:"The configuration system automatically applies platform overrides during module initialization:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"TheConfig = Config(defaults)\nif platform_overrides[PLATFORM] then\n    TheConfig:SetOptions(platform_overrides[PLATFORM])\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Process:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create Config instance with default values"}),"\n",(0,t.jsx)(n.li,{children:"Check if current platform has specific overrides"}),"\n",(0,t.jsxs)(n.li,{children:["Apply platform overrides using ",(0,t.jsx)(n.code,{children:"SetOptions"})]}),"\n",(0,t.jsxs)(n.li,{children:["Global ",(0,t.jsx)(n.code,{children:"TheConfig"})," instance is ready for use"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"option-storage",children:"Option Storage"}),"\n",(0,t.jsxs)(n.p,{children:["All configuration options are stored in the ",(0,t.jsx)(n.code,{children:"options"})," table within each Config instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function Config:SetOptions(options)\n    for k,v in pairs(options) do\n        self.options[k] = v\n    end\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Storage Characteristics:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Direct table storage for fast access"}),"\n",(0,t.jsx)(n.li,{children:"Supports any value type (boolean, number, string, table)"}),"\n",(0,t.jsx)(n.li,{children:"Options can be added, modified, or removed at runtime"}),"\n",(0,t.jsx)(n.li,{children:"Memory efficient with minimal overhead"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"platform-specific-ui-adjustments",children:"Platform-Specific UI Adjustments"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Apply mobile-specific optimizations\nif TheConfig:IsEnabled("hide_vignette") then\n    -- Remove performance-heavy vignette overlay\n    RemoveVignetteOverlay()\n    SetMobileRenderingMode()\nend\n\nif TheConfig:IsEnabled("force_netbookmode") then\n    -- Compact UI for smaller screens\n    SetCompactButtonLayout()\n    SetSmallUIScale()\n    EnableScrollableMenus()\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"runtime-configuration-management",children:"Runtime Configuration Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Enable experimental features dynamically\nTheConfig:Enable("experimental_ai")\nTheConfig:Enable("beta_ui")\n\n-- Batch configuration updates\nTheConfig:SetOptions({\n    performance_mode = true,\n    high_quality_audio = false,\n    debug_rendering = true,\n    log_level = 3\n})\n\n-- Conditional feature activation\nif PlayerHasBetaAccess() then\n    TheConfig:Enable("beta_features")\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-driven-features",children:"Configuration-Driven Features"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- UI scaling based on configuration\nlocal function ApplyUIScaling()\n    if TheConfig:IsEnabled("force_netbookmode") then\n        SetUIScale(0.8)  -- Compact scale\n    else\n        SetUIScale(1.0)  -- Normal scale\n    end\nend\n\n-- Performance adjustments\nlocal function OptimizeGraphics()\n    if TheConfig:IsEnabled("hide_vignette") then\n        DisablePostProcessing()\n    end\n    \n    local perfMode = TheConfig:IsEnabled("performance_mode")\n    if perfMode then\n        ReduceParticleEffects()\n        LowerShadowQuality()\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"debugging-and-diagnostics",children:"Debugging and Diagnostics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Configuration state inspection\nlocal function DumpConfig()\n    print("=== CURRENT CONFIGURATION ===")\n    print(tostring(TheConfig))\n    print("===============================")\nend\n\n-- Conditional debugging\nif TheConfig:IsEnabled("debug_mode") then\n    DumpConfig()\n    EnableVerboseLogging()\nend\n\n-- Configuration validation\nlocal function ValidateConfig()\n    local requiredOptions = {"hide_vignette", "force_netbookmode"}\n    for _, option in ipairs(requiredOptions) do\n        local value = TheConfig:IsEnabled(option)\n        if value == nil then\n            print("Warning: Missing required config option:", option)\n        end\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,t.jsx)(n.h3,{id:"platform",children:"PLATFORM"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Global variable containing the current platform identifier used for applying platform-specific overrides."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Possible Values:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"NACL"'}),": Chrome Native Client"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"ANDROID"'}),": Android mobile"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"IOS"'}),": iOS mobile"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"WINDOWS"'}),": Windows desktop"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"LINUX"'}),": Linux desktop"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"OSX"'}),": macOS desktop"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"-recommended-usage",children:"\u2705 Recommended Usage"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"TheConfig:IsEnabled()"})," for all configuration checks"]}),"\n",(0,t.jsxs)(n.li,{children:["Group related options using ",(0,t.jsx)(n.code,{children:"SetOptions()"})," for batch updates"]}),"\n",(0,t.jsx)(n.li,{children:"Check for nil values when options might not be set"}),"\n",(0,t.jsx)(n.li,{children:"Use descriptive option names that indicate their purpose"}),"\n",(0,t.jsx)(n.li,{children:"Apply platform-specific optimizations through configuration"}),"\n",(0,t.jsx)(n.li,{children:"Use configuration for feature flags and experimental features"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-usage-warnings",children:"\u274c Usage Warnings"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Don't access ",(0,t.jsx)(n.code,{children:"self.options"})," directly; use provided methods"]}),"\n",(0,t.jsx)(n.li,{children:"Don't assume options exist without checking for nil"}),"\n",(0,t.jsx)(n.li,{children:"Don't use configuration for frequently changing values"}),"\n",(0,t.jsx)(n.li,{children:"Don't store complex objects that might cause memory issues"}),"\n",(0,t.jsx)(n.li,{children:"Don't modify platform override tables at runtime"}),"\n",(0,t.jsx)(n.li,{children:"Don't use configuration for security-sensitive settings"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"safe-configuration-access",children:"Safe Configuration Access"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Always check for nil when option might not exist\nlocal customSetting = TheConfig:IsEnabled("optional_feature")\nif customSetting ~= nil then\n    ApplyCustomSetting(customSetting)\nend\n\n-- Provide defaults for missing options\nlocal debugLevel = TheConfig:IsEnabled("debug_level") or 0\nSetDebugLevel(debugLevel)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"validation-patterns",children:"Validation Patterns"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Validate configuration state\nlocal function ValidateRequiredConfig()\n    local required = {"hide_vignette", "force_netbookmode"}\n    for _, option in ipairs(required) do\n        if TheConfig:IsEnabled(option) == nil then\n            error("Required configuration option missing: " .. option)\n        end\n    end\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./class.md",children:"Class"})}),": Base class system used by Config"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-configuration/settings/constants",children:"Constants"})}),": Platform constants and global definitions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./main.md",children:"Main"})}),": Game initialization and platform detection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./frontend.md",children:"Frontend"})}),": UI system that uses platform configuration"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"technical-notes",children:"Technical Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Config extends the base Class system for object-oriented functionality"}),"\n",(0,t.jsxs)(n.li,{children:["Platform detection relies on the global ",(0,t.jsx)(n.code,{children:"PLATFORM"})," variable set during initialization"]}),"\n",(0,t.jsx)(n.li,{children:"Configuration options are applied in order: defaults first, then platform overrides"}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"__tostring"})," metamethod enables easy debugging of configuration state"]}),"\n",(0,t.jsxs)(n.li,{children:["All option values are stored in the ",(0,t.jsx)(n.code,{children:"options"})," table for O(1) access"]}),"\n",(0,t.jsx)(n.li,{children:"Memory usage is minimal as only set options consume memory"}),"\n",(0,t.jsx)(n.li,{children:"No persistence; configuration is rebuilt on each game start"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"These configuration utilities provide platform-aware settings management essential for cross-platform deployment of Don't Starve Together."})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);