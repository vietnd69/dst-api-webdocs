"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[842],{5311:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api-vanilla/shared-properties/shared-properties-overview","title":"Shared Node Properties Overview","description":"Shared node properties are fundamental building blocks used by almost all entities in the Don\'t Starve Together API. These properties provide essential functionality for positioning, identifying, and synchronizing game objects.","source":"@site/docs/api-vanilla/shared-properties/index.md","sourceDirName":"api-vanilla/shared-properties","slug":"/api/shared-properties","permalink":"/dst-api-webdocs/docs/api/shared-properties","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"shared-properties-overview","title":"Shared Node Properties Overview","sidebar_position":1,"slug":"/api/shared-properties"},"sidebar":"docs","previous":{"title":"Shared Properties","permalink":"/dst-api-webdocs/docs/category/shared-properties"},"next":{"title":"Health Properties","permalink":"/dst-api-webdocs/docs/api-vanilla/shared-properties/health-properties"}}');var i=t(4848),s=t(8453);const a={id:"shared-properties-overview",title:"Shared Node Properties Overview",sidebar_position:1,slug:"/api/shared-properties"},o="Shared Node Properties Overview",d={},l=[{value:"Core Shared Properties",id:"core-shared-properties",level:2},{value:"Transform",id:"transform",level:3},{value:"Network",id:"network",level:3},{value:"Tags",id:"tags",level:3},{value:"Property Relationships",id:"property-relationships",level:2},{value:"Common Property Patterns",id:"common-property-patterns",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Other Shared Properties",id:"other-shared-properties",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"shared-node-properties-overview",children:"Shared Node Properties Overview"})}),"\n",(0,i.jsx)(n.p,{children:"Shared node properties are fundamental building blocks used by almost all entities in the Don't Starve Together API. These properties provide essential functionality for positioning, identifying, and synchronizing game objects."}),"\n",(0,i.jsx)(n.h2,{id:"core-shared-properties",children:"Core Shared Properties"}),"\n",(0,i.jsx)(n.p,{children:"Don't Starve Together uses several key shared properties that appear across most entity types:"}),"\n",(0,i.jsx)(n.h3,{id:"transform",children:"Transform"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/shared-properties/transform",children:"Transform"})," property handles an entity's position, rotation, and scale in the 3D world. It is the most basic and essential property that every entity must have to exist in the game world."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Basic Transform usage\ninst.entity:AddTransform()\ninst.Transform:SetPosition(x, y, z)\ninst.Transform:SetRotation(degrees)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"network",children:"Network"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/shared-properties/network",children:"Network"})," property enables multiplayer functionality by synchronizing entity data between server and clients. This is essential for any entity that needs to be visible and interactive for all players in a multiplayer game."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Basic Network usage\ninst.entity:AddNetwork()\ninst.entity:SetPristine()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"tags",children:"Tags"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/shared-properties/tags",children:"Tags"})," system provides a lightweight and efficient way to categorize entities and identify their characteristics. Tags are used extensively for entity queries, targeting, and implementing game mechanics."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Basic Tags usage\ninst:AddTag("tagname")\ninst:HasTag("tagname")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"property-relationships",children:"Property Relationships"}),"\n",(0,i.jsx)(n.p,{children:"These shared properties work together to create functional entities:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transform"})," provides the spatial foundation for entities to exist in the world"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Network"})," ensures consistent entity state across all connected clients"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tags"})," allow for efficient categorization and identification of entities"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-property-patterns",children:"Common Property Patterns"}),"\n",(0,i.jsx)(n.p,{children:"When creating entities, these properties are typically added in a consistent order:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function CreateEntity()\n    local inst = CreateEntity()\n    \n    -- Always add Transform first\n    inst.entity:AddTransform()\n    \n    -- Add other visual components\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    \n    -- Add Network for multiplayer\n    inst.entity:AddNetwork()\n    \n    -- Add tags that need to be networked\n    inst:AddTag("example_tag")\n    \n    -- Finalize network setup\n    inst.entity:SetPristine()\n    \n    -- Client-side early return\n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Server-only components and logic\n    \n    return inst\nend\n'})}),"\n",(0,i.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,i.jsx)(n.p,{children:"These shared properties are implemented at the engine level and exposed to Lua through the entity interface. The engine handles the low-level functionality, while Lua provides the interface for game logic."}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.p,{children:"When working with shared properties:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Add properties in the correct order (Transform first, Network before tags)"}),"\n",(0,i.jsx)(n.li,{children:"Keep client and server code properly separated"}),"\n",(0,i.jsx)(n.li,{children:"Only network essential data to maintain performance"}),"\n",(0,i.jsx)(n.li,{children:"Use tags for categorization and quick lookups"}),"\n",(0,i.jsx)(n.li,{children:"Leverage the entity parenting system for complex object hierarchies"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"other-shared-properties",children:"Other Shared Properties"}),"\n",(0,i.jsx)(n.p,{children:"In addition to the core properties, entities may use other shared properties depending on their needs:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AnimState"})," - Handles animations and visual appearance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SoundEmitter"})," - Manages sound effects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Physics"})," - Provides collision detection and physical interactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Light"})," - Creates light sources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MiniMapEntity"})," - Shows the entity on the minimap"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These additional properties follow similar patterns to the core shared properties but serve more specialized functions."})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);