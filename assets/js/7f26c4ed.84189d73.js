"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[85858],{1274:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"game-scripts/core-systems/networking-communication/multiplayer/motdmanager","title":"MOTD Manager","description":"Message of the Day management system for downloading and displaying game announcements","source":"@site/docs/game-scripts/core-systems/networking-communication/multiplayer/motdmanager.md","sourceDirName":"game-scripts/core-systems/networking-communication/multiplayer","slug":"/game-scripts/core-systems/networking-communication/multiplayer/motdmanager","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/multiplayer/motdmanager","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"motdmanager","title":"MOTD Manager","description":"Message of the Day management system for downloading and displaying game announcements","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Multiplayer Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/multiplayer/"},"next":{"title":"PopupManager","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/multiplayer/popupmanager"}}');var t=s(74848),a=s(28453);const r={id:"motdmanager",title:"MOTD Manager",description:"Message of the Day management system for downloading and displaying game announcements",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="MOTD Manager",d={},o=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Core Methods",id:"core-methods",level:2},{value:"MotdManager()",id:"is-enabled",level:3},{value:"MotdManager()",id:"initialize",level:3},{value:"MotdManager()",id:"is-loading-motd-info",level:3},{value:"Content Management",id:"content-management",level:2},{value:"MotdManager()",id:"get-motd",level:3},{value:"MotdManager(info, live_build)",id:"set-motd-info",level:3},{value:"MotdManager()",id:"get-patch-notes",level:3},{value:"MotdManager()",id:"is-new-update-available",level:3},{value:"Download Management",id:"download-management",level:2},{value:"MotdManager(max_retries)",id:"download-motd-info",level:3},{value:"MotdManager()",id:"load-cached-motd-info",level:3},{value:"MotdManager()",id:"save",level:3},{value:"Content Interaction",id:"content-interaction",level:2},{value:"MotdManager(boxid)",id:"mark-as-seen",level:3},{value:"MotdManager(cell_id)",id:"is-image-loaded",level:3},{value:"Event Handling",id:"event-handling",level:2},{value:"MotdManager()",id:"set-loading-done",level:3},{value:"MotdManager(ent, cb_fn)",id:"add-on-motd-downloaded-cb",level:3},{value:"Data Processing",id:"data-processing",level:2},{value:"MotdManager(motd_info)",id:"make-sorted-keys",level:3},{value:"Image Management",id:"image-management",level:2},{value:"MotdManager()",id:"load-cached-images",level:3},{value:"MotdManager()",id:"get-images-to-download",level:3},{value:"Content Categories",id:"content-categories",level:2},{value:"Category Order",id:"category-order",level:3},{value:"Content Structure",id:"content-structure",level:3},{value:"Configuration Constants",id:"configuration-constants",level:2},{value:"MAX_RETRIES",id:"max_retries",level:3},{value:"MAX_IMAGE_RETRIES",id:"max_image_retries",level:3},{value:"MAX_IMAGE_FILES",id:"max_image_files",level:3},{value:"CACHE_FILE_NAME",id:"cache_file_name",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Platform Integration",id:"platform-integration",level:2},{value:"Steam Platform",id:"steam-platform",level:3},{value:"Rail Platform",id:"rail-platform",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Image Optimization",id:"image-optimization",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Integration",id:"integration",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"motd-manager",children:"MOTD Manager"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"MotdManager"})," class handles the Message of the Day system for Don't Starve Together. It downloads, caches, and manages announcements including patch notes, skin previews, Twitch integration content, and general news. The system provides organized content delivery to players through the game's main menu interface."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if MOTD is enabled\nif TheMotdManager:IsEnabled() then\n    print("MOTD system is active")\nend\n\n-- Get current MOTD data\nlocal motd_info, sorted_keys = TheMotdManager:GetMotd()\n\n-- Check for updates\nif TheMotdManager:IsNewUpdateAvailable() then\n    print("New game update available!")\nend\n\n-- Get patch notes\nlocal patch_notes = TheMotdManager:GetPatchNotes()\nprint("Latest patch:", patch_notes.data.title)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,t.jsxs)(n.h3,{id:"is-enabled",children:["MotdManager",":IsEnabled","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if the MOTD system is enabled for the current platform. Currently only enabled for Steam and Rail platforms."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if MOTD is enabled, false otherwise"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if TheMotdManager:IsEnabled() then\n    TheMotdManager:Initialize()\nend\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"initialize",children:["MotdManager",":Initialize","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nInitializes the MOTD system by loading cached data and starting the download process for fresh content."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"TheMotdManager:Initialize()\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"is-loading-motd-info",children:["MotdManager",":IsLoadingMotdInfo","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if the MOTD system is currently downloading or processing content."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if loading, false when complete"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"if not TheMotdManager:IsLoadingMotdInfo() then\n    -- Safe to access MOTD data\n    local motd_data = TheMotdManager:GetMotd()\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"content-management",children:"Content Management"}),"\n",(0,t.jsxs)(n.h3,{id:"get-motd",children:["MotdManager",":GetMotd","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns the current MOTD information and sorted content keys for display ordering."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): MOTD information table"}),"\n",(0,t.jsx)(n.li,{children:"(table): Array of sorted content keys"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local motd_info, sorted_keys = TheMotdManager:GetMotd()\nfor i, key in ipairs(sorted_keys) do\n    local content = motd_info[key]\n    print(content.data.title, content.data.category)\nend\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"set-motd-info",children:["MotdManager",":SetMotdInfo","(info, live_build)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nUpdates the MOTD information with new content and build version data."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"info"})," (table): New MOTD information"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"live_build"})," (number): Current live build number"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"get-patch-notes",children:["MotdManager",":GetPatchNotes","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRetrieves the most recent patch notes content, prioritizing the first patch notes category item."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Patch notes content table with data and metadata"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local patch_notes = TheMotdManager:GetPatchNotes()\nif patch_notes then\n    print("Latest patch:", patch_notes.data.title)\n    print("Description:", patch_notes.data.description)\n    if patch_notes.meta.is_new then\n        print("This is new content!")\n    end\nend\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"is-new-update-available",children:["MotdManager",":IsNewUpdateAvailable","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if a newer game version is available compared to the current client version."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if an update is available, false otherwise"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'if TheMotdManager:IsNewUpdateAvailable() then\n    -- Display update notification to player\n    print("New game version available!")\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"download-management",children:"Download Management"}),"\n",(0,t.jsxs)(n.h3,{id:"download-motd-info",children:["MotdManager",":DownloadMotdInfo","(max_retries)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDownloads fresh MOTD information from the server with retry logic for failed attempts."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"max_retries"})," (number): Maximum number of download attempts"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"load-cached-motd-info",children:["MotdManager",":LoadCachedMotdInfo","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nLoads previously cached MOTD information from persistent storage to provide offline content."]}),"\n",(0,t.jsxs)(n.h3,{id:"save",children:["MotdManager",":Save","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nSaves current MOTD information to persistent storage for caching."]}),"\n",(0,t.jsx)(n.h2,{id:"content-interaction",children:"Content Interaction"}),"\n",(0,t.jsxs)(n.h3,{id:"mark-as-seen",children:["MotdManager",":MarkAsSeen","(boxid)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nMarks a specific MOTD content item as seen by the player, updating its metadata and saving the state."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"boxid"})," (string): Unique identifier for the content item"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Mark patch notes as seen when player views them\nTheMotdManager:MarkAsSeen("patch_notes_123")\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"is-image-loaded",children:["MotdManager",":IsImageLoaded","(cell_id)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nChecks if an image has been downloaded and cached for a specific content cell."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cell_id"})," (string): Content cell identifier"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(boolean): True if image is loaded, false otherwise"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'if TheMotdManager:IsImageLoaded("skin_preview_456") then\n    -- Display the cached image\nend\n'})}),"\n",(0,t.jsx)(n.h2,{id:"event-handling",children:"Event Handling"}),"\n",(0,t.jsxs)(n.h3,{id:"set-loading-done",children:["MotdManager",":SetLoadingDone","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nMarks the MOTD loading process as complete and triggers the global event for UI updates."]}),"\n",(0,t.jsxs)(n.h3,{id:"add-on-motd-downloaded-cb",children:["MotdManager",":AddOnMotdDownloadedCB","(ent, cb_fn)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nRegisters a callback function to be executed when MOTD downloading is complete."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ent"})," (Entity): Entity to listen for the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cb_fn"})," (function): Callback function to execute"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'TheMotdManager:AddOnMotdDownloadedCB(TheGlobalInstance, function(event_data)\n    if event_data.success then\n        print("MOTD loaded successfully")\n        -- Update UI with new content\n    else\n        print("MOTD loading failed")\n    end\nend)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"data-processing",children:"Data Processing"}),"\n",(0,t.jsxs)(n.h3,{id:"make-sorted-keys",children:["MotdManager",":MakeSortedKeys","(motd_info)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nProcesses MOTD information to create a sorted list of content keys based on category priority, group order, and newness."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"motd_info"})," (table): Raw MOTD information"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Array of sorted content keys"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"image-management",children:"Image Management"}),"\n",(0,t.jsxs)(n.h3,{id:"load-cached-images",children:["MotdManager",":LoadCachedImages","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nLoads all cached images for MOTD content that has associated image files."]}),"\n",(0,t.jsxs)(n.h3,{id:"get-images-to-download",children:["MotdManager",":GetImagesToDownload","()"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nDetermines which images need to be downloaded and assigns available image slots to content."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(table): Queue of images to download with assigned file slots"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"content-categories",children:"Content Categories"}),"\n",(0,t.jsx)(n.p,{children:"The MOTD system organizes content into categories with specific display priorities:"}),"\n",(0,t.jsx)(n.h3,{id:"category-order",children:"Category Order"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"patchnotes"})," (Priority 1): Game update announcements and patch notes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"skins"})," (Priority 2): New skin releases and cosmetic content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"twitch"})," (Priority 3): Twitch integration and streaming-related content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"news"})," (Priority 4): General game news and announcements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"none"})," (Priority 100): Uncategorized content"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"content-structure",children:"Content Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'content_item = {\n    id = "unique_identifier",\n    data = {\n        title = "Content Title",\n        description = "Content description text",\n        category = "patchnotes",\n        group_order = 1,\n        image_url = "https://example.com/image.jpg",\n        no_image = false,\n        hidden = false\n    },\n    meta = {\n        is_new = true,\n        last_seen = 1234567890,\n        image_file = "box1"\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-constants",children:"Configuration Constants"}),"\n",(0,t.jsx)(n.h3,{id:"max_retries",children:"MAX_RETRIES"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Value:"})," ",(0,t.jsx)(n.code,{children:"4"}),"\n",(0,t.jsx)(n.strong,{children:"Description:"})," Maximum number of retry attempts for MOTD downloads"]}),"\n",(0,t.jsx)(n.h3,{id:"max_image_retries",children:"MAX_IMAGE_RETRIES"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Value:"})," ",(0,t.jsx)(n.code,{children:"1"}),"\n",(0,t.jsx)(n.strong,{children:"Description:"})," Maximum retry attempts for image downloads"]}),"\n",(0,t.jsx)(n.h3,{id:"max_image_files",children:"MAX_IMAGE_FILES"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Value:"})," ",(0,t.jsx)(n.code,{children:"10"}),"\n",(0,t.jsx)(n.strong,{children:"Description:"})," Maximum number of cached image files"]}),"\n",(0,t.jsx)(n.h3,{id:"cache_file_name",children:"CACHE_FILE_NAME"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Value:"})," ",(0,t.jsx)(n.code,{children:'"motd_info"'})," or ",(0,t.jsx)(n.code,{children:'"motd_info_dev"'}),"\n",(0,t.jsx)(n.strong,{children:"Description:"})," Persistent storage filename (varies by build type)"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"The MOTD system includes comprehensive error handling:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Failures"}),": Automatic retry with exponential backoff"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parsing Errors"}),": Graceful fallback to cached content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Missing Images"}),": Content display without images when unavailable"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Corrupted Cache"}),": Automatic cache rebuilding on detection"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"platform-integration",children:"Platform Integration"}),"\n",(0,t.jsx)(n.h3,{id:"steam-platform",children:"Steam Platform"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Integrates with Steam's content delivery system"}),"\n",(0,t.jsx)(n.li,{children:"Respects Steam's connectivity status"}),"\n",(0,t.jsx)(n.li,{children:"Uses Steam's image caching mechanisms"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"rail-platform",children:"Rail Platform"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Similar functionality adapted for Rail platform requirements"}),"\n",(0,t.jsx)(n.li,{children:"Platform-specific content delivery endpoints"}),"\n",(0,t.jsx)(n.li,{children:"Rail-compatible image management"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"image-optimization",children:"Image Optimization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Limits concurrent image downloads"}),"\n",(0,t.jsx)(n.li,{children:"Implements image slot management"}),"\n",(0,t.jsx)(n.li,{children:"Provides progressive loading for better user experience"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Automatic cleanup of old cached content"}),"\n",(0,t.jsx)(n.li,{children:"Efficient JSON parsing and storage"}),"\n",(0,t.jsx)(n.li,{children:"Controlled memory footprint for image data"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration",children:"Integration"}),"\n",(0,t.jsx)(n.p,{children:"The MOTD Manager integrates with:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Main Menu UI"}),": Content display and interaction"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network System"}),": Content downloading and synchronization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Persistent Storage"}),": Caching and offline functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event System"}),": UI update notifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Platform Services"}),": Steam/Rail integration"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./frontend.md",children:"Frontend"}),": Main menu and UI integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./json.md",children:"JSON"}),": Data parsing and encoding"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./networking.md",children:"Networking"}),": Content download system"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(96540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);