"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3857],{569:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/examples/case-ia-core","title":"Case Study - Island Adventures Core","description":"This case study examines \\"Island Adventures Core\\", a comprehensive mod that ports content from Don\'t Starve\'s single-player DLCs (Shipwrecked and Hamlet) to Don\'t Starve Together. It demonstrates advanced techniques for creating new biomes, mechanics, characters, and integrating them seamlessly with the base game.","source":"@site/docs/api-vanilla/examples/case-ia-core.md","sourceDirName":"api-vanilla/examples","slug":"/api-vanilla/examples/case-ia-core","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-ia-core","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"case-ia-core","title":"Case Study - Island Adventures Core","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z","version":619045},"sidebar":"docs","previous":{"title":"Case Study - The Forge Mod","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-forge"},"next":{"title":"Case Study - Island Adventures Gameplay","permalink":"/dst-api-webdocs/docs/api-vanilla/examples/case-island-adventures"}}');var t=s(4848),a=s(8453);const o={id:"case-ia-core",title:"Case Study - Island Adventures Core",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z"),version:619045},l="Case Study: Island Adventures Core",r={},d=[{value:"Overview",id:"overview",level:2},{value:"Code Structure",id:"code-structure",level:2},{value:"Technical Implementation",id:"technical-implementation",level:2},{value:"Custom Components",id:"custom-components",level:3},{value:"Weather Systems",id:"weather-systems",level:3},{value:"Ocean and Sailing",id:"ocean-and-sailing",level:3},{value:"World Integration",id:"world-integration",level:3},{value:"Poison Mechanics",id:"poison-mechanics",level:3},{value:"API Usage Highlights",id:"api-usage-highlights",level:2},{value:"Postinit System",id:"postinit-system",level:3},{value:"Entity System Modifications",id:"entity-system-modifications",level:3},{value:"World State Management",id:"world-state-management",level:3},{value:"Custom Actions",id:"custom-actions",level:3},{value:"Seamless Multiplayer Integration",id:"seamless-multiplayer-integration",level:3},{value:"Key Lessons",id:"key-lessons",level:2},{value:"1. Large-Scale Systems Integration",id:"1-large-scale-systems-integration",level:3},{value:"2. Custom Components Architecture",id:"2-custom-components-architecture",level:3},{value:"3. World Generation Extensions",id:"3-world-generation-extensions",level:3},{value:"4. Network Synchronization",id:"4-network-synchronization",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"See Also",id:"see-also",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"case-study-island-adventures-core",children:"Case Study: Island Adventures Core"})}),"\n",(0,t.jsx)(e.p,{children:"This case study examines \"Island Adventures Core\", a comprehensive mod that ports content from Don't Starve's single-player DLCs (Shipwrecked and Hamlet) to Don't Starve Together. It demonstrates advanced techniques for creating new biomes, mechanics, characters, and integrating them seamlessly with the base game."}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://gitlab.com/IslandAdventures/ia-core",children:"Gitlab"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://steamcommunity.com/sharedfiles/filedetails/?id=3435352667",children:"Steam Workshop"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(e.p,{children:"Island Adventures Core is the foundation module for a series of mods that transform Don't Starve Together into a tropical archipelago experience. Key features include:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Island and volcano biomes with unique world generation"}),"\n",(0,t.jsx)(e.li,{children:"Weather systems including wind, tropical storms, and seasons"}),"\n",(0,t.jsx)(e.li,{children:"New characters from Shipwrecked (Walani, Wilbur, Woodlegs)"}),"\n",(0,t.jsx)(e.li,{children:"Ocean mechanics with waves, boats, and sea traversal"}),"\n",(0,t.jsx)(e.li,{children:"New tools like machetes and specialized items"}),"\n",(0,t.jsx)(e.li,{children:"Complete integration with DST's multiplayer framework"}),"\n",(0,t.jsx)(e.li,{children:"Custom components for wind effects, poisoning, sailing, and more"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"code-structure",children:"Code Structure"}),"\n",(0,t.jsx)(e.p,{children:"The mod follows a well-organized structure:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"ia-core/\n\u251c\u2500\u2500 anim/                   # Custom animations\n\u251c\u2500\u2500 bigportraits/           # Character portraits\n\u251c\u2500\u2500 images/                 # UI and textures\n\u251c\u2500\u2500 levels/                 # World generation data\n\u251c\u2500\u2500 main/                   # Core mod systems\n\u251c\u2500\u2500 postinit/               # Extensions to existing game systems\n\u2502   \u251c\u2500\u2500 behaviours/         # Modified behaviors\n\u2502   \u251c\u2500\u2500 brains/             # Modified AI\n\u2502   \u251c\u2500\u2500 components/         # Extended components\n\u2502   \u251c\u2500\u2500 engine_components/  # Engine modifications\n\u2502   \u251c\u2500\u2500 map/                # World gen modifications\n\u2502   \u251c\u2500\u2500 prefabs/            # Modified prefabs\n\u2502   \u251c\u2500\u2500 screens/            # UI modifications\n\u2502   \u251c\u2500\u2500 sim/                # Simulation modifications\n\u2502   \u251c\u2500\u2500 stategraphs/        # Animation state modifications\n\u2502   \u2514\u2500\u2500 widgets/            # UI widget modifications\n\u251c\u2500\u2500 scripts/                # New gameplay systems\n\u2502   \u251c\u2500\u2500 brains/             # New AI behaviors\n\u2502   \u251c\u2500\u2500 components/         # New components\n\u2502   \u251c\u2500\u2500 map/                # New world generation\n\u2502   \u251c\u2500\u2500 prefabs/            # New entities\n\u2502   \u251c\u2500\u2500 screens/            # Custom UI screens\n\u2502   \u251c\u2500\u2500 stategraphs/        # Custom animation states\n\u2502   \u251c\u2500\u2500 tools/              # Utility functions\n\u2502   \u2514\u2500\u2500 widgets/            # Custom UI elements\n\u251c\u2500\u2500 shaders/                # Custom visual effects\n\u251c\u2500\u2500 sound/                  # Custom audio\n\u251c\u2500\u2500 strings/                # Localization\n\u251c\u2500\u2500 modinfo.lua             # Mod configuration\n\u2514\u2500\u2500 modmain.lua             # Main entry point\n"})}),"\n",(0,t.jsx)(e.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,t.jsx)(e.h3,{id:"custom-components",children:"Custom Components"}),"\n",(0,t.jsx)(e.p,{children:"Island Adventures Core introduces numerous custom components to support its unique gameplay features:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Example: Sailor Component (for boat handling)\nfunction Sailor:Mount(boat)\n    self:Dismount()\n    \n    self.mounttask = nil\n    self.boat = boat\n    self.is_sailing = true\n\n    if boat.components.boatphysics ~= nil then\n        boat.components.boatphysics:AddSailor(self.inst)\n    end\n    \n    self.inst:AddTag("sailing")\n    self.inst:PushEvent("mounted_boat", {boat = boat})\nend\n\nfunction Sailor:GetWindDirection()\n    if TheWorld.components.worldwind ~= nil then\n        return TheWorld.components.worldwind:GetWindDirection()\n    end\n    return 0\nend\n'})}),"\n",(0,t.jsx)(e.p,{children:"Key components include:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"sailor"})," - For boat control and navigation"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"poisonable"})," - For poison status effects"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"windvisuals"})," - For wind-based visual effects"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"blowinwindgust"})," - For wind physics on objects"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"boatjumper"})," - For jumping between boats"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"hackable"})," - For harvesting new resources like bamboo"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"ia_drownable"})," - For ocean drowning mechanics"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"telescope"})," - For scouting distant locations"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"weather-systems",children:"Weather Systems"}),"\n",(0,t.jsx)(e.p,{children:"The mod implements comprehensive weather systems with wind, waves, and storms:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Wind system implementation (simplified)\nfunction WorldWind:OnUpdate(dt)\n    self.direction = self.direction + self.directionspeed * dt\n    if self.direction >= 2*PI then\n        self.direction = self.direction - 2*PI\n    end\n\n    self.timer = self.timer - dt\n    if self.timer <= 0 then\n        local season = TheWorld.state.season\n        local gusts = false\n        \n        if season == "hurricane" then\n            gusts = true\n            self:SetWindSpeed(math.random() * 0.5 + 1.0, true)\n        elseif season == "mild" then\n            self:SetWindSpeed(math.random() * 0.3, true)\n        end\n        \n        if gusts and math.random() < 0.2 then\n            self:StartGust()\n        end\n        \n        self.timer = math.random() * TUNING.WIND_CHANGE_TIME\n    end\n    \n    self:UpdateEntities()\nend\n'})}),"\n",(0,t.jsx)(e.h3,{id:"ocean-and-sailing",children:"Ocean and Sailing"}),"\n",(0,t.jsx)(e.p,{children:"The mod adds robust ocean and sailing mechanics:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Wave system implementation (simplified)\nWaveManager.GenerateWaveAtPoint = function(self, wave_type, pt, dir_rad)\n    local inst = SpawnPrefab(self.wave_prefabs[wave_type])\n    local dir_vec = Vector3(math.cos(dir_rad), 0, -math.sin(dir_rad))\n    \n    inst.Transform:SetPosition(pt.x, 0, pt.z)\n    inst.Transform:SetRotation(dir_rad / DEGREES)\n    inst.components.waveobstacle:SetDirection(dir_vec)\n    \n    return inst\nend\n\n-- Boat trawling system for fishing while moving\nfunction BoatTrawler:StartTrawling()\n    self.trawling = true\n    self.trawltime = 0\n    self:SetTrawlDistance(0)\n    self.inst:StartUpdatingComponent(self)\n    self.inst:PushEvent("trawlstart")\nend\n'})}),"\n",(0,t.jsx)(e.h3,{id:"world-integration",children:"World Integration"}),"\n",(0,t.jsx)(e.p,{children:"The mod seamlessly integrates with DST's world system, allowing travel between regular world and island worlds:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Sea/Skyworthy (portal) implementation (simplified)\nlocal function OnActivate(inst, doer)\n    if not inst:HasTag("active") then\n        return false\n    elseif not (doer ~= nil and doer:HasTag("player")) then\n        return false, "NOTPLAYER"\n    end\n\n    local world = TheWorld\n    if world == nil or world.net == nil then\n        return false\n    end\n\n    local target_shard = nil\n    for shard_id, _ in pairs(world.net.components.shardstate:GetConnectedShards()) do\n        target_shard = shard_id\n        break\n    end\n\n    if target_shard == nil then\n        return false, "NOWORLD"\n    end\n\n    -- Initiate migration to other world\n    TheWorld:PushEvent("ms_playerdespawnandmigrate", {\n        player = doer, \n        worldid = target_shard,\n        portal_id = inst.components.worldmigrator.id\n    })\n    \n    return true\nend\n'})}),"\n",(0,t.jsx)(e.h3,{id:"poison-mechanics",children:"Poison Mechanics"}),"\n",(0,t.jsx)(e.p,{children:"The mod implements a poison system that affects players and mobs:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Poisonable component (simplified)\nfunction Poisonable:SetPoisoned(dopoisoned, poisonbuildup)\n    if dopoisoned then\n        if poisonbuildup ~= nil then\n            self.poisonbuildup = poisonbuildup\n        end\n\n        if self.poisonbuildup >= TUNING.POISON_BUILD_UP_THRESHOLD then\n            self.poisoned = true\n            self.poisonbuilduprate = 0\n            self.inst:AddTag("poisoned")\n            self.inst:PushEvent("poisoned")\n\n            if self.task == nil then\n                self.task = self.inst:DoPeriodicTask(1, DoPoisonDamage, 0, self)\n            end\n        end\n    else\n        self.poisoned = false\n        self.poisonbuildup = 0\n        self.inst:RemoveTag("poisoned")\n        self:StopDamage()\n    end\nend\n'})}),"\n",(0,t.jsx)(e.h2,{id:"api-usage-highlights",children:"API Usage Highlights"}),"\n",(0,t.jsx)(e.h3,{id:"postinit-system",children:"Postinit System"}),"\n",(0,t.jsx)(e.p,{children:"The mod makes extensive use of DST's component postinit system to extend existing components:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Extending locomotor component for swimming\nAddComponentPostInit("locomotor", function(self)\n    local _oldGetRunSpeed = self.GetRunSpeed\n    function self:GetRunSpeed()\n        local speed = _oldGetRunSpeed(self)\n        \n        -- Apply swimming speed modifiers\n        if self.inst:HasTag("swimming") then\n            speed = speed * TUNING.SWIMMING_SPEED_MULT\n            \n            if self.inst.components.sailor ~= nil and self.inst.components.sailor:IsSailing() then\n                speed = speed * TUNING.SAILBOAT_SPEED\n            end\n            \n            if TheWorld.components.worldwind ~= nil then\n                local wind_speed = TheWorld.components.worldwind:GetWindSpeed()\n                local wind_angle = self:GetWindSailingAngle()\n                \n                if wind_angle < 45 then\n                    -- Sailing with the wind\n                    speed = speed + (wind_speed * TUNING.WIND_SAIL_BOOST)\n                elseif wind_angle > 135 then\n                    -- Sailing against the wind\n                    speed = speed - (wind_speed * TUNING.WIND_SAIL_PENALTY)\n                end\n            end\n        end\n        \n        return speed\n    end\nend)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"entity-system-modifications",children:"Entity System Modifications"}),"\n",(0,t.jsx)(e.p,{children:"The mod modifies the entity system to handle ocean/land transitions:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Example of entity script extension for water interactions\nAddPrefabPostInit("player_classified", function(inst)\n    if not TheWorld.ismastersim then\n        inst:ListenForEvent("ia_drownabledirty", function()\n            if inst.ia_drownable ~= nil then\n                local val = inst.ia_drownable:value()\n                \n                if val > 0 then\n                    inst._parent:AddTag("drownable")\n                    if val == 2 then\n                        inst._parent:AddTag("drowning")\n                    else\n                        inst._parent:RemoveTag("drowning")\n                    end\n                else\n                    inst._parent:RemoveTag("drownable")\n                    inst._parent:RemoveTag("drowning")\n                end\n            end\n        end)\n    end\nend)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"world-state-management",children:"World State Management"}),"\n",(0,t.jsx)(e.p,{children:"The mod adds new world state variables to track tropical seasons and events:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Adding new world states \nAddPrefabPostInit("world", function(inst)\n    local _SetPhase = inst.SetPhase\n    inst.SetPhase = function(inst, phase)\n        _SetPhase(inst, phase)\n        \n        if inst.state.isday then\n            -- Update island-specific day events\n            if inst.components.volcanomanager ~= nil then\n                inst.components.volcanomanager:OnDayChange()\n            end\n            \n            -- Update tides\n            if inst.components.tidemanager ~= nil then\n                inst.components.tidemanager:OnDayChange()\n            end\n        end\n    end\n    \n    -- Add hurricane season state\n    if inst.state ~= nil then\n        inst.state.ishurricaneseason = false\n    end\nend)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"custom-actions",children:"Custom Actions"}),"\n",(0,t.jsx)(e.p,{children:"The mod adds new player actions for island-specific interactions:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Hack action for machetes\nlocal HACK = Action({ priority=2, mount_valid=true })\nHACK.id = "HACK"\nHACK.str = STRINGS.ACTIONS.HACK\nHACK.fn = function(act)\n    if act.target ~= nil and act.target.components.hackable ~= nil then\n        return act.target.components.hackable:Hack(act.doer, act.invobject)\n    end\nend\n\n-- Register the action\nAddAction(HACK)\n\n-- Add component action handlers\nAddComponentAction("SCENE", "hackable", function(inst, doer, actions, right)\n    if right and inst:HasTag("hackable") then\n        table.insert(actions, ACTIONS.HACK)\n    end\nend)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"seamless-multiplayer-integration",children:"Seamless Multiplayer Integration"}),"\n",(0,t.jsx)(e.p,{children:"The mod implements network synchronization for custom components:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Network synchronization (simplified)\nfunction Sailor:OnSave()\n    return {\n        is_sailing = self.is_sailing,\n        has_overhead_sail = self.has_overhead_sail\n    }\nend\n\nfunction Sailor:OnLoad(data)\n    if data ~= nil then\n        self.is_sailing = data.is_sailing or false\n        self.has_overhead_sail = data.has_overhead_sail or false\n    end\nend\n\nfunction Sailor_Replica:OnRemoteBoatInfo(info)\n    self.is_sailing = info.is_sailing\n    self.has_overhead_sail = info.has_overhead_sail\n    \n    if self.inst.player_classified ~= nil then\n        self.inst.player_classified:SetValue("is_sailing", self.is_sailing)\n    end\nend\n'})}),"\n",(0,t.jsx)(e.h2,{id:"key-lessons",children:"Key Lessons"}),"\n",(0,t.jsx)(e.h3,{id:"1-large-scale-systems-integration",children:"1. Large-Scale Systems Integration"}),"\n",(0,t.jsx)(e.p,{children:"The mod demonstrates how to integrate large-scale systems:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Creating biome-specific mechanics that work alongside base game systems"}),"\n",(0,t.jsx)(e.li,{children:"Extending existing components rather than replacing them"}),"\n",(0,t.jsx)(e.li,{children:"Maintaining compatibility with the core game"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"2-custom-components-architecture",children:"2. Custom Components Architecture"}),"\n",(0,t.jsx)(e.p,{children:"The mod showcases effective component design:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Creating specialized components for unique mechanics (sailing, wind, poison)"}),"\n",(0,t.jsx)(e.li,{children:"Ensuring components are reusable and modular"}),"\n",(0,t.jsx)(e.li,{children:"Properly handling component interactions and dependencies"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"3-world-generation-extensions",children:"3. World Generation Extensions"}),"\n",(0,t.jsx)(e.p,{children:"The mod demonstrates sophisticated world generation techniques:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Creating custom biomes with unique rules"}),"\n",(0,t.jsx)(e.li,{children:"Connecting multiple world types through portals"}),"\n",(0,t.jsx)(e.li,{children:"Managing biome-specific resources and spawning"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"4-network-synchronization",children:"4. Network Synchronization"}),"\n",(0,t.jsx)(e.p,{children:"The mod implements robust networking for multiplayer compatibility:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Creating client/server component pairs (replicas)"}),"\n",(0,t.jsx)(e.li,{children:"Efficiently synchronizing state across players"}),"\n",(0,t.jsx)(e.li,{children:"Handling latency and disconnections gracefully"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(e.p,{children:"Island Adventures Core showcases advanced techniques for creating a comprehensive expansion to Don't Starve Together. By studying its implementation, developers can learn how to effectively extend DST with new biomes, mechanics, and custom components while maintaining multiplayer compatibility and performance."}),"\n",(0,t.jsx)(e.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/component-system",children:"Component System"})," - For understanding how components work"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/event-system",children:"Event System"})," - For event handling as used in this mod"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-system",children:"Network System"})," - For multiplayer synchronization"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/world/worldgen",children:"World Generation"})," - For custom biome creation"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-component",children:"Custom Component Example"})," - For learning how to create custom components"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>l});var i=s(6540);const t={},a=i.createContext(t);function o(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);