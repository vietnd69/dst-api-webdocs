"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7332],{633:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-vanilla/global-objects/theworld","title":"TheWorld","description":"TheWorld is the main global object representing the game world in Don\'t Starve Together. It provides access to the world state, terrain information, components, and event management.","source":"@site/docs/api-vanilla/global-objects/theworld.md","sourceDirName":"api-vanilla/global-objects","slug":"/api-vanilla/global-objects/theworld","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theworld","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"theworld","title":"TheWorld","sidebar_position":2,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Global Objects Overview","permalink":"/dst-api-webdocs/docs/api/global-objects"},"next":{"title":"ThePlayer","permalink":"/dst-api-webdocs/docs/api-vanilla/global-objects/theplayer"}}');var a=o(4848),t=o(8453);const l={id:"theworld",title:"TheWorld",sidebar_position:2,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="TheWorld",i={},d=[{value:"World State and Properties",id:"world-state-and-properties",level:2},{value:"Map and Terrain",id:"map-and-terrain",level:2},{value:"World Components",id:"world-components",level:2},{value:"Event System",id:"event-system",level:2},{value:"Task Scheduling",id:"task-scheduling",level:2},{value:"World Save/Load",id:"world-saveload",level:2},{value:"World Topology",id:"world-topology",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"theworld",children:"TheWorld"})}),"\n",(0,a.jsx)(n.p,{children:"TheWorld is the main global object representing the game world in Don't Starve Together. It provides access to the world state, terrain information, components, and event management."}),"\n",(0,a.jsx)(n.h2,{id:"world-state-and-properties",children:"World State and Properties"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Check if this is the master simulation (server)\nlocal is_master = TheWorld.ismastersim\n\n-- Check if the world is a cave\nlocal is_cave = TheWorld:HasTag("cave")\n\n-- Get the current phase of the day\nlocal phase = TheWorld.state.phase -- Returns "day", "dusk", or "night"\n\n-- Get the current season\nlocal season = TheWorld.state.season -- Returns "autumn", "winter", "spring", or "summer"\n\n-- Get the current weather\nlocal is_raining = TheWorld.state.israining\nlocal is_snowing = TheWorld.state.issnowing\nlocal is_windy = TheWorld.state.iswindy\n\n-- Get the current moon phase\nlocal moon_phase = TheWorld.state.moonphase -- 0 to 8, where 0 is new moon and 4 is full moon\n'})}),"\n",(0,a.jsx)(n.h2,{id:"map-and-terrain",children:"Map and Terrain"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Get the world map\nlocal map = TheWorld.Map\n\n-- Check if a point is on land\nlocal is_on_land = TheWorld.Map:IsAboveGroundAtPoint(x, y, z)\n\n-- Check if a point is in the ocean\nlocal is_in_ocean = TheWorld.Map:IsOceanAtPoint(x, y, z)\n\n-- Get the tile at a point\nlocal tile_type = TheWorld.Map:GetTileAtPoint(x, y, z) -- Returns WORLD_TILES enum value\n\n-- Check if terrain can be modified at a point\nlocal can_terraform = TheWorld.Map:CanTerraformAtPoint(x, y, z)\n\n-- Check if the soil can be tilled at a point\nlocal can_till = TheWorld.Map:CanTillSoilAtPoint(x, y, z)\n\n-- Get a platform (boat) at a point\nlocal boat = TheWorld.Map:GetPlatformAtPoint(x, z)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"world-components",children:"World Components"}),"\n",(0,a.jsx)(n.p,{children:"TheWorld contains many components that manage different aspects of the game. Here are some important ones:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Seasons component\nlocal seasons = TheWorld.components.seasons\nlocal days_left = seasons:GetDaysLeftInSeason()\nlocal total_days = seasons:GetSeasonLength()\n\n-- Weather components\nlocal precipitation = TheWorld.components.precipitation\nlocal wetness_rate = precipitation:GetWetnessRate()\n\n-- Time component\nlocal time = TheWorld.components.worldstate.data.time -- Current time of day (0-1)\nlocal cycles = TheWorld.components.worldstate.data.cycles -- Number of days passed\n\n-- Monster spawners\nlocal hounds = TheWorld.components.hounded\nhounds:ForceActivePhase() -- Trigger a hound attack\n\n-- Special spawners for giants\nlocal deerclops = TheWorld.components.deerclopsspawner\nlocal bearger = TheWorld.components.beargerspawner\nlocal malbatross = TheWorld.components.malbatrossspawner\n\n-- Special environment components\nlocal moonstorms = TheWorld.components.moonstorms -- Lunar island storms\nlocal sandstorms = TheWorld.components.sandstorms -- Desert sandstorms\n"})}),"\n",(0,a.jsx)(n.h2,{id:"event-system",children:"Event System"}),"\n",(0,a.jsx)(n.p,{children:"TheWorld uses an event system to communicate between different parts of the game:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Listen for events\nTheWorld:ListenForEvent("phase_changed", function(world, data)\n    print("Phase changed to: " .. data.newphase)\nend)\n\n-- Push events\nTheWorld:PushEvent("ms_playerleft", {player = player}) -- Notify world that a player left\n\n-- Common events\n-- "cycle_changed" - Day number changed\n-- "phase_changed" - Day/dusk/night changed\n-- "season_changed" - Season changed\n-- "ms_save" - World is being saved\n-- "ms_simunpaused" - Simulation unpaused\n-- "ms_simpaused" - Simulation paused\n-- "ms_playerjoined" - Player joined the game\n-- "ms_playerleft" - Player left the game\n'})}),"\n",(0,a.jsx)(n.h2,{id:"task-scheduling",children:"Task Scheduling"}),"\n",(0,a.jsx)(n.p,{children:"TheWorld provides task scheduling functions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Do something after a delay\nTheWorld:DoTaskInTime(5, function()\n    print("This happens after 5 seconds")\nend)\n\n-- Do something periodically\nlocal task = TheWorld:DoPeriodicTask(10, function()\n    print("This happens every 10 seconds")\nend)\n\n-- Cancel a task\ntask:Cancel()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"world-saveload",children:"World Save/Load"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Trigger a world save\nTheWorld:PushEvent("ms_save")\n\n-- Dump world state information\nlocal world_state = TheWorld.components.worldstate:Dump()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"world-topology",children:"World Topology"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- Access world topology (nodes and connections)\nlocal nodes = TheWorld.topology.nodes\nlocal ids = TheWorld.topology.ids -- Node names/IDs\nlocal edges = TheWorld.topology.edges -- Connections between nodes\n\n-- Find a specific room by name\nlocal found_node = nil\nfor i, id in ipairs(TheWorld.topology.ids) do\n    if id:find("CaveEntrance") then\n        found_node = i\n        break\n    end\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Server vs. Client"}),": Some world components are only available on the server"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Ismastersim"}),": Always check ",(0,a.jsx)(n.code,{children:"TheWorld.ismastersim"})," before modifying world state"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance"}),": Events and tasks have performance implications, use them judiciously"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Component Access"}),": Not all components are guaranteed to exist in all world types"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"World Types"}),": Behavior may differ between forest worlds and caves"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Environmental Conditions"}),": Checking weather, time, and season"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Map Manipulation"}),": Checking terrain type and modifying the world"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Game Logic"}),": Scheduling events and responding to game state changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Monster Spawning"}),": Triggering or controlling monster spawns"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Mod Integration"}),": Using the event system to integrate with other mods"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var s=o(6540);const a={},t=s.createContext(a);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);