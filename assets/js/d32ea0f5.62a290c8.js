"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[27767],{28453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>c});var s=n(96540);const t={},r=s.createContext(t);function l(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:i},e.children)}},77628:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"game-scripts/core-systems/character-systems/customization/skinstradeutils","title":"Skins Trade Utils","description":"Utility functions for skin trading interface and recipe matching","source":"@site/docs/game-scripts/core-systems/character-systems/customization/skinstradeutils.md","sourceDirName":"game-scripts/core-systems/character-systems/customization","slug":"/game-scripts/core-systems/character-systems/customization/skinstradeutils","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skinstradeutils","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"skinstradeutils","title":"Skins Trade Utils","description":"Utility functions for skin trading interface and recipe matching","sidebar_position":9,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Skins Filters Utils","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skinsfiltersutils"},"next":{"title":"Skins Utils","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skinsutils"}}');var t=n(74848),r=n(28453);const l={id:"skinstradeutils",title:"Skins Trade Utils",description:"Utility functions for skin trading interface and recipe matching",sidebar_position:9,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},c="Skins Trade Utils",a={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Trade Recipe System",id:"trade-recipe-system",level:3},{value:"Selection Management",id:"selection-management",level:3},{value:"Functions",id:"functions",level:2},{value:"GetNumberSelectedItems(selections)",id:"get-number-selected-items",level:3},{value:"GetBasicRecipeMatch(selections)",id:"get-basic-recipe-match",level:3},{value:"GetBasicFilters(recipe_name)",id:"get-basic-filters",level:3},{value:"GetSpecialFilters(recipe_data, selected_items)",id:"get-special-filters",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Trading Interface",id:"basic-trading-interface",level:3},{value:"Advanced Recipe Handling",id:"advanced-recipe-handling",level:3},{value:"Selection Validation",id:"selection-validation",level:3},{value:"Integration Guidelines",id:"integration-guidelines",level:2},{value:"Trade Interface Requirements",id:"trade-interface-requirements",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Recipe Integration",id:"recipe-integration",level:2},{value:"Basic Recipe Flow",id:"basic-recipe-flow",level:3},{value:"Special Recipe Flow",id:"special-recipe-flow",level:3},{value:"Related Modules",id:"related-modules",level:2},{value:"Constants and Dependencies",id:"constants-and-dependencies",level:2},{value:"Best Practices",id:"best-practices",level:2}];function o(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"skins-trade-utils",children:"Skins Trade Utils"})}),"\n",(0,t.jsx)(i.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Build Version"}),(0,t.jsx)(i.th,{children:"Change Date"}),(0,t.jsx)(i.th,{children:"Change Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"676042"}),(0,t.jsx)(i.td,{children:"2025-06-21"}),(0,t.jsx)(i.td,{children:"stable"}),(0,t.jsx)(i.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"skinstradeutils"})," module provides utility functions for the skin trading interface in Don't Starve Together. It handles trade recipe matching, filter generation, and selection validation for the trading system. This module works in conjunction with the trade recipes system to enable players to exchange skins for different rarities and types."]}),"\n",(0,t.jsx)(i.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsx)(i.p,{children:"This module requires:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skinsutils",children:(0,t.jsx)(i.code,{children:"skinsutils"})}),": Core skins utility functions"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"./trade_recipes.md",children:(0,t.jsx)(i.code,{children:"trade_recipes"})}),": Trade recipe definitions and rules"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,t.jsx)(i.h3,{id:"trade-recipe-system",children:"Trade Recipe System"}),"\n",(0,t.jsx)(i.p,{children:"The trading system uses recipes that define:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Input Requirements:"})," What items can be traded"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Output Results:"})," What items are received"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Restrictions:"})," Special conditions that must be met"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Rarity Matching:"})," Ensuring input/output rarity consistency"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"selection-management",children:"Selection Management"}),"\n",(0,t.jsx)(i.p,{children:"Trade interfaces must track:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Selected Items:"})," Items player wants to trade"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Recipe Matching:"})," Which recipes apply to current selection"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Filter Generation:"})," Dynamic filters based on recipe requirements"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Validation:"})," Ensuring selections meet recipe restrictions"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(i.h3,{id:"get-number-selected-items",children:"GetNumberSelectedItems(selections)"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Status:"})," ",(0,t.jsx)(i.code,{children:"stable"})]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nCounts the total number of items currently selected for trading."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"selections"})," (table): Table of selected items indexed by selection ID"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"(number): Count of selected items"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'local selections = {\n    ["item1"] = {item = "wilson_axe", rarity = "Common"},\n    ["item2"] = {item = "wilson_pickaxe", rarity = "Common"},\n    ["item3"] = {item = "wilson_shovel", rarity = "Common"}\n}\n\nlocal count = GetNumberSelectedItems(selections)\n-- count = 3\n'})}),"\n",(0,t.jsx)(i.h3,{id:"get-basic-recipe-match",children:"GetBasicRecipeMatch(selections)"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Status:"})," ",(0,t.jsx)(i.code,{children:"stable"})]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nFinds the basic trade recipe that matches the rarity of currently selected items. Returns the first matching recipe name from the basic recipe list."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"selections"})," (table): Table of selected items with rarity information"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"(string|nil): Recipe name if match found, nil otherwise"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'local selections = {\n    ["item1"] = {item = "wilson_axe", rarity = "Common"},\n    ["item2"] = {item = "wilson_pickaxe", rarity = "Common"}\n}\n\nlocal recipe_name = GetBasicRecipeMatch(selections)\n-- recipe_name = "common_to_classy" (if such recipe exists)\n\n-- No selections\nlocal empty_recipe = GetBasicRecipeMatch({})\n-- empty_recipe = nil\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Recipe Matching Logic:"})}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"Extracts rarity from first selected item"}),"\n",(0,t.jsx)(i.li,{children:"Searches TRADE_RECIPES for matching input rarity"}),"\n",(0,t.jsx)(i.li,{children:"Returns first matching recipe name"}),"\n",(0,t.jsx)(i.li,{children:"Returns nil if no selections or no matching recipe"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"get-basic-filters",children:"GetBasicFilters(recipe_name)"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Status:"})," ",(0,t.jsx)(i.code,{children:"stable"})]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nGenerates filter criteria for basic trade recipes. Returns filters that match the input requirements of the specified recipe, or default filters if no recipe is provided."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"recipe_name"})," (string|nil): Name of the trade recipe to generate filters for"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"(table): Array of filter groups for use with filtering functions"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'-- Get filters for specific recipe\nlocal filters = GetBasicFilters("common_to_classy")\n-- filters = {{"Common"}} (if recipe requires Common rarity input)\n\n-- Get default filters when no recipe specified\nlocal default_filters = GetBasicFilters(nil)\n-- default_filters = {{"Common"}, {"Classy"}, {"Spiffy"}}\n\n-- Usage with filtering system\nlocal filtered_items = ApplyFilters(full_skins_list, filters)\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Filter Generation:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"With Recipe:"})," Returns filter for recipe's input rarity requirement"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Without Recipe:"})," Returns default filters for common trading rarities"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Format:"})," Returns array of filter groups compatible with filtering system"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"get-special-filters",children:"GetSpecialFilters(recipe_data, selected_items)"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Status:"})," ",(0,t.jsx)(i.code,{children:"stable"})]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nGenerates specialized filters based on complex trade recipe restrictions and currently selected items. Analyzes unsatisfied restrictions to create targeted filters that help users find compatible items."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"recipe_data"})," (table): Complete recipe data including restrictions"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"selected_items"})," (table): Currently selected items for validation"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"(table): Array of specialized filter groups targeting unsatisfied restrictions"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'local recipe_data = {\n    Restrictions = {\n        {\n            ItemType = "wilson_axe",\n            Rarity = "Elegant",\n            Tags = {"body_tag"}\n        },\n        {\n            Rarity = "Distinguished", \n            Tags = {"legs_tag"}\n        }\n    }\n}\n\nlocal selected_items = {\n    {item = "wilson_axe", rarity = "Elegant"}\n}\n\nlocal filters = GetSpecialFilters(recipe_data, selected_items)\n-- filters = {{"Distinguished", "legs"}} (for unsatisfied restriction)\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Filter Generation Process:"})}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Analyze Restrictions:"})," Checks which recipe restrictions are unsatisfied"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Extract Requirements:"})," Identifies item types, rarities, and tags needed"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Build Filters:"})," Creates filter groups for each unsatisfied restriction"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Type Mapping:"})," Converts restriction tags to filter-compatible types"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Deduplication:"})," Ensures no duplicate filter criteria"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Filter Components:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Item Type:"})," Specific item IDs required by restrictions"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Clothing Type:"})," Derived from restriction tags (body, legs, etc.)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Rarity:"})," Required rarity levels for unsatisfied restrictions"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(i.h3,{id:"basic-trading-interface",children:"Basic Trading Interface"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"-- Initialize trading interface\nfunction TradeWidget:InitializeTrading()\n    self.selected_items = {}\n    self.current_recipe = nil\n    self.available_filters = {}\nend\n\n-- Handle item selection\nfunction TradeWidget:OnItemSelected(item)\n    self.selected_items[item.id] = item\n    \n    -- Update recipe matching\n    self.current_recipe = GetBasicRecipeMatch(self.selected_items)\n    \n    -- Update available filters\n    if self.current_recipe then\n        self.available_filters = GetBasicFilters(self.current_recipe)\n    else\n        self.available_filters = GetBasicFilters(nil)\n    end\n    \n    -- Refresh UI\n    self:UpdateTradeInterface()\nend\n\n-- Check selection count\nfunction TradeWidget:UpdateTradeButton()\n    local count = GetNumberSelectedItems(self.selected_items)\n    self.trade_button:SetEnabled(count > 0 and self.current_recipe ~= nil)\nend\n"})}),"\n",(0,t.jsx)(i.h3,{id:"advanced-recipe-handling",children:"Advanced Recipe Handling"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"-- Handle complex recipe requirements\nfunction TradeWidget:HandleSpecialRecipe(recipe_data)\n    local special_filters = GetSpecialFilters(recipe_data, self.selected_items)\n    \n    if #special_filters > 0 then\n        -- Show specialized filters to help user\n        self:ShowRequiredItemFilters(special_filters)\n    else\n        -- All restrictions satisfied\n        self:EnableTradeExecution()\n    end\nend\n\n-- Dynamic filter management\nfunction TradeWidget:UpdateDynamicFilters()\n    local basic_filters = GetBasicFilters(self.current_recipe)\n    local special_filters = {}\n    \n    if self.current_recipe_data then\n        special_filters = GetSpecialFilters(self.current_recipe_data, self.selected_items)\n    end\n    \n    -- Combine filters for comprehensive filtering\n    local combined_filters = {}\n    for _, filter in ipairs(basic_filters) do\n        table.insert(combined_filters, filter)\n    end\n    for _, filter in ipairs(special_filters) do\n        table.insert(combined_filters, filter)\n    end\n    \n    -- Apply combined filters\n    self.filtered_items = ApplyFilters(self.full_inventory, combined_filters)\n    self:RebuildItemList()\nend\n"})}),"\n",(0,t.jsx)(i.h3,{id:"selection-validation",children:"Selection Validation"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:'-- Validate trading selections\nfunction TradeWidget:ValidateSelection()\n    local count = GetNumberSelectedItems(self.selected_items)\n    \n    if count == 0 then\n        self:ShowMessage("Please select items to trade")\n        return false\n    end\n    \n    local recipe = GetBasicRecipeMatch(self.selected_items)\n    if not recipe then\n        self:ShowMessage("Selected items don\'t match any trade recipe")\n        return false\n    end\n    \n    -- Check for special recipe requirements\n    if self.current_recipe_data and self.current_recipe_data.Restrictions then\n        local special_filters = GetSpecialFilters(self.current_recipe_data, self.selected_items)\n        if #special_filters > 0 then\n            self:ShowMessage("Selection doesn\'t meet all recipe requirements")\n            return false\n        end\n    end\n    \n    return true\nend\n'})}),"\n",(0,t.jsx)(i.h2,{id:"integration-guidelines",children:"Integration Guidelines"}),"\n",(0,t.jsx)(i.h3,{id:"trade-interface-requirements",children:"Trade Interface Requirements"}),"\n",(0,t.jsx)(i.p,{children:"Trade interfaces using these utilities should:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.strong,{children:"Selection Tracking:"})}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"self.selected_items = {} -- Track user selections\n"})}),"\n",(0,t.jsxs)(i.ol,{start:"2",children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.strong,{children:"Recipe Management:"})}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"self.current_recipe = nil -- Current matching recipe\nself.recipe_data = nil    -- Full recipe data for validation\n"})}),"\n",(0,t.jsxs)(i.ol,{start:"3",children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.strong,{children:"Filter Integration:"})}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"-- Use generated filters with filtering system\nlocal filters = GetBasicFilters(recipe_name)\nlocal filtered_items = ApplyFilters(inventory, filters)\n"})}),"\n",(0,t.jsx)(i.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Cache Recipe Lookups:"})," Store recipe data to avoid repeated searches"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Batch Filter Updates:"})," Update filters only when selections change significantly"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Lazy Filter Generation:"})," Generate special filters only when needed"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Selection Debouncing:"})," Avoid excessive validation on rapid selection changes"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(i.p,{children:"The module includes safety measures for:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Empty Selections:"})," Functions handle empty or nil selections gracefully"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Invalid Recipes:"})," Returns appropriate defaults for unknown recipes"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Missing Data:"})," Safely handles missing recipe or item data"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Malformed Restrictions:"})," Skips invalid restriction data"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"recipe-integration",children:"Recipe Integration"}),"\n",(0,t.jsx)(i.h3,{id:"basic-recipe-flow",children:"Basic Recipe Flow"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Selection:"})," User selects items for trading"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Matching:"})," ",(0,t.jsx)(i.code,{children:"GetBasicRecipeMatch()"})," finds applicable recipe"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Filtering:"})," ",(0,t.jsx)(i.code,{children:"GetBasicFilters()"})," generates appropriate filters"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Validation:"})," Selection count and recipe match validation"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Execution:"})," Trade processing with validated items"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"special-recipe-flow",children:"Special Recipe Flow"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Complex Recipe Detection:"})," Recipe has special restrictions"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Restriction Analysis:"})," ",(0,t.jsx)(i.code,{children:"GetSpecialFilters()"})," identifies unmet requirements"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Guided Selection:"})," Filters help user find required items"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Validation:"})," Ensure all restrictions are satisfied"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Completion:"})," Execute trade when all requirements met"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skinsfiltersutils",children:(0,t.jsx)(i.code,{children:"skinsfiltersutils"})}),": Core filtering utilities for skins"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"./trade_recipes.md",children:(0,t.jsx)(i.code,{children:"trade_recipes"})}),": Trade recipe definitions and rules"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skinsutils",children:(0,t.jsx)(i.code,{children:"skinsutils"})}),": Core skins functionality and utilities"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/customization/skin-assets",children:(0,t.jsx)(i.code,{children:"skin_assets"})}),": Skin asset definitions and properties"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"constants-and-dependencies",children:"Constants and Dependencies"}),"\n",(0,t.jsx)(i.p,{children:"This module relies on external constants:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"TRADE_RECIPES:"})," Defined in trade_recipes module"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Rarity Functions:"})," From skinsutils module (GetRarityForItem)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Type Functions:"})," Tag-to-type conversion utilities"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Item Validation:"})," Item ID and type checking functions"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Selection Validation:"})," Always validate selections before executing trades"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"User Feedback:"})," Provide clear feedback about missing requirements"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Filter Clarity:"})," Use generated filters to guide user selections"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Error Recovery:"})," Handle invalid states gracefully with clear messaging"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Performance:"})," Cache expensive operations like recipe lookups"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);