"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2710],{282:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/localization/string-tables","title":"Managing String Tables","description":"This guide covers best practices for organizing, maintaining, and scaling string tables in your Don\'t Starve Together mods to support multiple languages efficiently.","source":"@site/docs/api-vanilla/localization/string-tables.md","sourceDirName":"api-vanilla/localization","slug":"/api-vanilla/localization/string-tables","permalink":"/dst-api-webdocs/docs/api-vanilla/localization/string-tables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"string-tables","title":"Managing String Tables","sidebar_position":3,"version":619045},"sidebar":"docs","previous":{"title":"Implementing Multilingual Support","permalink":"/dst-api-webdocs/docs/api-vanilla/localization/multilingual-support"},"next":{"title":"Font Handling for Different Languages","permalink":"/dst-api-webdocs/docs/api-vanilla/localization/font-handling"}}');var t=a(4848),s=a(8453);const r={id:"string-tables",title:"Managing String Tables",sidebar_position:3,version:619045},l="Managing String Tables for Localization",o={},c=[{value:"String Table Structure",id:"string-table-structure",level:2},{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"String Table Management for Large Mods",id:"string-table-management-for-large-mods",level:2},{value:"String Interpolation",id:"string-interpolation",level:2},{value:"Translation Management Tools",id:"translation-management-tools",level:2},{value:"Spreadsheet Method",id:"spreadsheet-method",level:3},{value:"JSON Intermediate Format",id:"json-intermediate-format",level:3},{value:"Version Control for Translations",id:"version-control-for-translations",level:2},{value:"Handling Missing Translations",id:"handling-missing-translations",level:2},{value:"Updating String Tables",id:"updating-string-tables",level:2},{value:"Automated String Extraction",id:"automated-string-extraction",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"managing-string-tables-for-localization",children:"Managing String Tables for Localization"})}),"\n",(0,t.jsx)(e.p,{children:"This guide covers best practices for organizing, maintaining, and scaling string tables in your Don't Starve Together mods to support multiple languages efficiently."}),"\n",(0,t.jsx)(e.h2,{id:"string-table-structure",children:"String Table Structure"}),"\n",(0,t.jsx)(e.p,{children:"A well-organized string table structure is essential for maintainable localization. Here's a recommended structure:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'STRINGS.MY_MOD = {\n    -- Categorize by content type\n    ITEMS = {\n        ITEM_1 = { NAME = "Item Name", DESCRIPTION = "Item description." },\n        ITEM_2 = { NAME = "Another Item", DESCRIPTION = "Another description." },\n    },\n    CHARACTERS = {\n        CHARACTER_1 = {\n            DESCRIBE = {\n                ITEM_1 = "Character\'s comment about item 1",\n                ITEM_2 = "Character\'s comment about item 2",\n            },\n            ACTIONFAIL = {\n                ITEM_1 = "Failed action comment",\n            },\n        },\n    },\n    UI = {\n        BUTTONS = {\n            CRAFT = "Craft",\n            CANCEL = "Cancel",\n        },\n        TOOLTIPS = {\n            ITEM_1 = "Tooltip for item 1",\n        },\n    },\n    -- Add more categories as needed\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,t.jsx)(e.p,{children:"Consistent naming conventions make string tables easier to manage:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"UPPERCASE"})," for keys"]}),"\n",(0,t.jsx)(e.li,{children:"Use descriptive, hierarchical names"}),"\n",(0,t.jsx)(e.li,{children:"Group related strings together"}),"\n",(0,t.jsx)(e.li,{children:"Use consistent patterns for similar items"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- Good naming convention\nSTRINGS.MY_MOD.ITEMS.MAGIC_SWORD = { NAME = "Magic Sword" }\nSTRINGS.MY_MOD.ITEMS.MAGIC_STAFF = { NAME = "Magic Staff" }\n\n-- Avoid inconsistent naming\nSTRINGS.MY_MOD.SWORD_NAME = "Magic Sword" -- Inconsistent structure\nSTRINGS.MY_MOD.staff = { name = "Magic Staff" } -- Inconsistent casing\n'})}),"\n",(0,t.jsx)(e.h2,{id:"string-table-management-for-large-mods",children:"String Table Management for Large Mods"}),"\n",(0,t.jsx)(e.p,{children:"For mods with extensive content, consider breaking down string tables into multiple files:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"modroot/\n  \u251c\u2500\u2500 scripts/\n  \u2502    \u2514\u2500\u2500 languages/\n  \u2502         \u251c\u2500\u2500 en/\n  \u2502         \u2502    \u251c\u2500\u2500 items.lua\n  \u2502         \u2502    \u251c\u2500\u2500 characters.lua\n  \u2502         \u2502    \u251c\u2500\u2500 ui.lua\n  \u2502         \u2502    \u2514\u2500\u2500 misc.lua\n  \u2502         \u251c\u2500\u2500 zh/\n  \u2502         \u2502    \u251c\u2500\u2500 items.lua\n  \u2502         \u2502    \u251c\u2500\u2500 characters.lua\n  \u2502         \u2502    \u251c\u2500\u2500 ui.lua\n  \u2502         \u2502    \u2514\u2500\u2500 misc.lua\n  \u2502         \u2514\u2500\u2500 strings_loader.lua\n  \u2514\u2500\u2500 modmain.lua\n"})}),"\n",(0,t.jsx)(e.p,{children:"Then use a loader script to combine them:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- strings_loader.lua\nlocal function LoadLanguageFiles(language)\n    local path = "scripts/languages/" .. language .. "/"\n    \n    -- Load each category file if it exists\n    local categories = {"items", "characters", "ui", "misc"}\n    for _, category in ipairs(categories) do\n        local file_path = path .. category .. ".lua"\n        if GLOBAL.kleifileexists(file_path) then\n            modimport(file_path)\n        end\n    end\nend\n\n-- Load English as default\nLoadLanguageFiles("en")\n\n-- Load user\'s language if available\nlocal language = GLOBAL.LanguageTranslator.defaultlanguage\nif language ~= "en" and GLOBAL.kleifileexists("scripts/languages/" .. language) then\n    LoadLanguageFiles(language)\nend\n'})}),"\n",(0,t.jsx)(e.h2,{id:"string-interpolation",children:"String Interpolation"}),"\n",(0,t.jsx)(e.p,{children:"For strings that require dynamic values, use a consistent pattern:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- In string table\nSTRINGS.MY_MOD.UI.TOOLTIPS.DAMAGE = "Deals {damage} damage"\nSTRINGS.MY_MOD.UI.TOOLTIPS.HEALING = "Restores {amount} health over {duration} seconds"\n\n-- In code\nfunction FormatString(str, variables)\n    local result = str\n    for key, value in pairs(variables) do\n        result = string.gsub(result, "{" .. key .. "}", tostring(value))\n    end\n    return result\nend\n\nlocal tooltip = FormatString(STRINGS.MY_MOD.UI.TOOLTIPS.DAMAGE, {damage = 25})\n-- Result: "Deals 25 damage"\n\nlocal healing_tooltip = FormatString(STRINGS.MY_MOD.UI.TOOLTIPS.HEALING, {amount = 50, duration = 10})\n-- Result: "Restores 50 health over 10 seconds"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"translation-management-tools",children:"Translation Management Tools"}),"\n",(0,t.jsx)(e.p,{children:"For larger mods with many strings, consider using external tools to manage translations:"}),"\n",(0,t.jsx)(e.h3,{id:"spreadsheet-method",children:"Spreadsheet Method"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Create a spreadsheet with columns for key, English text, and each supported language"}),"\n",(0,t.jsx)(e.li,{children:"Export to CSV"}),"\n",(0,t.jsx)(e.li,{children:"Use a script to convert the CSV to Lua string tables"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Example spreadsheet:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Key                     | English        | Chinese      | Russian\n-----------------------|----------------|-------------|-------------\nITEMS.SWORD.NAME       | Magic Sword    | \u9b54\u6cd5\u5251        | \u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0435\u0447\nITEMS.SWORD.DESCRIPTION | A magical sword| \u4e00\u628a\u9b54\u6cd5\u5251    | \u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0435\u0447\n"})}),"\n",(0,t.jsx)(e.h3,{id:"json-intermediate-format",children:"JSON Intermediate Format"}),"\n",(0,t.jsx)(e.p,{children:"Store translations in JSON for easier collaboration:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\n  "ITEMS": {\n    "SWORD": {\n      "NAME": {\n        "en": "Magic Sword",\n        "zh": "\u9b54\u6cd5\u5251",\n        "ru": "\u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0435\u0447"\n      },\n      "DESCRIPTION": {\n        "en": "A magical sword",\n        "zh": "\u4e00\u628a\u9b54\u6cd5\u5251",\n        "ru": "\u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0435\u0447"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Then convert to Lua string tables with a script."}),"\n",(0,t.jsx)(e.h2,{id:"version-control-for-translations",children:"Version Control for Translations"}),"\n",(0,t.jsx)(e.p,{children:"When working with multiple translators, use these practices:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Keep each language in separate files"}),"\n",(0,t.jsx)(e.li,{children:"Use clear comments to provide context for translators"}),"\n",(0,t.jsx)(e.li,{children:"Mark untranslated strings clearly"}),"\n",(0,t.jsx)(e.li,{children:"Track translation progress"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Example with comments for translators:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- strings_zh.lua\n\n-- CONTEXT: This is the name of a magical sword item\nSTRINGS.MY_MOD.ITEMS.MAGIC_SWORD.NAME = "\u9b54\u6cd5\u5251"\n\n-- CONTEXT: This describes a sword that glows with magical energy\nSTRINGS.MY_MOD.ITEMS.MAGIC_SWORD.DESCRIPTION = "\u4e00\u628a\u95ea\u70c1\u7740\u9b54\u6cd5\u80fd\u91cf\u7684\u5251\u3002"\n\n-- TODO: Translation needed\n-- STRINGS.MY_MOD.ITEMS.MAGIC_STAFF.NAME = "Magic Staff"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"handling-missing-translations",children:"Handling Missing Translations"}),"\n",(0,t.jsx)(e.p,{children:"Always implement a robust system for handling missing translations:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'function GetLocalizedString(stringTable, key, subKey, fallback)\n    if stringTable and stringTable[key] then\n        if subKey then\n            if stringTable[key][subKey] then\n                return stringTable[key][subKey]\n            end\n        else\n            return stringTable[key]\n        end\n    end\n    return fallback or (subKey and key .. "." .. subKey or key)\nend\n\n-- Usage for nested tables\nlocal itemName = GetLocalizedString(STRINGS.MY_MOD.ITEMS, "MAGIC_SWORD", "NAME", "Magic Sword")\n'})}),"\n",(0,t.jsx)(e.h2,{id:"updating-string-tables",children:"Updating String Tables"}),"\n",(0,t.jsx)(e.p,{children:"When updating your mod, follow these practices for string table updates:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Never remove existing string keys (could break translations)"}),"\n",(0,t.jsx)(e.li,{children:"Add new strings at the end of each category"}),"\n",(0,t.jsx)(e.li,{children:"Comment deprecated strings rather than removing them"}),"\n",(0,t.jsx)(e.li,{children:"Use version numbers in comments for tracking changes"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:'-- strings_en.lua\n\n-- Version 1.0\nSTRINGS.MY_MOD.ITEMS.MAGIC_SWORD.NAME = "Magic Sword"\nSTRINGS.MY_MOD.ITEMS.MAGIC_SWORD.DESCRIPTION = "A magical sword."\n\n-- Version 1.1\nSTRINGS.MY_MOD.ITEMS.MAGIC_STAFF.NAME = "Magic Staff"\nSTRINGS.MY_MOD.ITEMS.MAGIC_STAFF.DESCRIPTION = "A magical staff."\n\n-- Deprecated in version 1.1, kept for backwards compatibility\n-- STRINGS.MY_MOD.ITEMS.OLD_ITEM.NAME = "Old Item"\n'})}),"\n",(0,t.jsx)(e.h2,{id:"automated-string-extraction",children:"Automated String Extraction"}),"\n",(0,t.jsx)(e.p,{children:"For large mods, consider automating string extraction:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Use consistent string access patterns in your code"}),"\n",(0,t.jsx)(e.li,{children:"Create a script that scans your code for these patterns"}),"\n",(0,t.jsx)(e.li,{children:"Generate a template string table with all required keys"}),"\n",(0,t.jsx)(e.li,{children:"Compare against existing translations to find missing strings"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Example pattern for automated extraction:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-lua",children:"-- In your code, use a consistent pattern\nlocal itemName = STRINGS.MY_MOD.ITEMS.MAGIC_SWORD.NAME\n\n-- A script can scan for patterns like:\n-- STRINGS%.MY_MOD%.([%w_]+)%.([%w_]+)%.?([%w_]*)\n-- to extract string keys\n"})}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(e.p,{children:"After mastering string table management, explore:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/localization/font-handling",children:"Font Handling"})," - For languages with special character requirements"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/localization/best-practices",children:"Localization Best Practices"})," - For effective translations"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/dst-api-webdocs/docs/api-vanilla/localization/testing-localization",children:"Testing Localized Content"})," - For quality assurance"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Effective string table management is the foundation of a well-localized mod, making it easier to add new languages and maintain existing translations as your mod evolves."})]})}function g(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>r,x:()=>l});var i=a(6540);const t={},s=i.createContext(t);function r(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);