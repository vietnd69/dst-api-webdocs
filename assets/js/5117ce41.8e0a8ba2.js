"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[256],{6225:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api-vanilla/core/security-considerations-networking","title":"Security Considerations in Networking","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/core/security-considerations-networking.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/security-considerations-networking","permalink":"/dst-api-webdocs/docs/api-vanilla/core/security-considerations-networking","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"security-considerations-networking","title":"Security Considerations in Networking","sidebar_position":10,"last_updated":"2023-07-06T00:00:00.000Z"}}');var r=i(4848),s=i(8453);const a={id:"security-considerations-networking",title:"Security Considerations in Networking",sidebar_position:10,last_updated:new Date("2023-07-06T00:00:00.000Z")},l="Security Considerations in Networking",o={},d=[{value:"Understanding the Security Model",id:"understanding-the-security-model",level:2},{value:"Common Security Vulnerabilities",id:"common-security-vulnerabilities",level:2},{value:"1. Trusting Client Data",id:"1-trusting-client-data",level:3},{value:"2. Missing Permission Checks",id:"2-missing-permission-checks",level:3},{value:"3. Insufficient Rate Limiting",id:"3-insufficient-rate-limiting",level:3},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"1. Validate All Client Input",id:"1-validate-all-client-input",level:3},{value:"2. Check Player Permissions",id:"2-check-player-permissions",level:3},{value:"3. Implement Rate Limiting",id:"3-implement-rate-limiting",level:3},{value:"4. Validate Entity References",id:"4-validate-entity-references",level:3},{value:"5. Protect Sensitive Operations",id:"5-protect-sensitive-operations",level:3},{value:"Server-Side Verification Patterns",id:"server-side-verification-patterns",level:2},{value:"1. Position and Movement Validation",id:"1-position-and-movement-validation",level:3},{value:"2. Resource and Economy Protection",id:"2-resource-and-economy-protection",level:3},{value:"Securing Server to Client Communication",id:"securing-server-to-client-communication",level:2},{value:"1. Avoid Sending Sensitive Information",id:"1-avoid-sending-sensitive-information",level:3},{value:"2. Prevent Information Leakage",id:"2-prevent-information-leakage",level:3},{value:"Testing for Security Vulnerabilities",id:"testing-for-security-vulnerabilities",level:2},{value:"Common Pitfalls to Avoid",id:"common-pitfalls-to-avoid",level:2},{value:"Security Checklist",id:"security-checklist",level:2},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"security-considerations-in-networking",children:"Security Considerations in Networking"})}),"\n",(0,r.jsx)(n.p,{children:"When developing networked mods for Don't Starve Together, security is a critical consideration to protect players and servers from exploits and malicious behavior. This guide covers best practices for secure networking in DST mods."}),"\n",(0,r.jsx)(n.h2,{id:"understanding-the-security-model",children:"Understanding the Security Model"}),"\n",(0,r.jsx)(n.p,{children:"Don't Starve Together uses a client-server architecture where:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"server"}),' is authoritative and maintains the "true" game state']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clients"})," send requests to the server for actions they want to perform"]}),"\n",(0,r.jsx)(n.li,{children:"The server must validate all client requests before executing them"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This model helps prevent cheating and exploits, but only if implemented correctly in your mods."}),"\n",(0,r.jsx)(n.h2,{id:"common-security-vulnerabilities",children:"Common Security Vulnerabilities"}),"\n",(0,r.jsx)(n.h3,{id:"1-trusting-client-data",children:"1. Trusting Client Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- INSECURE: Blindly trusting client data\nAddModRPCHandler("MyMod", "GiveItem", function(player, item_name, quantity)\n    -- Directly using client-provided values without validation\n    local item = SpawnPrefab(item_name)\n    item.components.stackable:SetStackSize(quantity)\n    player.components.inventory:GiveItem(item)\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-missing-permission-checks",children:"2. Missing Permission Checks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- INSECURE: No permission validation\nAddModRPCHandler("MyMod", "DeleteEntity", function(player, target_entity)\n    -- No checks if player should be allowed to delete this entity\n    local entity = Ents[target_entity]\n    if entity then\n        entity:Remove()\n    end\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-insufficient-rate-limiting",children:"3. Insufficient Rate Limiting"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- INSECURE: No rate limiting\nAddModRPCHandler("MyMod", "SpawnEffect", function(player, effect_type)\n    -- Could be spammed to create lag\n    SpawnPrefab(effect_type)\nend)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-validate-all-client-input",children:"1. Validate All Client Input"}),"\n",(0,r.jsx)(n.p,{children:"Always validate data received from clients:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- SECURE: Proper input validation\nAddModRPCHandler("MyMod", "GiveItem", function(player, item_name, quantity)\n    -- Validate item name against whitelist\n    local allowed_items = {"log", "rocks", "cutgrass"}\n    if not table.contains(allowed_items, item_name) then\n        return\n    end\n    \n    -- Validate quantity is reasonable\n    if type(quantity) ~= "number" or quantity <= 0 or quantity > 40 then\n        return\n    end\n    \n    -- Proceed with validated data\n    local item = SpawnPrefab(item_name)\n    item.components.stackable:SetStackSize(quantity)\n    player.components.inventory:GiveItem(item)\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-check-player-permissions",children:"2. Check Player Permissions"}),"\n",(0,r.jsx)(n.p,{children:"Verify that players have appropriate permissions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- SECURE: Permission checking\nAddModRPCHandler("MyMod", "ModifyTerrain", function(player, x, z, terrain_type)\n    -- Check if player is admin\n    if not TheNet:GetIsServerAdmin(player.userid) then\n        return\n    end\n    \n    -- Check if coordinates are valid\n    if not IsValidCoordinate(x, z) then\n        return\n    end\n    \n    -- Proceed with terrain modification\n    TheWorld.Map:SetTile(x, z, terrain_type)\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-implement-rate-limiting",children:"3. Implement Rate Limiting"}),"\n",(0,r.jsx)(n.p,{children:"Prevent spam attacks with rate limiting:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- SECURE: Rate limiting implementation\nlocal player_action_times = {}\n\nAddModRPCHandler("MyMod", "CastSpell", function(player, spell_type)\n    local userid = player.userid\n    local current_time = GetTime()\n    \n    -- Check if player has cast recently\n    if player_action_times[userid] and \n       current_time - player_action_times[userid] < SPELL_COOLDOWN then\n        return -- Too soon, ignore request\n    end\n    \n    -- Update last cast time\n    player_action_times[userid] = current_time\n    \n    -- Proceed with spell casting\n    CastSpell(player, spell_type)\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-validate-entity-references",children:"4. Validate Entity References"}),"\n",(0,r.jsx)(n.p,{children:"Always verify entity references from clients:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- SECURE: Entity reference validation\nAddModRPCHandler("MyMod", "InteractWith", function(player, target_entity)\n    -- Get target entity\n    local target = Ents[target_entity]\n    if target == nil then\n        return -- Entity doesn\'t exist\n    end\n    \n    -- Check distance to prevent interaction through walls/across map\n    if player:GetDistanceSqToInst(target) > MAX_INTERACTION_DISTANCE_SQ then\n        return -- Too far away\n    end\n    \n    -- Check if target is valid for interaction\n    if not CanInteractWith(player, target) then\n        return -- Not allowed to interact\n    end\n    \n    -- Proceed with interaction\n    DoInteraction(player, target)\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"5-protect-sensitive-operations",children:"5. Protect Sensitive Operations"}),"\n",(0,r.jsx)(n.p,{children:"Some operations should only be performed by the server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- SECURE: Server-side only operations\nif TheWorld.ismastersim then\n    -- This code only runs on the server\n    function ApplyGlobalEffect(effect_type)\n        -- Sensitive operation that affects all players\n    end\n    \n    -- Expose a controlled interface for clients\n    AddModRPCHandler("MyMod", "RequestGlobalEffect", function(player, effect_type)\n        -- Validate player permissions\n        if not TheNet:GetIsServerAdmin(player.userid) then\n            return\n        end\n        \n        -- Validate effect type\n        if not IsValidEffectType(effect_type) then\n            return\n        end\n        \n        -- Call the protected function\n        ApplyGlobalEffect(effect_type)\n    end)\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"server-side-verification-patterns",children:"Server-Side Verification Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-position-and-movement-validation",children:"1. Position and Movement Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Validate player movement requests\nAddModRPCHandler("MyMod", "TeleportRequest", function(player, x, y, z)\n    -- Check if teleportation is allowed\n    if not player:HasTag("teleporter") then\n        return\n    end\n    \n    -- Check if destination is valid\n    if not IsValidTeleportDestination(x, y, z) then\n        return\n    end\n    \n    -- Check if within allowed range\n    local px, py, pz = player.Transform:GetWorldPosition()\n    local dist_sq = distsq(px, pz, x, z)\n    if dist_sq > MAX_TELEPORT_DISTANCE_SQ then\n        return -- Too far\n    end\n    \n    -- Teleport the player\n    player.Transform:SetPosition(x, y, z)\nend)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-resource-and-economy-protection",children:"2. Resource and Economy Protection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Secure trading system\nAddModRPCHandler("MyMod", "PurchaseItem", function(player, item_name)\n    -- Check if item exists\n    if not PURCHASABLE_ITEMS[item_name] then\n        return\n    end\n    \n    local cost = PURCHASABLE_ITEMS[item_name].cost\n    \n    -- Verify player has enough currency\n    if not player.components.modcurrency or \n       player.components.modcurrency:GetCurrency() < cost then\n        return -- Not enough currency\n    end\n    \n    -- Deduct currency and give item (server-side operations)\n    player.components.modcurrency:DoDelta(-cost)\n    local item = SpawnPrefab(item_name)\n    player.components.inventory:GiveItem(item)\nend)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"securing-server-to-client-communication",children:"Securing Server to Client Communication"}),"\n",(0,r.jsx)(n.p,{children:"While the server is authoritative, you should also consider security when sending data to clients:"}),"\n",(0,r.jsx)(n.h3,{id:"1-avoid-sending-sensitive-information",children:"1. Avoid Sending Sensitive Information"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- SECURE: Only send necessary information\nfunction SendPlayerInfo(target_player, player_data)\n    -- Don't send admin status or other sensitive details to non-admins\n    if not TheNet:GetIsServerAdmin(target_player.userid) then\n        -- Create a filtered version with only non-sensitive info\n        local filtered_data = {\n            name = player_data.name,\n            character = player_data.character,\n            position = player_data.position\n            -- Omit sensitive fields like admin status, IP, etc.\n        }\n        SendModRPCToClient(MOD_RPC.MyMod.ReceivePlayerInfo, target_player, json.encode(filtered_data))\n    else\n        -- Admin can see everything\n        SendModRPCToClient(MOD_RPC.MyMod.ReceivePlayerInfo, target_player, json.encode(player_data))\n    end\nend\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-prevent-information-leakage",children:"2. Prevent Information Leakage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- SECURE: Visibility checking before sending data\nfunction UpdateEntityVisibility(entity, nearby_players)\n    local x, y, z = entity.Transform:GetWorldPosition()\n    \n    for _, player in ipairs(AllPlayers) do\n        local px, py, pz = player.Transform:GetWorldPosition()\n        local dist_sq = distsq(x, z, px, pz)\n        \n        -- Only send updates about entities the player should be able to see\n        if dist_sq <= VISIBILITY_RANGE_SQ and HasLineOfSight(entity, player) then\n            SendModRPCToClient(MOD_RPC.MyMod.UpdateEntityState, player, entity.GUID, entity.state)\n        end\n    end\nend\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-for-security-vulnerabilities",children:"Testing for Security Vulnerabilities"}),"\n",(0,r.jsx)(n.p,{children:"Regularly test your mod for security issues:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Try to cheat"}),": Attempt to exploit your own mod using modified clients"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fuzz test inputs"}),": Send invalid or unexpected data to your RPCs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test rate limits"}),": Try to overwhelm your mod with rapid requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check permissions"}),": Verify non-admin players can't perform admin actions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls-to-avoid",children:"Common Pitfalls to Avoid"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trusting client timestamps"}),": Always use server time for timing-sensitive operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Direct entity manipulation"}),": Never let clients directly modify entity state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Excessive broadcasting"}),": Don't send unnecessary data to all clients"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hardcoded secrets"}),": Don't include API keys or passwords in your mod code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing validation"}),": Always validate ALL client input, no exceptions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-checklist",children:"Security Checklist"}),"\n",(0,r.jsx)(n.p,{children:"Before releasing your mod, verify:"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All client inputs are validated"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Entity references are verified before use"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Distance checks prevent interaction through walls/across map"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Rate limiting prevents spam attacks"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Permission checks restrict sensitive operations"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","No sensitive data is leaked to clients"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/rpc-system",children:"RPC System"})," - For secure communication between client and server"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/client-server-synchronization",children:"Client-Server Synchronization"})," - For proper state synchronization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/handling-latency-network-drops",children:"Handling Latency and Network Drops"})," - For resilient networking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/network-bandwidth-optimization",children:"Network Bandwidth Optimization"})," - For optimizing network usage"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);