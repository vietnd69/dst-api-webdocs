"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[9067],{5081:(o,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"api-vanilla/components/lootdropper","title":"LootDropper","description":"The LootDropper component handles dropping items when entities die or are destroyed. It manages loot tables, randomized drops, custom loot functions, and drop positioning.","source":"@site/docs/api-vanilla/components/lootdropper.md","sourceDirName":"api-vanilla/components","slug":"/api-vanilla/components/lootdropper","permalink":"/dst-api-webdocs/docs/api-vanilla/components/lootdropper","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":29,"frontMatter":{"id":"lootdropper","title":"LootDropper","sidebar_position":29},"sidebar":"docs","previous":{"title":"Locomotor","permalink":"/dst-api-webdocs/docs/api-vanilla/components/locomotor"},"next":{"title":"Stackable","permalink":"/dst-api-webdocs/docs/api-vanilla/components/stackable"}}');var r=n(4848),d=n(8453);const s={id:"lootdropper",title:"LootDropper",sidebar_position:29},l="LootDropper Component",i={},a=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Loot Configuration",id:"loot-configuration",level:3},{value:"Drop Management",id:"drop-management",level:3},{value:"Custom Loot Functions",id:"custom-loot-functions",level:3},{value:"Loot Types",id:"loot-types",level:2},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"Example: Basic Enemy with Loot",id:"example-basic-enemy-with-loot",level:2}];function c(o){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...o.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"lootdropper-component",children:"LootDropper Component"})}),"\n",(0,r.jsx)(e.p,{children:"The LootDropper component handles dropping items when entities die or are destroyed. It manages loot tables, randomized drops, custom loot functions, and drop positioning."}),"\n",(0,r.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Add a lootdropper component to an entity\nlocal entity = CreateEntity()\nentity:AddComponent("lootdropper")\n\n-- Configure the lootdropper component\nlocal lootdropper = entity.components.lootdropper\nlootdropper:SetLoot({"meat", "bone"})\nlootdropper:AddRandomLoot("goldnugget", 0.5)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Property"}),(0,r.jsx)(e.th,{children:"Type"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"loot"})}),(0,r.jsx)(e.td,{children:"Table"}),(0,r.jsx)(e.td,{children:"Array of prefab names that will always drop"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"randomloot"})}),(0,r.jsx)(e.td,{children:"Table"}),(0,r.jsx)(e.td,{children:"Table of prefabs that have a chance to drop"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"randomlootcount"})}),(0,r.jsx)(e.td,{children:"Number"}),(0,r.jsx)(e.td,{children:"How many random loot items to drop"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"numrandomloot"})}),(0,r.jsx)(e.td,{children:"Number"}),(0,r.jsx)(e.td,{children:"Alternate way to set random loot count"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"chanceloot"})}),(0,r.jsx)(e.td,{children:"Table"}),(0,r.jsx)(e.td,{children:"Table of prefabs with specific drop chances"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"ifnotchanceloot"})}),(0,r.jsx)(e.td,{children:"Table"}),(0,r.jsx)(e.td,{children:"Table of fallback loot if no chanceloot drops"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"droppingchanceloot"})}),(0,r.jsx)(e.td,{children:"Boolean"}),(0,r.jsx)(e.td,{children:"Whether chanceloot is being processed"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"trappable"})}),(0,r.jsx)(e.td,{children:"Boolean"}),(0,r.jsx)(e.td,{children:"Whether drops can be affected by traps"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,r.jsx)(e.h3,{id:"loot-configuration",children:"Loot Configuration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Set fixed loot (always drops)\nlootdropper:SetLoot({"meat", "meat", "pelt"})\n\n-- Set random loot (chance to drop)\nlootdropper:AddRandomLoot("goldnugget", 0.3) -- 30% chance\nlootdropper:AddRandomLoot("redgem", 0.1) -- 10% chance\nlootdropper:SetRandomLootCount(2) -- Drop 2 random items\n\n-- Set chanceloots (exclusive drops)\nlootdropper:AddChanceLoot("lightninggoathorn", 0.5) -- 50% chance\nlootdropper:AddChanceLoot("meat", 1.0) -- 100% chance (fallback)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"drop-management",children:"Drop Management"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Drop all configured loot\nlootdropper:DropLoot()\n\n-- Drop loot at a specific position\nlootdropper:DropLoot(Vector3(x, y, z))\n\n-- Drop a specific prefab\nlootdropper:SpawnLootPrefab("meat")\n\n-- Drop a single random item from the random loot table\nlootdropper:DropRandomLoot()\n'})}),"\n",(0,r.jsx)(e.h3,{id:"custom-loot-functions",children:"Custom Loot Functions"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'-- Set a custom loot function\nlootdropper:SetLootSetupFn(function(lootdropper)\n    -- Do custom setup before dropping loot\n    local inst = lootdropper.inst\n    if inst.components.health:GetPercent() < 0.5 then\n        lootdropper:AddChanceLoot("meat", 0.5)\n    else\n        lootdropper:AddChanceLoot("meat", 1.0)\n    end\nend)\n\n-- Set a custom chance loot function\nlootdropper:SetChanceLootFunction(function(lootdropper)\n    -- Custom chance loot logic\n    local inst = lootdropper.inst\n    local season = TheWorld.state.season\n    \n    if season == "winter" then\n        return {"ice", "ice", "ice"}\n    elseif season == "summer" then\n        return {"cutgrass", "twigs"}\n    else\n        return {"berries"}\n    end\nend)\n'})}),"\n",(0,r.jsx)(e.h2,{id:"loot-types",children:"Loot Types"}),"\n",(0,r.jsx)(e.p,{children:"The LootDropper component supports several types of loot:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fixed Loot"}),": Items that always drop"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Random Loot"}),": Items with a chance to drop, with a configurable count"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Chance Loot"}),": Mutually exclusive loot options with specific chances"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fallback Loot"}),": Items that drop if no chance loot is selected"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,r.jsx)(e.p,{children:"The LootDropper component often works with:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Health"})," - To trigger drops on death"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Workable"})," - To trigger drops when worked"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Combat"})," - For combat-related drops"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Burnable"})," - For drops when burned"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"Growable"})," - For different drops at different growth stages"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"example-basic-enemy-with-loot",children:"Example: Basic Enemy with Loot"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'local function MakeEnemy()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Add health and combat\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(100)\n    \n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(10)\n    \n    -- Configure loot\n    inst:AddComponent("lootdropper")\n    local lootdropper = inst.components.lootdropper\n    \n    -- Always drop one meat\n    lootdropper:SetLoot({"meat"})\n    \n    -- Chance to drop special items\n    lootdropper:AddRandomLoot("goldnugget", 0.2)\n    lootdropper:AddRandomLoot("redgem", 0.05)\n    lootdropper:SetRandomLootCount(1)\n    \n    -- Link death to loot dropping\n    inst:ListenForEvent("death", function(inst)\n        inst.components.lootdropper:DropLoot(inst:GetPosition())\n    end)\n    \n    return inst\nend\n\n-- Example of a boss with progressive loot based on health\nlocal function MakeBoss()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Add health and combat\n    inst:AddComponent("health")\n    inst.components.health:SetMaxHealth(1000)\n    \n    inst:AddComponent("combat")\n    inst.components.combat:SetDefaultDamage(50)\n    \n    -- Configure loot\n    inst:AddComponent("lootdropper")\n    local lootdropper = inst.components.lootdropper\n    \n    -- Set progressive loot function\n    lootdropper:SetLootSetupFn(function(lootdropper)\n        local inst = lootdropper.inst\n        local health_percent = inst.components.health:GetPercent()\n        \n        -- Always drop these\n        lootdropper:SetLoot({"meat", "meat", "meat", "meat"})\n        \n        -- Add more loot based on how quickly boss was killed\n        if health_percent > 0.7 then\n            -- Boss was killed very efficiently\n            lootdropper:AddChanceLoot("gianthorn", 1.0)\n            lootdropper:AddChanceLoot("purplegem", 0.8)\n        elseif health_percent > 0.4 then\n            -- Boss was killed somewhat efficiently\n            lootdropper:AddChanceLoot("purplegem", 0.6)\n            lootdropper:AddChanceLoot("bluegem", 0.8)\n        else\n            -- Boss was killed inefficiently\n            lootdropper:AddChanceLoot("bluegem", 0.5)\n            lootdropper:AddChanceLoot("redgem", 0.5)\n        end\n    end)\n    \n    -- Link death to loot dropping\n    inst:ListenForEvent("death", function(inst)\n        inst.components.lootdropper:DropLoot(inst:GetPosition())\n    end)\n    \n    return inst\nend\n'})})]})}function p(o={}){const{wrapper:e}={...(0,d.R)(),...o.components};return e?(0,r.jsx)(e,{...o,children:(0,r.jsx)(c,{...o})}):c(o)}},8453:(o,e,n)=>{n.d(e,{R:()=>s,x:()=>l});var t=n(6540);const r={},d=t.createContext(r);function s(o){const e=t.useContext(d);return t.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function l(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(r):o.components||r:s(o.components),t.createElement(d.Provider,{value:e},o.children)}}}]);