"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3966],{313:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"api-vanilla/stategraphs/commonstates","title":"Common States","description":"The CommonStates module provides a collection of pre-defined states that can be reused across different entity stategraphs. This helps maintain consistency in entity behaviors while reducing code duplication.","source":"@site/docs/api-vanilla/stategraphs/commonstates.md","sourceDirName":"api-vanilla/stategraphs","slug":"/api-vanilla/stategraphs/commonstates","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/commonstates","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"commonstates","title":"Common States","sidebar_position":5,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Action Handlers","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/actionhandlers"},"next":{"title":"Animation Integration","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/animation-integration"}}');var s=n(4848),o=n(8453);const i={id:"commonstates",title:"Common States",sidebar_position:5,last_updated:new Date("2023-07-06T00:00:00.000Z")},d="Common States",l={},r=[{value:"Using CommonStates",id:"using-commonstates",level:2},{value:"Available Common States",id:"available-common-states",level:2},{value:"Basic States",id:"basic-states",level:3},{value:"AddIdle",id:"addidle",level:4},{value:"AddFrozen",id:"addfrozen",level:4},{value:"Movement States",id:"movement-states",level:3},{value:"AddWalk",id:"addwalk",level:4},{value:"AddRun",id:"addrun",level:4},{value:"Combat States",id:"combat-states",level:3},{value:"AddFightStates",id:"addfightstates",level:4},{value:"AddCombatStates",id:"addcombatstates",level:4},{value:"Health and Status States",id:"health-and-status-states",level:3},{value:"AddSleepStates",id:"addsleepstates",level:4},{value:"AddHitState",id:"addhitstate",level:4},{value:"AddDeathState",id:"adddeathstate",level:4},{value:"Example Usage",id:"example-usage",level:2},{value:"Common Event Handlers",id:"common-event-handlers",level:2},{value:"Customizing Common States",id:"customizing-common-states",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"common-states",children:"Common States"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"CommonStates"})," module provides a collection of pre-defined states that can be reused across different entity stategraphs. This helps maintain consistency in entity behaviors while reducing code duplication."]}),"\n",(0,s.jsx)(t.h2,{id:"using-commonstates",children:"Using CommonStates"}),"\n",(0,s.jsx)(t.p,{children:"To use CommonStates, you first need to require the module at the top of your stategraph file:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Then you can add common states to your states table:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local states = {\n    -- Add the idle state\n    CommonStates.AddIdle(),\n    \n    -- Add walk states with parameters\n    CommonStates.AddWalk(),\n    \n    -- Add run states\n    CommonStates.AddRun(),\n    \n    -- Custom states specific to your entity\n    State{\n        name = "special_ability",\n        -- state definition...\n    },\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"available-common-states",children:"Available Common States"}),"\n",(0,s.jsx)(t.h3,{id:"basic-states",children:"Basic States"}),"\n",(0,s.jsx)(t.h4,{id:"addidle",children:"AddIdle"}),"\n",(0,s.jsx)(t.p,{children:"Adds a standard idle state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddIdle(states, anim_override, timeline)\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"states"}),": The states table to add to"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"anim_override"}),': Optional animation name to use instead of "idle"']}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"timeline"}),": Optional timeline to add to the idle state"]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"addfrozen",children:"AddFrozen"}),"\n",(0,s.jsx)(t.p,{children:"Adds a frozen state for entities that can be frozen:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddFrozen(states)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"movement-states",children:"Movement States"}),"\n",(0,s.jsx)(t.h4,{id:"addwalk",children:"AddWalk"}),"\n",(0,s.jsx)(t.p,{children:"Adds states for walking:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddWalk(\n    states,              -- States table\n    timing_override,     -- Optional custom timing \n    anim_override,       -- Optional animation name override\n    loop_override,       -- Optional loop setting\n    pre_move_fn,         -- Optional function to call before moving\n    postwalk_fn,         -- Optional function to call after walking\n    start_fn,            -- Optional function to call at start\n    stop_fn              -- Optional function to call at stop\n)\n"})}),"\n",(0,s.jsx)(t.h4,{id:"addrun",children:"AddRun"}),"\n",(0,s.jsx)(t.p,{children:"Adds states for running:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddRun(\n    states,             -- States table\n    timing_override,    -- Optional custom timing\n    anim_override,      -- Optional animation name override\n    loop_override,      -- Optional loop setting\n    pre_move_fn,        -- Optional function to call before moving\n    postrun_fn,         -- Optional function to call after running\n    start_fn,           -- Optional function to call at start\n    stop_fn             -- Optional function to call at stop\n)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"combat-states",children:"Combat States"}),"\n",(0,s.jsx)(t.h4,{id:"addfightstates",children:"AddFightStates"}),"\n",(0,s.jsx)(t.p,{children:"Adds basic combat states:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddFightStates(\n    states,              -- States table\n    attack_timing,       -- Time when attack happens\n    hit_recovery,        -- Hit recovery time\n    anim_override_fn,    -- Function to override animations\n    attack_sound_fn,     -- Function to play attack sounds\n    loop_attack_fn       -- Function to handle attack looping\n)\n"})}),"\n",(0,s.jsx)(t.h4,{id:"addcombatstates",children:"AddCombatStates"}),"\n",(0,s.jsx)(t.p,{children:"Adds detailed combat states with more configuration options:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddCombatStates(\n    states,              -- States table\n    config               -- Configuration table\n)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"config"})," table can include various options for animations, timings, and callbacks."]}),"\n",(0,s.jsx)(t.h3,{id:"health-and-status-states",children:"Health and Status States"}),"\n",(0,s.jsx)(t.h4,{id:"addsleepstates",children:"AddSleepStates"}),"\n",(0,s.jsx)(t.p,{children:"Adds states for sleeping:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddSleepStates(\n    states,              -- States table\n    sleeptimeline,       -- Timeline for the sleep state\n    sleepstart_timeline, -- Timeline for the sleep start state\n    sleeploop_timeline   -- Timeline for the sleep loop state\n)\n"})}),"\n",(0,s.jsx)(t.h4,{id:"addhitstate",children:"AddHitState"}),"\n",(0,s.jsx)(t.p,{children:"Adds a state for taking damage:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddHitState(states, anim_override)\n"})}),"\n",(0,s.jsx)(t.h4,{id:"adddeathstate",children:"AddDeathState"}),"\n",(0,s.jsx)(t.p,{children:"Adds a state for death:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"CommonStates.AddDeathState(\n    states,           -- States table\n    anim_override,    -- Optional animation override\n    sound_override    -- Optional sound override\n)\n"})}),"\n",(0,s.jsx)(t.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsx)(t.p,{children:"Here's an example of creating a stategraph with common states:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'require("stategraphs/commonstates")\n\nlocal states = {\n    -- Add standard states\n    CommonStates.AddIdle(),\n    CommonStates.AddWalk(),\n    CommonStates.AddRun(),\n    CommonStates.AddSleepStates(),\n    CommonStates.AddFrozen(),\n    \n    -- Add combat states with custom configuration\n    CommonStates.AddCombatStates(states, {\n        attackanimfn = function() return "attack" end,\n        timing = 10*FRAMES,\n        hittimeline = {\n            TimeEvent(0, function(inst) inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/hit_response") end)\n        },\n    }),\n    \n    -- Custom states specific to this entity\n    State{\n        name = "special_ability",\n        tags = {"busy", "canrotate"},\n        \n        onenter = function(inst)\n            inst.AnimState:PlayAnimation("special")\n        end,\n        \n        events = {\n            EventHandler("animover", function(inst) \n                inst.sg:GoToState("idle")\n            end),\n        },\n    },\n}\n\nlocal events = {\n    CommonHandlers.OnLocomote(true, true),\n    CommonHandlers.OnSleep(),\n    CommonHandlers.OnFreeze(),\n    CommonHandlers.OnAttack(),\n    CommonHandlers.OnAttacked(),\n    CommonHandlers.OnDeath(),\n}\n\nreturn StateGraph("myentity", states, events, "idle")\n'})}),"\n",(0,s.jsx)(t.h2,{id:"common-event-handlers",children:"Common Event Handlers"}),"\n",(0,s.jsxs)(t.p,{children:["In addition to common states, there are also common event handlers in the ",(0,s.jsx)(t.code,{children:"CommonHandlers"})," table:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:"local events = {\n    CommonHandlers.OnLocomote(true, true), -- can_run, can_walk\n    CommonHandlers.OnSleep(),\n    CommonHandlers.OnFreeze(),\n    CommonHandlers.OnAttack(),\n    CommonHandlers.OnAttacked(),\n    CommonHandlers.OnDeath(),\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"customizing-common-states",children:"Customizing Common States"}),"\n",(0,s.jsx)(t.p,{children:"You can customize common states by providing parameters to the Add functions:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'-- Custom animation for idle state\nCommonStates.AddIdle(states, "my_custom_idle"),\n\n-- Custom walk states with special functions\nCommonStates.AddWalk(\n    states,\n    nil,  -- use default timing\n    nil,  -- use default animation\n    nil,  -- use default loop\n    function(inst)  -- pre-move function\n        inst.SoundEmitter:PlaySound("dontstarve/creatures/spider/walk_dirt")\n    end\n)\n'})}),"\n",(0,s.jsx)(t.p,{children:"This allows you to reuse the structure of common states while adapting them to your specific entity's needs."})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(6540);const s={},o=a.createContext(s);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);