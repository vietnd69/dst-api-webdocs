"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[78009],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var s=i(96540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},54702:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"game-scripts/core-systems/fundamentals/ai-systems/behaviourtree","title":"Behaviour Tree System","description":"Documentation of the Don\'t Starve Together behaviour tree system for AI state management and decision making","source":"@site/docs/game-scripts/core-systems/fundamentals/ai-systems/behaviourtree.md","sourceDirName":"game-scripts/core-systems/fundamentals/ai-systems","slug":"/game-scripts/core-systems/fundamentals/ai-systems/behaviourtree","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/ai-systems/behaviourtree","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Behaviour Tree System","description":"Documentation of the Don\'t Starve Together behaviour tree system for AI state management and decision making","sidebar_position":2,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"AI Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/ai-systems/"},"next":{"title":"Brain System","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/fundamentals/ai-systems/brain"}}');var t=i(74848),o=i(28453);const r={title:"Behaviour Tree System",description:"Documentation of the Don't Starve Together behaviour tree system for AI state management and decision making",sidebar_position:2,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},d="Behaviour Tree System",l={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Core Architecture",id:"core-architecture",level:2},{value:"Status Constants",id:"status-constants",level:3},{value:"Main BT Class",id:"main-bt-class",level:3},{value:"Key Methods",id:"key-methods",level:4},{value:"Node Types",id:"node-types",level:2},{value:"Base BehaviourNode",id:"base-behaviournode",level:3},{value:"Core Node Methods",id:"core-node-methods",level:4},{value:"Composite Nodes",id:"composite-nodes",level:3},{value:"SequenceNode",id:"sequencenode",level:4},{value:"SelectorNode",id:"selectornode",level:4},{value:"PriorityNode",id:"prioritynode",level:4},{value:"ParallelNode",id:"parallelnode",level:4},{value:"ParallelNodeAny",id:"parallelnodeany",level:4},{value:"RandomNode",id:"randomnode",level:4},{value:"LoopNode",id:"loopnode",level:4},{value:"Leaf Nodes",id:"leaf-nodes",level:3},{value:"ActionNode",id:"actionnode",level:4},{value:"ConditionNode",id:"conditionnode",level:4},{value:"MultiConditionNode",id:"multiconditionnode",level:4},{value:"ConditionWaitNode",id:"conditionwaitnode",level:4},{value:"WaitNode",id:"waitnode",level:4},{value:"Decorator Nodes",id:"decorator-nodes",level:3},{value:"NotDecorator",id:"notdecorator",level:4},{value:"FailIfRunningDecorator",id:"failifrunningdecorator",level:4},{value:"FailIfSuccessDecorator",id:"failifsuccessdecorator",level:4},{value:"Special Nodes",id:"special-nodes",level:3},{value:"EventNode",id:"eventnode",level:4},{value:"LatchNode",id:"latchnode",level:4},{value:"Utility Functions",id:"utility-functions",level:2},{value:"WhileNode",id:"whilenode",level:3},{value:"IfNode",id:"ifnode",level:3},{value:"IfThenDoWhileNode",id:"ifthendowhilenode",level:3},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"Basic Mob Behavior",id:"basic-mob-behavior",level:3},{value:"Event-Driven Behavior",id:"event-driven-behavior",level:3},{value:"Complex State Machine",id:"complex-state-machine",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Sleep System",id:"sleep-system",level:3},{value:"Priority-Based Updates",id:"priority-based-updates",level:3},{value:"Debugging Support",id:"debugging-support",level:2},{value:"Tree Visualization",id:"tree-visualization",level:3},{value:"Node Identification",id:"node-identification",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Graceful Failure",id:"graceful-failure",level:3},{value:"Resource Cleanup",id:"resource-cleanup",level:3},{value:"Integration with Game Systems",id:"integration-with-game-systems",level:2},{value:"Brain Component",id:"brain-component",level:3},{value:"Event System",id:"event-system",level:3},{value:"Component Integration",id:"component-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Node Composition",id:"node-composition",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Maintainability",id:"maintainability",level:3},{value:"Related Systems",id:"related-systems",level:2},{value:"Status: \ud83d\udfe2 Stable",id:"status--stable",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"behaviour-tree-system",children:"Behaviour Tree System"})}),"\n",(0,t.jsx)(n.p,{children:"The Behaviour Tree system in Don't Starve Together provides a hierarchical framework for implementing AI decision-making logic. This system enables complex AI behaviors through modular, reusable node structures that can be composed to create sophisticated state machines for entities like mobs, NPCs, and other game objects."}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Updated documentation to match current implementation and added missing node types"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The behaviour tree system serves multiple purposes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AI Decision Making"}),": Provides structured approach to entity behavior logic"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modular Design"}),": Enables reusable behavior components across different entities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Optimization"}),": Includes sleep/wake mechanisms for efficient execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Debug Support"}),": Offers comprehensive debugging and visualization tools"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The system is built around a tree structure where each node represents a specific behavior or decision point, allowing for complex AI patterns through simple composition."}),"\n",(0,t.jsx)(n.h2,{id:"core-architecture",children:"Core Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"status-constants",children:"Status Constants"}),"\n",(0,t.jsx)(n.p,{children:"The system defines four primary execution states:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'SUCCESS = "SUCCESS"   -- Node completed successfully\nFAILED = "FAILED"     -- Node failed to complete\nREADY = "READY"       -- Node is ready to execute\nRUNNING = "RUNNING"   -- Node is currently executing\n'})}),"\n",(0,t.jsx)(n.h3,{id:"main-bt-class",children:"Main BT Class"}),"\n",(0,t.jsx)(n.p,{children:"The root behavior tree class that manages execution:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"BT = Class(function(self, inst, root)\n    self.inst = inst      -- The entity this tree belongs to\n    self.root = root      -- The root node of the tree\nend)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"key-methods",children:"Key Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Update()"})}),(0,t.jsx)(n.td,{children:"Executes one tick of the behavior tree"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ForceUpdate()"})}),(0,t.jsx)(n.td,{children:"Forces immediate update regardless of sleep state"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Reset()"})}),(0,t.jsx)(n.td,{children:"Resets the entire tree to initial state"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Stop()"})}),(0,t.jsx)(n.td,{children:"Stops execution and cleans up resources"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"GetSleepTime()"})}),(0,t.jsx)(n.td,{children:"Returns optimal sleep duration for performance"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"__tostring()"})}),(0,t.jsx)(n.td,{children:"Returns string representation of tree for debugging"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"node-types",children:"Node Types"}),"\n",(0,t.jsx)(n.h3,{id:"base-behaviournode",children:"Base BehaviourNode"}),"\n",(0,t.jsxs)(n.p,{children:["All behavior tree nodes inherit from the base ",(0,t.jsx)(n.code,{children:"BehaviourNode"})," class:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'BehaviourNode = Class(function(self, name, children)\n    self.name = name or ""\n    self.children = children\n    self.status = READY\n    self.lastresult = READY\n    self.nextupdatetick = 0\n    self.id = NODE_COUNT  -- Unique identifier for debugging\n    \n    -- Set parent references for all children\n    if children then\n        for i, k in pairs(children) do\n            k.parent = self\n        end\n    end\nend)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"core-node-methods",children:"Core Node Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Visit()"})}),(0,t.jsx)(n.td,{children:"Execute the node's primary logic"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Reset()"})}),(0,t.jsx)(n.td,{children:"Reset node and children to READY state"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Step()"})}),(0,t.jsx)(n.td,{children:"Update child nodes after execution"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Stop()"})}),(0,t.jsx)(n.td,{children:"Clean up resources and stop execution"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Sleep(t)"})}),(0,t.jsx)(n.td,{children:"Put node to sleep for specified time"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SaveStatus()"})}),(0,t.jsx)(n.td,{children:"Save current status as last result"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"GetSleepTime()"})}),(0,t.jsx)(n.td,{children:"Calculate how long this node should sleep"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"GetTreeSleepTime()"})}),(0,t.jsx)(n.td,{children:"Calculate sleep time for entire subtree"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"GetString()"})}),(0,t.jsx)(n.td,{children:"Get string representation for debugging"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"GetTreeString(indent)"})}),(0,t.jsx)(n.td,{children:"Get formatted tree string with indentation"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DBString()"})}),(0,t.jsx)(n.td,{children:"Get debug string for node-specific information"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DoToParents(fn)"})}),(0,t.jsx)(n.td,{children:"Execute function on all parent nodes"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"composite-nodes",children:"Composite Nodes"}),"\n",(0,t.jsx)(n.p,{children:"Composite nodes manage multiple child nodes with different execution strategies."}),"\n",(0,t.jsx)(n.h4,{id:"sequencenode",children:"SequenceNode"}),"\n",(0,t.jsx)(n.p,{children:"Executes children in order, failing if any child fails:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'SequenceNode = Class(BehaviourNode, function(self, children)\n    BehaviourNode._ctor(self, "Sequence", children)\n    self.idx = 1  -- Current child index\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Continues to next child only if current child succeeds. Returns FAILED immediately if any child fails."]}),"\n",(0,t.jsx)(n.h4,{id:"selectornode",children:"SelectorNode"}),"\n",(0,t.jsx)(n.p,{children:"Executes children in order, succeeding if any child succeeds:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'SelectorNode = Class(BehaviourNode, function(self, children)\n    BehaviourNode._ctor(self, "Selector", children)\n    self.idx = 1  -- Current child index\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Continues to next child only if current child fails. Returns SUCCESS immediately if any child succeeds."]}),"\n",(0,t.jsx)(n.h4,{id:"prioritynode",children:"PriorityNode"}),"\n",(0,t.jsx)(n.p,{children:"Re-evaluates child priority periodically, switching execution as needed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'PriorityNode = Class(BehaviourNode, function(self, children, period, noscatter)\n    BehaviourNode._ctor(self, "Priority", children)\n    self.period = period or 1  -- Re-evaluation interval\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Higher-priority children can interrupt lower-priority running children."]}),"\n",(0,t.jsx)(n.h4,{id:"parallelnode",children:"ParallelNode"}),"\n",(0,t.jsx)(n.p,{children:"Executes all children simultaneously:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'ParallelNode = Class(BehaviourNode, function(self, children, name)\n    BehaviourNode._ctor(self, name or "Parallel", children)\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Succeeds when all children succeed, fails if any child fails."]}),"\n",(0,t.jsx)(n.h4,{id:"parallelnodeany",children:"ParallelNodeAny"}),"\n",(0,t.jsx)(n.p,{children:"Parallel node that succeeds when any child completes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'ParallelNodeAny = Class(ParallelNode, function(self, children)\n    ParallelNode._ctor(self, children, "Parallel(Any)")\n    self.stoponanycomplete = true\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Executes all children simultaneously, succeeds when the first child succeeds or fails."]}),"\n",(0,t.jsx)(n.h4,{id:"randomnode",children:"RandomNode"}),"\n",(0,t.jsx)(n.p,{children:"Randomly selects a child to execute:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'RandomNode = Class(BehaviourNode, function(self, children)\n    BehaviourNode._ctor(self, "Random", children)\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Picks random child on first execution, retries failed children randomly."]}),"\n",(0,t.jsx)(n.h4,{id:"loopnode",children:"LoopNode"}),"\n",(0,t.jsx)(n.p,{children:"Repeats execution of children for a specified number of iterations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'LoopNode = Class(BehaviourNode, function(self, children, maxreps)\n    BehaviourNode._ctor(self, "Sequence", children)\n    self.idx = 1\n    self.maxreps = maxreps\n    self.rep = 0\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Executes children sequentially, resetting and repeating until ",(0,t.jsx)(n.code,{children:"maxreps"})," is reached or a child fails."]}),"\n",(0,t.jsx)(n.h3,{id:"leaf-nodes",children:"Leaf Nodes"}),"\n",(0,t.jsx)(n.p,{children:"Leaf nodes perform actual actions or evaluate conditions."}),"\n",(0,t.jsx)(n.h4,{id:"actionnode",children:"ActionNode"}),"\n",(0,t.jsx)(n.p,{children:"Executes a single action function:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'ActionNode = Class(BehaviourNode, function(self, action, name)\n    BehaviourNode._ctor(self, name or "ActionNode")\n    self.action = action  -- Function to execute\nend)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"conditionnode",children:"ConditionNode"}),"\n",(0,t.jsx)(n.p,{children:"Evaluates a boolean condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'ConditionNode = Class(BehaviourNode, function(self, fn, name)\n    BehaviourNode._ctor(self, name or "Condition")\n    self.fn = fn  -- Function that returns boolean\nend)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"multiconditionnode",children:"MultiConditionNode"}),"\n",(0,t.jsx)(n.p,{children:"Evaluates different conditions for start and continue logic:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'MultiConditionNode = Class(BehaviourNode, function(self, start, continue, name)\n    BehaviourNode._ctor(self, name or "Condition")\n    self.start = start      -- Initial condition function\n    self.continue = continue -- Continuing condition function\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Uses ",(0,t.jsx)(n.code,{children:"start"})," condition on first execution, then switches to ",(0,t.jsx)(n.code,{children:"continue"})," condition for subsequent evaluations."]}),"\n",(0,t.jsx)(n.h4,{id:"conditionwaitnode",children:"ConditionWaitNode"}),"\n",(0,t.jsx)(n.p,{children:"Waits until a condition becomes true:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'ConditionWaitNode = Class(BehaviourNode, function(self, fn, name)\n    BehaviourNode._ctor(self, name or "Wait")\n    self.fn = fn  -- Function that returns boolean\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Returns RUNNING until condition becomes true, then returns SUCCESS."]}),"\n",(0,t.jsx)(n.h4,{id:"waitnode",children:"WaitNode"}),"\n",(0,t.jsx)(n.p,{children:"Waits for a specified duration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'WaitNode = Class(BehaviourNode, function(self, time)\n    BehaviourNode._ctor(self, "Wait")\n    self.wait_time = time  -- Duration to wait\nend)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"decorator-nodes",children:"Decorator Nodes"}),"\n",(0,t.jsx)(n.p,{children:"Decorator nodes modify the behavior of a single child node."}),"\n",(0,t.jsx)(n.h4,{id:"notdecorator",children:"NotDecorator"}),"\n",(0,t.jsx)(n.p,{children:"Inverts the result of its child:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'NotDecorator = Class(DecoratorNode, function(self, child)\n    DecoratorNode._ctor(self, "Not", child)\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": SUCCESS becomes FAILED, FAILED becomes SUCCESS, RUNNING remains RUNNING."]}),"\n",(0,t.jsx)(n.h4,{id:"failifrunningdecorator",children:"FailIfRunningDecorator"}),"\n",(0,t.jsx)(n.p,{children:"Converts RUNNING status to FAILED:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'FailIfRunningDecorator = Class(DecoratorNode, function(self, child)\n    DecoratorNode._ctor(self, "FailIfRunning", child)\nend)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"failifsuccessdecorator",children:"FailIfSuccessDecorator"}),"\n",(0,t.jsx)(n.p,{children:"Converts SUCCESS status to FAILED:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'FailIfSuccessDecorator = Class(DecoratorNode, function(self, child)\n    DecoratorNode._ctor(self, "FailIfSuccess", child)\nend)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"special-nodes",children:"Special Nodes"}),"\n",(0,t.jsx)(n.h4,{id:"eventnode",children:"EventNode"}),"\n",(0,t.jsx)(n.p,{children:"Responds to specific entity events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'EventNode = Class(BehaviourNode, function(self, inst, event, child, priority)\n    BehaviourNode._ctor(self, "Event("..event..")", {child})\n    self.inst = inst\n    self.event = event\n    self.priority = priority or 0\nend)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Behavior"}),": Triggers when specified event occurs, executes child node in response."]}),"\n",(0,t.jsx)(n.h4,{id:"latchnode",children:"LatchNode"}),"\n",(0,t.jsx)(n.p,{children:"Prevents re-execution for a specified duration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'LatchNode = Class(BehaviourNode, function(self, inst, latchduration, child)\n    BehaviourNode._ctor(self, "Latch ("..tostring(latchduration)..")", {child})\n    self.latchduration = latchduration\nend)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,t.jsx)(n.h3,{id:"whilenode",children:"WhileNode"}),"\n",(0,t.jsx)(n.p,{children:"Creates a parallel node that continuously checks a condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function WhileNode(cond, name, node)\n    return ParallelNode{\n        ConditionNode(cond, name),\n        node\n    }\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Usage"}),": Executes ",(0,t.jsx)(n.code,{children:"node"})," while ",(0,t.jsx)(n.code,{children:"cond"})," remains true. Interrupts immediately if condition fails."]}),"\n",(0,t.jsx)(n.h3,{id:"ifnode",children:"IfNode"}),"\n",(0,t.jsx)(n.p,{children:"Creates a sequence that executes only if a condition passes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function IfNode(cond, name, node)\n    return SequenceNode{\n        ConditionNode(cond, name),\n        node\n    }\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Usage"}),": Executes ",(0,t.jsx)(n.code,{children:"node"})," only after ",(0,t.jsx)(n.code,{children:"cond"})," succeeds once. Condition not re-checked during execution."]}),"\n",(0,t.jsx)(n.h3,{id:"ifthendowhilenode",children:"IfThenDoWhileNode"}),"\n",(0,t.jsx)(n.p,{children:"Advanced conditional execution with different start and continue conditions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function IfThenDoWhileNode(ifcond, whilecond, name, node)\n    return ParallelNode{\n        MultiConditionNode(ifcond, whilecond, name),\n        node\n    }\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,t.jsx)(n.h3,{id:"basic-mob-behavior",children:"Basic Mob Behavior"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Simple mob that wanders and flees from players\nlocal brain = BT(inst, \n    PriorityNode({\n        -- High priority: flee from nearby players\n        IfNode(function() return FindClosestPlayer(5) ~= nil end, \n               "See Player", \n               ActionNode(function() RunAway() end, "Flee")),\n        \n        -- Low priority: wander randomly  \n        SequenceNode({\n            WaitNode(math.random(2, 5)),\n            ActionNode(function() WalkRandomly() end, "Wander")\n        })\n    })\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"event-driven-behavior",children:"Event-Driven Behavior"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Mob that responds to being attacked\nlocal brain = BT(inst,\n    PriorityNode({\n        -- React to being attacked\n        EventNode(inst, "attacked", \n            SequenceNode({\n                ActionNode(function() TurnToAttacker() end, "Face Attacker"),\n                ActionNode(function() CounterAttack() end, "Fight Back")\n            }), \n            10), -- High priority\n            \n        -- Default behavior\n        ActionNode(function() Idle() end, "Idle")\n    })\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"complex-state-machine",children:"Complex State Machine"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Advanced mob with multiple states\nlocal brain = BT(inst,\n    PriorityNode({\n        -- Emergency: low health\n        IfNode(function() return inst.components.health:GetPercent() < 0.3 end,\n               "Low Health",\n               ActionNode(function() FindHealing() end, "Seek Healing")),\n        \n        -- Combat: Start fighting if enemy seen, continue while able to fight\n        IfThenDoWhileNode(\n            function() return FindNearbyEnemy() ~= nil end,  -- Start condition\n            function() return CanContinueFighting() end,     -- Continue condition\n            "Combat State",\n            SequenceNode({\n                ActionNode(function() MoveToEnemy() end, "Approach"),\n                ActionNode(function() Attack() end, "Attack"),\n                WaitNode(1.0)  -- Attack cooldown\n            })\n        ),\n        \n        -- Maintenance: repair if damaged\n        IfNode(function() return NeedsRepair() end,\n               "Needs Repair", \n               ActionNode(function() DoRepair() end, "Repair")),\n        \n        -- Default: patrol area\n        LoopNode({\n            ActionNode(function() MoveToNextPoint() end, "Move"),\n            WaitNode(2.0)\n        }, 5)  -- Patrol 5 points then stop\n    })\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(n.h3,{id:"sleep-system",children:"Sleep System"}),"\n",(0,t.jsx)(n.p,{children:"The behavior tree system includes sophisticated sleep mechanisms for performance:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Nodes can sleep to reduce CPU usage\nfunction SomeExpensiveCheck()\n    if expensive_condition() then\n        return SUCCESS\n    else\n        -- Sleep for 1 second before checking again\n        self:Sleep(1.0)\n        return RUNNING\n    end\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"priority-based-updates",children:"Priority-Based Updates"}),"\n",(0,t.jsx)(n.p,{children:"Priority nodes intelligently schedule re-evaluation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Only re-evaluate priorities every 2 seconds\nPriorityNode(children, 2.0)  -- Period = 2 seconds\n"})}),"\n",(0,t.jsx)(n.h2,{id:"debugging-support",children:"Debugging Support"}),"\n",(0,t.jsx)(n.h3,{id:"tree-visualization",children:"Tree Visualization"}),"\n",(0,t.jsx)(n.p,{children:"The system provides string representation for debugging:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Print current tree state\nprint(tostring(brain))\n\n-- Output format shows node hierarchy with sleep times:\n-- Priority>0.00\n--    >Sequence - RUNNING <READY> ()\n--       >Condition - SUCCESS <SUCCESS> ()\n--       >Action - RUNNING <READY> (doing something)\n--    >Wait - READY <READY> ()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"node-identification",children:"Node Identification"}),"\n",(0,t.jsx)(n.p,{children:"Each node has a unique ID for debugging tools:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Access node information\nprint("Node ID:", node.id)\nprint("Node Status:", node.status)\nprint("Last Result:", node.lastresult)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"graceful-failure",children:"Graceful Failure"}),"\n",(0,t.jsx)(n.p,{children:"Nodes should handle errors gracefully:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'ActionNode(function()\n    if not inst:IsValid() then\n        return FAILED\n    end\n    \n    local success = DoAction()\n    return success and SUCCESS or FAILED\nend, "Safe Action")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"resource-cleanup",children:"Resource Cleanup"}),"\n",(0,t.jsx)(n.p,{children:"Always implement proper cleanup in Stop methods:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function CustomNode:Stop()\n    -- Clean up resources\n    if self.timer then\n        self.timer:Cancel()\n        self.timer = nil\n    end\n    \n    -- Call parent cleanup\n    self._base.Stop(self)\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-game-systems",children:"Integration with Game Systems"}),"\n",(0,t.jsx)(n.h3,{id:"brain-component",children:"Brain Component"}),"\n",(0,t.jsx)(n.p,{children:"Behavior trees integrate with the brain component:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Set up brain with behavior tree\nlocal brain = require("brains/mybrain")\ninst:AddComponent("locomotor")\ninst:AddComponent("brain")\ninst.components.brain:SetBrain(brain)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"event-system",children:"Event System"}),"\n",(0,t.jsx)(n.p,{children:"EventNodes automatically integrate with the game's event system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- This will listen for "gohome" events\nEventNode(inst, "gohome", \n    ActionNode(function() inst:GoHome() end, "Return Home"))\n'})}),"\n",(0,t.jsx)(n.h3,{id:"component-integration",children:"Component Integration"}),"\n",(0,t.jsx)(n.p,{children:"Behavior trees commonly interact with entity components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Example using various components\nIfNode(function() \n    return inst.components.hunger:GetPercent() < 0.5 \nend, "Hungry", \nActionNode(function()\n    local food = inst.components.inventory:FindItem(function(item)\n        return item:HasTag("edible")\n    end)\n    if food then\n        inst.components.eater:Eat(food)\n    end\nend, "Eat Food"))\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"node-composition",children:"Node Composition"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Keep individual nodes simple and focused"}),"\n",(0,t.jsx)(n.li,{children:"Use composition over complex single nodes"}),"\n",(0,t.jsx)(n.li,{children:"Prefer shallow trees over deep nesting"}),"\n",(0,t.jsx)(n.li,{children:"Name nodes descriptively for debugging"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use appropriate sleep durations for expensive operations"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper sleep scheduling in custom nodes"}),"\n",(0,t.jsx)(n.li,{children:"Avoid deep recursion in tree structures"}),"\n",(0,t.jsx)(n.li,{children:"Cache expensive calculations when possible"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"maintainability",children:"Maintainability"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Document complex behavior trees thoroughly"}),"\n",(0,t.jsx)(n.li,{children:"Use meaningful names for conditions and actions"}),"\n",(0,t.jsx)(n.li,{children:"Group related behaviors into reusable subtrees"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper error handling and cleanup"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../brains/index.md",children:"Brains"})," - Pre-built behavior trees for specific entity types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../components/index.md",children:"Components"})," - System components that behavior trees interact with"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./actions.md",children:"Actions"})," - Action system that behavior trees can trigger"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../stategraphs/index.md",children:"State Graphs"})," - Animation state machines that work alongside behavior trees"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"status--stable",children:"Status: \ud83d\udfe2 Stable"}),"\n",(0,t.jsx)(n.p,{children:"The Behaviour Tree system is stable and actively used throughout the DST codebase for AI implementation. The API is considered mature and changes are rare."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);