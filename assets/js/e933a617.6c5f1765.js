"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[5998],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},9574:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/node-types/entity","title":"Entity","description":"Entity is the most basic node type in Don\'t Starve Together, representing all objects in the game from characters and items to structures.","source":"@site/docs/api-vanilla/node-types/entity.md","sourceDirName":"api-vanilla/node-types","slug":"/api-vanilla/node-types/entity","permalink":"/dst-api-webdocs/docs/api-vanilla/node-types/entity","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"entity","title":"Entity","sidebar_position":2}}');var s=t(4848),r=t(8453);const a={id:"entity",title:"Entity",sidebar_position:2},l="Entity",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Entity Creation",id:"entity-creation",level:2},{value:"Core Entity Parts",id:"core-entity-parts",level:2},{value:"Entity Tags",id:"entity-tags",level:2},{value:"Entity Lifecycle",id:"entity-lifecycle",level:2},{value:"Entity Manipulation",id:"entity-manipulation",level:2},{value:"Finding Entities",id:"finding-entities",level:2},{value:"Related Systems",id:"related-systems",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"entity",children:"Entity"})}),"\n",(0,s.jsx)(n.p,{children:"Entity is the most basic node type in Don't Starve Together, representing all objects in the game from characters and items to structures."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Entities are the fundamental building blocks of the game world. Each entity exists in the world and can have various components attached to it that define its behavior, appearance, and functionality."}),"\n",(0,s.jsx)(n.h2,{id:"entity-creation",children:"Entity Creation"}),"\n",(0,s.jsx)(n.p,{children:"Entities are typically created through prefabs, but can also be created directly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local entity = CreateEntity()\nentity:AddTag("myentity")\nentity.entity:AddTransform()\nentity.entity:AddAnimState()\nentity.entity:AddNetwork()\n\n-- Set up other entity properties\nentity.entity:SetPristine()\n\nif not TheWorld.ismastersim then\n    return entity\nend\n\n-- Server-side component setup\nentity:AddComponent("inventoryitem")\n\nreturn entity\n'})}),"\n",(0,s.jsx)(n.h2,{id:"core-entity-parts",children:"Core Entity Parts"}),"\n",(0,s.jsx)(n.p,{children:"Each entity can have these core parts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Transform"}),": Position, rotation, and scale"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AnimState"}),": Animations and visual appearance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SoundEmitter"}),": Sound effects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network"}),": Multiplayer synchronization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Physics"}),": Collision and physical interactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Light"}),": Light emission"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MiniMapEntity"}),": Appearance on the minimap"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"entity-tags",children:"Entity Tags"}),"\n",(0,s.jsx)(n.p,{children:"Tags are lightweight markers that identify entity characteristics:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'entity:AddTag("player")\nentity:AddTag("scarytoprey")\n\nif entity:HasTag("player") then\n    -- Do something with player entities\nend\n\nentity:RemoveTag("scarytoprey")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Common tags include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"player"}),": Player character"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"monster"}),": Hostile creature"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"structure"}),": Built structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"burnt"}),": Burned object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"irreplaceable"}),": Cannot be replaced once destroyed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"entity-lifecycle",children:"Entity Lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"Entities have a lifecycle in the game:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Creation"}),": Entity is created through prefab or directly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Setup"}),": Components and properties are configured"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Activation"}),": Entity becomes active in the world"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Updates"}),": Entity is updated each frame"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Removal"}),": Entity is removed from the world"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"entity-manipulation",children:"Entity Manipulation"}),"\n",(0,s.jsx)(n.p,{children:"Common operations on entities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Get entity position\nlocal x, y, z = entity.Transform:GetWorldPosition()\n\n-- Set entity position\nentity.Transform:SetPosition(x, y, z)\n\n-- Make entity face a direction\nentity.Transform:SetRotation(angle)\n\n-- Set entity scale\nentity.Transform:SetScale(1.5, 1.5, 1.5)\n\n-- Remove entity from game\nentity:Remove()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"finding-entities",children:"Finding Entities"}),"\n",(0,s.jsx)(n.p,{children:"Entities can be found using various functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Find entities near a position\nlocal entities = TheSim:FindEntities(x, y, z, radius, {"player"}, {"ghost"})\n\n-- Find closest entity\nlocal entity = FindClosestEntity(x, y, z, radius, {"tree"})\n\n-- Find entities in a given area\nlocal entities = FindEntitiesInArea(x1, y1, z1, x2, y2, z2, {"monster"})\n'})}),"\n",(0,s.jsx)(n.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Component system"}),"\n",(0,s.jsx)(n.li,{children:"Prefab system"}),"\n",(0,s.jsx)(n.li,{children:"Network replication"}),"\n",(0,s.jsx)(n.li,{children:"Tag system"}),"\n",(0,s.jsx)(n.li,{children:"Entity event system"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);