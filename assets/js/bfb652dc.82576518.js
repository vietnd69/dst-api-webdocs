"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[63213],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(96540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},41845:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"game-scripts/core-systems/world-systems/entities/prefabs","title":"Prefabs","description":"Core prefab system for creating game objects and managing assets","source":"@site/docs/game-scripts/core-systems/world-systems/entities/prefabs.md","sourceDirName":"game-scripts/core-systems/world-systems/entities","slug":"/game-scripts/core-systems/world-systems/entities/prefabs","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"prefabs","title":"Prefabs","description":"Core prefab system for creating game objects and managing assets","sidebar_position":1,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"Entity Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/"},"next":{"title":"Prefab List","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefablist"}}');var t=s(74848),r=s(28453);const a={id:"prefabs",title:"Prefabs",description:"Core prefab system for creating game objects and managing assets",sidebar_position:1,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},l="Prefabs",d={},c=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Classes",id:"classes",level:2},{value:"Prefab",id:"prefab",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Prefab(name, fn, assets, deps, force_path_search)",id:"prefab-constructor",level:5},{value:"Properties",id:"properties",level:4},{value:"prefab.name",id:"prefab-name",level:5},{value:"prefab.desc",id:"prefab-desc",level:5},{value:"prefab.fn",id:"prefab-fn",level:5},{value:"prefab.assets",id:"prefab-assets",level:5},{value:"prefab.deps",id:"prefab-deps",level:5},{value:"prefab.force_path_search",id:"prefab-force-path-search",level:5},{value:"Methods",id:"methods",level:4},{value:"prefab:__tostring()",id:"prefab-tostring",level:5},{value:"Asset",id:"asset",level:3},{value:"Constructor",id:"constructor-1",level:4},{value:"Asset(type, file, param)",id:"asset-constructor",level:5},{value:"Properties",id:"properties-1",level:4},{value:"asset.type",id:"asset-type",level:5},{value:"asset.file",id:"asset-file",level:5},{value:"asset.param",id:"asset-param",level:5},{value:"Skin Integration",id:"skin-integration",level:2},{value:"Automatic Skin Dependencies",id:"automatic-skin-dependencies",level:3},{value:"Checking Skin Integration",id:"checking-skin-integration",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Basic Item Prefab",id:"basic-item-prefab",level:3},{value:"Character Prefab",id:"character-prefab",level:3},{value:"Structure Prefab",id:"structure-prefab",level:3},{value:"Asset Types Reference",id:"asset-types-reference",level:2},{value:"Animation Assets",id:"animation-assets",level:3},{value:"Atlas Assets",id:"atlas-assets",level:3},{value:"Image Assets",id:"image-assets",level:3},{value:"Sound Assets",id:"sound-assets",level:3},{value:"Minimap Assets",id:"minimap-assets",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Missing Assets",id:"missing-assets",level:3},{value:"Circular Dependencies",id:"circular-dependencies",level:3},{value:"Name Conflicts",id:"name-conflicts",level:3},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"prefabs",children:"Prefabs"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"prefabs"})," module provides the core system for defining and creating game objects in Don't Starve Together. It includes the ",(0,t.jsx)(n.code,{children:"Prefab"})," and ",(0,t.jsx)(n.code,{children:"Asset"})," classes that form the foundation of the game's entity system, along with automatic skin integration support."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Basic prefab creation\nlocal function my_item()\n    local inst = CreateEntity()\n    -- Entity setup code\n    return inst\nend\n\nlocal my_prefab = Prefab("my_item", my_item, {\n    Asset("ANIM", "anim/my_item.zip"),\n    Asset("ATLAS", "images/inventoryimages/my_item.xml"),\n}, {"log", "flint"})\n\nreturn my_prefab\n'})}),"\n",(0,t.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsx)(n.h3,{id:"prefab",children:"Prefab"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nThe ",(0,t.jsx)(n.code,{children:"Prefab"})," class defines a template for creating game objects. Each prefab contains the information needed to instantiate entities with specific properties, assets, and dependencies."]}),"\n",(0,t.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.h5,{id:"prefab-constructor",children:"Prefab(name, fn, assets, deps, force_path_search)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"})," (string): Prefab identifier (path components are automatically removed)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fn"})," (function): Factory function that returns a configured entity instance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assets"})," (table, optional): Array of Asset objects required by this prefab"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deps"})," (table, optional): Array of prefab names this prefab depends on"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"force_path_search"})," (boolean, optional): Whether to force path searching for this prefab"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Prefab): New prefab instance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local function wilson_fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n    \n    -- Character-specific setup\n    inst:AddTag("player")\n    inst:AddTag("character")\n    \n    return inst\nend\n\nlocal wilson = Prefab("wilson", wilson_fn, {\n    Asset("ANIM", "anim/player_basic.zip"),\n    Asset("ANIM", "anim/player_idles_shaved.zip"),\n    Asset("SOUND", "sound/sfx.fsb"),\n    Asset("ATLAS", "images/inventoryimages.xml"),\n}, {"beard", "resurrectionstatue"})\n'})}),"\n",(0,t.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h5,{id:"prefab-name",children:"prefab.name"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nThe processed name of the prefab with any path components removed."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local prefab = Prefab("characters/wilson", wilson_fn)\nprint(prefab.name) -- Output: "wilson"\n'})}),"\n",(0,t.jsx)(n.h5,{id:"prefab-desc",children:"prefab.desc"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nHuman-readable description of the prefab. Defaults to empty string."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local prefab = Prefab("wilson", wilson_fn)\nprefab.desc = "The Gentleman Scientist"\n'})}),"\n",(0,t.jsx)(n.h5,{id:"prefab-fn",children:"prefab.fn"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"function"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nThe factory function that creates and configures entity instances."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local prefab = Prefab("my_item", function()\n    local inst = CreateEntity()\n    -- Setup code\n    return inst\nend)\n'})}),"\n",(0,t.jsx)(n.h5,{id:"prefab-assets",children:"prefab.assets"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"table"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nArray of Asset objects that must be loaded for this prefab."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local prefab = Prefab("my_item", my_item_fn, {\n    Asset("ANIM", "anim/my_item.zip"),\n    Asset("ATLAS", "images/inventoryimages/my_item.xml"),\n})\n\n-- Access assets\nfor i, asset in ipairs(prefab.assets) do\n    print("Asset:", asset.type, asset.file)\nend\n'})}),"\n",(0,t.jsx)(n.h5,{id:"prefab-deps",children:"prefab.deps"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"table"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nArray of prefab names that this prefab depends on, including automatically added skin prefabs."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local prefab = Prefab("my_weapon", my_weapon_fn, nil, {"log", "flint"})\n\n-- Check dependencies\nfor i, dep in ipairs(prefab.deps) do\n    print("Dependency:", dep)\nend\n'})}),"\n",(0,t.jsx)(n.h5,{id:"prefab-force-path-search",children:"prefab.force_path_search"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nWhether the game should force path searching when loading this prefab."]}),"\n",(0,t.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h5,{id:"prefab-tostring",children:"prefab:__tostring()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nReturns a string representation of the prefab for debugging purposes."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(string): Formatted string with prefab name and description"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local prefab = Prefab("wilson", wilson_fn)\nprefab.desc = "The Gentleman Scientist"\nprint(tostring(prefab)) -- Output: "Prefab wilson - The Gentleman Scientist"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"asset",children:"Asset"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nThe ",(0,t.jsx)(n.code,{children:"Asset"})," class represents a game asset that must be loaded for a prefab to function properly."]}),"\n",(0,t.jsx)(n.h4,{id:"constructor-1",children:"Constructor"}),"\n",(0,t.jsx)(n.h5,{id:"asset-constructor",children:"Asset(type, file, param)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"}),' (string): Type of asset ("ANIM", "ATLAS", "IMAGE", "SOUND", "MINIMAP_IMAGE", etc.)']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"file"})," (string): Path to the asset file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"param"})," (any, optional): Additional parameter for certain asset types"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(Asset): New asset instance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Animation asset\nlocal anim_asset = Asset("ANIM", "anim/wilson.zip")\n\n-- Atlas asset\nlocal atlas_asset = Asset("ATLAS", "images/inventoryimages.xml")\n\n-- Sound asset\nlocal sound_asset = Asset("SOUND", "sound/sfx.fsb")\n\n-- Image asset with parameters\nlocal image_asset = Asset("IMAGE", "images/ui.tex")\n\n-- Minimap image\nlocal minimap_asset = Asset("MINIMAP_IMAGE", "wilson")\n'})}),"\n",(0,t.jsx)(n.h4,{id:"properties-1",children:"Properties"}),"\n",(0,t.jsx)(n.h5,{id:"asset-type",children:"asset.type"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nThe type of asset being defined."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Common Types:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"ANIM"'})," - Animation files (.zip)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"ATLAS"'})," - Texture atlas files (.xml)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"IMAGE"'})," - Image files (.tex)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"SOUND"'})," - Sound files (.fsb)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"MINIMAP_IMAGE"'})," - Minimap icon images"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"SHADER"'})," - Shader files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'"PKGREF"'})," - Package references"]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"asset-file",children:"asset.file"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nPath to the asset file relative to the game's asset directories."]}),"\n",(0,t.jsx)(n.h5,{id:"asset-param",children:"asset.param"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," ",(0,t.jsx)(n.code,{children:"any"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nOptional parameter for assets that require additional configuration."]}),"\n",(0,t.jsx)(n.h2,{id:"skin-integration",children:"Skin Integration"}),"\n",(0,t.jsx)(n.p,{children:"The prefab system automatically integrates with the skin system. When a prefab is created, any available skins for that prefab are automatically added to its dependencies."}),"\n",(0,t.jsx)(n.h3,{id:"automatic-skin-dependencies",children:"Automatic Skin Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- If PREFAB_SKINS["wilson"] contains skin prefabs, they are automatically added\nlocal wilson = Prefab("wilson", wilson_fn, assets)\n-- wilson.deps now includes all Wilson skin prefabs automatically\n'})}),"\n",(0,t.jsx)(n.h3,{id:"checking-skin-integration",children:"Checking Skin Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Check if a prefab has skins\nlocal function PrefabHasSkins(prefab_name)\n    return PREFAB_SKINS[prefab_name] ~= nil\nend\n\n-- Get skin count for a prefab\nlocal function GetSkinCount(prefab_name)\n    local skins = PREFAB_SKINS[prefab_name]\n    return skins and #skins or 0\nend\n\nprint("Wilson has", GetSkinCount("wilson"), "skins")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"basic-item-prefab",children:"Basic Item Prefab"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local function my_item_fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    MakeInventoryPhysics(inst)\n\n    inst.AnimState:SetBank("my_item")\n    inst.AnimState:SetBuild("my_item")\n    inst.AnimState:PlayAnimation("idle")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    inst:AddComponent("inspectable")\n    inst:AddComponent("inventoryitem")\n\n    return inst\nend\n\nreturn Prefab("my_item", my_item_fn, {\n    Asset("ANIM", "anim/my_item.zip"),\n    Asset("ATLAS", "images/inventoryimages/my_item.xml"),\n})\n'})}),"\n",(0,t.jsx)(n.h3,{id:"character-prefab",children:"Character Prefab"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local function character_fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddDynamicShadow()\n    inst.entity:AddNetwork()\n\n    MakeCharacterPhysics(inst, 30, .5)\n\n    inst.AnimState:SetBank("wilson")\n    inst.AnimState:SetBuild("wilson")\n    inst.AnimState:PlayAnimation("idle")\n\n    inst:AddTag("player")\n    inst:AddTag("character")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Add character components\n    inst:AddComponent("health")\n    inst:AddComponent("hunger")\n    inst:AddComponent("sanity")\n    inst:AddComponent("locomotor")\n    inst:AddComponent("inventory")\n\n    return inst\nend\n\nreturn Prefab("my_character", character_fn, {\n    Asset("ANIM", "anim/player_basic.zip"),\n    Asset("ANIM", "anim/player_idles_shaved.zip"),\n    Asset("SOUND", "sound/sfx.fsb"),\n}, {"resurrectionstatue"})\n'})}),"\n",(0,t.jsx)(n.h3,{id:"structure-prefab",children:"Structure Prefab"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local function structure_fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddNetwork()\n\n    MakeObstaclePhysics(inst, 1)\n\n    inst.AnimState:SetBank("my_structure")\n    inst.AnimState:SetBuild("my_structure")\n    inst.AnimState:PlayAnimation("idle")\n\n    inst:AddTag("structure")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    inst:AddComponent("inspectable")\n    inst:AddComponent("lootdropper")\n    inst:AddComponent("workable")\n\n    return inst\nend\n\nreturn Prefab("my_structure", structure_fn, {\n    Asset("ANIM", "anim/my_structure.zip"),\n    Asset("MINIMAP_IMAGE", "my_structure"),\n})\n'})}),"\n",(0,t.jsx)(n.h2,{id:"asset-types-reference",children:"Asset Types Reference"}),"\n",(0,t.jsx)(n.h3,{id:"animation-assets",children:"Animation Assets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'Asset("ANIM", "anim/filename.zip")\n-- Contains spriter animation data\n'})}),"\n",(0,t.jsx)(n.h3,{id:"atlas-assets",children:"Atlas Assets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'Asset("ATLAS", "images/inventoryimages.xml")\nAsset("ATLAS", "images/inventoryimages/item.xml")\n-- Texture atlas definitions\n'})}),"\n",(0,t.jsx)(n.h3,{id:"image-assets",children:"Image Assets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'Asset("IMAGE", "images/inventoryimages.tex")\nAsset("IMAGE", "images/ui/button.tex")\n-- Individual texture files\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sound-assets",children:"Sound Assets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'Asset("SOUND", "sound/sfx.fsb")\nAsset("SOUND", "sound/music.fsb")\n-- Sound effect and music files\n'})}),"\n",(0,t.jsx)(n.h3,{id:"minimap-assets",children:"Minimap Assets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'Asset("MINIMAP_IMAGE", "prefab_name")\n-- Minimap icon (automatically finds correct file)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"missing-assets",children:"Missing Assets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- The game will show errors if required assets are missing\n-- Always include necessary assets in the prefab definition\n"})}),"\n",(0,t.jsx)(n.h3,{id:"circular-dependencies",children:"Circular Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Avoid circular dependencies between prefabs\n-- Use proper dependency ordering\n"})}),"\n",(0,t.jsx)(n.h3,{id:"name-conflicts",children:"Name Conflicts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Prefab names must be unique\n-- The last registered prefab with a name wins\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefablist",children:"Prefab List"}),": Complete list of all game prefabs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabskin",children:"Prefab Skins"}),": Visual customization system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/entities/prefabutil",children:"Prefab Utilities"}),": Helper functions for prefab creation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./entityscript.md",children:"Entity Script"}),": Entity creation and management"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);