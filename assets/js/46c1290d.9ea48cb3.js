"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[28410],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var l=s(96540);const t={},r=l.createContext(t);function i(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),l.createElement(r.Provider,{value:n},e.children)}},74241:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"game-scripts/core-systems/character-systems/progression/wxputils","title":"WXP Utils","description":"Utility functions for managing Winter\'s Feast Experience Points (WXP) including level calculation, progress tracking, and festival event handling","source":"@site/docs/game-scripts/core-systems/character-systems/progression/wxputils.md","sourceDirName":"game-scripts/core-systems/character-systems/progression","slug":"/game-scripts/core-systems/character-systems/progression/wxputils","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/progression/wxputils","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"wxputils","title":"WXP Utils","description":"Utility functions for managing Winter\'s Feast Experience Points (WXP) including level calculation, progress tracking, and festival event handling","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"WX78 Module Definitions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/progression/wx78-moduledefs"},"next":{"title":"Speech Systems Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/character-systems/speech/"}}');var t=s(74848),r=s(28453);const i={id:"wxputils",title:"WXP Utils",description:"Utility functions for managing Winter's Feast Experience Points (WXP) including level calculation, progress tracking, and festival event handling",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},a="WXP Utils",c={},d=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"GetLevelPercentage()",id:"get-level-percentage",level:3},{value:"BuildProgressString()",id:"build-progress-string",level:3},{value:"GetLevel(festival_key, season)",id:"get-level",level:3},{value:"GetActiveLevel()",id:"get-active-level",level:3},{value:"GetLevelForWXP(wxp)",id:"get-level-for-wxp",level:3},{value:"GetWXPForLevel(level)",id:"get-wxp-for-level",level:3},{value:"GetActiveWXP()",id:"get-active-wxp",level:3},{value:"GetEventStatus(festival_key, season, cb_fn)",id:"get-event-status",level:3},{value:"Internal Functions",id:"internal-functions",level:2},{value:"GetLevelProgressFraction()",id:"get-level-progress-fraction",level:3},{value:"WXP System Architecture",id:"wxp-system-architecture",level:2},{value:"Level Progression",id:"level-progression",level:3},{value:"Festival Integration",id:"festival-integration",level:3},{value:"Data Sources",id:"data-sources",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:2},{value:"Creating Progress Displays",id:"creating-progress-displays",level:3},{value:"Level Requirement Calculations",id:"level-requirement-calculations",level:3},{value:"Festival Event Monitoring",id:"festival-event-monitoring",level:3},{value:"Progress Tracking",id:"progress-tracking",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"TheInventory Integration",id:"theinventory-integration",level:3},{value:"TheItems Integration",id:"theitems-integration",level:3},{value:"Festival Event System",id:"festival-event-system",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Related Modules",id:"related-modules",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"wxp-utils",children:"WXP Utils"})}),"\n",(0,t.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Build Version"}),(0,t.jsx)(n.th,{children:"Change Date"}),(0,t.jsx)(n.th,{children:"Change Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"676042"}),(0,t.jsx)(n.td,{children:"2025-06-21"}),(0,t.jsx)(n.td,{children:"stable"}),(0,t.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"wxputils"})," module provides utility functions for managing Winter's Feast Experience Points (WXP). It handles level calculations, progress tracking, and festival event status management for the seasonal progression system."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Get current WXP level and progress\nlocal level = wxputils.GetActiveLevel()\nlocal percentage = wxputils.GetLevelPercentage()\nlocal progress_string = wxputils.BuildProgressString()\n\nprint(string.format("Level %d (%s)", level, progress_string))\n'})}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"get-level-percentage",children:"GetLevelPercentage()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates the progress percentage towards the next level based on current WXP."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Progress percentage as a decimal (0.0 to 1.0)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local progress = wxputils.GetLevelPercentage()\nprint(string.format("Progress: %.1f%%", progress * 100))\n-- Output: "Progress: 67.3%"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"build-progress-string",children:"BuildProgressString()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),'\nCreates a formatted string showing current progress towards the next level in "current/total" format.']}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["(string): Formatted progress string using ",(0,t.jsx)(n.code,{children:"STRINGS.UI.XPUTILS.XPPROGRESS"})," template"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local progress_text = wxputils.BuildProgressString()\nprint(progress_text)\n-- Output: "1,250 / 2,000" (depending on current WXP)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-level",children:"GetLevel(festival_key, season)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nGets the WXP level for a specific festival event and season."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"festival_key"})," (string): The festival identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"season"})," (string): The season identifier"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): WXP level for the specified festival/season"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local winter_level = wxputils.GetLevel("winters_feast", "winter")\nprint("Winter\'s Feast level:", winter_level)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-active-level",children:"GetActiveLevel()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nGets the WXP level for the currently active festival event."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Current WXP level"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local current_level = wxputils.GetActiveLevel()\nprint("Current level:", current_level)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-level-for-wxp",children:"GetLevelForWXP(wxp)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nCalculates what level corresponds to a given WXP amount."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"wxp"})," (number): The WXP amount to convert"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): The level that corresponds to the given WXP"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local level = wxputils.GetLevelForWXP(5000)\nprint("5000 WXP equals level:", level)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-wxp-for-level",children:"GetWXPForLevel(level)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nGets the WXP requirements for a specific level and the next level."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"level"})," (number): The level to query"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): WXP required for the specified level"}),"\n",(0,t.jsx)(n.li,{children:"(number): WXP required for the next level"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local current_wxp, next_wxp = wxputils.GetWXPForLevel(5)\nprint(string.format("Level 5: %d WXP, Level 6: %d WXP", current_wxp, next_wxp))\n-- Output: "Level 5: 2000 WXP, Level 6: 3000 WXP"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-active-wxp",children:"GetActiveWXP()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nGets the current WXP amount for the active festival event."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Current WXP amount"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local current_wxp = wxputils.GetActiveWXP()\nprint("Current WXP:", current_wxp)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get-event-status",children:"GetEventStatus(festival_key, season, cb_fn)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nAsynchronously retrieves the status of a festival event."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"festival_key"})," (string): The festival identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"season"})," (string): The season identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cb_fn"})," (function): Callback function to receive the event status"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'wxputils.GetEventStatus("winters_feast", "winter", function(status)\n    if status then\n        print("Event is active:", status.is_active)\n        print("Event end time:", status.end_time)\n    end\nend)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"internal-functions",children:"Internal Functions"}),"\n",(0,t.jsx)(n.h3,{id:"get-level-progress-fraction",children:"GetLevelProgressFraction()"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status:"})," ",(0,t.jsx)(n.code,{children:"stable"})," (internal)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description:"}),"\nInternal function that calculates the raw progress numbers for the current level."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"(number): Current progress amount towards next level"}),"\n",(0,t.jsx)(n.li,{children:"(number): Total amount needed for next level"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Internal usage within wxputils\nlocal function GetLevelProgressFraction()\n    local level = TheInventory:GetWXPLevel(GetActiveFestivalEventServerName())\n    local wxp = TheInventory:GetWXP(GetActiveFestivalEventServerName())\n    \n    local curr_level_wxp = TheItems:GetWXPForLevel(level)\n    local next_level_wxp = TheItems:GetWXPForLevel(level+1)\n    return (wxp - curr_level_wxp), (next_level_wxp - curr_level_wxp)\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"wxp-system-architecture",children:"WXP System Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"level-progression",children:"Level Progression"}),"\n",(0,t.jsx)(n.p,{children:"The WXP system uses a progressive leveling structure:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Each level requires a specific amount of WXP"}),"\n",(0,t.jsx)(n.li,{children:"WXP requirements typically increase with higher levels"}),"\n",(0,t.jsx)(n.li,{children:"Progress is tracked per festival event and season"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"festival-integration",children:"Festival Integration"}),"\n",(0,t.jsx)(n.p,{children:"WXP is tied to seasonal festival events:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Different festivals have separate WXP pools"}),"\n",(0,t.jsx)(n.li,{children:"Each season within a festival can have its own progression"}),"\n",(0,t.jsx)(n.li,{children:'The "active" event refers to the currently running festival'}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"data-sources",children:"Data Sources"}),"\n",(0,t.jsx)(n.p,{children:"WXP data comes from several game systems:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TheInventory"}),": Player's WXP amounts and levels"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TheItems"}),": Level requirements and WXP thresholds"]}),"\n",(0,t.jsx)(n.li,{children:"Festival event system: Active event determination"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-usage-patterns",children:"Common Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"creating-progress-displays",children:"Creating Progress Displays"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Basic progress display\nlocal level = wxputils.GetActiveLevel()\nlocal progress = wxputils.BuildProgressString()\nlocal percentage = wxputils.GetLevelPercentage()\n\nlocal display_text = string.format("Level %d - %s (%.1f%%)", \n    level, progress, percentage * 100)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"level-requirement-calculations",children:"Level Requirement Calculations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Calculate how much WXP is needed to reach a target level\nlocal current_wxp = wxputils.GetActiveWXP()\nlocal target_level = 10\nlocal required_wxp = wxputils.GetWXPForLevel(target_level)\n\nlocal wxp_needed = required_wxp - current_wxp\nif wxp_needed > 0 then\n    print(string.format("Need %d more WXP to reach level %d", wxp_needed, target_level))\nelse\n    print("Already at or above target level")\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"festival-event-monitoring",children:"Festival Event Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Monitor multiple festival events\nlocal festivals = {\n    {"winters_feast", "winter"},\n    {"year_of_the_pig", "spring"},\n    {"forge", "summer"}\n}\n\nfor _, festival_data in ipairs(festivals) do\n    local festival_key, season = festival_data[1], festival_data[2]\n    wxputils.GetEventStatus(festival_key, season, function(status)\n        local level = wxputils.GetLevel(festival_key, season)\n        print(string.format("%s (%s): Level %d, Active: %s", \n            festival_key, season, level, tostring(status and status.is_active)))\n    end)\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"progress-tracking",children:"Progress Tracking"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Track progress over time\nlocal function trackProgress()\n    local current_level = wxputils.GetActiveLevel()\n    local current_wxp = wxputils.GetActiveWXP()\n    local current_percentage = wxputils.GetLevelPercentage()\n    \n    -- Store or display progress data\n    local progress_data = {\n        level = current_level,\n        wxp = current_wxp,\n        percentage = current_percentage,\n        timestamp = os.time()\n    }\n    \n    return progress_data\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,t.jsx)(n.h3,{id:"theinventory-integration",children:"TheInventory Integration"}),"\n",(0,t.jsxs)(n.p,{children:["WXP utilities rely heavily on ",(0,t.jsx)(n.code,{children:"TheInventory"})," for player data:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TheInventory:GetWXPLevel(event_name)"}),": Gets player's level for event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TheInventory:GetWXP(event_name)"}),": Gets player's WXP for event"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"theitems-integration",children:"TheItems Integration"}),"\n",(0,t.jsxs)(n.p,{children:["Level calculations use ",(0,t.jsx)(n.code,{children:"TheItems"})," for thresholds:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TheItems:GetLevelForWXP(wxp)"}),": Converts WXP to level"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TheItems:GetWXPForLevel(level)"}),": Gets WXP requirement for level"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"festival-event-system",children:"Festival Event System"}),"\n",(0,t.jsx)(n.p,{children:"Festival utilities integrate with the event system:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetActiveFestivalEventServerName()"}),": Gets current active event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetFestivalEventServerName(key, season)"}),": Builds event names"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"WXP utilities include basic error handling:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Safe level checking\nlocal function safeGetLevel(festival_key, season)\n    local success, level = pcall(wxputils.GetLevel, festival_key, season)\n    return success and level or 0\nend\n\n-- Safe progress calculation\nlocal function safeGetProgress()\n    local success, percentage = pcall(wxputils.GetLevelPercentage)\n    return success and percentage or 0\nend\n"})}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./inventory.md",children:"TheInventory"}),": Player inventory and progression data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./items.md",children:"TheItems"}),": Item definitions and level requirements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./festivals.md",children:"Festival Events"}),": Seasonal event management system"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);