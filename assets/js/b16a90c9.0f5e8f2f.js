"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2668],{2422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api-vanilla/core/ui-system","title":"UI System","description":"The UI system in Don\'t Starve Together controls the creation and management of user interface elements.","source":"@site/docs/api-vanilla/core/ui-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/ui-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/ui-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"id":"ui-system","title":"UI System","sidebar_position":15,"last_updated":"2023-07-06T00:00:00.000Z"},"sidebar":"docs","previous":{"title":"Mod Interaction and Compatibility","permalink":"/dst-api-webdocs/docs/api-vanilla/core/mod-interaction"},"next":{"title":"Common Widgets","permalink":"/dst-api-webdocs/docs/api-vanilla/core/widgets"}}');var s=t(4848),l=t(8453);const a={id:"ui-system",title:"UI System",sidebar_position:15,last_updated:new Date("2023-07-06T00:00:00.000Z")},r="UI System",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Widget Hierarchy",id:"widget-hierarchy",level:2},{value:"Basic Widget Types",id:"basic-widget-types",level:2},{value:"Widget",id:"widget",level:3},{value:"Text",id:"text",level:3},{value:"Image",id:"image",level:3},{value:"Button",id:"button",level:3},{value:"ImageButton",id:"imagebutton",level:3},{value:"Creating Custom Widgets",id:"creating-custom-widgets",level:2},{value:"Screens",id:"screens",level:2},{value:"Positioning and Anchoring",id:"positioning-and-anchoring",level:2},{value:"Input Handling",id:"input-handling",level:2},{value:"Common UI Elements",id:"common-ui-elements",level:2},{value:"Containers",id:"containers",level:3},{value:"Sliders",id:"sliders",level:3},{value:"Spinners",id:"spinners",level:3},{value:"Managing Screens",id:"managing-screens",level:2},{value:"HUD Customization",id:"hud-customization",level:2},{value:"Animation in UI",id:"animation-in-ui",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ui-system",children:"UI System"})}),"\n",(0,s.jsx)(n.p,{children:"The UI system in Don't Starve Together controls the creation and management of user interface elements."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Don't Starve Together uses a widget-based UI system built on top of IMGUI (Immediate Mode GUI). This document covers the core concepts of the UI system, widget hierarchies, and common usage patterns."}),"\n",(0,s.jsx)(n.h2,{id:"widget-hierarchy",children:"Widget Hierarchy"}),"\n",(0,s.jsx)(n.p,{children:"UI elements in DST are organized in a hierarchical structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"TheFrontEnd\n    \u2514\u2500\u2500 Screen\n        \u2514\u2500\u2500 Widget\n            \u251c\u2500\u2500 Text\n            \u251c\u2500\u2500 Image\n            \u251c\u2500\u2500 Button\n            \u2514\u2500\u2500 Container\n                \u2514\u2500\u2500 ...\n"})}),"\n",(0,s.jsx)(n.p,{children:"Each widget can have child widgets, forming a tree structure. The root of this tree is typically a Screen object, which is managed by TheFrontEnd."}),"\n",(0,s.jsx)(n.h2,{id:"basic-widget-types",children:"Basic Widget Types"}),"\n",(0,s.jsx)(n.h3,{id:"widget",children:"Widget"}),"\n",(0,s.jsx)(n.p,{children:"Base class for all UI elements:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Widget = require "widgets/widget"\nlocal MyWidget = Class(Widget, function(self)\n    Widget._ctor(self, "MyWidget")\n    -- Initialize your widget\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"text",children:"Text"}),"\n",(0,s.jsx)(n.p,{children:"For displaying text:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Text = require "widgets/text"\nself.label = self:AddChild(Text(BODYTEXTFONT, 30))\nself.label:SetString("Hello World!")\nself.label:SetColour(UICOLOURS.GOLD)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"image",children:"Image"}),"\n",(0,s.jsx)(n.p,{children:"For displaying images:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Image = require "widgets/image"\nself.icon = self:AddChild(Image("images/ui.xml", "icon.tex"))\nself.icon:SetScale(1.2)\nself.icon:SetTint(1, 1, 1, 0.8)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"button",children:"Button"}),"\n",(0,s.jsx)(n.p,{children:"For interactive buttons:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Button = require "widgets/button"\nself.button = self:AddChild(Button())\nself.button:SetText("Click Me")\nself.button:SetOnClick(function()\n    print("Button clicked!")\nend)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"imagebutton",children:"ImageButton"}),"\n",(0,s.jsx)(n.p,{children:"For buttons with images:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local ImageButton = require "widgets/imagebutton"\nself.imagebutton = self:AddChild(ImageButton("images/ui.xml", "button_normal.tex", "button_hover.tex", "button_disabled.tex"))\nself.imagebutton:SetOnClick(function()\n    print("Image button clicked!")\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-custom-widgets",children:"Creating Custom Widgets"}),"\n",(0,s.jsx)(n.p,{children:"Custom widgets are created by extending the Widget class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Widget = require "widgets/widget"\nlocal Image = require "widgets/image"\nlocal Text = require "widgets/text"\n\nlocal HealthBar = Class(Widget, function(self, owner)\n    Widget._ctor(self, "HealthBar")\n    self.owner = owner\n    \n    self.bg = self:AddChild(Image("images/ui.xml", "health_bar_bg.tex"))\n    self.bar = self:AddChild(Image("images/ui.xml", "health_bar_fg.tex"))\n    self.text = self:AddChild(Text(BODYTEXTFONT, 20))\n    \n    self.bar:SetScale(1, 1)\n    self.text:SetPosition(0, -30)\n    \n    self:StartUpdating()\nend)\n\nfunction HealthBar:OnUpdate(dt)\n    if self.owner and self.owner.components.health then\n        local health_percent = self.owner.components.health:GetPercent()\n        self.bar:SetScale(health_percent, 1)\n        self.text:SetString(string.format("Health: %d/%d", \n            self.owner.components.health.currenthealth,\n            self.owner.components.health.maxhealth))\n    end\nend\n\nreturn HealthBar\n'})}),"\n",(0,s.jsx)(n.h2,{id:"screens",children:"Screens"}),"\n",(0,s.jsx)(n.p,{children:"Screens are top-level widgets managed by TheFrontEnd:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Screen = require "widgets/screen"\nlocal Widget = require "widgets/widget"\nlocal Text = require "widgets/text"\n\nlocal MyScreen = Class(Screen, function(self)\n    Screen._ctor(self, "MyScreen")\n    \n    self.root = self:AddChild(Widget("ROOT"))\n    self.root:SetVAnchor(ANCHOR_MIDDLE)\n    self.root:SetHAnchor(ANCHOR_MIDDLE)\n    self.root:SetScaleMode(SCALEMODE_PROPORTIONAL)\n    \n    self.title = self.root:AddChild(Text(TITLEFONT, 50))\n    self.title:SetString("My Custom Screen")\n    self.title:SetPosition(0, 100)\n    \n    -- Add more UI elements here\nend)\n\nfunction MyScreen:OnControl(control, down)\n    if Screen.OnControl(self, control, down) then return true end\n    \n    if control == CONTROL_CANCEL and not down then\n        TheFrontEnd:PopScreen()\n        return true\n    end\n    \n    return false\nend\n\nreturn MyScreen\n'})}),"\n",(0,s.jsx)(n.h2,{id:"positioning-and-anchoring",children:"Positioning and Anchoring"}),"\n",(0,s.jsx)(n.p,{children:"Widgets can be positioned and anchored in several ways:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Absolute positioning\nwidget:SetPosition(100, 50)\n\n-- Relative positioning\nwidget:SetPosition(parent_x + 10, parent_y - 5)\n\n-- Scaling\nwidget:SetScale(1.5)\nwidget:SetScale(1.5, 1.0) -- Different X and Y scales\n\n-- Anchoring\nwidget:SetVAnchor(ANCHOR_MIDDLE) -- Vertical anchoring (TOP, MIDDLE, BOTTOM)\nwidget:SetHAnchor(ANCHOR_LEFT)   -- Horizontal anchoring (LEFT, MIDDLE, RIGHT)\n\n-- Scale modes\nwidget:SetScaleMode(SCALEMODE_PROPORTIONAL)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"input-handling",children:"Input Handling"}),"\n",(0,s.jsx)(n.p,{children:"Widgets can handle input events:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"function MyWidget:OnControl(control, down)\n    if Widget.OnControl(self, control, down) then return true end\n    \n    if control == CONTROL_ACCEPT and not down then\n        -- Handle the accept button release\n        return true\n    end\n    \n    return false\nend\n\nfunction MyWidget:OnMouseButton(button, down, x, y)\n    if Widget.OnMouseButton(self, button, down, x, y) then return true end\n    \n    if button == MOUSEBUTTON_LEFT and not down then\n        -- Handle left mouse button release\n        return true\n    end\n    \n    return false\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-ui-elements",children:"Common UI Elements"}),"\n",(0,s.jsx)(n.h3,{id:"containers",children:"Containers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local UIAnim = require "widgets/uianim"\nlocal container = self:AddChild(UIAnim())\ncontainer:GetAnimState():SetBank("container_bank")\ncontainer:GetAnimState():SetBuild("container_build")\ncontainer:GetAnimState():PlayAnimation("idle")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sliders",children:"Sliders"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Slider = require "widgets/slider"\nlocal slider = self:AddChild(Slider(0, 100, 200, 30))\nslider:SetPosition(0, -50)\nslider:SetValue(50)\n\nslider.OnChanged = function(val)\n    print("Slider value changed:", val)\nend\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spinners",children:"Spinners"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local Spinner = require "widgets/spinner"\nlocal options = {"Option 1", "Option 2", "Option 3"}\nlocal spinner = self:AddChild(Spinner(options, 200, 30))\nspinner:SetPosition(0, -100)\nspinner:SetSelectedIndex(1)\n\nspinner.OnChanged = function(selected)\n    print("Selected option:", selected)\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"managing-screens",children:"Managing Screens"}),"\n",(0,s.jsx)(n.p,{children:"The screen stack is managed by TheFrontEnd:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Push a new screen\nTheFrontEnd:PushScreen(MyScreen())\n\n-- Pop the top screen\nTheFrontEnd:PopScreen()\n\n-- Get the current screen\nlocal current_screen = TheFrontEnd:GetActiveScreen()\n\n-- Clear all screens (be careful!)\nTheFrontEnd:ClearScreens()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"hud-customization",children:"HUD Customization"}),"\n",(0,s.jsx)(n.p,{children:"The player's HUD can be customized:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'local function ModifyHUD(hud)\n    -- Add a custom widget to the HUD\n    hud.my_widget = hud.root:AddChild(MyWidget())\n    hud.my_widget:SetPosition(100, 100)\nend\n\nAddPrefabPostInit("player_classified", function(inst)\n    if inst.HUD then\n        ModifyHUD(inst.HUD)\n    else\n        inst:ListenForEvent("hudsetup", function(inst, data)\n            ModifyHUD(data.hud)\n        end)\n    end\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"animation-in-ui",children:"Animation in UI"}),"\n",(0,s.jsx)(n.p,{children:"UI elements can be animated:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Simple position animation\nwidget:MoveTo(current_pos, target_pos, duration, callback)\n\n-- Simple scale animation\nwidget:ScaleTo(current_scale, target_scale, duration, callback)\n\n-- Custom animation\nlocal start_time = GetTime()\nlocal duration = 1.0\nlocal start_pos = Vector3(widget:GetPosition())\nlocal end_pos = Vector3(100, 100, 0)\n\nwidget:StartUpdating()\nfunction widget:OnUpdate(dt)\n    local t = math.min((GetTime() - start_time) / duration, 1)\n    local pos = start_pos + (end_pos - start_pos) * t\n    widget:SetPosition(pos:Get())\n    \n    if t >= 1 then\n        widget:StopUpdating()\n    end\nend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean up resources"}),": Remove event listeners and stop updating when widgets are removed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use widget hierarchy"}),": Organize related widgets in a hierarchical structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize rendering"}),": Use SetClickable(false) for non-interactive elements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scale appropriately"}),": Design UI to work across different screen resolutions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle input properly"}),": Return true from input handlers when consuming events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test with different screen sizes"}),": Ensure your UI works on various resolutions"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/widgets",children:"Widgets"})," - Detailed documentation of available widgets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/ui-events",children:"UI Events"})," - Event handling in UI"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/creating-screens",children:"Creating Screens"})," - Detailed guide on screen creation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-ui-elements",children:"Custom UI Elements Example"})," - Example of creating custom UI"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-global-position",children:"Global Position CompleteSync Case Study"})," - Real-world example of complex UI implementation with map pings and indicators"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/case-regorgeitaled",children:"Re-Gorge-itated Case Study"})," - Example of extensive UI customization for a game mode conversion mod"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);