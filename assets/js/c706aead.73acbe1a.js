"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[3326],{3168:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api-vanilla/core/stategraph-system","title":"State Graph System","description":"The State Graph System in Don\'t Starve Together manages entity behaviors through finite state machines. It controls animations, actions, and transitions between different states, providing a structured way to handle complex entity behaviors.","source":"@site/docs/api-vanilla/core/stategraph-system.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/stategraph-system","permalink":"/dst-api-webdocs/docs/api-vanilla/core/stategraph-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"stategraph-system","title":"State Graph System","sidebar_position":5},"sidebar":"docs","previous":{"title":"Event System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/event-system"},"next":{"title":"Network System","permalink":"/dst-api-webdocs/docs/api-vanilla/core/network-system"}}');var s=t(4848),i=t(8453);const r={id:"stategraph-system",title:"State Graph System",sidebar_position:5},o="State Graph System",l={},c=[{value:"What is a State Graph?",id:"what-is-a-state-graph",level:2},{value:"Basic Structure",id:"basic-structure",level:2},{value:"States",id:"states",level:2},{value:"Events",id:"events",level:2},{value:"Action Handlers",id:"action-handlers",level:2},{value:"Common State Graph Patterns",id:"common-state-graph-patterns",level:2},{value:"Character State Graphs",id:"character-state-graphs",level:3},{value:"Creature State Graphs",id:"creature-state-graphs",level:3},{value:"Using State Graphs",id:"using-state-graphs",level:2},{value:"Timeline Events",id:"timeline-events",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"state-graph-system",children:"State Graph System"})}),"\n",(0,s.jsx)(n.p,{children:"The State Graph System in Don't Starve Together manages entity behaviors through finite state machines. It controls animations, actions, and transitions between different states, providing a structured way to handle complex entity behaviors."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-a-state-graph",children:"What is a State Graph?"}),"\n",(0,s.jsx)(n.p,{children:"A state graph is a collection of states and transitions that define how an entity behaves in different situations. Each state represents a specific behavior or animation, and transitions define how the entity moves between states based on events or conditions."}),"\n",(0,s.jsx)(n.h2,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Create a state graph\nlocal states = {\n    -- Define states\n}\n\nlocal events = {\n    -- Define common events\n}\n\nlocal fn = function(inst)\n    -- Initialize the state graph\n    local sg = StateGraph("myentity")\n    \n    -- Add states\n    for k, v in pairs(states) do\n        sg:AddState(v)\n    end\n    \n    -- Add events\n    for k, v in pairs(events) do\n        sg:AddEvent(v)\n    end\n    \n    -- Set initial state\n    sg:SetStartState("idle")\n    \n    -- Handle action overrides\n    sg.actionhandlers = {\n        -- Define action handlers\n    }\n    \n    return sg\nend\n\nreturn StateGraph("myentity", fn)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"states",children:"States"}),"\n",(0,s.jsx)(n.p,{children:"States are the building blocks of a state graph. Each state defines:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'State {\n    name = "idle",                    -- Unique state name\n    tags = {"idle", "canrotate"},     -- Tags for state identification\n    \n    onenter = function(inst)          -- Called when entering the state\n        inst.AnimState:PlayAnimation("idle_loop", true)\n    end,\n    \n    onupdate = function(inst)         -- Called every frame while in this state\n        -- Perform continuous logic\n    end,\n    \n    onexit = function(inst)           -- Called when exiting the state\n        -- Clean up\n    end,\n    \n    timeline = {                      -- Timeline events at specific animation frames\n        TimeEvent(10*FRAMES, function(inst)\n            inst.SoundEmitter:PlaySound("sound/effect")\n        end),\n        TimeEvent(20*FRAMES, function(inst)\n            inst.components.combat:DoAttack()\n        end),\n    },\n    \n    events = {                        -- Event handlers for state transitions\n        EventHandler("attacked", function(inst)\n            return "hit"  -- Transition to "hit" state\n        end),\n        EventHandler("animover", function(inst)\n            if not inst.AnimState:IsLooping() then\n                return "idle"  -- Return to idle when animation finishes\n            end\n        end),\n    },\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,s.jsx)(n.p,{children:"Events are triggers that can cause state transitions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'CommonEvents = {\n    CommonHandlers.OnLocomote(true, false),  -- Walking events\n    CommonHandlers.OnAttacked(),             -- Attack response\n    CommonHandlers.OnDeath(),                -- Death handling\n    EventHandler("doattack", function(inst)  -- Custom attack event\n        return "attack"\n    end),\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"action-handlers",children:"Action Handlers"}),"\n",(0,s.jsx)(n.p,{children:"Action handlers define how the state graph responds to player actions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'ActionHandler(ACTIONS.CHOP, function(inst)\n    return "chop"  -- Go to chop state when CHOP action is performed\nend),\n\nActionHandler(ACTIONS.PICKUP, function(inst)\n    return "pickup"  -- Go to pickup state when PICKUP action is performed\nend)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-state-graph-patterns",children:"Common State Graph Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"character-state-graphs",children:"Character State Graphs"}),"\n",(0,s.jsx)(n.p,{children:"Character state graphs typically include states for:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Locomotion states\nState { name = "idle" }\nState { name = "run" }\nState { name = "walk" }\n\n-- Action states\nState { name = "eat" }\nState { name = "chop" }\nState { name = "mine" }\n\n-- Reaction states\nState { name = "hit" }  -- When damaged\nState { name = "death" }\nState { name = "electrocute" }\n\n-- Special states\nState { name = "transform" }\nState { name = "teleport" }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creature-state-graphs",children:"Creature State Graphs"}),"\n",(0,s.jsx)(n.p,{children:"Creature state graphs often include:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Locomotion\nState { name = "idle" }\nState { name = "walk" }\n\n-- Combat\nState { name = "attack" }\nState { name = "hit" }\nState { name = "death" }\n\n-- Special behaviors\nState { name = "sleep" }\nState { name = "taunt" }\nState { name = "spawn" }\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-state-graphs",children:"Using State Graphs"}),"\n",(0,s.jsx)(n.p,{children:"To assign a state graph to an entity:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'function MakeMyEntity()\n    local inst = CreateEntity()\n    \n    -- Add basic components\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    \n    -- Set the state graph\n    inst:SetStateGraph("SGMyEntity")\n    \n    return inst\nend\n'})}),"\n",(0,s.jsx)(n.h2,{id:"timeline-events",children:"Timeline Events"}),"\n",(0,s.jsx)(n.p,{children:"Timeline events trigger at specific animation frames:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'timeline = {\n    -- Play sound effect at frame 5\n    TimeEvent(5*FRAMES, function(inst)\n        inst.SoundEmitter:PlaySound("dontstarve/sound/hit")\n    end),\n    \n    -- Apply damage at frame 15\n    TimeEvent(15*FRAMES, function(inst)\n        inst.components.combat:DoAttack()\n    end),\n    \n    -- Spawn effect at frame 25\n    TimeEvent(25*FRAMES, function(inst)\n        SpawnPrefab("fx_impact").Transform:SetPosition(inst.Transform:GetWorldPosition())\n    end),\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.p,{children:"When working with state graphs:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep States Focused"}),": Each state should handle a single behavior or animation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Tags for State Identification"}),': Tags like "busy" or "attack" help identify entity state']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle Animation Events"}),": Use timeline events to synchronize effects with animations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean Up in onexit"}),": Ensure any temporary effects or variables are properly reset"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Common Handlers"}),": Leverage CommonHandlers for standard behaviors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test State Transitions"}),": Ensure all states have proper transitions and don't get stuck"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);