"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[2109],{8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var i=t(6540);const a={},r=i.createContext(a);function s(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(r.Provider,{value:e},n.children)}},9910:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-vanilla/getting-started/first-mod","title":"First mod","description":"Last Update: 2023-07-06","source":"@site/docs/api-vanilla/getting-started/first-mod.md","sourceDirName":"api-vanilla/getting-started","slug":"/api/first-mod","permalink":"/dst-api-webdocs/docs/api/first-mod","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"first-mod","title":"First mod","sidebar_position":3,"last_updated":"2023-07-06T00:00:00.000Z","slug":"/api/first-mod"},"sidebar":"docs","previous":{"title":"Installation","permalink":"/dst-api-webdocs/docs/api/installation"},"next":{"title":"Setting Up VSCode","permalink":"/dst-api-webdocs/docs/api-vanilla/getting-started/vscode-setup"}}');var a=t(4848),r=t(8453);const s={id:"first-mod",title:"First mod",sidebar_position:3,last_updated:new Date("2023-07-06T00:00:00.000Z"),slug:"/api/first-mod"},o="First mod in Don't Starve Together",l={},d=[{value:"Setting Up Your First Mod",id:"setting-up-your-first-mod",level:2},{value:"Basic Folder Structure",id:"basic-folder-structure",level:3},{value:"Creating modinfo.lua",id:"creating-modinfolua",level:3},{value:"Creating modmain.lua",id:"creating-modmainlua",level:3},{value:"Example 1: Simple Item Mod",id:"example-1-simple-item-mod",level:2},{value:"File Structure",id:"file-structure",level:3},{value:"modinfo.lua",id:"modinfolua",level:3},{value:"modmain.lua",id:"modmainlua",level:3},{value:"scripts/prefabs/superaxe.lua",id:"scriptsprefabssuperaxelua",level:3},{value:"Example 2: Character Mod",id:"example-2-character-mod",level:2},{value:"File Structure",id:"file-structure-1",level:3},{value:"modmain.lua",id:"modmainlua-1",level:3},{value:"scripts/prefabs/mycharacter.lua",id:"scriptsprefabsmycharacterlua",level:3},{value:"scripts/prefabs/mycharacter_none.lua",id:"scriptsprefabsmycharacter_nonelua",level:3},{value:"Example 3: World Modification Mod",id:"example-3-world-modification-mod",level:2},{value:"modmain.lua",id:"modmainlua-2",level:3},{value:"Example 4: Complex Gameplay Mod",id:"example-4-complex-gameplay-mod",level:2},{value:"File Structure",id:"file-structure-2",level:3},{value:"modmain.lua",id:"modmainlua-3",level:3},{value:"scripts/components/itemtransformer.lua",id:"scriptscomponentsitemtransformerlua",level:3},{value:"scripts/prefabs/magic_table.lua",id:"scriptsprefabsmagic_tablelua",level:3},{value:"Example 5: Popular Mod Case Study - &quot;Geometric Placement&quot;",id:"example-5-popular-mod-case-study---geometric-placement",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Implementation Highlights",id:"implementation-highlights",level:3},{value:"Tips for Mod Development",id:"tips-for-mod-development",level:2}];function c(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"Last Update: 2023-07-06"})}),"\n",(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"first-mod-in-dont-starve-together",children:"First mod in Don't Starve Together"})}),"\n",(0,a.jsx)(e.p,{children:"Creating your first mod for Don't Starve Together (DST) is an exciting way to customize the game experience. This guide will walk you through creating a simple mod, then progressively build toward more complex examples."}),"\n",(0,a.jsx)(e.h2,{id:"setting-up-your-first-mod",children:"Setting Up Your First Mod"}),"\n",(0,a.jsx)(e.h3,{id:"basic-folder-structure",children:"Basic Folder Structure"}),"\n",(0,a.jsx)(e.p,{children:"Start by creating a folder in the game's mods directory:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"[Steam Directory]/steamapps/common/Don't Starve Together/mods/my_first_mod/\n"})}),"\n",(0,a.jsx)(e.p,{children:"Inside this folder, create these essential files:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"my_first_mod/\n\u251c\u2500\u2500 modinfo.lua       # Mod metadata and configuration\n\u251c\u2500\u2500 modmain.lua       # Main entry point for the mod\n\u2514\u2500\u2500 preview.tex       # Mod thumbnail image (184x184 pixels)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"creating-modinfolua",children:"Creating modinfo.lua"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"modinfo.lua"})," file contains metadata about your mod:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'name = "My First Mod"\ndescription = "This is my first DST mod!"\nauthor = "Your Name"\nversion = "1.0.0"\n\n-- Compatible with Don\'t Starve Together\ndst_compatible = true\n\n-- Compatible with Don\'t Starve\ndont_starve_compatible = false\nreign_of_giants_compatible = false\n\n-- Character mods need this set to true\nall_clients_require_mod = false\n\n-- Server only mods need this set to true\nclient_only_mod = false\n\n-- If your mod requires libraries or dependencies\nserver_filter_tags = {"utility"}\n\n-- Mod icon (184x184 PNG)\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n\n-- Configuration options\nconfiguration_options = {\n    {\n        name = "difficulty",\n        label = "Difficulty",\n        options = {\n            {description = "Easy", data = "easy"},\n            {description = "Normal", data = "normal", hover = "The standard experience"},\n            {description = "Hard", data = "hard"}\n        },\n        default = "normal"\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"creating-modmainlua",children:"Creating modmain.lua"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"modmain.lua"})," file contains the actual code for your mod:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- This is the main file for your mod\n\n-- Import global objects into the mod\'s environment\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Print a message when the mod loads\nprint("Hello from My First Mod!")\n\n-- Access mod configuration\nlocal difficulty = GetModConfigData("difficulty")\nprint("Selected difficulty: " .. difficulty)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"example-1-simple-item-mod",children:"Example 1: Simple Item Mod"}),"\n",(0,a.jsx)(e.p,{children:"Let's create a basic mod that adds a new item to the game. We'll make a \"Super Axe\" that has increased durability and damage."}),"\n",(0,a.jsx)(e.h3,{id:"file-structure",children:"File Structure"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"my_axe_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 prefabs/\n\u2502       \u2514\u2500\u2500 superaxe.lua\n\u2514\u2500\u2500 images/\n    \u2514\u2500\u2500 inventoryimages/\n        \u251c\u2500\u2500 superaxe.png\n        \u2514\u2500\u2500 superaxe.xml\n"})}),"\n",(0,a.jsx)(e.h3,{id:"modinfolua",children:"modinfo.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'name = "Super Axe"\ndescription = "Adds a powerful axe with increased durability and damage"\nauthor = "Your Name"\nversion = "1.0.0"\n\ndst_compatible = true\ndont_starve_compatible = false\nall_clients_require_mod = true\nclient_only_mod = false\n\nicon_atlas = "modicon.xml"\nicon = "modicon.tex"\n'})}),"\n",(0,a.jsx)(e.h3,{id:"modmainlua",children:"modmain.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Import globals\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add asset files\nAssets = {\n    Asset("IMAGE", "images/inventoryimages/superaxe.tex"),\n    Asset("ATLAS", "images/inventoryimages/superaxe.xml"),\n}\n\n-- Register the prefab\nPrefabFiles = {\n    "superaxe",\n}\n\n-- Add recipe\nAddRecipe("superaxe", \n    {Ingredient("goldnugget", 2), Ingredient("twigs", 1)}, \n    RECIPETABS.TOOLS, \n    TECH.SCIENCE_ONE, \n    nil, nil, nil, nil, nil, \n    "images/inventoryimages/superaxe.xml", "superaxe.tex")\n'})}),"\n",(0,a.jsx)(e.h3,{id:"scriptsprefabssuperaxelua",children:"scripts/prefabs/superaxe.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/axe.zip"),\n    Asset("ANIM", "anim/swap_axe.zip"),\n    \n    Asset("IMAGE", "images/inventoryimages/superaxe.tex"),\n    Asset("ATLAS", "images/inventoryimages/superaxe.xml"),\n}\n\nlocal function onequip(inst, owner)\n    owner.AnimState:OverrideSymbol("swap_object", "swap_axe", "swap_axe")\n    owner.AnimState:Show("ARM_carry")\n    owner.AnimState:Hide("ARM_normal")\nend\n\nlocal function onunequip(inst, owner)\n    owner.AnimState:Hide("ARM_carry")\n    owner.AnimState:Show("ARM_normal")\nend\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n\n    MakeInventoryPhysics(inst)\n\n    inst.AnimState:SetBank("axe")\n    inst.AnimState:SetBuild("axe")\n    inst.AnimState:PlayAnimation("idle")\n\n    -- Make it usable by players\n    inst:AddTag("sharp")\n\n    -- Setup for clients\n    inst.entity:SetPristine()\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    -- Components\n    inst:AddComponent("inventoryitem")\n    inst.components.inventoryitem.imagename = "superaxe"\n    inst.components.inventoryitem.atlasname = "images/inventoryimages/superaxe.xml"\n\n    inst:AddComponent("tool")\n    inst.components.tool:SetAction(ACTIONS.CHOP, 2) -- Chop efficiency multiplier\n\n    inst:AddComponent("weapon")\n    inst.components.weapon:SetDamage(34) -- Regular axe is 27\n\n    inst:AddComponent("finiteuses")\n    inst.components.finiteuses:SetMaxUses(200) -- Regular axe is 100\n    inst.components.finiteuses:SetUses(200)\n    inst.components.finiteuses:SetOnFinished(inst.Remove)\n    inst.components.finiteuses:SetConsumption(ACTIONS.CHOP, 1)\n\n    inst:AddComponent("inspectable")\n\n    inst:AddComponent("equippable")\n    inst.components.equippable:SetOnEquip(onequip)\n    inst.components.equippable:SetOnUnequip(onunequip)\n\n    return inst\nend\n\nreturn Prefab("superaxe", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"example-2-character-mod",children:"Example 2: Character Mod"}),"\n",(0,a.jsx)(e.p,{children:"Let's create a simple character mod that adds a new playable character to the game."}),"\n",(0,a.jsx)(e.h3,{id:"file-structure-1",children:"File Structure"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"my_character_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 prefabs/\n\u2502       \u251c\u2500\u2500 mycharacter.lua\n\u2502       \u2514\u2500\u2500 mycharacter_none.lua\n\u251c\u2500\u2500 anim/\n\u2502   \u2514\u2500\u2500 mycharacter.zip\n\u2514\u2500\u2500 bigportraits/\n    \u2514\u2500\u2500 mycharacter.xml\n    \u2514\u2500\u2500 mycharacter.tex\n"})}),"\n",(0,a.jsx)(e.h3,{id:"modmainlua-1",children:"modmain.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Import globals\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add assets\nAssets = {\n    Asset("IMAGE", "bigportraits/mycharacter.tex"),\n    Asset("ATLAS", "bigportraits/mycharacter.xml"),\n}\n\n-- Add character prefab\nPrefabFiles = {\n    "mycharacter",\n    "mycharacter_none",\n}\n\n-- Add character to the game\nAddModCharacter("mycharacter", "MALE")\n\n-- Add character-specific strings\nSTRINGS.NAMES.MYCHARACTER = "My Character"\nSTRINGS.CHARACTER_TITLES.mycharacter = "The Inventor"\nSTRINGS.CHARACTER_DESCRIPTIONS.mycharacter = "\u2022 Has bonus crafting abilities\\n\u2022 Starts with special tools\\n\u2022 Gets hungry faster"\nSTRINGS.CHARACTER_QUOTES.mycharacter = "\\"I\'ll build something amazing!\\""\n\n-- Add speech file\nAddModCharacterSpeech("mycharacter", "speech_mycharacter")\n'})}),"\n",(0,a.jsx)(e.h3,{id:"scriptsprefabsmycharacterlua",children:"scripts/prefabs/mycharacter.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local MakePlayerCharacter = require "prefabs/player_common"\n\nlocal assets = {\n    Asset("SCRIPT", "scripts/prefabs/player_common.lua"),\n    Asset("ANIM", "anim/mycharacter.zip"),\n}\n\n-- Custom starting inventory\nlocal start_inv = {\n    "axe",\n    "pickaxe",\n}\n\n-- When the character is revived from ghost\nlocal function onbecamehuman(inst)\n    -- Set speed when revived\n    inst.components.locomotor:SetExternalSpeedMultiplier(inst, "mycharacter_speed_mod", 1)\nend\n\n-- When the character turns into a ghost\nlocal function onbecameghost(inst)\n    -- Ghosts are slightly faster\n    inst.components.locomotor:SetExternalSpeedMultiplier(inst, "mycharacter_speed_mod", 1.1)\nend\n\n-- When loading or spawning the character\nlocal function onload(inst)\n    inst:ListenForEvent("ms_respawnedfromghost", onbecamehuman)\n    inst:ListenForEvent("ms_becameghost", onbecameghost)\n\n    if inst:HasTag("playerghost") then\n        onbecameghost(inst)\n    else\n        onbecamehuman(inst)\n    end\nend\n\n-- This initializes for the server only\nlocal master_postinit = function(inst)\n    -- Set starting inventory\n    inst.starting_inventory = start_inv\n\n    -- Stats\n    inst.components.health:SetMaxHealth(125) -- Less health (default is 150)\n    inst.components.hunger:SetMax(150) -- Same hunger\n    inst.components.sanity:SetMax(200) -- More sanity (default is 150)\n    \n    -- Hunger rate (speed at which character gets hungry)\n    inst.components.hunger.hungerrate = 1.25 * TUNING.WILSON_HUNGER_RATE\n    \n    -- Character specific abilities\n    inst.components.builder.science_bonus = 1 -- Bonus tech level\nend\n\n-- This initializes for both the server and client\nlocal common_postinit = function(inst) \n    -- Minimap icon\n    inst.MiniMapEntity:SetIcon("mycharacter.tex")\n    \n    -- Character traits\n    inst:AddTag("bookbuilder") -- Can craft books\n    inst:AddTag("fastbuilder") -- Builds faster\n    \n    -- Voice\n    inst.soundsname = "wilson" -- Use Wilson\'s voice\nend\n\n-- Return the character function\nreturn MakePlayerCharacter("mycharacter", prefabs, assets, common_postinit, master_postinit, start_inv)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"scriptsprefabsmycharacter_nonelua",children:"scripts/prefabs/mycharacter_none.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'return CreatePrefabSkin("mycharacter_none", {\n    base_prefab = "mycharacter",\n    type = "base",\n    assets = {\n        Asset("ANIM", "anim/mycharacter.zip"),\n    },\n    skins = { normal_skin = "mycharacter" },\n    skin_tags = { "MYCHARACTER", "CHARACTER" },\n    build_name_override = "mycharacter",\n    rarity = "Character",\n})\n'})}),"\n",(0,a.jsx)(e.h2,{id:"example-3-world-modification-mod",children:"Example 3: World Modification Mod"}),"\n",(0,a.jsx)(e.p,{children:"This mod changes aspects of the world generation and adds custom features to the environment."}),"\n",(0,a.jsx)(e.h3,{id:"modmainlua-2",children:"modmain.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Import globals\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add more berry bushes to the world\nAddPrefabPostInit("world", function(inst)\n    if not GLOBAL.TheWorld.ismastersim then return end\n    \n    inst:DoTaskInTime(0.1, function()\n        -- Only run on the master shard (overworld)\n        if inst:HasTag("cave") then return end\n        \n        -- Spawn 20 extra berry bushes\n        for i = 1, 20 do\n            -- Find a valid spawn position\n            local x, y, z = inst:GetRandomPoint()\n            if x and z then\n                -- Spawn the berry bush\n                local bush = GLOBAL.SpawnPrefab("berrybush")\n                bush.Transform:SetPosition(x, y, z)\n            end\n        end\n        \n        print("Added extra berry bushes to the world")\n    end)\nend)\n\n-- Make nights shorter\nAddComponentPostInit("clock", function(clock)\n    -- Adjust night length\n    clock:SetNightLength(0.75 * TUNING.NIGHT_TIME_DEFAULT)\n    \n    print("Made nights shorter")\nend)\n\n-- Make all creatures move faster\nAddComponentPostInit("locomotor", function(locomotor)\n    local old_SetExternalSpeedMultiplier = locomotor.SetExternalSpeedMultiplier\n    \n    function locomotor:SetExternalSpeedMultiplier(source, name, mult)\n        -- Call original function with a speed boost\n        if source:HasTag("monster") then\n            return old_SetExternalSpeedMultiplier(self, source, name, mult * 1.2)\n        else\n            return old_SetExternalSpeedMultiplier(self, source, name, mult)\n        end\n    end\nend)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"example-4-complex-gameplay-mod",children:"Example 4: Complex Gameplay Mod"}),"\n",(0,a.jsx)(e.p,{children:"This example shows a more complex mod that adds a complete gameplay system - a magical crafting table that transforms items."}),"\n",(0,a.jsx)(e.h3,{id:"file-structure-2",children:"File Structure"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"magic_crafting_mod/\n\u251c\u2500\u2500 modinfo.lua\n\u251c\u2500\u2500 modmain.lua\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 prefabs/\n\u2502   \u2502   \u2514\u2500\u2500 magic_table.lua\n\u2502   \u2514\u2500\u2500 components/\n\u2502       \u2514\u2500\u2500 itemtransformer.lua\n\u251c\u2500\u2500 anim/\n\u2502   \u2514\u2500\u2500 magic_table.zip\n\u2514\u2500\u2500 images/\n    \u2514\u2500\u2500 inventoryimages/\n        \u251c\u2500\u2500 magic_table.png\n        \u2514\u2500\u2500 magic_table.xml\n"})}),"\n",(0,a.jsx)(e.h3,{id:"modmainlua-3",children:"modmain.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- Import globals\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Add assets\nAssets = {\n    Asset("IMAGE", "images/inventoryimages/magic_table.tex"),\n    Asset("ATLAS", "images/inventoryimages/magic_table.xml"),\n}\n\n-- Register prefabs\nPrefabFiles = {\n    "magic_table",\n}\n\n-- Register custom component\nlocal ItemTransformer = require("components/itemtransformer")\nAddComponentPostInit("itemtransformer", ItemTransformer)\n\n-- Add recipe\nAddRecipe("magic_table", \n    {\n        Ingredient("boards", 2),\n        Ingredient("purplegem", 1),\n        Ingredient("nightmarefuel", 3)\n    }, \n    RECIPETABS.MAGIC, \n    TECH.MAGIC_THREE, \n    nil, nil, nil, nil, nil, \n    "images/inventoryimages/magic_table.xml", "magic_table.tex")\n\n-- Define transformation recipes\nGLOBAL.MAGIC_TRANSFORMATIONS = {\n    -- Basic resources\n    {\n        ingredient = "log",\n        result = "charcoal",\n        count = 2\n    },\n    {\n        ingredient = "rocks",\n        result = "goldnugget",\n        count = 1\n    },\n    -- Foods\n    {\n        ingredient = "carrot",\n        result = "meat",\n        count = 1\n    },\n    -- Special items\n    {\n        ingredient = "nightmarefuel",\n        result = "purplegem",\n        count = 1,\n        sanity_cost = 15\n    }\n}\n\n-- Add custom action\nlocal TRANSFORM = Action({priority=10})\nTRANSFORM.id = "TRANSFORM"\nTRANSFORM.str = "Transform"\nTRANSFORM.fn = function(act)\n    if act.target and act.target.components.itemtransformer and act.doer and act.invobject then\n        return act.target.components.itemtransformer:Transform(act.doer, act.invobject)\n    end\n    return false\nend\nAddAction(TRANSFORM)\n\n-- Add action handler\nAddComponentAction("USEITEM", "inventoryitem", function(inst, doer, target, actions, right)\n    if target:HasTag("magic_table") and right then\n        table.insert(actions, ACTIONS.TRANSFORM)\n    end\nend)\n\n-- Add strings\nSTRINGS.ACTIONS.TRANSFORM = "Transform"\nSTRINGS.NAMES.MAGIC_TABLE = "Magic Transformation Table"\nSTRINGS.CHARACTERS.GENERIC.DESCRIBE.MAGIC_TABLE = "I can transform items with this."\n'})}),"\n",(0,a.jsx)(e.h3,{id:"scriptscomponentsitemtransformerlua",children:"scripts/components/itemtransformer.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local ItemTransformer = Class(function(self, inst)\n    self.inst = inst\n    self.transforming = false\n    self.transform_time = 3\nend)\n\nfunction ItemTransformer:Transform(doer, item)\n    if self.transforming then\n        return false, "BUSY"\n    end\n    \n    -- Find matching transformation recipe\n    local recipe = nil\n    for _, r in ipairs(MAGIC_TRANSFORMATIONS) do\n        if r.ingredient == item.prefab then\n            recipe = r\n            break\n        end\n    end\n    \n    if not recipe then\n        return false, "NORECIPE"\n    end\n    \n    -- Check sanity cost\n    if recipe.sanity_cost and doer.components.sanity then\n        if doer.components.sanity.current < recipe.sanity_cost then\n            return false, "NOSANITY"\n        end\n    end\n    \n    -- Start transformation\n    self.transforming = true\n    \n    -- Remove the ingredient\n    if item.components.stackable then\n        item.components.stackable:Get():Remove()\n    else\n        item:Remove()\n    end\n    \n    -- Play effects\n    if self.inst.AnimState then\n        self.inst.AnimState:PlayAnimation("transform")\n    end\n    \n    if self.inst.SoundEmitter then\n        self.inst.SoundEmitter:PlaySound("dontstarve/common/researchmachine_lvl3_run", "transforming")\n    end\n    \n    -- Apply sanity cost\n    if recipe.sanity_cost and doer.components.sanity then\n        doer.components.sanity:DoDelta(-recipe.sanity_cost)\n    end\n    \n    -- Complete transformation after delay\n    self.inst:DoTaskInTime(self.transform_time, function()\n        if self.inst.SoundEmitter then\n            self.inst.SoundEmitter:KillSound("transforming")\n            self.inst.SoundEmitter:PlaySound("dontstarve/common/researchmachine_lvl3_ding")\n        end\n        \n        -- Create result items\n        local count = recipe.count or 1\n        for i = 1, count do\n            local result = SpawnPrefab(recipe.result)\n            if result then\n                if doer.components.inventory then\n                    doer.components.inventory:GiveItem(result)\n                else\n                    result.Transform:SetPosition(self.inst.Transform:GetWorldPosition())\n                end\n            end\n        end\n        \n        -- Reset state\n        self.transforming = false\n        \n        if self.inst.AnimState then\n            self.inst.AnimState:PlayAnimation("idle")\n        end\n    end)\n    \n    return true\nend\n\nfunction ItemTransformer:OnSave()\n    return {\n        transforming = self.transforming\n    }\nend\n\nfunction ItemTransformer:OnLoad(data)\n    if data then\n        self.transforming = data.transforming or false\n    end\nend\n\nreturn ItemTransformer\n'})}),"\n",(0,a.jsx)(e.h3,{id:"scriptsprefabsmagic_tablelua",children:"scripts/prefabs/magic_table.lua"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local assets = {\n    Asset("ANIM", "anim/magic_table.zip"),\n    Asset("IMAGE", "images/inventoryimages/magic_table.tex"),\n    Asset("ATLAS", "images/inventoryimages/magic_table.xml"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n\n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddSoundEmitter()\n    inst.entity:AddMiniMapEntity()\n    inst.entity:AddNetwork()\n\n    MakeObstaclePhysics(inst, 0.5)\n\n    inst.MiniMapEntity:SetIcon("magic_table.tex")\n\n    inst.AnimState:SetBank("magic_table")\n    inst.AnimState:SetBuild("magic_table")\n    inst.AnimState:PlayAnimation("idle")\n\n    inst:AddTag("structure")\n    inst:AddTag("magic")\n    inst:AddTag("magic_table")\n\n    inst.entity:SetPristine()\n\n    if not TheWorld.ismastersim then\n        return inst\n    end\n\n    inst:AddComponent("inspectable")\n    \n    inst:AddComponent("lootdropper")\n    \n    inst:AddComponent("workable")\n    inst.components.workable:SetWorkAction(ACTIONS.HAMMER)\n    inst.components.workable:SetWorkLeft(4)\n    inst.components.workable:SetOnFinishCallback(function(inst, worker)\n        inst.components.lootdropper:DropLoot()\n        local fx = SpawnPrefab("collapse_small")\n        fx.Transform:SetPosition(inst.Transform:GetWorldPosition())\n        fx:SetMaterial("wood")\n        inst:Remove()\n    end)\n\n    inst:AddComponent("itemtransformer")\n\n    return inst\nend\n\nreturn Prefab("magic_table", fn, assets)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"example-5-popular-mod-case-study---geometric-placement",children:'Example 5: Popular Mod Case Study - "Geometric Placement"'}),"\n",(0,a.jsx)(e.p,{children:'One of the most popular DST mods is "Geometric Placement," which helps players place structures in a grid-like pattern. Let\'s analyze a simplified version of how it works:'}),"\n",(0,a.jsx)(e.h3,{id:"key-features",children:"Key Features"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Grid-based placement visualization"}),"\n",(0,a.jsx)(e.li,{children:"Rotation controls"}),"\n",(0,a.jsx)(e.li,{children:"Snapping to grid"}),"\n",(0,a.jsx)(e.li,{children:"Custom keybindings"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"implementation-highlights",children:"Implementation Highlights"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'-- modmain.lua (simplified version of Geometric Placement)\n\n-- Import globals\nGLOBAL.setmetatable(env, {__index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end})\n\n-- Configuration\nlocal GRID_SIZE = GetModConfigData("grid_size") or 1\nlocal ENABLE_BY_DEFAULT = GetModConfigData("enable_by_default") or true\n\n-- State variables\nlocal ENABLED = ENABLE_BY_DEFAULT\nlocal CURRENT_ROTATION = 0\nlocal PLACER_INST = nil\n\n-- Key bindings\nlocal KEY_TOGGLE = GetModConfigData("key_toggle") or KEY_G\nlocal KEY_ROTATE = GetModConfigData("key_rotate") or KEY_R\n\n-- Helper functions\nlocal function SnapToGrid(x, y, z)\n    -- Snap coordinates to nearest grid point\n    local grid_x = math.floor((x + GRID_SIZE/2) / GRID_SIZE) * GRID_SIZE\n    local grid_z = math.floor((z + GRID_SIZE/2) / GRID_SIZE) * GRID_SIZE\n    return grid_x, y, grid_z\nend\n\nlocal function RotatePoint(x, z, angle)\n    -- Rotate a point around origin\n    local rad = math.rad(angle)\n    local cos_angle = math.cos(rad)\n    local sin_angle = math.sin(rad)\n    return x * cos_angle - z * sin_angle, x * sin_angle + z * cos_angle\nend\n\n-- Override placer positioning\nAddClassPostConstruct("components/placer", function(self)\n    local old_OnUpdate = self.OnUpdate\n    \n    function self:OnUpdate(dt)\n        -- Call original update\n        old_OnUpdate(self, dt)\n        \n        -- Skip if geometric placement is disabled\n        if not ENABLED then return end\n        \n        -- Store reference to current placer\n        PLACER_INST = self.inst\n        \n        -- Get current position\n        local x, y, z = self.inst.Transform:GetWorldPosition()\n        \n        -- Apply grid snapping\n        local grid_x, grid_y, grid_z = SnapToGrid(x, y, z)\n        \n        -- Apply rotation if needed\n        if CURRENT_ROTATION ~= 0 then\n            -- Adjust based on rotation\n            local offset_x, offset_z = RotatePoint(self.offset.x, self.offset.z, CURRENT_ROTATION)\n            grid_x = grid_x + offset_x\n            grid_z = grid_z + offset_z\n        end\n        \n        -- Set the new position\n        self.inst.Transform:SetPosition(grid_x, grid_y, grid_z)\n        \n        -- Update visual indicator\n        if self.inst.DrawGrid then\n            self.inst:DrawGrid(GRID_SIZE, CURRENT_ROTATION)\n        end\n    end\nend)\n\n-- Add grid visualization to placers\nAddPrefabPostInit("placer", function(inst)\n    if not GLOBAL.TheWorld.ismastersim then return end\n    \n    -- Function to draw grid lines\n    inst.DrawGrid = function(inst, size, rotation)\n        -- Clear previous grid\n        inst.gridpoints = inst.gridpoints or {}\n        for _, point in ipairs(inst.gridpoints) do\n            point:Remove()\n        end\n        inst.gridpoints = {}\n        \n        -- Draw new grid (simplified)\n        for x = -2, 2 do\n            for z = -2, 2 do\n                if x == 0 and z == 0 then\n                    -- Skip center point\n                    goto continue\n                end\n                \n                -- Create grid point indicator\n                local point = SpawnPrefab("gridpoint")\n                local pos_x, pos_z = RotatePoint(x * size, z * size, rotation)\n                point.Transform:SetPosition(inst.Transform:GetWorldPosition() + pos_x, 0, pos_z)\n                table.insert(inst.gridpoints, point)\n                \n                ::continue::\n            end\n        end\n    end\nend)\n\n-- Handle key presses\nTheInput:AddKeyHandler(function(key, down)\n    if down then\n        if key == KEY_TOGGLE then\n            -- Toggle geometric placement\n            ENABLED = not ENABLED\n            GLOBAL.ThePlayer.HUD.controls.crafttabs:ShowPopup(ENABLED and "Geometric Placement: ON" or "Geometric Placement: OFF")\n            return true\n        elseif key == KEY_ROTATE and ENABLED and PLACER_INST then\n            -- Rotate placement\n            CURRENT_ROTATION = (CURRENT_ROTATION + 90) % 360\n            return true\n        end\n    end\n    return false\nend)\n'})}),"\n",(0,a.jsx)(e.p,{children:"This simplified example demonstrates the core concepts behind the Geometric Placement mod, showing how it:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Overrides the placer component to modify structure placement"}),"\n",(0,a.jsx)(e.li,{children:"Adds visual indicators for the grid"}),"\n",(0,a.jsx)(e.li,{children:"Implements rotation functionality"}),"\n",(0,a.jsx)(e.li,{children:"Handles key bindings for user interaction"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"tips-for-mod-development",children:"Tips for Mod Development"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Start Small"}),": Begin with simple modifications before attempting complex features"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Study Existing Mods"}),": Learn from popular mods in the Steam Workshop"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Use Print Statements"}),": Add ",(0,a.jsx)(e.code,{children:"print()"})," calls to debug your code"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Test Thoroughly"}),": Check your mod in different game scenarios"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Version Control"}),": Use Git to track changes to your mod"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Document Your Code"}),": Add comments to explain complex logic"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Optimize Performance"}),": Be mindful of performance impact, especially in frequently called functions"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Share Your Work"}),": Get feedback from the DST modding community"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"By following these examples and tips, you'll be well on your way to creating your own Don't Starve Together mods, from simple items to complex gameplay systems."})]})}function m(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}}}]);