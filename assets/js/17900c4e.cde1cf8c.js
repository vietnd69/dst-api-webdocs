"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[95370],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var i=s(96540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}},76442:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"game-scripts/core-systems/world-systems/tiles-terrain/worldtiledefs","title":"World Tile Definitions","description":"Ground tile system for terrain properties, footstep sounds, and visual assets management","source":"@site/docs/game-scripts/core-systems/world-systems/tiles-terrain/worldtiledefs.md","sourceDirName":"game-scripts/core-systems/world-systems/tiles-terrain","slug":"/game-scripts/core-systems/world-systems/tiles-terrain/worldtiledefs","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/worldtiledefs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"worldtiledefs","title":"World Tile Definitions","description":"Ground tile system for terrain properties, footstep sounds, and visual assets management","sidebar_position":4,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable"},"sidebar":"docs","previous":{"title":"TileManager","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/tilemanager"},"next":{"title":"Noise Tile Functions","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/world-systems/tiles-terrain/noisetilefunctions"}}');var l=s(74848),r=s(28453);const t={id:"worldtiledefs",title:"World Tile Definitions",description:"Ground tile system for terrain properties, footstep sounds, and visual assets management",sidebar_position:4,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable"},o="World Tile Definitions",d={},a=[{value:"Version History",id:"version-history",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Functions",id:"functions",level:2},{value:"Initialize()",id:"initialize",level:3},{value:"GetTileInfo(tile)",id:"get-tile-info",level:3},{value:"LookupTileInfo(tile)",id:"lookup-tile-info",level:3},{value:"PlayFootstep(inst, volume, ispredicted)",id:"play-footstep",level:3},{value:"Constants",id:"constants",level:2},{value:"GROUND_PROPERTIES",id:"ground_properties",level:3},{value:"WALL_PROPERTIES",id:"wall_properties",level:3},{value:"Assets Management",id:"assets-management",level:3},{value:"Module Exports",id:"module-exports",level:2},{value:"ground",id:"ground-export",level:3},{value:"minimap",id:"minimap-export",level:3},{value:"turf",id:"turf-export",level:3},{value:"falloff",id:"falloff-export",level:3},{value:"creep",id:"creep-export",level:3},{value:"assets",id:"assets-export",level:3},{value:"minimapassets",id:"minimapassets-export",level:3},{value:"minimapassets",id:"minimapassets-export",level:3},{value:"Internal Module Structure",id:"internal-module-structure",level:2},{value:"GROUND_PROPERTIES_CACHE",id:"ground_properties_cache",level:3},{value:"Helper Functions",id:"helper-functions",level:3},{value:"Legacy Properties (Deprecated)",id:"legacy-properties-deprecated",level:3},{value:"Sound System Integration",id:"sound-system-integration",level:2},{value:"Ground Overlay Detection",id:"ground-overlay-detection",level:3},{value:"Creature Size Categories",id:"creature-size-categories",level:3},{value:"Special Conditions",id:"special-conditions",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Tile Info Caching",id:"tile-info-caching",level:3},{value:"Asset Loading",id:"asset-loading",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Custom Tile Definition",id:"custom-tile-definition",level:3},{value:"Tile-Based Gameplay Logic",id:"tile-based-gameplay-logic",level:3},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"world-tile-definitions",children:"World Tile Definitions"})}),"\n",(0,l.jsx)(n.h2,{id:"version-history",children:"Version History"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Build Version"}),(0,l.jsx)(n.th,{children:"Change Date"}),(0,l.jsx)(n.th,{children:"Change Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"676042"}),(0,l.jsx)(n.td,{children:"2025-06-21"}),(0,l.jsx)(n.td,{children:"stable"}),(0,l.jsx)(n.td,{children:"Current version"})]})})]}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"worldtiledefs"})," module defines the ground tile system for Don't Starve Together, managing terrain properties, visual assets, and audio feedback. It provides the foundation for different ground types including grass, rock, dirt, cave floors, and specialized tiles, along with their associated footstep sounds and visual representations."]}),"\n",(0,l.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Get tile information for a specific ground type\nlocal tileinfo = GetTileInfo(GROUND.GRASS)\nif tileinfo then\n    print("Tile name:", tileinfo.name)\n    print("Walk sound:", tileinfo.walksound)\nend\n\n-- Play footstep sound for an entity\nPlayFootstep(inst, 1.0, false)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,l.jsx)(n.h3,{id:"initialize",children:"Initialize()"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nCaches all tile information for optimized runtime access using ",(0,l.jsx)(n.code,{children:"CacheAllTileInfo()"})," internal function. This function must be called during game initialization before any tile lookups are performed. It creates the ",(0,l.jsx)(n.code,{children:"GROUND_PROPERTIES_CACHE"})," table for O(1) tile information access."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Parameters:"}),"\nNone"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Called during game initialization (typically in gamelogic.lua)\nlocal worldtiledefs = require("worldtiledefs")\nworldtiledefs.Initialize()\n\n-- After initialization, tile info cache is available\nlocal grassinfo = worldtiledefs.GetTileInfo(GROUND.GRASS)\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Implementation Details:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Internal caching function\nlocal function CacheAllTileInfo()\n    assert(GROUND_PROPERTIES_CACHE == nil, "Tile info already initialized")\n    GROUND_PROPERTIES_CACHE = {}\n    for i, data in ipairs(GROUND_PROPERTIES) do\n        local tile_type, tile_info = unpack(data)\n        GROUND_PROPERTIES_CACHE[tile_type] = tile_info\n    end\nend\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"get-tile-info",children:"GetTileInfo(tile)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nRetrieves cached tile information for the specified tile type. This is the preferred method for tile lookups as it uses cached data for optimal performance."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"tile"})," (number): The GROUND constant representing the tile type"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(table): Tile information containing properties like name, sounds, and visual data"}),"\n",(0,l.jsx)(n.li,{children:"(nil): If tile type is not found"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local tileinfo = GetTileInfo(GROUND.FOREST)\nif tileinfo then\n    local walksound = tileinfo.walksound\n    local runsound = tileinfo.runsound\n    local tilename = tileinfo.name\nend\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"lookup-tile-info",children:"LookupTileInfo(tile)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nLegacy function for tile information lookup using slow table iteration. Use GetTileInfo() instead for better performance."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"tile"})," (number): The GROUND constant representing the tile type"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"(table): Tile information if found"}),"\n",(0,l.jsx)(n.li,{children:"(nil): If tile type is not found"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Legacy usage (not recommended)\nlocal tileinfo = LookupTileInfo(GROUND.ROCKY)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Legacy implementation, use GetTileInfo() instead"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"play-footstep",children:"PlayFootstep(inst, volume, ispredicted)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nPlays appropriate footstep sounds for an entity based on the ground tile they are standing on. Handles various conditions including creature size, riding state, ground overlays (snow, mud, creep), and special surfaces. Supports platform walking and special sound effects."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inst"})," (Entity): The entity to play footstep sound for"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"volume"})," (number, optional): Sound volume (default: 1.0)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ispredicted"})," (boolean, optional): Whether this is a predicted sound event"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns:"}),"\nNone"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Play footstep for player at normal volume\nlocal worldtiledefs = require("worldtiledefs")\nworldtiledefs.PlayFootstep(ThePlayer, 1.0, false)\n\n-- Play quieter footstep for creature\nworldtiledefs.PlayFootstep(creature_inst, 0.7, false)\n\n-- Play predicted footstep (for network optimization)\nworldtiledefs.PlayFootstep(inst, 1.0, true)\n\n-- Called automatically by locomotor component\ninst.components.locomotor:PlayFootstep()\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Sound Logic Flow:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Override Check"}),": Returns early if entity has ",(0,l.jsx)(n.code,{children:'"gelblobbed"'})," tag (plays goop sound)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Platform Check"}),": Uses platform sounds if entity is on a structure"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Tile Detection"}),": Gets tile type from locomotor component or current position"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Overlay Detection"}),": Checks for snow (>0.15), mud (wetness >15), or creep"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Road Detection"}),": For players only, checks if on road (performance optimized)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Size Suffix"}),': Applies "_small" or "_large" based on creature tags']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Sound Selection"}),": Chooses walk/run sound based on stategraph"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Special Sound Conditions:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Gel blob override (highest priority)\nif inst:HasTag("gelblobbed") then\n    sound:PlaySound("dontstarve/movement/walk_goop", nil, volume or 1, ispredicted)\n    return\nend\n\n-- Ground overlay priorities\nlocal soundpath = \n    (oncreep and "dontstarve/movement/run_web") or\n    (onsnow and tileinfo.snowsound) or  \n    (onmud and tileinfo.mudsound) or\n    nil\n\n-- Size variations\nlocal sizesuffix = \n    (size_inst:HasTag("smallcreature") and "_small") or\n    (size_inst:HasTag("largecreature") and "_large") or\n    ""\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Platform Sound Support:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Primary Sound"}),": Uses ",(0,l.jsx)(n.code,{children:"platform.walksound"})," or ",(0,l.jsx)(n.code,{children:"platform.runsound"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Secondary Sound"}),": Optional ",(0,l.jsx)(n.code,{children:"platform.second_walk_sound"})," for layered effects"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Size Variants"}),": Platform sounds support size suffixes"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Performance Optimizations:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Road Detection"}),": Only performed for players due to performance cost"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Temp Ground Tile"}),": Uses locomotor's cached tile when available"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Sound Caching"}),": Tile info retrieved through optimized cache lookup"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Version History:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Current implementation in build 676042"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,l.jsx)(n.h3,{id:"ground_properties",children:"GROUND_PROPERTIES"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nArray of tile definitions containing all ground tile types and their properties. Each entry consists of a tile type constant and its associated properties table. Used for tile information lookup and asset management."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Each entry format:\n{ GROUND.TILE_TYPE, { \n    name = "tile_name",\n    noise_texture = "path/to/texture.tex",\n    walksound = "sound/path/walk",\n    runsound = "sound/path/run",\n    snowsound = "sound/path/walk_snow", -- Optional\n    mudsound = "sound/path/walk_mud",   -- Optional\n    nogroundoverlays = false,           -- Optional\n    -- Additional properties...\n}}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Asset Integration:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Assets are automatically generated using helper functions\nfunction GroundImage(name)\n    return "levels/tiles/"..name..".tex"\nend\n\nfunction GroundAtlas(name)\n    return "levels/tiles/"..name..".xml"\nend\n\n-- AddAssets automatically processes GROUND_PROPERTIES\nlocal function AddAssets(assets, layers)\n    for i, data in ipairs(layers) do\n        local tile_type, properties = unpack(data)\n        table.insert(assets, Asset("IMAGE", properties.noise_texture))\n        table.insert(assets, Asset("IMAGE", GroundImage(properties.name)))\n        table.insert(assets, Asset("FILE", GroundAtlas(properties.name)))\n    end\nend\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Caching System:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Initialize Required"}),": Must call ",(0,l.jsx)(n.code,{children:"Initialize()"})," to populate cache"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Runtime Access"}),": Use ",(0,l.jsx)(n.code,{children:"GetTileInfo(tile)"})," for O(1) lookup"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cache Structure"}),": ",(0,l.jsx)(n.code,{children:"GROUND_PROPERTIES_CACHE[tile_type] = tile_info"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"wall_properties",children:"WALL_PROPERTIES"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),'\nDefinitions for wall tile types including cave walls, marsh walls, and other barrier tiles. All wall tiles use placeholder noise texture ("images/square.tex") and generic "walls" name.']}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Complete Wall Types:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local WALL_PROPERTIES = {\n    { GROUND.UNDERGROUND,        { name = "falloff", noise_texture = "images/square.tex" } },\n    { GROUND.WALL_MARSH,         { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_ROCKY,         { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_DIRT,          { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_CAVE,          { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_FUNGUS,        { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_SINKHOLE,      { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_MUD,           { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_TOP,           { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_WOOD,          { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_HUNESTONE_GLOW,{ name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_HUNESTONE,     { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_STONEEYE_GLOW, { name = "walls",   noise_texture = "images/square.tex" } },\n    { GROUND.WALL_STONEEYE,      { name = "walls",   noise_texture = "images/square.tex" } },\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Wall Categories:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Surface Walls"}),": ",(0,l.jsx)(n.code,{children:"WALL_MARSH"}),", ",(0,l.jsx)(n.code,{children:"WALL_ROCKY"}),", ",(0,l.jsx)(n.code,{children:"WALL_DIRT"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cave Walls"}),": ",(0,l.jsx)(n.code,{children:"WALL_CAVE"}),", ",(0,l.jsx)(n.code,{children:"WALL_FUNGUS"}),", ",(0,l.jsx)(n.code,{children:"WALL_SINKHOLE"}),", ",(0,l.jsx)(n.code,{children:"WALL_MUD"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Structure Walls"}),": ",(0,l.jsx)(n.code,{children:"WALL_TOP"}),", ",(0,l.jsx)(n.code,{children:"WALL_WOOD"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Archive Walls"}),": ",(0,l.jsx)(n.code,{children:"WALL_HUNESTONE_GLOW"}),", ",(0,l.jsx)(n.code,{children:"WALL_HUNESTONE"}),", ",(0,l.jsx)(n.code,{children:"WALL_STONEEYE_GLOW"}),", ",(0,l.jsx)(n.code,{children:"WALL_STONEEYE"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Special"}),": ",(0,l.jsx)(n.code,{children:"UNDERGROUND"}),' (uses "falloff" name instead of "walls")']}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"assets-management",children:"Assets Management"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"}),"\nThe module automatically manages texture and atlas assets for all defined tile types using helper functions."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Helper Functions:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GroundImage(name)"}),": Generates texture path for tile"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GroundAtlas(name)"}),": Generates atlas path for tile"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"AddAssets(assets, layers)"}),": Adds required assets to asset list"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"module-exports",children:"Module Exports"}),"\n",(0,l.jsx)(n.p,{children:"The module returns a table containing:"}),"\n",(0,l.jsx)(n.h3,{id:"ground-export",children:"ground"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"array"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," The complete GROUND_PROPERTIES array containing all tile definitions."]}),"\n",(0,l.jsx)(n.h3,{id:"minimap-export",children:"minimap"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Minimap-related tile properties (currently empty)."]}),"\n",(0,l.jsx)(n.h3,{id:"turf-export",children:"turf"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Turf placement definitions (currently empty)."]}),"\n",(0,l.jsx)(n.h3,{id:"falloff-export",children:"falloff"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Falloff properties for tile transitions (currently empty)."]}),"\n",(0,l.jsx)(n.h3,{id:"creep-export",children:"creep"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Ground creep overlay definitions (currently empty)."]}),"\n",(0,l.jsx)(n.h3,{id:"assets-export",children:"assets"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"array"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Asset list containing all required textures and atlases for the defined tiles."]}),"\n",(0,l.jsx)(n.h3,{id:"minimapassets-export",children:"minimapassets"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Minimap-specific assets (currently empty)."]}),"\n",(0,l.jsx)(n.h3,{id:"minimapassets-export",children:"minimapassets"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Minimap-specific assets (currently empty)."]}),"\n",(0,l.jsx)(n.h2,{id:"internal-module-structure",children:"Internal Module Structure"}),"\n",(0,l.jsx)(n.h3,{id:"ground_properties_cache",children:"GROUND_PROPERTIES_CACHE"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"table"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Status:"})," ",(0,l.jsx)(n.code,{children:"stable"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Internal cache populated by ",(0,l.jsx)(n.code,{children:"Initialize()"})," function for fast tile lookups."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- After Initialize() is called:\nGROUND_PROPERTIES_CACHE = {\n    [GROUND.GRASS] = { name = "grass", walksound = "...", ... },\n    [GROUND.ROCKY] = { name = "rocky", walksound = "...", ... },\n    -- All other tile types...\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"GroundImage(name)"}),": Returns ",(0,l.jsx)(n.code,{children:'"levels/tiles/"..name..".tex"'}),"\n",(0,l.jsx)(n.strong,{children:"GroundAtlas(name)"}),": Returns ",(0,l.jsx)(n.code,{children:'"levels/tiles/"..name..".xml"'}),"\n",(0,l.jsx)(n.strong,{children:"AddAssets(assets, layers)"}),": Processes tile definitions and adds required assets"]}),"\n",(0,l.jsx)(n.h3,{id:"legacy-properties-deprecated",children:"Legacy Properties (Deprecated)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"wall"}),": Legacy wall properties array (use WALL_PROPERTIES directly)\n",(0,l.jsx)(n.strong,{children:"underground"}),": Legacy underground layer definitions"]}),"\n",(0,l.jsx)(n.h2,{id:"sound-system-integration",children:"Sound System Integration"}),"\n",(0,l.jsx)(n.p,{children:"The footstep system integrates with multiple game systems:"}),"\n",(0,l.jsx)(n.h3,{id:"ground-overlay-detection",children:"Ground Overlay Detection"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Snow overlay conditions\nlocal onsnow = not tileinfo.nogroundoverlays and TheWorld.state.snowlevel > 0.15\n\n-- Mud overlay conditions  \nlocal onmud = not tileinfo.nogroundoverlays and TheWorld.state.wetness > 15\n\n-- Ground creep detection\nlocal oncreep = TheWorld.GroundCreep:OnCreep(x, y, z)\n\n-- Road detection (players only for performance)\nif isplayer and not oncreep and RoadManager and RoadManager:IsOnRoad(x, 0, z) then\n    tile = WORLD_TILES.ROAD\n    tileinfo = GetTileInfo(WORLD_TILES.ROAD) or tileinfo\nend\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Overlay Priority (Highest to Lowest):"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Creep"}),": Web sounds (",(0,l.jsx)(n.code,{children:'"dontstarve/movement/run_web"'}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Snow"}),": Tile-specific snow sounds (",(0,l.jsx)(n.code,{children:"tileinfo.snowsound"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Mud"}),": Tile-specific mud sounds (",(0,l.jsx)(n.code,{children:"tileinfo.mudsound"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Road"}),": Special road tile sounds (players only)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": Standard tile walk/run sounds"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"creature-size-categories",children:"Creature Size Categories"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Size detection logic\nlocal size_inst = inst\nlocal isplayer = inst:HasTag("player")\n\n-- Check if player is riding (use mount\'s size instead)\nif isplayer then\n    local rider = inst.components.rider or inst.replica.rider\n    if rider ~= nil and rider:IsRiding() then\n        size_inst = rider:GetMount() or inst\n    end\nend\n\n-- Size suffix determination\nlocal sizesuffix = \n    (size_inst:HasTag("smallcreature") and "_small") or\n    (size_inst:HasTag("largecreature") and "_large") or\n    ""\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Size Categories:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Small Creatures"}),": ",(0,l.jsx)(n.code,{children:'"smallcreature"'}),' tag \u2192 "_small" sound suffix']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Large Creatures"}),": ",(0,l.jsx)(n.code,{children:'"largecreature"'}),' tag \u2192 "_large" sound suffix']}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Normal Size"}),": No suffix applied"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Rider Override"}),": Players use their mount's size category when riding"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"special-conditions",children:"Special Conditions"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Gel Blob"}),": Overrides normal footsteps with goop sounds"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Riding"}),": Uses mount's size category instead of rider's"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Platform Walking"}),": Uses platform-specific sound sets"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Rope Bridge"}),": Commented legacy system for parameterized sounds"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,l.jsx)(n.h3,{id:"tile-info-caching",children:"Tile Info Caching"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Initialize"}),": Call ",(0,l.jsx)(n.code,{children:"Initialize()"})," once during game startup"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Runtime Lookups"}),": Use ",(0,l.jsx)(n.code,{children:"GetTileInfo()"})," for O(1) cached access"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Avoid Legacy"}),": Don't use ",(0,l.jsx)(n.code,{children:"LookupTileInfo()"})," in performance-critical code"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"asset-loading",children:"Asset Loading"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"All tile assets are pre-declared during module loading"}),"\n",(0,l.jsx)(n.li,{children:"Textures and atlases are automatically included in the asset manifest"}),"\n",(0,l.jsx)(n.li,{children:"No runtime asset loading required for standard tiles"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,l.jsx)(n.h3,{id:"custom-tile-definition",children:"Custom Tile Definition"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Add custom tile to GROUND_PROPERTIES\ntable.insert(GROUND_PROPERTIES, {\n    GROUND.CUSTOM_TILE, {\n        name = "custom_ground",\n        noise_texture = "levels/textures/custom_noise.tex",\n        walksound = "dontstarve/movement/walk_custom",\n        runsound = "dontstarve/movement/run_custom",\n        snowsound = "dontstarve/movement/walk_custom_snow",\n        mudsound = "dontstarve/movement/walk_custom_mud"\n    }\n})\n'})}),"\n",(0,l.jsx)(n.h3,{id:"tile-based-gameplay-logic",children:"Tile-Based Gameplay Logic"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local function OnPlayerStep(inst)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    local tile = TheWorld.Map:GetTileAtPoint(x, y, z)\n    local tileinfo = GetTileInfo(tile)\n    \n    if tileinfo then\n        -- Apply tile-specific effects\n        if tile == GROUND.MARSH then\n            -- Slow movement in marsh\n            inst.components.locomotor:SetExternalSpeedMultiplier(inst, "marsh", 0.7)\n        else\n            -- Remove marsh slowdown\n            inst.components.locomotor:RemoveExternalSpeedMultiplier(inst, "marsh")\n        end\n    end\nend\n'})}),"\n",(0,l.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./constants.md",children:(0,l.jsx)(n.code,{children:"constants"})}),": Defines GROUND tile type constants"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"./gamelogic.md",children:(0,l.jsx)(n.code,{children:"gamelogic"})}),": Calls Initialize() during game startup"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"../components/locomotor.md",children:(0,l.jsx)(n.code,{children:"locomotor"})}),": Uses TempGroundTile() for movement sounds"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"../map/index.md",children:(0,l.jsx)(n.code,{children:"map"})}),": Provides tile type lookups for world positions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);