"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[163],{6790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-vanilla/core/particle-effects","title":"Particle Effects System","description":"Don\'t Starve Together\'s particle effects system allows mod creators to add visual effects like fire, smoke, electricity, and environmental effects to their creations. This document explains how to work with the particle system to create engaging visual effects.","source":"@site/docs/api-vanilla/core/particle-effects.md","sourceDirName":"api-vanilla/core","slug":"/api-vanilla/core/particle-effects","permalink":"/dst-api-webdocs/docs/api-vanilla/core/particle-effects","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":19,"frontMatter":{"id":"particle-effects","title":"Particle Effects System","sidebar_position":19}}');var r=n(4848),a=n(8453);const s={id:"particle-effects",title:"Particle Effects System",sidebar_position:19},l="Particle Effects System",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Basic Particle Setup",id:"basic-particle-setup",level:2},{value:"Creating Advanced Particle Effects",id:"creating-advanced-particle-effects",level:2},{value:"Using the Particle Emitter",id:"using-the-particle-emitter",level:3},{value:"Color and Scale Envelopes",id:"color-and-scale-envelopes",level:3},{value:"Using Forces",id:"using-forces",level:3},{value:"Common Effect Types",id:"common-effect-types",level:2},{value:"Fire Effect",id:"fire-effect",level:3},{value:"Smoke Effect",id:"smoke-effect",level:3},{value:"Electrical Effect",id:"electrical-effect",level:3},{value:"Special Effects Using Particle Systems",id:"special-effects-using-particle-systems",level:2},{value:"Rain Splash Effect",id:"rain-splash-effect",level:3},{value:"Snow Effect",id:"snow-effect",level:3},{value:"Magic Aura Effect",id:"magic-aura-effect",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Integration with Other Systems",id:"integration-with-other-systems",level:2},{value:"Weather System Integration",id:"weather-system-integration",level:3},{value:"Combat System Integration",id:"combat-system-integration",level:3},{value:"See also",id:"see-also",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"particle-effects-system",children:"Particle Effects System"})}),"\n",(0,r.jsx)(t.p,{children:"Don't Starve Together's particle effects system allows mod creators to add visual effects like fire, smoke, electricity, and environmental effects to their creations. This document explains how to work with the particle system to create engaging visual effects."}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(t.p,{children:"The particle effects system in DST is composed of several key components:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Particle Emitters"}),": The source that generates particles"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Particle Types"}),": Different visual appearances for particles"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Parameters"}),": Controls for size, color, lifetime, etc."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Behaviors"}),": How particles move and change over time"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Events"}),": Triggers for spawning or modifying particles"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"basic-particle-setup",children:"Basic Particle Setup"}),"\n",(0,r.jsx)(t.p,{children:"Here's a basic example of creating a simple particle effect:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'-- In scripts/prefabs/my_particle_effect.lua\nlocal assets = {\n    Asset("ANIM", "anim/smoke_puff.zip"),\n}\n\nlocal function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddAnimState()\n    inst.entity:AddNetwork()\n    \n    -- Important for effects\n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    inst:AddTag("NOBLOCK")\n    \n    -- Basic animation setup\n    inst.AnimState:SetBank("smoke_puff")\n    inst.AnimState:SetBuild("smoke_puff")\n    inst.AnimState:PlayAnimation("puff")\n    inst.AnimState:SetAddColour(0, 0, 0, 0)\n    \n    -- Set render queue to ensure it appears above most objects\n    inst.AnimState:SetRenderOrder(1)\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Remove when animation finishes\n    inst:ListenForEvent("animover", inst.Remove)\n    \n    -- Don\'t save this effect\n    inst.persists = false\n    \n    return inst\nend\n\nreturn Prefab("my_particle_effect", fn, assets)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"creating-advanced-particle-effects",children:"Creating Advanced Particle Effects"}),"\n",(0,r.jsx)(t.h3,{id:"using-the-particle-emitter",children:"Using the Particle Emitter"}),"\n",(0,r.jsx)(t.p,{children:"For more complex effects, DST provides a particle emitter component:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local function fn()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddNetwork()\n    \n    -- Add a particle emitter\n    inst.entity:AddParticleEmitter()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    -- Configure the particle emitter\n    local emitter = inst.entity:GetParticleEmitter()\n    \n    -- Set basic parameters\n    emitter:SetRenderResources("images/fx/smoke_puff.tex", "rectangular") -- Texture and shader\n    emitter:SetMaxNumParticles(20) -- Maximum particles at once\n    emitter:SetMaxLifetime(2) -- Maximum particle lifetime\n    emitter:SetColourEnvelope(0) -- Use color envelope 0\n    emitter:SetScaleEnvelope(1) -- Use scale envelope 1\n    emitter:SetBlendMode(BLENDMODE.AlphaBlended) -- Blend mode\n    emitter:EnableDepthTest(true) -- Test against scene depth\n    \n    -- Set color evolution over particle lifetime (envelope 0)\n    emitter:AddColourEnvelope(0, \n        {\n            { 0, 1, 1, 1, 1 }, -- Time 0: White with full alpha\n            { 0.5, 1, 1, 1, 0.5 }, -- Time 0.5: White with half alpha\n            { 1, 1, 1, 1, 0 } -- Time 1: White with zero alpha (fade out)\n        }\n    )\n    \n    -- Set size evolution (envelope 1)\n    emitter:AddScaleEnvelope(1, \n        {\n            { 0, 0.5 }, -- Start at half size\n            { 0.5, 1 }, -- Grow to full size\n            { 1, 0.75 } -- Shrink slightly at end\n        }\n    )\n    \n    -- Set rotation parameters\n    emitter:SetRotationStatus(true) -- Enable rotation\n    emitter:SetRotationRateStatus(true)\n    emitter:SetRotationRate(2) -- Rotate at 2 radians per second\n    \n    -- Set emission parameters\n    emitter:SetRadius(0.1) -- Emit within this radius\n    emitter:SetEmissionRate(10) -- Particles per second\n    \n    -- Set velocities\n    emitter:SetParticleRotation(0) -- Initial rotation\n    emitter:SetVelocity(0, 1, 0) -- Up direction\n    emitter:SetVelocitySpread(0.5) -- Random variance\n    \n    -- Don\'t save in world\n    inst.persists = false\n    \n    -- Auto-remove after some time\n    inst:DoTaskInTime(3, inst.Remove)\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(t.h3,{id:"color-and-scale-envelopes",children:"Color and Scale Envelopes"}),"\n",(0,r.jsx)(t.p,{children:"Envelopes control how particles change over their lifetime:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"-- Complex color transitions\nemitter:AddColourEnvelope(0, \n    {\n        { 0, 1, 0, 0, 1 },     -- Start red\n        { 0.3, 1, 0.5, 0, 1 },  -- Shift to orange\n        { 0.6, 1, 1, 0, 0.8 },  -- Shift to yellow\n        { 1, 1, 1, 1, 0 }      -- End white and fade out\n    }\n)\n\n-- Multiple scale envelopes for different effects\nemitter:AddScaleEnvelope(0, \n    {\n        { 0, 0.1 },  -- Start tiny\n        { 0.2, 1 },  -- Quickly grow to full size\n        { 0.8, 1 },  -- Maintain size\n        { 1, 0 }     -- Shrink to nothing at end\n    }\n)\n\nemitter:AddScaleEnvelope(1, \n    {\n        { 0, 0.5 },  -- Start at half size\n        { 1, 2 }     -- Grow to double size\n    }\n)\n"})}),"\n",(0,r.jsx)(t.h3,{id:"using-forces",children:"Using Forces"}),"\n",(0,r.jsx)(t.p,{children:"You can apply forces to particles for more dynamic effects:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"-- Apply gravity to particles\nemitter:SetAcceleration(0, -9.8, 0)\n\n-- Apply drag/air resistance\nemitter:SetDragCoefficient(0.2)\n"})}),"\n",(0,r.jsx)(t.h2,{id:"common-effect-types",children:"Common Effect Types"}),"\n",(0,r.jsx)(t.h3,{id:"fire-effect",children:"Fire Effect"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local function CreateFireEffect()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddLight()\n    inst.entity:AddParticleEmitter()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOBLOCK")\n    \n    -- Add light\n    inst.Light:SetFalloff(0.5)\n    inst.Light:SetIntensity(0.75)\n    inst.Light:SetRadius(2)\n    inst.Light:SetColour(1, 0.7, 0.3)\n    inst.Light:Enable(true)\n    \n    -- Configure particles\n    local emitter = inst.entity:GetParticleEmitter()\n    emitter:SetRenderResources("images/fx/fire.tex", "premultiplied")\n    emitter:SetMaxNumParticles(12)\n    emitter:SetMaxLifetime(0.6)\n    emitter:SetColourEnvelope(0)\n    emitter:SetScaleEnvelope(0)\n    emitter:SetBlendMode(BLENDMODE.AlphaBlended)\n    emitter:EnableDepthTest(false)\n    \n    emitter:AddColourEnvelope(0, \n        {\n            { 0, 1, 0.3, 0, 1 },\n            { 0.2, 1, 0.5, 0, 1 },\n            { 0.4, 1, 0.7, 0, 1 },\n            { 1, 1, 1, 0, 0.5 }\n        }\n    )\n    \n    emitter:AddScaleEnvelope(0,\n        {\n            { 0, 0.5 },\n            { 0.1, 1 },\n            { 1, 0 }\n        }\n    )\n    \n    emitter:SetEmissionRate(25)\n    emitter:SetVelocity(0, 2, 0)\n    emitter:SetVelocitySpread(0.2)\n    \n    -- Add upward acceleration like real fire\n    emitter:SetAcceleration(0, 1, 0)\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(t.h3,{id:"smoke-effect",children:"Smoke Effect"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local function CreateSmokeEffect()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddParticleEmitter()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOBLOCK")\n    \n    local emitter = inst.entity:GetParticleEmitter()\n    emitter:SetRenderResources("images/fx/smoke.tex", "rectangular")\n    emitter:SetMaxNumParticles(15)\n    emitter:SetMaxLifetime(3)\n    emitter:SetColourEnvelope(0)\n    emitter:SetScaleEnvelope(0)\n    emitter:SetBlendMode(BLENDMODE.AlphaBlended)\n    \n    emitter:AddColourEnvelope(0, \n        {\n            { 0, 0.5, 0.5, 0.5, 0.5 },\n            { 0.2, 0.5, 0.5, 0.5, 0.4 },\n            { 1, 0.5, 0.5, 0.5, 0 }\n        }\n    )\n    \n    emitter:AddScaleEnvelope(0, \n        {\n            { 0, 0.1 },\n            { 0.3, 0.5 },\n            { 1, 1 }\n        }\n    )\n    \n    -- Slower emission for smoke\n    emitter:SetEmissionRate(5)\n    \n    -- Rise slowly\n    emitter:SetVelocity(0, 1, 0)\n    emitter:SetVelocitySpread(0.5)\n    \n    -- Rotate smoke particles\n    emitter:SetRotationStatus(true)\n    emitter:SetRotationRateStatus(true)\n    emitter:SetRotationRate(0.2)\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(t.h3,{id:"electrical-effect",children:"Electrical Effect"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local function CreateElectricalEffect()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddLight()\n    inst.entity:AddParticleEmitter()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOBLOCK")\n    \n    -- Flickering light\n    inst.Light:SetFalloff(0.7)\n    inst.Light:SetIntensity(0.8)\n    inst.Light:SetRadius(1.5)\n    inst.Light:SetColour(0.5, 0.7, 1)\n    inst.Light:Enable(true)\n    \n    local emitter = inst.entity:GetParticleEmitter()\n    emitter:SetRenderResources("images/fx/electric.tex", "additive")\n    emitter:SetMaxNumParticles(10)\n    emitter:SetMaxLifetime(0.3)\n    emitter:SetColourEnvelope(0)\n    emitter:SetScaleEnvelope(0)\n    emitter:SetBlendMode(BLENDMODE.Additive)\n    \n    -- Blue-white electric color\n    emitter:AddColourEnvelope(0, \n        {\n            { 0, 0.7, 0.8, 1, 1 },\n            { 0.5, 0.5, 0.7, 1, 1 },\n            { 1, 0.3, 0.5, 1, 0 }\n        }\n    )\n    \n    emitter:AddScaleEnvelope(0, \n        {\n            { 0, 0.5 },\n            { 0.2, 1 },\n            { 1, 0 }\n        }\n    )\n    \n    -- Fast and erratic emission for electricity\n    emitter:SetEmissionRate(30)\n    emitter:SetVelocitySpread(2)\n    \n    -- Make the light flicker\n    inst:DoPeriodicTask(0.05, function()\n        inst.Light:SetIntensity(0.5 + math.random() * 0.5)\n    end)\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(t.h2,{id:"special-effects-using-particle-systems",children:"Special Effects Using Particle Systems"}),"\n",(0,r.jsx)(t.h3,{id:"rain-splash-effect",children:"Rain Splash Effect"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local function CreateRainSplash()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddParticleEmitter()\n    inst.entity:AddNetwork()\n    inst.entity:AddSoundEmitter()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOCLICK")\n    \n    inst.entity:SetPristine()\n    \n    if not TheWorld.ismastersim then\n        return inst\n    end\n    \n    local emitter = inst.entity:GetParticleEmitter()\n    emitter:SetRenderResources("images/fx/rainsplash.tex", "rectangular")\n    emitter:SetMaxNumParticles(1) -- Just one splash\n    emitter:SetMaxLifetime(0.35)\n    emitter:SetColourEnvelope(0)\n    emitter:SetScaleEnvelope(0)\n    emitter:SetBlendMode(BLENDMODE.AlphaBlended)\n    emitter:EnableDepthTest(true)\n    \n    -- White, fading out\n    emitter:AddColourEnvelope(0, \n        {\n            { 0, 1, 1, 1, 0.5 },\n            { 1, 1, 1, 1, 0 }\n        }\n    )\n    \n    -- Start small, expand outward\n    emitter:AddScaleEnvelope(0, \n        {\n            { 0, 0.1 },\n            { 1, 0.5 }\n        }\n    )\n    \n    -- Emit just one particle\n    emitter:SetEmissionRate(10)\n    emitter:SetMaxEmissionTime(0.1)\n    \n    -- Play a splash sound\n    inst.SoundEmitter:PlaySound("dontstarve/rain/raindrop")\n    \n    -- Remove after effect is done\n    inst:DoTaskInTime(0.5, inst.Remove)\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(t.h3,{id:"snow-effect",children:"Snow Effect"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local function CreateSnowSystem()\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddParticleEmitter()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOBLOCK")\n    \n    local emitter = inst.entity:GetParticleEmitter()\n    emitter:SetRenderResources("images/fx/snowflake.tex", "rectangular")\n    emitter:SetMaxNumParticles(1000)\n    emitter:SetMaxLifetime(15)\n    emitter:SetColourEnvelope(0)\n    emitter:SetScaleEnvelope(0)\n    emitter:SetBlendMode(BLENDMODE.AlphaBlended)\n    emitter:EnableDepthTest(true)\n    \n    -- White snowflakes\n    emitter:AddColourEnvelope(0, \n        {\n            { 0, 1, 1, 1, 0.5 }, \n            { 0.8, 1, 1, 1, 0.5 },\n            { 1, 1, 1, 1, 0 }\n        }\n    )\n    \n    -- Varied snowflake sizes\n    emitter:AddScaleEnvelope(0, \n        {\n            { 0, 0.2 + math.random() * 0.2 },\n            { 1, 0.2 + math.random() * 0.2 }\n        }\n    )\n    \n    -- Very wide emission area\n    emitter:SetSpawnVectors(30, 5, 30)\n    emitter:SetEmissionRate(50)\n    \n    -- Slow falling with some horizontal drift\n    emitter:SetVelocity(0.2, -0.5, 0.2)\n    emitter:SetVelocitySpread(1)\n    \n    -- Rotate snowflakes\n    emitter:SetRotationStatus(true)\n    emitter:SetRotationRateStatus(true)\n    emitter:SetRotationRate(0.5)\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(t.h3,{id:"magic-aura-effect",children:"Magic Aura Effect"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local function CreateMagicAura(target)\n    local inst = CreateEntity()\n    \n    inst.entity:AddTransform()\n    inst.entity:AddParticleEmitter()\n    inst.entity:AddFollower()\n    inst.entity:AddNetwork()\n    \n    inst:AddTag("FX")\n    inst:AddTag("NOBLOCK")\n    \n    -- Follow the target entity\n    if target ~= nil then\n        inst.Follower:FollowSymbol(target.GUID, "body", 0, 0, 0)\n    end\n    \n    local emitter = inst.entity:GetParticleEmitter()\n    emitter:SetRenderResources("images/fx/sparkle.tex", "additive")\n    emitter:SetMaxNumParticles(30)\n    emitter:SetMaxLifetime(2)\n    emitter:SetColourEnvelope(0)\n    emitter:SetScaleEnvelope(0)\n    emitter:SetBlendMode(BLENDMODE.Additive)\n    \n    -- Purple magic color\n    emitter:AddColourEnvelope(0, \n        {\n            { 0, 0.7, 0, 1, 0 },\n            { 0.1, 0.7, 0, 1, 1 },\n            { 0.8, 0.7, 0, 1, 0.8 },\n            { 1, 0.7, 0, 1, 0 }\n        }\n    )\n    \n    emitter:AddScaleEnvelope(0, \n        {\n            { 0, 0 },\n            { 0.1, 0.2 },\n            { 0.8, 0.2 },\n            { 1, 0 }\n        }\n    )\n    \n    -- Emit in a spherical pattern around the target\n    emitter:SetSphereEmitter(0.8)\n    emitter:SetEmissionRate(15)\n    \n    -- Particles orbit around target\n    emitter:SetOwnerVelocity(true)\n    \n    -- Set a random motion for each particle\n    emitter:SetRandomVelocity(3)\n    \n    return inst\nend\n'})}),"\n",(0,r.jsx)(t.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(t.p,{children:"When working with particle effects, keep these performance tips in mind:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Particle Count"}),": Limit the maximum number of particles"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"emitter:SetMaxNumParticles(30) -- Keep this reasonable\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Lifetime"}),": Use appropriate lifetimes for effects"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"emitter:SetMaxLifetime(2) -- 2 seconds is often sufficient\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Emission Rate"}),": Control how many particles spawn per second"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"emitter:SetEmissionRate(10) -- Lower is better for performance\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"LOD (Level of Detail)"}),": Reduce particles at distance"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"emitter:EnableDistanceLOD(true)\nemitter:SetDistanceLODParams(10, 20) -- Start reducing at 10, none by 20\n"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Cleanup"}),": Always remove effects when no longer needed"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"inst:DoTaskInTime(3, inst.Remove)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"integration-with-other-systems",children:"Integration with Other Systems"}),"\n",(0,r.jsx)(t.h3,{id:"weather-system-integration",children:"Weather System Integration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'-- Integrate particle effects with the weather system\nlocal function UpdateWeatherParticles(inst)\n    local emitter = inst.entity:GetParticleEmitter()\n    \n    if TheWorld.state.israining then\n        -- More particles during rain\n        emitter:SetEmissionRate(30)\n        -- Faster particles\n        emitter:SetAcceleration(0, -12, 0)\n    elseif TheWorld.state.issnowing then\n        -- Switch to snow particles\n        emitter:SetRenderResources("images/fx/snowflake.tex", "rectangular")\n        -- Different motion for snow\n        emitter:SetAcceleration(0, -2, 0)\n        emitter:SetVelocitySpread(2)\n    else\n        -- Default state\n        emitter:SetEmissionRate(10)\n        emitter:SetAcceleration(0, -9.8, 0)\n    end\nend\n\n-- Watch for weather changes\ninst:WatchWorldState("israining", UpdateWeatherParticles)\ninst:WatchWorldState("issnowing", UpdateWeatherParticles)\n'})}),"\n",(0,r.jsx)(t.h3,{id:"combat-system-integration",children:"Combat System Integration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'-- Create hit effect when attacked\nlocal function OnAttacked(inst, data)\n    local x, y, z = inst.Transform:GetWorldPosition()\n    \n    local fx = SpawnPrefab("hit_sparks")\n    fx.Transform:SetPosition(x, y + 1, z)\n    \n    -- Point particles in direction away from attacker\n    if data.attacker ~= nil then\n        local angle = inst:GetAngleToPoint(data.attacker.Transform:GetWorldPosition())\n        fx.Transform:SetRotation(angle)\n    end\nend\n\ninst:ListenForEvent("attacked", OnAttacked)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"/dst-api-webdocs/docs/api-vanilla/examples/custom-weather-effects",children:"Custom Weather Effects"})," - For more complex weather implementations"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/stategraph-system",children:"Stategraph System"})," - For animation state management"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"/dst-api-webdocs/docs/api-vanilla/components/other-components",children:"Light Component"})," - For adding light to particle effects"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"/dst-api-webdocs/docs/api-vanilla/core/sound-system",children:"Sound System"})," - For adding audio to effects"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"By mastering the particle system in Don't Starve Together, you can create visually impressive effects that enhance the atmosphere and feedback in your mods."})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var i=n(6540);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);