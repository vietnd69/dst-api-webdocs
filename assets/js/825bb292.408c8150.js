"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[7297],{2601:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"api-vanilla/stategraphs/actionhandlers","title":"Action Handlers","description":"Action handlers are a key component of the stategraph system that allows entities to respond to gameplay actions initiated by players or AI. They provide a way to define how an entity should respond when someone attempts to perform an action on it or when it needs to perform an action itself.","source":"@site/docs/api-vanilla/stategraphs/actionhandlers.md","sourceDirName":"api-vanilla/stategraphs","slug":"/api-vanilla/stategraphs/actionhandlers","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/actionhandlers","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"actionhandlers","title":"Action Handlers","sidebar_position":4},"sidebar":"docs","previous":{"title":"Stategraph Events","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/events"},"next":{"title":"Common States","permalink":"/dst-api-webdocs/docs/api-vanilla/stategraphs/commonstates"}}');var i=t(4848),s=t(8453);const o={id:"actionhandlers",title:"Action Handlers",sidebar_position:4},r="Action Handlers",c={},l=[{value:"Creating Action Handlers",id:"creating-action-handlers",level:2},{value:"Action Handler Structure",id:"action-handler-structure",level:2},{value:"Common Action Types",id:"common-action-types",level:2},{value:"Example: Creating Action Handlers",id:"example-creating-action-handlers",level:2},{value:"Adding Action Handlers to a Stategraph",id:"adding-action-handlers-to-a-stategraph",level:2},{value:"Destination State Logic",id:"destination-state-logic",level:2},{value:"Action Data",id:"action-data",level:2},{value:"Using Destination State",id:"using-destination-state",level:2},{value:"Conditionally Handling Actions",id:"conditionally-handling-actions",level:2},{value:"Interrupting Current State",id:"interrupting-current-state",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"action-handlers",children:"Action Handlers"})}),"\n",(0,i.jsx)(e.p,{children:"Action handlers are a key component of the stategraph system that allows entities to respond to gameplay actions initiated by players or AI. They provide a way to define how an entity should respond when someone attempts to perform an action on it or when it needs to perform an action itself."}),"\n",(0,i.jsx)(e.h2,{id:"creating-action-handlers",children:"Creating Action Handlers"}),"\n",(0,i.jsxs)(e.p,{children:["Action handlers are created using the ",(0,i.jsx)(e.code,{children:"ActionHandler"})," constructor:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'ActionHandler(ACTIONS.EAT, function(inst, action)\n    if action.target and action.target:HasTag("food") then\n        inst.sg:GoToState("eat", action.target)\n        return true\n    end\n    return false\nend)\n'})}),"\n",(0,i.jsxs)(e.p,{children:["The function returns ",(0,i.jsx)(e.code,{children:"true"})," if the action is handled successfully, or ",(0,i.jsx)(e.code,{children:"false"})," if it should fall back to default handling."]}),"\n",(0,i.jsx)(e.h2,{id:"action-handler-structure",children:"Action Handler Structure"}),"\n",(0,i.jsx)(e.p,{children:"The basic structure of an action handler includes:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["The action type (from ",(0,i.jsx)(e.code,{children:"ACTIONS"})," table)"]}),"\n",(0,i.jsxs)(e.li,{children:["A handler function that receives:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"inst"}),": The entity performing the action"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"action"}),": The action being performed"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"common-action-types",children:"Common Action Types"}),"\n",(0,i.jsxs)(e.p,{children:["Here are some common action types defined in ",(0,i.jsx)(e.code,{children:"ACTIONS"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ACTIONS.ATTACK"}),": Attack a target"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ACTIONS.EAT"}),": Eat food"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ACTIONS.PICKUP"}),": Pick up an item"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ACTIONS.CHOP"}),": Chop a tree"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ACTIONS.MINE"}),": Mine a rock"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ACTIONS.DIG"}),": Dig up an object"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ACTIONS.HARVEST"}),": Harvest a resource"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ACTIONS.WALKTO"}),": Walk to a location"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"example-creating-action-handlers",children:"Example: Creating Action Handlers"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'local actionhandlers = {\n    ActionHandler(ACTIONS.EAT, function(inst, action)\n        inst.sg:GoToState("eat", action.target)\n        return true\n    end),\n    \n    ActionHandler(ACTIONS.PICKUP, function(inst, action)\n        inst.sg:GoToState("pickup")\n        return true\n    end),\n    \n    ActionHandler(ACTIONS.ATTACK, function(inst, action)\n        if not inst.components.health:IsDead() then\n            inst.sg:GoToState("attack", action.target)\n            return true\n        end\n        return false\n    end),\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"adding-action-handlers-to-a-stategraph",children:"Adding Action Handlers to a Stategraph"}),"\n",(0,i.jsx)(e.p,{children:"Action handlers are passed as the fifth parameter when creating a StateGraph:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'return StateGraph("myentity", states, events, "idle", actionhandlers)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"destination-state-logic",children:"Destination State Logic"}),"\n",(0,i.jsx)(e.p,{children:"Action handlers often need to transition the entity to a state that will perform the action:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'ActionHandler(ACTIONS.CHOP, function(inst, action)\n    if not inst.sg:HasStateTag("busy") then\n        inst.sg:GoToState("chop", action.target)\n        return true\n    end\n    return false\nend)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"action-data",children:"Action Data"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"action"})," parameter provides information about the action being performed:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"action.target"}),": The target entity of the action"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"action.doer"}),": The entity performing the action"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"action.pos"}),": The position where the action is being performed"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"action.distance"}),": The distance at which the action can be performed"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"using-destination-state",children:"Using Destination State"}),"\n",(0,i.jsx)(e.p,{children:"You can pass data to the destination state to use in that state's logic:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'ActionHandler(ACTIONS.ATTACK, function(inst, action)\n    inst.sg:GoToState("attack", {\n        target = action.target,\n        weapon = inst.components.combat:GetWeapon()\n    })\n    return true\nend)\n'})}),"\n",(0,i.jsx)(e.p,{children:"Then, in the destination state:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'State{\n    name = "attack",\n    onenter = function(inst, data)\n        inst.sg.statemem.target = data.target\n        inst.sg.statemem.weapon = data.weapon\n        inst.AnimState:PlayAnimation("attack")\n    end,\n    \n    timeline = {\n        TimeEvent(10*FRAMES, function(inst)\n            inst.components.combat:DoAttack(inst.sg.statemem.target, inst.sg.statemem.weapon)\n        end),\n    },\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"conditionally-handling-actions",children:"Conditionally Handling Actions"}),"\n",(0,i.jsx)(e.p,{children:"Action handlers can conditionally choose whether to handle an action:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'ActionHandler(ACTIONS.PICKUP, function(inst, action)\n    -- Only handle the action if the entity isn\'t busy\n    if not inst.sg:HasStateTag("busy") then\n        -- Only pick up food items\n        if action.target and action.target:HasTag("food") then\n            inst.sg:GoToState("pickup", action.target)\n            return true\n        end\n    end\n    return false\nend)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"interrupting-current-state",children:"Interrupting Current State"}),"\n",(0,i.jsx)(e.p,{children:"Action handlers can choose to interrupt the current state based on conditions:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'ActionHandler(ACTIONS.ATTACK, function(inst, action)\n    -- Allow attacking from idle or if currently doing something interruptible\n    if inst.sg:HasStateTag("idle") or inst.sg:HasStateTag("caninterrupt") then\n        inst.sg:GoToState("attack")\n        return true\n    end\n    return false\nend) \n'})})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var a=t(6540);const i={},s=a.createContext(i);function o(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);