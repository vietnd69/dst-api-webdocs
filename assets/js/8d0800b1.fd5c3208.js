"use strict";(self.webpackChunkdst_api_webdocs=self.webpackChunkdst_api_webdocs||[]).push([[77096],{28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>d});var i=n(96540);const r={},a=i.createContext(r);function t(e){const s=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:s},e.children)}},95297:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"game-scripts/core-systems/data-management/saves/saves-overview","title":"Saves Overview","description":"Overview of save data management and persistence infrastructure in DST API","source":"@site/docs/game-scripts/core-systems/data-management/saves/index.md","sourceDirName":"game-scripts/core-systems/data-management/saves","slug":"/game-scripts/core-systems/data-management/saves/","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"id":"saves-overview","title":"Saves Overview","description":"Overview of save data management and persistence infrastructure in DST API","sidebar_position":0,"last_updated":"2025-06-21T00:00:00.000Z","build_version":676042,"change_status":"stable","category_type":"infrastructure-system","system_scope":"save data persistence, migration, and cluster management"},"sidebar":"docs","previous":{"title":"Preload Sounds","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/assets/preloadsounds"},"next":{"title":"Saves Overview","permalink":"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/"}}');var r=n(74848),a=n(28453);const t={id:"saves-overview",title:"Saves Overview",description:"Overview of save data management and persistence infrastructure in DST API",sidebar_position:0,last_updated:new Date("2025-06-21T00:00:00.000Z"),build_version:676042,change_status:"stable",category_type:"infrastructure-system",system_scope:"save data persistence, migration, and cluster management"},d="Saves Overview",c={},l=[{value:"Build Information",id:"build-information",level:2},{value:"System Purpose",id:"system-purpose",level:2},{value:"Key Responsibilities",id:"key-responsibilities",level:3},{value:"System Scope",id:"system-scope",level:3},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"System Components",id:"system-components",level:3},{value:"Data Flow",id:"data-flow",level:3},{value:"Integration Points",id:"integration-points",level:3},{value:"Recent Changes",id:"recent-changes",level:2},{value:"Core Save Modules",id:"core-save-modules",level:2},{value:"Save Slot Management",id:"save-slot-management",level:3},{value:"Multi-Shard Coordination",id:"multi-shard-coordination",level:3},{value:"Data Migration Infrastructure",id:"data-migration-infrastructure",level:3},{value:"Discovery Tracking",id:"discovery-tracking",level:3},{value:"Common Infrastructure Patterns",id:"common-infrastructure-patterns",level:2},{value:"Save Slot Operations",id:"save-slot-operations",level:3},{value:"Multi-Shard Management",id:"multi-shard-management",level:3},{value:"Data Migration",id:"data-migration",level:3},{value:"Discovery Progress",id:"discovery-progress",level:3},{value:"Infrastructure Dependencies",id:"infrastructure-dependencies",level:2},{value:"Required Systems",id:"required-systems",level:3},{value:"Optional Systems",id:"optional-systems",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"System Performance",id:"system-performance",level:3},{value:"Resource Usage",id:"resource-usage",level:3},{value:"Scaling Characteristics",id:"scaling-characteristics",level:3},{value:"Development Guidelines",id:"development-guidelines",level:2},{value:"Best Practices",id:"best-practices",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:3},{value:"Testing Strategies",id:"testing-strategies",level:3},{value:"Related Systems",id:"related-systems",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Infrastructure Issues",id:"common-infrastructure-issues",level:3},{value:"Debugging Infrastructure",id:"debugging-infrastructure",level:3},{value:"Data Format Versioning",id:"data-format-versioning",level:2},{value:"Version Management",id:"version-management",level:3},{value:"Upgrade Sequence",id:"upgrade-sequence",level:3},{value:"Cluster Architecture",id:"cluster-architecture",level:2},{value:"Shard Types",id:"shard-types",level:3},{value:"Coordination Patterns",id:"coordination-patterns",level:3},{value:"Security and Integrity",id:"security-and-integrity",level:2},{value:"Data Validation",id:"data-validation",level:3},{value:"Backup and Recovery",id:"backup-and-recovery",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:2},{value:"Key Metrics",id:"key-metrics",level:3},{value:"Optimization Strategies",id:"optimization-strategies",level:3},{value:"Future Development",id:"future-development",level:2},{value:"Extensibility Design",id:"extensibility-design",level:3},{value:"Integration Planning",id:"integration-planning",level:3}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"saves-overview",children:"Saves Overview"})}),"\n",(0,r.jsx)(s.h2,{id:"build-information",children:"Build Information"}),"\n",(0,r.jsxs)(s.p,{children:["Current documentation based on build version: ",(0,r.jsx)(s.strong,{children:"676042"}),"\nLast updated: ",(0,r.jsx)(s.strong,{children:"2025-06-21"})]}),"\n",(0,r.jsx)(s.h2,{id:"system-purpose",children:"System Purpose"}),"\n",(0,r.jsx)(s.p,{children:"The Saves infrastructure category provides comprehensive save data management, persistence, and migration capabilities for Don't Starve Together. These systems handle the critical low-level operations that enable reliable game state preservation, backward compatibility through data migration, multi-shard cluster coordination, and player progress tracking across game sessions."}),"\n",(0,r.jsx)(s.h3,{id:"key-responsibilities",children:"Key Responsibilities"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Save game slot management and session coordination across single and multi-shard configurations"}),"\n",(0,r.jsx)(s.li,{children:"Automated save data migration and upgrade systems for maintaining compatibility across game versions"}),"\n",(0,r.jsx)(s.li,{children:"Player discovery and progress tracking with efficient data synchronization and backend integration"}),"\n",(0,r.jsx)(s.li,{children:"Cluster-aware save operations supporting Master/Caves shard coordination and data consistency"}),"\n",(0,r.jsx)(s.li,{children:"Legacy save format conversion and error recovery for seamless user experience"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"system-scope",children:"System Scope"}),"\n",(0,r.jsx)(s.p,{children:"This infrastructure category includes all save data persistence, migration, and coordination systems but excludes high-level game logic and user interface components."}),"\n",(0,r.jsx)(s.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,r.jsx)(s.h3,{id:"system-components",children:"System Components"}),"\n",(0,r.jsx)(s.p,{children:"Saves infrastructure is built around a layered persistence architecture with version-aware data migration, multi-shard coordination, and efficient progress tracking forming the technical foundation for reliable game state management."}),"\n",(0,r.jsx)(s.h3,{id:"data-flow",children:"Data Flow"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"Game State \u2192 Save Operations \u2192 Data Validation \u2192 Persistence Layer\n     \u2193              \u2193               \u2193                \u2193\nMigration Check \u2192 Version Upgrade \u2192 Cluster Sync \u2192 Storage Backend\n     \u2193              \u2193               \u2193                \u2193\nDiscovery Track \u2192 Progress Update \u2192 Backend Sync \u2192 User Profile\n"})}),"\n",(0,r.jsx)(s.h3,{id:"integration-points",children:"Integration Points"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Data Management Core"}),": Base file operations and serialization systems"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"System Core"}),": Engine-level persistence and memory management"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Networking"}),": Multi-shard communication and cluster coordination"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"User Interface"}),": Save slot selection and progress display"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"recent-changes",children:"Recent Changes"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Build"}),(0,r.jsx)(s.th,{children:"Date"}),(0,r.jsx)(s.th,{children:"Component"}),(0,r.jsx)(s.th,{children:"Change Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"676042"}),(0,r.jsx)(s.td,{children:"2025-06-21"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/saveindex",children:"Save Index"})}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Current save slot management system"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"676042"}),(0,r.jsx)(s.td,{children:"2025-06-21"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/shardsaveindex",children:"Shard Save Index"})}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Multi-shard save coordination"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"676042"}),(0,r.jsx)(s.td,{children:"2025-06-21"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/savefileupgrades",children:"Save File Upgrades"})}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Data migration system"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"676042"}),(0,r.jsx)(s.td,{children:"2025-06-21"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/scrapbook-partitions",children:"Scrapbook Partitions"})}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Discovery tracking system"})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"core-save-modules",children:"Core Save Modules"}),"\n",(0,r.jsx)(s.h3,{id:"save-slot-management",children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/saveindex",children:"Save Slot Management"})}),"\n",(0,r.jsx)(s.p,{children:"Legacy save game management system for slot-based save data and session handling."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Module"}),(0,r.jsx)(s.th,{children:"Status"}),(0,r.jsx)(s.th,{children:"Description"}),(0,r.jsx)(s.th,{children:"Key Features"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/saveindex",children:"SaveIndex"})}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Save slot management system"}),(0,r.jsx)(s.td,{children:"Session tracking, world options, mod configuration"})]})})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Technical Capabilities:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Numbered save slot organization with session identifier linking"}),"\n",(0,r.jsx)(s.li,{children:"World generation option persistence and server configuration management"}),"\n",(0,r.jsx)(s.li,{children:"Mod integration tracking with configuration state preservation"}),"\n",(0,r.jsx)(s.li,{children:"Multi-level support for Master/Caves shard coordination"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"multi-shard-coordination",children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/shardsaveindex",children:"Multi-Shard Coordination"})}),"\n",(0,r.jsx)(s.p,{children:"Advanced cluster save slot management system for multi-shard environments."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Module"}),(0,r.jsx)(s.th,{children:"Status"}),(0,r.jsx)(s.th,{children:"Description"}),(0,r.jsx)(s.th,{children:"Key Features"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/shardsaveindex",children:"Shard Save Index"})}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Cluster-aware save management"}),(0,r.jsx)(s.td,{children:"Multi-shard coordination, cache optimization"})]})})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Technical Capabilities:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Comprehensive multi-shard save slot organization with performance caching"}),"\n",(0,r.jsx)(s.li,{children:"Character and world data retrieval across cluster configurations"}),"\n",(0,r.jsx)(s.li,{children:"Server modification management with cross-shard synchronization"}),"\n",(0,r.jsx)(s.li,{children:"Automatic migration from legacy save formats with error recovery"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"data-migration-infrastructure",children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/savefileupgrades",children:"Data Migration Infrastructure"})}),"\n",(0,r.jsx)(s.p,{children:"Save data migration and upgrade system for maintaining compatibility across game versions."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Module"}),(0,r.jsx)(s.th,{children:"Status"}),(0,r.jsx)(s.th,{children:"Description"}),(0,r.jsx)(s.th,{children:"Key Features"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/savefileupgrades",children:"Save File Upgrades"})}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Version compatibility system"}),(0,r.jsx)(s.td,{children:"Sequential upgrades, retrofitting, preservation"})]})})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Technical Capabilities:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Version-based sequential upgrade application with dependency tracking"}),"\n",(0,r.jsx)(s.li,{children:"Selective upgrade application preventing redundant operations"}),"\n",(0,r.jsx)(s.li,{children:"Retrofitting system for adding new content to existing worlds"}),"\n",(0,r.jsx)(s.li,{children:"Game state preservation during migration with rollback capabilities"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"discovery-tracking",children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/scrapbook-partitions",children:"Discovery Tracking"})}),"\n",(0,r.jsx)(s.p,{children:"Player progress and discovery tracking system with efficient data synchronization."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Module"}),(0,r.jsx)(s.th,{children:"Status"}),(0,r.jsx)(s.th,{children:"Description"}),(0,r.jsx)(s.th,{children:"Key Features"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/saves/scrapbook-partitions",children:"Scrapbook Partitions"})}),(0,r.jsx)(s.td,{children:"stable"}),(0,r.jsx)(s.td,{children:"Discovery progress tracking"}),(0,r.jsx)(s.td,{children:"Bit-field encoding, backend sync"})]})})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Technical Capabilities:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Sophisticated data partitioning with hash-based distribution across storage buckets"}),"\n",(0,r.jsx)(s.li,{children:"Character-specific inspection tracking using efficient bit-field encoding"}),"\n",(0,r.jsx)(s.li,{children:"Backend synchronization with configurable delays and conflict resolution"}),"\n",(0,r.jsx)(s.li,{children:"Compact 32-bit storage format supporting 24 character slots and state flags"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"common-infrastructure-patterns",children:"Common Infrastructure Patterns"}),"\n",(0,r.jsx)(s.h3,{id:"save-slot-operations",children:"Save Slot Operations"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Initialize save index system\nlocal saveIndex = SaveIndex()\nsaveIndex:Load(function()\n    -- Check slot availability\n    if saveIndex:IsSlotEmpty(1) then\n        -- Create new save\n        local serverConfig = {\n            game_mode = "survival",\n            max_players = 6\n        }\n        saveIndex:StartSurvivalMode(1, nil, serverConfig, function()\n            print("New save created in slot 1")\n        end)\n    end\nend)\n'})}),"\n",(0,r.jsx)(s.h3,{id:"multi-shard-management",children:"Multi-Shard Management"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Cluster save operations\nlocal shardIndex = ShardSaveIndex()\nshardIndex:Load(function(success)\n    if success then\n        -- Access master and caves shards\n        local master = shardIndex:GetShardIndex(1, "Master")\n        local caves = shardIndex:GetShardIndex(1, "Caves", true)\n        \n        -- Configure multi-level world\n        if shardIndex:IsSlotMultiLevel(1) then\n            print("Multi-level world configured")\n        end\n    end\nend)\n'})}),"\n",(0,r.jsx)(s.h3,{id:"data-migration",children:"Data Migration"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Automatic upgrade during load\nsaveIndex:Load(function()\n    -- System automatically applies upgrades based on save version\n    local currentVersion = savedata.version or 1\n    if currentVersion < savefileupgrades.VERSION then\n        print("Applying save file upgrades...")\n        -- Sequential upgrades applied automatically\n    end\nend)\n'})}),"\n",(0,r.jsx)(s.h3,{id:"discovery-progress",children:"Discovery Progress"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Track player discovery\nif TheScrapbookPartitions:WasSeenInGame("deerclops") then\n    print("Deerclops has been encountered")\nend\n\n-- Record character inspection\nTheScrapbookPartitions:SetInspectedByCharacter("beefalo", "wilson")\n\n-- Get discovery level\nlocal level = TheScrapbookPartitions:GetLevelFor("chester")\n-- 0=unknown, 1=seen, 2=inspected\n'})}),"\n",(0,r.jsx)(s.h2,{id:"infrastructure-dependencies",children:"Infrastructure Dependencies"}),"\n",(0,r.jsx)(s.h3,{id:"required-systems",children:"Required Systems"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/",children:"System Core"}),": Engine persistence and file I/O operations"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/",children:"Data Management Core"}),": Base serialization and file system access"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"optional-systems",children:"Optional Systems"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/",children:"Networking"}),": Multi-shard communication and cluster coordination"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/",children:"User Interface"}),": Save slot selection and progress display"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/",children:"Game Mechanics"}),": Achievement and progress data integration"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(s.h3,{id:"system-performance",children:"System Performance"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Save operations use asynchronous I/O with callback-based completion handling"}),"\n",(0,r.jsx)(s.li,{children:"Multi-shard coordination employs caching strategies to minimize file system access"}),"\n",(0,r.jsx)(s.li,{children:"Data migration applies sequential upgrades efficiently with minimal memory allocation"}),"\n",(0,r.jsx)(s.li,{children:"Discovery tracking uses hash-based partitioning to distribute load across storage buckets"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"resource-usage",children:"Resource Usage"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Save slot caching reduces redundant file operations during session management"}),"\n",(0,r.jsx)(s.li,{children:"Migration system operates in-place when possible to minimize memory overhead"}),"\n",(0,r.jsx)(s.li,{children:"Scrapbook data uses compact bit-field encoding for memory-efficient progress tracking"}),"\n",(0,r.jsx)(s.li,{children:"Cluster operations batch related shard updates to optimize I/O performance"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"scaling-characteristics",children:"Scaling Characteristics"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Save system supports unlimited save slots with efficient slot management algorithms"}),"\n",(0,r.jsx)(s.li,{children:"Multi-shard architecture scales to additional shard types beyond Master/Caves configuration"}),"\n",(0,r.jsx)(s.li,{children:"Migration system handles arbitrarily complex upgrade sequences without performance degradation"}),"\n",(0,r.jsx)(s.li,{children:"Discovery tracking supports extensible character sets and discovery categories"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"development-guidelines",children:"Development Guidelines"}),"\n",(0,r.jsx)(s.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Always use asynchronous save operations with proper callback handling for UI responsiveness"}),"\n",(0,r.jsx)(s.li,{children:"Implement comprehensive error handling for all file operations and data validation scenarios"}),"\n",(0,r.jsx)(s.li,{children:"Use migration system for any save data format changes to maintain backward compatibility"}),"\n",(0,r.jsx)(s.li,{children:"Follow cluster-aware patterns when implementing multi-shard functionality"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Performing synchronous save operations that block the main thread during gameplay"}),"\n",(0,r.jsx)(s.li,{children:"Modifying save data format without implementing corresponding migration upgrades"}),"\n",(0,r.jsx)(s.li,{children:"Bypassing shard index caching mechanisms causing excessive file system access"}),"\n",(0,r.jsx)(s.li,{children:"Not handling save slot conflicts in multi-user or network storage environments"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"testing-strategies",children:"Testing Strategies"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Test save/load cycles with various world configurations and mod combinations"}),"\n",(0,r.jsx)(s.li,{children:"Verify migration system with saves from previous game versions and edge cases"}),"\n",(0,r.jsx)(s.li,{children:"Validate multi-shard coordination under network latency and failure conditions"}),"\n",(0,r.jsx)(s.li,{children:"Test discovery tracking with concurrent user operations and backend synchronization"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"related-systems",children:"Related Systems"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"System"}),(0,r.jsx)(s.th,{children:"Relationship"}),(0,r.jsx)(s.th,{children:"Integration Points"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/data-management/",children:"Data Management"})}),(0,r.jsx)(s.td,{children:"Parent Category"}),(0,r.jsx)(s.td,{children:"File operations, serialization, data validation"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/system-core/",children:"System Core"})}),(0,r.jsx)(s.td,{children:"Engine Integration"}),(0,r.jsx)(s.td,{children:"Low-level persistence, memory management"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/networking-communication/",children:"Networking"})}),(0,r.jsx)(s.td,{children:"Cluster Support"}),(0,r.jsx)(s.td,{children:"Multi-shard communication, session coordination"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/game-mechanics/",children:"Game Mechanics"})}),(0,r.jsx)(s.td,{children:"Data Consumer"}),(0,r.jsx)(s.td,{children:"Achievement data, progression tracking"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/dst-api-webdocs/docs/game-scripts/core-systems/user-interface/",children:"User Interface"})}),(0,r.jsx)(s.td,{children:"Display Integration"}),(0,r.jsx)(s.td,{children:"Save slot UI, progress indicators"})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(s.h3,{id:"common-infrastructure-issues",children:"Common Infrastructure Issues"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Issue"}),(0,r.jsx)(s.th,{children:"Symptoms"}),(0,r.jsx)(s.th,{children:"Solution"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Save corruption"}),(0,r.jsx)(s.td,{children:"Load failures, missing data"}),(0,r.jsx)(s.td,{children:"Check file permissions, validate data integrity"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Migration failures"}),(0,r.jsx)(s.td,{children:"Version mismatch errors"}),(0,r.jsx)(s.td,{children:"Verify upgrade sequence, check data format"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Shard desynchronization"}),(0,r.jsx)(s.td,{children:"Inconsistent cluster state"}),(0,r.jsx)(s.td,{children:"Restart cluster, verify network connectivity"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Discovery tracking errors"}),(0,r.jsx)(s.td,{children:"Missing progress data"}),(0,r.jsx)(s.td,{children:"Clear discovery cache, resync with backend"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Slot conflicts"}),(0,r.jsx)(s.td,{children:"Overwritten saves"}),(0,r.jsx)(s.td,{children:"Check concurrent access, validate slot locking"})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"debugging-infrastructure",children:"Debugging Infrastructure"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Use save system debug commands to inspect slot states and session data"}),"\n",(0,r.jsx)(s.li,{children:"Monitor migration log output to trace upgrade application and failure points"}),"\n",(0,r.jsx)(s.li,{children:"Check shard index cache consistency across cluster nodes during coordination"}),"\n",(0,r.jsx)(s.li,{children:"Validate discovery tracking bit fields and partition distribution for data integrity"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"data-format-versioning",children:"Data Format Versioning"}),"\n",(0,r.jsx)(s.h3,{id:"version-management",children:"Version Management"}),"\n",(0,r.jsx)(s.p,{children:"The save system uses hierarchical versioning:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"SaveIndex Version"}),": Currently 4, handles slot format changes"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"ShardSaveIndex Version"}),": Currently 1, manages multi-shard coordination"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Save File Upgrades Version"}),": Currently 5.156, tracks content migration"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"upgrade-sequence",children:"Upgrade Sequence"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"-- Version upgrade flow\nif savedata.version < savefileupgrades.VERSION then\n    -- Apply sequential upgrades\n    for _, upgrade in ipairs(savefileupgrades.upgrades) do\n        if savedata.version < upgrade.version then\n            upgrade.fn(savedata)\n        end\n    end\nend\n"})}),"\n",(0,r.jsx)(s.h2,{id:"cluster-architecture",children:"Cluster Architecture"}),"\n",(0,r.jsx)(s.h3,{id:"shard-types",children:"Shard Types"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Master"}),": Primary world shard containing surface world"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Caves"}),": Underground world shard with separate generation"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Custom"}),": Extensible architecture for additional shard types"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"coordination-patterns",children:"Coordination Patterns"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- Cross-shard data access\nlocal function GetClusterWorldData(slot)\n    local master_data = shardIndex:GetShardIndex(slot, "Master")\n    local caves_data = shardIndex:GetShardIndex(slot, "Caves")\n    \n    return {\n        master = master_data:GetWorldData(),\n        caves = caves_data and caves_data:GetWorldData()\n    }\nend\n'})}),"\n",(0,r.jsx)(s.h2,{id:"security-and-integrity",children:"Security and Integrity"}),"\n",(0,r.jsx)(s.h3,{id:"data-validation",children:"Data Validation"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Comprehensive save data integrity checking with corruption detection"}),"\n",(0,r.jsx)(s.li,{children:"Version compatibility verification preventing invalid upgrade attempts"}),"\n",(0,r.jsx)(s.li,{children:"Character data validation ensuring consistent progress tracking"}),"\n",(0,r.jsx)(s.li,{children:"Cluster state synchronization with conflict resolution mechanisms"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"backup-and-recovery",children:"Backup and Recovery"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Automatic backup creation before major migration operations"}),"\n",(0,r.jsx)(s.li,{children:"Recovery procedures for corrupted save files with data reconstruction"}),"\n",(0,r.jsx)(s.li,{children:"Cluster state recovery mechanisms for network failure scenarios"}),"\n",(0,r.jsx)(s.li,{children:"Discovery data backup and restore capabilities for user profile protection"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,r.jsx)(s.h3,{id:"key-metrics",children:"Key Metrics"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Save operation completion time and throughput under various load conditions"}),"\n",(0,r.jsx)(s.li,{children:"Migration upgrade application time for different save file sizes and complexity"}),"\n",(0,r.jsx)(s.li,{children:"Shard coordination latency and cache hit ratios during cluster operations"}),"\n",(0,r.jsx)(s.li,{children:"Discovery tracking synchronization frequency and backend communication efficiency"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"optimization-strategies",children:"Optimization Strategies"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Implement incremental save operations for large world states to reduce I/O overhead"}),"\n",(0,r.jsx)(s.li,{children:"Use lazy loading for shard data to minimize memory usage during slot management"}),"\n",(0,r.jsx)(s.li,{children:"Batch discovery tracking updates to reduce backend communication frequency"}),"\n",(0,r.jsx)(s.li,{children:"Optimize migration system with parallel upgrade application where dependencies allow"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"future-development",children:"Future Development"}),"\n",(0,r.jsx)(s.h3,{id:"extensibility-design",children:"Extensibility Design"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Save system supports additional save slot types beyond current local/cloud distinction"}),"\n",(0,r.jsx)(s.li,{children:"Migration framework accommodates complex upgrade dependencies and conditional application"}),"\n",(0,r.jsx)(s.li,{children:"Multi-shard architecture extends to arbitrary shard configurations and custom world types"}),"\n",(0,r.jsx)(s.li,{children:"Discovery tracking system scales to additional progress categories and character types"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"integration-planning",children:"Integration Planning"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"New save features should leverage existing version management and migration infrastructure"}),"\n",(0,r.jsx)(s.li,{children:"Cluster coordination should maintain compatibility with existing shard communication protocols"}),"\n",(0,r.jsx)(s.li,{children:"Progress tracking should integrate with existing discovery systems and backend synchronization"}),"\n",(0,r.jsx)(s.li,{children:"Data persistence should follow established patterns for consistency and reliability"}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);