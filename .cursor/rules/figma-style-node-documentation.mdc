---
description: This guide outlines the standards for documenting Don't Starve Together node types using a format inspired by Figma's comprehensive API documentation approach.
globs: 
alwaysApply: false
---
# Figma-Style Node Documentation Guide

This guide outlines the standards for documenting Don't Starve Together node types using a format inspired by Figma's comprehensive API documentation approach.

## Document Structure

Each node type documentation should include:

### 1. Frontmatter

```md
---
id: node-type-name
title: Node Type Name
sidebar_position: X
last_updated: YYYY-MM-DD
version: 619045
---
```

### 2. Title and Introduction

```md
*Last Update: YYYY-MM-DD*
# Node Type Name

*API Version: 619045*

Brief introduction explaining what this node type is and its purpose in the DST system.
```

### 3. Properties and Methods Overview

Provide a quick overview of the node's key properties and methods:

```md
## Node Type properties and methods

Node Type provides the following key properties and methods:

- **Properties**
  - `property1` - Brief description
  - `property2` - Brief description

- **Methods**
  - `method1()` - Brief description
  - `method2()` - Brief description
```

### 4. Detailed Properties Section

For each property, provide detailed documentation:

```md
## Properties

### property1: Type

Description of what this property does and how it's used.

```lua
-- Example code showing property usage
local value = node.property1
```

---
```

**Important**: For readonly properties, use this format to avoid MDX parsing errors:

```md
### property1: Type `[readonly]`

Description of what this property does and how it's used.
```

**Avoid using JSX spans** like `<span style={{color: "#888"}}>[readonly]</span>` as this causes MDX compilation errors.

### 5. Detailed Methods Section

For each method, provide detailed documentation:

```md
## Methods

### method1(param1: Type, param2: Type): ReturnType

Description of what this method does and how it's used.

```lua
-- Example code showing method usage
node:method1("value", 123)
```

---
```

**Important**: For type annotations in method signatures, use simple formats like:

```md
### method1(param1: string, param2: number): boolean
```

**Avoid complex type annotations** with special characters like `Array<{chance: number, node: [BehaviorNode](mdc:dst-api-webdocs/behavior-node.md)}>` as these cause MDX parsing errors. Instead use:

```md
### method1(param1: string, nodes: NodeArray): boolean
```

And explain the complex types in the description.

### 6. Examples and Usage Patterns

Include comprehensive examples showing common usage patterns:

```md
## Common Usage Patterns

### Pattern Name

Description of the pattern.

```lua
-- Example code implementing the pattern
local function ExampleFunction(inst)
    -- Implementation
end
```
```

### 7. See Also Section

End with links to related documentation:

```md
## See also

- [Related Node Type 1](mdc:dst-api-webdocs/related-node-1.md) - Brief description
- [Related Node Type 2](mdc:dst-api-webdocs/related-node-2.md) - Brief description
```

## Style Guidelines

1. **Consistency**: Use consistent terminology and formatting across all node type documentation
2. **Examples**: Always include practical code examples for each property and method
3. **Clarity**: Explain concepts clearly, assuming the reader has basic DST modding knowledge
4. **Completeness**: Document all public properties and methods
5. **MDX Compatibility**: Avoid JSX syntax and complex type annotations that might cause MDX parsing errors

## MDX Compatibility Notes

To avoid MDX compilation errors:

1. Don't use JSX syntax like `<span>` tags
2. Use backticks for readonly markers: `[readonly]` instead of styled spans
3. Simplify type annotations that contain special characters like `[`, `{`, `<`, `>`
4. Use triple backticks (```) for code blocks, not indentation
5. Ensure all links use proper Markdown format: `[text](mdc:dst-api-webdocs/link)`

## Example Documentation

Here's a simplified example of a properly formatted node type documentation:

```md
---
id: example-node
title: Example Node
sidebar_position: 1
last_updated: 2023-08-15
version: 619045
---
*Last Update: 2023-08-15*
# Example Node

*API Version: 619045*

Example Nodes are specialized nodes that demonstrate the documentation format.

## Example Node properties and methods

Example Node provides the following key properties and methods:

- **Properties**
  - `inst` - Reference to the entity this node controls
  - `status` - Current execution status of the node

- **Methods**
  - `Visit()` - Evaluates the node
  - `Reset()` - Resets the node to initial state

## Properties

### inst: Entity `[readonly]`

A reference to the entity that this node is controlling.

```lua
-- Access the node's entity
local health = example_node.inst.components.health
```

---

### status: string `[readonly]`

The current execution status of the node.

```lua
-- Check the current status
if example_node.status == "SUCCESS" then
    print("Node completed successfully")
end
```

---

## Methods

### Visit(): string

Evaluates the node and returns its status.

```lua
function ExampleNode:Visit()
    -- Implementation
    return "SUCCESS"
end
```

---

### Reset(): void

Resets the node to its initial state.

```lua
function ExampleNode:Reset()
    -- Implementation
end
```

---

## See also

- [Related Node](mdc:dst-api-webdocs/related-node.md) - Description of related node