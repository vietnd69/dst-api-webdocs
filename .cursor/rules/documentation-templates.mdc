---
description: 
globs: docs/**/*.md,*.md
alwaysApply: false
---
---
description: This document outlines the standard templates to follow when creating documentation for the Don't Starve Together API.
globs: 
alwaysApply: false
---

# Documentation Templates Guide

This document outlines the standard templates to follow when creating documentation for the Don't Starve Together API.

## General Document Structure

All documentation should include:

1. **Frontmatter** with metadata:
   ```md
   ---
   id: document-id
   title: Document Title
   sidebar_position: X
   version: 619045
   ---
   ```

2. **Title and Introduction**:
   ```md
   # Document Title
   
   Brief introduction explaining the purpose and function of what's being documented.
   ```

3. **Required sections** specific to the document type (detailed below)

4. **See also** section at the end with relevant links:
   ```md
   ## See also
   
   - [Related Document 1](mdc:dst-api-webdocs/path-to-document1.md) - Brief description
   - [Related Document 2](mdc:dst-api-webdocs/path-to-document2.md) - Brief description
   ```

## Component Documentation Template

Use this template when documenting game components:

```md
---
id: component-name
title: Component Name
sidebar_position: X
version: 619045
---

# Component Name

Brief overview of what the component does and its primary purpose.

## Basic Usage

```lua
-- Add this component to an entity
local entity = CreateEntity()
entity:AddComponent("componentname")

-- Configure the component
local component = entity.components.componentname
component:ConfigureMethod(value)
```

## Properties

| Property | Type | Description |
|----------|------|-------------|
| `property1` | Type | Description of the property |
| `property2` | Type | Description of the property |

## Key Methods

```lua
-- Method group 1
component:Method1(param)
component:Method2(param)

-- Method group 2
component:Method3(param)
```

## Events

The component responds to and triggers various events:

- `event1` - Description of event
- `event2` - Description of event

## Integration with Other Components

The component often works with:

- `Component1` - How they interact
- `Component2` - How they interact

## Example: Component Usage

```lua
local function CreateExampleEntity()
    local inst = CreateEntity()
    
    -- Basic setup
    inst.entity:AddTransform()
    inst.entity:AddAnimState()
    
    -- Configure this component
    inst:AddComponent("componentname")
    
    return inst
end
```

## See also

- [Related Component 1](mdc:dst-api-webdocs/path-to-component1.md) - Brief description
```

## Core System Documentation Template

Use this template when documenting core game systems:

```md
---
id: system-name
title: System Name
sidebar_position: X
version: 619045
---

# System Name

Introduction to the system and its purpose in the game architecture.

## Basic Concepts

Explanation of fundamental concepts and principles of this system.

```lua
-- Basic example
local example = SystemExample()
```

## Core Features

### Feature 1

Detailed explanation of the first key feature.

### Feature 2

Detailed explanation of the second key feature.

## Integration with Other Systems

Explanation of how this system interacts with other systems.

## Common Patterns and Best Practices

### Pattern 1

Explanation of a common pattern with example code.

### Pattern 2

Explanation of another common pattern with example code.

## See also

- [Related System 1](mdc:dst-api-webdocs/path-to-system1.md) - Brief description
```

## Data Type Documentation Template

Use this template when documenting data types:

```md
---
id: data-type-name
title: DataType Name
sidebar_position: X
version: 619045
---

# DataType Name

Brief introduction to the data type and its purpose.

## Properties

| Property | Type | Description |
|----------|------|-------------|
| `property1` | Type | Description of the property |
| `property2` | Type | Description of the property |

## Methods

### Method1

Description of the method and its purpose.

```lua
-- Syntax
local result = dataType:Method1(param1, param2)
```

### Method2

Description of the method and its purpose.

## Creation

How to create instances of this data type.

```lua
-- Example of creating this data type
local newInstance = DataType(param1, param2)
```

## Examples

### Basic Usage

```lua
-- Basic example
local dataInstance = DataType(1, 2)
local result = dataInstance:Method1(3)
```

## See also

- [Related Data Type 1](mdc:dst-api-webdocs/path-to-datatype1.md) - Brief description
```

## Example Documentation Template

Use this template when creating example guides:

```md
---
id: example-name
title: Example Name
sidebar_position: X
version: 619045
---

# Example Name

Brief introduction explaining what this example demonstrates.

## Prerequisites

- Knowledge or requirements needed to understand this example
- Required components or systems

## Implementation

### Step 1: Basic Setup

Explain the first implementation step with code example.

```lua
-- Step 1 code
local entity = CreateEntity()
```

### Step 2: Core Functionality

Explain the second implementation step.

### Step 3: Integration

Explain how to integrate with other systems.

## Complete Example Code

```lua
-- Complete implementation code
local function CreateCompleteExample()
    local inst = CreateEntity()
    
    -- Basic setup
    inst.entity:AddTransform()
    
    -- Implementation details
    
    return inst
end
```

## See also

- [Related Example](mdc:dst-api-webdocs/path-to-example.md) - Brief description
```

## Global Object Documentation Template

Use this template when documenting global objects:

```md
---
id: global-system-name
title: Global System Name
sidebar_position: X
version: 619045
---

# Global System Name

Introduction to the global system or object and its purpose.

## Accessing the System

```lua
-- How to access this system/object
local systemInstance = TheGlobalSystem

-- Basic usage example
systemInstance:DoSomething()
```

## Key Properties

| Property | Type | Access | Description |
|----------|------|--------|-------------|
| `property1` | Type | Read/Write | Description of the property |
| `property2` | Type | Read-only | Description of the property |

## Core Methods

### Method1

Description of the method and its purpose.

## Events

Events triggered by or related to this global system.

| Event Name | Triggered When | Data Payload |
|------------|----------------|--------------|
| `event1` | Description of trigger | `{field1=value}` |

## Client vs. Server Behavior

Explain differences in behavior between client and server contexts.

## See also

- [Related System](mdc:dst-api-webdocs/path-to-system.md) - Brief description
```

## Mandatory Sections

While templates can be adjusted as needed, these sections should always be included:

1. Correct frontmatter with id, title, sidebar_position, and version
2. Title and introduction
3. Basic usage example
4. Properties/Methods (if applicable)
5. At least one complete code example
6. "See also" section with related content

