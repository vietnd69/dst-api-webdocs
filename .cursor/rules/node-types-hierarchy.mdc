---
description: This document outlines the hierarchical relationships between Don't Starve Together's node types and how they interact with each other to create the game's architecture.
globs: 
alwaysApply: false
---
# Node Types Hierarchy and Relationships

This document outlines the hierarchical relationships between Don't Starve Together's node types and how they interact with each other to create the game's architecture.

## Node Type Classification

Don't Starve Together's engine uses several primary node types that work together to create the game's architecture:

### Core Engine Types

- **Entity** - Base game object with transform, animations, and components
- **Component** - Modular functionality attachable to entities
- **Brain** - AI controller that uses behavior trees
- **Stategraph** - State machine controller for entity animations and behavior
- **Widget** - UI element for screens and menus
- **Network** - Remote synchronization and replication handler

### Behavior Tree Types

- **BehaviorNode** - Abstract base class for all AI behavior nodes
- **ActionNode** - Performs specific entity actions
- **ConditionNode** - Tests conditions and controls flow
- **PriorityNode** - Selects highest priority successful child
- **SequenceNode** - Executes children in sequence
- **DecoratorNode** - Modifies behavior of a single child node

### Entity Framework Types

- **Prefab** - Entity template with components and initialization
- **Player** - User-controlled character entity
- **Creature** - AI-controlled character entity 
- **Structure** - Placeable building or object
- **Item** - Collectible or usable object

## Node Type Inheritance Tree

```
Entity
  ├── Character
  │    ├── Player
  │    └── Creature
  ├── Item
  │    ├── Tool
  │    ├── Armor
  │    └── Consumable
  └── Structure
       ├── Craftable
       └── Workstation

BehaviorNode
  ├── ActionNode
  │    ├── GoToEntity
  │    ├── DoAction
  │    └── Wander
  ├── ConditionNode
  │    ├── IfNode
  │    ├── WhileNode
  │    └── AndNode
  ├── SequenceNode
  │    ├── DoWhileNode
  │    └── ParallelNode
  ├── PriorityNode
  │    ├── LoopPriorityNode
  │    └── WeightedPriorityNode
  └── DecoratorNode
       ├── NotDecorator
       ├── LoopNode
       └── FailIfRunningDecorator

Widget
  ├── Button
  │    ├── ImageButton
  │    └── TextButton
  ├── Text
  ├── Image
  └── Container
       ├── Menu
       └── ScrollableList
```

## Node Type Property Inheritance

Node types inherit properties and methods from their parent classes:

### Entity Property Inheritance

All entities inherit these core properties:

- **transform** - Position, rotation, and scale in the world
- **animstate** - Animation state controller
- **components** - Table of attached components
- **tags** - Table of searchable category tags
- **GUID** - Unique identifier

Child entity types add specialized properties:

```lua
-- Base entity properties
Entity.transform
Entity.animstate

-- Character adds specialized properties
Character.components.health
Character.components.hunger

-- Player adds player-specific properties
Player.components.builder
```

### BehaviorNode Property Inheritance

All behavior nodes inherit these core properties:

- **name** - Identifier for the node type
- **status** - READY, RUNNING, SUCCESS, or FAILURE
- **children** - Child nodes (for non-leaf nodes)

Child behavior node types add specialized properties:

```lua
-- Base node properties
BehaviorNode.name
BehaviorNode.status

-- PriorityNode adds specialized properties
PriorityNode.index  -- Current child being executed
PriorityNode.period -- Time between reevaluations
```

## Key Relationships Between Node Types

### Entity and Component Relationship

```
┌───────────┐              ┌───────────┐
│           │              │           │
│  Entity   │◄─────────────┤ Component │
│           │  self.inst   │           │
└───────────┘              └───────────┘
      │                          ▲
      │ AddComponent             │
      ▼                          │
┌─────────────────┐       ┌────────────┐
│                 │       │            │
│ entity.         │       │ health     │
│ components.health├──────►            │
│                 │       │            │
└─────────────────┘       └────────────┘
```

Entities are containers for components:

```lua
-- An entity contains multiple components
local entity = CreateEntity()
entity:AddComponent("health")
entity:AddComponent("combat")

-- Components reference their owner entity
function Component:Initialize(inst)
    self.inst = inst  -- Reference to owning entity
end
```

### Brain and Behavior Node Relationship

```
┌───────────┐            ┌───────────────┐
│           │            │               │
│  Brain    │◄───────────┤ BehaviorTree  │
│           │  self.bt   │               │
└───────────┘            └───────────────┘
      │                          │
      │ OnStart                  │ Contains
      ▼                          ▼
┌────────────┐            ┌─────────────┐
│            │            │             │
│ inst.brain │            │ Root Node   │
│            │            │             │
└────────────┘            └─────────────┘
                                 │
                                 │ Contains
                                 ▼
                          ┌─────────────┐
                          │             │
                          │ Child Nodes │
                          │             │
                          └─────────────┘
```

Brains use behavior nodes to create AI decision trees:

```lua
-- A brain uses a behavior tree of nodes
function SomeBrain:OnStart()
    local root = PriorityNode({
        -- Brain uses various behavior nodes
        ActionNode1(self.inst),
        SequenceNode({
            ActionNode2(self.inst),
            ActionNode3(self.inst)
        })
    }, 0.5)
    
    self.bt = BT(self.inst, root)
end
```

### Stategraph and Entity Relationship

```
┌───────────┐       ┌───────────────┐
│           │       │               │
│  Entity   │◄──────┤  Stategraph   │
│           │inst   │               │
└───────────┘       └───────────────┘
      ▲                    │
      │                    │ Contains
      │                    ▼
┌────────────┐      ┌────────────────┐
│            │      │                │
│ inst.sg    │      │ States & Events│
│            │      │                │
└────────────┘      └────────────────┘
```

Stategraphs control entity states, animations, and events:

```lua
-- A stategraph is attached to an entity
inst.sg = StateGraph("entityname", states, events)

-- Stategraph events modify entity components
EventHandler("attacked", function(inst)
    if inst.components.health then
        inst.components.health:DoDelta(-10)
    end
end)
```

### Widget and UI Hierarchy

```
┌───────────┐
│           │
│  Screen   │
│           │
└───────────┘
      │
      │ AddChild
      ▼
┌────────────┐
│            │
│  Widget    │◄────┐
│            │     │
└────────────┘     │ AddChild
      │            │
      │ AddChild   │
      ▼            │
┌────────────┐     │
│            │     │
│  Widget    │─────┘
│            │
└────────────┘
```

Widgets form a parent-child hierarchy for UI elements:

```lua
-- Widgets have parent-child relationships
local parent = Widget("ParentWidget")
local child1 = parent:AddChild(Widget("Child1"))
local child2 = parent:AddChild(Widget("Child2"))
local grandchild = child1:AddChild(Widget("Grandchild"))
```

## Node Type Composition Patterns

### Entity-Component Composition

Entities are composed of components to create complex behaviors:

```
           Entity
          /  |  \
     Health Combat Inventory
     /  \     |       |
 Current  Max Damage  Items
```

```lua
local entity = CreateEntity()
entity:AddComponent("health")
entity:AddComponent("combat")
entity:AddComponent("inventory")
entity.components.health:SetMaxHealth(100)
entity.components.combat:SetDefaultDamage(10)
```

### Behavior Tree Composition

Behavior nodes form complex trees through composition:

```
           PriorityNode
          /      |     \
   SequenceNode  |    ActionNode3
   /     \       |
ActionNode1  ConditionNode
              |
           ActionNode2
```

```lua
local behaviorTree = PriorityNode({
    SequenceNode({
        ActionNode1(inst),
        ConditionNode(inst)
    }),
    ActionNode2(inst),
    ActionNode3(inst)
})
```

## System Integration Points

These are the key points where different node types interact:

### Entity Creation and Initialization

Prefabs define entity structure, components, and initial properties:

```lua
local function fn()
    local inst = CreateEntity()
    -- Add core entity nodes
    inst.entity:AddTransform()
    inst.entity:AddAnimState()
    
    -- Add components
    inst:AddComponent("health")
    
    -- Initialize brain
    inst:SetBrain(SomeBrain)
    
    -- Initialize stategraph
    inst:SetStateGraph("SGEntityName")
    
    return inst
end

return Prefab("entityname", fn, assets)
```

### Brain and Behavior Integration

Brains, behavior nodes, and components work together:

```lua
-- Brain initializes behavior tree
function Brain:OnStart()
    local root = PriorityNode({...})
    self.bt = BT(self.inst, root)
end

-- Behavior nodes access components
function ActionNode:PerformAction()
    return self.inst.components.worker:DoWork(target)
end
```

## See also

- [Entity System](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/core/entity-system.md)
- [Component System](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/core/component-system.md)
- [Brain Documentation](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/node-types/brain.md)



