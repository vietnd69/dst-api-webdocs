---
description: This project is a Docusaurus documentation site for the Don't Starve Together Vanilla API. This guide explains the overall project structure and architecture.
globs: 
alwaysApply: false
---
# Project Structure and Architecture

This project is a Docusaurus documentation site for the Don't Starve Together Vanilla API. This guide explains the overall project structure and architecture.

## Repository Structure

The repository is organized as follows:

```
dst-api-webdocs/
├── .cursor/              # Cursor-specific configuration and rules
│   └── rules/            # Cursor rules for development guidance
├── community/            # Community contribution resources
│   └── templates/        # Templates for different documentation types
├── docs/                 # Documentation content (Markdown files)
│   └── api-vanilla/      # API documentation organized by category
├── scripts/              # Utility scripts for the project
├── src/                  # Source code for the Docusaurus site
│   ├── css/              # Custom CSS styles
│   ├── pages/            # React components for custom pages
│   └── components/       # Reusable React components
├── static/               # Static assets (images, etc.)
│   └── img/              # Image assets including logo and favicon
├── docusaurus.config.ts  # Docusaurus configuration file
├── sidebars.ts           # Sidebar navigation configuration
└── tsconfig.json         # TypeScript configuration
```

## Documentation Structure

The documentation is organized under the `/docs` directory with the following structure:

```
docs/
└── api-vanilla/
    ├── characters/       # All function and skill tree of character
    ├── components/       # Game component documentation
    │   ├── index.md      # Component overview
    │   └── [component].md # Individual component documentation
    ├── core/             # Core game systems
    ├── data-types/       # Data types used in the API
    ├── debugging-and-testing/ # Debugging and testing tools
    ├── development-tools/  # Development tools and workflows
    ├── entity-framework/ # Entity system documentation
    ├── examples/         # Code examples and case studies
    │   └── snippets/     # Small code snippets
    ├── getting-started/  # Introductory documentation
    ├── global-objects/   # Global objects documentation
    ├── localization/     # Localization system documentation
    ├── node-types/       # Node types documentation
    ├── prefabs/          # Prefab documentation
    ├── recipes/          # Recipes system documentation
    ├── shared-properties/ # Shared properties documentation
    ├── stategraphs/      # Stategraph system documentation
    ├── updates/          # API updates and changelogs
    ├── utils/            # Utility functions documentation
    └── world/            # World-related documentation
```

### Document Organization

Each documentation section follows a standard pattern:

1. **Index File**: Each directory contains an `index.md` file that provides an overview of the category
2. **Individual Files**: Each component, system, or concept has its own markdown file
3. **Category Configuration**: Each directory contains a `_category_.json` file that configures the category in the sidebar

## Component Documentation Structure

Component documentation files follow this structure:

1. **Overview**: Brief description of the component's purpose
2. **Properties**: Documentation of all properties with types and defaults
3. **Methods**: Documentation of all methods with parameters and return values
4. **Events**: Events fired or handled by the component
5. **Examples**: Practical usage examples
6. **Related Components**: Links to related components

## Templates

The `/community/templates/` directory contains templates for different types of documentation:

- `component-template.md`: Template for component documentation
- `component_template_with_versioning.md`: Template for versioned component documentation
- `core-system-template.md`: Template for core system documentation
- `data-type-template.md`: Template for data type documentation
- `example-template.md`: Template for code examples
- `global-system-template.md`: Template for global system documentation
- `api-update-template.md`: Template for API update documentation

## Build and Deployment

The documentation site is built using Docusaurus and deployed to GitHub Pages:

1. **Development**: `npm start` - Starts the local development server
2. **Build**: `npm run build` - Builds the static website
3. **Deployment**: `npm run deploy` - Deploys to GitHub Pages

## GitHub Pages Configuration

The site is configured for GitHub Pages deployment:

- **Base URL**: `/dst-api-webdocs/`
- **Organization**: `vietnd69`
- **Repository**: `vietnd69/dst-api-webdocs`
- **Branch**: `gh-pages`

## Docusaurus Configuration

The Docusaurus configuration is defined in [docusaurus.config.ts](mdc:dst-api-webdocs/dst-api-webdocs/docusaurus.config.ts):

- **Title and metadata**: Site title, description, and favicon
- **Plugins**: Additional functionality like search
- **Theming**: Visual appearance configuration
- **Presets**: Core functionality configuration

## Sidebar Navigation

The navigation sidebar is defined in [sidebars.ts](mdc:dst-api-webdocs/dst-api-webdocs/sidebars.ts) and organizes the documentation into logical sections. The sidebar can be:

1. **Auto-generated**: Based on the file structure and front matter
2. **Manually defined**: Explicitly listing documents in the sidebar configuration

## TypeScript Integration

The project uses TypeScript for enhanced developer experience:

- React components use `.tsx` extension
- Configuration files use `.ts` extension
- Type definitions are provided for Docusaurus components and configuration

## Contribution Workflow

The contribution workflow follows these steps:

1. **Fork and Clone**: Fork the repository and clone it locally
2. **Create Branch**: Create a branch for your changes
3. **Make Changes**: Add or modify documentation following the templates
4. **Test Locally**: Run `npm start` to view your changes
5. **Create Pull Request**: Submit a pull request for review
6. **Review and Merge**: After review, changes are merged into the main branch

## Related Resources

- [Documentation Standards](mdc:dst-api-webdocs/dst-api-webdocs/.cursor/rules/documentation-standards.mdc): Standards for writing documentation
- [API Updates](mdc:dst-api-webdocs/dst-api-webdocs/.cursor/rules/api-updates.mdc): Guidelines for documenting API updates
- [Routing and Navigation](mdc:dst-api-webdocs/dst-api-webdocs/.cursor/rules/routing-and-navigation.mdc): Routing strategy for the site
- [Docusaurus Configuration](mdc:dst-api-webdocs/dst-api-webdocs/.cursor/rules/docusaurus-configuration.mdc): Details on Docusaurus setup

```bash
# Install dependencies
npm install

# Start development server
npm start

# Build the site
npm run build

# Test the production build locally
npm run serve

# Deploy to GitHub Pages
npm run deploy
```

## GitHub Pages Deployment

This site is configured for deployment on GitHub Pages with the following settings:

- Base URL: `/dst-api-webdocs/`
- Organization: `vietnd69`
- Project: `dst-api-webdocs`

The deployment is automated via GitHub Actions workflow defined in [.github/workflows/deploy.yml](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/.github/workflows/deploy.yml).

