---
description: This guide outlines the process for converting existing Don't Starve Together node type documentation to the Figma-style format.
globs: 
alwaysApply: false
---
# Node Type Documentation Conversion Guide

This guide outlines the process for converting existing Don't Starve Together node type documentation to the Figma-style format.

## Conversion Process Overview

Follow these steps to convert existing documentation:

1. **Update Frontmatter**: Add version information and update last_updated
2. **Add API Version**: Include API version information below the title
3. **Create Navigation**: Add an "On this page" section with links to major sections
4. **Restructure Properties & Methods**: Format using Figma-style format with horizontal rules
5. **Add Code Examples**: Ensure every property and method has usage examples
6. **Standardize Terminology**: Use consistent terminology across all docs

## Step-by-Step Conversion Instructions

### 1. Update Frontmatter

```md
---
id: node-name
title: NodeName
sidebar_position: X
last_updated: YYYY-MM-DD
version: 624447
---
```

### 2. Format Title & Introduction

```md
*Last Update: YYYY-MM-DD*
# NodeName

*API Version: 624447*

Brief concise description of the node type's purpose and role in the game architecture.
```

### 3. Format Properties Section

Replace this style:
```md
## Properties

| Property | Type | Description |
|----|---|----|
| `property1` | Type | Description of the property |
| `property2` | Type | Description of the property |
```

With this style:
```md
## NodeName properties

### property1: Type [readonly]

Detailed description of what the property does and how to use it.

```lua
-- Example usage of the property
local value = node.property1
```

---

### property2: Type

Detailed description of the property.

```lua
-- Example usage
node.property2 = newValue
```

---
```

### 4. Format Methods Section

Replace this style:
```md
## Methods

| Method | Description |
|----|-----|
| `method1()` | Description of the method |
| `method2(param)` | Description of the method |
```

With this style:
```md
## NodeName methods

### method1(): ReturnType

Detailed description of what the method does.

```lua
-- Example usage
local result = node:method1()
```

---

### method2(param: Type): ReturnType

Detailed description with parameter explanation.

```lua
-- Example usage with parameter
node:method2("example")
```

---
```

### 5. Expand Examples Section

Include complete, working examples:

```md
## Usage Examples

### Basic Usage

```lua
-- Complete, basic example
local node = NodeType(params)
node:method1()
```

### Advanced Usage

```lua
-- More complex example
local node = NodeType({
    option1 = value1,
    option2 = value2
})

-- Show typical usage patterns
local result = node:method2("param")
```
```

### 6. Add See Also Section

```md
## See also

- [RelatedNode](mdc:dst-api-webdocs/related-node.md) - Brief description of relationship
- [AnotherNode](mdc:dst-api-webdocs/another-node.md) - Brief description of relationship
```

## Example Before-and-After

### Before:

```md
---
id: action-nodes
title: Action Nodes
sidebar_position: 2
---

# Action Nodes

Action nodes are the leaf nodes of behavior trees that perform specific actions.

## Properties

| Property | Type | Description |
|----|---|----|
| `name` | string | The name of the action |
| `status` | string | Current execution status |

## Methods

| Method | Description |
|----|-----|
| `Visit()` | Executes the action |
| `Reset()` | Resets the node state |
```

### After:

```md
---
id: action-nodes
title: ActionNode
sidebar_position: 2
last_updated: 2023-08-15
version: 624447
---

*Last Update: 2023-08-15*
# ActionNode

*API Version: 624447*

ActionNode represents a leaf node in behavior trees that performs specific actions. These nodes handle the actual execution of behaviors and interact with entity components.

**On this page:**
- [Properties](mdc:dst-api-webdocs/#actionnode-properties)
  - [name](mdc:dst-api-webdocs/#name-string)
  - [status](mdc:dst-api-webdocs/#status-string-readonly)
- [Methods](mdc:dst-api-webdocs/#actionnode-methods)
  - [Visit()](mdc:dst-api-webdocs/#visit-status)
  - [Reset()](mdc:dst-api-webdocs/#reset-void)
- [Usage Examples](mdc:dst-api-webdocs/#usage-examples)

## ActionNode properties

### name: string

The identifier name of this action node. Used for debugging and logging.

```lua
-- Access the action name
print("Executing action: " .. node.name)
```

---

### status: string [readonly]

Current execution status of the node: "READY", "RUNNING", "SUCCESS", or "FAILURE".

```lua
-- Check node status
if node.status == "SUCCESS" then
    print("Action completed successfully")
end
```

---

## ActionNode methods

### Visit(): Status

Executes the action and returns the current status.

```lua
-- Execute the action
local status = node:Visit()
```

---

### Reset(): void

Resets the node's state to its initial state.

```lua
-- Reset the node
node:Reset()
```

---

## Usage Examples

### Basic ActionNode

```lua
local MoveToAction = Class(ActionNode, function(self, inst, pos)
    ActionNode._ctor(self, "MoveTo")
    self.inst = inst
    self.pos = pos
end)

function MoveToAction:Visit()
    if self.status == READY then
        self.status = RUNNING
        self.inst.components.locomotor:GoToPoint(self.pos)
    end
    
    if self.status == RUNNING then
        if self.inst:GetDistanceSqToPoint(self.pos) < 1 then
            self.status = SUCCESS
        end
    end
    
    return self.status
end

return MoveToAction
```

## See also

- [BehaviorNode](mdc:dst-api-webdocs/behavior-node.md) - Base class for all behavior nodes
- [SequenceNode](mdc:dst-api-webdocs/sequence-nodes.md) - Executes actions in sequence
- [PriorityNode](mdc:dst-api-webdocs/priority-nodes.md) - Selects actions by priority
```

## Common Conversion Issues

### 1. Missing Property Types
- Old format may not specify property types
- Research the code to determine correct types
- Include [readonly] tag when appropriate

### 2. Insufficient Examples
- Old format often lacks example code
- Add practical examples for each property/method
- Show both reading and setting for properties

### 3. Inconsistent Method Signatures
- Old docs may not include parameter types and return types
- Update method signatures to include full type information
- Format as `methodName(param1: Type, param2: Type): ReturnType`

### 4. Missing Navigation
- Add "On this page" section at the top
- Include anchors to all major properties and methods
- Format anchors properly with dashes and lowercase

### 5. Incomplete Relationships
- Add "See also" section
- Link to related node types
- Explain relationships between nodes

## Quality Checklist

Before submitting your conversion, verify:

- [ ] All properties include type information
- [ ] All methods include parameter and return types
- [ ] Every property and method has an example
- [ ] Horizontal rules separate all properties and methods
- [ ] Navigation section links to all major sections
- [ ] "See also" section links to related nodes
- [ ] API version is correctly specified
- [ ] Last updated date is current

