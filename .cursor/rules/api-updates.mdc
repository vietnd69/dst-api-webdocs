---
description: This document outlines the complete process for documenting updates, changes, and versioning in the Don't Starve Together API documentation.
globs: 
alwaysApply: false
---
# API Updates Documentation Guidelines

This document outlines the complete process for documenting updates, changes, and versioning in the Don't Starve Together API documentation.

## API Version Tracking

The Don't Starve Together API uses release IDs (numeric values) to identify specific game versions. These release IDs should be tracked and referenced in documentation.

### Version Format

When referring to API versions in documentation, use the release ID format:

```markdown
API Version: 624447
```

All version-dependent features should clearly indicate the minimum version required.

## Documenting API Updates

### API Changelog

All API changes must be documented in [api-vanilla/updates/api-changelog.md](mdc:dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/updates/api-changelog.md) with:

1. **Version header**: API Release ID and date
2. **Change categories**: 
   - Added: New functions, components, or features
   - Modified: Changed behavior of existing functionality
   - Deprecated: Features marked for future removal
   - Removed: Functionality that has been eliminated
   
Example Changelog Entry:

```markdown
## API Version 624447 (2023-08-15)

### Added
- `ThePlayer.components.builder:CanLearn(recipe)` - Checks if a player can learn a recipe
- `TheWorld:HasTag(tag)` - Checks if the world has a specific tag

### Modified
- `TheInventory:GetItems()` - Now returns an additional parameter for item quality

### Deprecated
- `TheSim:GetPosition()` - Use `TheSim:GetScreenPos()` instead

### Removed
- `TheNet:GetServerEvent()` - This function has been removed entirely
```

### Component-Level Version Documentation

Each component documentation file should indicate version-specific changes directly in the relevant sections:

```markdown
### Component:Method(params)

*Available since API Version: 486578*

Description of the method...

> **API Change (624447)**: This method now returns an additional boolean parameter indicating success.
```

## Migration Guide Documentation

For significant API changes, create dedicated migration guides in [api-vanilla/updates/migration-guides.md](mdc:dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/updates/migration-guides.md):

1. **Version transition**: Clearly identify the versions involved
2. **Breaking changes**: List all functionality that requires code updates
3. **Code examples**: Show before and after examples
4. **Step-by-step migration**: Provide clear steps for updating code

Example Migration Section:

```markdown
## Migrating from API 486578 to API 624447

### Breaking Changes

#### TheInventory:GetItems() Return Value Changed

**Before:**
```lua
local items = TheInventory:GetItems()
for _, item in ipairs(items) do
    print(item.item_id, item.name)
end
```

**After:**
```lua
local items = TheInventory:GetItems()
for _, item in ipairs(items) do
    print(item.item_id, item.name, item.quality) -- quality is new
end
```
```

## Backwards Compatibility Documentation

Document backwards compatibility considerations in [api-vanilla/updates/backwards-compatibility.md](mdc:dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/updates/backwards-compatibility.md):

1. **Compatibility promise**: What guarantees are made about API stability
2. **Version support**: Which versions are officially supported
3. **Deprecation policy**: How features are deprecated before removal
4. **Compatibility patterns**: How to write code that works across versions

Example:

```markdown
## Checking Feature Availability

For features that may not exist in all API versions, use feature detection:

```lua
-- Safe feature detection pattern
if ThePlayer.components.builder and ThePlayer.components.builder.CanLearn then
    local can_learn = ThePlayer.components.builder:CanLearn(recipe)
else
    -- Fallback for older API versions
    local can_learn = ThePlayer.components.builder:KnowsRecipe(recipe) == false
end
```
```

## Deprecated Features Documentation

Deprecated features should be clearly marked in [api-vanilla/updates/deprecated-features.md](mdc:dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/updates/deprecated-features.md):

1. **Deprecation notice**: When the feature was deprecated
2. **Removal timeline**: When the feature will likely be removed
3. **Replacement**: What alternative should be used instead
4. **Migration pattern**: How to replace the deprecated functionality

Example:

```markdown
## TheSim:GetPosition()

**Deprecated in API Version: 486578**  
**Will be removed in API Version: 728000**

This method has been deprecated and will be removed in a future version.

### Replacement

Use `TheSim:GetScreenPos()` instead:

```lua
-- Old code
local x, y = TheSim:GetPosition()

-- New code
local x, y = TheSim:GetScreenPos()
```
```

## Documenting Mod Update Requirements

For each significant API change, document the impact on mods in [api-vanilla/updates/mod-updating-guide.md](mdc:dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/updates/mod-updating-guide.md):

1. **Version requirement**: What version of the API is required
2. **Compatibility layer**: How to support multiple API versions
3. **Testing advice**: How to test mods against the new API

Example:

```markdown
## Supporting Both Old and New Inventory API

If your mod needs to work across API versions, you can use this pattern:

```lua
local function GetItemQuality(item)
    local items = TheInventory:GetItems()
    for _, inv_item in ipairs(items) do
        if inv_item.item_id == item.item_id then
            -- New API provides quality directly
            return inv_item.quality or 0 -- Default to 0 for older API versions
        end
    end
    return 0
end
```
```

## API Update Template

Use the [api-update-template.md](mdc:dst-api-webdocs/dst-api-webdocs/community/templates/api-update-template.md) for documenting new API releases:

1. Create new update document when API version changes
2. Include all changes categorized appropriately
3. Provide code examples for significant changes
4. Add migration guidance for breaking changes

