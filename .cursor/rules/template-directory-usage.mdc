---
description: 
globs: docs/**/*.md,*.md
alwaysApply: false
---
---
description: This rule explains how to use the template directory structure for creating new documentation.
globs: 
alwaysApply: false
---

# Template Directory Usage

The Don't Starve Together API documentation uses a structured template approach for creating consistent documentation files.

## Template Directory Structure

New templates are organized in the `templates/` directory:

```
templates/
├── README.md               - Instructions for template usage
├── component-template.md   - Template for component documentation
├── core-system-template.md - Template for core system documentation
├── data-type-template.md   - Template for data type documentation
├── example-template.md     - Template for example documentation
└── global-system-template.md - Template for global object documentation
```

## Creating New Documentation Files

When creating new documentation, follow these steps:

1. Determine the type of document you need to create (component, system, data type, etc.)
2. Copy the appropriate template from the templates directory
3. Place your new file in the correct location within the API documentation hierarchy
4. Fill in the template with the relevant content
5. Update the frontmatter with correct information (id, title, sidebar_position, version)
6. Ensure all mandatory sections are included

## Documentation Hierarchy

Place your new documentation files in the appropriate directory based on content type:

- `/docs/api-vanilla/components/` - For component documentation
- `/docs/api-vanilla/core/` - For core system documentation
- `/docs/api-vanilla/data-types/` - For data type documentation
- `/docs/api-vanilla/examples/` - For example documentation
- `/docs/api-vanilla/global-objects/` - For global object documentation

## Template Integration with Docusaurus

These templates are designed to work with the Docusaurus documentation system:

1. The `id` in frontmatter affects the URL path
2. The `sidebar_position` controls the ordering in the sidebar
3. The `version` field denotes which API version the documentation applies to

## Best Practices

1. **Consistency**: Follow the template structure exactly
2. **Completeness**: Ensure all required sections are filled in
3. **Examples**: Include working code examples
4. **Cross-references**: Link to related documentation
5. **Version tracking**: Always include the correct version number (619045)

## Template Customization

While adhering to the general structure, templates can be customized:

1. Add additional sections if needed for clarity
2. Remove sections that aren't applicable to the specific component/system
3. Include specialized examples relevant to the topic
4. Add diagrams or additional explanations if helpful


