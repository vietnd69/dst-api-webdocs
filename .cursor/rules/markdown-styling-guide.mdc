---
description: This guide outlines how to use styling elements in Markdown documentation for the Don't Starve Together API documentation site, which is built with Docusaurus.
globs: 
alwaysApply: false
---
# Markdown Styling Guide for DST API Documentation

This guide outlines how to use styling elements in Markdown documentation for the Don't Starve Together API documentation site, which is built with Docusaurus.

## Text Styling with HTML and CSS

Docusaurus Markdown supports HTML and inline CSS, allowing for rich text formatting beyond standard Markdown.

### Color Formatting

Use `<span>` tags with inline styles to apply color to text:

```md
<span style={{color: "#888"}}>[readonly]</span>
<span style={{color: "#ff5555"}}>Important warning</span>
<span style={{color: "#55aa55"}}>Success message</span>
<span style={{color: "#5555ff"}}>Information note</span>
```

#### Standard Color Scheme

For consistency across documentation, use these standard colors:

- `#888` - Gray text for secondary information (e.g., [readonly] tags)
- `#ff5555` - Red text for warnings and critical information
- `#55aa55` - Green text for success states and positive information
- `#5555ff` - Blue text for informational notes
- `#aa55aa` - Purple text for special features or advanced topics

### Text Formatting

Combine HTML with CSS for advanced text formatting:

```md
<b>Bold text</b> or **Bold text**
<i>Italic text</i> or *Italic text*
<code>Inline code</code> or `Inline code`
<del>Strikethrough</del>
<mark>Highlighted text</mark>
<sup>Superscript</sup>
<sub>Subscript</sub>
```

### Combining Styles

Multiple styles can be combined:

```md
<span style={{color: "#ff5555"}}><b>Critical Warning</b></span>
<code style={{color: "#55aa55"}}>Success code</code>
```

## Admonitions (Note Boxes)

Docusaurus supports special callout boxes called admonitions:

```md
:::note
This is a note
:::

:::tip
This is a tip
:::

:::info
This is info
:::

:::caution
This is a caution
:::

:::danger
This is a danger warning
:::
```

### Custom Titles

Admonitions can have custom titles:

```md
:::note Custom Title
This is a note with a custom title
:::
```

## Tables with Styling

Tables can include styled elements:

```md
| Property | Type | Description |
|----------|------|-------------|
| name | string | The name of the entity |
| status | <span style={{color: "#5555ff"}}>Status</span> | Current status |
| isActive | <span style={{color: "#55aa55"}}>boolean</span> | Whether the entity is active |
```

## Code Blocks with Syntax Highlighting

Use triple backticks with language identifier for syntax highlighting:

````md
```lua
function MyFunction(param)
    -- This is Lua code with syntax highlighting
    return param * 2
end
```
````

### Line Highlighting

Highlight specific lines in code blocks:

````md
```lua {2-4,6}
function MyFunction(param)
    -- These lines will be highlighted
    local result = param * 2
    print("Result: " .. result)
    
    return result -- This line will also be highlighted
end
```
````

## Links and References

### Internal Links

Link to other documentation pages:

```md
[Entity System](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/entity-system.md)
```

### Anchor Links

Link to specific sections within a page:

```md
[See Properties Section](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/#properties)
```

### External Links

Link to external resources:

```md
[Lua Documentation](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/https:/www.lua.org/manual/5.4)
```

## Images with Styling

Images can be styled with HTML and CSS:

```md
<img src="path/to/image.png" alt="Description" width="300" style={{border: "1px solid #888", border-radius: "5px"}}" />
```

## Keyboard Shortcuts

Format keyboard shortcuts using `<kbd>` tags:

```md
Press <kbd>Ctrl</kbd> + <kbd>C</kbd> to copy
```

## Collapsible Sections

Create expandable content sections:

```md
<details>
<summary>Click to expand</summary>

This content is hidden by default and will be shown when the user clicks the header.

```lua
-- You can include code blocks and other markdown inside
function Example()
    return "This is inside a collapsible section"
end
```

</details>
```

## Tabs

Create tabbed content sections:

```md
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

<Tabs>
  <TabItem value="lua" label="Lua" default>

```lua
-- Lua code example
function Example()
    return "Hello from Lua"
end
```

  </TabItem>
  <TabItem value="pseudocode" label="Pseudocode">

```
// Pseudocode example
function Example() {
    return "Hello from pseudocode"
}
```

  </TabItem>
</Tabs>
```

## Best Practices

1. **Consistency**: Use the same styling patterns throughout the documentation
2. **Readability**: Don't overuse styling; prioritize readability over decoration
3. **Accessibility**: Ensure sufficient color contrast for all styled text
4. **Compatibility**: Test styled content in both light and dark themes
5. **Simplicity**: When standard Markdown is sufficient, prefer it over HTML/CSS

## Example: Property Documentation with Styling

```md
### children: Array<[BehaviorNode](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/behavior-node.md)> <span style={{color: "#888"}}>[readonly]</span>

The list of child nodes contained within this node. This is used to construct behavior trees hierarchically.

:::info
The order of children matters for priority nodes and sequence nodes.
:::

```lua
-- Create a priority node with ordered children
local root = PriorityNode({
    -- First child has highest priority
    RunAway(inst, "character", 4, 6), 
    -- Second child is only considered if first fails
    ChaseAndAttack(inst, 10)
})
```

<details>
<summary>Advanced usage</summary>

For complex behavior trees, you can nest nodes to create sophisticated AI:

```lua
local root = PriorityNode({
    SequenceNode({
        FindFood(inst),
        EatFood(inst)
    }),
    Wander(inst)
})
```

</details>

---



