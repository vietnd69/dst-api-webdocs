---
description: 
globs: *.md
alwaysApply: false
---
# Documentation Contribution Guidelines

This document outlines the guidelines for contributing to the Don't Starve Together API documentation.

## Contribution Process

1. **Identify Documentation Needs**:
   - Missing API documentation
   - Outdated information
   - Unclear explanations
   - Missing examples

2. **Create or Update Documentation**:
   - Follow the documentation standards
   - Place files in appropriate directories
   - Use consistent formatting
   - Include working code examples

3. **Submit Changes**:
   - Create a pull request with your changes
   - Provide a clear description of what you've added or changed
   - Reference any relevant issues

## Documentation Quality Checklist

Before submitting documentation, ensure it meets these quality standards:

- [ ] **Accuracy**: Information is technically accurate and up-to-date
- [ ] **Completeness**: All relevant aspects of the API are documented
- [ ] **Clarity**: Explanations are clear and understandable
- [ ] **Examples**: Includes working code examples
- [ ] **Formatting**: Follows the project's markdown formatting standards
- [ ] **Cross-References**: Links to related documentation where appropriate
- [ ] **Spelling/Grammar**: Text is free of spelling and grammatical errors

## Documentation Types

### API Reference Documentation

Documents the technical details of APIs, components, and functions:

- Function signatures and parameters
- Return values
- Component properties
- Events and callbacks
- Usage examples

### Guides and Tutorials

Step-by-step instructions for accomplishing specific tasks:

- Clear objectives and prerequisites
- Sequential steps with explanations
- Complete code examples
- Expected outcomes
- Troubleshooting tips

### Conceptual Documentation

Explains concepts, systems, and architecture:

- High-level overviews
- System interactions
- Design patterns
- Diagrams where helpful

## Style Guide

- Write in clear, concise language
- Use present tense ("The function returns..." not "The function will return...")
- Use active voice when possible
- Define acronyms and technical terms on first use
- Break complex information into digestible sections
- Use numbered lists for sequential steps
- Use bulleted lists for non-sequential items

## Updating Existing Documentation

When updating existing documentation:

1. Preserve the existing structure and style
2. Clearly mark deprecated features
3. Provide migration paths for breaking changes
4. Update all affected examples
5. Update cross-references as needed

## Example Contribution

For an example of a well-structured documentation contribution, see:
- [Component Documentation Example](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/components/health.md)
- [Guide Example](mdc:dst-api-webdocs/dst-api-webdocs/dst-api-webdocs/docs/api-vanilla/getting-started/first-mod.md)

